/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthState from './HealthState';
import NodeDeactivationInfo from './NodeDeactivationInfo';
import NodeId from './NodeId';
import NodeStatus from './NodeStatus';

/**
 * The NodeInfo model module.
 * @module model/NodeInfo
 * @version 6.3.0.9
 */
class NodeInfo {
    /**
     * Constructs a new <code>NodeInfo</code>.
     * Information about a node in Service Fabric cluster.
     * @alias module:model/NodeInfo
     */
    constructor() { 
        
        NodeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeInfo} obj Optional instance to populate.
     * @return {module:model/NodeInfo} The populated <code>NodeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeInfo();

            if (data.hasOwnProperty('CodeVersion')) {
                obj['CodeVersion'] = ApiClient.convertToType(data['CodeVersion'], 'String');
            }
            if (data.hasOwnProperty('ConfigVersion')) {
                obj['ConfigVersion'] = ApiClient.convertToType(data['ConfigVersion'], 'String');
            }
            if (data.hasOwnProperty('FaultDomain')) {
                obj['FaultDomain'] = ApiClient.convertToType(data['FaultDomain'], 'String');
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = NodeId.constructFromObject(data['Id']);
            }
            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('IpAddressOrFQDN')) {
                obj['IpAddressOrFQDN'] = ApiClient.convertToType(data['IpAddressOrFQDN'], 'String');
            }
            if (data.hasOwnProperty('IsSeedNode')) {
                obj['IsSeedNode'] = ApiClient.convertToType(data['IsSeedNode'], 'Boolean');
            }
            if (data.hasOwnProperty('IsStopped')) {
                obj['IsStopped'] = ApiClient.convertToType(data['IsStopped'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NodeDeactivationInfo')) {
                obj['NodeDeactivationInfo'] = NodeDeactivationInfo.constructFromObject(data['NodeDeactivationInfo']);
            }
            if (data.hasOwnProperty('NodeDownAt')) {
                obj['NodeDownAt'] = ApiClient.convertToType(data['NodeDownAt'], 'Date');
            }
            if (data.hasOwnProperty('NodeDownTimeInSeconds')) {
                obj['NodeDownTimeInSeconds'] = ApiClient.convertToType(data['NodeDownTimeInSeconds'], 'String');
            }
            if (data.hasOwnProperty('NodeStatus')) {
                obj['NodeStatus'] = NodeStatus.constructFromObject(data['NodeStatus']);
            }
            if (data.hasOwnProperty('NodeUpAt')) {
                obj['NodeUpAt'] = ApiClient.convertToType(data['NodeUpAt'], 'Date');
            }
            if (data.hasOwnProperty('NodeUpTimeInSeconds')) {
                obj['NodeUpTimeInSeconds'] = ApiClient.convertToType(data['NodeUpTimeInSeconds'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpgradeDomain')) {
                obj['UpgradeDomain'] = ApiClient.convertToType(data['UpgradeDomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CodeVersion'] && !(typeof data['CodeVersion'] === 'string' || data['CodeVersion'] instanceof String)) {
            throw new Error("Expected the field `CodeVersion` to be a primitive type in the JSON string but got " + data['CodeVersion']);
        }
        // ensure the json data is a string
        if (data['ConfigVersion'] && !(typeof data['ConfigVersion'] === 'string' || data['ConfigVersion'] instanceof String)) {
            throw new Error("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got " + data['ConfigVersion']);
        }
        // ensure the json data is a string
        if (data['FaultDomain'] && !(typeof data['FaultDomain'] === 'string' || data['FaultDomain'] instanceof String)) {
            throw new Error("Expected the field `FaultDomain` to be a primitive type in the JSON string but got " + data['FaultDomain']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          NodeId.validateJSON(data['Id']);
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }
        // ensure the json data is a string
        if (data['IpAddressOrFQDN'] && !(typeof data['IpAddressOrFQDN'] === 'string' || data['IpAddressOrFQDN'] instanceof String)) {
            throw new Error("Expected the field `IpAddressOrFQDN` to be a primitive type in the JSON string but got " + data['IpAddressOrFQDN']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `NodeDeactivationInfo`
        if (data['NodeDeactivationInfo']) { // data not null
          NodeDeactivationInfo.validateJSON(data['NodeDeactivationInfo']);
        }
        // ensure the json data is a string
        if (data['NodeDownTimeInSeconds'] && !(typeof data['NodeDownTimeInSeconds'] === 'string' || data['NodeDownTimeInSeconds'] instanceof String)) {
            throw new Error("Expected the field `NodeDownTimeInSeconds` to be a primitive type in the JSON string but got " + data['NodeDownTimeInSeconds']);
        }
        // ensure the json data is a string
        if (data['NodeUpTimeInSeconds'] && !(typeof data['NodeUpTimeInSeconds'] === 'string' || data['NodeUpTimeInSeconds'] instanceof String)) {
            throw new Error("Expected the field `NodeUpTimeInSeconds` to be a primitive type in the JSON string but got " + data['NodeUpTimeInSeconds']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpgradeDomain'] && !(typeof data['UpgradeDomain'] === 'string' || data['UpgradeDomain'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDomain` to be a primitive type in the JSON string but got " + data['UpgradeDomain']);
        }

        return true;
    }


}



/**
 * The version of Service Fabric binaries that the node is running.
 * @member {String} CodeVersion
 */
NodeInfo.prototype['CodeVersion'] = undefined;

/**
 * The version of Service Fabric cluster manifest that the node is using.
 * @member {String} ConfigVersion
 */
NodeInfo.prototype['ConfigVersion'] = undefined;

/**
 * The fault domain of the node.
 * @member {String} FaultDomain
 */
NodeInfo.prototype['FaultDomain'] = undefined;

/**
 * @member {module:model/HealthState} HealthState
 */
NodeInfo.prototype['HealthState'] = undefined;

/**
 * @member {module:model/NodeId} Id
 */
NodeInfo.prototype['Id'] = undefined;

/**
 * The ID representing the node instance. While the ID of the node is deterministically generated from the node name and remains same across restarts, the InstanceId changes every time node restarts.
 * @member {String} InstanceId
 */
NodeInfo.prototype['InstanceId'] = undefined;

/**
 * The IP address or fully qualified domain name of the node.
 * @member {String} IpAddressOrFQDN
 */
NodeInfo.prototype['IpAddressOrFQDN'] = undefined;

/**
 * Indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster.
 * @member {Boolean} IsSeedNode
 */
NodeInfo.prototype['IsSeedNode'] = undefined;

/**
 * Indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped, otherwise false.
 * @member {Boolean} IsStopped
 */
NodeInfo.prototype['IsStopped'] = undefined;

/**
 * The name of a Service Fabric node.
 * @member {String} Name
 */
NodeInfo.prototype['Name'] = undefined;

/**
 * @member {module:model/NodeDeactivationInfo} NodeDeactivationInfo
 */
NodeInfo.prototype['NodeDeactivationInfo'] = undefined;

/**
 * Date time in UTC when the node went down. If node has never been down then this value will be zero date time.
 * @member {Date} NodeDownAt
 */
NodeInfo.prototype['NodeDownAt'] = undefined;

/**
 * Time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.
 * @member {String} NodeDownTimeInSeconds
 */
NodeInfo.prototype['NodeDownTimeInSeconds'] = undefined;

/**
 * @member {module:model/NodeStatus} NodeStatus
 */
NodeInfo.prototype['NodeStatus'] = undefined;

/**
 * Date time in UTC when the node came up. If the node has never been up then this value will be zero date time.
 * @member {Date} NodeUpAt
 */
NodeInfo.prototype['NodeUpAt'] = undefined;

/**
 * Time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up.
 * @member {String} NodeUpTimeInSeconds
 */
NodeInfo.prototype['NodeUpTimeInSeconds'] = undefined;

/**
 * The type of the node.
 * @member {String} Type
 */
NodeInfo.prototype['Type'] = undefined;

/**
 * The upgrade domain of the node.
 * @member {String} UpgradeDomain
 */
NodeInfo.prototype['UpgradeDomain'] = undefined;






export default NodeInfo;

