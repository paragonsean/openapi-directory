/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyBatchInfo from './PropertyBatchInfo';
import PropertyBatchInfoKind from './PropertyBatchInfoKind';
import PropertyInfo from './PropertyInfo';

/**
 * The SuccessfulPropertyBatchInfo model module.
 * @module model/SuccessfulPropertyBatchInfo
 * @version 6.3.0.9
 */
class SuccessfulPropertyBatchInfo {
    /**
     * Constructs a new <code>SuccessfulPropertyBatchInfo</code>.
     * Derived from PropertyBatchInfo. Represents the property batch succeeding. Contains the results of any \&quot;Get\&quot; operations in the batch.
     * @alias module:model/SuccessfulPropertyBatchInfo
     * @extends module:model/PropertyBatchInfo
     * @implements module:model/PropertyBatchInfo
     * @param kind {module:model/PropertyBatchInfoKind} 
     */
    constructor(kind) { 
        PropertyBatchInfo.initialize(this, kind);
        SuccessfulPropertyBatchInfo.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
    }

    /**
     * Constructs a <code>SuccessfulPropertyBatchInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuccessfulPropertyBatchInfo} obj Optional instance to populate.
     * @return {module:model/SuccessfulPropertyBatchInfo} The populated <code>SuccessfulPropertyBatchInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuccessfulPropertyBatchInfo();
            PropertyBatchInfo.constructFromObject(data, obj);
            PropertyBatchInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('Properties')) {
                obj['Properties'] = ApiClient.convertToType(data['Properties'], {'String': PropertyInfo});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuccessfulPropertyBatchInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuccessfulPropertyBatchInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuccessfulPropertyBatchInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SuccessfulPropertyBatchInfo.RequiredProperties = ["Kind"];

/**
 * A map containing the properties that were requested through any \"Get\" property batch operations. The key represents the index of the \"Get\" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.
 * @member {Object.<String, module:model/PropertyInfo>} Properties
 */
SuccessfulPropertyBatchInfo.prototype['Properties'] = undefined;


// Implement PropertyBatchInfo interface:
/**
 * @member {module:model/PropertyBatchInfoKind} Kind
 */
PropertyBatchInfo.prototype['Kind'] = undefined;




export default SuccessfulPropertyBatchInfo;

