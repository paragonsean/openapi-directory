/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeImpact model module.
 * @module model/NodeImpact
 * @version 6.3.0.9
 */
class NodeImpact {
    /**
     * Constructs a new <code>NodeImpact</code>.
     * Describes the expected impact of a repair to a particular node.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
     * @alias module:model/NodeImpact
     * @param nodeName {String} The name of the impacted node.
     */
    constructor(nodeName) { 
        
        NodeImpact.initialize(this, nodeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodeName) { 
        obj['NodeName'] = nodeName;
    }

    /**
     * Constructs a <code>NodeImpact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeImpact} obj Optional instance to populate.
     * @return {module:model/NodeImpact} The populated <code>NodeImpact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeImpact();

            if (data.hasOwnProperty('ImpactLevel')) {
                obj['ImpactLevel'] = ApiClient.convertToType(data['ImpactLevel'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeImpact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeImpact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeImpact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ImpactLevel'] && !(typeof data['ImpactLevel'] === 'string' || data['ImpactLevel'] instanceof String)) {
            throw new Error("Expected the field `ImpactLevel` to be a primitive type in the JSON string but got " + data['ImpactLevel']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }

        return true;
    }


}

NodeImpact.RequiredProperties = ["NodeName"];

/**
 * The level of impact expected.
 * @member {module:model/NodeImpact.ImpactLevelEnum} ImpactLevel
 */
NodeImpact.prototype['ImpactLevel'] = undefined;

/**
 * The name of the impacted node.
 * @member {String} NodeName
 */
NodeImpact.prototype['NodeName'] = undefined;





/**
 * Allowed values for the <code>ImpactLevel</code> property.
 * @enum {String}
 * @readonly
 */
NodeImpact['ImpactLevelEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Restart"
     * @const
     */
    "Restart": "Restart",

    /**
     * value: "RemoveData"
     * @const
     */
    "RemoveData": "RemoveData",

    /**
     * value: "RemoveNode"
     * @const
     */
    "RemoveNode": "RemoveNode"
};



export default NodeImpact;

