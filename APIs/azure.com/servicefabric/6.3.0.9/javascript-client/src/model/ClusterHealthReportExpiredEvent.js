/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterEvent from './ClusterEvent';
import FabricEventKind from './FabricEventKind';

/**
 * The ClusterHealthReportExpiredEvent model module.
 * @module model/ClusterHealthReportExpiredEvent
 * @version 6.3.0.9
 */
class ClusterHealthReportExpiredEvent {
    /**
     * Constructs a new <code>ClusterHealthReportExpiredEvent</code>.
     * Cluster Health Report Expired event.
     * @alias module:model/ClusterHealthReportExpiredEvent
     * @extends module:model/ClusterEvent
     * @implements module:model/ClusterEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     * @param description {String} Description of report.
     * @param healthState {String} Describes the property health state.
     * @param property {String} Describes the property.
     * @param removeWhenExpired {Boolean} Indicates the removal when it expires.
     * @param sequenceNumber {Number} Sequence number of report.
     * @param sourceId {String} Id of report source.
     * @param sourceUtcTimestamp {Date} Source time.
     * @param timeToLiveMs {Number} Time to live in milli-seconds.
     */
    constructor(eventInstanceId, kind, timeStamp, description, healthState, property, removeWhenExpired, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs) { 
        ClusterEvent.initialize(this, eventInstanceId, kind, timeStamp);
        ClusterHealthReportExpiredEvent.initialize(this, eventInstanceId, kind, timeStamp, description, healthState, property, removeWhenExpired, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp, description, healthState, property, removeWhenExpired, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs) { 
        obj['Description'] = description;
        obj['HealthState'] = healthState;
        obj['Property'] = property;
        obj['RemoveWhenExpired'] = removeWhenExpired;
        obj['SequenceNumber'] = sequenceNumber;
        obj['SourceId'] = sourceId;
        obj['SourceUtcTimestamp'] = sourceUtcTimestamp;
        obj['TimeToLiveMs'] = timeToLiveMs;
    }

    /**
     * Constructs a <code>ClusterHealthReportExpiredEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterHealthReportExpiredEvent} obj Optional instance to populate.
     * @return {module:model/ClusterHealthReportExpiredEvent} The populated <code>ClusterHealthReportExpiredEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterHealthReportExpiredEvent();
            ClusterEvent.constructFromObject(data, obj);
            ClusterEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = ApiClient.convertToType(data['HealthState'], 'String');
            }
            if (data.hasOwnProperty('Property')) {
                obj['Property'] = ApiClient.convertToType(data['Property'], 'String');
            }
            if (data.hasOwnProperty('RemoveWhenExpired')) {
                obj['RemoveWhenExpired'] = ApiClient.convertToType(data['RemoveWhenExpired'], 'Boolean');
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('SourceId')) {
                obj['SourceId'] = ApiClient.convertToType(data['SourceId'], 'String');
            }
            if (data.hasOwnProperty('SourceUtcTimestamp')) {
                obj['SourceUtcTimestamp'] = ApiClient.convertToType(data['SourceUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('TimeToLiveMs')) {
                obj['TimeToLiveMs'] = ApiClient.convertToType(data['TimeToLiveMs'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterHealthReportExpiredEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterHealthReportExpiredEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterHealthReportExpiredEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['HealthState'] && !(typeof data['HealthState'] === 'string' || data['HealthState'] instanceof String)) {
            throw new Error("Expected the field `HealthState` to be a primitive type in the JSON string but got " + data['HealthState']);
        }
        // ensure the json data is a string
        if (data['Property'] && !(typeof data['Property'] === 'string' || data['Property'] instanceof String)) {
            throw new Error("Expected the field `Property` to be a primitive type in the JSON string but got " + data['Property']);
        }
        // ensure the json data is a string
        if (data['SourceId'] && !(typeof data['SourceId'] === 'string' || data['SourceId'] instanceof String)) {
            throw new Error("Expected the field `SourceId` to be a primitive type in the JSON string but got " + data['SourceId']);
        }

        return true;
    }


}

ClusterHealthReportExpiredEvent.RequiredProperties = ["Description", "HealthState", "Property", "RemoveWhenExpired", "SequenceNumber", "SourceId", "SourceUtcTimestamp", "TimeToLiveMs", "EventInstanceId", "Kind", "TimeStamp"];

/**
 * Description of report.
 * @member {String} Description
 */
ClusterHealthReportExpiredEvent.prototype['Description'] = undefined;

/**
 * Describes the property health state.
 * @member {String} HealthState
 */
ClusterHealthReportExpiredEvent.prototype['HealthState'] = undefined;

/**
 * Describes the property.
 * @member {String} Property
 */
ClusterHealthReportExpiredEvent.prototype['Property'] = undefined;

/**
 * Indicates the removal when it expires.
 * @member {Boolean} RemoveWhenExpired
 */
ClusterHealthReportExpiredEvent.prototype['RemoveWhenExpired'] = undefined;

/**
 * Sequence number of report.
 * @member {Number} SequenceNumber
 */
ClusterHealthReportExpiredEvent.prototype['SequenceNumber'] = undefined;

/**
 * Id of report source.
 * @member {String} SourceId
 */
ClusterHealthReportExpiredEvent.prototype['SourceId'] = undefined;

/**
 * Source time.
 * @member {Date} SourceUtcTimestamp
 */
ClusterHealthReportExpiredEvent.prototype['SourceUtcTimestamp'] = undefined;

/**
 * Time to live in milli-seconds.
 * @member {Number} TimeToLiveMs
 */
ClusterHealthReportExpiredEvent.prototype['TimeToLiveMs'] = undefined;


// Implement ClusterEvent interface:
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
ClusterEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
ClusterEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
ClusterEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
ClusterEvent.prototype['TimeStamp'] = undefined;




export default ClusterHealthReportExpiredEvent;

