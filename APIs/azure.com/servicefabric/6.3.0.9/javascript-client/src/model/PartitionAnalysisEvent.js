/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisEventMetadata from './AnalysisEventMetadata';
import FabricEventKind from './FabricEventKind';
import PartitionEvent from './PartitionEvent';

/**
 * The PartitionAnalysisEvent model module.
 * @module model/PartitionAnalysisEvent
 * @version 6.3.0.9
 */
class PartitionAnalysisEvent {
    /**
     * Constructs a new <code>PartitionAnalysisEvent</code>.
     * Represents the base for all Partition Analysis Events.
     * @alias module:model/PartitionAnalysisEvent
     * @extends module:model/PartitionEvent
     * @implements module:model/PartitionEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     * @param partitionId {String} An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
     * @param metadata {module:model/AnalysisEventMetadata} 
     */
    constructor(eventInstanceId, kind, timeStamp, partitionId, metadata) { 
        PartitionEvent.initialize(this, eventInstanceId, kind, timeStamp, partitionId);
        PartitionAnalysisEvent.initialize(this, eventInstanceId, kind, timeStamp, partitionId, metadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp, partitionId, metadata) { 
        obj['Metadata'] = metadata;
    }

    /**
     * Constructs a <code>PartitionAnalysisEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionAnalysisEvent} obj Optional instance to populate.
     * @return {module:model/PartitionAnalysisEvent} The populated <code>PartitionAnalysisEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionAnalysisEvent();
            PartitionEvent.constructFromObject(data, obj);
            PartitionEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = AnalysisEventMetadata.constructFromObject(data['Metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionAnalysisEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionAnalysisEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PartitionAnalysisEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Metadata`
        if (data['Metadata']) { // data not null
          AnalysisEventMetadata.validateJSON(data['Metadata']);
        }

        return true;
    }


}

PartitionAnalysisEvent.RequiredProperties = ["Metadata", "EventInstanceId", "Kind", "TimeStamp", "PartitionId"];

/**
 * @member {module:model/AnalysisEventMetadata} Metadata
 */
PartitionAnalysisEvent.prototype['Metadata'] = undefined;


// Implement PartitionEvent interface:
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
PartitionEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
PartitionEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
PartitionEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
PartitionEvent.prototype['TimeStamp'] = undefined;
/**
 * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
 * @member {String} PartitionId
 */
PartitionEvent.prototype['PartitionId'] = undefined;




export default PartitionAnalysisEvent;

