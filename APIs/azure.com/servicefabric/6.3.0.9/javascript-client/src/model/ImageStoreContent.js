/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileInfo from './FileInfo';
import FolderInfo from './FolderInfo';

/**
 * The ImageStoreContent model module.
 * @module model/ImageStoreContent
 * @version 6.3.0.9
 */
class ImageStoreContent {
    /**
     * Constructs a new <code>ImageStoreContent</code>.
     * Information about the image store content.
     * @alias module:model/ImageStoreContent
     */
    constructor() { 
        
        ImageStoreContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageStoreContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageStoreContent} obj Optional instance to populate.
     * @return {module:model/ImageStoreContent} The populated <code>ImageStoreContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageStoreContent();

            if (data.hasOwnProperty('StoreFiles')) {
                obj['StoreFiles'] = ApiClient.convertToType(data['StoreFiles'], [FileInfo]);
            }
            if (data.hasOwnProperty('StoreFolders')) {
                obj['StoreFolders'] = ApiClient.convertToType(data['StoreFolders'], [FolderInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageStoreContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageStoreContent</code>.
     */
    static validateJSON(data) {
        if (data['StoreFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['StoreFiles'])) {
                throw new Error("Expected the field `StoreFiles` to be an array in the JSON data but got " + data['StoreFiles']);
            }
            // validate the optional field `StoreFiles` (array)
            for (const item of data['StoreFiles']) {
                FileInfo.validateJSON(item);
            };
        }
        if (data['StoreFolders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['StoreFolders'])) {
                throw new Error("Expected the field `StoreFolders` to be an array in the JSON data but got " + data['StoreFolders']);
            }
            // validate the optional field `StoreFolders` (array)
            for (const item of data['StoreFolders']) {
                FolderInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of image store file info objects represents files found under the given image store relative path.
 * @member {Array.<module:model/FileInfo>} StoreFiles
 */
ImageStoreContent.prototype['StoreFiles'] = undefined;

/**
 * The list of image store folder info objects represents subfolders found under the given image store relative path.
 * @member {Array.<module:model/FolderInfo>} StoreFolders
 */
ImageStoreContent.prototype['StoreFolders'] = undefined;






export default ImageStoreContent;

