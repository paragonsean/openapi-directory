/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServiceTypeDescription from './ServiceTypeDescription';
import ServiceTypeExtensionDescription from './ServiceTypeExtensionDescription';

/**
 * The StatefulServiceTypeDescription model module.
 * @module model/StatefulServiceTypeDescription
 * @version 6.3.0.9
 */
class StatefulServiceTypeDescription {
    /**
     * Constructs a new <code>StatefulServiceTypeDescription</code>.
     * Describes a stateful service type defined in the service manifest of a provisioned application type.
     * @alias module:model/StatefulServiceTypeDescription
     * @extends module:model/ServiceTypeDescription
     * @implements module:model/ServiceTypeDescription
     * @param kind {module:model/ServiceKind} 
     */
    constructor(kind) { 
        ServiceTypeDescription.initialize(this, kind);
        StatefulServiceTypeDescription.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
    }

    /**
     * Constructs a <code>StatefulServiceTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatefulServiceTypeDescription} obj Optional instance to populate.
     * @return {module:model/StatefulServiceTypeDescription} The populated <code>StatefulServiceTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatefulServiceTypeDescription();
            ServiceTypeDescription.constructFromObject(data, obj);
            ServiceTypeDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('HasPersistedState')) {
                obj['HasPersistedState'] = ApiClient.convertToType(data['HasPersistedState'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatefulServiceTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatefulServiceTypeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatefulServiceTypeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

StatefulServiceTypeDescription.RequiredProperties = ["Kind"];

/**
 * A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
 * @member {Boolean} HasPersistedState
 */
StatefulServiceTypeDescription.prototype['HasPersistedState'] = undefined;


// Implement ServiceTypeDescription interface:
/**
 * List of service type extensions.
 * @member {Array.<module:model/ServiceTypeExtensionDescription>} Extensions
 */
ServiceTypeDescription.prototype['Extensions'] = undefined;
/**
 * Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.
 * @member {Boolean} IsStateful
 */
ServiceTypeDescription.prototype['IsStateful'] = undefined;
/**
 * @member {module:model/ServiceKind} Kind
 */
ServiceTypeDescription.prototype['Kind'] = undefined;
/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} LoadMetrics
 */
ServiceTypeDescription.prototype['LoadMetrics'] = undefined;
/**
 * The placement constraint to be used when instantiating this service in a Service Fabric cluster.
 * @member {String} PlacementConstraints
 */
ServiceTypeDescription.prototype['PlacementConstraints'] = undefined;
/**
 * List of service placement policy descriptions.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} ServicePlacementPolicies
 */
ServiceTypeDescription.prototype['ServicePlacementPolicies'] = undefined;
/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
ServiceTypeDescription.prototype['ServiceTypeName'] = undefined;




export default StatefulServiceTypeDescription;

