/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeployedApplicationHealthStateFilter from './DeployedApplicationHealthStateFilter';
import ServiceHealthStateFilter from './ServiceHealthStateFilter';

/**
 * The ApplicationHealthStateFilter model module.
 * @module model/ApplicationHealthStateFilter
 * @version 6.3.0.9
 */
class ApplicationHealthStateFilter {
    /**
     * Constructs a new <code>ApplicationHealthStateFilter</code>.
     * Defines matching criteria to determine whether a application should be included in the cluster health chunk. One filter can match zero, one or multiple applications, depending on its properties.
     * @alias module:model/ApplicationHealthStateFilter
     */
    constructor() { 
        
        ApplicationHealthStateFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationHealthStateFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationHealthStateFilter} obj Optional instance to populate.
     * @return {module:model/ApplicationHealthStateFilter} The populated <code>ApplicationHealthStateFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationHealthStateFilter();

            if (data.hasOwnProperty('ApplicationNameFilter')) {
                obj['ApplicationNameFilter'] = ApiClient.convertToType(data['ApplicationNameFilter'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeNameFilter')) {
                obj['ApplicationTypeNameFilter'] = ApiClient.convertToType(data['ApplicationTypeNameFilter'], 'String');
            }
            if (data.hasOwnProperty('DeployedApplicationFilters')) {
                obj['DeployedApplicationFilters'] = ApiClient.convertToType(data['DeployedApplicationFilters'], [DeployedApplicationHealthStateFilter]);
            }
            if (data.hasOwnProperty('HealthStateFilter')) {
                obj['HealthStateFilter'] = ApiClient.convertToType(data['HealthStateFilter'], 'Number');
            }
            if (data.hasOwnProperty('ServiceFilters')) {
                obj['ServiceFilters'] = ApiClient.convertToType(data['ServiceFilters'], [ServiceHealthStateFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationHealthStateFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationHealthStateFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ApplicationNameFilter'] && !(typeof data['ApplicationNameFilter'] === 'string' || data['ApplicationNameFilter'] instanceof String)) {
            throw new Error("Expected the field `ApplicationNameFilter` to be a primitive type in the JSON string but got " + data['ApplicationNameFilter']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeNameFilter'] && !(typeof data['ApplicationTypeNameFilter'] === 'string' || data['ApplicationTypeNameFilter'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeNameFilter` to be a primitive type in the JSON string but got " + data['ApplicationTypeNameFilter']);
        }
        if (data['DeployedApplicationFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeployedApplicationFilters'])) {
                throw new Error("Expected the field `DeployedApplicationFilters` to be an array in the JSON data but got " + data['DeployedApplicationFilters']);
            }
            // validate the optional field `DeployedApplicationFilters` (array)
            for (const item of data['DeployedApplicationFilters']) {
                DeployedApplicationHealthStateFilter.validateJSON(item);
            };
        }
        if (data['ServiceFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ServiceFilters'])) {
                throw new Error("Expected the field `ServiceFilters` to be an array in the JSON data but got " + data['ServiceFilters']);
            }
            // validate the optional field `ServiceFilters` (array)
            for (const item of data['ServiceFilters']) {
                ServiceHealthStateFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists. If the application doesn't exist, no application is returned in the cluster health chunk based on this filter. If the application exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.
 * @member {String} ApplicationNameFilter
 */
ApplicationHealthStateFilter.prototype['ApplicationNameFilter'] = undefined;

/**
 * The name of the application type that matches the filter. If specified, the filter is applied only to applications of the selected application type, if any exists. If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter. Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.
 * @member {String} ApplicationTypeNameFilter
 */
ApplicationHealthStateFilter.prototype['ApplicationTypeNameFilter'] = undefined;

/**
 * Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter. If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple deployed application filters. For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node.
 * @member {Array.<module:model/DeployedApplicationHealthStateFilter>} DeployedApplicationFilters
 */
ApplicationHealthStateFilter.prototype['DeployedApplicationFilters'] = undefined;

/**
 * The filter for the health state of the applications. It allows selecting applications if they match the desired health states. The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
 * @member {Number} HealthStateFilter
 */
ApplicationHealthStateFilter.prototype['HealthStateFilter'] = undefined;

/**
 * Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter. If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple service filters. For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name.
 * @member {Array.<module:model/ServiceHealthStateFilter>} ServiceFilters
 */
ApplicationHealthStateFilter.prototype['ServiceFilters'] = undefined;






export default ApplicationHealthStateFilter;

