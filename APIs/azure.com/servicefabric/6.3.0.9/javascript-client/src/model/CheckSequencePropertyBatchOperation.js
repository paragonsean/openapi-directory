/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyBatchOperation from './PropertyBatchOperation';
import PropertyBatchOperationKind from './PropertyBatchOperationKind';

/**
 * The CheckSequencePropertyBatchOperation model module.
 * @module model/CheckSequencePropertyBatchOperation
 * @version 6.3.0.9
 */
class CheckSequencePropertyBatchOperation {
    /**
     * Constructs a new <code>CheckSequencePropertyBatchOperation</code>.
     * Compares the Sequence Number of a property with the SequenceNumber argument. A property&#39;s sequence number can be thought of as that property&#39;s version. Every time the property is modified, its sequence number is increased. The sequence number can be found in a property&#39;s metadata. The comparison fails if the sequence numbers are not equal. CheckSequencePropertyBatchOperation is generally used as a precondition for the write operations in the batch. Note that if one PropertyBatchOperation in a PropertyBatch fails, the entire batch fails and cannot be committed in a transactional manner.
     * @alias module:model/CheckSequencePropertyBatchOperation
     * @extends module:model/PropertyBatchOperation
     * @implements module:model/PropertyBatchOperation
     * @param kind {module:model/PropertyBatchOperationKind} 
     * @param propertyName {String} The name of the Service Fabric property.
     */
    constructor(kind, propertyName) { 
        PropertyBatchOperation.initialize(this, kind, propertyName);
        CheckSequencePropertyBatchOperation.initialize(this, kind, propertyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, propertyName) { 
        obj['SequenceNumber'] = sequenceNumber;
    }

    /**
     * Constructs a <code>CheckSequencePropertyBatchOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckSequencePropertyBatchOperation} obj Optional instance to populate.
     * @return {module:model/CheckSequencePropertyBatchOperation} The populated <code>CheckSequencePropertyBatchOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckSequencePropertyBatchOperation();
            PropertyBatchOperation.constructFromObject(data, obj);
            PropertyBatchOperation.constructFromObject(data, obj);

            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckSequencePropertyBatchOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckSequencePropertyBatchOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckSequencePropertyBatchOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['SequenceNumber'] && !(typeof data['SequenceNumber'] === 'string' || data['SequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got " + data['SequenceNumber']);
        }

        return true;
    }


}

CheckSequencePropertyBatchOperation.RequiredProperties = ["SequenceNumber", "Kind", "PropertyName"];

/**
 * The expected sequence number.
 * @member {String} SequenceNumber
 */
CheckSequencePropertyBatchOperation.prototype['SequenceNumber'] = undefined;


// Implement PropertyBatchOperation interface:
/**
 * @member {module:model/PropertyBatchOperationKind} Kind
 */
PropertyBatchOperation.prototype['Kind'] = undefined;
/**
 * The name of the Service Fabric property.
 * @member {String} PropertyName
 */
PropertyBatchOperation.prototype['PropertyName'] = undefined;




export default CheckSequencePropertyBatchOperation;

