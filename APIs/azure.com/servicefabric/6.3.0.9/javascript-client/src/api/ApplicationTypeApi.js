/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationTypeManifest from '../model/ApplicationTypeManifest';
import FabricError from '../model/FabricError';
import PagedApplicationTypeInfoList from '../model/PagedApplicationTypeInfoList';
import ProvisionApplicationTypeDescriptionBase from '../model/ProvisionApplicationTypeDescriptionBase';
import UnprovisionApplicationTypeDescriptionInfo from '../model/UnprovisionApplicationTypeDescriptionInfo';

/**
* ApplicationType service.
* @module api/ApplicationTypeApi
* @version 6.3.0.9
*/
export default class ApplicationTypeApi {

    /**
    * Constructs a new ApplicationTypeApi. 
    * @alias module:api/ApplicationTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApplicationManifest operation.
     * @callback module:api/ApplicationTypeApi~getApplicationManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationTypeManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the manifest describing an application type.
     * The response contains the application manifest XML as a string.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} applicationTypeName The name of the application type.
     * @param {String} applicationTypeVersion The version of the application type.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ApplicationTypeApi~getApplicationManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationTypeManifest}
     */
    getApplicationManifest(apiVersion, applicationTypeName, applicationTypeVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getApplicationManifest");
      }
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling getApplicationManifest");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling getApplicationManifest");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'ApplicationTypeVersion': applicationTypeVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationTypeManifest;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationTypeInfoList operation.
     * @callback module:api/ApplicationTypeApi~getApplicationTypeInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedApplicationTypeInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of application types in the Service Fabric cluster.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [applicationTypeDefinitionKindFilter = 0)] Used to filter on ApplicationTypeDefinitionKind which is the mechanism used to define a Service Fabric application type. - Default - Default value, which performs the same function as selecting \"All\". The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.
     * @param {Boolean} [excludeApplicationParameters = false)] The flag that specifies whether application parameters will be excluded from the result.
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {Number} [maxResults = 0)] The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ApplicationTypeApi~getApplicationTypeInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedApplicationTypeInfoList}
     */
    getApplicationTypeInfoList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getApplicationTypeInfoList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'ApplicationTypeDefinitionKindFilter': opts['applicationTypeDefinitionKindFilter'],
        'ExcludeApplicationParameters': opts['excludeApplicationParameters'],
        'ContinuationToken': opts['continuationToken'],
        'MaxResults': opts['maxResults'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedApplicationTypeInfoList;
      return this.apiClient.callApi(
        '/ApplicationTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationTypeInfoListByName operation.
     * @callback module:api/ApplicationTypeApi~getApplicationTypeInfoListByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedApplicationTypeInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of application types in the Service Fabric cluster matching exactly the specified name.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status, and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. For example, if there are 10 application types but a page only fits the first three application types, or if max results is set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} applicationTypeName The name of the application type.
     * @param {Object} opts Optional parameters
     * @param {String} [applicationTypeVersion] The version of the application type.
     * @param {Boolean} [excludeApplicationParameters = false)] The flag that specifies whether application parameters will be excluded from the result.
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {Number} [maxResults = 0)] The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ApplicationTypeApi~getApplicationTypeInfoListByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedApplicationTypeInfoList}
     */
    getApplicationTypeInfoListByName(apiVersion, applicationTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getApplicationTypeInfoListByName");
      }
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling getApplicationTypeInfoListByName");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'ApplicationTypeVersion': opts['applicationTypeVersion'],
        'ExcludeApplicationParameters': opts['excludeApplicationParameters'],
        'ContinuationToken': opts['continuationToken'],
        'MaxResults': opts['maxResults'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedApplicationTypeInfoList;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionApplicationType operation.
     * @callback module:api/ApplicationTypeApi~provisionApplicationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions or registers a Service Fabric application type with the cluster using the '.sfpkg' package in the external store or using the application package in the image store.
     * Provisions a Service Fabric application type with the cluster. The provision is required before any new applications can be instantiated. The provision operation can be performed either on the application package specified by the relativePathInImageStore, or by using the URI of the external '.sfpkg'.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {module:model/ProvisionApplicationTypeDescriptionBase} provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision application type description which supports either image store-based provision or external store-based provision.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ApplicationTypeApi~provisionApplicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    provisionApplicationType(apiVersion, provisionApplicationTypeDescriptionBaseRequiredBodyParam, opts, callback) {
      opts = opts || {};
      let postBody = provisionApplicationTypeDescriptionBaseRequiredBodyParam;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling provisionApplicationType");
      }
      // verify the required parameter 'provisionApplicationTypeDescriptionBaseRequiredBodyParam' is set
      if (provisionApplicationTypeDescriptionBaseRequiredBodyParam === undefined || provisionApplicationTypeDescriptionBaseRequiredBodyParam === null) {
        throw new Error("Missing the required parameter 'provisionApplicationTypeDescriptionBaseRequiredBodyParam' when calling provisionApplicationType");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ApplicationTypes/$/Provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unprovisionApplicationType operation.
     * @callback module:api/ApplicationTypeApi~unprovisionApplicationTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes or unregisters a Service Fabric application type from the cluster.
     * This operation can only be performed if all application instances of the application type have been deleted. Once the application type is unregistered, no new application instances can be created for this particular application type.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} applicationTypeName The name of the application type.
     * @param {module:model/UnprovisionApplicationTypeDescriptionInfo} unprovisionApplicationTypeDescriptionInfo The relative path for the application package in the image store specified during the prior copy operation.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ApplicationTypeApi~unprovisionApplicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unprovisionApplicationType(apiVersion, applicationTypeName, unprovisionApplicationTypeDescriptionInfo, opts, callback) {
      opts = opts || {};
      let postBody = unprovisionApplicationTypeDescriptionInfo;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling unprovisionApplicationType");
      }
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling unprovisionApplicationType");
      }
      // verify the required parameter 'unprovisionApplicationTypeDescriptionInfo' is set
      if (unprovisionApplicationTypeDescriptionInfo === undefined || unprovisionApplicationTypeDescriptionInfo === null) {
        throw new Error("Missing the required parameter 'unprovisionApplicationTypeDescriptionInfo' when calling unprovisionApplicationType");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/Unprovision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
