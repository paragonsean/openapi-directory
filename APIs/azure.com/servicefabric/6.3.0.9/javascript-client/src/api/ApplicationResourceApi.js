/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationResourceDescription from '../model/ApplicationResourceDescription';
import FabricError from '../model/FabricError';
import PagedServiceResourceDescriptionList from '../model/PagedServiceResourceDescriptionList';
import PagedServiceResourceReplicaDescriptionList from '../model/PagedServiceResourceReplicaDescriptionList';
import ServiceResourceDescription from '../model/ServiceResourceDescription';
import ServiceResourceReplicaDescription from '../model/ServiceResourceReplicaDescription';

/**
* ApplicationResource service.
* @module api/ApplicationResourceApi
* @version 6.3.0.9
*/
export default class ApplicationResourceApi {

    /**
    * Constructs a new ApplicationResourceApi. 
    * @alias module:api/ApplicationResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplicationResource operation.
     * @callback module:api/ApplicationResourceApi~createApplicationResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an application resource.
     * Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {module:model/ApplicationResourceDescription} applicationResourceDescription Description for creating an application resource.
     * @param {module:api/ApplicationResourceApi~createApplicationResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createApplicationResource(apiVersion, applicationResourceName, applicationResourceDescription, callback) {
      let postBody = applicationResourceDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createApplicationResource");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling createApplicationResource");
      }
      // verify the required parameter 'applicationResourceDescription' is set
      if (applicationResourceDescription === undefined || applicationResourceDescription === null) {
        throw new Error("Missing the required parameter 'applicationResourceDescription' when calling createApplicationResource");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationResource operation.
     * @callback module:api/ApplicationResourceApi~deleteApplicationResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified application.
     * Deletes the application identified by the name.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {module:api/ApplicationResourceApi~deleteApplicationResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplicationResource(apiVersion, applicationResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteApplicationResource");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling deleteApplicationResource");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationResource operation.
     * @callback module:api/ApplicationResourceApi~getApplicationResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResourceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application with the given name.
     * Gets the application with the given name. This includes the information about the application's services and other runtime information.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {module:api/ApplicationResourceApi~getApplicationResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResourceDescription}
     */
    getApplicationResource(apiVersion, applicationResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getApplicationResource");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling getApplicationResource");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationResourceDescription;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplica operation.
     * @callback module:api/ApplicationResourceApi~getReplicaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResourceReplicaDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific replica of a given service in an application resource.
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {String} serviceResourceName Service Fabric service resource name.
     * @param {String} replicaName Service Fabric replica name.
     * @param {module:api/ApplicationResourceApi~getReplicaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResourceReplicaDescription}
     */
    getReplica(apiVersion, applicationResourceName, serviceResourceName, replicaName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReplica");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling getReplica");
      }
      // verify the required parameter 'serviceResourceName' is set
      if (serviceResourceName === undefined || serviceResourceName === null) {
        throw new Error("Missing the required parameter 'serviceResourceName' when calling getReplica");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling getReplica");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName,
        'serviceResourceName': serviceResourceName,
        'replicaName': replicaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceResourceReplicaDescription;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplicas operation.
     * @callback module:api/ApplicationResourceApi~getReplicasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedServiceResourceReplicaDescriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets replicas of a given service in an application resource.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {String} serviceResourceName Service Fabric service resource name.
     * @param {module:api/ApplicationResourceApi~getReplicasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedServiceResourceReplicaDescriptionList}
     */
    getReplicas(apiVersion, applicationResourceName, serviceResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getReplicas");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling getReplicas");
      }
      // verify the required parameter 'serviceResourceName' is set
      if (serviceResourceName === undefined || serviceResourceName === null) {
        throw new Error("Missing the required parameter 'serviceResourceName' when calling getReplicas");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName,
        'serviceResourceName': serviceResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedServiceResourceReplicaDescriptionList;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/replicas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/ApplicationResourceApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResourceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the description of the specified service in an application resource.
     * Gets the description of the service resource.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {String} serviceResourceName Service Fabric service resource name.
     * @param {module:api/ApplicationResourceApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResourceDescription}
     */
    getService(apiVersion, applicationResourceName, serviceResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getService");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling getService");
      }
      // verify the required parameter 'serviceResourceName' is set
      if (serviceResourceName === undefined || serviceResourceName === null) {
        throw new Error("Missing the required parameter 'serviceResourceName' when calling getService");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName,
        'serviceResourceName': serviceResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceResourceDescription;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServices operation.
     * @callback module:api/ApplicationResourceApi~getServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedServiceResourceDescriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the services in the application resource.
     * The operation returns the service descriptions of all the services in the application resource. 
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.3-preview'.
     * @param {String} applicationResourceName Service Fabric application resource name.
     * @param {module:api/ApplicationResourceApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedServiceResourceDescriptionList}
     */
    getServices(apiVersion, applicationResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getServices");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling getServices");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedServiceResourceDescriptionList;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}/Services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
