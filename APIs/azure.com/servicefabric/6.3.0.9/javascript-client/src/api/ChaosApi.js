/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Chaos from '../model/Chaos';
import ChaosEventsSegment from '../model/ChaosEventsSegment';
import ChaosParameters from '../model/ChaosParameters';
import ChaosScheduleDescription from '../model/ChaosScheduleDescription';
import FabricError from '../model/FabricError';

/**
* Chaos service.
* @module api/ChaosApi
* @version 6.3.0.9
*/
export default class ChaosApi {

    /**
    * Constructs a new ChaosApi. 
    * @alias module:api/ChaosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChaos operation.
     * @callback module:api/ChaosApi~getChaosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chaos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of Chaos.
     * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used for running Chaos and the status of the Chaos Schedule.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~getChaosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chaos}
     */
    getChaos(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getChaos");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chaos;
      return this.apiClient.callApi(
        '/Tools/Chaos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChaosEvents operation.
     * @callback module:api/ChaosApi~getChaosEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChaosEventsSegment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the next segment of the Chaos events based on the continuation token or the time range.
     * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the start of a new segment of Chaos events, you can specify the time range through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time range in the same call. When there are more than 100 Chaos events, the Chaos events are returned in multiple segments where a segment contains no more than 100 Chaos events and to get the next segment you make a call to this API with the continuation token.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {String} [startTimeUtc] The Windows file time representing the start time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param {String} [endTimeUtc] The Windows file time representing the end time of the time range for which a Chaos report is to be generated. Consult [DateTime.ToFileTimeUtc Method](https://msdn.microsoft.com/library/system.datetime.tofiletimeutc(v=vs.110).aspx) for details.
     * @param {Number} [maxResults = 0)] The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~getChaosEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChaosEventsSegment}
     */
    getChaosEvents(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getChaosEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'ContinuationToken': opts['continuationToken'],
        'StartTimeUtc': opts['startTimeUtc'],
        'EndTimeUtc': opts['endTimeUtc'],
        'MaxResults': opts['maxResults'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChaosEventsSegment;
      return this.apiClient.callApi(
        '/Tools/Chaos/Events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChaosSchedule operation.
     * @callback module:api/ChaosApi~getChaosScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChaosScheduleDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Chaos Schedule defining when and how to run Chaos.
     * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how to run Chaos.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~getChaosScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChaosScheduleDescription}
     */
    getChaosSchedule(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getChaosSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChaosScheduleDescription;
      return this.apiClient.callApi(
        '/Tools/Chaos/Schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postChaosSchedule operation.
     * @callback module:api/ChaosApi~postChaosScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the schedule used by Chaos.
     * Chaos will automatically schedule runs based on the Chaos Schedule. The Chaos Schedule will be updated if the provided version matches the version on the server. When updating the Chaos Schedule, the version on the server is incremented by 1. The version on the server will wrap back to 0 after reaching a large number. If Chaos is running when this call is made, the call will fail.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {module:model/ChaosScheduleDescription} chaosSchedule Describes the schedule used by Chaos.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~postChaosScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postChaosSchedule(apiVersion, chaosSchedule, opts, callback) {
      opts = opts || {};
      let postBody = chaosSchedule;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling postChaosSchedule");
      }
      // verify the required parameter 'chaosSchedule' is set
      if (chaosSchedule === undefined || chaosSchedule === null) {
        throw new Error("Missing the required parameter 'chaosSchedule' when calling postChaosSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Tools/Chaos/Schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startChaos operation.
     * @callback module:api/ChaosApi~startChaosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts Chaos in the cluster.
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for more details.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {module:model/ChaosParameters} chaosParameters Describes all the parameters to configure a Chaos run.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~startChaosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startChaos(apiVersion, chaosParameters, opts, callback) {
      opts = opts || {};
      let postBody = chaosParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startChaos");
      }
      // verify the required parameter 'chaosParameters' is set
      if (chaosParameters === undefined || chaosParameters === null) {
        throw new Error("Missing the required parameter 'chaosParameters' when calling startChaos");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Tools/Chaos/$/Start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopChaos operation.
     * @callback module:api/ChaosApi~stopChaosCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops Chaos if it is running in the cluster and put the Chaos Schedule in a stopped state.
     * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are complete. The current Chaos Schedule is put into a stopped state. Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ChaosApi~stopChaosCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopChaos(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling stopChaos");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Tools/Chaos/$/Stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
