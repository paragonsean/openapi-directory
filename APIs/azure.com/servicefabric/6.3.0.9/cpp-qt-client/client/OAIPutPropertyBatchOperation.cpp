/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPropertyBatchOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPropertyBatchOperation::OAIPutPropertyBatchOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPropertyBatchOperation::OAIPutPropertyBatchOperation() {
    this->initializeModel();
}

OAIPutPropertyBatchOperation::~OAIPutPropertyBatchOperation() {}

void OAIPutPropertyBatchOperation::initializeModel() {

    m_custom_type_id_isSet = false;
    m_custom_type_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;
}

void OAIPutPropertyBatchOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPropertyBatchOperation::fromJsonObject(QJsonObject json) {

    m_custom_type_id_isValid = ::OpenAPI::fromJsonValue(m_custom_type_id, json[QString("CustomTypeId")]);
    m_custom_type_id_isSet = !json[QString("CustomTypeId")].isNull() && m_custom_type_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("PropertyName")]);
    m_property_name_isSet = !json[QString("PropertyName")].isNull() && m_property_name_isValid;
}

QString OAIPutPropertyBatchOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPropertyBatchOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_type_id_isSet) {
        obj.insert(QString("CustomTypeId"), ::OpenAPI::toJsonValue(m_custom_type_id));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("PropertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    return obj;
}

QString OAIPutPropertyBatchOperation::getCustomTypeId() const {
    return m_custom_type_id;
}
void OAIPutPropertyBatchOperation::setCustomTypeId(const QString &custom_type_id) {
    m_custom_type_id = custom_type_id;
    m_custom_type_id_isSet = true;
}

bool OAIPutPropertyBatchOperation::is_custom_type_id_Set() const{
    return m_custom_type_id_isSet;
}

bool OAIPutPropertyBatchOperation::is_custom_type_id_Valid() const{
    return m_custom_type_id_isValid;
}

OAIPropertyValue OAIPutPropertyBatchOperation::getValue() const {
    return m_value;
}
void OAIPutPropertyBatchOperation::setValue(const OAIPropertyValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPutPropertyBatchOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPutPropertyBatchOperation::is_value_Valid() const{
    return m_value_isValid;
}

OAIPropertyBatchOperationKind OAIPutPropertyBatchOperation::getKind() const {
    return m_kind;
}
void OAIPutPropertyBatchOperation::setKind(const OAIPropertyBatchOperationKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPutPropertyBatchOperation::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPutPropertyBatchOperation::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPutPropertyBatchOperation::getPropertyName() const {
    return m_property_name;
}
void OAIPutPropertyBatchOperation::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAIPutPropertyBatchOperation::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAIPutPropertyBatchOperation::is_property_name_Valid() const{
    return m_property_name_isValid;
}

bool OAIPutPropertyBatchOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPropertyBatchOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m_kind_isValid && m_property_name_isValid && true;
}

} // namespace OpenAPI
