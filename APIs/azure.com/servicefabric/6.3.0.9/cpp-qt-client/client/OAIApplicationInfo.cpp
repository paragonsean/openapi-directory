/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationInfo::OAIApplicationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationInfo::OAIApplicationInfo() {
    this->initializeModel();
}

OAIApplicationInfo::~OAIApplicationInfo() {}

void OAIApplicationInfo::initializeModel() {

    m_application_definition_kind_isSet = false;
    m_application_definition_kind_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_type_version_isSet = false;
    m_type_version_isValid = false;
}

void OAIApplicationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationInfo::fromJsonObject(QJsonObject json) {

    m_application_definition_kind_isValid = ::OpenAPI::fromJsonValue(m_application_definition_kind, json[QString("ApplicationDefinitionKind")]);
    m_application_definition_kind_isSet = !json[QString("ApplicationDefinitionKind")].isNull() && m_application_definition_kind_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_type_version_isValid = ::OpenAPI::fromJsonValue(m_type_version, json[QString("TypeVersion")]);
    m_type_version_isSet = !json[QString("TypeVersion")].isNull() && m_type_version_isValid;
}

QString OAIApplicationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_application_definition_kind.isSet()) {
        obj.insert(QString("ApplicationDefinitionKind"), ::OpenAPI::toJsonValue(m_application_definition_kind));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_type_version_isSet) {
        obj.insert(QString("TypeVersion"), ::OpenAPI::toJsonValue(m_type_version));
    }
    return obj;
}

OAIApplicationDefinitionKind OAIApplicationInfo::getApplicationDefinitionKind() const {
    return m_application_definition_kind;
}
void OAIApplicationInfo::setApplicationDefinitionKind(const OAIApplicationDefinitionKind &application_definition_kind) {
    m_application_definition_kind = application_definition_kind;
    m_application_definition_kind_isSet = true;
}

bool OAIApplicationInfo::is_application_definition_kind_Set() const{
    return m_application_definition_kind_isSet;
}

bool OAIApplicationInfo::is_application_definition_kind_Valid() const{
    return m_application_definition_kind_isValid;
}

OAIHealthState OAIApplicationInfo::getHealthState() const {
    return m_health_state;
}
void OAIApplicationInfo::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIApplicationInfo::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIApplicationInfo::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIApplicationInfo::getId() const {
    return m_id;
}
void OAIApplicationInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApplicationInfo::getName() const {
    return m_name;
}
void OAIApplicationInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationInfo::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIApplicationParameter> OAIApplicationInfo::getParameters() const {
    return m_parameters;
}
void OAIApplicationInfo::setParameters(const QList<OAIApplicationParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIApplicationInfo::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIApplicationInfo::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIApplicationStatus OAIApplicationInfo::getStatus() const {
    return m_status;
}
void OAIApplicationInfo::setStatus(const OAIApplicationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApplicationInfo::getTypeName() const {
    return m_type_name;
}
void OAIApplicationInfo::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIApplicationInfo::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIApplicationInfo::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIApplicationInfo::getTypeVersion() const {
    return m_type_version;
}
void OAIApplicationInfo::setTypeVersion(const QString &type_version) {
    m_type_version = type_version;
    m_type_version_isSet = true;
}

bool OAIApplicationInfo::is_type_version_Set() const{
    return m_type_version_isSet;
}

bool OAIApplicationInfo::is_type_version_Valid() const{
    return m_type_version_isValid;
}

bool OAIApplicationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_definition_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
