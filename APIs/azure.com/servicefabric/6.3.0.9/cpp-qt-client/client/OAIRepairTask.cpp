/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairTask::OAIRepairTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairTask::OAIRepairTask() {
    this->initializeModel();
}

OAIRepairTask::~OAIRepairTask() {}

void OAIRepairTask::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_executor_isSet = false;
    m_executor_isValid = false;

    m_executor_data_isSet = false;
    m_executor_data_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_impact_isSet = false;
    m_impact_isValid = false;

    m_perform_preparing_health_check_isSet = false;
    m_perform_preparing_health_check_isValid = false;

    m_perform_restoring_health_check_isSet = false;
    m_perform_restoring_health_check_isValid = false;

    m_preparing_health_check_state_isSet = false;
    m_preparing_health_check_state_isValid = false;

    m_restoring_health_check_state_isSet = false;
    m_restoring_health_check_state_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_result_details_isSet = false;
    m_result_details_isValid = false;

    m_result_status_isSet = false;
    m_result_status_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRepairTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairTask::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_executor_isValid = ::OpenAPI::fromJsonValue(m_executor, json[QString("Executor")]);
    m_executor_isSet = !json[QString("Executor")].isNull() && m_executor_isValid;

    m_executor_data_isValid = ::OpenAPI::fromJsonValue(m_executor_data, json[QString("ExecutorData")]);
    m_executor_data_isSet = !json[QString("ExecutorData")].isNull() && m_executor_data_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("History")]);
    m_history_isSet = !json[QString("History")].isNull() && m_history_isValid;

    m_impact_isValid = ::OpenAPI::fromJsonValue(m_impact, json[QString("Impact")]);
    m_impact_isSet = !json[QString("Impact")].isNull() && m_impact_isValid;

    m_perform_preparing_health_check_isValid = ::OpenAPI::fromJsonValue(m_perform_preparing_health_check, json[QString("PerformPreparingHealthCheck")]);
    m_perform_preparing_health_check_isSet = !json[QString("PerformPreparingHealthCheck")].isNull() && m_perform_preparing_health_check_isValid;

    m_perform_restoring_health_check_isValid = ::OpenAPI::fromJsonValue(m_perform_restoring_health_check, json[QString("PerformRestoringHealthCheck")]);
    m_perform_restoring_health_check_isSet = !json[QString("PerformRestoringHealthCheck")].isNull() && m_perform_restoring_health_check_isValid;

    m_preparing_health_check_state_isValid = ::OpenAPI::fromJsonValue(m_preparing_health_check_state, json[QString("PreparingHealthCheckState")]);
    m_preparing_health_check_state_isSet = !json[QString("PreparingHealthCheckState")].isNull() && m_preparing_health_check_state_isValid;

    m_restoring_health_check_state_isValid = ::OpenAPI::fromJsonValue(m_restoring_health_check_state, json[QString("RestoringHealthCheckState")]);
    m_restoring_health_check_state_isSet = !json[QString("RestoringHealthCheckState")].isNull() && m_restoring_health_check_state_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("ResultCode")]);
    m_result_code_isSet = !json[QString("ResultCode")].isNull() && m_result_code_isValid;

    m_result_details_isValid = ::OpenAPI::fromJsonValue(m_result_details, json[QString("ResultDetails")]);
    m_result_details_isSet = !json[QString("ResultDetails")].isNull() && m_result_details_isValid;

    m_result_status_isValid = ::OpenAPI::fromJsonValue(m_result_status, json[QString("ResultStatus")]);
    m_result_status_isSet = !json[QString("ResultStatus")].isNull() && m_result_status_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("TaskId")]);
    m_task_id_isSet = !json[QString("TaskId")].isNull() && m_task_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIRepairTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairTask::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_executor_isSet) {
        obj.insert(QString("Executor"), ::OpenAPI::toJsonValue(m_executor));
    }
    if (m_executor_data_isSet) {
        obj.insert(QString("ExecutorData"), ::OpenAPI::toJsonValue(m_executor_data));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_history.isSet()) {
        obj.insert(QString("History"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_impact.isSet()) {
        obj.insert(QString("Impact"), ::OpenAPI::toJsonValue(m_impact));
    }
    if (m_perform_preparing_health_check_isSet) {
        obj.insert(QString("PerformPreparingHealthCheck"), ::OpenAPI::toJsonValue(m_perform_preparing_health_check));
    }
    if (m_perform_restoring_health_check_isSet) {
        obj.insert(QString("PerformRestoringHealthCheck"), ::OpenAPI::toJsonValue(m_perform_restoring_health_check));
    }
    if (m_preparing_health_check_state.isSet()) {
        obj.insert(QString("PreparingHealthCheckState"), ::OpenAPI::toJsonValue(m_preparing_health_check_state));
    }
    if (m_restoring_health_check_state.isSet()) {
        obj.insert(QString("RestoringHealthCheckState"), ::OpenAPI::toJsonValue(m_restoring_health_check_state));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("ResultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_result_details_isSet) {
        obj.insert(QString("ResultDetails"), ::OpenAPI::toJsonValue(m_result_details));
    }
    if (m_result_status_isSet) {
        obj.insert(QString("ResultStatus"), ::OpenAPI::toJsonValue(m_result_status));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("TaskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRepairTask::getAction() const {
    return m_action;
}
void OAIRepairTask::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRepairTask::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRepairTask::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIRepairTask::getDescription() const {
    return m_description;
}
void OAIRepairTask::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepairTask::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepairTask::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRepairTask::getExecutor() const {
    return m_executor;
}
void OAIRepairTask::setExecutor(const QString &executor) {
    m_executor = executor;
    m_executor_isSet = true;
}

bool OAIRepairTask::is_executor_Set() const{
    return m_executor_isSet;
}

bool OAIRepairTask::is_executor_Valid() const{
    return m_executor_isValid;
}

QString OAIRepairTask::getExecutorData() const {
    return m_executor_data;
}
void OAIRepairTask::setExecutorData(const QString &executor_data) {
    m_executor_data = executor_data;
    m_executor_data_isSet = true;
}

bool OAIRepairTask::is_executor_data_Set() const{
    return m_executor_data_isSet;
}

bool OAIRepairTask::is_executor_data_Valid() const{
    return m_executor_data_isValid;
}

qint32 OAIRepairTask::getFlags() const {
    return m_flags;
}
void OAIRepairTask::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIRepairTask::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIRepairTask::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIRepairTaskHistory OAIRepairTask::getHistory() const {
    return m_history;
}
void OAIRepairTask::setHistory(const OAIRepairTaskHistory &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIRepairTask::is_history_Set() const{
    return m_history_isSet;
}

bool OAIRepairTask::is_history_Valid() const{
    return m_history_isValid;
}

OAIRepairImpactDescriptionBase OAIRepairTask::getImpact() const {
    return m_impact;
}
void OAIRepairTask::setImpact(const OAIRepairImpactDescriptionBase &impact) {
    m_impact = impact;
    m_impact_isSet = true;
}

bool OAIRepairTask::is_impact_Set() const{
    return m_impact_isSet;
}

bool OAIRepairTask::is_impact_Valid() const{
    return m_impact_isValid;
}

bool OAIRepairTask::isPerformPreparingHealthCheck() const {
    return m_perform_preparing_health_check;
}
void OAIRepairTask::setPerformPreparingHealthCheck(const bool &perform_preparing_health_check) {
    m_perform_preparing_health_check = perform_preparing_health_check;
    m_perform_preparing_health_check_isSet = true;
}

bool OAIRepairTask::is_perform_preparing_health_check_Set() const{
    return m_perform_preparing_health_check_isSet;
}

bool OAIRepairTask::is_perform_preparing_health_check_Valid() const{
    return m_perform_preparing_health_check_isValid;
}

bool OAIRepairTask::isPerformRestoringHealthCheck() const {
    return m_perform_restoring_health_check;
}
void OAIRepairTask::setPerformRestoringHealthCheck(const bool &perform_restoring_health_check) {
    m_perform_restoring_health_check = perform_restoring_health_check;
    m_perform_restoring_health_check_isSet = true;
}

bool OAIRepairTask::is_perform_restoring_health_check_Set() const{
    return m_perform_restoring_health_check_isSet;
}

bool OAIRepairTask::is_perform_restoring_health_check_Valid() const{
    return m_perform_restoring_health_check_isValid;
}

OAIRepairTaskHealthCheckState OAIRepairTask::getPreparingHealthCheckState() const {
    return m_preparing_health_check_state;
}
void OAIRepairTask::setPreparingHealthCheckState(const OAIRepairTaskHealthCheckState &preparing_health_check_state) {
    m_preparing_health_check_state = preparing_health_check_state;
    m_preparing_health_check_state_isSet = true;
}

bool OAIRepairTask::is_preparing_health_check_state_Set() const{
    return m_preparing_health_check_state_isSet;
}

bool OAIRepairTask::is_preparing_health_check_state_Valid() const{
    return m_preparing_health_check_state_isValid;
}

OAIRepairTaskHealthCheckState OAIRepairTask::getRestoringHealthCheckState() const {
    return m_restoring_health_check_state;
}
void OAIRepairTask::setRestoringHealthCheckState(const OAIRepairTaskHealthCheckState &restoring_health_check_state) {
    m_restoring_health_check_state = restoring_health_check_state;
    m_restoring_health_check_state_isSet = true;
}

bool OAIRepairTask::is_restoring_health_check_state_Set() const{
    return m_restoring_health_check_state_isSet;
}

bool OAIRepairTask::is_restoring_health_check_state_Valid() const{
    return m_restoring_health_check_state_isValid;
}

qint32 OAIRepairTask::getResultCode() const {
    return m_result_code;
}
void OAIRepairTask::setResultCode(const qint32 &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIRepairTask::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIRepairTask::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAIRepairTask::getResultDetails() const {
    return m_result_details;
}
void OAIRepairTask::setResultDetails(const QString &result_details) {
    m_result_details = result_details;
    m_result_details_isSet = true;
}

bool OAIRepairTask::is_result_details_Set() const{
    return m_result_details_isSet;
}

bool OAIRepairTask::is_result_details_Valid() const{
    return m_result_details_isValid;
}

QString OAIRepairTask::getResultStatus() const {
    return m_result_status;
}
void OAIRepairTask::setResultStatus(const QString &result_status) {
    m_result_status = result_status;
    m_result_status_isSet = true;
}

bool OAIRepairTask::is_result_status_Set() const{
    return m_result_status_isSet;
}

bool OAIRepairTask::is_result_status_Valid() const{
    return m_result_status_isValid;
}

QString OAIRepairTask::getState() const {
    return m_state;
}
void OAIRepairTask::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRepairTask::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRepairTask::is_state_Valid() const{
    return m_state_isValid;
}

OAIRepairTargetDescriptionBase OAIRepairTask::getTarget() const {
    return m_target;
}
void OAIRepairTask::setTarget(const OAIRepairTargetDescriptionBase &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIRepairTask::is_target_Set() const{
    return m_target_isSet;
}

bool OAIRepairTask::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIRepairTask::getTaskId() const {
    return m_task_id;
}
void OAIRepairTask::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIRepairTask::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIRepairTask::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAIRepairTask::getVersion() const {
    return m_version;
}
void OAIRepairTask::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRepairTask::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRepairTask::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRepairTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executor_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_preparing_health_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_restoring_health_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparing_health_check_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoring_health_check_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_state_isValid && m_task_id_isValid && true;
}

} // namespace OpenAPI
