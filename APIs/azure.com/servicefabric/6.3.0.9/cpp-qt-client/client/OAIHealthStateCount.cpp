/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthStateCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthStateCount::OAIHealthStateCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthStateCount::OAIHealthStateCount() {
    this->initializeModel();
}

OAIHealthStateCount::~OAIHealthStateCount() {}

void OAIHealthStateCount::initializeModel() {

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_ok_count_isSet = false;
    m_ok_count_isValid = false;

    m_warning_count_isSet = false;
    m_warning_count_isValid = false;
}

void OAIHealthStateCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthStateCount::fromJsonObject(QJsonObject json) {

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("ErrorCount")]);
    m_error_count_isSet = !json[QString("ErrorCount")].isNull() && m_error_count_isValid;

    m_ok_count_isValid = ::OpenAPI::fromJsonValue(m_ok_count, json[QString("OkCount")]);
    m_ok_count_isSet = !json[QString("OkCount")].isNull() && m_ok_count_isValid;

    m_warning_count_isValid = ::OpenAPI::fromJsonValue(m_warning_count, json[QString("WarningCount")]);
    m_warning_count_isSet = !json[QString("WarningCount")].isNull() && m_warning_count_isValid;
}

QString OAIHealthStateCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthStateCount::asJsonObject() const {
    QJsonObject obj;
    if (m_error_count_isSet) {
        obj.insert(QString("ErrorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_ok_count_isSet) {
        obj.insert(QString("OkCount"), ::OpenAPI::toJsonValue(m_ok_count));
    }
    if (m_warning_count_isSet) {
        obj.insert(QString("WarningCount"), ::OpenAPI::toJsonValue(m_warning_count));
    }
    return obj;
}

qint64 OAIHealthStateCount::getErrorCount() const {
    return m_error_count;
}
void OAIHealthStateCount::setErrorCount(const qint64 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIHealthStateCount::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIHealthStateCount::is_error_count_Valid() const{
    return m_error_count_isValid;
}

qint64 OAIHealthStateCount::getOkCount() const {
    return m_ok_count;
}
void OAIHealthStateCount::setOkCount(const qint64 &ok_count) {
    m_ok_count = ok_count;
    m_ok_count_isSet = true;
}

bool OAIHealthStateCount::is_ok_count_Set() const{
    return m_ok_count_isSet;
}

bool OAIHealthStateCount::is_ok_count_Valid() const{
    return m_ok_count_isValid;
}

qint64 OAIHealthStateCount::getWarningCount() const {
    return m_warning_count;
}
void OAIHealthStateCount::setWarningCount(const qint64 &warning_count) {
    m_warning_count = warning_count;
    m_warning_count_isSet = true;
}

bool OAIHealthStateCount::is_warning_count_Set() const{
    return m_warning_count_isSet;
}

bool OAIHealthStateCount::is_warning_count_Valid() const{
    return m_warning_count_isValid;
}

bool OAIHealthStateCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthStateCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
