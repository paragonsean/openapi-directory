/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceTypeHealthPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceTypeHealthPolicy::OAIServiceTypeHealthPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceTypeHealthPolicy::OAIServiceTypeHealthPolicy() {
    this->initializeModel();
}

OAIServiceTypeHealthPolicy::~OAIServiceTypeHealthPolicy() {}

void OAIServiceTypeHealthPolicy::initializeModel() {

    m_max_percent_unhealthy_partitions_per_service_isSet = false;
    m_max_percent_unhealthy_partitions_per_service_isValid = false;

    m_max_percent_unhealthy_replicas_per_partition_isSet = false;
    m_max_percent_unhealthy_replicas_per_partition_isValid = false;

    m_max_percent_unhealthy_services_isSet = false;
    m_max_percent_unhealthy_services_isValid = false;
}

void OAIServiceTypeHealthPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceTypeHealthPolicy::fromJsonObject(QJsonObject json) {

    m_max_percent_unhealthy_partitions_per_service_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_partitions_per_service, json[QString("MaxPercentUnhealthyPartitionsPerService")]);
    m_max_percent_unhealthy_partitions_per_service_isSet = !json[QString("MaxPercentUnhealthyPartitionsPerService")].isNull() && m_max_percent_unhealthy_partitions_per_service_isValid;

    m_max_percent_unhealthy_replicas_per_partition_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_replicas_per_partition, json[QString("MaxPercentUnhealthyReplicasPerPartition")]);
    m_max_percent_unhealthy_replicas_per_partition_isSet = !json[QString("MaxPercentUnhealthyReplicasPerPartition")].isNull() && m_max_percent_unhealthy_replicas_per_partition_isValid;

    m_max_percent_unhealthy_services_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_services, json[QString("MaxPercentUnhealthyServices")]);
    m_max_percent_unhealthy_services_isSet = !json[QString("MaxPercentUnhealthyServices")].isNull() && m_max_percent_unhealthy_services_isValid;
}

QString OAIServiceTypeHealthPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceTypeHealthPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_max_percent_unhealthy_partitions_per_service_isSet) {
        obj.insert(QString("MaxPercentUnhealthyPartitionsPerService"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_partitions_per_service));
    }
    if (m_max_percent_unhealthy_replicas_per_partition_isSet) {
        obj.insert(QString("MaxPercentUnhealthyReplicasPerPartition"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_replicas_per_partition));
    }
    if (m_max_percent_unhealthy_services_isSet) {
        obj.insert(QString("MaxPercentUnhealthyServices"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_services));
    }
    return obj;
}

qint32 OAIServiceTypeHealthPolicy::getMaxPercentUnhealthyPartitionsPerService() const {
    return m_max_percent_unhealthy_partitions_per_service;
}
void OAIServiceTypeHealthPolicy::setMaxPercentUnhealthyPartitionsPerService(const qint32 &max_percent_unhealthy_partitions_per_service) {
    m_max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service;
    m_max_percent_unhealthy_partitions_per_service_isSet = true;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_partitions_per_service_Set() const{
    return m_max_percent_unhealthy_partitions_per_service_isSet;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_partitions_per_service_Valid() const{
    return m_max_percent_unhealthy_partitions_per_service_isValid;
}

qint32 OAIServiceTypeHealthPolicy::getMaxPercentUnhealthyReplicasPerPartition() const {
    return m_max_percent_unhealthy_replicas_per_partition;
}
void OAIServiceTypeHealthPolicy::setMaxPercentUnhealthyReplicasPerPartition(const qint32 &max_percent_unhealthy_replicas_per_partition) {
    m_max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition;
    m_max_percent_unhealthy_replicas_per_partition_isSet = true;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_replicas_per_partition_Set() const{
    return m_max_percent_unhealthy_replicas_per_partition_isSet;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_replicas_per_partition_Valid() const{
    return m_max_percent_unhealthy_replicas_per_partition_isValid;
}

qint32 OAIServiceTypeHealthPolicy::getMaxPercentUnhealthyServices() const {
    return m_max_percent_unhealthy_services;
}
void OAIServiceTypeHealthPolicy::setMaxPercentUnhealthyServices(const qint32 &max_percent_unhealthy_services) {
    m_max_percent_unhealthy_services = max_percent_unhealthy_services;
    m_max_percent_unhealthy_services_isSet = true;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_services_Set() const{
    return m_max_percent_unhealthy_services_isSet;
}

bool OAIServiceTypeHealthPolicy::is_max_percent_unhealthy_services_Valid() const{
    return m_max_percent_unhealthy_services_isValid;
}

bool OAIServiceTypeHealthPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_percent_unhealthy_partitions_per_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_replicas_per_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceTypeHealthPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
