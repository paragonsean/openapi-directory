/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePartitionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePartitionStatus::OAIServicePartitionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePartitionStatus::OAIServicePartitionStatus() {
    this->initializeModel();
}

OAIServicePartitionStatus::~OAIServicePartitionStatus() {}

void OAIServicePartitionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServicePartitionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServicePartitionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotReady", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::NOTREADY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InQuorumLoss", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::INQUORUMLOSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reconfiguring", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::RECONFIGURING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePartitionStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServicePartitionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServicePartitionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServicePartitionStatus::INVALID:
            val = "Invalid";
            break;
        case eOAIServicePartitionStatus::READY:
            val = "Ready";
            break;
        case eOAIServicePartitionStatus::NOTREADY:
            val = "NotReady";
            break;
        case eOAIServicePartitionStatus::INQUORUMLOSS:
            val = "InQuorumLoss";
            break;
        case eOAIServicePartitionStatus::RECONFIGURING:
            val = "Reconfiguring";
            break;
        case eOAIServicePartitionStatus::DELETING:
            val = "Deleting";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServicePartitionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServicePartitionStatus::eOAIServicePartitionStatus OAIServicePartitionStatus::getValue() const {
    return m_value;
}

void OAIServicePartitionStatus::setValue(const OAIServicePartitionStatus::eOAIServicePartitionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServicePartitionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIServicePartitionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
