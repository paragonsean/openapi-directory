/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPropertyManagementApi_H
#define OAI_OAIPropertyManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAIFailedPropertyBatchInfo.h"
#include "OAINameDescription.h"
#include "OAIPagedPropertyInfoList.h"
#include "OAIPagedSubNameInfoList.h"
#include "OAIPropertyBatchDescriptionList.h"
#include "OAIPropertyDescription.h"
#include "OAIPropertyInfo.h"
#include "OAISuccessfulPropertyBatchInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPropertyManagementApi : public QObject {
    Q_OBJECT

public:
    OAIPropertyManagementApi(const int timeOut = 0);
    ~OAIPropertyManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_description OAINameDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createName(const QString &api_version, const OAINameDescription &name_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteName(const QString &api_version, const QString &name_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteProperty(const QString &api_version, const QString &name_id, const QString &property_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNameExistsInfo(const QString &api_version, const QString &name_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPropertyInfo(const QString &api_version, const QString &name_id, const QString &property_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  include_values bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPropertyInfoList(const QString &api_version, const QString &name_id, const ::OpenAPI::OptionalParam<bool> &include_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  recursive bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getSubNameInfoList(const QString &api_version, const QString &name_id, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  property_description OAIPropertyDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void putProperty(const QString &api_version, const QString &name_id, const OAIPropertyDescription &property_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  name_id QString [required]
    * @param[in]  property_batch_description_list OAIPropertyBatchDescriptionList [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void submitPropertyBatch(const QString &api_version, const QString &name_id, const OAIPropertyBatchDescriptionList &property_batch_description_list, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNameCallback(OAIHttpRequestWorker *worker);
    void deleteNameCallback(OAIHttpRequestWorker *worker);
    void deletePropertyCallback(OAIHttpRequestWorker *worker);
    void getNameExistsInfoCallback(OAIHttpRequestWorker *worker);
    void getPropertyInfoCallback(OAIHttpRequestWorker *worker);
    void getPropertyInfoListCallback(OAIHttpRequestWorker *worker);
    void getSubNameInfoListCallback(OAIHttpRequestWorker *worker);
    void putPropertyCallback(OAIHttpRequestWorker *worker);
    void submitPropertyBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNameSignal();
    void deleteNameSignal();
    void deletePropertySignal();
    void getNameExistsInfoSignal();
    void getPropertyInfoSignal(OAIPropertyInfo summary);
    void getPropertyInfoListSignal(OAIPagedPropertyInfoList summary);
    void getSubNameInfoListSignal(OAIPagedSubNameInfoList summary);
    void putPropertySignal();
    void submitPropertyBatchSignal(OAISuccessfulPropertyBatchInfo summary);


    void createNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteNameSignalFull(OAIHttpRequestWorker *worker);
    void deletePropertySignalFull(OAIHttpRequestWorker *worker);
    void getNameExistsInfoSignalFull(OAIHttpRequestWorker *worker);
    void getPropertyInfoSignalFull(OAIHttpRequestWorker *worker, OAIPropertyInfo summary);
    void getPropertyInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedPropertyInfoList summary);
    void getSubNameInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedSubNameInfoList summary);
    void putPropertySignalFull(OAIHttpRequestWorker *worker);
    void submitPropertyBatchSignalFull(OAIHttpRequestWorker *worker, OAISuccessfulPropertyBatchInfo summary);

    Q_DECL_DEPRECATED_X("Use createNameSignalError() instead")
    void createNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNameSignalError() instead")
    void deleteNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertySignalError() instead")
    void deletePropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameExistsInfoSignalError() instead")
    void getNameExistsInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNameExistsInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyInfoSignalError() instead")
    void getPropertyInfoSignalE(OAIPropertyInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyInfoSignalError(OAIPropertyInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyInfoListSignalError() instead")
    void getPropertyInfoListSignalE(OAIPagedPropertyInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyInfoListSignalError(OAIPagedPropertyInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubNameInfoListSignalError() instead")
    void getSubNameInfoListSignalE(OAIPagedSubNameInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubNameInfoListSignalError(OAIPagedSubNameInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPropertySignalError() instead")
    void putPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitPropertyBatchSignalError() instead")
    void submitPropertyBatchSignalE(OAISuccessfulPropertyBatchInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitPropertyBatchSignalError(OAISuccessfulPropertyBatchInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNameSignalErrorFull() instead")
    void createNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNameSignalErrorFull() instead")
    void deleteNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertySignalErrorFull() instead")
    void deletePropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameExistsInfoSignalErrorFull() instead")
    void getNameExistsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNameExistsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyInfoSignalErrorFull() instead")
    void getPropertyInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertyInfoListSignalErrorFull() instead")
    void getPropertyInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertyInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubNameInfoListSignalErrorFull() instead")
    void getSubNameInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubNameInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPropertySignalErrorFull() instead")
    void putPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitPropertyBatchSignalErrorFull() instead")
    void submitPropertyBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitPropertyBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
