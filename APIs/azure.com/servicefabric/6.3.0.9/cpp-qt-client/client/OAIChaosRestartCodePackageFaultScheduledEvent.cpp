/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosRestartCodePackageFaultScheduledEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosRestartCodePackageFaultScheduledEvent::OAIChaosRestartCodePackageFaultScheduledEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosRestartCodePackageFaultScheduledEvent::OAIChaosRestartCodePackageFaultScheduledEvent() {
    this->initializeModel();
}

OAIChaosRestartCodePackageFaultScheduledEvent::~OAIChaosRestartCodePackageFaultScheduledEvent() {}

void OAIChaosRestartCodePackageFaultScheduledEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_code_package_name_isSet = false;
    m_code_package_name_isValid = false;

    m_fault_group_id_isSet = false;
    m_fault_group_id_isValid = false;

    m_fault_id_isSet = false;
    m_fault_id_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_service_package_activation_id_isSet = false;
    m_service_package_activation_id_isValid = false;
}

void OAIChaosRestartCodePackageFaultScheduledEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosRestartCodePackageFaultScheduledEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_code_package_name_isValid = ::OpenAPI::fromJsonValue(m_code_package_name, json[QString("CodePackageName")]);
    m_code_package_name_isSet = !json[QString("CodePackageName")].isNull() && m_code_package_name_isValid;

    m_fault_group_id_isValid = ::OpenAPI::fromJsonValue(m_fault_group_id, json[QString("FaultGroupId")]);
    m_fault_group_id_isSet = !json[QString("FaultGroupId")].isNull() && m_fault_group_id_isValid;

    m_fault_id_isValid = ::OpenAPI::fromJsonValue(m_fault_id, json[QString("FaultId")]);
    m_fault_id_isSet = !json[QString("FaultId")].isNull() && m_fault_id_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_service_package_activation_id_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_id, json[QString("ServicePackageActivationId")]);
    m_service_package_activation_id_isSet = !json[QString("ServicePackageActivationId")].isNull() && m_service_package_activation_id_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosRestartCodePackageFaultScheduledEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_code_package_name_isSet) {
        obj.insert(QString("CodePackageName"), ::OpenAPI::toJsonValue(m_code_package_name));
    }
    if (m_fault_group_id_isSet) {
        obj.insert(QString("FaultGroupId"), ::OpenAPI::toJsonValue(m_fault_group_id));
    }
    if (m_fault_id_isSet) {
        obj.insert(QString("FaultId"), ::OpenAPI::toJsonValue(m_fault_id));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_service_package_activation_id_isSet) {
        obj.insert(QString("ServicePackageActivationId"), ::OpenAPI::toJsonValue(m_service_package_activation_id));
    }
    return obj;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIChaosRestartCodePackageFaultScheduledEvent::getKind() const {
    return m_kind;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIChaosRestartCodePackageFaultScheduledEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getApplicationId() const {
    return m_application_id;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getCodePackageName() const {
    return m_code_package_name;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setCodePackageName(const QString &code_package_name) {
    m_code_package_name = code_package_name;
    m_code_package_name_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_code_package_name_Set() const{
    return m_code_package_name_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_code_package_name_Valid() const{
    return m_code_package_name_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getFaultGroupId() const {
    return m_fault_group_id;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setFaultGroupId(const QString &fault_group_id) {
    m_fault_group_id = fault_group_id;
    m_fault_group_id_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_fault_group_id_Set() const{
    return m_fault_group_id_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_fault_group_id_Valid() const{
    return m_fault_group_id_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getFaultId() const {
    return m_fault_id;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setFaultId(const QString &fault_id) {
    m_fault_id = fault_id;
    m_fault_id_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_fault_id_Set() const{
    return m_fault_id_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_fault_id_Valid() const{
    return m_fault_id_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getNodeName() const {
    return m_node_name;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

QString OAIChaosRestartCodePackageFaultScheduledEvent::getServicePackageActivationId() const {
    return m_service_package_activation_id;
}
void OAIChaosRestartCodePackageFaultScheduledEvent::setServicePackageActivationId(const QString &service_package_activation_id) {
    m_service_package_activation_id = service_package_activation_id;
    m_service_package_activation_id_isSet = true;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_service_package_activation_id_Set() const{
    return m_service_package_activation_id_isSet;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::is_service_package_activation_id_Valid() const{
    return m_service_package_activation_id_isValid;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosRestartCodePackageFaultScheduledEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_application_id_isValid && m_code_package_name_isValid && m_fault_group_id_isValid && m_fault_id_isValid && m_node_name_isValid && m_service_manifest_name_isValid && m_service_package_activation_id_isValid && true;
}

} // namespace OpenAPI
