/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadChunkRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadChunkRange::OAIUploadChunkRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadChunkRange::OAIUploadChunkRange() {
    this->initializeModel();
}

OAIUploadChunkRange::~OAIUploadChunkRange() {}

void OAIUploadChunkRange::initializeModel() {

    m_end_position_isSet = false;
    m_end_position_isValid = false;

    m_start_position_isSet = false;
    m_start_position_isValid = false;
}

void OAIUploadChunkRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadChunkRange::fromJsonObject(QJsonObject json) {

    m_end_position_isValid = ::OpenAPI::fromJsonValue(m_end_position, json[QString("EndPosition")]);
    m_end_position_isSet = !json[QString("EndPosition")].isNull() && m_end_position_isValid;

    m_start_position_isValid = ::OpenAPI::fromJsonValue(m_start_position, json[QString("StartPosition")]);
    m_start_position_isSet = !json[QString("StartPosition")].isNull() && m_start_position_isValid;
}

QString OAIUploadChunkRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadChunkRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_position_isSet) {
        obj.insert(QString("EndPosition"), ::OpenAPI::toJsonValue(m_end_position));
    }
    if (m_start_position_isSet) {
        obj.insert(QString("StartPosition"), ::OpenAPI::toJsonValue(m_start_position));
    }
    return obj;
}

QString OAIUploadChunkRange::getEndPosition() const {
    return m_end_position;
}
void OAIUploadChunkRange::setEndPosition(const QString &end_position) {
    m_end_position = end_position;
    m_end_position_isSet = true;
}

bool OAIUploadChunkRange::is_end_position_Set() const{
    return m_end_position_isSet;
}

bool OAIUploadChunkRange::is_end_position_Valid() const{
    return m_end_position_isValid;
}

QString OAIUploadChunkRange::getStartPosition() const {
    return m_start_position;
}
void OAIUploadChunkRange::setStartPosition(const QString &start_position) {
    m_start_position = start_position;
    m_start_position_isSet = true;
}

bool OAIUploadChunkRange::is_start_position_Set() const{
    return m_start_position_isSet;
}

bool OAIUploadChunkRange::is_start_position_Valid() const{
    return m_start_position_isValid;
}

bool OAIUploadChunkRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadChunkRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
