/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeOrchestrationServiceStateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeOrchestrationServiceStateSummary::OAIUpgradeOrchestrationServiceStateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeOrchestrationServiceStateSummary::OAIUpgradeOrchestrationServiceStateSummary() {
    this->initializeModel();
}

OAIUpgradeOrchestrationServiceStateSummary::~OAIUpgradeOrchestrationServiceStateSummary() {}

void OAIUpgradeOrchestrationServiceStateSummary::initializeModel() {

    m_current_code_version_isSet = false;
    m_current_code_version_isValid = false;

    m_current_manifest_version_isSet = false;
    m_current_manifest_version_isValid = false;

    m_pending_upgrade_type_isSet = false;
    m_pending_upgrade_type_isValid = false;

    m_target_code_version_isSet = false;
    m_target_code_version_isValid = false;

    m_target_manifest_version_isSet = false;
    m_target_manifest_version_isValid = false;
}

void OAIUpgradeOrchestrationServiceStateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeOrchestrationServiceStateSummary::fromJsonObject(QJsonObject json) {

    m_current_code_version_isValid = ::OpenAPI::fromJsonValue(m_current_code_version, json[QString("CurrentCodeVersion")]);
    m_current_code_version_isSet = !json[QString("CurrentCodeVersion")].isNull() && m_current_code_version_isValid;

    m_current_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_current_manifest_version, json[QString("CurrentManifestVersion")]);
    m_current_manifest_version_isSet = !json[QString("CurrentManifestVersion")].isNull() && m_current_manifest_version_isValid;

    m_pending_upgrade_type_isValid = ::OpenAPI::fromJsonValue(m_pending_upgrade_type, json[QString("PendingUpgradeType")]);
    m_pending_upgrade_type_isSet = !json[QString("PendingUpgradeType")].isNull() && m_pending_upgrade_type_isValid;

    m_target_code_version_isValid = ::OpenAPI::fromJsonValue(m_target_code_version, json[QString("TargetCodeVersion")]);
    m_target_code_version_isSet = !json[QString("TargetCodeVersion")].isNull() && m_target_code_version_isValid;

    m_target_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_target_manifest_version, json[QString("TargetManifestVersion")]);
    m_target_manifest_version_isSet = !json[QString("TargetManifestVersion")].isNull() && m_target_manifest_version_isValid;
}

QString OAIUpgradeOrchestrationServiceStateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeOrchestrationServiceStateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_current_code_version_isSet) {
        obj.insert(QString("CurrentCodeVersion"), ::OpenAPI::toJsonValue(m_current_code_version));
    }
    if (m_current_manifest_version_isSet) {
        obj.insert(QString("CurrentManifestVersion"), ::OpenAPI::toJsonValue(m_current_manifest_version));
    }
    if (m_pending_upgrade_type_isSet) {
        obj.insert(QString("PendingUpgradeType"), ::OpenAPI::toJsonValue(m_pending_upgrade_type));
    }
    if (m_target_code_version_isSet) {
        obj.insert(QString("TargetCodeVersion"), ::OpenAPI::toJsonValue(m_target_code_version));
    }
    if (m_target_manifest_version_isSet) {
        obj.insert(QString("TargetManifestVersion"), ::OpenAPI::toJsonValue(m_target_manifest_version));
    }
    return obj;
}

QString OAIUpgradeOrchestrationServiceStateSummary::getCurrentCodeVersion() const {
    return m_current_code_version;
}
void OAIUpgradeOrchestrationServiceStateSummary::setCurrentCodeVersion(const QString &current_code_version) {
    m_current_code_version = current_code_version;
    m_current_code_version_isSet = true;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_current_code_version_Set() const{
    return m_current_code_version_isSet;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_current_code_version_Valid() const{
    return m_current_code_version_isValid;
}

QString OAIUpgradeOrchestrationServiceStateSummary::getCurrentManifestVersion() const {
    return m_current_manifest_version;
}
void OAIUpgradeOrchestrationServiceStateSummary::setCurrentManifestVersion(const QString &current_manifest_version) {
    m_current_manifest_version = current_manifest_version;
    m_current_manifest_version_isSet = true;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_current_manifest_version_Set() const{
    return m_current_manifest_version_isSet;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_current_manifest_version_Valid() const{
    return m_current_manifest_version_isValid;
}

QString OAIUpgradeOrchestrationServiceStateSummary::getPendingUpgradeType() const {
    return m_pending_upgrade_type;
}
void OAIUpgradeOrchestrationServiceStateSummary::setPendingUpgradeType(const QString &pending_upgrade_type) {
    m_pending_upgrade_type = pending_upgrade_type;
    m_pending_upgrade_type_isSet = true;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_pending_upgrade_type_Set() const{
    return m_pending_upgrade_type_isSet;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_pending_upgrade_type_Valid() const{
    return m_pending_upgrade_type_isValid;
}

QString OAIUpgradeOrchestrationServiceStateSummary::getTargetCodeVersion() const {
    return m_target_code_version;
}
void OAIUpgradeOrchestrationServiceStateSummary::setTargetCodeVersion(const QString &target_code_version) {
    m_target_code_version = target_code_version;
    m_target_code_version_isSet = true;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_target_code_version_Set() const{
    return m_target_code_version_isSet;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_target_code_version_Valid() const{
    return m_target_code_version_isValid;
}

QString OAIUpgradeOrchestrationServiceStateSummary::getTargetManifestVersion() const {
    return m_target_manifest_version;
}
void OAIUpgradeOrchestrationServiceStateSummary::setTargetManifestVersion(const QString &target_manifest_version) {
    m_target_manifest_version = target_manifest_version;
    m_target_manifest_version_isSet = true;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_target_manifest_version_Set() const{
    return m_target_manifest_version_isSet;
}

bool OAIUpgradeOrchestrationServiceStateSummary::is_target_manifest_version_Valid() const{
    return m_target_manifest_version_isValid;
}

bool OAIUpgradeOrchestrationServiceStateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_upgrade_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeOrchestrationServiceStateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
