/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairTaskHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairTaskHistory::OAIRepairTaskHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairTaskHistory::OAIRepairTaskHistory() {
    this->initializeModel();
}

OAIRepairTaskHistory::~OAIRepairTaskHistory() {}

void OAIRepairTaskHistory::initializeModel() {

    m_approved_utc_timestamp_isSet = false;
    m_approved_utc_timestamp_isValid = false;

    m_claimed_utc_timestamp_isSet = false;
    m_claimed_utc_timestamp_isValid = false;

    m_completed_utc_timestamp_isSet = false;
    m_completed_utc_timestamp_isValid = false;

    m_created_utc_timestamp_isSet = false;
    m_created_utc_timestamp_isValid = false;

    m_executing_utc_timestamp_isSet = false;
    m_executing_utc_timestamp_isValid = false;

    m_preparing_health_check_end_utc_timestamp_isSet = false;
    m_preparing_health_check_end_utc_timestamp_isValid = false;

    m_preparing_health_check_start_utc_timestamp_isSet = false;
    m_preparing_health_check_start_utc_timestamp_isValid = false;

    m_preparing_utc_timestamp_isSet = false;
    m_preparing_utc_timestamp_isValid = false;

    m_restoring_health_check_end_utc_timestamp_isSet = false;
    m_restoring_health_check_end_utc_timestamp_isValid = false;

    m_restoring_health_check_start_utc_timestamp_isSet = false;
    m_restoring_health_check_start_utc_timestamp_isValid = false;

    m_restoring_utc_timestamp_isSet = false;
    m_restoring_utc_timestamp_isValid = false;
}

void OAIRepairTaskHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairTaskHistory::fromJsonObject(QJsonObject json) {

    m_approved_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_approved_utc_timestamp, json[QString("ApprovedUtcTimestamp")]);
    m_approved_utc_timestamp_isSet = !json[QString("ApprovedUtcTimestamp")].isNull() && m_approved_utc_timestamp_isValid;

    m_claimed_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_claimed_utc_timestamp, json[QString("ClaimedUtcTimestamp")]);
    m_claimed_utc_timestamp_isSet = !json[QString("ClaimedUtcTimestamp")].isNull() && m_claimed_utc_timestamp_isValid;

    m_completed_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_completed_utc_timestamp, json[QString("CompletedUtcTimestamp")]);
    m_completed_utc_timestamp_isSet = !json[QString("CompletedUtcTimestamp")].isNull() && m_completed_utc_timestamp_isValid;

    m_created_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_utc_timestamp, json[QString("CreatedUtcTimestamp")]);
    m_created_utc_timestamp_isSet = !json[QString("CreatedUtcTimestamp")].isNull() && m_created_utc_timestamp_isValid;

    m_executing_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_executing_utc_timestamp, json[QString("ExecutingUtcTimestamp")]);
    m_executing_utc_timestamp_isSet = !json[QString("ExecutingUtcTimestamp")].isNull() && m_executing_utc_timestamp_isValid;

    m_preparing_health_check_end_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_preparing_health_check_end_utc_timestamp, json[QString("PreparingHealthCheckEndUtcTimestamp")]);
    m_preparing_health_check_end_utc_timestamp_isSet = !json[QString("PreparingHealthCheckEndUtcTimestamp")].isNull() && m_preparing_health_check_end_utc_timestamp_isValid;

    m_preparing_health_check_start_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_preparing_health_check_start_utc_timestamp, json[QString("PreparingHealthCheckStartUtcTimestamp")]);
    m_preparing_health_check_start_utc_timestamp_isSet = !json[QString("PreparingHealthCheckStartUtcTimestamp")].isNull() && m_preparing_health_check_start_utc_timestamp_isValid;

    m_preparing_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_preparing_utc_timestamp, json[QString("PreparingUtcTimestamp")]);
    m_preparing_utc_timestamp_isSet = !json[QString("PreparingUtcTimestamp")].isNull() && m_preparing_utc_timestamp_isValid;

    m_restoring_health_check_end_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_restoring_health_check_end_utc_timestamp, json[QString("RestoringHealthCheckEndUtcTimestamp")]);
    m_restoring_health_check_end_utc_timestamp_isSet = !json[QString("RestoringHealthCheckEndUtcTimestamp")].isNull() && m_restoring_health_check_end_utc_timestamp_isValid;

    m_restoring_health_check_start_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_restoring_health_check_start_utc_timestamp, json[QString("RestoringHealthCheckStartUtcTimestamp")]);
    m_restoring_health_check_start_utc_timestamp_isSet = !json[QString("RestoringHealthCheckStartUtcTimestamp")].isNull() && m_restoring_health_check_start_utc_timestamp_isValid;

    m_restoring_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_restoring_utc_timestamp, json[QString("RestoringUtcTimestamp")]);
    m_restoring_utc_timestamp_isSet = !json[QString("RestoringUtcTimestamp")].isNull() && m_restoring_utc_timestamp_isValid;
}

QString OAIRepairTaskHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairTaskHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_utc_timestamp_isSet) {
        obj.insert(QString("ApprovedUtcTimestamp"), ::OpenAPI::toJsonValue(m_approved_utc_timestamp));
    }
    if (m_claimed_utc_timestamp_isSet) {
        obj.insert(QString("ClaimedUtcTimestamp"), ::OpenAPI::toJsonValue(m_claimed_utc_timestamp));
    }
    if (m_completed_utc_timestamp_isSet) {
        obj.insert(QString("CompletedUtcTimestamp"), ::OpenAPI::toJsonValue(m_completed_utc_timestamp));
    }
    if (m_created_utc_timestamp_isSet) {
        obj.insert(QString("CreatedUtcTimestamp"), ::OpenAPI::toJsonValue(m_created_utc_timestamp));
    }
    if (m_executing_utc_timestamp_isSet) {
        obj.insert(QString("ExecutingUtcTimestamp"), ::OpenAPI::toJsonValue(m_executing_utc_timestamp));
    }
    if (m_preparing_health_check_end_utc_timestamp_isSet) {
        obj.insert(QString("PreparingHealthCheckEndUtcTimestamp"), ::OpenAPI::toJsonValue(m_preparing_health_check_end_utc_timestamp));
    }
    if (m_preparing_health_check_start_utc_timestamp_isSet) {
        obj.insert(QString("PreparingHealthCheckStartUtcTimestamp"), ::OpenAPI::toJsonValue(m_preparing_health_check_start_utc_timestamp));
    }
    if (m_preparing_utc_timestamp_isSet) {
        obj.insert(QString("PreparingUtcTimestamp"), ::OpenAPI::toJsonValue(m_preparing_utc_timestamp));
    }
    if (m_restoring_health_check_end_utc_timestamp_isSet) {
        obj.insert(QString("RestoringHealthCheckEndUtcTimestamp"), ::OpenAPI::toJsonValue(m_restoring_health_check_end_utc_timestamp));
    }
    if (m_restoring_health_check_start_utc_timestamp_isSet) {
        obj.insert(QString("RestoringHealthCheckStartUtcTimestamp"), ::OpenAPI::toJsonValue(m_restoring_health_check_start_utc_timestamp));
    }
    if (m_restoring_utc_timestamp_isSet) {
        obj.insert(QString("RestoringUtcTimestamp"), ::OpenAPI::toJsonValue(m_restoring_utc_timestamp));
    }
    return obj;
}

QDateTime OAIRepairTaskHistory::getApprovedUtcTimestamp() const {
    return m_approved_utc_timestamp;
}
void OAIRepairTaskHistory::setApprovedUtcTimestamp(const QDateTime &approved_utc_timestamp) {
    m_approved_utc_timestamp = approved_utc_timestamp;
    m_approved_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_approved_utc_timestamp_Set() const{
    return m_approved_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_approved_utc_timestamp_Valid() const{
    return m_approved_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getClaimedUtcTimestamp() const {
    return m_claimed_utc_timestamp;
}
void OAIRepairTaskHistory::setClaimedUtcTimestamp(const QDateTime &claimed_utc_timestamp) {
    m_claimed_utc_timestamp = claimed_utc_timestamp;
    m_claimed_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_claimed_utc_timestamp_Set() const{
    return m_claimed_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_claimed_utc_timestamp_Valid() const{
    return m_claimed_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getCompletedUtcTimestamp() const {
    return m_completed_utc_timestamp;
}
void OAIRepairTaskHistory::setCompletedUtcTimestamp(const QDateTime &completed_utc_timestamp) {
    m_completed_utc_timestamp = completed_utc_timestamp;
    m_completed_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_completed_utc_timestamp_Set() const{
    return m_completed_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_completed_utc_timestamp_Valid() const{
    return m_completed_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getCreatedUtcTimestamp() const {
    return m_created_utc_timestamp;
}
void OAIRepairTaskHistory::setCreatedUtcTimestamp(const QDateTime &created_utc_timestamp) {
    m_created_utc_timestamp = created_utc_timestamp;
    m_created_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_created_utc_timestamp_Set() const{
    return m_created_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_created_utc_timestamp_Valid() const{
    return m_created_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getExecutingUtcTimestamp() const {
    return m_executing_utc_timestamp;
}
void OAIRepairTaskHistory::setExecutingUtcTimestamp(const QDateTime &executing_utc_timestamp) {
    m_executing_utc_timestamp = executing_utc_timestamp;
    m_executing_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_executing_utc_timestamp_Set() const{
    return m_executing_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_executing_utc_timestamp_Valid() const{
    return m_executing_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getPreparingHealthCheckEndUtcTimestamp() const {
    return m_preparing_health_check_end_utc_timestamp;
}
void OAIRepairTaskHistory::setPreparingHealthCheckEndUtcTimestamp(const QDateTime &preparing_health_check_end_utc_timestamp) {
    m_preparing_health_check_end_utc_timestamp = preparing_health_check_end_utc_timestamp;
    m_preparing_health_check_end_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_preparing_health_check_end_utc_timestamp_Set() const{
    return m_preparing_health_check_end_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_preparing_health_check_end_utc_timestamp_Valid() const{
    return m_preparing_health_check_end_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getPreparingHealthCheckStartUtcTimestamp() const {
    return m_preparing_health_check_start_utc_timestamp;
}
void OAIRepairTaskHistory::setPreparingHealthCheckStartUtcTimestamp(const QDateTime &preparing_health_check_start_utc_timestamp) {
    m_preparing_health_check_start_utc_timestamp = preparing_health_check_start_utc_timestamp;
    m_preparing_health_check_start_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_preparing_health_check_start_utc_timestamp_Set() const{
    return m_preparing_health_check_start_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_preparing_health_check_start_utc_timestamp_Valid() const{
    return m_preparing_health_check_start_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getPreparingUtcTimestamp() const {
    return m_preparing_utc_timestamp;
}
void OAIRepairTaskHistory::setPreparingUtcTimestamp(const QDateTime &preparing_utc_timestamp) {
    m_preparing_utc_timestamp = preparing_utc_timestamp;
    m_preparing_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_preparing_utc_timestamp_Set() const{
    return m_preparing_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_preparing_utc_timestamp_Valid() const{
    return m_preparing_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getRestoringHealthCheckEndUtcTimestamp() const {
    return m_restoring_health_check_end_utc_timestamp;
}
void OAIRepairTaskHistory::setRestoringHealthCheckEndUtcTimestamp(const QDateTime &restoring_health_check_end_utc_timestamp) {
    m_restoring_health_check_end_utc_timestamp = restoring_health_check_end_utc_timestamp;
    m_restoring_health_check_end_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_restoring_health_check_end_utc_timestamp_Set() const{
    return m_restoring_health_check_end_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_restoring_health_check_end_utc_timestamp_Valid() const{
    return m_restoring_health_check_end_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getRestoringHealthCheckStartUtcTimestamp() const {
    return m_restoring_health_check_start_utc_timestamp;
}
void OAIRepairTaskHistory::setRestoringHealthCheckStartUtcTimestamp(const QDateTime &restoring_health_check_start_utc_timestamp) {
    m_restoring_health_check_start_utc_timestamp = restoring_health_check_start_utc_timestamp;
    m_restoring_health_check_start_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_restoring_health_check_start_utc_timestamp_Set() const{
    return m_restoring_health_check_start_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_restoring_health_check_start_utc_timestamp_Valid() const{
    return m_restoring_health_check_start_utc_timestamp_isValid;
}

QDateTime OAIRepairTaskHistory::getRestoringUtcTimestamp() const {
    return m_restoring_utc_timestamp;
}
void OAIRepairTaskHistory::setRestoringUtcTimestamp(const QDateTime &restoring_utc_timestamp) {
    m_restoring_utc_timestamp = restoring_utc_timestamp;
    m_restoring_utc_timestamp_isSet = true;
}

bool OAIRepairTaskHistory::is_restoring_utc_timestamp_Set() const{
    return m_restoring_utc_timestamp_isSet;
}

bool OAIRepairTaskHistory::is_restoring_utc_timestamp_Valid() const{
    return m_restoring_utc_timestamp_isValid;
}

bool OAIRepairTaskHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimed_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executing_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparing_health_check_end_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparing_health_check_start_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparing_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoring_health_check_end_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoring_health_check_start_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoring_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairTaskHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
