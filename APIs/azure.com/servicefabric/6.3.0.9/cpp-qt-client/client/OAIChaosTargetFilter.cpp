/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosTargetFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosTargetFilter::OAIChaosTargetFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosTargetFilter::OAIChaosTargetFilter() {
    this->initializeModel();
}

OAIChaosTargetFilter::~OAIChaosTargetFilter() {}

void OAIChaosTargetFilter::initializeModel() {

    m_application_inclusion_list_isSet = false;
    m_application_inclusion_list_isValid = false;

    m_node_type_inclusion_list_isSet = false;
    m_node_type_inclusion_list_isValid = false;
}

void OAIChaosTargetFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosTargetFilter::fromJsonObject(QJsonObject json) {

    m_application_inclusion_list_isValid = ::OpenAPI::fromJsonValue(m_application_inclusion_list, json[QString("ApplicationInclusionList")]);
    m_application_inclusion_list_isSet = !json[QString("ApplicationInclusionList")].isNull() && m_application_inclusion_list_isValid;

    m_node_type_inclusion_list_isValid = ::OpenAPI::fromJsonValue(m_node_type_inclusion_list, json[QString("NodeTypeInclusionList")]);
    m_node_type_inclusion_list_isSet = !json[QString("NodeTypeInclusionList")].isNull() && m_node_type_inclusion_list_isValid;
}

QString OAIChaosTargetFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosTargetFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_application_inclusion_list.size() > 0) {
        obj.insert(QString("ApplicationInclusionList"), ::OpenAPI::toJsonValue(m_application_inclusion_list));
    }
    if (m_node_type_inclusion_list.size() > 0) {
        obj.insert(QString("NodeTypeInclusionList"), ::OpenAPI::toJsonValue(m_node_type_inclusion_list));
    }
    return obj;
}

QList<QString> OAIChaosTargetFilter::getApplicationInclusionList() const {
    return m_application_inclusion_list;
}
void OAIChaosTargetFilter::setApplicationInclusionList(const QList<QString> &application_inclusion_list) {
    m_application_inclusion_list = application_inclusion_list;
    m_application_inclusion_list_isSet = true;
}

bool OAIChaosTargetFilter::is_application_inclusion_list_Set() const{
    return m_application_inclusion_list_isSet;
}

bool OAIChaosTargetFilter::is_application_inclusion_list_Valid() const{
    return m_application_inclusion_list_isValid;
}

QList<QString> OAIChaosTargetFilter::getNodeTypeInclusionList() const {
    return m_node_type_inclusion_list;
}
void OAIChaosTargetFilter::setNodeTypeInclusionList(const QList<QString> &node_type_inclusion_list) {
    m_node_type_inclusion_list = node_type_inclusion_list;
    m_node_type_inclusion_list_isSet = true;
}

bool OAIChaosTargetFilter::is_node_type_inclusion_list_Set() const{
    return m_node_type_inclusion_list_isSet;
}

bool OAIChaosTargetFilter::is_node_type_inclusion_list_Valid() const{
    return m_node_type_inclusion_list_isValid;
}

bool OAIChaosTargetFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_inclusion_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_inclusion_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosTargetFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
