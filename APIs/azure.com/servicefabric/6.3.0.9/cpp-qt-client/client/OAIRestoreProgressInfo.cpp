/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreProgressInfo::OAIRestoreProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreProgressInfo::OAIRestoreProgressInfo() {
    this->initializeModel();
}

OAIRestoreProgressInfo::~OAIRestoreProgressInfo() {}

void OAIRestoreProgressInfo::initializeModel() {

    m_failure_error_isSet = false;
    m_failure_error_isValid = false;

    m_restore_state_isSet = false;
    m_restore_state_isValid = false;

    m_restored_epoch_isSet = false;
    m_restored_epoch_isValid = false;

    m_restored_lsn_isSet = false;
    m_restored_lsn_isValid = false;

    m_time_stamp_utc_isSet = false;
    m_time_stamp_utc_isValid = false;
}

void OAIRestoreProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreProgressInfo::fromJsonObject(QJsonObject json) {

    m_failure_error_isValid = ::OpenAPI::fromJsonValue(m_failure_error, json[QString("FailureError")]);
    m_failure_error_isSet = !json[QString("FailureError")].isNull() && m_failure_error_isValid;

    m_restore_state_isValid = ::OpenAPI::fromJsonValue(m_restore_state, json[QString("RestoreState")]);
    m_restore_state_isSet = !json[QString("RestoreState")].isNull() && m_restore_state_isValid;

    m_restored_epoch_isValid = ::OpenAPI::fromJsonValue(m_restored_epoch, json[QString("RestoredEpoch")]);
    m_restored_epoch_isSet = !json[QString("RestoredEpoch")].isNull() && m_restored_epoch_isValid;

    m_restored_lsn_isValid = ::OpenAPI::fromJsonValue(m_restored_lsn, json[QString("RestoredLsn")]);
    m_restored_lsn_isSet = !json[QString("RestoredLsn")].isNull() && m_restored_lsn_isValid;

    m_time_stamp_utc_isValid = ::OpenAPI::fromJsonValue(m_time_stamp_utc, json[QString("TimeStampUtc")]);
    m_time_stamp_utc_isSet = !json[QString("TimeStampUtc")].isNull() && m_time_stamp_utc_isValid;
}

QString OAIRestoreProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_error.isSet()) {
        obj.insert(QString("FailureError"), ::OpenAPI::toJsonValue(m_failure_error));
    }
    if (m_restore_state.isSet()) {
        obj.insert(QString("RestoreState"), ::OpenAPI::toJsonValue(m_restore_state));
    }
    if (m_restored_epoch.isSet()) {
        obj.insert(QString("RestoredEpoch"), ::OpenAPI::toJsonValue(m_restored_epoch));
    }
    if (m_restored_lsn_isSet) {
        obj.insert(QString("RestoredLsn"), ::OpenAPI::toJsonValue(m_restored_lsn));
    }
    if (m_time_stamp_utc_isSet) {
        obj.insert(QString("TimeStampUtc"), ::OpenAPI::toJsonValue(m_time_stamp_utc));
    }
    return obj;
}

OAIFabricErrorError OAIRestoreProgressInfo::getFailureError() const {
    return m_failure_error;
}
void OAIRestoreProgressInfo::setFailureError(const OAIFabricErrorError &failure_error) {
    m_failure_error = failure_error;
    m_failure_error_isSet = true;
}

bool OAIRestoreProgressInfo::is_failure_error_Set() const{
    return m_failure_error_isSet;
}

bool OAIRestoreProgressInfo::is_failure_error_Valid() const{
    return m_failure_error_isValid;
}

OAIRestoreState OAIRestoreProgressInfo::getRestoreState() const {
    return m_restore_state;
}
void OAIRestoreProgressInfo::setRestoreState(const OAIRestoreState &restore_state) {
    m_restore_state = restore_state;
    m_restore_state_isSet = true;
}

bool OAIRestoreProgressInfo::is_restore_state_Set() const{
    return m_restore_state_isSet;
}

bool OAIRestoreProgressInfo::is_restore_state_Valid() const{
    return m_restore_state_isValid;
}

OAIBackupEpoch OAIRestoreProgressInfo::getRestoredEpoch() const {
    return m_restored_epoch;
}
void OAIRestoreProgressInfo::setRestoredEpoch(const OAIBackupEpoch &restored_epoch) {
    m_restored_epoch = restored_epoch;
    m_restored_epoch_isSet = true;
}

bool OAIRestoreProgressInfo::is_restored_epoch_Set() const{
    return m_restored_epoch_isSet;
}

bool OAIRestoreProgressInfo::is_restored_epoch_Valid() const{
    return m_restored_epoch_isValid;
}

QString OAIRestoreProgressInfo::getRestoredLsn() const {
    return m_restored_lsn;
}
void OAIRestoreProgressInfo::setRestoredLsn(const QString &restored_lsn) {
    m_restored_lsn = restored_lsn;
    m_restored_lsn_isSet = true;
}

bool OAIRestoreProgressInfo::is_restored_lsn_Set() const{
    return m_restored_lsn_isSet;
}

bool OAIRestoreProgressInfo::is_restored_lsn_Valid() const{
    return m_restored_lsn_isValid;
}

QDateTime OAIRestoreProgressInfo::getTimeStampUtc() const {
    return m_time_stamp_utc;
}
void OAIRestoreProgressInfo::setTimeStampUtc(const QDateTime &time_stamp_utc) {
    m_time_stamp_utc = time_stamp_utc;
    m_time_stamp_utc_isSet = true;
}

bool OAIRestoreProgressInfo::is_time_stamp_utc_Set() const{
    return m_time_stamp_utc_isSet;
}

bool OAIRestoreProgressInfo::is_time_stamp_utc_Valid() const{
    return m_time_stamp_utc_isValid;
}

bool OAIRestoreProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restored_epoch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restored_lsn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
