/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaInfo::OAIReplicaInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaInfo::OAIReplicaInfo() {
    this->initializeModel();
}

OAIReplicaInfo::~OAIReplicaInfo() {}

void OAIReplicaInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_last_in_build_duration_in_seconds_isSet = false;
    m_last_in_build_duration_in_seconds_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_replica_status_isSet = false;
    m_replica_status_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;
}

void OAIReplicaInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_last_in_build_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_last_in_build_duration_in_seconds, json[QString("LastInBuildDurationInSeconds")]);
    m_last_in_build_duration_in_seconds_isSet = !json[QString("LastInBuildDurationInSeconds")].isNull() && m_last_in_build_duration_in_seconds_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_replica_status_isValid = ::OpenAPI::fromJsonValue(m_replica_status, json[QString("ReplicaStatus")]);
    m_replica_status_isSet = !json[QString("ReplicaStatus")].isNull() && m_replica_status_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;
}

QString OAIReplicaInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_last_in_build_duration_in_seconds_isSet) {
        obj.insert(QString("LastInBuildDurationInSeconds"), ::OpenAPI::toJsonValue(m_last_in_build_duration_in_seconds));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_replica_status.isSet()) {
        obj.insert(QString("ReplicaStatus"), ::OpenAPI::toJsonValue(m_replica_status));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    return obj;
}

QString OAIReplicaInfo::getAddress() const {
    return m_address;
}
void OAIReplicaInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIReplicaInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIReplicaInfo::is_address_Valid() const{
    return m_address_isValid;
}

OAIHealthState OAIReplicaInfo::getHealthState() const {
    return m_health_state;
}
void OAIReplicaInfo::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIReplicaInfo::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIReplicaInfo::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIReplicaInfo::getLastInBuildDurationInSeconds() const {
    return m_last_in_build_duration_in_seconds;
}
void OAIReplicaInfo::setLastInBuildDurationInSeconds(const QString &last_in_build_duration_in_seconds) {
    m_last_in_build_duration_in_seconds = last_in_build_duration_in_seconds;
    m_last_in_build_duration_in_seconds_isSet = true;
}

bool OAIReplicaInfo::is_last_in_build_duration_in_seconds_Set() const{
    return m_last_in_build_duration_in_seconds_isSet;
}

bool OAIReplicaInfo::is_last_in_build_duration_in_seconds_Valid() const{
    return m_last_in_build_duration_in_seconds_isValid;
}

QString OAIReplicaInfo::getNodeName() const {
    return m_node_name;
}
void OAIReplicaInfo::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIReplicaInfo::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIReplicaInfo::is_node_name_Valid() const{
    return m_node_name_isValid;
}

OAIReplicaStatus OAIReplicaInfo::getReplicaStatus() const {
    return m_replica_status;
}
void OAIReplicaInfo::setReplicaStatus(const OAIReplicaStatus &replica_status) {
    m_replica_status = replica_status;
    m_replica_status_isSet = true;
}

bool OAIReplicaInfo::is_replica_status_Set() const{
    return m_replica_status_isSet;
}

bool OAIReplicaInfo::is_replica_status_Valid() const{
    return m_replica_status_isValid;
}

OAIServiceKind OAIReplicaInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIReplicaInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIReplicaInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIReplicaInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

bool OAIReplicaInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_in_build_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
