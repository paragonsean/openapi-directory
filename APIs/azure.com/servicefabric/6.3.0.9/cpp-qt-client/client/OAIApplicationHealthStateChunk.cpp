/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationHealthStateChunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationHealthStateChunk::OAIApplicationHealthStateChunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationHealthStateChunk::OAIApplicationHealthStateChunk() {
    this->initializeModel();
}

OAIApplicationHealthStateChunk::~OAIApplicationHealthStateChunk() {}

void OAIApplicationHealthStateChunk::initializeModel() {

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_deployed_application_health_state_chunks_isSet = false;
    m_deployed_application_health_state_chunks_isValid = false;

    m_service_health_state_chunks_isSet = false;
    m_service_health_state_chunks_isValid = false;
}

void OAIApplicationHealthStateChunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationHealthStateChunk::fromJsonObject(QJsonObject json) {

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_deployed_application_health_state_chunks_isValid = ::OpenAPI::fromJsonValue(m_deployed_application_health_state_chunks, json[QString("DeployedApplicationHealthStateChunks")]);
    m_deployed_application_health_state_chunks_isSet = !json[QString("DeployedApplicationHealthStateChunks")].isNull() && m_deployed_application_health_state_chunks_isValid;

    m_service_health_state_chunks_isValid = ::OpenAPI::fromJsonValue(m_service_health_state_chunks, json[QString("ServiceHealthStateChunks")]);
    m_service_health_state_chunks_isSet = !json[QString("ServiceHealthStateChunks")].isNull() && m_service_health_state_chunks_isValid;
}

QString OAIApplicationHealthStateChunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationHealthStateChunk::asJsonObject() const {
    QJsonObject obj;
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_deployed_application_health_state_chunks.isSet()) {
        obj.insert(QString("DeployedApplicationHealthStateChunks"), ::OpenAPI::toJsonValue(m_deployed_application_health_state_chunks));
    }
    if (m_service_health_state_chunks.isSet()) {
        obj.insert(QString("ServiceHealthStateChunks"), ::OpenAPI::toJsonValue(m_service_health_state_chunks));
    }
    return obj;
}

OAIHealthState OAIApplicationHealthStateChunk::getHealthState() const {
    return m_health_state;
}
void OAIApplicationHealthStateChunk::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIApplicationHealthStateChunk::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIApplicationHealthStateChunk::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIApplicationHealthStateChunk::getApplicationName() const {
    return m_application_name;
}
void OAIApplicationHealthStateChunk::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIApplicationHealthStateChunk::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIApplicationHealthStateChunk::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIApplicationHealthStateChunk::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIApplicationHealthStateChunk::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIApplicationHealthStateChunk::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIApplicationHealthStateChunk::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

OAIDeployedApplicationHealthStateChunkList OAIApplicationHealthStateChunk::getDeployedApplicationHealthStateChunks() const {
    return m_deployed_application_health_state_chunks;
}
void OAIApplicationHealthStateChunk::setDeployedApplicationHealthStateChunks(const OAIDeployedApplicationHealthStateChunkList &deployed_application_health_state_chunks) {
    m_deployed_application_health_state_chunks = deployed_application_health_state_chunks;
    m_deployed_application_health_state_chunks_isSet = true;
}

bool OAIApplicationHealthStateChunk::is_deployed_application_health_state_chunks_Set() const{
    return m_deployed_application_health_state_chunks_isSet;
}

bool OAIApplicationHealthStateChunk::is_deployed_application_health_state_chunks_Valid() const{
    return m_deployed_application_health_state_chunks_isValid;
}

OAIServiceHealthStateChunkList OAIApplicationHealthStateChunk::getServiceHealthStateChunks() const {
    return m_service_health_state_chunks;
}
void OAIApplicationHealthStateChunk::setServiceHealthStateChunks(const OAIServiceHealthStateChunkList &service_health_state_chunks) {
    m_service_health_state_chunks = service_health_state_chunks;
    m_service_health_state_chunks_isSet = true;
}

bool OAIApplicationHealthStateChunk::is_service_health_state_chunks_Set() const{
    return m_service_health_state_chunks_isSet;
}

bool OAIApplicationHealthStateChunk::is_service_health_state_chunks_Valid() const{
    return m_service_health_state_chunks_isValid;
}

bool OAIApplicationHealthStateChunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_application_health_state_chunks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_health_state_chunks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationHealthStateChunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
