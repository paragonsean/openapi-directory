/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployServicePackageToNodeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployServicePackageToNodeDescription::OAIDeployServicePackageToNodeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployServicePackageToNodeDescription::OAIDeployServicePackageToNodeDescription() {
    this->initializeModel();
}

OAIDeployServicePackageToNodeDescription::~OAIDeployServicePackageToNodeDescription() {}

void OAIDeployServicePackageToNodeDescription::initializeModel() {

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_application_type_version_isSet = false;
    m_application_type_version_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_package_sharing_policy_isSet = false;
    m_package_sharing_policy_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;
}

void OAIDeployServicePackageToNodeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployServicePackageToNodeDescription::fromJsonObject(QJsonObject json) {

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_application_type_version, json[QString("ApplicationTypeVersion")]);
    m_application_type_version_isSet = !json[QString("ApplicationTypeVersion")].isNull() && m_application_type_version_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_package_sharing_policy_isValid = ::OpenAPI::fromJsonValue(m_package_sharing_policy, json[QString("PackageSharingPolicy")]);
    m_package_sharing_policy_isSet = !json[QString("PackageSharingPolicy")].isNull() && m_package_sharing_policy_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;
}

QString OAIDeployServicePackageToNodeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployServicePackageToNodeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_application_type_version_isSet) {
        obj.insert(QString("ApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_application_type_version));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_package_sharing_policy.size() > 0) {
        obj.insert(QString("PackageSharingPolicy"), ::OpenAPI::toJsonValue(m_package_sharing_policy));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    return obj;
}

QString OAIDeployServicePackageToNodeDescription::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIDeployServicePackageToNodeDescription::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIDeployServicePackageToNodeDescription::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIDeployServicePackageToNodeDescription::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

QString OAIDeployServicePackageToNodeDescription::getApplicationTypeVersion() const {
    return m_application_type_version;
}
void OAIDeployServicePackageToNodeDescription::setApplicationTypeVersion(const QString &application_type_version) {
    m_application_type_version = application_type_version;
    m_application_type_version_isSet = true;
}

bool OAIDeployServicePackageToNodeDescription::is_application_type_version_Set() const{
    return m_application_type_version_isSet;
}

bool OAIDeployServicePackageToNodeDescription::is_application_type_version_Valid() const{
    return m_application_type_version_isValid;
}

QString OAIDeployServicePackageToNodeDescription::getNodeName() const {
    return m_node_name;
}
void OAIDeployServicePackageToNodeDescription::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIDeployServicePackageToNodeDescription::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIDeployServicePackageToNodeDescription::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QList<OAIPackageSharingPolicyInfo> OAIDeployServicePackageToNodeDescription::getPackageSharingPolicy() const {
    return m_package_sharing_policy;
}
void OAIDeployServicePackageToNodeDescription::setPackageSharingPolicy(const QList<OAIPackageSharingPolicyInfo> &package_sharing_policy) {
    m_package_sharing_policy = package_sharing_policy;
    m_package_sharing_policy_isSet = true;
}

bool OAIDeployServicePackageToNodeDescription::is_package_sharing_policy_Set() const{
    return m_package_sharing_policy_isSet;
}

bool OAIDeployServicePackageToNodeDescription::is_package_sharing_policy_Valid() const{
    return m_package_sharing_policy_isValid;
}

QString OAIDeployServicePackageToNodeDescription::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIDeployServicePackageToNodeDescription::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIDeployServicePackageToNodeDescription::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIDeployServicePackageToNodeDescription::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

bool OAIDeployServicePackageToNodeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_sharing_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployServicePackageToNodeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_type_name_isValid && m_application_type_version_isValid && m_node_name_isValid && m_service_manifest_name_isValid && true;
}

} // namespace OpenAPI
