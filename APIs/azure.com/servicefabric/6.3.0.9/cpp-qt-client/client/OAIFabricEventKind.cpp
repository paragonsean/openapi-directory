/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFabricEventKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFabricEventKind::OAIFabricEventKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFabricEventKind::OAIFabricEventKind() {
    this->initializeModel();
}

OAIFabricEventKind::~OAIFabricEventKind() {}

void OAIFabricEventKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFabricEventKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFabricEventKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ClusterEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTEREVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContainerInstanceEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CONTAINERINSTANCEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReplicaEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::REPLICAEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionAnalysisEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONANALYSISEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationDeleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONDELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADECOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeDomainComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEDOMAINCOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeRollbackComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKCOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeRollbackStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKSTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADESTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplicationHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplicationHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProcessDeactivated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PROCESSDEACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContainerDeactivated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CONTAINERDEACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeAborted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeAborting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEABORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeAdded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEADDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeClose", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODECLOSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeClosing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODECLOSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDeactivateComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDEACTIVATECOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDeactivateStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDEACTIVATESTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeOpenedSuccess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEOPENEDSUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeOpenFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEOPENFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeOpening", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEOPENING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeRemoved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEREMOVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionReconfigurationCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONRECONFIGURATIONCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionPrimaryMoveAnalysis", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONPRIMARYMOVEANALYSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICECREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceDeleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEDELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServiceHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDSERVICEHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServiceHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDSERVICEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatefulReplicaHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatefulReplicaHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatelessReplicaHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatelessReplicaHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterHealthReportCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERHEALTHREPORTCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADECOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeDomainComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEDOMAINCOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeRollbackComplete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKCOMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeRollbackStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKSTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADESTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosStopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSSTOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRestartNodeFaultCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSRESTARTNODEFAULTCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRestartCodePackageFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSRESTARTCODEPACKAGEFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRestartCodePackageFaultCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSRESTARTCODEPACKAGEFAULTCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRemoveReplicaFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSREMOVEREPLICAFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRemoveReplicaFaultCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSREMOVEREPLICAFAULTCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosMoveSecondaryFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSMOVESECONDARYFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosMovePrimaryFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSMOVEPRIMARYFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRestartReplicaFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSRESTARTREPLICAFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosRestartNodeFaultScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSRESTARTNODEFAULTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFabricEventKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFabricEventKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFabricEventKind::CLUSTEREVENT:
            val = "ClusterEvent";
            break;
        case eOAIFabricEventKind::CONTAINERINSTANCEEVENT:
            val = "ContainerInstanceEvent";
            break;
        case eOAIFabricEventKind::NODEEVENT:
            val = "NodeEvent";
            break;
        case eOAIFabricEventKind::APPLICATIONEVENT:
            val = "ApplicationEvent";
            break;
        case eOAIFabricEventKind::SERVICEEVENT:
            val = "ServiceEvent";
            break;
        case eOAIFabricEventKind::PARTITIONEVENT:
            val = "PartitionEvent";
            break;
        case eOAIFabricEventKind::REPLICAEVENT:
            val = "ReplicaEvent";
            break;
        case eOAIFabricEventKind::PARTITIONANALYSISEVENT:
            val = "PartitionAnalysisEvent";
            break;
        case eOAIFabricEventKind::APPLICATIONCREATED:
            val = "ApplicationCreated";
            break;
        case eOAIFabricEventKind::APPLICATIONDELETED:
            val = "ApplicationDeleted";
            break;
        case eOAIFabricEventKind::APPLICATIONHEALTHREPORTCREATED:
            val = "ApplicationHealthReportCreated";
            break;
        case eOAIFabricEventKind::APPLICATIONHEALTHREPORTEXPIRED:
            val = "ApplicationHealthReportExpired";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADECOMPLETE:
            val = "ApplicationUpgradeComplete";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEDOMAINCOMPLETE:
            val = "ApplicationUpgradeDomainComplete";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKCOMPLETE:
            val = "ApplicationUpgradeRollbackComplete";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKSTART:
            val = "ApplicationUpgradeRollbackStart";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADESTART:
            val = "ApplicationUpgradeStart";
            break;
        case eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTCREATED:
            val = "DeployedApplicationHealthReportCreated";
            break;
        case eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED:
            val = "DeployedApplicationHealthReportExpired";
            break;
        case eOAIFabricEventKind::PROCESSDEACTIVATED:
            val = "ProcessDeactivated";
            break;
        case eOAIFabricEventKind::CONTAINERDEACTIVATED:
            val = "ContainerDeactivated";
            break;
        case eOAIFabricEventKind::NODEABORTED:
            val = "NodeAborted";
            break;
        case eOAIFabricEventKind::NODEABORTING:
            val = "NodeAborting";
            break;
        case eOAIFabricEventKind::NODEADDED:
            val = "NodeAdded";
            break;
        case eOAIFabricEventKind::NODECLOSE:
            val = "NodeClose";
            break;
        case eOAIFabricEventKind::NODECLOSING:
            val = "NodeClosing";
            break;
        case eOAIFabricEventKind::NODEDEACTIVATECOMPLETE:
            val = "NodeDeactivateComplete";
            break;
        case eOAIFabricEventKind::NODEDEACTIVATESTART:
            val = "NodeDeactivateStart";
            break;
        case eOAIFabricEventKind::NODEDOWN:
            val = "NodeDown";
            break;
        case eOAIFabricEventKind::NODEHEALTHREPORTCREATED:
            val = "NodeHealthReportCreated";
            break;
        case eOAIFabricEventKind::NODEHEALTHREPORTEXPIRED:
            val = "NodeHealthReportExpired";
            break;
        case eOAIFabricEventKind::NODEOPENEDSUCCESS:
            val = "NodeOpenedSuccess";
            break;
        case eOAIFabricEventKind::NODEOPENFAILED:
            val = "NodeOpenFailed";
            break;
        case eOAIFabricEventKind::NODEOPENING:
            val = "NodeOpening";
            break;
        case eOAIFabricEventKind::NODEREMOVED:
            val = "NodeRemoved";
            break;
        case eOAIFabricEventKind::NODEUP:
            val = "NodeUp";
            break;
        case eOAIFabricEventKind::PARTITIONHEALTHREPORTCREATED:
            val = "PartitionHealthReportCreated";
            break;
        case eOAIFabricEventKind::PARTITIONHEALTHREPORTEXPIRED:
            val = "PartitionHealthReportExpired";
            break;
        case eOAIFabricEventKind::PARTITIONRECONFIGURATIONCOMPLETED:
            val = "PartitionReconfigurationCompleted";
            break;
        case eOAIFabricEventKind::PARTITIONPRIMARYMOVEANALYSIS:
            val = "PartitionPrimaryMoveAnalysis";
            break;
        case eOAIFabricEventKind::SERVICECREATED:
            val = "ServiceCreated";
            break;
        case eOAIFabricEventKind::SERVICEDELETED:
            val = "ServiceDeleted";
            break;
        case eOAIFabricEventKind::SERVICEHEALTHREPORTCREATED:
            val = "ServiceHealthReportCreated";
            break;
        case eOAIFabricEventKind::SERVICEHEALTHREPORTEXPIRED:
            val = "ServiceHealthReportExpired";
            break;
        case eOAIFabricEventKind::DEPLOYEDSERVICEHEALTHREPORTCREATED:
            val = "DeployedServiceHealthReportCreated";
            break;
        case eOAIFabricEventKind::DEPLOYEDSERVICEHEALTHREPORTEXPIRED:
            val = "DeployedServiceHealthReportExpired";
            break;
        case eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTCREATED:
            val = "StatefulReplicaHealthReportCreated";
            break;
        case eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTEXPIRED:
            val = "StatefulReplicaHealthReportExpired";
            break;
        case eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTCREATED:
            val = "StatelessReplicaHealthReportCreated";
            break;
        case eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTEXPIRED:
            val = "StatelessReplicaHealthReportExpired";
            break;
        case eOAIFabricEventKind::CLUSTERHEALTHREPORTCREATED:
            val = "ClusterHealthReportCreated";
            break;
        case eOAIFabricEventKind::CLUSTERHEALTHREPORTEXPIRED:
            val = "ClusterHealthReportExpired";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADECOMPLETE:
            val = "ClusterUpgradeComplete";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEDOMAINCOMPLETE:
            val = "ClusterUpgradeDomainComplete";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKCOMPLETE:
            val = "ClusterUpgradeRollbackComplete";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKSTART:
            val = "ClusterUpgradeRollbackStart";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADESTART:
            val = "ClusterUpgradeStart";
            break;
        case eOAIFabricEventKind::CHAOSSTOPPED:
            val = "ChaosStopped";
            break;
        case eOAIFabricEventKind::CHAOSSTARTED:
            val = "ChaosStarted";
            break;
        case eOAIFabricEventKind::CHAOSRESTARTNODEFAULTCOMPLETED:
            val = "ChaosRestartNodeFaultCompleted";
            break;
        case eOAIFabricEventKind::CHAOSRESTARTCODEPACKAGEFAULTSCHEDULED:
            val = "ChaosRestartCodePackageFaultScheduled";
            break;
        case eOAIFabricEventKind::CHAOSRESTARTCODEPACKAGEFAULTCOMPLETED:
            val = "ChaosRestartCodePackageFaultCompleted";
            break;
        case eOAIFabricEventKind::CHAOSREMOVEREPLICAFAULTSCHEDULED:
            val = "ChaosRemoveReplicaFaultScheduled";
            break;
        case eOAIFabricEventKind::CHAOSREMOVEREPLICAFAULTCOMPLETED:
            val = "ChaosRemoveReplicaFaultCompleted";
            break;
        case eOAIFabricEventKind::CHAOSMOVESECONDARYFAULTSCHEDULED:
            val = "ChaosMoveSecondaryFaultScheduled";
            break;
        case eOAIFabricEventKind::CHAOSMOVEPRIMARYFAULTSCHEDULED:
            val = "ChaosMovePrimaryFaultScheduled";
            break;
        case eOAIFabricEventKind::CHAOSRESTARTREPLICAFAULTSCHEDULED:
            val = "ChaosRestartReplicaFaultScheduled";
            break;
        case eOAIFabricEventKind::CHAOSRESTARTNODEFAULTSCHEDULED:
            val = "ChaosRestartNodeFaultScheduled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFabricEventKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFabricEventKind::eOAIFabricEventKind OAIFabricEventKind::getValue() const {
    return m_value;
}

void OAIFabricEventKind::setValue(const OAIFabricEventKind::eOAIFabricEventKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFabricEventKind::isSet() const {
    
    return m_value_isSet;
}

bool OAIFabricEventKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
