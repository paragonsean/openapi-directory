/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComposeDeploymentUpgradeProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComposeDeploymentUpgradeProgressInfo::OAIComposeDeploymentUpgradeProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComposeDeploymentUpgradeProgressInfo::OAIComposeDeploymentUpgradeProgressInfo() {
    this->initializeModel();
}

OAIComposeDeploymentUpgradeProgressInfo::~OAIComposeDeploymentUpgradeProgressInfo() {}

void OAIComposeDeploymentUpgradeProgressInfo::initializeModel() {

    m_application_health_policy_isSet = false;
    m_application_health_policy_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_unhealthy_evaluations_isSet = false;
    m_application_unhealthy_evaluations_isValid = false;

    m_application_upgrade_status_details_isSet = false;
    m_application_upgrade_status_details_isValid = false;

    m_current_upgrade_domain_duration_isSet = false;
    m_current_upgrade_domain_duration_isValid = false;

    m_current_upgrade_domain_progress_isSet = false;
    m_current_upgrade_domain_progress_isValid = false;

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_failure_timestamp_utc_isSet = false;
    m_failure_timestamp_utc_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_monitoring_policy_isSet = false;
    m_monitoring_policy_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_start_timestamp_utc_isSet = false;
    m_start_timestamp_utc_isValid = false;

    m_target_application_type_version_isSet = false;
    m_target_application_type_version_isValid = false;

    m_upgrade_domain_progress_at_failure_isSet = false;
    m_upgrade_domain_progress_at_failure_isValid = false;

    m_upgrade_duration_isSet = false;
    m_upgrade_duration_isValid = false;

    m_upgrade_kind_isSet = false;
    m_upgrade_kind_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;

    m_upgrade_state_isSet = false;
    m_upgrade_state_isValid = false;

    m_upgrade_status_details_isSet = false;
    m_upgrade_status_details_isValid = false;
}

void OAIComposeDeploymentUpgradeProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComposeDeploymentUpgradeProgressInfo::fromJsonObject(QJsonObject json) {

    m_application_health_policy_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy, json[QString("ApplicationHealthPolicy")]);
    m_application_health_policy_isSet = !json[QString("ApplicationHealthPolicy")].isNull() && m_application_health_policy_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_unhealthy_evaluations_isValid = ::OpenAPI::fromJsonValue(m_application_unhealthy_evaluations, json[QString("ApplicationUnhealthyEvaluations")]);
    m_application_unhealthy_evaluations_isSet = !json[QString("ApplicationUnhealthyEvaluations")].isNull() && m_application_unhealthy_evaluations_isValid;

    m_application_upgrade_status_details_isValid = ::OpenAPI::fromJsonValue(m_application_upgrade_status_details, json[QString("ApplicationUpgradeStatusDetails")]);
    m_application_upgrade_status_details_isSet = !json[QString("ApplicationUpgradeStatusDetails")].isNull() && m_application_upgrade_status_details_isValid;

    m_current_upgrade_domain_duration_isValid = ::OpenAPI::fromJsonValue(m_current_upgrade_domain_duration, json[QString("CurrentUpgradeDomainDuration")]);
    m_current_upgrade_domain_duration_isSet = !json[QString("CurrentUpgradeDomainDuration")].isNull() && m_current_upgrade_domain_duration_isValid;

    m_current_upgrade_domain_progress_isValid = ::OpenAPI::fromJsonValue(m_current_upgrade_domain_progress, json[QString("CurrentUpgradeDomainProgress")]);
    m_current_upgrade_domain_progress_isSet = !json[QString("CurrentUpgradeDomainProgress")].isNull() && m_current_upgrade_domain_progress_isValid;

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("DeploymentName")]);
    m_deployment_name_isSet = !json[QString("DeploymentName")].isNull() && m_deployment_name_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_failure_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_failure_timestamp_utc, json[QString("FailureTimestampUtc")]);
    m_failure_timestamp_utc_isSet = !json[QString("FailureTimestampUtc")].isNull() && m_failure_timestamp_utc_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("ForceRestart")]);
    m_force_restart_isSet = !json[QString("ForceRestart")].isNull() && m_force_restart_isValid;

    m_monitoring_policy_isValid = ::OpenAPI::fromJsonValue(m_monitoring_policy, json[QString("MonitoringPolicy")]);
    m_monitoring_policy_isSet = !json[QString("MonitoringPolicy")].isNull() && m_monitoring_policy_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_start_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp_utc, json[QString("StartTimestampUtc")]);
    m_start_timestamp_utc_isSet = !json[QString("StartTimestampUtc")].isNull() && m_start_timestamp_utc_isValid;

    m_target_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_target_application_type_version, json[QString("TargetApplicationTypeVersion")]);
    m_target_application_type_version_isSet = !json[QString("TargetApplicationTypeVersion")].isNull() && m_target_application_type_version_isValid;

    m_upgrade_domain_progress_at_failure_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_progress_at_failure, json[QString("UpgradeDomainProgressAtFailure")]);
    m_upgrade_domain_progress_at_failure_isSet = !json[QString("UpgradeDomainProgressAtFailure")].isNull() && m_upgrade_domain_progress_at_failure_isValid;

    m_upgrade_duration_isValid = ::OpenAPI::fromJsonValue(m_upgrade_duration, json[QString("UpgradeDuration")]);
    m_upgrade_duration_isSet = !json[QString("UpgradeDuration")].isNull() && m_upgrade_duration_isValid;

    m_upgrade_kind_isValid = ::OpenAPI::fromJsonValue(m_upgrade_kind, json[QString("UpgradeKind")]);
    m_upgrade_kind_isSet = !json[QString("UpgradeKind")].isNull() && m_upgrade_kind_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;

    m_upgrade_state_isValid = ::OpenAPI::fromJsonValue(m_upgrade_state, json[QString("UpgradeState")]);
    m_upgrade_state_isSet = !json[QString("UpgradeState")].isNull() && m_upgrade_state_isValid;

    m_upgrade_status_details_isValid = ::OpenAPI::fromJsonValue(m_upgrade_status_details, json[QString("UpgradeStatusDetails")]);
    m_upgrade_status_details_isSet = !json[QString("UpgradeStatusDetails")].isNull() && m_upgrade_status_details_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComposeDeploymentUpgradeProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy.isSet()) {
        obj.insert(QString("ApplicationHealthPolicy"), ::OpenAPI::toJsonValue(m_application_health_policy));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_unhealthy_evaluations.size() > 0) {
        obj.insert(QString("ApplicationUnhealthyEvaluations"), ::OpenAPI::toJsonValue(m_application_unhealthy_evaluations));
    }
    if (m_application_upgrade_status_details_isSet) {
        obj.insert(QString("ApplicationUpgradeStatusDetails"), ::OpenAPI::toJsonValue(m_application_upgrade_status_details));
    }
    if (m_current_upgrade_domain_duration_isSet) {
        obj.insert(QString("CurrentUpgradeDomainDuration"), ::OpenAPI::toJsonValue(m_current_upgrade_domain_duration));
    }
    if (m_current_upgrade_domain_progress.isSet()) {
        obj.insert(QString("CurrentUpgradeDomainProgress"), ::OpenAPI::toJsonValue(m_current_upgrade_domain_progress));
    }
    if (m_deployment_name_isSet) {
        obj.insert(QString("DeploymentName"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_failure_timestamp_utc_isSet) {
        obj.insert(QString("FailureTimestampUtc"), ::OpenAPI::toJsonValue(m_failure_timestamp_utc));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("ForceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_monitoring_policy.isSet()) {
        obj.insert(QString("MonitoringPolicy"), ::OpenAPI::toJsonValue(m_monitoring_policy));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_start_timestamp_utc_isSet) {
        obj.insert(QString("StartTimestampUtc"), ::OpenAPI::toJsonValue(m_start_timestamp_utc));
    }
    if (m_target_application_type_version_isSet) {
        obj.insert(QString("TargetApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_target_application_type_version));
    }
    if (m_upgrade_domain_progress_at_failure.isSet()) {
        obj.insert(QString("UpgradeDomainProgressAtFailure"), ::OpenAPI::toJsonValue(m_upgrade_domain_progress_at_failure));
    }
    if (m_upgrade_duration_isSet) {
        obj.insert(QString("UpgradeDuration"), ::OpenAPI::toJsonValue(m_upgrade_duration));
    }
    if (m_upgrade_kind.isSet()) {
        obj.insert(QString("UpgradeKind"), ::OpenAPI::toJsonValue(m_upgrade_kind));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    if (m_upgrade_state.isSet()) {
        obj.insert(QString("UpgradeState"), ::OpenAPI::toJsonValue(m_upgrade_state));
    }
    if (m_upgrade_status_details_isSet) {
        obj.insert(QString("UpgradeStatusDetails"), ::OpenAPI::toJsonValue(m_upgrade_status_details));
    }
    return obj;
}

OAIApplicationHealthPolicy OAIComposeDeploymentUpgradeProgressInfo::getApplicationHealthPolicy() const {
    return m_application_health_policy;
}
void OAIComposeDeploymentUpgradeProgressInfo::setApplicationHealthPolicy(const OAIApplicationHealthPolicy &application_health_policy) {
    m_application_health_policy = application_health_policy;
    m_application_health_policy_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_health_policy_Set() const{
    return m_application_health_policy_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_health_policy_Valid() const{
    return m_application_health_policy_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getApplicationName() const {
    return m_application_name;
}
void OAIComposeDeploymentUpgradeProgressInfo::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QList<OAIHealthEvaluationWrapper> OAIComposeDeploymentUpgradeProgressInfo::getApplicationUnhealthyEvaluations() const {
    return m_application_unhealthy_evaluations;
}
void OAIComposeDeploymentUpgradeProgressInfo::setApplicationUnhealthyEvaluations(const QList<OAIHealthEvaluationWrapper> &application_unhealthy_evaluations) {
    m_application_unhealthy_evaluations = application_unhealthy_evaluations;
    m_application_unhealthy_evaluations_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_unhealthy_evaluations_Set() const{
    return m_application_unhealthy_evaluations_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_unhealthy_evaluations_Valid() const{
    return m_application_unhealthy_evaluations_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getApplicationUpgradeStatusDetails() const {
    return m_application_upgrade_status_details;
}
void OAIComposeDeploymentUpgradeProgressInfo::setApplicationUpgradeStatusDetails(const QString &application_upgrade_status_details) {
    m_application_upgrade_status_details = application_upgrade_status_details;
    m_application_upgrade_status_details_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_upgrade_status_details_Set() const{
    return m_application_upgrade_status_details_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_application_upgrade_status_details_Valid() const{
    return m_application_upgrade_status_details_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getCurrentUpgradeDomainDuration() const {
    return m_current_upgrade_domain_duration;
}
void OAIComposeDeploymentUpgradeProgressInfo::setCurrentUpgradeDomainDuration(const QString &current_upgrade_domain_duration) {
    m_current_upgrade_domain_duration = current_upgrade_domain_duration;
    m_current_upgrade_domain_duration_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_current_upgrade_domain_duration_Set() const{
    return m_current_upgrade_domain_duration_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_current_upgrade_domain_duration_Valid() const{
    return m_current_upgrade_domain_duration_isValid;
}

OAICurrentUpgradeDomainProgressInfo OAIComposeDeploymentUpgradeProgressInfo::getCurrentUpgradeDomainProgress() const {
    return m_current_upgrade_domain_progress;
}
void OAIComposeDeploymentUpgradeProgressInfo::setCurrentUpgradeDomainProgress(const OAICurrentUpgradeDomainProgressInfo &current_upgrade_domain_progress) {
    m_current_upgrade_domain_progress = current_upgrade_domain_progress;
    m_current_upgrade_domain_progress_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_current_upgrade_domain_progress_Set() const{
    return m_current_upgrade_domain_progress_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_current_upgrade_domain_progress_Valid() const{
    return m_current_upgrade_domain_progress_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getDeploymentName() const {
    return m_deployment_name;
}
void OAIComposeDeploymentUpgradeProgressInfo::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

OAIFailureReason OAIComposeDeploymentUpgradeProgressInfo::getFailureReason() const {
    return m_failure_reason;
}
void OAIComposeDeploymentUpgradeProgressInfo::setFailureReason(const OAIFailureReason &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getFailureTimestampUtc() const {
    return m_failure_timestamp_utc;
}
void OAIComposeDeploymentUpgradeProgressInfo::setFailureTimestampUtc(const QString &failure_timestamp_utc) {
    m_failure_timestamp_utc = failure_timestamp_utc;
    m_failure_timestamp_utc_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_failure_timestamp_utc_Set() const{
    return m_failure_timestamp_utc_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_failure_timestamp_utc_Valid() const{
    return m_failure_timestamp_utc_isValid;
}

bool OAIComposeDeploymentUpgradeProgressInfo::isForceRestart() const {
    return m_force_restart;
}
void OAIComposeDeploymentUpgradeProgressInfo::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

OAIMonitoringPolicyDescription OAIComposeDeploymentUpgradeProgressInfo::getMonitoringPolicy() const {
    return m_monitoring_policy;
}
void OAIComposeDeploymentUpgradeProgressInfo::setMonitoringPolicy(const OAIMonitoringPolicyDescription &monitoring_policy) {
    m_monitoring_policy = monitoring_policy;
    m_monitoring_policy_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_monitoring_policy_Set() const{
    return m_monitoring_policy_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_monitoring_policy_Valid() const{
    return m_monitoring_policy_isValid;
}

OAIUpgradeMode OAIComposeDeploymentUpgradeProgressInfo::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIComposeDeploymentUpgradeProgressInfo::setRollingUpgradeMode(const OAIUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getStartTimestampUtc() const {
    return m_start_timestamp_utc;
}
void OAIComposeDeploymentUpgradeProgressInfo::setStartTimestampUtc(const QString &start_timestamp_utc) {
    m_start_timestamp_utc = start_timestamp_utc;
    m_start_timestamp_utc_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_start_timestamp_utc_Set() const{
    return m_start_timestamp_utc_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_start_timestamp_utc_Valid() const{
    return m_start_timestamp_utc_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getTargetApplicationTypeVersion() const {
    return m_target_application_type_version;
}
void OAIComposeDeploymentUpgradeProgressInfo::setTargetApplicationTypeVersion(const QString &target_application_type_version) {
    m_target_application_type_version = target_application_type_version;
    m_target_application_type_version_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_target_application_type_version_Set() const{
    return m_target_application_type_version_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_target_application_type_version_Valid() const{
    return m_target_application_type_version_isValid;
}

OAIFailureUpgradeDomainProgressInfo OAIComposeDeploymentUpgradeProgressInfo::getUpgradeDomainProgressAtFailure() const {
    return m_upgrade_domain_progress_at_failure;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeDomainProgressAtFailure(const OAIFailureUpgradeDomainProgressInfo &upgrade_domain_progress_at_failure) {
    m_upgrade_domain_progress_at_failure = upgrade_domain_progress_at_failure;
    m_upgrade_domain_progress_at_failure_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_domain_progress_at_failure_Set() const{
    return m_upgrade_domain_progress_at_failure_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_domain_progress_at_failure_Valid() const{
    return m_upgrade_domain_progress_at_failure_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getUpgradeDuration() const {
    return m_upgrade_duration;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeDuration(const QString &upgrade_duration) {
    m_upgrade_duration = upgrade_duration;
    m_upgrade_duration_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_duration_Set() const{
    return m_upgrade_duration_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_duration_Valid() const{
    return m_upgrade_duration_isValid;
}

OAIUpgradeKind OAIComposeDeploymentUpgradeProgressInfo::getUpgradeKind() const {
    return m_upgrade_kind;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeKind(const OAIUpgradeKind &upgrade_kind) {
    m_upgrade_kind = upgrade_kind;
    m_upgrade_kind_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_kind_Set() const{
    return m_upgrade_kind_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_kind_Valid() const{
    return m_upgrade_kind_isValid;
}

qint64 OAIComposeDeploymentUpgradeProgressInfo::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint64 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

OAIComposeDeploymentUpgradeState OAIComposeDeploymentUpgradeProgressInfo::getUpgradeState() const {
    return m_upgrade_state;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeState(const OAIComposeDeploymentUpgradeState &upgrade_state) {
    m_upgrade_state = upgrade_state;
    m_upgrade_state_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_state_Set() const{
    return m_upgrade_state_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_state_Valid() const{
    return m_upgrade_state_isValid;
}

QString OAIComposeDeploymentUpgradeProgressInfo::getUpgradeStatusDetails() const {
    return m_upgrade_status_details;
}
void OAIComposeDeploymentUpgradeProgressInfo::setUpgradeStatusDetails(const QString &upgrade_status_details) {
    m_upgrade_status_details = upgrade_status_details;
    m_upgrade_status_details_isSet = true;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_status_details_Set() const{
    return m_upgrade_status_details_isSet;
}

bool OAIComposeDeploymentUpgradeProgressInfo::is_upgrade_status_details_Valid() const{
    return m_upgrade_status_details_isValid;
}

bool OAIComposeDeploymentUpgradeProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_unhealthy_evaluations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_upgrade_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_upgrade_domain_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_upgrade_domain_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_progress_at_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComposeDeploymentUpgradeProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
