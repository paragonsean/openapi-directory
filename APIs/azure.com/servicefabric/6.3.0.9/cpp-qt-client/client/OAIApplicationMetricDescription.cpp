/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationMetricDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationMetricDescription::OAIApplicationMetricDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationMetricDescription::OAIApplicationMetricDescription() {
    this->initializeModel();
}

OAIApplicationMetricDescription::~OAIApplicationMetricDescription() {}

void OAIApplicationMetricDescription::initializeModel() {

    m_maximum_capacity_isSet = false;
    m_maximum_capacity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reservation_capacity_isSet = false;
    m_reservation_capacity_isValid = false;

    m_total_application_capacity_isSet = false;
    m_total_application_capacity_isValid = false;
}

void OAIApplicationMetricDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationMetricDescription::fromJsonObject(QJsonObject json) {

    m_maximum_capacity_isValid = ::OpenAPI::fromJsonValue(m_maximum_capacity, json[QString("MaximumCapacity")]);
    m_maximum_capacity_isSet = !json[QString("MaximumCapacity")].isNull() && m_maximum_capacity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_reservation_capacity_isValid = ::OpenAPI::fromJsonValue(m_reservation_capacity, json[QString("ReservationCapacity")]);
    m_reservation_capacity_isSet = !json[QString("ReservationCapacity")].isNull() && m_reservation_capacity_isValid;

    m_total_application_capacity_isValid = ::OpenAPI::fromJsonValue(m_total_application_capacity, json[QString("TotalApplicationCapacity")]);
    m_total_application_capacity_isSet = !json[QString("TotalApplicationCapacity")].isNull() && m_total_application_capacity_isValid;
}

QString OAIApplicationMetricDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationMetricDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_capacity_isSet) {
        obj.insert(QString("MaximumCapacity"), ::OpenAPI::toJsonValue(m_maximum_capacity));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reservation_capacity_isSet) {
        obj.insert(QString("ReservationCapacity"), ::OpenAPI::toJsonValue(m_reservation_capacity));
    }
    if (m_total_application_capacity_isSet) {
        obj.insert(QString("TotalApplicationCapacity"), ::OpenAPI::toJsonValue(m_total_application_capacity));
    }
    return obj;
}

qint64 OAIApplicationMetricDescription::getMaximumCapacity() const {
    return m_maximum_capacity;
}
void OAIApplicationMetricDescription::setMaximumCapacity(const qint64 &maximum_capacity) {
    m_maximum_capacity = maximum_capacity;
    m_maximum_capacity_isSet = true;
}

bool OAIApplicationMetricDescription::is_maximum_capacity_Set() const{
    return m_maximum_capacity_isSet;
}

bool OAIApplicationMetricDescription::is_maximum_capacity_Valid() const{
    return m_maximum_capacity_isValid;
}

QString OAIApplicationMetricDescription::getName() const {
    return m_name;
}
void OAIApplicationMetricDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationMetricDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationMetricDescription::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIApplicationMetricDescription::getReservationCapacity() const {
    return m_reservation_capacity;
}
void OAIApplicationMetricDescription::setReservationCapacity(const qint64 &reservation_capacity) {
    m_reservation_capacity = reservation_capacity;
    m_reservation_capacity_isSet = true;
}

bool OAIApplicationMetricDescription::is_reservation_capacity_Set() const{
    return m_reservation_capacity_isSet;
}

bool OAIApplicationMetricDescription::is_reservation_capacity_Valid() const{
    return m_reservation_capacity_isValid;
}

qint64 OAIApplicationMetricDescription::getTotalApplicationCapacity() const {
    return m_total_application_capacity;
}
void OAIApplicationMetricDescription::setTotalApplicationCapacity(const qint64 &total_application_capacity) {
    m_total_application_capacity = total_application_capacity;
    m_total_application_capacity_isSet = true;
}

bool OAIApplicationMetricDescription::is_total_application_capacity_Set() const{
    return m_total_application_capacity_isSet;
}

bool OAIApplicationMetricDescription::is_total_application_capacity_Valid() const{
    return m_total_application_capacity_isValid;
}

bool OAIApplicationMetricDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_application_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationMetricDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
