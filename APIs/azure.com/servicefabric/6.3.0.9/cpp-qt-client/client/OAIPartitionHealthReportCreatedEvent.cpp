/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionHealthReportCreatedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionHealthReportCreatedEvent::OAIPartitionHealthReportCreatedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionHealthReportCreatedEvent::OAIPartitionHealthReportCreatedEvent() {
    this->initializeModel();
}

OAIPartitionHealthReportCreatedEvent::~OAIPartitionHealthReportCreatedEvent() {}

void OAIPartitionHealthReportCreatedEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_remove_when_expired_isSet = false;
    m_remove_when_expired_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_utc_timestamp_isSet = false;
    m_source_utc_timestamp_isValid = false;

    m_time_to_live_ms_isSet = false;
    m_time_to_live_ms_isValid = false;
}

void OAIPartitionHealthReportCreatedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionHealthReportCreatedEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("Property")]);
    m_property_isSet = !json[QString("Property")].isNull() && m_property_isValid;

    m_remove_when_expired_isValid = ::OpenAPI::fromJsonValue(m_remove_when_expired, json[QString("RemoveWhenExpired")]);
    m_remove_when_expired_isSet = !json[QString("RemoveWhenExpired")].isNull() && m_remove_when_expired_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceId")]);
    m_source_id_isSet = !json[QString("SourceId")].isNull() && m_source_id_isValid;

    m_source_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_source_utc_timestamp, json[QString("SourceUtcTimestamp")]);
    m_source_utc_timestamp_isSet = !json[QString("SourceUtcTimestamp")].isNull() && m_source_utc_timestamp_isValid;

    m_time_to_live_ms_isValid = ::OpenAPI::fromJsonValue(m_time_to_live_ms, json[QString("TimeToLiveMs")]);
    m_time_to_live_ms_isSet = !json[QString("TimeToLiveMs")].isNull() && m_time_to_live_ms_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionHealthReportCreatedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_state_isSet) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_property_isSet) {
        obj.insert(QString("Property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_remove_when_expired_isSet) {
        obj.insert(QString("RemoveWhenExpired"), ::OpenAPI::toJsonValue(m_remove_when_expired));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_utc_timestamp_isSet) {
        obj.insert(QString("SourceUtcTimestamp"), ::OpenAPI::toJsonValue(m_source_utc_timestamp));
    }
    if (m_time_to_live_ms_isSet) {
        obj.insert(QString("TimeToLiveMs"), ::OpenAPI::toJsonValue(m_time_to_live_ms));
    }
    return obj;
}

QString OAIPartitionHealthReportCreatedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIPartitionHealthReportCreatedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIPartitionHealthReportCreatedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIPartitionHealthReportCreatedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIPartitionHealthReportCreatedEvent::getKind() const {
    return m_kind;
}
void OAIPartitionHealthReportCreatedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIPartitionHealthReportCreatedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIPartitionHealthReportCreatedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionHealthReportCreatedEvent::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::getDescription() const {
    return m_description;
}
void OAIPartitionHealthReportCreatedEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::getHealthState() const {
    return m_health_state;
}
void OAIPartitionHealthReportCreatedEvent::setHealthState(const QString &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::getProperty() const {
    return m_property;
}
void OAIPartitionHealthReportCreatedEvent::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_property_Set() const{
    return m_property_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIPartitionHealthReportCreatedEvent::isRemoveWhenExpired() const {
    return m_remove_when_expired;
}
void OAIPartitionHealthReportCreatedEvent::setRemoveWhenExpired(const bool &remove_when_expired) {
    m_remove_when_expired = remove_when_expired;
    m_remove_when_expired_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_remove_when_expired_Set() const{
    return m_remove_when_expired_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_remove_when_expired_Valid() const{
    return m_remove_when_expired_isValid;
}

qint64 OAIPartitionHealthReportCreatedEvent::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIPartitionHealthReportCreatedEvent::setSequenceNumber(const qint64 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

QString OAIPartitionHealthReportCreatedEvent::getSourceId() const {
    return m_source_id;
}
void OAIPartitionHealthReportCreatedEvent::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QDateTime OAIPartitionHealthReportCreatedEvent::getSourceUtcTimestamp() const {
    return m_source_utc_timestamp;
}
void OAIPartitionHealthReportCreatedEvent::setSourceUtcTimestamp(const QDateTime &source_utc_timestamp) {
    m_source_utc_timestamp = source_utc_timestamp;
    m_source_utc_timestamp_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_source_utc_timestamp_Set() const{
    return m_source_utc_timestamp_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_source_utc_timestamp_Valid() const{
    return m_source_utc_timestamp_isValid;
}

qint64 OAIPartitionHealthReportCreatedEvent::getTimeToLiveMs() const {
    return m_time_to_live_ms;
}
void OAIPartitionHealthReportCreatedEvent::setTimeToLiveMs(const qint64 &time_to_live_ms) {
    m_time_to_live_ms = time_to_live_ms;
    m_time_to_live_ms_isSet = true;
}

bool OAIPartitionHealthReportCreatedEvent::is_time_to_live_ms_Set() const{
    return m_time_to_live_ms_isSet;
}

bool OAIPartitionHealthReportCreatedEvent::is_time_to_live_ms_Valid() const{
    return m_time_to_live_ms_isValid;
}

bool OAIPartitionHealthReportCreatedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_when_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionHealthReportCreatedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_partition_id_isValid && m_description_isValid && m_health_state_isValid && m_property_isValid && m_remove_when_expired_isValid && m_sequence_number_isValid && m_source_id_isValid && m_source_utc_timestamp_isValid && m_time_to_live_ms_isValid && true;
}

} // namespace OpenAPI
