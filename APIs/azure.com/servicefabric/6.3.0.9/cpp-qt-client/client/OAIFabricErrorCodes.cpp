/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFabricErrorCodes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFabricErrorCodes::OAIFabricErrorCodes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFabricErrorCodes::OAIFabricErrorCodes() {
    this->initializeModel();
}

OAIFabricErrorCodes::~OAIFabricErrorCodes() {}

void OAIFabricErrorCodes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFabricErrorCodes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFabricErrorCodes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FABRIC_E_INVALID_PARTITION_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_PARTITION_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_NOT_UPGRADING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_NOT_UPGRADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_NOT_UPGRADING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_NOT_UPGRADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_NAME_URI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_NAME_URI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_PATH_TOO_LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_PATH_TOO_LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_KEY_TOO_LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_KEY_TOO_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_ATOMIC_GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_ATOMIC_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_VALUE_EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_VALUE_EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NODE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NODE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_TYPE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_TYPE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_PARTITION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_PARTITION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_REPLICA_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_REPLICA_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_DIRECTORY_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_DIRECTORY_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_VERSION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FILE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FILE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NAME_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NAME_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_PROPERTY_DOES_NOT_EXIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_PROPERTY_DOES_NOT_EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_ENUMERATION_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_ENUMERATION_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_MANIFEST_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_MANIFEST_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_KEY_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_KEY_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_HEALTH_ENTITY_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_HEALTH_ENTITY_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_APPLICATION_TYPE_IN_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_IN_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_VERSION_IN_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_IN_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NAME_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NAME_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NAME_NOT_EMPTY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NAME_NOT_EMPTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_PROPERTY_CHECK_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_PROPERTY_CHECK_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_METADATA_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_METADATA_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_TYPE_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_HEALTH_STALE_REPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_HEALTH_STALE_REPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NODE_HAS_NOT_STOPPED_YET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NODE_HAS_NOT_STOPPED_YET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INSTANCE_ID_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INSTANCE_ID_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_VALUE_TOO_LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_VALUE_TOO_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NO_WRITE_QUORUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NO_WRITE_QUORUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NOT_PRIMARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NOT_PRIMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NOT_READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NOT_READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_RECONFIGURATION_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_RECONFIGURATION_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SERVICE_OFFLINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SERVICE_OFFLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("E_ABORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::E_ABORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_COMMUNICATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_COMMUNICATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_OPERATION_NOT_COMPLETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_OPERATION_NOT_COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_NODE_IS_UP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_NODE_IS_UP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("E_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::E_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_BACKUP_IS_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_BACKUP_IS_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_FOR_STATELESS_SERVICES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_FOR_STATELESS_SERVICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_BACKUP_NOT_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_BACKUP_NOT_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_BACKUP_POLICY_NOT_EXISTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_BACKUP_POLICY_NOT_EXISTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_BACKUP_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_BACKUP_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_RESTORE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_RESTORE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_INVALID_SERVICE_SCALING_POLICY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_INVALID_SERVICE_SCALING_POLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("E_INVALIDARG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::E_INVALIDARG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_VOLUME_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_VOLUME_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FABRIC_E_VOLUME_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::FABRIC_E_VOLUME_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SerializationError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricErrorCodes::SERIALIZATIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFabricErrorCodes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFabricErrorCodes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_PARTITION_KEY:
            val = "FABRIC_E_INVALID_PARTITION_KEY";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR:
            val = "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_ADDRESS:
            val = "FABRIC_E_INVALID_ADDRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_NOT_UPGRADING:
            val = "FABRIC_E_APPLICATION_NOT_UPGRADING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR:
            val = "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_NOT_UPGRADING:
            val = "FABRIC_E_FABRIC_NOT_UPGRADING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR:
            val = "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_CONFIGURATION:
            val = "FABRIC_E_INVALID_CONFIGURATION";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_NAME_URI:
            val = "FABRIC_E_INVALID_NAME_URI";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_PATH_TOO_LONG:
            val = "FABRIC_E_PATH_TOO_LONG";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_KEY_TOO_LARGE:
            val = "FABRIC_E_KEY_TOO_LARGE";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED:
            val = "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_ATOMIC_GROUP:
            val = "FABRIC_E_INVALID_ATOMIC_GROUP";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_VALUE_EMPTY:
            val = "FABRIC_E_VALUE_EMPTY";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NODE_NOT_FOUND:
            val = "FABRIC_E_NODE_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_NOT_FOUND:
            val = "FABRIC_E_APPLICATION_TYPE_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_NOT_FOUND:
            val = "FABRIC_E_APPLICATION_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_NOT_FOUND:
            val = "FABRIC_E_SERVICE_TYPE_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_DOES_NOT_EXIST:
            val = "FABRIC_E_SERVICE_DOES_NOT_EXIST";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND:
            val = "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND:
            val = "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_PARTITION_NOT_FOUND:
            val = "FABRIC_E_PARTITION_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_REPLICA_DOES_NOT_EXIST:
            val = "FABRIC_E_REPLICA_DOES_NOT_EXIST";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST:
            val = "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND:
            val = "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_DIRECTORY_NOT_FOUND:
            val = "FABRIC_E_DIRECTORY_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_NOT_FOUND:
            val = "FABRIC_E_FABRIC_VERSION_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FILE_NOT_FOUND:
            val = "FABRIC_E_FILE_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NAME_DOES_NOT_EXIST:
            val = "FABRIC_E_NAME_DOES_NOT_EXIST";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_PROPERTY_DOES_NOT_EXIST:
            val = "FABRIC_E_PROPERTY_DOES_NOT_EXIST";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_ENUMERATION_COMPLETED:
            val = "FABRIC_E_ENUMERATION_COMPLETED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_MANIFEST_NOT_FOUND:
            val = "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_KEY_NOT_FOUND:
            val = "FABRIC_E_KEY_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_HEALTH_ENTITY_NOT_FOUND:
            val = "FABRIC_E_HEALTH_ENTITY_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS:
            val = "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_ALREADY_EXISTS:
            val = "FABRIC_E_APPLICATION_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION:
            val = "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS:
            val = "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS:
            val = "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_ALREADY_EXISTS:
            val = "FABRIC_E_SERVICE_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS:
            val = "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_APPLICATION_TYPE_IN_USE:
            val = "FABRIC_E_APPLICATION_TYPE_IN_USE";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION:
            val = "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS:
            val = "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_VERSION_IN_USE:
            val = "FABRIC_E_FABRIC_VERSION_IN_USE";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS:
            val = "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NAME_ALREADY_EXISTS:
            val = "FABRIC_E_NAME_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NAME_NOT_EMPTY:
            val = "FABRIC_E_NAME_NOT_EMPTY";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_PROPERTY_CHECK_FAILED:
            val = "FABRIC_E_PROPERTY_CHECK_FAILED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_METADATA_MISMATCH:
            val = "FABRIC_E_SERVICE_METADATA_MISMATCH";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_TYPE_MISMATCH:
            val = "FABRIC_E_SERVICE_TYPE_MISMATCH";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_HEALTH_STALE_REPORT:
            val = "FABRIC_E_HEALTH_STALE_REPORT";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED:
            val = "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NODE_HAS_NOT_STOPPED_YET:
            val = "FABRIC_E_NODE_HAS_NOT_STOPPED_YET";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INSTANCE_ID_MISMATCH:
            val = "FABRIC_E_INSTANCE_ID_MISMATCH";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_VALUE_TOO_LARGE:
            val = "FABRIC_E_VALUE_TOO_LARGE";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NO_WRITE_QUORUM:
            val = "FABRIC_E_NO_WRITE_QUORUM";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NOT_PRIMARY:
            val = "FABRIC_E_NOT_PRIMARY";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NOT_READY:
            val = "FABRIC_E_NOT_READY";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_RECONFIGURATION_PENDING:
            val = "FABRIC_E_RECONFIGURATION_PENDING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SERVICE_OFFLINE:
            val = "FABRIC_E_SERVICE_OFFLINE";
            break;
        case eOAIFabricErrorCodes::E_ABORT:
            val = "E_ABORT";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_COMMUNICATION_ERROR:
            val = "FABRIC_E_COMMUNICATION_ERROR";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_OPERATION_NOT_COMPLETE:
            val = "FABRIC_E_OPERATION_NOT_COMPLETE";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_TIMEOUT:
            val = "FABRIC_E_TIMEOUT";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_NODE_IS_UP:
            val = "FABRIC_E_NODE_IS_UP";
            break;
        case eOAIFabricErrorCodes::E_FAIL:
            val = "E_FAIL";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_BACKUP_IS_ENABLED:
            val = "FABRIC_E_BACKUP_IS_ENABLED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH:
            val = "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_FOR_STATELESS_SERVICES:
            val = "FABRIC_E_INVALID_FOR_STATELESS_SERVICES";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_BACKUP_NOT_ENABLED:
            val = "FABRIC_E_BACKUP_NOT_ENABLED";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_BACKUP_POLICY_NOT_EXISTING:
            val = "FABRIC_E_BACKUP_POLICY_NOT_EXISTING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING:
            val = "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_BACKUP_IN_PROGRESS:
            val = "FABRIC_E_BACKUP_IN_PROGRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_RESTORE_IN_PROGRESS:
            val = "FABRIC_E_RESTORE_IN_PROGRESS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING:
            val = "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_INVALID_SERVICE_SCALING_POLICY:
            val = "FABRIC_E_INVALID_SERVICE_SCALING_POLICY";
            break;
        case eOAIFabricErrorCodes::E_INVALIDARG:
            val = "E_INVALIDARG";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS:
            val = "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND:
            val = "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_VOLUME_ALREADY_EXISTS:
            val = "FABRIC_E_VOLUME_ALREADY_EXISTS";
            break;
        case eOAIFabricErrorCodes::FABRIC_E_VOLUME_NOT_FOUND:
            val = "FABRIC_E_VOLUME_NOT_FOUND";
            break;
        case eOAIFabricErrorCodes::SERIALIZATIONERROR:
            val = "SerializationError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFabricErrorCodes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFabricErrorCodes::eOAIFabricErrorCodes OAIFabricErrorCodes::getValue() const {
    return m_value;
}

void OAIFabricErrorCodes::setValue(const OAIFabricErrorCodes::eOAIFabricErrorCodes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFabricErrorCodes::isSet() const {
    
    return m_value_isSet;
}

bool OAIFabricErrorCodes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
