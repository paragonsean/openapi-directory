/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticsDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticsDescription::OAIDiagnosticsDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticsDescription::OAIDiagnosticsDescription() {
    this->initializeModel();
}

OAIDiagnosticsDescription::~OAIDiagnosticsDescription() {}

void OAIDiagnosticsDescription::initializeModel() {

    m_default_sink_refs_isSet = false;
    m_default_sink_refs_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;
}

void OAIDiagnosticsDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticsDescription::fromJsonObject(QJsonObject json) {

    m_default_sink_refs_isValid = ::OpenAPI::fromJsonValue(m_default_sink_refs, json[QString("defaultSinkRefs")]);
    m_default_sink_refs_isSet = !json[QString("defaultSinkRefs")].isNull() && m_default_sink_refs_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("sinks")]);
    m_sinks_isSet = !json[QString("sinks")].isNull() && m_sinks_isValid;
}

QString OAIDiagnosticsDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticsDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_default_sink_refs.size() > 0) {
        obj.insert(QString("defaultSinkRefs"), ::OpenAPI::toJsonValue(m_default_sink_refs));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_sinks.size() > 0) {
        obj.insert(QString("sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    return obj;
}

QList<QString> OAIDiagnosticsDescription::getDefaultSinkRefs() const {
    return m_default_sink_refs;
}
void OAIDiagnosticsDescription::setDefaultSinkRefs(const QList<QString> &default_sink_refs) {
    m_default_sink_refs = default_sink_refs;
    m_default_sink_refs_isSet = true;
}

bool OAIDiagnosticsDescription::is_default_sink_refs_Set() const{
    return m_default_sink_refs_isSet;
}

bool OAIDiagnosticsDescription::is_default_sink_refs_Valid() const{
    return m_default_sink_refs_isValid;
}

bool OAIDiagnosticsDescription::isEnabled() const {
    return m_enabled;
}
void OAIDiagnosticsDescription::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDiagnosticsDescription::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDiagnosticsDescription::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIDiagnosticsSinkProperties> OAIDiagnosticsDescription::getSinks() const {
    return m_sinks;
}
void OAIDiagnosticsDescription::setSinks(const QList<OAIDiagnosticsSinkProperties> &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIDiagnosticsDescription::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIDiagnosticsDescription::is_sinks_Valid() const{
    return m_sinks_isValid;
}

bool OAIDiagnosticsDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_sink_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticsDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
