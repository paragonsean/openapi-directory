/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeState::OAIUpgradeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeState::OAIUpgradeState() {
    this->initializeModel();
}

OAIUpgradeState::~OAIUpgradeState() {}

void OAIUpgradeState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUpgradeState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUpgradeState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingBackInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::ROLLINGBACKINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingBackCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::ROLLINGBACKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardPending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::ROLLINGFORWARDPENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::ROLLINGFORWARDINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::ROLLINGFORWARDCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUpgradeState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUpgradeState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUpgradeState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUpgradeState::INVALID:
            val = "Invalid";
            break;
        case eOAIUpgradeState::ROLLINGBACKINPROGRESS:
            val = "RollingBackInProgress";
            break;
        case eOAIUpgradeState::ROLLINGBACKCOMPLETED:
            val = "RollingBackCompleted";
            break;
        case eOAIUpgradeState::ROLLINGFORWARDPENDING:
            val = "RollingForwardPending";
            break;
        case eOAIUpgradeState::ROLLINGFORWARDINPROGRESS:
            val = "RollingForwardInProgress";
            break;
        case eOAIUpgradeState::ROLLINGFORWARDCOMPLETED:
            val = "RollingForwardCompleted";
            break;
        case eOAIUpgradeState::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUpgradeState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUpgradeState::eOAIUpgradeState OAIUpgradeState::getValue() const {
    return m_value;
}

void OAIUpgradeState::setValue(const OAIUpgradeState::eOAIUpgradeState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUpgradeState::isSet() const {
    
    return m_value_isSet;
}

bool OAIUpgradeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
