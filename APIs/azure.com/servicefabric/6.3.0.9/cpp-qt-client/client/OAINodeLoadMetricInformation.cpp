/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeLoadMetricInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeLoadMetricInformation::OAINodeLoadMetricInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeLoadMetricInformation::OAINodeLoadMetricInformation() {
    this->initializeModel();
}

OAINodeLoadMetricInformation::~OAINodeLoadMetricInformation() {}

void OAINodeLoadMetricInformation::initializeModel() {

    m_is_capacity_violation_isSet = false;
    m_is_capacity_violation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_buffered_capacity_isSet = false;
    m_node_buffered_capacity_isValid = false;

    m_node_capacity_isSet = false;
    m_node_capacity_isValid = false;

    m_node_load_isSet = false;
    m_node_load_isValid = false;

    m_node_remaining_buffered_capacity_isSet = false;
    m_node_remaining_buffered_capacity_isValid = false;

    m_node_remaining_capacity_isSet = false;
    m_node_remaining_capacity_isValid = false;
}

void OAINodeLoadMetricInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeLoadMetricInformation::fromJsonObject(QJsonObject json) {

    m_is_capacity_violation_isValid = ::OpenAPI::fromJsonValue(m_is_capacity_violation, json[QString("IsCapacityViolation")]);
    m_is_capacity_violation_isSet = !json[QString("IsCapacityViolation")].isNull() && m_is_capacity_violation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_node_buffered_capacity_isValid = ::OpenAPI::fromJsonValue(m_node_buffered_capacity, json[QString("NodeBufferedCapacity")]);
    m_node_buffered_capacity_isSet = !json[QString("NodeBufferedCapacity")].isNull() && m_node_buffered_capacity_isValid;

    m_node_capacity_isValid = ::OpenAPI::fromJsonValue(m_node_capacity, json[QString("NodeCapacity")]);
    m_node_capacity_isSet = !json[QString("NodeCapacity")].isNull() && m_node_capacity_isValid;

    m_node_load_isValid = ::OpenAPI::fromJsonValue(m_node_load, json[QString("NodeLoad")]);
    m_node_load_isSet = !json[QString("NodeLoad")].isNull() && m_node_load_isValid;

    m_node_remaining_buffered_capacity_isValid = ::OpenAPI::fromJsonValue(m_node_remaining_buffered_capacity, json[QString("NodeRemainingBufferedCapacity")]);
    m_node_remaining_buffered_capacity_isSet = !json[QString("NodeRemainingBufferedCapacity")].isNull() && m_node_remaining_buffered_capacity_isValid;

    m_node_remaining_capacity_isValid = ::OpenAPI::fromJsonValue(m_node_remaining_capacity, json[QString("NodeRemainingCapacity")]);
    m_node_remaining_capacity_isSet = !json[QString("NodeRemainingCapacity")].isNull() && m_node_remaining_capacity_isValid;
}

QString OAINodeLoadMetricInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeLoadMetricInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_is_capacity_violation_isSet) {
        obj.insert(QString("IsCapacityViolation"), ::OpenAPI::toJsonValue(m_is_capacity_violation));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_buffered_capacity_isSet) {
        obj.insert(QString("NodeBufferedCapacity"), ::OpenAPI::toJsonValue(m_node_buffered_capacity));
    }
    if (m_node_capacity_isSet) {
        obj.insert(QString("NodeCapacity"), ::OpenAPI::toJsonValue(m_node_capacity));
    }
    if (m_node_load_isSet) {
        obj.insert(QString("NodeLoad"), ::OpenAPI::toJsonValue(m_node_load));
    }
    if (m_node_remaining_buffered_capacity_isSet) {
        obj.insert(QString("NodeRemainingBufferedCapacity"), ::OpenAPI::toJsonValue(m_node_remaining_buffered_capacity));
    }
    if (m_node_remaining_capacity_isSet) {
        obj.insert(QString("NodeRemainingCapacity"), ::OpenAPI::toJsonValue(m_node_remaining_capacity));
    }
    return obj;
}

bool OAINodeLoadMetricInformation::isIsCapacityViolation() const {
    return m_is_capacity_violation;
}
void OAINodeLoadMetricInformation::setIsCapacityViolation(const bool &is_capacity_violation) {
    m_is_capacity_violation = is_capacity_violation;
    m_is_capacity_violation_isSet = true;
}

bool OAINodeLoadMetricInformation::is_is_capacity_violation_Set() const{
    return m_is_capacity_violation_isSet;
}

bool OAINodeLoadMetricInformation::is_is_capacity_violation_Valid() const{
    return m_is_capacity_violation_isValid;
}

QString OAINodeLoadMetricInformation::getName() const {
    return m_name;
}
void OAINodeLoadMetricInformation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodeLoadMetricInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodeLoadMetricInformation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINodeLoadMetricInformation::getNodeBufferedCapacity() const {
    return m_node_buffered_capacity;
}
void OAINodeLoadMetricInformation::setNodeBufferedCapacity(const QString &node_buffered_capacity) {
    m_node_buffered_capacity = node_buffered_capacity;
    m_node_buffered_capacity_isSet = true;
}

bool OAINodeLoadMetricInformation::is_node_buffered_capacity_Set() const{
    return m_node_buffered_capacity_isSet;
}

bool OAINodeLoadMetricInformation::is_node_buffered_capacity_Valid() const{
    return m_node_buffered_capacity_isValid;
}

QString OAINodeLoadMetricInformation::getNodeCapacity() const {
    return m_node_capacity;
}
void OAINodeLoadMetricInformation::setNodeCapacity(const QString &node_capacity) {
    m_node_capacity = node_capacity;
    m_node_capacity_isSet = true;
}

bool OAINodeLoadMetricInformation::is_node_capacity_Set() const{
    return m_node_capacity_isSet;
}

bool OAINodeLoadMetricInformation::is_node_capacity_Valid() const{
    return m_node_capacity_isValid;
}

QString OAINodeLoadMetricInformation::getNodeLoad() const {
    return m_node_load;
}
void OAINodeLoadMetricInformation::setNodeLoad(const QString &node_load) {
    m_node_load = node_load;
    m_node_load_isSet = true;
}

bool OAINodeLoadMetricInformation::is_node_load_Set() const{
    return m_node_load_isSet;
}

bool OAINodeLoadMetricInformation::is_node_load_Valid() const{
    return m_node_load_isValid;
}

QString OAINodeLoadMetricInformation::getNodeRemainingBufferedCapacity() const {
    return m_node_remaining_buffered_capacity;
}
void OAINodeLoadMetricInformation::setNodeRemainingBufferedCapacity(const QString &node_remaining_buffered_capacity) {
    m_node_remaining_buffered_capacity = node_remaining_buffered_capacity;
    m_node_remaining_buffered_capacity_isSet = true;
}

bool OAINodeLoadMetricInformation::is_node_remaining_buffered_capacity_Set() const{
    return m_node_remaining_buffered_capacity_isSet;
}

bool OAINodeLoadMetricInformation::is_node_remaining_buffered_capacity_Valid() const{
    return m_node_remaining_buffered_capacity_isValid;
}

QString OAINodeLoadMetricInformation::getNodeRemainingCapacity() const {
    return m_node_remaining_capacity;
}
void OAINodeLoadMetricInformation::setNodeRemainingCapacity(const QString &node_remaining_capacity) {
    m_node_remaining_capacity = node_remaining_capacity;
    m_node_remaining_capacity_isSet = true;
}

bool OAINodeLoadMetricInformation::is_node_remaining_capacity_Set() const{
    return m_node_remaining_capacity_isSet;
}

bool OAINodeLoadMetricInformation::is_node_remaining_capacity_Valid() const{
    return m_node_remaining_capacity_isValid;
}

bool OAINodeLoadMetricInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_capacity_violation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_buffered_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_remaining_buffered_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_remaining_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeLoadMetricInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
