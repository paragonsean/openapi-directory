/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosMovePrimaryFaultScheduledEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosMovePrimaryFaultScheduledEvent::OAIChaosMovePrimaryFaultScheduledEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosMovePrimaryFaultScheduledEvent::OAIChaosMovePrimaryFaultScheduledEvent() {
    this->initializeModel();
}

OAIChaosMovePrimaryFaultScheduledEvent::~OAIChaosMovePrimaryFaultScheduledEvent() {}

void OAIChaosMovePrimaryFaultScheduledEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_fault_group_id_isSet = false;
    m_fault_group_id_isValid = false;

    m_fault_id_isSet = false;
    m_fault_id_isValid = false;

    m_forced_move_isSet = false;
    m_forced_move_isValid = false;

    m_node_to_isSet = false;
    m_node_to_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIChaosMovePrimaryFaultScheduledEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosMovePrimaryFaultScheduledEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_fault_group_id_isValid = ::OpenAPI::fromJsonValue(m_fault_group_id, json[QString("FaultGroupId")]);
    m_fault_group_id_isSet = !json[QString("FaultGroupId")].isNull() && m_fault_group_id_isValid;

    m_fault_id_isValid = ::OpenAPI::fromJsonValue(m_fault_id, json[QString("FaultId")]);
    m_fault_id_isSet = !json[QString("FaultId")].isNull() && m_fault_id_isValid;

    m_forced_move_isValid = ::OpenAPI::fromJsonValue(m_forced_move, json[QString("ForcedMove")]);
    m_forced_move_isSet = !json[QString("ForcedMove")].isNull() && m_forced_move_isValid;

    m_node_to_isValid = ::OpenAPI::fromJsonValue(m_node_to, json[QString("NodeTo")]);
    m_node_to_isSet = !json[QString("NodeTo")].isNull() && m_node_to_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosMovePrimaryFaultScheduledEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_fault_group_id_isSet) {
        obj.insert(QString("FaultGroupId"), ::OpenAPI::toJsonValue(m_fault_group_id));
    }
    if (m_fault_id_isSet) {
        obj.insert(QString("FaultId"), ::OpenAPI::toJsonValue(m_fault_id));
    }
    if (m_forced_move_isSet) {
        obj.insert(QString("ForcedMove"), ::OpenAPI::toJsonValue(m_forced_move));
    }
    if (m_node_to_isSet) {
        obj.insert(QString("NodeTo"), ::OpenAPI::toJsonValue(m_node_to));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIChaosMovePrimaryFaultScheduledEvent::getKind() const {
    return m_kind;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIChaosMovePrimaryFaultScheduledEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getPartitionId() const {
    return m_partition_id;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getFaultGroupId() const {
    return m_fault_group_id;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setFaultGroupId(const QString &fault_group_id) {
    m_fault_group_id = fault_group_id;
    m_fault_group_id_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_fault_group_id_Set() const{
    return m_fault_group_id_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_fault_group_id_Valid() const{
    return m_fault_group_id_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getFaultId() const {
    return m_fault_id;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setFaultId(const QString &fault_id) {
    m_fault_id = fault_id;
    m_fault_id_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_fault_id_Set() const{
    return m_fault_id_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_fault_id_Valid() const{
    return m_fault_id_isValid;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::isForcedMove() const {
    return m_forced_move;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setForcedMove(const bool &forced_move) {
    m_forced_move = forced_move;
    m_forced_move_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_forced_move_Set() const{
    return m_forced_move_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_forced_move_Valid() const{
    return m_forced_move_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getNodeTo() const {
    return m_node_to;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setNodeTo(const QString &node_to) {
    m_node_to = node_to;
    m_node_to_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_node_to_Set() const{
    return m_node_to_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_node_to_Valid() const{
    return m_node_to_isValid;
}

QString OAIChaosMovePrimaryFaultScheduledEvent::getServiceName() const {
    return m_service_name;
}
void OAIChaosMovePrimaryFaultScheduledEvent::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_move_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosMovePrimaryFaultScheduledEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_partition_id_isValid && m_fault_group_id_isValid && m_fault_id_isValid && m_forced_move_isValid && m_node_to_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
