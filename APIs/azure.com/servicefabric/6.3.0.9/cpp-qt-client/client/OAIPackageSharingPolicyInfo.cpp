/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageSharingPolicyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageSharingPolicyInfo::OAIPackageSharingPolicyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageSharingPolicyInfo::OAIPackageSharingPolicyInfo() {
    this->initializeModel();
}

OAIPackageSharingPolicyInfo::~OAIPackageSharingPolicyInfo() {}

void OAIPackageSharingPolicyInfo::initializeModel() {

    m_package_sharing_scope_isSet = false;
    m_package_sharing_scope_isValid = false;

    m_shared_package_name_isSet = false;
    m_shared_package_name_isValid = false;
}

void OAIPackageSharingPolicyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageSharingPolicyInfo::fromJsonObject(QJsonObject json) {

    m_package_sharing_scope_isValid = ::OpenAPI::fromJsonValue(m_package_sharing_scope, json[QString("PackageSharingScope")]);
    m_package_sharing_scope_isSet = !json[QString("PackageSharingScope")].isNull() && m_package_sharing_scope_isValid;

    m_shared_package_name_isValid = ::OpenAPI::fromJsonValue(m_shared_package_name, json[QString("SharedPackageName")]);
    m_shared_package_name_isSet = !json[QString("SharedPackageName")].isNull() && m_shared_package_name_isValid;
}

QString OAIPackageSharingPolicyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageSharingPolicyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_package_sharing_scope.isSet()) {
        obj.insert(QString("PackageSharingScope"), ::OpenAPI::toJsonValue(m_package_sharing_scope));
    }
    if (m_shared_package_name_isSet) {
        obj.insert(QString("SharedPackageName"), ::OpenAPI::toJsonValue(m_shared_package_name));
    }
    return obj;
}

OAIPackageSharingPolicyScope OAIPackageSharingPolicyInfo::getPackageSharingScope() const {
    return m_package_sharing_scope;
}
void OAIPackageSharingPolicyInfo::setPackageSharingScope(const OAIPackageSharingPolicyScope &package_sharing_scope) {
    m_package_sharing_scope = package_sharing_scope;
    m_package_sharing_scope_isSet = true;
}

bool OAIPackageSharingPolicyInfo::is_package_sharing_scope_Set() const{
    return m_package_sharing_scope_isSet;
}

bool OAIPackageSharingPolicyInfo::is_package_sharing_scope_Valid() const{
    return m_package_sharing_scope_isValid;
}

QString OAIPackageSharingPolicyInfo::getSharedPackageName() const {
    return m_shared_package_name;
}
void OAIPackageSharingPolicyInfo::setSharedPackageName(const QString &shared_package_name) {
    m_shared_package_name = shared_package_name;
    m_shared_package_name_isSet = true;
}

bool OAIPackageSharingPolicyInfo::is_shared_package_name_Set() const{
    return m_shared_package_name_isSet;
}

bool OAIPackageSharingPolicyInfo::is_shared_package_name_Valid() const{
    return m_shared_package_name_isValid;
}

bool OAIPackageSharingPolicyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_sharing_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageSharingPolicyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
