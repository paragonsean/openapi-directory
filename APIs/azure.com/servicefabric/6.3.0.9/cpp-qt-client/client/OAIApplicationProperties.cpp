/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties::OAIApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties::OAIApplicationProperties() {
    this->initializeModel();
}

OAIApplicationProperties::~OAIApplicationProperties() {}

void OAIApplicationProperties::initializeModel() {

    m_debug_params_isSet = false;
    m_debug_params_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_diagnostics_isSet = false;
    m_diagnostics_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_service_names_isSet = false;
    m_service_names_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_unhealthy_evaluation_isSet = false;
    m_unhealthy_evaluation_isValid = false;
}

void OAIApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties::fromJsonObject(QJsonObject json) {

    m_debug_params_isValid = ::OpenAPI::fromJsonValue(m_debug_params, json[QString("debugParams")]);
    m_debug_params_isSet = !json[QString("debugParams")].isNull() && m_debug_params_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_diagnostics, json[QString("diagnostics")]);
    m_diagnostics_isSet = !json[QString("diagnostics")].isNull() && m_diagnostics_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("healthState")]);
    m_health_state_isSet = !json[QString("healthState")].isNull() && m_health_state_isValid;

    m_service_names_isValid = ::OpenAPI::fromJsonValue(m_service_names, json[QString("serviceNames")]);
    m_service_names_isSet = !json[QString("serviceNames")].isNull() && m_service_names_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_unhealthy_evaluation_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluation, json[QString("unhealthyEvaluation")]);
    m_unhealthy_evaluation_isSet = !json[QString("unhealthyEvaluation")].isNull() && m_unhealthy_evaluation_isValid;
}

QString OAIApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_params_isSet) {
        obj.insert(QString("debugParams"), ::OpenAPI::toJsonValue(m_debug_params));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_diagnostics.isSet()) {
        obj.insert(QString("diagnostics"), ::OpenAPI::toJsonValue(m_diagnostics));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("healthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_service_names.size() > 0) {
        obj.insert(QString("serviceNames"), ::OpenAPI::toJsonValue(m_service_names));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_unhealthy_evaluation_isSet) {
        obj.insert(QString("unhealthyEvaluation"), ::OpenAPI::toJsonValue(m_unhealthy_evaluation));
    }
    return obj;
}

QString OAIApplicationProperties::getDebugParams() const {
    return m_debug_params;
}
void OAIApplicationProperties::setDebugParams(const QString &debug_params) {
    m_debug_params = debug_params;
    m_debug_params_isSet = true;
}

bool OAIApplicationProperties::is_debug_params_Set() const{
    return m_debug_params_isSet;
}

bool OAIApplicationProperties::is_debug_params_Valid() const{
    return m_debug_params_isValid;
}

QString OAIApplicationProperties::getDescription() const {
    return m_description;
}
void OAIApplicationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiagnosticsDescription OAIApplicationProperties::getDiagnostics() const {
    return m_diagnostics;
}
void OAIApplicationProperties::setDiagnostics(const OAIDiagnosticsDescription &diagnostics) {
    m_diagnostics = diagnostics;
    m_diagnostics_isSet = true;
}

bool OAIApplicationProperties::is_diagnostics_Set() const{
    return m_diagnostics_isSet;
}

bool OAIApplicationProperties::is_diagnostics_Valid() const{
    return m_diagnostics_isValid;
}

OAIHealthState OAIApplicationProperties::getHealthState() const {
    return m_health_state;
}
void OAIApplicationProperties::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIApplicationProperties::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIApplicationProperties::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QList<QString> OAIApplicationProperties::getServiceNames() const {
    return m_service_names;
}
void OAIApplicationProperties::setServiceNames(const QList<QString> &service_names) {
    m_service_names = service_names;
    m_service_names_isSet = true;
}

bool OAIApplicationProperties::is_service_names_Set() const{
    return m_service_names_isSet;
}

bool OAIApplicationProperties::is_service_names_Valid() const{
    return m_service_names_isValid;
}

QList<OAIServiceResourceDescription> OAIApplicationProperties::getServices() const {
    return m_services;
}
void OAIApplicationProperties::setServices(const QList<OAIServiceResourceDescription> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIApplicationProperties::is_services_Set() const{
    return m_services_isSet;
}

bool OAIApplicationProperties::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIApplicationProperties::getStatus() const {
    return m_status;
}
void OAIApplicationProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApplicationProperties::getStatusDetails() const {
    return m_status_details;
}
void OAIApplicationProperties::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIApplicationProperties::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIApplicationProperties::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAIApplicationProperties::getUnhealthyEvaluation() const {
    return m_unhealthy_evaluation;
}
void OAIApplicationProperties::setUnhealthyEvaluation(const QString &unhealthy_evaluation) {
    m_unhealthy_evaluation = unhealthy_evaluation;
    m_unhealthy_evaluation_isSet = true;
}

bool OAIApplicationProperties::is_unhealthy_evaluation_Set() const{
    return m_unhealthy_evaluation_isSet;
}

bool OAIApplicationProperties::is_unhealthy_evaluation_Valid() const{
    return m_unhealthy_evaluation_isValid;
}

bool OAIApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
