/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolvedServicePartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolvedServicePartition::OAIResolvedServicePartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolvedServicePartition::OAIResolvedServicePartition() {
    this->initializeModel();
}

OAIResolvedServicePartition::~OAIResolvedServicePartition() {}

void OAIResolvedServicePartition::initializeModel() {

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partition_information_isSet = false;
    m_partition_information_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIResolvedServicePartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolvedServicePartition::fromJsonObject(QJsonObject json) {

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_partition_information_isValid = ::OpenAPI::fromJsonValue(m_partition_information, json[QString("PartitionInformation")]);
    m_partition_information_isSet = !json[QString("PartitionInformation")].isNull() && m_partition_information_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIResolvedServicePartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolvedServicePartition::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoints.size() > 0) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partition_information.isSet()) {
        obj.insert(QString("PartitionInformation"), ::OpenAPI::toJsonValue(m_partition_information));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIResolvedServiceEndpoint> OAIResolvedServicePartition::getEndpoints() const {
    return m_endpoints;
}
void OAIResolvedServicePartition::setEndpoints(const QList<OAIResolvedServiceEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIResolvedServicePartition::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIResolvedServicePartition::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIResolvedServicePartition::getName() const {
    return m_name;
}
void OAIResolvedServicePartition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResolvedServicePartition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResolvedServicePartition::is_name_Valid() const{
    return m_name_isValid;
}

OAIPartitionInformation OAIResolvedServicePartition::getPartitionInformation() const {
    return m_partition_information;
}
void OAIResolvedServicePartition::setPartitionInformation(const OAIPartitionInformation &partition_information) {
    m_partition_information = partition_information;
    m_partition_information_isSet = true;
}

bool OAIResolvedServicePartition::is_partition_information_Set() const{
    return m_partition_information_isSet;
}

bool OAIResolvedServicePartition::is_partition_information_Valid() const{
    return m_partition_information_isValid;
}

QString OAIResolvedServicePartition::getVersion() const {
    return m_version;
}
void OAIResolvedServicePartition::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIResolvedServicePartition::is_version_Set() const{
    return m_version_isSet;
}

bool OAIResolvedServicePartition::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIResolvedServicePartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolvedServicePartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoints_isValid && m_name_isValid && m_partition_information_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
