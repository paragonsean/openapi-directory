/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosSchedule::OAIChaosSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosSchedule::OAIChaosSchedule() {
    this->initializeModel();
}

OAIChaosSchedule::~OAIChaosSchedule() {}

void OAIChaosSchedule::initializeModel() {

    m_chaos_parameters_dictionary_isSet = false;
    m_chaos_parameters_dictionary_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIChaosSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosSchedule::fromJsonObject(QJsonObject json) {

    m_chaos_parameters_dictionary_isValid = ::OpenAPI::fromJsonValue(m_chaos_parameters_dictionary, json[QString("ChaosParametersDictionary")]);
    m_chaos_parameters_dictionary_isSet = !json[QString("ChaosParametersDictionary")].isNull() && m_chaos_parameters_dictionary_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("ExpiryDate")]);
    m_expiry_date_isSet = !json[QString("ExpiryDate")].isNull() && m_expiry_date_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("Jobs")]);
    m_jobs_isSet = !json[QString("Jobs")].isNull() && m_jobs_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAIChaosSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_chaos_parameters_dictionary.size() > 0) {
        obj.insert(QString("ChaosParametersDictionary"), ::OpenAPI::toJsonValue(m_chaos_parameters_dictionary));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("ExpiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("Jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QList<OAIChaosParametersDictionaryItem> OAIChaosSchedule::getChaosParametersDictionary() const {
    return m_chaos_parameters_dictionary;
}
void OAIChaosSchedule::setChaosParametersDictionary(const QList<OAIChaosParametersDictionaryItem> &chaos_parameters_dictionary) {
    m_chaos_parameters_dictionary = chaos_parameters_dictionary;
    m_chaos_parameters_dictionary_isSet = true;
}

bool OAIChaosSchedule::is_chaos_parameters_dictionary_Set() const{
    return m_chaos_parameters_dictionary_isSet;
}

bool OAIChaosSchedule::is_chaos_parameters_dictionary_Valid() const{
    return m_chaos_parameters_dictionary_isValid;
}

QDateTime OAIChaosSchedule::getExpiryDate() const {
    return m_expiry_date;
}
void OAIChaosSchedule::setExpiryDate(const QDateTime &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIChaosSchedule::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIChaosSchedule::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QList<OAIChaosScheduleJob> OAIChaosSchedule::getJobs() const {
    return m_jobs;
}
void OAIChaosSchedule::setJobs(const QList<OAIChaosScheduleJob> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIChaosSchedule::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIChaosSchedule::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QDateTime OAIChaosSchedule::getStartDate() const {
    return m_start_date;
}
void OAIChaosSchedule::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIChaosSchedule::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIChaosSchedule::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIChaosSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chaos_parameters_dictionary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
