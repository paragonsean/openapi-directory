/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAveragePartitionLoadScalingTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAveragePartitionLoadScalingTrigger::OAIAveragePartitionLoadScalingTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAveragePartitionLoadScalingTrigger::OAIAveragePartitionLoadScalingTrigger() {
    this->initializeModel();
}

OAIAveragePartitionLoadScalingTrigger::~OAIAveragePartitionLoadScalingTrigger() {}

void OAIAveragePartitionLoadScalingTrigger::initializeModel() {

    m_lower_load_threshold_isSet = false;
    m_lower_load_threshold_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_scale_interval_in_seconds_isSet = false;
    m_scale_interval_in_seconds_isValid = false;

    m_upper_load_threshold_isSet = false;
    m_upper_load_threshold_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIAveragePartitionLoadScalingTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAveragePartitionLoadScalingTrigger::fromJsonObject(QJsonObject json) {

    m_lower_load_threshold_isValid = ::OpenAPI::fromJsonValue(m_lower_load_threshold, json[QString("LowerLoadThreshold")]);
    m_lower_load_threshold_isSet = !json[QString("LowerLoadThreshold")].isNull() && m_lower_load_threshold_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_scale_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_scale_interval_in_seconds, json[QString("ScaleIntervalInSeconds")]);
    m_scale_interval_in_seconds_isSet = !json[QString("ScaleIntervalInSeconds")].isNull() && m_scale_interval_in_seconds_isValid;

    m_upper_load_threshold_isValid = ::OpenAPI::fromJsonValue(m_upper_load_threshold, json[QString("UpperLoadThreshold")]);
    m_upper_load_threshold_isSet = !json[QString("UpperLoadThreshold")].isNull() && m_upper_load_threshold_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;
}

QString OAIAveragePartitionLoadScalingTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAveragePartitionLoadScalingTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_lower_load_threshold_isSet) {
        obj.insert(QString("LowerLoadThreshold"), ::OpenAPI::toJsonValue(m_lower_load_threshold));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_scale_interval_in_seconds_isSet) {
        obj.insert(QString("ScaleIntervalInSeconds"), ::OpenAPI::toJsonValue(m_scale_interval_in_seconds));
    }
    if (m_upper_load_threshold_isSet) {
        obj.insert(QString("UpperLoadThreshold"), ::OpenAPI::toJsonValue(m_upper_load_threshold));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIAveragePartitionLoadScalingTrigger::getLowerLoadThreshold() const {
    return m_lower_load_threshold;
}
void OAIAveragePartitionLoadScalingTrigger::setLowerLoadThreshold(const QString &lower_load_threshold) {
    m_lower_load_threshold = lower_load_threshold;
    m_lower_load_threshold_isSet = true;
}

bool OAIAveragePartitionLoadScalingTrigger::is_lower_load_threshold_Set() const{
    return m_lower_load_threshold_isSet;
}

bool OAIAveragePartitionLoadScalingTrigger::is_lower_load_threshold_Valid() const{
    return m_lower_load_threshold_isValid;
}

QString OAIAveragePartitionLoadScalingTrigger::getMetricName() const {
    return m_metric_name;
}
void OAIAveragePartitionLoadScalingTrigger::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIAveragePartitionLoadScalingTrigger::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIAveragePartitionLoadScalingTrigger::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

qint64 OAIAveragePartitionLoadScalingTrigger::getScaleIntervalInSeconds() const {
    return m_scale_interval_in_seconds;
}
void OAIAveragePartitionLoadScalingTrigger::setScaleIntervalInSeconds(const qint64 &scale_interval_in_seconds) {
    m_scale_interval_in_seconds = scale_interval_in_seconds;
    m_scale_interval_in_seconds_isSet = true;
}

bool OAIAveragePartitionLoadScalingTrigger::is_scale_interval_in_seconds_Set() const{
    return m_scale_interval_in_seconds_isSet;
}

bool OAIAveragePartitionLoadScalingTrigger::is_scale_interval_in_seconds_Valid() const{
    return m_scale_interval_in_seconds_isValid;
}

QString OAIAveragePartitionLoadScalingTrigger::getUpperLoadThreshold() const {
    return m_upper_load_threshold;
}
void OAIAveragePartitionLoadScalingTrigger::setUpperLoadThreshold(const QString &upper_load_threshold) {
    m_upper_load_threshold = upper_load_threshold;
    m_upper_load_threshold_isSet = true;
}

bool OAIAveragePartitionLoadScalingTrigger::is_upper_load_threshold_Set() const{
    return m_upper_load_threshold_isSet;
}

bool OAIAveragePartitionLoadScalingTrigger::is_upper_load_threshold_Valid() const{
    return m_upper_load_threshold_isValid;
}

OAIScalingTriggerKind OAIAveragePartitionLoadScalingTrigger::getKind() const {
    return m_kind;
}
void OAIAveragePartitionLoadScalingTrigger::setKind(const OAIScalingTriggerKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAveragePartitionLoadScalingTrigger::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAveragePartitionLoadScalingTrigger::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAveragePartitionLoadScalingTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lower_load_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_load_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAveragePartitionLoadScalingTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lower_load_threshold_isValid && m_metric_name_isValid && m_scale_interval_in_seconds_isValid && m_upper_load_threshold_isValid && m_kind_isValid && true;
}

} // namespace OpenAPI
