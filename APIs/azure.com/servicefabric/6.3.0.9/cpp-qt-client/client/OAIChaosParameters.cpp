/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosParameters::OAIChaosParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosParameters::OAIChaosParameters() {
    this->initializeModel();
}

OAIChaosParameters::~OAIChaosParameters() {}

void OAIChaosParameters::initializeModel() {

    m_chaos_target_filter_isSet = false;
    m_chaos_target_filter_isValid = false;

    m_cluster_health_policy_isSet = false;
    m_cluster_health_policy_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_enable_move_replica_faults_isSet = false;
    m_enable_move_replica_faults_isValid = false;

    m_max_cluster_stabilization_timeout_in_seconds_isSet = false;
    m_max_cluster_stabilization_timeout_in_seconds_isValid = false;

    m_max_concurrent_faults_isSet = false;
    m_max_concurrent_faults_isValid = false;

    m_time_to_run_in_seconds_isSet = false;
    m_time_to_run_in_seconds_isValid = false;

    m_wait_time_between_faults_in_seconds_isSet = false;
    m_wait_time_between_faults_in_seconds_isValid = false;

    m_wait_time_between_iterations_in_seconds_isSet = false;
    m_wait_time_between_iterations_in_seconds_isValid = false;
}

void OAIChaosParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosParameters::fromJsonObject(QJsonObject json) {

    m_chaos_target_filter_isValid = ::OpenAPI::fromJsonValue(m_chaos_target_filter, json[QString("ChaosTargetFilter")]);
    m_chaos_target_filter_isSet = !json[QString("ChaosTargetFilter")].isNull() && m_chaos_target_filter_isValid;

    m_cluster_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_health_policy, json[QString("ClusterHealthPolicy")]);
    m_cluster_health_policy_isSet = !json[QString("ClusterHealthPolicy")].isNull() && m_cluster_health_policy_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_enable_move_replica_faults_isValid = ::OpenAPI::fromJsonValue(m_enable_move_replica_faults, json[QString("EnableMoveReplicaFaults")]);
    m_enable_move_replica_faults_isSet = !json[QString("EnableMoveReplicaFaults")].isNull() && m_enable_move_replica_faults_isValid;

    m_max_cluster_stabilization_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_cluster_stabilization_timeout_in_seconds, json[QString("MaxClusterStabilizationTimeoutInSeconds")]);
    m_max_cluster_stabilization_timeout_in_seconds_isSet = !json[QString("MaxClusterStabilizationTimeoutInSeconds")].isNull() && m_max_cluster_stabilization_timeout_in_seconds_isValid;

    m_max_concurrent_faults_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_faults, json[QString("MaxConcurrentFaults")]);
    m_max_concurrent_faults_isSet = !json[QString("MaxConcurrentFaults")].isNull() && m_max_concurrent_faults_isValid;

    m_time_to_run_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_to_run_in_seconds, json[QString("TimeToRunInSeconds")]);
    m_time_to_run_in_seconds_isSet = !json[QString("TimeToRunInSeconds")].isNull() && m_time_to_run_in_seconds_isValid;

    m_wait_time_between_faults_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_time_between_faults_in_seconds, json[QString("WaitTimeBetweenFaultsInSeconds")]);
    m_wait_time_between_faults_in_seconds_isSet = !json[QString("WaitTimeBetweenFaultsInSeconds")].isNull() && m_wait_time_between_faults_in_seconds_isValid;

    m_wait_time_between_iterations_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_time_between_iterations_in_seconds, json[QString("WaitTimeBetweenIterationsInSeconds")]);
    m_wait_time_between_iterations_in_seconds_isSet = !json[QString("WaitTimeBetweenIterationsInSeconds")].isNull() && m_wait_time_between_iterations_in_seconds_isValid;
}

QString OAIChaosParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_chaos_target_filter.isSet()) {
        obj.insert(QString("ChaosTargetFilter"), ::OpenAPI::toJsonValue(m_chaos_target_filter));
    }
    if (m_cluster_health_policy.isSet()) {
        obj.insert(QString("ClusterHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_health_policy));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_enable_move_replica_faults_isSet) {
        obj.insert(QString("EnableMoveReplicaFaults"), ::OpenAPI::toJsonValue(m_enable_move_replica_faults));
    }
    if (m_max_cluster_stabilization_timeout_in_seconds_isSet) {
        obj.insert(QString("MaxClusterStabilizationTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_max_cluster_stabilization_timeout_in_seconds));
    }
    if (m_max_concurrent_faults_isSet) {
        obj.insert(QString("MaxConcurrentFaults"), ::OpenAPI::toJsonValue(m_max_concurrent_faults));
    }
    if (m_time_to_run_in_seconds_isSet) {
        obj.insert(QString("TimeToRunInSeconds"), ::OpenAPI::toJsonValue(m_time_to_run_in_seconds));
    }
    if (m_wait_time_between_faults_in_seconds_isSet) {
        obj.insert(QString("WaitTimeBetweenFaultsInSeconds"), ::OpenAPI::toJsonValue(m_wait_time_between_faults_in_seconds));
    }
    if (m_wait_time_between_iterations_in_seconds_isSet) {
        obj.insert(QString("WaitTimeBetweenIterationsInSeconds"), ::OpenAPI::toJsonValue(m_wait_time_between_iterations_in_seconds));
    }
    return obj;
}

OAIChaosTargetFilter OAIChaosParameters::getChaosTargetFilter() const {
    return m_chaos_target_filter;
}
void OAIChaosParameters::setChaosTargetFilter(const OAIChaosTargetFilter &chaos_target_filter) {
    m_chaos_target_filter = chaos_target_filter;
    m_chaos_target_filter_isSet = true;
}

bool OAIChaosParameters::is_chaos_target_filter_Set() const{
    return m_chaos_target_filter_isSet;
}

bool OAIChaosParameters::is_chaos_target_filter_Valid() const{
    return m_chaos_target_filter_isValid;
}

OAIClusterHealthPolicy OAIChaosParameters::getClusterHealthPolicy() const {
    return m_cluster_health_policy;
}
void OAIChaosParameters::setClusterHealthPolicy(const OAIClusterHealthPolicy &cluster_health_policy) {
    m_cluster_health_policy = cluster_health_policy;
    m_cluster_health_policy_isSet = true;
}

bool OAIChaosParameters::is_cluster_health_policy_Set() const{
    return m_cluster_health_policy_isSet;
}

bool OAIChaosParameters::is_cluster_health_policy_Valid() const{
    return m_cluster_health_policy_isValid;
}

OAIChaosContext OAIChaosParameters::getContext() const {
    return m_context;
}
void OAIChaosParameters::setContext(const OAIChaosContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIChaosParameters::is_context_Set() const{
    return m_context_isSet;
}

bool OAIChaosParameters::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIChaosParameters::isEnableMoveReplicaFaults() const {
    return m_enable_move_replica_faults;
}
void OAIChaosParameters::setEnableMoveReplicaFaults(const bool &enable_move_replica_faults) {
    m_enable_move_replica_faults = enable_move_replica_faults;
    m_enable_move_replica_faults_isSet = true;
}

bool OAIChaosParameters::is_enable_move_replica_faults_Set() const{
    return m_enable_move_replica_faults_isSet;
}

bool OAIChaosParameters::is_enable_move_replica_faults_Valid() const{
    return m_enable_move_replica_faults_isValid;
}

qint64 OAIChaosParameters::getMaxClusterStabilizationTimeoutInSeconds() const {
    return m_max_cluster_stabilization_timeout_in_seconds;
}
void OAIChaosParameters::setMaxClusterStabilizationTimeoutInSeconds(const qint64 &max_cluster_stabilization_timeout_in_seconds) {
    m_max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds;
    m_max_cluster_stabilization_timeout_in_seconds_isSet = true;
}

bool OAIChaosParameters::is_max_cluster_stabilization_timeout_in_seconds_Set() const{
    return m_max_cluster_stabilization_timeout_in_seconds_isSet;
}

bool OAIChaosParameters::is_max_cluster_stabilization_timeout_in_seconds_Valid() const{
    return m_max_cluster_stabilization_timeout_in_seconds_isValid;
}

qint64 OAIChaosParameters::getMaxConcurrentFaults() const {
    return m_max_concurrent_faults;
}
void OAIChaosParameters::setMaxConcurrentFaults(const qint64 &max_concurrent_faults) {
    m_max_concurrent_faults = max_concurrent_faults;
    m_max_concurrent_faults_isSet = true;
}

bool OAIChaosParameters::is_max_concurrent_faults_Set() const{
    return m_max_concurrent_faults_isSet;
}

bool OAIChaosParameters::is_max_concurrent_faults_Valid() const{
    return m_max_concurrent_faults_isValid;
}

QString OAIChaosParameters::getTimeToRunInSeconds() const {
    return m_time_to_run_in_seconds;
}
void OAIChaosParameters::setTimeToRunInSeconds(const QString &time_to_run_in_seconds) {
    m_time_to_run_in_seconds = time_to_run_in_seconds;
    m_time_to_run_in_seconds_isSet = true;
}

bool OAIChaosParameters::is_time_to_run_in_seconds_Set() const{
    return m_time_to_run_in_seconds_isSet;
}

bool OAIChaosParameters::is_time_to_run_in_seconds_Valid() const{
    return m_time_to_run_in_seconds_isValid;
}

qint64 OAIChaosParameters::getWaitTimeBetweenFaultsInSeconds() const {
    return m_wait_time_between_faults_in_seconds;
}
void OAIChaosParameters::setWaitTimeBetweenFaultsInSeconds(const qint64 &wait_time_between_faults_in_seconds) {
    m_wait_time_between_faults_in_seconds = wait_time_between_faults_in_seconds;
    m_wait_time_between_faults_in_seconds_isSet = true;
}

bool OAIChaosParameters::is_wait_time_between_faults_in_seconds_Set() const{
    return m_wait_time_between_faults_in_seconds_isSet;
}

bool OAIChaosParameters::is_wait_time_between_faults_in_seconds_Valid() const{
    return m_wait_time_between_faults_in_seconds_isValid;
}

qint64 OAIChaosParameters::getWaitTimeBetweenIterationsInSeconds() const {
    return m_wait_time_between_iterations_in_seconds;
}
void OAIChaosParameters::setWaitTimeBetweenIterationsInSeconds(const qint64 &wait_time_between_iterations_in_seconds) {
    m_wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds;
    m_wait_time_between_iterations_in_seconds_isSet = true;
}

bool OAIChaosParameters::is_wait_time_between_iterations_in_seconds_Set() const{
    return m_wait_time_between_iterations_in_seconds_isSet;
}

bool OAIChaosParameters::is_wait_time_between_iterations_in_seconds_Valid() const{
    return m_wait_time_between_iterations_in_seconds_isValid;
}

bool OAIChaosParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chaos_target_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_move_replica_faults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cluster_stabilization_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_faults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_run_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_between_faults_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_between_iterations_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
