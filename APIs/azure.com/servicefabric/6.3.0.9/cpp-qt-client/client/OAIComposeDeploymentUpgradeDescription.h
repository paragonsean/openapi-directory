/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComposeDeploymentUpgradeDescription.h
 *
 * Describes the parameters for a compose deployment upgrade.
 */

#ifndef OAIComposeDeploymentUpgradeDescription_H
#define OAIComposeDeploymentUpgradeDescription_H

#include <QJsonObject>

#include "OAIApplicationHealthPolicy.h"
#include "OAIMonitoringPolicyDescription.h"
#include "OAIRegistryCredential.h"
#include "OAIUpgradeKind.h"
#include "OAIUpgradeMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationHealthPolicy;
class OAIMonitoringPolicyDescription;
class OAIRegistryCredential;

class OAIComposeDeploymentUpgradeDescription : public OAIObject {
public:
    OAIComposeDeploymentUpgradeDescription();
    OAIComposeDeploymentUpgradeDescription(QString json);
    ~OAIComposeDeploymentUpgradeDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApplicationHealthPolicy getApplicationHealthPolicy() const;
    void setApplicationHealthPolicy(const OAIApplicationHealthPolicy &application_health_policy);
    bool is_application_health_policy_Set() const;
    bool is_application_health_policy_Valid() const;

    QString getComposeFileContent() const;
    void setComposeFileContent(const QString &compose_file_content);
    bool is_compose_file_content_Set() const;
    bool is_compose_file_content_Valid() const;

    QString getDeploymentName() const;
    void setDeploymentName(const QString &deployment_name);
    bool is_deployment_name_Set() const;
    bool is_deployment_name_Valid() const;

    bool isForceRestart() const;
    void setForceRestart(const bool &force_restart);
    bool is_force_restart_Set() const;
    bool is_force_restart_Valid() const;

    OAIMonitoringPolicyDescription getMonitoringPolicy() const;
    void setMonitoringPolicy(const OAIMonitoringPolicyDescription &monitoring_policy);
    bool is_monitoring_policy_Set() const;
    bool is_monitoring_policy_Valid() const;

    OAIRegistryCredential getRegistryCredential() const;
    void setRegistryCredential(const OAIRegistryCredential &registry_credential);
    bool is_registry_credential_Set() const;
    bool is_registry_credential_Valid() const;

    OAIUpgradeMode getRollingUpgradeMode() const;
    void setRollingUpgradeMode(const OAIUpgradeMode &rolling_upgrade_mode);
    bool is_rolling_upgrade_mode_Set() const;
    bool is_rolling_upgrade_mode_Valid() const;

    OAIUpgradeKind getUpgradeKind() const;
    void setUpgradeKind(const OAIUpgradeKind &upgrade_kind);
    bool is_upgrade_kind_Set() const;
    bool is_upgrade_kind_Valid() const;

    qint64 getUpgradeReplicaSetCheckTimeoutInSeconds() const;
    void setUpgradeReplicaSetCheckTimeoutInSeconds(const qint64 &upgrade_replica_set_check_timeout_in_seconds);
    bool is_upgrade_replica_set_check_timeout_in_seconds_Set() const;
    bool is_upgrade_replica_set_check_timeout_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApplicationHealthPolicy m_application_health_policy;
    bool m_application_health_policy_isSet;
    bool m_application_health_policy_isValid;

    QString m_compose_file_content;
    bool m_compose_file_content_isSet;
    bool m_compose_file_content_isValid;

    QString m_deployment_name;
    bool m_deployment_name_isSet;
    bool m_deployment_name_isValid;

    bool m_force_restart;
    bool m_force_restart_isSet;
    bool m_force_restart_isValid;

    OAIMonitoringPolicyDescription m_monitoring_policy;
    bool m_monitoring_policy_isSet;
    bool m_monitoring_policy_isValid;

    OAIRegistryCredential m_registry_credential;
    bool m_registry_credential_isSet;
    bool m_registry_credential_isValid;

    OAIUpgradeMode m_rolling_upgrade_mode;
    bool m_rolling_upgrade_mode_isSet;
    bool m_rolling_upgrade_mode_isValid;

    OAIUpgradeKind m_upgrade_kind;
    bool m_upgrade_kind_isSet;
    bool m_upgrade_kind_isValid;

    qint64 m_upgrade_replica_set_check_timeout_in_seconds;
    bool m_upgrade_replica_set_check_timeout_in_seconds_isSet;
    bool m_upgrade_replica_set_check_timeout_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComposeDeploymentUpgradeDescription)

#endif // OAIComposeDeploymentUpgradeDescription_H
