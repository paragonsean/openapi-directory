/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackupByStorageQueryDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackupByStorageQueryDescription::OAIGetBackupByStorageQueryDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackupByStorageQueryDescription::OAIGetBackupByStorageQueryDescription() {
    this->initializeModel();
}

OAIGetBackupByStorageQueryDescription::~OAIGetBackupByStorageQueryDescription() {}

void OAIGetBackupByStorageQueryDescription::initializeModel() {

    m_backup_entity_isSet = false;
    m_backup_entity_isValid = false;

    m_end_date_time_filter_isSet = false;
    m_end_date_time_filter_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_start_date_time_filter_isSet = false;
    m_start_date_time_filter_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;
}

void OAIGetBackupByStorageQueryDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackupByStorageQueryDescription::fromJsonObject(QJsonObject json) {

    m_backup_entity_isValid = ::OpenAPI::fromJsonValue(m_backup_entity, json[QString("BackupEntity")]);
    m_backup_entity_isSet = !json[QString("BackupEntity")].isNull() && m_backup_entity_isValid;

    m_end_date_time_filter_isValid = ::OpenAPI::fromJsonValue(m_end_date_time_filter, json[QString("EndDateTimeFilter")]);
    m_end_date_time_filter_isSet = !json[QString("EndDateTimeFilter")].isNull() && m_end_date_time_filter_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("Latest")]);
    m_latest_isSet = !json[QString("Latest")].isNull() && m_latest_isValid;

    m_start_date_time_filter_isValid = ::OpenAPI::fromJsonValue(m_start_date_time_filter, json[QString("StartDateTimeFilter")]);
    m_start_date_time_filter_isSet = !json[QString("StartDateTimeFilter")].isNull() && m_start_date_time_filter_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("Storage")]);
    m_storage_isSet = !json[QString("Storage")].isNull() && m_storage_isValid;
}

QString OAIGetBackupByStorageQueryDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackupByStorageQueryDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_entity.isSet()) {
        obj.insert(QString("BackupEntity"), ::OpenAPI::toJsonValue(m_backup_entity));
    }
    if (m_end_date_time_filter_isSet) {
        obj.insert(QString("EndDateTimeFilter"), ::OpenAPI::toJsonValue(m_end_date_time_filter));
    }
    if (m_latest_isSet) {
        obj.insert(QString("Latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_start_date_time_filter_isSet) {
        obj.insert(QString("StartDateTimeFilter"), ::OpenAPI::toJsonValue(m_start_date_time_filter));
    }
    if (m_storage.isSet()) {
        obj.insert(QString("Storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    return obj;
}

OAIBackupEntity OAIGetBackupByStorageQueryDescription::getBackupEntity() const {
    return m_backup_entity;
}
void OAIGetBackupByStorageQueryDescription::setBackupEntity(const OAIBackupEntity &backup_entity) {
    m_backup_entity = backup_entity;
    m_backup_entity_isSet = true;
}

bool OAIGetBackupByStorageQueryDescription::is_backup_entity_Set() const{
    return m_backup_entity_isSet;
}

bool OAIGetBackupByStorageQueryDescription::is_backup_entity_Valid() const{
    return m_backup_entity_isValid;
}

QDateTime OAIGetBackupByStorageQueryDescription::getEndDateTimeFilter() const {
    return m_end_date_time_filter;
}
void OAIGetBackupByStorageQueryDescription::setEndDateTimeFilter(const QDateTime &end_date_time_filter) {
    m_end_date_time_filter = end_date_time_filter;
    m_end_date_time_filter_isSet = true;
}

bool OAIGetBackupByStorageQueryDescription::is_end_date_time_filter_Set() const{
    return m_end_date_time_filter_isSet;
}

bool OAIGetBackupByStorageQueryDescription::is_end_date_time_filter_Valid() const{
    return m_end_date_time_filter_isValid;
}

bool OAIGetBackupByStorageQueryDescription::isLatest() const {
    return m_latest;
}
void OAIGetBackupByStorageQueryDescription::setLatest(const bool &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIGetBackupByStorageQueryDescription::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIGetBackupByStorageQueryDescription::is_latest_Valid() const{
    return m_latest_isValid;
}

QDateTime OAIGetBackupByStorageQueryDescription::getStartDateTimeFilter() const {
    return m_start_date_time_filter;
}
void OAIGetBackupByStorageQueryDescription::setStartDateTimeFilter(const QDateTime &start_date_time_filter) {
    m_start_date_time_filter = start_date_time_filter;
    m_start_date_time_filter_isSet = true;
}

bool OAIGetBackupByStorageQueryDescription::is_start_date_time_filter_Set() const{
    return m_start_date_time_filter_isSet;
}

bool OAIGetBackupByStorageQueryDescription::is_start_date_time_filter_Valid() const{
    return m_start_date_time_filter_isValid;
}

OAIBackupStorageDescription OAIGetBackupByStorageQueryDescription::getStorage() const {
    return m_storage;
}
void OAIGetBackupByStorageQueryDescription::setStorage(const OAIBackupStorageDescription &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIGetBackupByStorageQueryDescription::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIGetBackupByStorageQueryDescription::is_storage_Valid() const{
    return m_storage_isValid;
}

bool OAIGetBackupByStorageQueryDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackupByStorageQueryDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_entity_isValid && m_storage_isValid && true;
}

} // namespace OpenAPI
