/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupState::OAIBackupState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupState::OAIBackupState() {
    this->initializeModel();
}

OAIBackupState::~OAIBackupState() {}

void OAIBackupState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBackupState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBackupState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BackupInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::BACKUPINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Timeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBackupState::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBackupState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBackupState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBackupState::INVALID:
            val = "Invalid";
            break;
        case eOAIBackupState::ACCEPTED:
            val = "Accepted";
            break;
        case eOAIBackupState::BACKUPINPROGRESS:
            val = "BackupInProgress";
            break;
        case eOAIBackupState::SUCCESS:
            val = "Success";
            break;
        case eOAIBackupState::FAILURE:
            val = "Failure";
            break;
        case eOAIBackupState::TIMEOUT:
            val = "Timeout";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBackupState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBackupState::eOAIBackupState OAIBackupState::getValue() const {
    return m_value;
}

void OAIBackupState::setValue(const OAIBackupState::eOAIBackupState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBackupState::isSet() const {
    
    return m_value_isSet;
}

bool OAIBackupState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
