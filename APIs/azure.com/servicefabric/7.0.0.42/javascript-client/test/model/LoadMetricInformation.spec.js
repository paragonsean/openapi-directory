/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.LoadMetricInformation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LoadMetricInformation', function() {
    it('should create an instance of LoadMetricInformation', function() {
      // uncomment below and update the code to test LoadMetricInformation
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be.a(ServiceFabricClientApis.LoadMetricInformation);
    });

    it('should have the property action (base name: "Action")', function() {
      // uncomment below and update the code to test the property action
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property activityThreshold (base name: "ActivityThreshold")', function() {
      // uncomment below and update the code to test the property activityThreshold
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property balancingThreshold (base name: "BalancingThreshold")', function() {
      // uncomment below and update the code to test the property balancingThreshold
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property bufferedClusterCapacityRemaining (base name: "BufferedClusterCapacityRemaining")', function() {
      // uncomment below and update the code to test the property bufferedClusterCapacityRemaining
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterBufferedCapacity (base name: "ClusterBufferedCapacity")', function() {
      // uncomment below and update the code to test the property clusterBufferedCapacity
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterCapacity (base name: "ClusterCapacity")', function() {
      // uncomment below and update the code to test the property clusterCapacity
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterCapacityRemaining (base name: "ClusterCapacityRemaining")', function() {
      // uncomment below and update the code to test the property clusterCapacityRemaining
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterLoad (base name: "ClusterLoad")', function() {
      // uncomment below and update the code to test the property clusterLoad
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterRemainingBufferedCapacity (base name: "ClusterRemainingBufferedCapacity")', function() {
      // uncomment below and update the code to test the property clusterRemainingBufferedCapacity
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property clusterRemainingCapacity (base name: "ClusterRemainingCapacity")', function() {
      // uncomment below and update the code to test the property clusterRemainingCapacity
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property currentClusterLoad (base name: "CurrentClusterLoad")', function() {
      // uncomment below and update the code to test the property currentClusterLoad
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property deviationAfter (base name: "DeviationAfter")', function() {
      // uncomment below and update the code to test the property deviationAfter
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property deviationBefore (base name: "DeviationBefore")', function() {
      // uncomment below and update the code to test the property deviationBefore
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property isBalancedAfter (base name: "IsBalancedAfter")', function() {
      // uncomment below and update the code to test the property isBalancedAfter
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property isBalancedBefore (base name: "IsBalancedBefore")', function() {
      // uncomment below and update the code to test the property isBalancedBefore
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property isClusterCapacityViolation (base name: "IsClusterCapacityViolation")', function() {
      // uncomment below and update the code to test the property isClusterCapacityViolation
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property maxNodeLoadNodeId (base name: "MaxNodeLoadNodeId")', function() {
      // uncomment below and update the code to test the property maxNodeLoadNodeId
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property maxNodeLoadValue (base name: "MaxNodeLoadValue")', function() {
      // uncomment below and update the code to test the property maxNodeLoadValue
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property maximumNodeLoad (base name: "MaximumNodeLoad")', function() {
      // uncomment below and update the code to test the property maximumNodeLoad
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property minNodeLoadNodeId (base name: "MinNodeLoadNodeId")', function() {
      // uncomment below and update the code to test the property minNodeLoadNodeId
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property minNodeLoadValue (base name: "MinNodeLoadValue")', function() {
      // uncomment below and update the code to test the property minNodeLoadValue
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property minimumNodeLoad (base name: "MinimumNodeLoad")', function() {
      // uncomment below and update the code to test the property minimumNodeLoad
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property nodeBufferPercentage (base name: "NodeBufferPercentage")', function() {
      // uncomment below and update the code to test the property nodeBufferPercentage
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

    it('should have the property plannedLoadRemoval (base name: "PlannedLoadRemoval")', function() {
      // uncomment below and update the code to test the property plannedLoadRemoval
      //var instance = new ServiceFabricClientApis.LoadMetricInformation();
      //expect(instance).to.be();
    });

  });

}));
