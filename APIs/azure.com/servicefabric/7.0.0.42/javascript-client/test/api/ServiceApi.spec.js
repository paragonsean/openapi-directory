/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.ServiceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceApi', function() {
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceFromTemplate', function() {
      it('should call createServiceFromTemplate successfully', function(done) {
        //uncomment below and update the code to test createServiceFromTemplate
        //instance.createServiceFromTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationNameInfo', function() {
      it('should call getApplicationNameInfo successfully', function(done) {
        //uncomment below and update the code to test getApplicationNameInfo
        //instance.getApplicationNameInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceDescription', function() {
      it('should call getServiceDescription successfully', function(done) {
        //uncomment below and update the code to test getServiceDescription
        //instance.getServiceDescription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceHealth', function() {
      it('should call getServiceHealth successfully', function(done) {
        //uncomment below and update the code to test getServiceHealth
        //instance.getServiceHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceHealthUsingPolicy', function() {
      it('should call getServiceHealthUsingPolicy successfully', function(done) {
        //uncomment below and update the code to test getServiceHealthUsingPolicy
        //instance.getServiceHealthUsingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceInfo', function() {
      it('should call getServiceInfo successfully', function(done) {
        //uncomment below and update the code to test getServiceInfo
        //instance.getServiceInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceInfoList', function() {
      it('should call getServiceInfoList successfully', function(done) {
        //uncomment below and update the code to test getServiceInfoList
        //instance.getServiceInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUnplacedReplicaInformation', function() {
      it('should call getUnplacedReplicaInformation successfully', function(done) {
        //uncomment below and update the code to test getUnplacedReplicaInformation
        //instance.getUnplacedReplicaInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportServiceHealth', function() {
      it('should call reportServiceHealth successfully', function(done) {
        //uncomment below and update the code to test reportServiceHealth
        //instance.reportServiceHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveService', function() {
      it('should call resolveService successfully', function(done) {
        //uncomment below and update the code to test resolveService
        //instance.resolveService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
