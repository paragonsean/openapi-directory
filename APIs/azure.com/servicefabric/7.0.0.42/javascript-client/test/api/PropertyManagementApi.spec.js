/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.PropertyManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PropertyManagementApi', function() {
    describe('createName', function() {
      it('should call createName successfully', function(done) {
        //uncomment below and update the code to test createName
        //instance.createName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteName', function() {
      it('should call deleteName successfully', function(done) {
        //uncomment below and update the code to test deleteName
        //instance.deleteName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProperty', function() {
      it('should call deleteProperty successfully', function(done) {
        //uncomment below and update the code to test deleteProperty
        //instance.deleteProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNameExistsInfo', function() {
      it('should call getNameExistsInfo successfully', function(done) {
        //uncomment below and update the code to test getNameExistsInfo
        //instance.getNameExistsInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPropertyInfo', function() {
      it('should call getPropertyInfo successfully', function(done) {
        //uncomment below and update the code to test getPropertyInfo
        //instance.getPropertyInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPropertyInfoList', function() {
      it('should call getPropertyInfoList successfully', function(done) {
        //uncomment below and update the code to test getPropertyInfoList
        //instance.getPropertyInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubNameInfoList', function() {
      it('should call getSubNameInfoList successfully', function(done) {
        //uncomment below and update the code to test getSubNameInfoList
        //instance.getSubNameInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProperty', function() {
      it('should call putProperty successfully', function(done) {
        //uncomment below and update the code to test putProperty
        //instance.putProperty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitPropertyBatch', function() {
      it('should call submitPropertyBatch successfully', function(done) {
        //uncomment below and update the code to test submitPropertyBatch
        //instance.submitPropertyBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
