/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FabricError from '../model/FabricError';
import FailedPropertyBatchInfo from '../model/FailedPropertyBatchInfo';
import NameDescription from '../model/NameDescription';
import PagedPropertyInfoList from '../model/PagedPropertyInfoList';
import PagedSubNameInfoList from '../model/PagedSubNameInfoList';
import PropertyBatchDescriptionList from '../model/PropertyBatchDescriptionList';
import PropertyDescription from '../model/PropertyDescription';
import PropertyInfo from '../model/PropertyInfo';
import SuccessfulPropertyBatchInfo from '../model/SuccessfulPropertyBatchInfo';

/**
* PropertyManagement service.
* @module api/PropertyManagementApi
* @version 7.0.0.42
*/
export default class PropertyManagementApi {

    /**
    * Constructs a new PropertyManagementApi. 
    * @alias module:api/PropertyManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createName operation.
     * @callback module:api/PropertyManagementApi~createNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Service Fabric name.
     * Creates the specified Service Fabric name.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {module:model/NameDescription} nameDescription Describes the Service Fabric name to be created.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~createNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createName(apiVersion, nameDescription, opts, callback) {
      opts = opts || {};
      let postBody = nameDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createName");
      }
      // verify the required parameter 'nameDescription' is set
      if (nameDescription === undefined || nameDescription === null) {
        throw new Error("Missing the required parameter 'nameDescription' when calling createName");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Names/$/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteName operation.
     * @callback module:api/PropertyManagementApi~deleteNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Service Fabric name.
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~deleteNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteName(apiVersion, nameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteName");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling deleteName");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Names/{nameId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProperty operation.
     * @callback module:api/PropertyManagementApi~deletePropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Service Fabric property.
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {String} propertyName Specifies the name of the property to get.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~deletePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProperty(apiVersion, nameId, propertyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteProperty");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling deleteProperty");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling deleteProperty");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'PropertyName': propertyName,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetProperty', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNameExistsInfo operation.
     * @callback module:api/PropertyManagementApi~getNameExistsInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns whether the Service Fabric name exists.
     * Returns whether the specified Service Fabric name exists.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~getNameExistsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNameExistsInfo(apiVersion, nameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getNameExistsInfo");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling getNameExistsInfo");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Names/{nameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyInfo operation.
     * @callback module:api/PropertyManagementApi~getPropertyInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified Service Fabric property.
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {String} propertyName Specifies the name of the property to get.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~getPropertyInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyInfo}
     */
    getPropertyInfo(apiVersion, nameId, propertyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPropertyInfo");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling getPropertyInfo");
      }
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getPropertyInfo");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'PropertyName': propertyName,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyInfo;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetProperty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertyInfoList operation.
     * @callback module:api/PropertyManagementApi~getPropertyInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedPropertyInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information on all Service Fabric properties under a given name.
     * A Service Fabric name can have one or more named properties that store custom information. This operation gets the information about these properties in a paged list. The information includes name, value, and metadata about each of the properties.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeValues = false)] Allows specifying whether to include the values of the properties returned. True if values should be returned with the metadata; False to return only property metadata.
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~getPropertyInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedPropertyInfoList}
     */
    getPropertyInfoList(apiVersion, nameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPropertyInfoList");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling getPropertyInfoList");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'IncludeValues': opts['includeValues'],
        'ContinuationToken': opts['continuationToken'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedPropertyInfoList;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubNameInfoList operation.
     * @callback module:api/PropertyManagementApi~getSubNameInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedSubNameInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerates all the Service Fabric names under a given name.
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Querying a name that doesn't exist will fail.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recursive = false)] Allows specifying that the search performed should be recursive.
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~getSubNameInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedSubNameInfoList}
     */
    getSubNameInfoList(apiVersion, nameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubNameInfoList");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling getSubNameInfoList");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'Recursive': opts['recursive'],
        'ContinuationToken': opts['continuationToken'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedSubNameInfoList;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetSubNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProperty operation.
     * @callback module:api/PropertyManagementApi~putPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Service Fabric property.
     * Creates or updates the specified Service Fabric property under a given name.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {module:model/PropertyDescription} propertyDescription Describes the Service Fabric property to be created.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~putPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProperty(apiVersion, nameId, propertyDescription, opts, callback) {
      opts = opts || {};
      let postBody = propertyDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling putProperty");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling putProperty");
      }
      // verify the required parameter 'propertyDescription' is set
      if (propertyDescription === undefined || propertyDescription === null) {
        throw new Error("Missing the required parameter 'propertyDescription' when calling putProperty");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetProperty', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitPropertyBatch operation.
     * @callback module:api/PropertyManagementApi~submitPropertyBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulPropertyBatchInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a property batch.
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nameId The Service Fabric name, without the 'fabric:' URI scheme.
     * @param {module:model/PropertyBatchDescriptionList} propertyBatchDescriptionList Describes the property batch operations to be submitted.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/PropertyManagementApi~submitPropertyBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulPropertyBatchInfo}
     */
    submitPropertyBatch(apiVersion, nameId, propertyBatchDescriptionList, opts, callback) {
      opts = opts || {};
      let postBody = propertyBatchDescriptionList;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling submitPropertyBatch");
      }
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling submitPropertyBatch");
      }
      // verify the required parameter 'propertyBatchDescriptionList' is set
      if (propertyBatchDescriptionList === undefined || propertyBatchDescriptionList === null) {
        throw new Error("Missing the required parameter 'propertyBatchDescriptionList' when calling submitPropertyBatch");
      }

      let pathParams = {
        'nameId': nameId
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessfulPropertyBatchInfo;
      return this.apiClient.callApi(
        '/Names/{nameId}/$/GetProperties/$/SubmitBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
