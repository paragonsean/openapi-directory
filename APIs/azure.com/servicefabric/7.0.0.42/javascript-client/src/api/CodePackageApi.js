/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerApiRequestBody from '../model/ContainerApiRequestBody';
import ContainerApiResponse from '../model/ContainerApiResponse';
import ContainerLogs from '../model/ContainerLogs';
import DeployedCodePackageInfo from '../model/DeployedCodePackageInfo';
import FabricError from '../model/FabricError';
import RestartDeployedCodePackageDescription from '../model/RestartDeployedCodePackageDescription';

/**
* CodePackage service.
* @module api/CodePackageApi
* @version 7.0.0.42
*/
export default class CodePackageApi {

    /**
    * Constructs a new CodePackageApi. 
    * @alias module:api/CodePackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContainerLogsDeployedOnNode operation.
     * @callback module:api/CodePackageApi~getContainerLogsDeployedOnNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the container logs for container deployed on a Service Fabric node.
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {String} serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {String} codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {Object} opts Optional parameters
     * @param {String} [tail] Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
     * @param {Boolean} [previous = false)] Specifies whether to get container logs from exited/dead containers of the code package instance.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/CodePackageApi~getContainerLogsDeployedOnNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerLogs}
     */
    getContainerLogsDeployedOnNode(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getContainerLogsDeployedOnNode");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling getContainerLogsDeployedOnNode");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getContainerLogsDeployedOnNode");
      }
      // verify the required parameter 'serviceManifestName' is set
      if (serviceManifestName === undefined || serviceManifestName === null) {
        throw new Error("Missing the required parameter 'serviceManifestName' when calling getContainerLogsDeployedOnNode");
      }
      // verify the required parameter 'codePackageName' is set
      if (codePackageName === undefined || codePackageName === null) {
        throw new Error("Missing the required parameter 'codePackageName' when calling getContainerLogsDeployedOnNode");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId
      };
      let queryParams = {
        'api-version': apiVersion,
        'ServiceManifestName': serviceManifestName,
        'CodePackageName': codePackageName,
        'Tail': opts['tail'],
        'Previous': opts['previous'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerLogs;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployedCodePackageInfoList operation.
     * @callback module:api/CodePackageApi~getDeployedCodePackageInfoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedCodePackageInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of code packages deployed on a Service Fabric node.
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {Object} opts Optional parameters
     * @param {String} [serviceManifestName] The name of a service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {String} [codePackageName] The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/CodePackageApi~getDeployedCodePackageInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedCodePackageInfo>}
     */
    getDeployedCodePackageInfoList(apiVersion, nodeName, applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeployedCodePackageInfoList");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling getDeployedCodePackageInfoList");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDeployedCodePackageInfoList");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId
      };
      let queryParams = {
        'api-version': apiVersion,
        'ServiceManifestName': opts['serviceManifestName'],
        'CodePackageName': opts['codePackageName'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedCodePackageInfo];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invokeContainerApi operation.
     * @callback module:api/CodePackageApi~invokeContainerApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoke container API on a container deployed on a Service Fabric node.
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {String} serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {String} codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {String} codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric node.
     * @param {module:model/ContainerApiRequestBody} containerApiRequestBody Parameters for making container API call
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/CodePackageApi~invokeContainerApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerApiResponse}
     */
    invokeContainerApi(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, codePackageInstanceId, containerApiRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = containerApiRequestBody;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling invokeContainerApi");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling invokeContainerApi");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling invokeContainerApi");
      }
      // verify the required parameter 'serviceManifestName' is set
      if (serviceManifestName === undefined || serviceManifestName === null) {
        throw new Error("Missing the required parameter 'serviceManifestName' when calling invokeContainerApi");
      }
      // verify the required parameter 'codePackageName' is set
      if (codePackageName === undefined || codePackageName === null) {
        throw new Error("Missing the required parameter 'codePackageName' when calling invokeContainerApi");
      }
      // verify the required parameter 'codePackageInstanceId' is set
      if (codePackageInstanceId === undefined || codePackageInstanceId === null) {
        throw new Error("Missing the required parameter 'codePackageInstanceId' when calling invokeContainerApi");
      }
      // verify the required parameter 'containerApiRequestBody' is set
      if (containerApiRequestBody === undefined || containerApiRequestBody === null) {
        throw new Error("Missing the required parameter 'containerApiRequestBody' when calling invokeContainerApi");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId
      };
      let queryParams = {
        'api-version': apiVersion,
        'ServiceManifestName': serviceManifestName,
        'CodePackageName': codePackageName,
        'CodePackageInstanceId': codePackageInstanceId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerApiResponse;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartDeployedCodePackage operation.
     * @callback module:api/CodePackageApi~restartDeployedCodePackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster.
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {module:model/RestartDeployedCodePackageDescription} restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to restart.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/CodePackageApi~restartDeployedCodePackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restartDeployedCodePackage(apiVersion, nodeName, applicationId, restartDeployedCodePackageDescription, opts, callback) {
      opts = opts || {};
      let postBody = restartDeployedCodePackageDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling restartDeployedCodePackage");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling restartDeployedCodePackage");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling restartDeployedCodePackage");
      }
      // verify the required parameter 'restartDeployedCodePackageDescription' is set
      if (restartDeployedCodePackageDescription === undefined || restartDeployedCodePackageDescription === null) {
        throw new Error("Missing the required parameter 'restartDeployedCodePackageDescription' when calling restartDeployedCodePackage");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
