/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerLogs from '../model/ContainerLogs';
import FabricError from '../model/FabricError';

/**
* MeshCodePackages service.
* @module api/MeshCodePackagesApi
* @version 7.0.0.42
*/
export default class MeshCodePackagesApi {

    /**
    * Constructs a new MeshCodePackagesApi. 
    * @alias module:api/MeshCodePackagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the meshCodePackageGetContainerLogs operation.
     * @callback module:api/MeshCodePackagesApi~meshCodePackageGetContainerLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logs from the container.
     * Gets the logs for the container of the specified code package of the service replica.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.4-preview'.
     * @param {String} applicationResourceName The identity of the application.
     * @param {String} serviceResourceName The identity of the service.
     * @param {String} replicaName Service Fabric replica name.
     * @param {String} codePackageName The name of code package of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [tail] Number of lines to show from the end of the logs. Default is 100. 'all' to show the complete logs.
     * @param {module:api/MeshCodePackagesApi~meshCodePackageGetContainerLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerLogs}
     */
    meshCodePackageGetContainerLogs(apiVersion, applicationResourceName, serviceResourceName, replicaName, codePackageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling meshCodePackageGetContainerLogs");
      }
      // verify the required parameter 'applicationResourceName' is set
      if (applicationResourceName === undefined || applicationResourceName === null) {
        throw new Error("Missing the required parameter 'applicationResourceName' when calling meshCodePackageGetContainerLogs");
      }
      // verify the required parameter 'serviceResourceName' is set
      if (serviceResourceName === undefined || serviceResourceName === null) {
        throw new Error("Missing the required parameter 'serviceResourceName' when calling meshCodePackageGetContainerLogs");
      }
      // verify the required parameter 'replicaName' is set
      if (replicaName === undefined || replicaName === null) {
        throw new Error("Missing the required parameter 'replicaName' when calling meshCodePackageGetContainerLogs");
      }
      // verify the required parameter 'codePackageName' is set
      if (codePackageName === undefined || codePackageName === null) {
        throw new Error("Missing the required parameter 'codePackageName' when calling meshCodePackageGetContainerLogs");
      }

      let pathParams = {
        'applicationResourceName': applicationResourceName,
        'serviceResourceName': serviceResourceName,
        'replicaName': replicaName,
        'codePackageName': codePackageName
      };
      let queryParams = {
        'api-version': apiVersion,
        'Tail': opts['tail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerLogs;
      return this.apiClient.callApi(
        '/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
