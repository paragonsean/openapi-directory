/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FabricError from '../model/FabricError';
import FolderSizeInfo from '../model/FolderSizeInfo';
import ImageStoreContent from '../model/ImageStoreContent';
import ImageStoreCopyDescription from '../model/ImageStoreCopyDescription';
import ImageStoreInfo from '../model/ImageStoreInfo';
import UploadSession from '../model/UploadSession';

/**
* ImageStore service.
* @module api/ImageStoreApi
* @version 7.0.0.42
*/
export default class ImageStoreApi {

    /**
    * Constructs a new ImageStoreApi. 
    * @alias module:api/ImageStoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commitImageStoreUploadSession operation.
     * @callback module:api/ImageStoreApi~commitImageStoreUploadSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit an image store upload session.
     * When all file chunks have been uploaded, the upload session needs to be committed explicitly to complete the upload. Image store preserves the upload session until the expiration time, which is 30 minutes after the last chunk received. 
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~commitImageStoreUploadSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commitImageStoreUploadSession(apiVersion, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling commitImageStoreUploadSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling commitImageStoreUploadSession");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'session-id': sessionId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/$/CommitUploadSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyImageStoreContent operation.
     * @callback module:api/ImageStoreApi~copyImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies image store content internally
     * Copies the image store content from the source image store relative path to the destination image store relative path.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {module:model/ImageStoreCopyDescription} imageStoreCopyDescription Describes the copy description for the image store.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~copyImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copyImageStoreContent(apiVersion, imageStoreCopyDescription, opts, callback) {
      opts = opts || {};
      let postBody = imageStoreCopyDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling copyImageStoreContent");
      }
      // verify the required parameter 'imageStoreCopyDescription' is set
      if (imageStoreCopyDescription === undefined || imageStoreCopyDescription === null) {
        throw new Error("Missing the required parameter 'imageStoreCopyDescription' when calling copyImageStoreContent");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/$/Copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageStoreContent operation.
     * @callback module:api/ImageStoreApi~deleteImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes existing image store content.
     * Deletes existing image store content being found within the given image store relative path. This command can be used to delete uploaded application packages once they are provisioned.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~deleteImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageStoreContent(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteImageStoreContent");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling deleteImageStoreContent");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageStoreUploadSession operation.
     * @callback module:api/ImageStoreApi~deleteImageStoreUploadSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels an image store upload session.
     * The DELETE request will cause the existing upload session to expire and remove any previously uploaded file chunks.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~deleteImageStoreUploadSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageStoreUploadSession(apiVersion, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteImageStoreUploadSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteImageStoreUploadSession");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'session-id': sessionId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/$/DeleteUploadSession', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreContent operation.
     * @callback module:api/ImageStoreApi~getImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageStoreContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the image store content information.
     * Returns the information about the image store content at the specified contentPath. The contentPath is relative to the root of the image store.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.2'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageStoreContent}
     */
    getImageStoreContent(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreContent");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling getImageStoreContent");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageStoreContent;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreFolderSize operation.
     * @callback module:api/ImageStoreApi~getImageStoreFolderSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FolderSizeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the size of a folder in image store
     * Gets the total size of file under a image store folder, specified by contentPath. The contentPath is relative to the root of the image store.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.5'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreFolderSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FolderSizeInfo}
     */
    getImageStoreFolderSize(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreFolderSize");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling getImageStoreFolderSize");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FolderSizeInfo;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}/$/FolderSize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreInfo operation.
     * @callback module:api/ImageStoreApi~getImageStoreInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the overall ImageStore information
     * Returns information about the primary ImageStore replica, such as disk capacity and available disk space at the node it is on, and several categories of the ImageStore's file system usage.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.5'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageStoreInfo}
     */
    getImageStoreInfo(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageStoreInfo;
      return this.apiClient.callApi(
        '/ImageStore/$/Info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreRootContent operation.
     * @callback module:api/ImageStoreApi~getImageStoreRootContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageStoreContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content information at the root of the image store.
     * Returns the information about the image store content at the root of the image store.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreRootContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageStoreContent}
     */
    getImageStoreRootContent(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreRootContent");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageStoreContent;
      return this.apiClient.callApi(
        '/ImageStore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreRootFolderSize operation.
     * @callback module:api/ImageStoreApi~getImageStoreRootFolderSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FolderSizeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the folder size at the root of the image store.
     * Returns the total size of files at the root and children folders in image store.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.5'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreRootFolderSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FolderSizeInfo}
     */
    getImageStoreRootFolderSize(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreRootFolderSize");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FolderSizeInfo;
      return this.apiClient.callApi(
        '/ImageStore/$/FolderSize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreUploadSessionById operation.
     * @callback module:api/ImageStoreApi~getImageStoreUploadSessionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the image store upload session by ID.
     * Gets the image store upload session identified by the given ID. User can query the upload session at any time during uploading. 
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreUploadSessionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadSession}
     */
    getImageStoreUploadSessionById(apiVersion, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreUploadSessionById");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getImageStoreUploadSessionById");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'session-id': sessionId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadSession;
      return this.apiClient.callApi(
        '/ImageStore/$/GetUploadSession', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreUploadSessionByPath operation.
     * @callback module:api/ImageStoreApi~getImageStoreUploadSessionByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the image store upload session by relative path.
     * Gets the image store upload session associated with the given image store relative path. User can query the upload session at any time during uploading. 
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreUploadSessionByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadSession}
     */
    getImageStoreUploadSessionByPath(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreUploadSessionByPath");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling getImageStoreUploadSessionByPath");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadSession;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}/$/GetUploadSession', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/ImageStoreApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads contents of the file to the image store.
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named \"_.dir\". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadFile(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling uploadFile");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling uploadFile");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileChunk operation.
     * @callback module:api/ImageStoreApi~uploadFileChunkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a file chunk to the image store relative path.
     * Uploads a file chunk to the image store with the specified upload session ID and image store relative path. This API allows user to resume the file upload operation. user doesn't have to restart the file upload from scratch whenever there is a network interruption. Use this option if the file size is large.  To perform a resumable file upload, user need to break the file into multiple chunks and upload these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the file represented by the image store relative path already exists, it will be overwritten when the upload session commits.
     * @param {module:model/String} apiVersion The version of the API. This parameter is required and its value must be '6.0'.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version.
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {String} sessionId A GUID generated by the user for a file uploading. It identifies an image store upload session which keeps track of all file chunks until it is committed.
     * @param {String} contentRange When uploading file chunks to the image store, the Content-Range header field need to be configured and sent with a request. The format should looks like \"bytes {First-Byte-Position}-{Last-Byte-Position}/{File-Length}\". For example, Content-Range:bytes 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length is 20,000 bytes.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~uploadFileChunkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadFileChunk(apiVersion, contentPath, sessionId, contentRange, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling uploadFileChunk");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling uploadFileChunk");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling uploadFileChunk");
      }
      // verify the required parameter 'contentRange' is set
      if (contentRange === undefined || contentRange === null) {
        throw new Error("Missing the required parameter 'contentRange' when calling uploadFileChunk");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'session-id': sessionId,
        'timeout': opts['timeout']
      };
      let headerParams = {
        'Content-Range': contentRange
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}/$/UploadChunk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
