/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoveCost from './MoveCost';
import ScalingPolicyDescription from './ScalingPolicyDescription';
import ServiceCorrelationDescription from './ServiceCorrelationDescription';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServiceUpdateDescription from './ServiceUpdateDescription';

/**
 * The StatelessServiceUpdateDescription model module.
 * @module model/StatelessServiceUpdateDescription
 * @version 7.0.0.42
 */
class StatelessServiceUpdateDescription {
    /**
     * Constructs a new <code>StatelessServiceUpdateDescription</code>.
     * Describes an update for a stateless service.
     * @alias module:model/StatelessServiceUpdateDescription
     * @extends module:model/ServiceUpdateDescription
     * @implements module:model/ServiceUpdateDescription
     * @param serviceKind {module:model/ServiceKind} 
     */
    constructor(serviceKind) { 
        ServiceUpdateDescription.initialize(this, serviceKind);
        StatelessServiceUpdateDescription.initialize(this, serviceKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceKind) { 
        obj['MinInstanceCount'] = 1;
        obj['MinInstancePercentage'] = 0;
    }

    /**
     * Constructs a <code>StatelessServiceUpdateDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatelessServiceUpdateDescription} obj Optional instance to populate.
     * @return {module:model/StatelessServiceUpdateDescription} The populated <code>StatelessServiceUpdateDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatelessServiceUpdateDescription();
            ServiceUpdateDescription.constructFromObject(data, obj);
            ServiceUpdateDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('InstanceCloseDelayDurationSeconds')) {
                obj['InstanceCloseDelayDurationSeconds'] = ApiClient.convertToType(data['InstanceCloseDelayDurationSeconds'], 'String');
            }
            if (data.hasOwnProperty('InstanceCount')) {
                obj['InstanceCount'] = ApiClient.convertToType(data['InstanceCount'], 'Number');
            }
            if (data.hasOwnProperty('MinInstanceCount')) {
                obj['MinInstanceCount'] = ApiClient.convertToType(data['MinInstanceCount'], 'Number');
            }
            if (data.hasOwnProperty('MinInstancePercentage')) {
                obj['MinInstancePercentage'] = ApiClient.convertToType(data['MinInstancePercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatelessServiceUpdateDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatelessServiceUpdateDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatelessServiceUpdateDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['InstanceCloseDelayDurationSeconds'] && !(typeof data['InstanceCloseDelayDurationSeconds'] === 'string' || data['InstanceCloseDelayDurationSeconds'] instanceof String)) {
            throw new Error("Expected the field `InstanceCloseDelayDurationSeconds` to be a primitive type in the JSON string but got " + data['InstanceCloseDelayDurationSeconds']);
        }

        return true;
    }


}

StatelessServiceUpdateDescription.RequiredProperties = ["ServiceKind"];

/**
 * Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade and disabling node. The endpoint exposed on this instance is removed prior to starting the delay, which prevents new connections to this instance. In addition, clients that have subscribed to service endpoint change events(https://docs.microsoft.com/en-us/dotnet/api/system.fabric.fabricclient.servicemanagementclient.registerservicenotificationfilterasync), can do the following upon receiving the endpoint removal notification:     - Stop sending new requests to this instance.     - Close existing connections after in-flight requests have completed.     - Connect to a different instance of the service partition for future requests.
 * @member {String} InstanceCloseDelayDurationSeconds
 */
StatelessServiceUpdateDescription.prototype['InstanceCloseDelayDurationSeconds'] = undefined;

/**
 * The instance count.
 * @member {Number} InstanceCount
 */
StatelessServiceUpdateDescription.prototype['InstanceCount'] = undefined;

/**
 * MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
 * @member {Number} MinInstanceCount
 * @default 1
 */
StatelessServiceUpdateDescription.prototype['MinInstanceCount'] = 1;

/**
 * MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
 * @member {Number} MinInstancePercentage
 * @default 0
 */
StatelessServiceUpdateDescription.prototype['MinInstancePercentage'] = 0;


// Implement ServiceUpdateDescription interface:
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServiceCorrelationDescription>} CorrelationScheme
 */
ServiceUpdateDescription.prototype['CorrelationScheme'] = undefined;
/**
 * @member {module:model/MoveCost} DefaultMoveCost
 */
ServiceUpdateDescription.prototype['DefaultMoveCost'] = undefined;
/**
 * Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.  - None - Does not indicate any other properties are set. The value is zero. - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8. - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16. - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32. - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64. - Correlation - Indicates the CorrelationScheme property is set. The value is 128. - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256. - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512. - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024. - ServicePlacementTimeLimit - Indicates the ServicePlacementTimeLimit property is set. The value is 2048. - MinInstanceCount - Indicates the MinInstanceCount property is set. The value is 4096. - MinInstancePercentage - Indicates the MinInstancePercentage property is set. The value is 8192. - InstanceCloseDelayDuration - Indicates the InstanceCloseDelayDuration property is set. The value is 16384.
 * @member {String} Flags
 */
ServiceUpdateDescription.prototype['Flags'] = undefined;
/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} LoadMetrics
 */
ServiceUpdateDescription.prototype['LoadMetrics'] = undefined;
/**
 * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".
 * @member {String} PlacementConstraints
 */
ServiceUpdateDescription.prototype['PlacementConstraints'] = undefined;
/**
 * A list that describes the scaling policies.
 * @member {Array.<module:model/ScalingPolicyDescription>} ScalingPolicies
 */
ServiceUpdateDescription.prototype['ScalingPolicies'] = undefined;
/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ServiceUpdateDescription.prototype['ServiceKind'] = undefined;
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} ServicePlacementPolicies
 */
ServiceUpdateDescription.prototype['ServicePlacementPolicies'] = undefined;




export default StatelessServiceUpdateDescription;

