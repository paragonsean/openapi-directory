/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionHealthStateFilter from './PartitionHealthStateFilter';

/**
 * The ServiceHealthStateFilter model module.
 * @module model/ServiceHealthStateFilter
 * @version 7.0.0.42
 */
class ServiceHealthStateFilter {
    /**
     * Constructs a new <code>ServiceHealthStateFilter</code>.
     * Defines matching criteria to determine whether a service should be included as a child of an application in the cluster health chunk. The services are only returned if the parent application matches a filter specified in the cluster health chunk query description. One filter can match zero, one or multiple services, depending on its properties.
     * @alias module:model/ServiceHealthStateFilter
     */
    constructor() { 
        
        ServiceHealthStateFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceHealthStateFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceHealthStateFilter} obj Optional instance to populate.
     * @return {module:model/ServiceHealthStateFilter} The populated <code>ServiceHealthStateFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceHealthStateFilter();

            if (data.hasOwnProperty('HealthStateFilter')) {
                obj['HealthStateFilter'] = ApiClient.convertToType(data['HealthStateFilter'], 'Number');
            }
            if (data.hasOwnProperty('PartitionFilters')) {
                obj['PartitionFilters'] = ApiClient.convertToType(data['PartitionFilters'], [PartitionHealthStateFilter]);
            }
            if (data.hasOwnProperty('ServiceNameFilter')) {
                obj['ServiceNameFilter'] = ApiClient.convertToType(data['ServiceNameFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceHealthStateFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceHealthStateFilter</code>.
     */
    static validateJSON(data) {
        if (data['PartitionFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PartitionFilters'])) {
                throw new Error("Expected the field `PartitionFilters` to be an array in the JSON data but got " + data['PartitionFilters']);
            }
            // validate the optional field `PartitionFilters` (array)
            for (const item of data['PartitionFilters']) {
                PartitionHealthStateFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceNameFilter'] && !(typeof data['ServiceNameFilter'] === 'string' || data['ServiceNameFilter'] instanceof String)) {
            throw new Error("Expected the field `ServiceNameFilter` to be a primitive type in the JSON string but got " + data['ServiceNameFilter']);
        }

        return true;
    }


}



/**
 * The filter for the health state of the services. It allows selecting services if they match the desired health states. The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
 * @member {Number} HealthStateFilter
 */
ServiceHealthStateFilter.prototype['HealthStateFilter'] = undefined;

/**
 * Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter. If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters. The service filter may specify multiple partition filters. For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID.
 * @member {Array.<module:model/PartitionHealthStateFilter>} PartitionFilters
 */
ServiceHealthStateFilter.prototype['PartitionFilters'] = undefined;

/**
 * The name of the service that matches the filter. The filter is applied only to the specified service, if it exists. If the service doesn't exist, no service is returned in the cluster health chunk based on this filter. If the service exists, it is included as the application's child if the health state matches the other filter properties. If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
 * @member {String} ServiceNameFilter
 */
ServiceHealthStateFilter.prototype['ServiceNameFilter'] = undefined;






export default ServiceHealthStateFilter;

