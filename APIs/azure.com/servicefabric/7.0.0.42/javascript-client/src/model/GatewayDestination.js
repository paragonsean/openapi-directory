/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GatewayDestination model module.
 * @module model/GatewayDestination
 * @version 7.0.0.42
 */
class GatewayDestination {
    /**
     * Constructs a new <code>GatewayDestination</code>.
     * Describes destination endpoint for routing traffic.
     * @alias module:model/GatewayDestination
     * @param applicationName {String} Name of the service fabric Mesh application.
     * @param endpointName {String} name of the endpoint in the service.
     * @param serviceName {String} service that contains the endpoint.
     */
    constructor(applicationName, endpointName, serviceName) { 
        
        GatewayDestination.initialize(this, applicationName, endpointName, serviceName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationName, endpointName, serviceName) { 
        obj['applicationName'] = applicationName;
        obj['endpointName'] = endpointName;
        obj['serviceName'] = serviceName;
    }

    /**
     * Constructs a <code>GatewayDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayDestination} obj Optional instance to populate.
     * @return {module:model/GatewayDestination} The populated <code>GatewayDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayDestination();

            if (data.hasOwnProperty('applicationName')) {
                obj['applicationName'] = ApiClient.convertToType(data['applicationName'], 'String');
            }
            if (data.hasOwnProperty('endpointName')) {
                obj['endpointName'] = ApiClient.convertToType(data['endpointName'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GatewayDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GatewayDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationName'] && !(typeof data['applicationName'] === 'string' || data['applicationName'] instanceof String)) {
            throw new Error("Expected the field `applicationName` to be a primitive type in the JSON string but got " + data['applicationName']);
        }
        // ensure the json data is a string
        if (data['endpointName'] && !(typeof data['endpointName'] === 'string' || data['endpointName'] instanceof String)) {
            throw new Error("Expected the field `endpointName` to be a primitive type in the JSON string but got " + data['endpointName']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }

        return true;
    }


}

GatewayDestination.RequiredProperties = ["applicationName", "endpointName", "serviceName"];

/**
 * Name of the service fabric Mesh application.
 * @member {String} applicationName
 */
GatewayDestination.prototype['applicationName'] = undefined;

/**
 * name of the endpoint in the service.
 * @member {String} endpointName
 */
GatewayDestination.prototype['endpointName'] = undefined;

/**
 * service that contains the endpoint.
 * @member {String} serviceName
 */
GatewayDestination.prototype['serviceName'] = undefined;






export default GatewayDestination;

