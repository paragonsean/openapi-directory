/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyBatchOperation from './PropertyBatchOperation';
import PropertyBatchOperationKind from './PropertyBatchOperationKind';
import PropertyValue from './PropertyValue';

/**
 * The PutPropertyBatchOperation model module.
 * @module model/PutPropertyBatchOperation
 * @version 7.0.0.42
 */
class PutPropertyBatchOperation {
    /**
     * Constructs a new <code>PutPropertyBatchOperation</code>.
     * Puts the specified property under the specified name. Note that if one PropertyBatchOperation in a PropertyBatch fails, the entire batch fails and cannot be committed in a transactional manner.
     * @alias module:model/PutPropertyBatchOperation
     * @extends module:model/PropertyBatchOperation
     * @implements module:model/PropertyBatchOperation
     * @param kind {module:model/PropertyBatchOperationKind} 
     * @param propertyName {String} The name of the Service Fabric property.
     */
    constructor(kind, propertyName) { 
        PropertyBatchOperation.initialize(this, kind, propertyName);
        PutPropertyBatchOperation.initialize(this, kind, propertyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, propertyName) { 
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>PutPropertyBatchOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutPropertyBatchOperation} obj Optional instance to populate.
     * @return {module:model/PutPropertyBatchOperation} The populated <code>PutPropertyBatchOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutPropertyBatchOperation();
            PropertyBatchOperation.constructFromObject(data, obj);
            PropertyBatchOperation.constructFromObject(data, obj);

            if (data.hasOwnProperty('CustomTypeId')) {
                obj['CustomTypeId'] = ApiClient.convertToType(data['CustomTypeId'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = PropertyValue.constructFromObject(data['Value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutPropertyBatchOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutPropertyBatchOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutPropertyBatchOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CustomTypeId'] && !(typeof data['CustomTypeId'] === 'string' || data['CustomTypeId'] instanceof String)) {
            throw new Error("Expected the field `CustomTypeId` to be a primitive type in the JSON string but got " + data['CustomTypeId']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          PropertyValue.validateJSON(data['Value']);
        }

        return true;
    }


}

PutPropertyBatchOperation.RequiredProperties = ["Value", "Kind", "PropertyName"];

/**
 * The property's custom type ID. Using this property, the user is able to tag the type of the value of the property.
 * @member {String} CustomTypeId
 */
PutPropertyBatchOperation.prototype['CustomTypeId'] = undefined;

/**
 * @member {module:model/PropertyValue} Value
 */
PutPropertyBatchOperation.prototype['Value'] = undefined;


// Implement PropertyBatchOperation interface:
/**
 * @member {module:model/PropertyBatchOperationKind} Kind
 */
PropertyBatchOperation.prototype['Kind'] = undefined;
/**
 * The name of the Service Fabric property.
 * @member {String} PropertyName
 */
PropertyBatchOperation.prototype['PropertyName'] = undefined;




export default PutPropertyBatchOperation;

