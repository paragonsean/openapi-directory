/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicies from './ApplicationHealthPolicies';
import ApplicationHealthStateFilter from './ApplicationHealthStateFilter';
import ClusterHealthPolicy from './ClusterHealthPolicy';
import NodeHealthStateFilter from './NodeHealthStateFilter';

/**
 * The ClusterHealthChunkQueryDescription model module.
 * @module model/ClusterHealthChunkQueryDescription
 * @version 7.0.0.42
 */
class ClusterHealthChunkQueryDescription {
    /**
     * Constructs a new <code>ClusterHealthChunkQueryDescription</code>.
     * The cluster health chunk query description, which can specify the health policies to evaluate cluster health and very expressive filters to select which cluster entities to include in response.
     * @alias module:model/ClusterHealthChunkQueryDescription
     */
    constructor() { 
        
        ClusterHealthChunkQueryDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterHealthChunkQueryDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterHealthChunkQueryDescription} obj Optional instance to populate.
     * @return {module:model/ClusterHealthChunkQueryDescription} The populated <code>ClusterHealthChunkQueryDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterHealthChunkQueryDescription();

            if (data.hasOwnProperty('ApplicationFilters')) {
                obj['ApplicationFilters'] = ApiClient.convertToType(data['ApplicationFilters'], [ApplicationHealthStateFilter]);
            }
            if (data.hasOwnProperty('ApplicationHealthPolicies')) {
                obj['ApplicationHealthPolicies'] = ApplicationHealthPolicies.constructFromObject(data['ApplicationHealthPolicies']);
            }
            if (data.hasOwnProperty('ClusterHealthPolicy')) {
                obj['ClusterHealthPolicy'] = ClusterHealthPolicy.constructFromObject(data['ClusterHealthPolicy']);
            }
            if (data.hasOwnProperty('NodeFilters')) {
                obj['NodeFilters'] = ApiClient.convertToType(data['NodeFilters'], [NodeHealthStateFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterHealthChunkQueryDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterHealthChunkQueryDescription</code>.
     */
    static validateJSON(data) {
        if (data['ApplicationFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ApplicationFilters'])) {
                throw new Error("Expected the field `ApplicationFilters` to be an array in the JSON data but got " + data['ApplicationFilters']);
            }
            // validate the optional field `ApplicationFilters` (array)
            for (const item of data['ApplicationFilters']) {
                ApplicationHealthStateFilter.validateJSON(item);
            };
        }
        // validate the optional field `ApplicationHealthPolicies`
        if (data['ApplicationHealthPolicies']) { // data not null
          ApplicationHealthPolicies.validateJSON(data['ApplicationHealthPolicies']);
        }
        // validate the optional field `ClusterHealthPolicy`
        if (data['ClusterHealthPolicy']) { // data not null
          ClusterHealthPolicy.validateJSON(data['ClusterHealthPolicy']);
        }
        if (data['NodeFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NodeFilters'])) {
                throw new Error("Expected the field `NodeFilters` to be an array in the JSON data but got " + data['NodeFilters']);
            }
            // validate the optional field `NodeFilters` (array)
            for (const item of data['NodeFilters']) {
                NodeHealthStateFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Defines a list of filters that specify which applications to be included in the returned cluster health chunk. If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple application filters. For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.
 * @member {Array.<module:model/ApplicationHealthStateFilter>} ApplicationFilters
 */
ClusterHealthChunkQueryDescription.prototype['ApplicationFilters'] = undefined;

/**
 * @member {module:model/ApplicationHealthPolicies} ApplicationHealthPolicies
 */
ClusterHealthChunkQueryDescription.prototype['ApplicationHealthPolicies'] = undefined;

/**
 * @member {module:model/ClusterHealthPolicy} ClusterHealthPolicy
 */
ClusterHealthChunkQueryDescription.prototype['ClusterHealthPolicy'] = undefined;

/**
 * Defines a list of filters that specify which nodes to be included in the returned cluster health chunk. If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple node filters. For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.
 * @member {Array.<module:model/NodeHealthStateFilter>} NodeFilters
 */
ClusterHealthChunkQueryDescription.prototype['NodeFilters'] = undefined;






export default ClusterHealthChunkQueryDescription;

