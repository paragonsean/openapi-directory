/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentityItemDescription from './IdentityItemDescription';

/**
 * The IdentityDescription model module.
 * @module model/IdentityDescription
 * @version 7.0.0.42
 */
class IdentityDescription {
    /**
     * Constructs a new <code>IdentityDescription</code>.
     * Information describing the identities associated with this application.
     * @alias module:model/IdentityDescription
     * @param type {String} the types of identities associated with this resource; currently restricted to 'SystemAssigned and UserAssigned'
     */
    constructor(type) { 
        
        IdentityDescription.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>IdentityDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityDescription} obj Optional instance to populate.
     * @return {module:model/IdentityDescription} The populated <code>IdentityDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityDescription();

            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tokenServiceEndpoint')) {
                obj['tokenServiceEndpoint'] = ApiClient.convertToType(data['tokenServiceEndpoint'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userAssignedIdentities')) {
                obj['userAssignedIdentities'] = ApiClient.convertToType(data['userAssignedIdentities'], {'String': IdentityItemDescription});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['tokenServiceEndpoint'] && !(typeof data['tokenServiceEndpoint'] === 'string' || data['tokenServiceEndpoint'] instanceof String)) {
            throw new Error("Expected the field `tokenServiceEndpoint` to be a primitive type in the JSON string but got " + data['tokenServiceEndpoint']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

IdentityDescription.RequiredProperties = ["type"];

/**
 * the object identifier of the Service Principal of the identity associated with this resource.
 * @member {String} principalId
 */
IdentityDescription.prototype['principalId'] = undefined;

/**
 * the identifier of the tenant containing the application's identity.
 * @member {String} tenantId
 */
IdentityDescription.prototype['tenantId'] = undefined;

/**
 * the endpoint for the token service managing this identity
 * @member {String} tokenServiceEndpoint
 */
IdentityDescription.prototype['tokenServiceEndpoint'] = undefined;

/**
 * the types of identities associated with this resource; currently restricted to 'SystemAssigned and UserAssigned'
 * @member {String} type
 */
IdentityDescription.prototype['type'] = undefined;

/**
 * Defines a map that contains user assigned identities.
 * @member {Object.<String, module:model/IdentityItemDescription>} userAssignedIdentities
 */
IdentityDescription.prototype['userAssignedIdentities'] = undefined;






export default IdentityDescription;

