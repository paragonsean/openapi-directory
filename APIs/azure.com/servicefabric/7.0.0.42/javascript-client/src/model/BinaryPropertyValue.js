/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyValue from './PropertyValue';
import PropertyValueKind from './PropertyValueKind';

/**
 * The BinaryPropertyValue model module.
 * @module model/BinaryPropertyValue
 * @version 7.0.0.42
 */
class BinaryPropertyValue {
    /**
     * Constructs a new <code>BinaryPropertyValue</code>.
     * Describes a Service Fabric property value of type Binary.
     * @alias module:model/BinaryPropertyValue
     * @extends module:model/PropertyValue
     * @implements module:model/PropertyValue
     * @param kind {module:model/PropertyValueKind} 
     */
    constructor(kind) { 
        PropertyValue.initialize(this, kind);
        BinaryPropertyValue.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
        obj['Data'] = data;
    }

    /**
     * Constructs a <code>BinaryPropertyValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BinaryPropertyValue} obj Optional instance to populate.
     * @return {module:model/BinaryPropertyValue} The populated <code>BinaryPropertyValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BinaryPropertyValue();
            PropertyValue.constructFromObject(data, obj);
            PropertyValue.constructFromObject(data, obj);

            if (data.hasOwnProperty('Data')) {
                obj['Data'] = ApiClient.convertToType(data['Data'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BinaryPropertyValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BinaryPropertyValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BinaryPropertyValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Data'])) {
            throw new Error("Expected the field `Data` to be an array in the JSON data but got " + data['Data']);
        }

        return true;
    }


}

BinaryPropertyValue.RequiredProperties = ["Data", "Kind"];

/**
 * Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
 * @member {Array.<Number>} Data
 */
BinaryPropertyValue.prototype['Data'] = undefined;


// Implement PropertyValue interface:
/**
 * @member {module:model/PropertyValueKind} Kind
 */
PropertyValue.prototype['Kind'] = undefined;




export default BinaryPropertyValue;

