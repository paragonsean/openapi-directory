/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeUpgradePhase from './NodeUpgradePhase';
import SafetyCheckWrapper from './SafetyCheckWrapper';

/**
 * The NodeUpgradeProgressInfo model module.
 * @module model/NodeUpgradeProgressInfo
 * @version 7.0.0.42
 */
class NodeUpgradeProgressInfo {
    /**
     * Constructs a new <code>NodeUpgradeProgressInfo</code>.
     * Information about the upgrading node and its status
     * @alias module:model/NodeUpgradeProgressInfo
     */
    constructor() { 
        
        NodeUpgradeProgressInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeUpgradeProgressInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeUpgradeProgressInfo} obj Optional instance to populate.
     * @return {module:model/NodeUpgradeProgressInfo} The populated <code>NodeUpgradeProgressInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeUpgradeProgressInfo();

            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('PendingSafetyChecks')) {
                obj['PendingSafetyChecks'] = ApiClient.convertToType(data['PendingSafetyChecks'], [SafetyCheckWrapper]);
            }
            if (data.hasOwnProperty('UpgradePhase')) {
                obj['UpgradePhase'] = NodeUpgradePhase.constructFromObject(data['UpgradePhase']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeUpgradeProgressInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeUpgradeProgressInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }
        if (data['PendingSafetyChecks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PendingSafetyChecks'])) {
                throw new Error("Expected the field `PendingSafetyChecks` to be an array in the JSON data but got " + data['PendingSafetyChecks']);
            }
            // validate the optional field `PendingSafetyChecks` (array)
            for (const item of data['PendingSafetyChecks']) {
                SafetyCheckWrapper.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
NodeUpgradeProgressInfo.prototype['NodeName'] = undefined;

/**
 * List of pending safety checks
 * @member {Array.<module:model/SafetyCheckWrapper>} PendingSafetyChecks
 */
NodeUpgradeProgressInfo.prototype['PendingSafetyChecks'] = undefined;

/**
 * @member {module:model/NodeUpgradePhase} UpgradePhase
 */
NodeUpgradeProgressInfo.prototype['UpgradePhase'] = undefined;






export default NodeUpgradeProgressInfo;

