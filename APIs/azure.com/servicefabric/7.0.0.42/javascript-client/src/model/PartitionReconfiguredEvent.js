/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FabricEventKind from './FabricEventKind';
import PartitionEvent from './PartitionEvent';

/**
 * The PartitionReconfiguredEvent model module.
 * @module model/PartitionReconfiguredEvent
 * @version 7.0.0.42
 */
class PartitionReconfiguredEvent {
    /**
     * Constructs a new <code>PartitionReconfiguredEvent</code>.
     * Partition Reconfiguration event.
     * @alias module:model/PartitionReconfiguredEvent
     * @extends module:model/PartitionEvent
     * @implements module:model/PartitionEvent
     * @param partitionId {String} An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     */
    constructor(partitionId, eventInstanceId, kind, timeStamp) { 
        PartitionEvent.initialize(this, eventInstanceId, kind, timeStamp);
        PartitionReconfiguredEvent.initialize(this, partitionId, eventInstanceId, kind, timeStamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionId, eventInstanceId, kind, timeStamp) { 
        obj['CcEpochConfigVersion'] = ccEpochConfigVersion;
        obj['CcEpochDataLossVersion'] = ccEpochDataLossVersion;
        obj['NodeInstanceId'] = nodeInstanceId;
        obj['NodeName'] = nodeName;
        obj['Phase0DurationMs'] = phase0DurationMs;
        obj['Phase1DurationMs'] = phase1DurationMs;
        obj['Phase2DurationMs'] = phase2DurationMs;
        obj['Phase3DurationMs'] = phase3DurationMs;
        obj['Phase4DurationMs'] = phase4DurationMs;
        obj['ReconfigType'] = reconfigType;
        obj['Result'] = result;
        obj['ServiceType'] = serviceType;
        obj['TotalDurationMs'] = totalDurationMs;
    }

    /**
     * Constructs a <code>PartitionReconfiguredEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionReconfiguredEvent} obj Optional instance to populate.
     * @return {module:model/PartitionReconfiguredEvent} The populated <code>PartitionReconfiguredEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionReconfiguredEvent();
            PartitionEvent.constructFromObject(data, obj);
            PartitionEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('CcEpochConfigVersion')) {
                obj['CcEpochConfigVersion'] = ApiClient.convertToType(data['CcEpochConfigVersion'], 'Number');
            }
            if (data.hasOwnProperty('CcEpochDataLossVersion')) {
                obj['CcEpochDataLossVersion'] = ApiClient.convertToType(data['CcEpochDataLossVersion'], 'Number');
            }
            if (data.hasOwnProperty('NodeInstanceId')) {
                obj['NodeInstanceId'] = ApiClient.convertToType(data['NodeInstanceId'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('Phase0DurationMs')) {
                obj['Phase0DurationMs'] = ApiClient.convertToType(data['Phase0DurationMs'], 'Number');
            }
            if (data.hasOwnProperty('Phase1DurationMs')) {
                obj['Phase1DurationMs'] = ApiClient.convertToType(data['Phase1DurationMs'], 'Number');
            }
            if (data.hasOwnProperty('Phase2DurationMs')) {
                obj['Phase2DurationMs'] = ApiClient.convertToType(data['Phase2DurationMs'], 'Number');
            }
            if (data.hasOwnProperty('Phase3DurationMs')) {
                obj['Phase3DurationMs'] = ApiClient.convertToType(data['Phase3DurationMs'], 'Number');
            }
            if (data.hasOwnProperty('Phase4DurationMs')) {
                obj['Phase4DurationMs'] = ApiClient.convertToType(data['Phase4DurationMs'], 'Number');
            }
            if (data.hasOwnProperty('ReconfigType')) {
                obj['ReconfigType'] = ApiClient.convertToType(data['ReconfigType'], 'String');
            }
            if (data.hasOwnProperty('Result')) {
                obj['Result'] = ApiClient.convertToType(data['Result'], 'String');
            }
            if (data.hasOwnProperty('ServiceType')) {
                obj['ServiceType'] = ApiClient.convertToType(data['ServiceType'], 'String');
            }
            if (data.hasOwnProperty('TotalDurationMs')) {
                obj['TotalDurationMs'] = ApiClient.convertToType(data['TotalDurationMs'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionReconfiguredEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionReconfiguredEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PartitionReconfiguredEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['NodeInstanceId'] && !(typeof data['NodeInstanceId'] === 'string' || data['NodeInstanceId'] instanceof String)) {
            throw new Error("Expected the field `NodeInstanceId` to be a primitive type in the JSON string but got " + data['NodeInstanceId']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }
        // ensure the json data is a string
        if (data['ReconfigType'] && !(typeof data['ReconfigType'] === 'string' || data['ReconfigType'] instanceof String)) {
            throw new Error("Expected the field `ReconfigType` to be a primitive type in the JSON string but got " + data['ReconfigType']);
        }
        // ensure the json data is a string
        if (data['Result'] && !(typeof data['Result'] === 'string' || data['Result'] instanceof String)) {
            throw new Error("Expected the field `Result` to be a primitive type in the JSON string but got " + data['Result']);
        }
        // ensure the json data is a string
        if (data['ServiceType'] && !(typeof data['ServiceType'] === 'string' || data['ServiceType'] instanceof String)) {
            throw new Error("Expected the field `ServiceType` to be a primitive type in the JSON string but got " + data['ServiceType']);
        }

        return true;
    }


}

PartitionReconfiguredEvent.RequiredProperties = ["CcEpochConfigVersion", "CcEpochDataLossVersion", "NodeInstanceId", "NodeName", "Phase0DurationMs", "Phase1DurationMs", "Phase2DurationMs", "Phase3DurationMs", "Phase4DurationMs", "ReconfigType", "Result", "ServiceType", "TotalDurationMs", "PartitionId", "EventInstanceId", "Kind", "TimeStamp"];

/**
 * CcEpochConfig version.
 * @member {Number} CcEpochConfigVersion
 */
PartitionReconfiguredEvent.prototype['CcEpochConfigVersion'] = undefined;

/**
 * CcEpochDataLoss version.
 * @member {Number} CcEpochDataLossVersion
 */
PartitionReconfiguredEvent.prototype['CcEpochDataLossVersion'] = undefined;

/**
 * Id of Node instance.
 * @member {String} NodeInstanceId
 */
PartitionReconfiguredEvent.prototype['NodeInstanceId'] = undefined;

/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
PartitionReconfiguredEvent.prototype['NodeName'] = undefined;

/**
 * Duration of Phase0 in milli-seconds.
 * @member {Number} Phase0DurationMs
 */
PartitionReconfiguredEvent.prototype['Phase0DurationMs'] = undefined;

/**
 * Duration of Phase1 in milli-seconds.
 * @member {Number} Phase1DurationMs
 */
PartitionReconfiguredEvent.prototype['Phase1DurationMs'] = undefined;

/**
 * Duration of Phase2 in milli-seconds.
 * @member {Number} Phase2DurationMs
 */
PartitionReconfiguredEvent.prototype['Phase2DurationMs'] = undefined;

/**
 * Duration of Phase3 in milli-seconds.
 * @member {Number} Phase3DurationMs
 */
PartitionReconfiguredEvent.prototype['Phase3DurationMs'] = undefined;

/**
 * Duration of Phase4 in milli-seconds.
 * @member {Number} Phase4DurationMs
 */
PartitionReconfiguredEvent.prototype['Phase4DurationMs'] = undefined;

/**
 * Type of reconfiguration.
 * @member {String} ReconfigType
 */
PartitionReconfiguredEvent.prototype['ReconfigType'] = undefined;

/**
 * Describes reconfiguration result.
 * @member {String} Result
 */
PartitionReconfiguredEvent.prototype['Result'] = undefined;

/**
 * Type of Service.
 * @member {String} ServiceType
 */
PartitionReconfiguredEvent.prototype['ServiceType'] = undefined;

/**
 * Total duration in milli-seconds.
 * @member {Number} TotalDurationMs
 */
PartitionReconfiguredEvent.prototype['TotalDurationMs'] = undefined;


// Implement PartitionEvent interface:
/**
 * The category of event.
 * @member {String} Category
 */
PartitionEvent.prototype['Category'] = undefined;
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
PartitionEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
PartitionEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
PartitionEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
PartitionEvent.prototype['TimeStamp'] = undefined;




export default PartitionReconfiguredEvent;

