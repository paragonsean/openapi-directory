/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterEvent from './ClusterEvent';
import FabricEventKind from './FabricEventKind';

/**
 * The ClusterUpgradeDomainCompletedEvent model module.
 * @module model/ClusterUpgradeDomainCompletedEvent
 * @version 7.0.0.42
 */
class ClusterUpgradeDomainCompletedEvent {
    /**
     * Constructs a new <code>ClusterUpgradeDomainCompletedEvent</code>.
     * Cluster Upgrade Domain Completed event.
     * @alias module:model/ClusterUpgradeDomainCompletedEvent
     * @extends module:model/ClusterEvent
     * @implements module:model/ClusterEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     */
    constructor(eventInstanceId, kind, timeStamp) { 
        ClusterEvent.initialize(this, eventInstanceId, kind, timeStamp);
        ClusterUpgradeDomainCompletedEvent.initialize(this, eventInstanceId, kind, timeStamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp) { 
        obj['TargetClusterVersion'] = targetClusterVersion;
        obj['UpgradeDomainElapsedTimeInMs'] = upgradeDomainElapsedTimeInMs;
        obj['UpgradeDomains'] = upgradeDomains;
        obj['UpgradeState'] = upgradeState;
    }

    /**
     * Constructs a <code>ClusterUpgradeDomainCompletedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterUpgradeDomainCompletedEvent} obj Optional instance to populate.
     * @return {module:model/ClusterUpgradeDomainCompletedEvent} The populated <code>ClusterUpgradeDomainCompletedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterUpgradeDomainCompletedEvent();
            ClusterEvent.constructFromObject(data, obj);
            ClusterEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('TargetClusterVersion')) {
                obj['TargetClusterVersion'] = ApiClient.convertToType(data['TargetClusterVersion'], 'String');
            }
            if (data.hasOwnProperty('UpgradeDomainElapsedTimeInMs')) {
                obj['UpgradeDomainElapsedTimeInMs'] = ApiClient.convertToType(data['UpgradeDomainElapsedTimeInMs'], 'Number');
            }
            if (data.hasOwnProperty('UpgradeDomains')) {
                obj['UpgradeDomains'] = ApiClient.convertToType(data['UpgradeDomains'], 'String');
            }
            if (data.hasOwnProperty('UpgradeState')) {
                obj['UpgradeState'] = ApiClient.convertToType(data['UpgradeState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterUpgradeDomainCompletedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterUpgradeDomainCompletedEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterUpgradeDomainCompletedEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['TargetClusterVersion'] && !(typeof data['TargetClusterVersion'] === 'string' || data['TargetClusterVersion'] instanceof String)) {
            throw new Error("Expected the field `TargetClusterVersion` to be a primitive type in the JSON string but got " + data['TargetClusterVersion']);
        }
        // ensure the json data is a string
        if (data['UpgradeDomains'] && !(typeof data['UpgradeDomains'] === 'string' || data['UpgradeDomains'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDomains` to be a primitive type in the JSON string but got " + data['UpgradeDomains']);
        }
        // ensure the json data is a string
        if (data['UpgradeState'] && !(typeof data['UpgradeState'] === 'string' || data['UpgradeState'] instanceof String)) {
            throw new Error("Expected the field `UpgradeState` to be a primitive type in the JSON string but got " + data['UpgradeState']);
        }

        return true;
    }


}

ClusterUpgradeDomainCompletedEvent.RequiredProperties = ["TargetClusterVersion", "UpgradeDomainElapsedTimeInMs", "UpgradeDomains", "UpgradeState", "EventInstanceId", "Kind", "TimeStamp"];

/**
 * Target Cluster version.
 * @member {String} TargetClusterVersion
 */
ClusterUpgradeDomainCompletedEvent.prototype['TargetClusterVersion'] = undefined;

/**
 * Duration of domain upgrade in milli-seconds.
 * @member {Number} UpgradeDomainElapsedTimeInMs
 */
ClusterUpgradeDomainCompletedEvent.prototype['UpgradeDomainElapsedTimeInMs'] = undefined;

/**
 * Upgrade domains.
 * @member {String} UpgradeDomains
 */
ClusterUpgradeDomainCompletedEvent.prototype['UpgradeDomains'] = undefined;

/**
 * State of upgrade.
 * @member {String} UpgradeState
 */
ClusterUpgradeDomainCompletedEvent.prototype['UpgradeState'] = undefined;


// Implement ClusterEvent interface:
/**
 * The category of event.
 * @member {String} Category
 */
ClusterEvent.prototype['Category'] = undefined;
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
ClusterEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
ClusterEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
ClusterEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
ClusterEvent.prototype['TimeStamp'] = undefined;




export default ClusterUpgradeDomainCompletedEvent;

