/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChaosEvent from './ChaosEvent';
import ChaosEventKind from './ChaosEventKind';

/**
 * The TestErrorChaosEvent model module.
 * @module model/TestErrorChaosEvent
 * @version 7.0.0.42
 */
class TestErrorChaosEvent {
    /**
     * Constructs a new <code>TestErrorChaosEvent</code>.
     * Describes a Chaos event that gets generated when an unexpected event occurs in the Chaos engine. For example, due to the cluster snapshot being inconsistent, while faulting an entity, Chaos found that the entity was already faulted -- which would be an unexpected event.
     * @alias module:model/TestErrorChaosEvent
     * @extends module:model/ChaosEvent
     * @implements module:model/ChaosEvent
     * @param kind {module:model/ChaosEventKind} 
     * @param timeStampUtc {Date} The UTC timestamp when this Chaos event was generated.
     */
    constructor(kind, timeStampUtc) { 
        ChaosEvent.initialize(this, kind, timeStampUtc);
        TestErrorChaosEvent.initialize(this, kind, timeStampUtc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, timeStampUtc) { 
    }

    /**
     * Constructs a <code>TestErrorChaosEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestErrorChaosEvent} obj Optional instance to populate.
     * @return {module:model/TestErrorChaosEvent} The populated <code>TestErrorChaosEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestErrorChaosEvent();
            ChaosEvent.constructFromObject(data, obj);
            ChaosEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestErrorChaosEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestErrorChaosEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestErrorChaosEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Reason'] && !(typeof data['Reason'] === 'string' || data['Reason'] instanceof String)) {
            throw new Error("Expected the field `Reason` to be a primitive type in the JSON string but got " + data['Reason']);
        }

        return true;
    }


}

TestErrorChaosEvent.RequiredProperties = ["Kind", "TimeStampUtc"];

/**
 * Describes why TestErrorChaosEvent was generated. For example, Chaos tries to fault a partition but finds that the partition is no longer fault tolerant, then a TestErrorEvent gets generated with the reason stating that the partition is not fault tolerant.
 * @member {String} Reason
 */
TestErrorChaosEvent.prototype['Reason'] = undefined;


// Implement ChaosEvent interface:
/**
 * @member {module:model/ChaosEventKind} Kind
 */
ChaosEvent.prototype['Kind'] = undefined;
/**
 * The UTC timestamp when this Chaos event was generated.
 * @member {Date} TimeStampUtc
 */
ChaosEvent.prototype['TimeStampUtc'] = undefined;




export default TestErrorChaosEvent;

