/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeployedServiceReplicaInfo from './DeployedServiceReplicaInfo';
import ReplicaStatus from './ReplicaStatus';
import ServiceKind from './ServiceKind';

/**
 * The DeployedStatelessServiceInstanceInfo model module.
 * @module model/DeployedStatelessServiceInstanceInfo
 * @version 7.0.0.42
 */
class DeployedStatelessServiceInstanceInfo {
    /**
     * Constructs a new <code>DeployedStatelessServiceInstanceInfo</code>.
     * Information about a stateless service instance deployed on a node.
     * @alias module:model/DeployedStatelessServiceInstanceInfo
     * @extends module:model/DeployedServiceReplicaInfo
     * @implements module:model/DeployedServiceReplicaInfo
     * @param serviceKind {module:model/ServiceKind} 
     */
    constructor(serviceKind) { 
        DeployedServiceReplicaInfo.initialize(this, serviceKind);
        DeployedStatelessServiceInstanceInfo.initialize(this, serviceKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceKind) { 
    }

    /**
     * Constructs a <code>DeployedStatelessServiceInstanceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedStatelessServiceInstanceInfo} obj Optional instance to populate.
     * @return {module:model/DeployedStatelessServiceInstanceInfo} The populated <code>DeployedStatelessServiceInstanceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedStatelessServiceInstanceInfo();
            DeployedServiceReplicaInfo.constructFromObject(data, obj);
            DeployedServiceReplicaInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedStatelessServiceInstanceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedStatelessServiceInstanceInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeployedStatelessServiceInstanceInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }

        return true;
    }


}

DeployedStatelessServiceInstanceInfo.RequiredProperties = ["ServiceKind"];

/**
 * Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance has failed over on the same or different node, it will get a different value for the InstanceId.
 * @member {String} InstanceId
 */
DeployedStatelessServiceInstanceInfo.prototype['InstanceId'] = undefined;


// Implement DeployedServiceReplicaInfo interface:
/**
 * The last address returned by the replica in Open or ChangeRole.
 * @member {String} Address
 */
DeployedServiceReplicaInfo.prototype['Address'] = undefined;
/**
 * The name of the code package defined in the service manifest.
 * @member {String} CodePackageName
 */
DeployedServiceReplicaInfo.prototype['CodePackageName'] = undefined;
/**
 * Host process ID of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process ID will be from different kernel.
 * @member {String} HostProcessId
 */
DeployedServiceReplicaInfo.prototype['HostProcessId'] = undefined;
/**
 * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
 * @member {String} PartitionId
 */
DeployedServiceReplicaInfo.prototype['PartitionId'] = undefined;
/**
 * @member {module:model/ReplicaStatus} ReplicaStatus
 */
DeployedServiceReplicaInfo.prototype['ReplicaStatus'] = undefined;
/**
 * @member {module:model/ServiceKind} ServiceKind
 */
DeployedServiceReplicaInfo.prototype['ServiceKind'] = undefined;
/**
 * The name of the service manifest.
 * @member {String} ServiceManifestName
 */
DeployedServiceReplicaInfo.prototype['ServiceManifestName'] = undefined;
/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} ServiceName
 */
DeployedServiceReplicaInfo.prototype['ServiceName'] = undefined;
/**
 * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.
 * @member {String} ServicePackageActivationId
 */
DeployedServiceReplicaInfo.prototype['ServicePackageActivationId'] = undefined;
/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
DeployedServiceReplicaInfo.prototype['ServiceTypeName'] = undefined;




export default DeployedStatelessServiceInstanceInfo;

