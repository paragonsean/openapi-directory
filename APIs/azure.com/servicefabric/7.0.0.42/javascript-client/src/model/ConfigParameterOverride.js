/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigParameterOverride model module.
 * @module model/ConfigParameterOverride
 * @version 7.0.0.42
 */
class ConfigParameterOverride {
    /**
     * Constructs a new <code>ConfigParameterOverride</code>.
     * Information about a configuration parameter override.
     * @alias module:model/ConfigParameterOverride
     * @param parameterName {String} Name of the parameter that has been overridden.
     * @param parameterValue {String} Value of the overridden parameter.
     * @param sectionName {String} Name of the section for the parameter override.
     */
    constructor(parameterName, parameterValue, sectionName) { 
        
        ConfigParameterOverride.initialize(this, parameterName, parameterValue, sectionName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parameterName, parameterValue, sectionName) { 
        obj['ParameterName'] = parameterName;
        obj['ParameterValue'] = parameterValue;
        obj['SectionName'] = sectionName;
    }

    /**
     * Constructs a <code>ConfigParameterOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigParameterOverride} obj Optional instance to populate.
     * @return {module:model/ConfigParameterOverride} The populated <code>ConfigParameterOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigParameterOverride();

            if (data.hasOwnProperty('ParameterName')) {
                obj['ParameterName'] = ApiClient.convertToType(data['ParameterName'], 'String');
            }
            if (data.hasOwnProperty('ParameterValue')) {
                obj['ParameterValue'] = ApiClient.convertToType(data['ParameterValue'], 'String');
            }
            if (data.hasOwnProperty('PersistAcrossUpgrade')) {
                obj['PersistAcrossUpgrade'] = ApiClient.convertToType(data['PersistAcrossUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('SectionName')) {
                obj['SectionName'] = ApiClient.convertToType(data['SectionName'], 'String');
            }
            if (data.hasOwnProperty('Timeout')) {
                obj['Timeout'] = ApiClient.convertToType(data['Timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigParameterOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigParameterOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfigParameterOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ParameterName'] && !(typeof data['ParameterName'] === 'string' || data['ParameterName'] instanceof String)) {
            throw new Error("Expected the field `ParameterName` to be a primitive type in the JSON string but got " + data['ParameterName']);
        }
        // ensure the json data is a string
        if (data['ParameterValue'] && !(typeof data['ParameterValue'] === 'string' || data['ParameterValue'] instanceof String)) {
            throw new Error("Expected the field `ParameterValue` to be a primitive type in the JSON string but got " + data['ParameterValue']);
        }
        // ensure the json data is a string
        if (data['SectionName'] && !(typeof data['SectionName'] === 'string' || data['SectionName'] instanceof String)) {
            throw new Error("Expected the field `SectionName` to be a primitive type in the JSON string but got " + data['SectionName']);
        }
        // ensure the json data is a string
        if (data['Timeout'] && !(typeof data['Timeout'] === 'string' || data['Timeout'] instanceof String)) {
            throw new Error("Expected the field `Timeout` to be a primitive type in the JSON string but got " + data['Timeout']);
        }

        return true;
    }


}

ConfigParameterOverride.RequiredProperties = ["ParameterName", "ParameterValue", "SectionName"];

/**
 * Name of the parameter that has been overridden.
 * @member {String} ParameterName
 */
ConfigParameterOverride.prototype['ParameterName'] = undefined;

/**
 * Value of the overridden parameter.
 * @member {String} ParameterValue
 */
ConfigParameterOverride.prototype['ParameterValue'] = undefined;

/**
 * A value that indicates whether config override will be removed on upgrade or will still be considered as valid.
 * @member {Boolean} PersistAcrossUpgrade
 */
ConfigParameterOverride.prototype['PersistAcrossUpgrade'] = undefined;

/**
 * Name of the section for the parameter override.
 * @member {String} SectionName
 */
ConfigParameterOverride.prototype['SectionName'] = undefined;

/**
 * The duration until config override is considered as valid.
 * @member {String} Timeout
 */
ConfigParameterOverride.prototype['Timeout'] = undefined;






export default ConfigParameterOverride;

