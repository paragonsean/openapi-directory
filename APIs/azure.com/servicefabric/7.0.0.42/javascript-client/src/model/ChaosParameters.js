/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChaosContext from './ChaosContext';
import ChaosTargetFilter from './ChaosTargetFilter';
import ClusterHealthPolicy from './ClusterHealthPolicy';

/**
 * The ChaosParameters model module.
 * @module model/ChaosParameters
 * @version 7.0.0.42
 */
class ChaosParameters {
    /**
     * Constructs a new <code>ChaosParameters</code>.
     * Defines all the parameters to configure a Chaos run.
     * @alias module:model/ChaosParameters
     */
    constructor() { 
        
        ChaosParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['EnableMoveReplicaFaults'] = true;
        obj['MaxClusterStabilizationTimeoutInSeconds'] = 60;
        obj['MaxConcurrentFaults'] = 1;
        obj['TimeToRunInSeconds'] = '4294967295';
        obj['WaitTimeBetweenFaultsInSeconds'] = 20;
        obj['WaitTimeBetweenIterationsInSeconds'] = 30;
    }

    /**
     * Constructs a <code>ChaosParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChaosParameters} obj Optional instance to populate.
     * @return {module:model/ChaosParameters} The populated <code>ChaosParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChaosParameters();

            if (data.hasOwnProperty('ChaosTargetFilter')) {
                obj['ChaosTargetFilter'] = ChaosTargetFilter.constructFromObject(data['ChaosTargetFilter']);
            }
            if (data.hasOwnProperty('ClusterHealthPolicy')) {
                obj['ClusterHealthPolicy'] = ClusterHealthPolicy.constructFromObject(data['ClusterHealthPolicy']);
            }
            if (data.hasOwnProperty('Context')) {
                obj['Context'] = ChaosContext.constructFromObject(data['Context']);
            }
            if (data.hasOwnProperty('EnableMoveReplicaFaults')) {
                obj['EnableMoveReplicaFaults'] = ApiClient.convertToType(data['EnableMoveReplicaFaults'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxClusterStabilizationTimeoutInSeconds')) {
                obj['MaxClusterStabilizationTimeoutInSeconds'] = ApiClient.convertToType(data['MaxClusterStabilizationTimeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('MaxConcurrentFaults')) {
                obj['MaxConcurrentFaults'] = ApiClient.convertToType(data['MaxConcurrentFaults'], 'Number');
            }
            if (data.hasOwnProperty('TimeToRunInSeconds')) {
                obj['TimeToRunInSeconds'] = ApiClient.convertToType(data['TimeToRunInSeconds'], 'String');
            }
            if (data.hasOwnProperty('WaitTimeBetweenFaultsInSeconds')) {
                obj['WaitTimeBetweenFaultsInSeconds'] = ApiClient.convertToType(data['WaitTimeBetweenFaultsInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('WaitTimeBetweenIterationsInSeconds')) {
                obj['WaitTimeBetweenIterationsInSeconds'] = ApiClient.convertToType(data['WaitTimeBetweenIterationsInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChaosParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChaosParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ChaosTargetFilter`
        if (data['ChaosTargetFilter']) { // data not null
          ChaosTargetFilter.validateJSON(data['ChaosTargetFilter']);
        }
        // validate the optional field `ClusterHealthPolicy`
        if (data['ClusterHealthPolicy']) { // data not null
          ClusterHealthPolicy.validateJSON(data['ClusterHealthPolicy']);
        }
        // validate the optional field `Context`
        if (data['Context']) { // data not null
          ChaosContext.validateJSON(data['Context']);
        }
        // ensure the json data is a string
        if (data['TimeToRunInSeconds'] && !(typeof data['TimeToRunInSeconds'] === 'string' || data['TimeToRunInSeconds'] instanceof String)) {
            throw new Error("Expected the field `TimeToRunInSeconds` to be a primitive type in the JSON string but got " + data['TimeToRunInSeconds']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChaosTargetFilter} ChaosTargetFilter
 */
ChaosParameters.prototype['ChaosTargetFilter'] = undefined;

/**
 * @member {module:model/ClusterHealthPolicy} ClusterHealthPolicy
 */
ChaosParameters.prototype['ClusterHealthPolicy'] = undefined;

/**
 * @member {module:model/ChaosContext} Context
 */
ChaosParameters.prototype['Context'] = undefined;

/**
 * Enables or disables the move primary and move secondary faults.
 * @member {Boolean} EnableMoveReplicaFaults
 * @default true
 */
ChaosParameters.prototype['EnableMoveReplicaFaults'] = true;

/**
 * The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities. During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.
 * @member {Number} MaxClusterStabilizationTimeoutInSeconds
 * @default 60
 */
ChaosParameters.prototype['MaxClusterStabilizationTimeoutInSeconds'] = 60;

/**
 * MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration. Chaos executes in iterations and two consecutive iterations are separated by a validation phase. The higher the concurrency, the more aggressive the injection of faults, leading to inducing more complex series of states to uncover bugs. The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
 * @member {Number} MaxConcurrentFaults
 * @default 1
 */
ChaosParameters.prototype['MaxConcurrentFaults'] = 1;

/**
 * Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).
 * @member {String} TimeToRunInSeconds
 * @default '4294967295'
 */
ChaosParameters.prototype['TimeToRunInSeconds'] = '4294967295';

/**
 * Wait time (in seconds) between consecutive faults within a single iteration. The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through. The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
 * @member {Number} WaitTimeBetweenFaultsInSeconds
 * @default 20
 */
ChaosParameters.prototype['WaitTimeBetweenFaultsInSeconds'] = 20;

/**
 * Time-separation (in seconds) between two consecutive iterations of Chaos. The larger the value, the lower the fault injection rate.
 * @member {Number} WaitTimeBetweenIterationsInSeconds
 * @default 30
 */
ChaosParameters.prototype['WaitTimeBetweenIterationsInSeconds'] = 30;






export default ChaosParameters;

