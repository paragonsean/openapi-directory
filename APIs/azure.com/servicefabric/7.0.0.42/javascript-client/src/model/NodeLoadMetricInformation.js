/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeLoadMetricInformation model module.
 * @module model/NodeLoadMetricInformation
 * @version 7.0.0.42
 */
class NodeLoadMetricInformation {
    /**
     * Constructs a new <code>NodeLoadMetricInformation</code>.
     * Represents data structure that contains load information for a certain metric on a node.
     * @alias module:model/NodeLoadMetricInformation
     */
    constructor() { 
        
        NodeLoadMetricInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeLoadMetricInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeLoadMetricInformation} obj Optional instance to populate.
     * @return {module:model/NodeLoadMetricInformation} The populated <code>NodeLoadMetricInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeLoadMetricInformation();

            if (data.hasOwnProperty('BufferedNodeCapacityRemaining')) {
                obj['BufferedNodeCapacityRemaining'] = ApiClient.convertToType(data['BufferedNodeCapacityRemaining'], 'Number');
            }
            if (data.hasOwnProperty('CurrentNodeLoad')) {
                obj['CurrentNodeLoad'] = ApiClient.convertToType(data['CurrentNodeLoad'], 'Number');
            }
            if (data.hasOwnProperty('IsCapacityViolation')) {
                obj['IsCapacityViolation'] = ApiClient.convertToType(data['IsCapacityViolation'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NodeBufferedCapacity')) {
                obj['NodeBufferedCapacity'] = ApiClient.convertToType(data['NodeBufferedCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeCapacity')) {
                obj['NodeCapacity'] = ApiClient.convertToType(data['NodeCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeCapacityRemaining')) {
                obj['NodeCapacityRemaining'] = ApiClient.convertToType(data['NodeCapacityRemaining'], 'Number');
            }
            if (data.hasOwnProperty('NodeLoad')) {
                obj['NodeLoad'] = ApiClient.convertToType(data['NodeLoad'], 'String');
            }
            if (data.hasOwnProperty('NodeRemainingBufferedCapacity')) {
                obj['NodeRemainingBufferedCapacity'] = ApiClient.convertToType(data['NodeRemainingBufferedCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeRemainingCapacity')) {
                obj['NodeRemainingCapacity'] = ApiClient.convertToType(data['NodeRemainingCapacity'], 'String');
            }
            if (data.hasOwnProperty('PlannedNodeLoadRemoval')) {
                obj['PlannedNodeLoadRemoval'] = ApiClient.convertToType(data['PlannedNodeLoadRemoval'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeLoadMetricInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeLoadMetricInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BufferedNodeCapacityRemaining'] && !(typeof data['BufferedNodeCapacityRemaining'] === 'string' || data['BufferedNodeCapacityRemaining'] instanceof String)) {
            throw new Error("Expected the field `BufferedNodeCapacityRemaining` to be a primitive type in the JSON string but got " + data['BufferedNodeCapacityRemaining']);
        }
        // ensure the json data is a string
        if (data['CurrentNodeLoad'] && !(typeof data['CurrentNodeLoad'] === 'string' || data['CurrentNodeLoad'] instanceof String)) {
            throw new Error("Expected the field `CurrentNodeLoad` to be a primitive type in the JSON string but got " + data['CurrentNodeLoad']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NodeBufferedCapacity'] && !(typeof data['NodeBufferedCapacity'] === 'string' || data['NodeBufferedCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeBufferedCapacity` to be a primitive type in the JSON string but got " + data['NodeBufferedCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeCapacity'] && !(typeof data['NodeCapacity'] === 'string' || data['NodeCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeCapacity` to be a primitive type in the JSON string but got " + data['NodeCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeCapacityRemaining'] && !(typeof data['NodeCapacityRemaining'] === 'string' || data['NodeCapacityRemaining'] instanceof String)) {
            throw new Error("Expected the field `NodeCapacityRemaining` to be a primitive type in the JSON string but got " + data['NodeCapacityRemaining']);
        }
        // ensure the json data is a string
        if (data['NodeLoad'] && !(typeof data['NodeLoad'] === 'string' || data['NodeLoad'] instanceof String)) {
            throw new Error("Expected the field `NodeLoad` to be a primitive type in the JSON string but got " + data['NodeLoad']);
        }
        // ensure the json data is a string
        if (data['NodeRemainingBufferedCapacity'] && !(typeof data['NodeRemainingBufferedCapacity'] === 'string' || data['NodeRemainingBufferedCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeRemainingBufferedCapacity` to be a primitive type in the JSON string but got " + data['NodeRemainingBufferedCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeRemainingCapacity'] && !(typeof data['NodeRemainingCapacity'] === 'string' || data['NodeRemainingCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeRemainingCapacity` to be a primitive type in the JSON string but got " + data['NodeRemainingCapacity']);
        }
        // ensure the json data is a string
        if (data['PlannedNodeLoadRemoval'] && !(typeof data['PlannedNodeLoadRemoval'] === 'string' || data['PlannedNodeLoadRemoval'] instanceof String)) {
            throw new Error("Expected the field `PlannedNodeLoadRemoval` to be a primitive type in the JSON string but got " + data['PlannedNodeLoadRemoval']);
        }

        return true;
    }


}



/**
 * The remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.
 * @member {Number} BufferedNodeCapacityRemaining
 */
NodeLoadMetricInformation.prototype['BufferedNodeCapacityRemaining'] = undefined;

/**
 * Current load on the node for this metric.
 * @member {Number} CurrentNodeLoad
 */
NodeLoadMetricInformation.prototype['CurrentNodeLoad'] = undefined;

/**
 * Indicates if there is a capacity violation for this metric on the node.
 * @member {Boolean} IsCapacityViolation
 */
NodeLoadMetricInformation.prototype['IsCapacityViolation'] = undefined;

/**
 * Name of the metric for which this load information is provided.
 * @member {String} Name
 */
NodeLoadMetricInformation.prototype['Name'] = undefined;

/**
 * The value that indicates the reserved capacity for this metric on the node.
 * @member {String} NodeBufferedCapacity
 */
NodeLoadMetricInformation.prototype['NodeBufferedCapacity'] = undefined;

/**
 * Total capacity on the node for this metric.
 * @member {String} NodeCapacity
 */
NodeLoadMetricInformation.prototype['NodeCapacity'] = undefined;

/**
 * The remaining capacity on the node for the metric.
 * @member {Number} NodeCapacityRemaining
 */
NodeLoadMetricInformation.prototype['NodeCapacityRemaining'] = undefined;

/**
 * Current load on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentNodeLoad.
 * @member {String} NodeLoad
 */
NodeLoadMetricInformation.prototype['NodeLoad'] = undefined;

/**
 * The remaining reserved capacity for this metric on the node. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedNodeCapacityRemaining.
 * @member {String} NodeRemainingBufferedCapacity
 */
NodeLoadMetricInformation.prototype['NodeRemainingBufferedCapacity'] = undefined;

/**
 * The remaining capacity on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of NodeCapacityRemaining.
 * @member {String} NodeRemainingCapacity
 */
NodeLoadMetricInformation.prototype['NodeRemainingCapacity'] = undefined;

/**
 * This value represents the load of the replicas that are planned to be removed in the future. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.
 * @member {Number} PlannedNodeLoadRemoval
 */
NodeLoadMetricInformation.prototype['PlannedNodeLoadRemoval'] = undefined;






export default NodeLoadMetricInformation;

