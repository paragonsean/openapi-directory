/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProbeExec from './ProbeExec';
import ProbeHttpGet from './ProbeHttpGet';
import ProbeTcpSocket from './ProbeTcpSocket';

/**
 * The Probe model module.
 * @module model/Probe
 * @version 7.0.0.42
 */
class Probe {
    /**
     * Constructs a new <code>Probe</code>.
     * Probes have a number of fields that you can use to control their behavior.
     * @alias module:model/Probe
     */
    constructor() { 
        
        Probe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Probe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Probe} obj Optional instance to populate.
     * @return {module:model/Probe} The populated <code>Probe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Probe();

            if (data.hasOwnProperty('exec')) {
                obj['exec'] = ProbeExec.constructFromObject(data['exec']);
            }
            if (data.hasOwnProperty('failureThreshold')) {
                obj['failureThreshold'] = ApiClient.convertToType(data['failureThreshold'], 'Number');
            }
            if (data.hasOwnProperty('httpGet')) {
                obj['httpGet'] = ProbeHttpGet.constructFromObject(data['httpGet']);
            }
            if (data.hasOwnProperty('initialDelaySeconds')) {
                obj['initialDelaySeconds'] = ApiClient.convertToType(data['initialDelaySeconds'], 'Number');
            }
            if (data.hasOwnProperty('periodSeconds')) {
                obj['periodSeconds'] = ApiClient.convertToType(data['periodSeconds'], 'Number');
            }
            if (data.hasOwnProperty('successThreshold')) {
                obj['successThreshold'] = ApiClient.convertToType(data['successThreshold'], 'Number');
            }
            if (data.hasOwnProperty('tcpSocket')) {
                obj['tcpSocket'] = ProbeTcpSocket.constructFromObject(data['tcpSocket']);
            }
            if (data.hasOwnProperty('timeoutSeconds')) {
                obj['timeoutSeconds'] = ApiClient.convertToType(data['timeoutSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Probe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Probe</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exec`
        if (data['exec']) { // data not null
          ProbeExec.validateJSON(data['exec']);
        }
        // validate the optional field `httpGet`
        if (data['httpGet']) { // data not null
          ProbeHttpGet.validateJSON(data['httpGet']);
        }
        // validate the optional field `tcpSocket`
        if (data['tcpSocket']) { // data not null
          ProbeTcpSocket.validateJSON(data['tcpSocket']);
        }

        return true;
    }


}



/**
 * @member {module:model/ProbeExec} exec
 */
Probe.prototype['exec'] = undefined;

/**
 * The count of failures after which probe is considered failed.
 * @member {Number} failureThreshold
 */
Probe.prototype['failureThreshold'] = undefined;

/**
 * @member {module:model/ProbeHttpGet} httpGet
 */
Probe.prototype['httpGet'] = undefined;

/**
 * The initial delay in seconds to start executing probe once code package has started.
 * @member {Number} initialDelaySeconds
 */
Probe.prototype['initialDelaySeconds'] = undefined;

/**
 * Periodic seconds to execute probe.
 * @member {Number} periodSeconds
 */
Probe.prototype['periodSeconds'] = undefined;

/**
 * The count of successful probe executions after which probe is considered success.
 * @member {Number} successThreshold
 */
Probe.prototype['successThreshold'] = undefined;

/**
 * @member {module:model/ProbeTcpSocket} tcpSocket
 */
Probe.prototype['tcpSocket'] = undefined;

/**
 * Period after which probe is considered as failed if it hasn't completed successfully.
 * @member {Number} timeoutSeconds
 */
Probe.prototype['timeoutSeconds'] = undefined;






export default Probe;

