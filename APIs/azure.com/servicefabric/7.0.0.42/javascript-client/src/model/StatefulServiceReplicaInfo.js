/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthState from './HealthState';
import ReplicaInfo from './ReplicaInfo';
import ReplicaRole from './ReplicaRole';
import ReplicaStatus from './ReplicaStatus';
import ServiceKind from './ServiceKind';

/**
 * The StatefulServiceReplicaInfo model module.
 * @module model/StatefulServiceReplicaInfo
 * @version 7.0.0.42
 */
class StatefulServiceReplicaInfo {
    /**
     * Constructs a new <code>StatefulServiceReplicaInfo</code>.
     * Represents a stateful service replica. This includes information about the identity, role, status, health, node name, uptime, and other details about the replica.
     * @alias module:model/StatefulServiceReplicaInfo
     * @extends module:model/ReplicaInfo
     * @implements module:model/ReplicaInfo
     * @param serviceKind {module:model/ServiceKind} 
     */
    constructor(serviceKind) { 
        ReplicaInfo.initialize(this, serviceKind);
        StatefulServiceReplicaInfo.initialize(this, serviceKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceKind) { 
    }

    /**
     * Constructs a <code>StatefulServiceReplicaInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatefulServiceReplicaInfo} obj Optional instance to populate.
     * @return {module:model/StatefulServiceReplicaInfo} The populated <code>StatefulServiceReplicaInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatefulServiceReplicaInfo();
            ReplicaInfo.constructFromObject(data, obj);
            ReplicaInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('ReplicaId')) {
                obj['ReplicaId'] = ApiClient.convertToType(data['ReplicaId'], 'String');
            }
            if (data.hasOwnProperty('ReplicaRole')) {
                obj['ReplicaRole'] = ReplicaRole.constructFromObject(data['ReplicaRole']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatefulServiceReplicaInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatefulServiceReplicaInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatefulServiceReplicaInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ReplicaId'] && !(typeof data['ReplicaId'] === 'string' || data['ReplicaId'] instanceof String)) {
            throw new Error("Expected the field `ReplicaId` to be a primitive type in the JSON string but got " + data['ReplicaId']);
        }

        return true;
    }


}

StatefulServiceReplicaInfo.RequiredProperties = ["ServiceKind"];

/**
 * Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
 * @member {String} ReplicaId
 */
StatefulServiceReplicaInfo.prototype['ReplicaId'] = undefined;

/**
 * @member {module:model/ReplicaRole} ReplicaRole
 */
StatefulServiceReplicaInfo.prototype['ReplicaRole'] = undefined;


// Implement ReplicaInfo interface:
/**
 * The address the replica is listening on.
 * @member {String} Address
 */
ReplicaInfo.prototype['Address'] = undefined;
/**
 * @member {module:model/HealthState} HealthState
 */
ReplicaInfo.prototype['HealthState'] = undefined;
/**
 * The last in build duration of the replica in seconds.
 * @member {String} LastInBuildDurationInSeconds
 */
ReplicaInfo.prototype['LastInBuildDurationInSeconds'] = undefined;
/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
ReplicaInfo.prototype['NodeName'] = undefined;
/**
 * @member {module:model/ReplicaStatus} ReplicaStatus
 */
ReplicaInfo.prototype['ReplicaStatus'] = undefined;
/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ReplicaInfo.prototype['ServiceKind'] = undefined;




export default StatefulServiceReplicaInfo;

