/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepairImpactDescriptionBase from './RepairImpactDescriptionBase';
import RepairTargetDescriptionBase from './RepairTargetDescriptionBase';
import RepairTaskHealthCheckState from './RepairTaskHealthCheckState';
import RepairTaskHistory from './RepairTaskHistory';

/**
 * The RepairTask model module.
 * @module model/RepairTask
 * @version 7.0.0.42
 */
class RepairTask {
    /**
     * Constructs a new <code>RepairTask</code>.
     * Represents a repair task, which includes information about what kind of repair was requested, what its progress is, and what its final result was.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
     * @alias module:model/RepairTask
     * @param action {String} The requested repair action. Must be specified when the repair task is created, and is immutable once set.
     * @param state {module:model/RepairTask.StateEnum} The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.
     * @param taskId {String} The ID of the repair task.
     */
    constructor(action, state, taskId) { 
        
        RepairTask.initialize(this, action, state, taskId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, state, taskId) { 
        obj['Action'] = action;
        obj['State'] = state;
        obj['TaskId'] = taskId;
    }

    /**
     * Constructs a <code>RepairTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepairTask} obj Optional instance to populate.
     * @return {module:model/RepairTask} The populated <code>RepairTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepairTask();

            if (data.hasOwnProperty('Action')) {
                obj['Action'] = ApiClient.convertToType(data['Action'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Executor')) {
                obj['Executor'] = ApiClient.convertToType(data['Executor'], 'String');
            }
            if (data.hasOwnProperty('ExecutorData')) {
                obj['ExecutorData'] = ApiClient.convertToType(data['ExecutorData'], 'String');
            }
            if (data.hasOwnProperty('Flags')) {
                obj['Flags'] = ApiClient.convertToType(data['Flags'], 'Number');
            }
            if (data.hasOwnProperty('History')) {
                obj['History'] = RepairTaskHistory.constructFromObject(data['History']);
            }
            if (data.hasOwnProperty('Impact')) {
                obj['Impact'] = RepairImpactDescriptionBase.constructFromObject(data['Impact']);
            }
            if (data.hasOwnProperty('PerformPreparingHealthCheck')) {
                obj['PerformPreparingHealthCheck'] = ApiClient.convertToType(data['PerformPreparingHealthCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('PerformRestoringHealthCheck')) {
                obj['PerformRestoringHealthCheck'] = ApiClient.convertToType(data['PerformRestoringHealthCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('PreparingHealthCheckState')) {
                obj['PreparingHealthCheckState'] = RepairTaskHealthCheckState.constructFromObject(data['PreparingHealthCheckState']);
            }
            if (data.hasOwnProperty('RestoringHealthCheckState')) {
                obj['RestoringHealthCheckState'] = RepairTaskHealthCheckState.constructFromObject(data['RestoringHealthCheckState']);
            }
            if (data.hasOwnProperty('ResultCode')) {
                obj['ResultCode'] = ApiClient.convertToType(data['ResultCode'], 'Number');
            }
            if (data.hasOwnProperty('ResultDetails')) {
                obj['ResultDetails'] = ApiClient.convertToType(data['ResultDetails'], 'String');
            }
            if (data.hasOwnProperty('ResultStatus')) {
                obj['ResultStatus'] = ApiClient.convertToType(data['ResultStatus'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('Target')) {
                obj['Target'] = RepairTargetDescriptionBase.constructFromObject(data['Target']);
            }
            if (data.hasOwnProperty('TaskId')) {
                obj['TaskId'] = ApiClient.convertToType(data['TaskId'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepairTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepairTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepairTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Action'] && !(typeof data['Action'] === 'string' || data['Action'] instanceof String)) {
            throw new Error("Expected the field `Action` to be a primitive type in the JSON string but got " + data['Action']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Executor'] && !(typeof data['Executor'] === 'string' || data['Executor'] instanceof String)) {
            throw new Error("Expected the field `Executor` to be a primitive type in the JSON string but got " + data['Executor']);
        }
        // ensure the json data is a string
        if (data['ExecutorData'] && !(typeof data['ExecutorData'] === 'string' || data['ExecutorData'] instanceof String)) {
            throw new Error("Expected the field `ExecutorData` to be a primitive type in the JSON string but got " + data['ExecutorData']);
        }
        // validate the optional field `History`
        if (data['History']) { // data not null
          RepairTaskHistory.validateJSON(data['History']);
        }
        // validate the optional field `Impact`
        if (data['Impact']) { // data not null
          RepairImpactDescriptionBase.validateJSON(data['Impact']);
        }
        // ensure the json data is a string
        if (data['ResultDetails'] && !(typeof data['ResultDetails'] === 'string' || data['ResultDetails'] instanceof String)) {
            throw new Error("Expected the field `ResultDetails` to be a primitive type in the JSON string but got " + data['ResultDetails']);
        }
        // ensure the json data is a string
        if (data['ResultStatus'] && !(typeof data['ResultStatus'] === 'string' || data['ResultStatus'] instanceof String)) {
            throw new Error("Expected the field `ResultStatus` to be a primitive type in the JSON string but got " + data['ResultStatus']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }
        // validate the optional field `Target`
        if (data['Target']) { // data not null
          RepairTargetDescriptionBase.validateJSON(data['Target']);
        }
        // ensure the json data is a string
        if (data['TaskId'] && !(typeof data['TaskId'] === 'string' || data['TaskId'] instanceof String)) {
            throw new Error("Expected the field `TaskId` to be a primitive type in the JSON string but got " + data['TaskId']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}

RepairTask.RequiredProperties = ["Action", "State", "TaskId"];

/**
 * The requested repair action. Must be specified when the repair task is created, and is immutable once set.
 * @member {String} Action
 */
RepairTask.prototype['Action'] = undefined;

/**
 * A description of the purpose of the repair task, or other informational details. May be set when the repair task is created, and is immutable once set.
 * @member {String} Description
 */
RepairTask.prototype['Description'] = undefined;

/**
 * The name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.
 * @member {String} Executor
 */
RepairTask.prototype['Executor'] = undefined;

/**
 * A data string that the repair executor can use to store its internal state.
 * @member {String} ExecutorData
 */
RepairTask.prototype['ExecutorData'] = undefined;

/**
 * A bitwise-OR of the following values, which gives additional details about the status of the repair task. - 1 - Cancellation of the repair has been requested - 2 - Abort of the repair has been requested - 4 - Approval of the repair was forced via client request
 * @member {Number} Flags
 */
RepairTask.prototype['Flags'] = undefined;

/**
 * @member {module:model/RepairTaskHistory} History
 */
RepairTask.prototype['History'] = undefined;

/**
 * @member {module:model/RepairImpactDescriptionBase} Impact
 */
RepairTask.prototype['Impact'] = undefined;

/**
 * A value to determine if health checks will be performed when the repair task enters the Preparing state.
 * @member {Boolean} PerformPreparingHealthCheck
 */
RepairTask.prototype['PerformPreparingHealthCheck'] = undefined;

/**
 * A value to determine if health checks will be performed when the repair task enters the Restoring state.
 * @member {Boolean} PerformRestoringHealthCheck
 */
RepairTask.prototype['PerformRestoringHealthCheck'] = undefined;

/**
 * @member {module:model/RepairTaskHealthCheckState} PreparingHealthCheckState
 */
RepairTask.prototype['PreparingHealthCheckState'] = undefined;

/**
 * @member {module:model/RepairTaskHealthCheckState} RestoringHealthCheckState
 */
RepairTask.prototype['RestoringHealthCheckState'] = undefined;

/**
 * A numeric value providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set.
 * @member {Number} ResultCode
 */
RepairTask.prototype['ResultCode'] = undefined;

/**
 * A string providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set.
 * @member {String} ResultDetails
 */
RepairTask.prototype['ResultDetails'] = undefined;

/**
 * A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.
 * @member {module:model/RepairTask.ResultStatusEnum} ResultStatus
 */
RepairTask.prototype['ResultStatus'] = undefined;

/**
 * The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.
 * @member {module:model/RepairTask.StateEnum} State
 */
RepairTask.prototype['State'] = undefined;

/**
 * @member {module:model/RepairTargetDescriptionBase} Target
 */
RepairTask.prototype['Target'] = undefined;

/**
 * The ID of the repair task.
 * @member {String} TaskId
 */
RepairTask.prototype['TaskId'] = undefined;

/**
 * The version of the repair task. When creating a new repair task, the version must be set to zero.  When updating a repair task, the version is used for optimistic concurrency checks.  If the version is set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the update will only succeed if the actual current version of the repair task matches this value.
 * @member {String} Version
 */
RepairTask.prototype['Version'] = undefined;





/**
 * Allowed values for the <code>ResultStatus</code> property.
 * @enum {String}
 * @readonly
 */
RepairTask['ResultStatusEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Interrupted"
     * @const
     */
    "Interrupted": "Interrupted",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};


/**
 * Allowed values for the <code>State</code> property.
 * @enum {String}
 * @readonly
 */
RepairTask['StateEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Claimed"
     * @const
     */
    "Claimed": "Claimed",

    /**
     * value: "Preparing"
     * @const
     */
    "Preparing": "Preparing",

    /**
     * value: "Approved"
     * @const
     */
    "Approved": "Approved",

    /**
     * value: "Executing"
     * @const
     */
    "Executing": "Executing",

    /**
     * value: "Restoring"
     * @const
     */
    "Restoring": "Restoring",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed"
};



export default RepairTask;

