/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServiceTypeExtensionDescription from './ServiceTypeExtensionDescription';

/**
 * The ServiceTypeDescription model module.
 * @module model/ServiceTypeDescription
 * @version 7.0.0.42
 */
class ServiceTypeDescription {
    /**
     * Constructs a new <code>ServiceTypeDescription</code>.
     * Describes a service type defined in the service manifest of a provisioned application type. The properties the ones defined in the service manifest.
     * @alias module:model/ServiceTypeDescription
     * @param kind {module:model/ServiceKind} 
     */
    constructor(kind) { 
        
        ServiceTypeDescription.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
        obj['Kind'] = kind;
    }

    /**
     * Constructs a <code>ServiceTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceTypeDescription} obj Optional instance to populate.
     * @return {module:model/ServiceTypeDescription} The populated <code>ServiceTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceTypeDescription();

            if (data.hasOwnProperty('Extensions')) {
                obj['Extensions'] = ApiClient.convertToType(data['Extensions'], [ServiceTypeExtensionDescription]);
            }
            if (data.hasOwnProperty('IsStateful')) {
                obj['IsStateful'] = ApiClient.convertToType(data['IsStateful'], 'Boolean');
            }
            if (data.hasOwnProperty('Kind')) {
                obj['Kind'] = ServiceKind.constructFromObject(data['Kind']);
            }
            if (data.hasOwnProperty('LoadMetrics')) {
                obj['LoadMetrics'] = ApiClient.convertToType(data['LoadMetrics'], [ServiceLoadMetricDescription]);
            }
            if (data.hasOwnProperty('PlacementConstraints')) {
                obj['PlacementConstraints'] = ApiClient.convertToType(data['PlacementConstraints'], 'String');
            }
            if (data.hasOwnProperty('ServicePlacementPolicies')) {
                obj['ServicePlacementPolicies'] = ApiClient.convertToType(data['ServicePlacementPolicies'], [ServicePlacementPolicyDescription]);
            }
            if (data.hasOwnProperty('ServiceTypeName')) {
                obj['ServiceTypeName'] = ApiClient.convertToType(data['ServiceTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceTypeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceTypeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Extensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Extensions'])) {
                throw new Error("Expected the field `Extensions` to be an array in the JSON data but got " + data['Extensions']);
            }
            // validate the optional field `Extensions` (array)
            for (const item of data['Extensions']) {
                ServiceTypeExtensionDescription.validateJSON(item);
            };
        }
        if (data['LoadMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LoadMetrics'])) {
                throw new Error("Expected the field `LoadMetrics` to be an array in the JSON data but got " + data['LoadMetrics']);
            }
            // validate the optional field `LoadMetrics` (array)
            for (const item of data['LoadMetrics']) {
                ServiceLoadMetricDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlacementConstraints'] && !(typeof data['PlacementConstraints'] === 'string' || data['PlacementConstraints'] instanceof String)) {
            throw new Error("Expected the field `PlacementConstraints` to be a primitive type in the JSON string but got " + data['PlacementConstraints']);
        }
        if (data['ServicePlacementPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ServicePlacementPolicies'])) {
                throw new Error("Expected the field `ServicePlacementPolicies` to be an array in the JSON data but got " + data['ServicePlacementPolicies']);
            }
            // validate the optional field `ServicePlacementPolicies` (array)
            for (const item of data['ServicePlacementPolicies']) {
                ServicePlacementPolicyDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceTypeName'] && !(typeof data['ServiceTypeName'] === 'string' || data['ServiceTypeName'] instanceof String)) {
            throw new Error("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got " + data['ServiceTypeName']);
        }

        return true;
    }


}

ServiceTypeDescription.RequiredProperties = ["Kind"];

/**
 * List of service type extensions.
 * @member {Array.<module:model/ServiceTypeExtensionDescription>} Extensions
 */
ServiceTypeDescription.prototype['Extensions'] = undefined;

/**
 * Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.
 * @member {Boolean} IsStateful
 */
ServiceTypeDescription.prototype['IsStateful'] = undefined;

/**
 * @member {module:model/ServiceKind} Kind
 */
ServiceTypeDescription.prototype['Kind'] = undefined;

/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} LoadMetrics
 */
ServiceTypeDescription.prototype['LoadMetrics'] = undefined;

/**
 * The placement constraint to be used when instantiating this service in a Service Fabric cluster.
 * @member {String} PlacementConstraints
 */
ServiceTypeDescription.prototype['PlacementConstraints'] = undefined;

/**
 * List of service placement policy descriptions.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} ServicePlacementPolicies
 */
ServiceTypeDescription.prototype['ServicePlacementPolicies'] = undefined;

/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
ServiceTypeDescription.prototype['ServiceTypeName'] = undefined;






export default ServiceTypeDescription;

