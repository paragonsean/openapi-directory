/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageInfo::OAIUsageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageInfo::OAIUsageInfo() {
    this->initializeModel();
}

OAIUsageInfo::~OAIUsageInfo() {}

void OAIUsageInfo::initializeModel() {

    m_file_count_isSet = false;
    m_file_count_isValid = false;

    m_used_space_isSet = false;
    m_used_space_isValid = false;
}

void OAIUsageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageInfo::fromJsonObject(QJsonObject json) {

    m_file_count_isValid = ::OpenAPI::fromJsonValue(m_file_count, json[QString("FileCount")]);
    m_file_count_isSet = !json[QString("FileCount")].isNull() && m_file_count_isValid;

    m_used_space_isValid = ::OpenAPI::fromJsonValue(m_used_space, json[QString("UsedSpace")]);
    m_used_space_isSet = !json[QString("UsedSpace")].isNull() && m_used_space_isValid;
}

QString OAIUsageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_file_count_isSet) {
        obj.insert(QString("FileCount"), ::OpenAPI::toJsonValue(m_file_count));
    }
    if (m_used_space_isSet) {
        obj.insert(QString("UsedSpace"), ::OpenAPI::toJsonValue(m_used_space));
    }
    return obj;
}

QString OAIUsageInfo::getFileCount() const {
    return m_file_count;
}
void OAIUsageInfo::setFileCount(const QString &file_count) {
    m_file_count = file_count;
    m_file_count_isSet = true;
}

bool OAIUsageInfo::is_file_count_Set() const{
    return m_file_count_isSet;
}

bool OAIUsageInfo::is_file_count_Valid() const{
    return m_file_count_isValid;
}

QString OAIUsageInfo::getUsedSpace() const {
    return m_used_space;
}
void OAIUsageInfo::setUsedSpace(const QString &used_space) {
    m_used_space = used_space;
    m_used_space_isSet = true;
}

bool OAIUsageInfo::is_used_space_Set() const{
    return m_used_space_isSet;
}

bool OAIUsageInfo::is_used_space_Valid() const{
    return m_used_space_isValid;
}

bool OAIUsageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
