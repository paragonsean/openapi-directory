/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupInfo::OAIBackupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupInfo::OAIBackupInfo() {
    this->initializeModel();
}

OAIBackupInfo::~OAIBackupInfo() {}

void OAIBackupInfo::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_backup_chain_id_isSet = false;
    m_backup_chain_id_isValid = false;

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_backup_location_isSet = false;
    m_backup_location_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;

    m_creation_time_utc_isSet = false;
    m_creation_time_utc_isValid = false;

    m_epoch_of_last_backup_record_isSet = false;
    m_epoch_of_last_backup_record_isValid = false;

    m_failure_error_isSet = false;
    m_failure_error_isValid = false;

    m_lsn_of_last_backup_record_isSet = false;
    m_lsn_of_last_backup_record_isValid = false;

    m_partition_information_isSet = false;
    m_partition_information_isValid = false;

    m_service_manifest_version_isSet = false;
    m_service_manifest_version_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIBackupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupInfo::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_backup_chain_id_isValid = ::OpenAPI::fromJsonValue(m_backup_chain_id, json[QString("BackupChainId")]);
    m_backup_chain_id_isSet = !json[QString("BackupChainId")].isNull() && m_backup_chain_id_isValid;

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("BackupId")]);
    m_backup_id_isSet = !json[QString("BackupId")].isNull() && m_backup_id_isValid;

    m_backup_location_isValid = ::OpenAPI::fromJsonValue(m_backup_location, json[QString("BackupLocation")]);
    m_backup_location_isSet = !json[QString("BackupLocation")].isNull() && m_backup_location_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("BackupType")]);
    m_backup_type_isSet = !json[QString("BackupType")].isNull() && m_backup_type_isValid;

    m_creation_time_utc_isValid = ::OpenAPI::fromJsonValue(m_creation_time_utc, json[QString("CreationTimeUtc")]);
    m_creation_time_utc_isSet = !json[QString("CreationTimeUtc")].isNull() && m_creation_time_utc_isValid;

    m_epoch_of_last_backup_record_isValid = ::OpenAPI::fromJsonValue(m_epoch_of_last_backup_record, json[QString("EpochOfLastBackupRecord")]);
    m_epoch_of_last_backup_record_isSet = !json[QString("EpochOfLastBackupRecord")].isNull() && m_epoch_of_last_backup_record_isValid;

    m_failure_error_isValid = ::OpenAPI::fromJsonValue(m_failure_error, json[QString("FailureError")]);
    m_failure_error_isSet = !json[QString("FailureError")].isNull() && m_failure_error_isValid;

    m_lsn_of_last_backup_record_isValid = ::OpenAPI::fromJsonValue(m_lsn_of_last_backup_record, json[QString("LsnOfLastBackupRecord")]);
    m_lsn_of_last_backup_record_isSet = !json[QString("LsnOfLastBackupRecord")].isNull() && m_lsn_of_last_backup_record_isValid;

    m_partition_information_isValid = ::OpenAPI::fromJsonValue(m_partition_information, json[QString("PartitionInformation")]);
    m_partition_information_isSet = !json[QString("PartitionInformation")].isNull() && m_partition_information_isValid;

    m_service_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_version, json[QString("ServiceManifestVersion")]);
    m_service_manifest_version_isSet = !json[QString("ServiceManifestVersion")].isNull() && m_service_manifest_version_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIBackupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_backup_chain_id_isSet) {
        obj.insert(QString("BackupChainId"), ::OpenAPI::toJsonValue(m_backup_chain_id));
    }
    if (m_backup_id_isSet) {
        obj.insert(QString("BackupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_backup_location_isSet) {
        obj.insert(QString("BackupLocation"), ::OpenAPI::toJsonValue(m_backup_location));
    }
    if (m_backup_type.isSet()) {
        obj.insert(QString("BackupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    if (m_creation_time_utc_isSet) {
        obj.insert(QString("CreationTimeUtc"), ::OpenAPI::toJsonValue(m_creation_time_utc));
    }
    if (m_epoch_of_last_backup_record.isSet()) {
        obj.insert(QString("EpochOfLastBackupRecord"), ::OpenAPI::toJsonValue(m_epoch_of_last_backup_record));
    }
    if (m_failure_error.isSet()) {
        obj.insert(QString("FailureError"), ::OpenAPI::toJsonValue(m_failure_error));
    }
    if (m_lsn_of_last_backup_record_isSet) {
        obj.insert(QString("LsnOfLastBackupRecord"), ::OpenAPI::toJsonValue(m_lsn_of_last_backup_record));
    }
    if (m_partition_information.isSet()) {
        obj.insert(QString("PartitionInformation"), ::OpenAPI::toJsonValue(m_partition_information));
    }
    if (m_service_manifest_version_isSet) {
        obj.insert(QString("ServiceManifestVersion"), ::OpenAPI::toJsonValue(m_service_manifest_version));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIBackupInfo::getApplicationName() const {
    return m_application_name;
}
void OAIBackupInfo::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIBackupInfo::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIBackupInfo::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIBackupInfo::getBackupChainId() const {
    return m_backup_chain_id;
}
void OAIBackupInfo::setBackupChainId(const QString &backup_chain_id) {
    m_backup_chain_id = backup_chain_id;
    m_backup_chain_id_isSet = true;
}

bool OAIBackupInfo::is_backup_chain_id_Set() const{
    return m_backup_chain_id_isSet;
}

bool OAIBackupInfo::is_backup_chain_id_Valid() const{
    return m_backup_chain_id_isValid;
}

QString OAIBackupInfo::getBackupId() const {
    return m_backup_id;
}
void OAIBackupInfo::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIBackupInfo::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIBackupInfo::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

QString OAIBackupInfo::getBackupLocation() const {
    return m_backup_location;
}
void OAIBackupInfo::setBackupLocation(const QString &backup_location) {
    m_backup_location = backup_location;
    m_backup_location_isSet = true;
}

bool OAIBackupInfo::is_backup_location_Set() const{
    return m_backup_location_isSet;
}

bool OAIBackupInfo::is_backup_location_Valid() const{
    return m_backup_location_isValid;
}

OAIBackupType OAIBackupInfo::getBackupType() const {
    return m_backup_type;
}
void OAIBackupInfo::setBackupType(const OAIBackupType &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackupInfo::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackupInfo::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

QDateTime OAIBackupInfo::getCreationTimeUtc() const {
    return m_creation_time_utc;
}
void OAIBackupInfo::setCreationTimeUtc(const QDateTime &creation_time_utc) {
    m_creation_time_utc = creation_time_utc;
    m_creation_time_utc_isSet = true;
}

bool OAIBackupInfo::is_creation_time_utc_Set() const{
    return m_creation_time_utc_isSet;
}

bool OAIBackupInfo::is_creation_time_utc_Valid() const{
    return m_creation_time_utc_isValid;
}

OAIEpoch OAIBackupInfo::getEpochOfLastBackupRecord() const {
    return m_epoch_of_last_backup_record;
}
void OAIBackupInfo::setEpochOfLastBackupRecord(const OAIEpoch &epoch_of_last_backup_record) {
    m_epoch_of_last_backup_record = epoch_of_last_backup_record;
    m_epoch_of_last_backup_record_isSet = true;
}

bool OAIBackupInfo::is_epoch_of_last_backup_record_Set() const{
    return m_epoch_of_last_backup_record_isSet;
}

bool OAIBackupInfo::is_epoch_of_last_backup_record_Valid() const{
    return m_epoch_of_last_backup_record_isValid;
}

OAIFabricErrorError OAIBackupInfo::getFailureError() const {
    return m_failure_error;
}
void OAIBackupInfo::setFailureError(const OAIFabricErrorError &failure_error) {
    m_failure_error = failure_error;
    m_failure_error_isSet = true;
}

bool OAIBackupInfo::is_failure_error_Set() const{
    return m_failure_error_isSet;
}

bool OAIBackupInfo::is_failure_error_Valid() const{
    return m_failure_error_isValid;
}

QString OAIBackupInfo::getLsnOfLastBackupRecord() const {
    return m_lsn_of_last_backup_record;
}
void OAIBackupInfo::setLsnOfLastBackupRecord(const QString &lsn_of_last_backup_record) {
    m_lsn_of_last_backup_record = lsn_of_last_backup_record;
    m_lsn_of_last_backup_record_isSet = true;
}

bool OAIBackupInfo::is_lsn_of_last_backup_record_Set() const{
    return m_lsn_of_last_backup_record_isSet;
}

bool OAIBackupInfo::is_lsn_of_last_backup_record_Valid() const{
    return m_lsn_of_last_backup_record_isValid;
}

OAIPartitionInformation OAIBackupInfo::getPartitionInformation() const {
    return m_partition_information;
}
void OAIBackupInfo::setPartitionInformation(const OAIPartitionInformation &partition_information) {
    m_partition_information = partition_information;
    m_partition_information_isSet = true;
}

bool OAIBackupInfo::is_partition_information_Set() const{
    return m_partition_information_isSet;
}

bool OAIBackupInfo::is_partition_information_Valid() const{
    return m_partition_information_isValid;
}

QString OAIBackupInfo::getServiceManifestVersion() const {
    return m_service_manifest_version;
}
void OAIBackupInfo::setServiceManifestVersion(const QString &service_manifest_version) {
    m_service_manifest_version = service_manifest_version;
    m_service_manifest_version_isSet = true;
}

bool OAIBackupInfo::is_service_manifest_version_Set() const{
    return m_service_manifest_version_isSet;
}

bool OAIBackupInfo::is_service_manifest_version_Valid() const{
    return m_service_manifest_version_isValid;
}

QString OAIBackupInfo::getServiceName() const {
    return m_service_name;
}
void OAIBackupInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIBackupInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIBackupInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIBackupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_chain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch_of_last_backup_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsn_of_last_backup_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
