/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeshNetworksApi_H
#define OAI_OAIMeshNetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAINetworkResourceDescription.h"
#include "OAIPagedNetworkResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeshNetworksApi : public QObject {
    Q_OBJECT

public:
    OAIMeshNetworksApi(const int timeOut = 0);
    ~OAIMeshNetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  network_resource_name QString [required]
    * @param[in]  network_resource_description OAINetworkResourceDescription [required]
    */
    virtual void meshNetworkCreateOrUpdate(const QString &api_version, const QString &network_resource_name, const OAINetworkResourceDescription &network_resource_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  network_resource_name QString [required]
    */
    virtual void meshNetworkDelete(const QString &api_version, const QString &network_resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  network_resource_name QString [required]
    */
    virtual void meshNetworkGet(const QString &api_version, const QString &network_resource_name);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void meshNetworkList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meshNetworkCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void meshNetworkDeleteCallback(OAIHttpRequestWorker *worker);
    void meshNetworkGetCallback(OAIHttpRequestWorker *worker);
    void meshNetworkListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meshNetworkCreateOrUpdateSignal(OAINetworkResourceDescription summary);
    void meshNetworkDeleteSignal();
    void meshNetworkGetSignal(OAINetworkResourceDescription summary);
    void meshNetworkListSignal(OAIPagedNetworkResourceDescriptionList summary);


    void meshNetworkCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescription summary);
    void meshNetworkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void meshNetworkGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkResourceDescription summary);
    void meshNetworkListSignalFull(OAIHttpRequestWorker *worker, OAIPagedNetworkResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use meshNetworkCreateOrUpdateSignalError() instead")
    void meshNetworkCreateOrUpdateSignalE(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkCreateOrUpdateSignalError(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkDeleteSignalError() instead")
    void meshNetworkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkGetSignalError() instead")
    void meshNetworkGetSignalE(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkGetSignalError(OAINetworkResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkListSignalError() instead")
    void meshNetworkListSignalE(OAIPagedNetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkListSignalError(OAIPagedNetworkResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meshNetworkCreateOrUpdateSignalErrorFull() instead")
    void meshNetworkCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkDeleteSignalErrorFull() instead")
    void meshNetworkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkGetSignalErrorFull() instead")
    void meshNetworkGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshNetworkListSignalErrorFull() instead")
    void meshNetworkListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshNetworkListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
