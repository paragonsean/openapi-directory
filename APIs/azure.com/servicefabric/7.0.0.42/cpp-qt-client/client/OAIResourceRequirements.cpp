/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRequirements::OAIResourceRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRequirements::OAIResourceRequirements() {
    this->initializeModel();
}

OAIResourceRequirements::~OAIResourceRequirements() {}

void OAIResourceRequirements::initializeModel() {

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIResourceRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceRequirements::fromJsonObject(QJsonObject json) {

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIResourceRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_limits.isSet()) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_requests.isSet()) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

OAIResourceLimits OAIResourceRequirements::getLimits() const {
    return m_limits;
}
void OAIResourceRequirements::setLimits(const OAIResourceLimits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIResourceRequirements::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIResourceRequirements::is_limits_Valid() const{
    return m_limits_isValid;
}

OAIResourceRequests OAIResourceRequirements::getRequests() const {
    return m_requests;
}
void OAIResourceRequirements::setRequests(const OAIResourceRequests &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIResourceRequirements::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIResourceRequirements::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIResourceRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_requests_isValid && true;
}

} // namespace OpenAPI
