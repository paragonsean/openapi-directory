/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionInstanceCountScaleMechanism.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionInstanceCountScaleMechanism::OAIPartitionInstanceCountScaleMechanism(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionInstanceCountScaleMechanism::OAIPartitionInstanceCountScaleMechanism() {
    this->initializeModel();
}

OAIPartitionInstanceCountScaleMechanism::~OAIPartitionInstanceCountScaleMechanism() {}

void OAIPartitionInstanceCountScaleMechanism::initializeModel() {

    m_max_instance_count_isSet = false;
    m_max_instance_count_isValid = false;

    m_min_instance_count_isSet = false;
    m_min_instance_count_isValid = false;

    m_scale_increment_isSet = false;
    m_scale_increment_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIPartitionInstanceCountScaleMechanism::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionInstanceCountScaleMechanism::fromJsonObject(QJsonObject json) {

    m_max_instance_count_isValid = ::OpenAPI::fromJsonValue(m_max_instance_count, json[QString("MaxInstanceCount")]);
    m_max_instance_count_isSet = !json[QString("MaxInstanceCount")].isNull() && m_max_instance_count_isValid;

    m_min_instance_count_isValid = ::OpenAPI::fromJsonValue(m_min_instance_count, json[QString("MinInstanceCount")]);
    m_min_instance_count_isSet = !json[QString("MinInstanceCount")].isNull() && m_min_instance_count_isValid;

    m_scale_increment_isValid = ::OpenAPI::fromJsonValue(m_scale_increment, json[QString("ScaleIncrement")]);
    m_scale_increment_isSet = !json[QString("ScaleIncrement")].isNull() && m_scale_increment_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;
}

QString OAIPartitionInstanceCountScaleMechanism::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionInstanceCountScaleMechanism::asJsonObject() const {
    QJsonObject obj;
    if (m_max_instance_count_isSet) {
        obj.insert(QString("MaxInstanceCount"), ::OpenAPI::toJsonValue(m_max_instance_count));
    }
    if (m_min_instance_count_isSet) {
        obj.insert(QString("MinInstanceCount"), ::OpenAPI::toJsonValue(m_min_instance_count));
    }
    if (m_scale_increment_isSet) {
        obj.insert(QString("ScaleIncrement"), ::OpenAPI::toJsonValue(m_scale_increment));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

qint32 OAIPartitionInstanceCountScaleMechanism::getMaxInstanceCount() const {
    return m_max_instance_count;
}
void OAIPartitionInstanceCountScaleMechanism::setMaxInstanceCount(const qint32 &max_instance_count) {
    m_max_instance_count = max_instance_count;
    m_max_instance_count_isSet = true;
}

bool OAIPartitionInstanceCountScaleMechanism::is_max_instance_count_Set() const{
    return m_max_instance_count_isSet;
}

bool OAIPartitionInstanceCountScaleMechanism::is_max_instance_count_Valid() const{
    return m_max_instance_count_isValid;
}

qint32 OAIPartitionInstanceCountScaleMechanism::getMinInstanceCount() const {
    return m_min_instance_count;
}
void OAIPartitionInstanceCountScaleMechanism::setMinInstanceCount(const qint32 &min_instance_count) {
    m_min_instance_count = min_instance_count;
    m_min_instance_count_isSet = true;
}

bool OAIPartitionInstanceCountScaleMechanism::is_min_instance_count_Set() const{
    return m_min_instance_count_isSet;
}

bool OAIPartitionInstanceCountScaleMechanism::is_min_instance_count_Valid() const{
    return m_min_instance_count_isValid;
}

qint32 OAIPartitionInstanceCountScaleMechanism::getScaleIncrement() const {
    return m_scale_increment;
}
void OAIPartitionInstanceCountScaleMechanism::setScaleIncrement(const qint32 &scale_increment) {
    m_scale_increment = scale_increment;
    m_scale_increment_isSet = true;
}

bool OAIPartitionInstanceCountScaleMechanism::is_scale_increment_Set() const{
    return m_scale_increment_isSet;
}

bool OAIPartitionInstanceCountScaleMechanism::is_scale_increment_Valid() const{
    return m_scale_increment_isValid;
}

OAIScalingMechanismKind OAIPartitionInstanceCountScaleMechanism::getKind() const {
    return m_kind;
}
void OAIPartitionInstanceCountScaleMechanism::setKind(const OAIScalingMechanismKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPartitionInstanceCountScaleMechanism::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPartitionInstanceCountScaleMechanism::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIPartitionInstanceCountScaleMechanism::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_increment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionInstanceCountScaleMechanism::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_instance_count_isValid && m_min_instance_count_isValid && m_scale_increment_isValid && m_kind_isValid && true;
}

} // namespace OpenAPI
