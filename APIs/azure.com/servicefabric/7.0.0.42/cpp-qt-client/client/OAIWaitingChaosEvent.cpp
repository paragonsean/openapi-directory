/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaitingChaosEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaitingChaosEvent::OAIWaitingChaosEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaitingChaosEvent::OAIWaitingChaosEvent() {
    this->initializeModel();
}

OAIWaitingChaosEvent::~OAIWaitingChaosEvent() {}

void OAIWaitingChaosEvent::initializeModel() {

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_utc_isSet = false;
    m_time_stamp_utc_isValid = false;
}

void OAIWaitingChaosEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaitingChaosEvent::fromJsonObject(QJsonObject json) {

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_utc_isValid = ::OpenAPI::fromJsonValue(m_time_stamp_utc, json[QString("TimeStampUtc")]);
    m_time_stamp_utc_isSet = !json[QString("TimeStampUtc")].isNull() && m_time_stamp_utc_isValid;
}

QString OAIWaitingChaosEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaitingChaosEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_isSet) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_utc_isSet) {
        obj.insert(QString("TimeStampUtc"), ::OpenAPI::toJsonValue(m_time_stamp_utc));
    }
    return obj;
}

QString OAIWaitingChaosEvent::getReason() const {
    return m_reason;
}
void OAIWaitingChaosEvent::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIWaitingChaosEvent::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIWaitingChaosEvent::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIChaosEventKind OAIWaitingChaosEvent::getKind() const {
    return m_kind;
}
void OAIWaitingChaosEvent::setKind(const OAIChaosEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIWaitingChaosEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIWaitingChaosEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIWaitingChaosEvent::getTimeStampUtc() const {
    return m_time_stamp_utc;
}
void OAIWaitingChaosEvent::setTimeStampUtc(const QDateTime &time_stamp_utc) {
    m_time_stamp_utc = time_stamp_utc;
    m_time_stamp_utc_isSet = true;
}

bool OAIWaitingChaosEvent::is_time_stamp_utc_Set() const{
    return m_time_stamp_utc_isSet;
}

bool OAIWaitingChaosEvent::is_time_stamp_utc_Valid() const{
    return m_time_stamp_utc_isValid;
}

bool OAIWaitingChaosEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaitingChaosEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && m_time_stamp_utc_isValid && true;
}

} // namespace OpenAPI
