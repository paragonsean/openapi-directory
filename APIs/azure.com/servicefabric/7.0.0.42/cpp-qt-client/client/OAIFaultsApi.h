/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFaultsApi_H
#define OAI_OAIFaultsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAINodeTransitionProgress.h"
#include "OAIOperationStatus.h"
#include "OAIPartitionDataLossProgress.h"
#include "OAIPartitionQuorumLossProgress.h"
#include "OAIPartitionRestartProgress.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFaultsApi : public QObject {
    Q_OBJECT

public:
    OAIFaultsApi(const int timeOut = 0);
    ~OAIFaultsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  force bool [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void cancelOperation(const QString &api_version, const QString &operation_id, const bool &force, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDataLossProgress(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  type_filter qint32 [required]
    * @param[in]  state_filter qint32 [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getFaultOperationList(const QString &api_version, const qint32 &type_filter, const qint32 &state_filter, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNodeTransitionProgress(const QString &api_version, const QString &node_name, const QString &operation_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionRestartProgress(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getQuorumLossProgress(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  data_loss_mode QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startDataLoss(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const QString &data_loss_mode, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  node_transition_type QString [required]
    * @param[in]  node_instance_id QString [required]
    * @param[in]  stop_duration_in_seconds qint32 [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startNodeTransition(const QString &api_version, const QString &node_name, const QString &operation_id, const QString &node_transition_type, const QString &node_instance_id, const qint32 &stop_duration_in_seconds, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  restart_partition_mode QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startPartitionRestart(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const QString &restart_partition_mode, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  quorum_loss_mode QString [required]
    * @param[in]  quorum_loss_duration qint32 [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startQuorumLoss(const QString &api_version, const QString &service_id, const QString &partition_id, const QString &operation_id, const QString &quorum_loss_mode, const qint32 &quorum_loss_duration, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelOperationCallback(OAIHttpRequestWorker *worker);
    void getDataLossProgressCallback(OAIHttpRequestWorker *worker);
    void getFaultOperationListCallback(OAIHttpRequestWorker *worker);
    void getNodeTransitionProgressCallback(OAIHttpRequestWorker *worker);
    void getPartitionRestartProgressCallback(OAIHttpRequestWorker *worker);
    void getQuorumLossProgressCallback(OAIHttpRequestWorker *worker);
    void startDataLossCallback(OAIHttpRequestWorker *worker);
    void startNodeTransitionCallback(OAIHttpRequestWorker *worker);
    void startPartitionRestartCallback(OAIHttpRequestWorker *worker);
    void startQuorumLossCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelOperationSignal();
    void getDataLossProgressSignal(OAIPartitionDataLossProgress summary);
    void getFaultOperationListSignal(QList<OAIOperationStatus> summary);
    void getNodeTransitionProgressSignal(OAINodeTransitionProgress summary);
    void getPartitionRestartProgressSignal(OAIPartitionRestartProgress summary);
    void getQuorumLossProgressSignal(OAIPartitionQuorumLossProgress summary);
    void startDataLossSignal();
    void startNodeTransitionSignal();
    void startPartitionRestartSignal();
    void startQuorumLossSignal();


    void cancelOperationSignalFull(OAIHttpRequestWorker *worker);
    void getDataLossProgressSignalFull(OAIHttpRequestWorker *worker, OAIPartitionDataLossProgress summary);
    void getFaultOperationListSignalFull(OAIHttpRequestWorker *worker, QList<OAIOperationStatus> summary);
    void getNodeTransitionProgressSignalFull(OAIHttpRequestWorker *worker, OAINodeTransitionProgress summary);
    void getPartitionRestartProgressSignalFull(OAIHttpRequestWorker *worker, OAIPartitionRestartProgress summary);
    void getQuorumLossProgressSignalFull(OAIHttpRequestWorker *worker, OAIPartitionQuorumLossProgress summary);
    void startDataLossSignalFull(OAIHttpRequestWorker *worker);
    void startNodeTransitionSignalFull(OAIHttpRequestWorker *worker);
    void startPartitionRestartSignalFull(OAIHttpRequestWorker *worker);
    void startQuorumLossSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelOperationSignalError() instead")
    void cancelOperationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOperationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataLossProgressSignalError() instead")
    void getDataLossProgressSignalE(OAIPartitionDataLossProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataLossProgressSignalError(OAIPartitionDataLossProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFaultOperationListSignalError() instead")
    void getFaultOperationListSignalE(QList<OAIOperationStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFaultOperationListSignalError(QList<OAIOperationStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeTransitionProgressSignalError() instead")
    void getNodeTransitionProgressSignalE(OAINodeTransitionProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeTransitionProgressSignalError(OAINodeTransitionProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionRestartProgressSignalError() instead")
    void getPartitionRestartProgressSignalE(OAIPartitionRestartProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionRestartProgressSignalError(OAIPartitionRestartProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuorumLossProgressSignalError() instead")
    void getQuorumLossProgressSignalE(OAIPartitionQuorumLossProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuorumLossProgressSignalError(OAIPartitionQuorumLossProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDataLossSignalError() instead")
    void startDataLossSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startDataLossSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startNodeTransitionSignalError() instead")
    void startNodeTransitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startNodeTransitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPartitionRestartSignalError() instead")
    void startPartitionRestartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startPartitionRestartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startQuorumLossSignalError() instead")
    void startQuorumLossSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startQuorumLossSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelOperationSignalErrorFull() instead")
    void cancelOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataLossProgressSignalErrorFull() instead")
    void getDataLossProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataLossProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFaultOperationListSignalErrorFull() instead")
    void getFaultOperationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFaultOperationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeTransitionProgressSignalErrorFull() instead")
    void getNodeTransitionProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeTransitionProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionRestartProgressSignalErrorFull() instead")
    void getPartitionRestartProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionRestartProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuorumLossProgressSignalErrorFull() instead")
    void getQuorumLossProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuorumLossProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDataLossSignalErrorFull() instead")
    void startDataLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDataLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startNodeTransitionSignalErrorFull() instead")
    void startNodeTransitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startNodeTransitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPartitionRestartSignalErrorFull() instead")
    void startPartitionRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startPartitionRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startQuorumLossSignalErrorFull() instead")
    void startQuorumLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startQuorumLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
