/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRollingUpgradeUpdateDescription.h
 *
 * Describes the parameters for updating a rolling upgrade of application or cluster.
 */

#ifndef OAIRollingUpgradeUpdateDescription_H
#define OAIRollingUpgradeUpdateDescription_H

#include <QJsonObject>

#include "OAIFailureAction.h"
#include "OAIUpgradeMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRollingUpgradeUpdateDescription : public OAIObject {
public:
    OAIRollingUpgradeUpdateDescription();
    OAIRollingUpgradeUpdateDescription(QString json);
    ~OAIRollingUpgradeUpdateDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFailureAction getFailureAction() const;
    void setFailureAction(const OAIFailureAction &failure_action);
    bool is_failure_action_Set() const;
    bool is_failure_action_Valid() const;

    bool isForceRestart() const;
    void setForceRestart(const bool &force_restart);
    bool is_force_restart_Set() const;
    bool is_force_restart_Valid() const;

    QString getHealthCheckRetryTimeoutInMilliseconds() const;
    void setHealthCheckRetryTimeoutInMilliseconds(const QString &health_check_retry_timeout_in_milliseconds);
    bool is_health_check_retry_timeout_in_milliseconds_Set() const;
    bool is_health_check_retry_timeout_in_milliseconds_Valid() const;

    QString getHealthCheckStableDurationInMilliseconds() const;
    void setHealthCheckStableDurationInMilliseconds(const QString &health_check_stable_duration_in_milliseconds);
    bool is_health_check_stable_duration_in_milliseconds_Set() const;
    bool is_health_check_stable_duration_in_milliseconds_Valid() const;

    QString getHealthCheckWaitDurationInMilliseconds() const;
    void setHealthCheckWaitDurationInMilliseconds(const QString &health_check_wait_duration_in_milliseconds);
    bool is_health_check_wait_duration_in_milliseconds_Set() const;
    bool is_health_check_wait_duration_in_milliseconds_Valid() const;

    qint64 getInstanceCloseDelayDurationInSeconds() const;
    void setInstanceCloseDelayDurationInSeconds(const qint64 &instance_close_delay_duration_in_seconds);
    bool is_instance_close_delay_duration_in_seconds_Set() const;
    bool is_instance_close_delay_duration_in_seconds_Valid() const;

    qint64 getReplicaSetCheckTimeoutInMilliseconds() const;
    void setReplicaSetCheckTimeoutInMilliseconds(const qint64 &replica_set_check_timeout_in_milliseconds);
    bool is_replica_set_check_timeout_in_milliseconds_Set() const;
    bool is_replica_set_check_timeout_in_milliseconds_Valid() const;

    OAIUpgradeMode getRollingUpgradeMode() const;
    void setRollingUpgradeMode(const OAIUpgradeMode &rolling_upgrade_mode);
    bool is_rolling_upgrade_mode_Set() const;
    bool is_rolling_upgrade_mode_Valid() const;

    QString getUpgradeDomainTimeoutInMilliseconds() const;
    void setUpgradeDomainTimeoutInMilliseconds(const QString &upgrade_domain_timeout_in_milliseconds);
    bool is_upgrade_domain_timeout_in_milliseconds_Set() const;
    bool is_upgrade_domain_timeout_in_milliseconds_Valid() const;

    QString getUpgradeTimeoutInMilliseconds() const;
    void setUpgradeTimeoutInMilliseconds(const QString &upgrade_timeout_in_milliseconds);
    bool is_upgrade_timeout_in_milliseconds_Set() const;
    bool is_upgrade_timeout_in_milliseconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFailureAction m_failure_action;
    bool m_failure_action_isSet;
    bool m_failure_action_isValid;

    bool m_force_restart;
    bool m_force_restart_isSet;
    bool m_force_restart_isValid;

    QString m_health_check_retry_timeout_in_milliseconds;
    bool m_health_check_retry_timeout_in_milliseconds_isSet;
    bool m_health_check_retry_timeout_in_milliseconds_isValid;

    QString m_health_check_stable_duration_in_milliseconds;
    bool m_health_check_stable_duration_in_milliseconds_isSet;
    bool m_health_check_stable_duration_in_milliseconds_isValid;

    QString m_health_check_wait_duration_in_milliseconds;
    bool m_health_check_wait_duration_in_milliseconds_isSet;
    bool m_health_check_wait_duration_in_milliseconds_isValid;

    qint64 m_instance_close_delay_duration_in_seconds;
    bool m_instance_close_delay_duration_in_seconds_isSet;
    bool m_instance_close_delay_duration_in_seconds_isValid;

    qint64 m_replica_set_check_timeout_in_milliseconds;
    bool m_replica_set_check_timeout_in_milliseconds_isSet;
    bool m_replica_set_check_timeout_in_milliseconds_isValid;

    OAIUpgradeMode m_rolling_upgrade_mode;
    bool m_rolling_upgrade_mode_isSet;
    bool m_rolling_upgrade_mode_isValid;

    QString m_upgrade_domain_timeout_in_milliseconds;
    bool m_upgrade_domain_timeout_in_milliseconds_isSet;
    bool m_upgrade_domain_timeout_in_milliseconds_isValid;

    QString m_upgrade_timeout_in_milliseconds;
    bool m_upgrade_timeout_in_milliseconds_isSet;
    bool m_upgrade_timeout_in_milliseconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRollingUpgradeUpdateDescription)

#endif // OAIRollingUpgradeUpdateDescription_H
