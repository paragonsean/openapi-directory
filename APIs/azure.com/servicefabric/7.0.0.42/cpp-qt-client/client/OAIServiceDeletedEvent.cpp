/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDeletedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDeletedEvent::OAIServiceDeletedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDeletedEvent::OAIServiceDeletedEvent() {
    this->initializeModel();
}

OAIServiceDeletedEvent::~OAIServiceDeletedEvent() {}

void OAIServiceDeletedEvent::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_is_stateful_isSet = false;
    m_is_stateful_isValid = false;

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_partition_count_isSet = false;
    m_partition_count_isValid = false;

    m_service_instance_isSet = false;
    m_service_instance_isValid = false;

    m_service_package_version_isSet = false;
    m_service_package_version_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIServiceDeletedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDeletedEvent::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_is_stateful_isValid = ::OpenAPI::fromJsonValue(m_is_stateful, json[QString("IsStateful")]);
    m_is_stateful_isSet = !json[QString("IsStateful")].isNull() && m_is_stateful_isValid;

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("MinReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("MinReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_partition_count_isValid = ::OpenAPI::fromJsonValue(m_partition_count, json[QString("PartitionCount")]);
    m_partition_count_isSet = !json[QString("PartitionCount")].isNull() && m_partition_count_isValid;

    m_service_instance_isValid = ::OpenAPI::fromJsonValue(m_service_instance, json[QString("ServiceInstance")]);
    m_service_instance_isSet = !json[QString("ServiceInstance")].isNull() && m_service_instance_isValid;

    m_service_package_version_isValid = ::OpenAPI::fromJsonValue(m_service_package_version, json[QString("ServicePackageVersion")]);
    m_service_package_version_isSet = !json[QString("ServicePackageVersion")].isNull() && m_service_package_version_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("TargetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("TargetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIServiceDeletedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDeletedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_is_stateful_isSet) {
        obj.insert(QString("IsStateful"), ::OpenAPI::toJsonValue(m_is_stateful));
    }
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("MinReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_partition_count_isSet) {
        obj.insert(QString("PartitionCount"), ::OpenAPI::toJsonValue(m_partition_count));
    }
    if (m_service_instance_isSet) {
        obj.insert(QString("ServiceInstance"), ::OpenAPI::toJsonValue(m_service_instance));
    }
    if (m_service_package_version_isSet) {
        obj.insert(QString("ServicePackageVersion"), ::OpenAPI::toJsonValue(m_service_package_version));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("TargetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAIServiceDeletedEvent::getApplicationName() const {
    return m_application_name;
}
void OAIServiceDeletedEvent::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIServiceDeletedEvent::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIServiceDeletedEvent::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIServiceDeletedEvent::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIServiceDeletedEvent::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIServiceDeletedEvent::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIServiceDeletedEvent::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

bool OAIServiceDeletedEvent::isIsStateful() const {
    return m_is_stateful;
}
void OAIServiceDeletedEvent::setIsStateful(const bool &is_stateful) {
    m_is_stateful = is_stateful;
    m_is_stateful_isSet = true;
}

bool OAIServiceDeletedEvent::is_is_stateful_Set() const{
    return m_is_stateful_isSet;
}

bool OAIServiceDeletedEvent::is_is_stateful_Valid() const{
    return m_is_stateful_isValid;
}

qint32 OAIServiceDeletedEvent::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIServiceDeletedEvent::setMinReplicaSetSize(const qint32 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIServiceDeletedEvent::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIServiceDeletedEvent::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

qint32 OAIServiceDeletedEvent::getPartitionCount() const {
    return m_partition_count;
}
void OAIServiceDeletedEvent::setPartitionCount(const qint32 &partition_count) {
    m_partition_count = partition_count;
    m_partition_count_isSet = true;
}

bool OAIServiceDeletedEvent::is_partition_count_Set() const{
    return m_partition_count_isSet;
}

bool OAIServiceDeletedEvent::is_partition_count_Valid() const{
    return m_partition_count_isValid;
}

qint64 OAIServiceDeletedEvent::getServiceInstance() const {
    return m_service_instance;
}
void OAIServiceDeletedEvent::setServiceInstance(const qint64 &service_instance) {
    m_service_instance = service_instance;
    m_service_instance_isSet = true;
}

bool OAIServiceDeletedEvent::is_service_instance_Set() const{
    return m_service_instance_isSet;
}

bool OAIServiceDeletedEvent::is_service_instance_Valid() const{
    return m_service_instance_isValid;
}

QString OAIServiceDeletedEvent::getServicePackageVersion() const {
    return m_service_package_version;
}
void OAIServiceDeletedEvent::setServicePackageVersion(const QString &service_package_version) {
    m_service_package_version = service_package_version;
    m_service_package_version_isSet = true;
}

bool OAIServiceDeletedEvent::is_service_package_version_Set() const{
    return m_service_package_version_isSet;
}

bool OAIServiceDeletedEvent::is_service_package_version_Valid() const{
    return m_service_package_version_isValid;
}

QString OAIServiceDeletedEvent::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIServiceDeletedEvent::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIServiceDeletedEvent::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIServiceDeletedEvent::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

qint32 OAIServiceDeletedEvent::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIServiceDeletedEvent::setTargetReplicaSetSize(const qint32 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIServiceDeletedEvent::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIServiceDeletedEvent::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

QString OAIServiceDeletedEvent::getServiceId() const {
    return m_service_id;
}
void OAIServiceDeletedEvent::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceDeletedEvent::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceDeletedEvent::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceDeletedEvent::getCategory() const {
    return m_category;
}
void OAIServiceDeletedEvent::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIServiceDeletedEvent::is_category_Set() const{
    return m_category_isSet;
}

bool OAIServiceDeletedEvent::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIServiceDeletedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIServiceDeletedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIServiceDeletedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIServiceDeletedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIServiceDeletedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIServiceDeletedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIServiceDeletedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIServiceDeletedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIServiceDeletedEvent::getKind() const {
    return m_kind;
}
void OAIServiceDeletedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIServiceDeletedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIServiceDeletedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIServiceDeletedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIServiceDeletedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIServiceDeletedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIServiceDeletedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIServiceDeletedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stateful_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDeletedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_application_type_name_isValid && m_is_stateful_isValid && m_min_replica_set_size_isValid && m_partition_count_isValid && m_service_instance_isValid && m_service_package_version_isValid && m_service_type_name_isValid && m_target_replica_set_size_isValid && m_service_id_isValid && m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && true;
}

} // namespace OpenAPI
