/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationUpgradeCompletedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationUpgradeCompletedEvent::OAIApplicationUpgradeCompletedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationUpgradeCompletedEvent::OAIApplicationUpgradeCompletedEvent() {
    this->initializeModel();
}

OAIApplicationUpgradeCompletedEvent::~OAIApplicationUpgradeCompletedEvent() {}

void OAIApplicationUpgradeCompletedEvent::initializeModel() {

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_application_type_version_isSet = false;
    m_application_type_version_isValid = false;

    m_overall_upgrade_elapsed_time_in_ms_isSet = false;
    m_overall_upgrade_elapsed_time_in_ms_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIApplicationUpgradeCompletedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationUpgradeCompletedEvent::fromJsonObject(QJsonObject json) {

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_application_type_version, json[QString("ApplicationTypeVersion")]);
    m_application_type_version_isSet = !json[QString("ApplicationTypeVersion")].isNull() && m_application_type_version_isValid;

    m_overall_upgrade_elapsed_time_in_ms_isValid = ::OpenAPI::fromJsonValue(m_overall_upgrade_elapsed_time_in_ms, json[QString("OverallUpgradeElapsedTimeInMs")]);
    m_overall_upgrade_elapsed_time_in_ms_isSet = !json[QString("OverallUpgradeElapsedTimeInMs")].isNull() && m_overall_upgrade_elapsed_time_in_ms_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIApplicationUpgradeCompletedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationUpgradeCompletedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_application_type_version_isSet) {
        obj.insert(QString("ApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_application_type_version));
    }
    if (m_overall_upgrade_elapsed_time_in_ms_isSet) {
        obj.insert(QString("OverallUpgradeElapsedTimeInMs"), ::OpenAPI::toJsonValue(m_overall_upgrade_elapsed_time_in_ms));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAIApplicationUpgradeCompletedEvent::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIApplicationUpgradeCompletedEvent::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

QString OAIApplicationUpgradeCompletedEvent::getApplicationTypeVersion() const {
    return m_application_type_version;
}
void OAIApplicationUpgradeCompletedEvent::setApplicationTypeVersion(const QString &application_type_version) {
    m_application_type_version = application_type_version;
    m_application_type_version_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_type_version_Set() const{
    return m_application_type_version_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_type_version_Valid() const{
    return m_application_type_version_isValid;
}

double OAIApplicationUpgradeCompletedEvent::getOverallUpgradeElapsedTimeInMs() const {
    return m_overall_upgrade_elapsed_time_in_ms;
}
void OAIApplicationUpgradeCompletedEvent::setOverallUpgradeElapsedTimeInMs(const double &overall_upgrade_elapsed_time_in_ms) {
    m_overall_upgrade_elapsed_time_in_ms = overall_upgrade_elapsed_time_in_ms;
    m_overall_upgrade_elapsed_time_in_ms_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_overall_upgrade_elapsed_time_in_ms_Set() const{
    return m_overall_upgrade_elapsed_time_in_ms_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_overall_upgrade_elapsed_time_in_ms_Valid() const{
    return m_overall_upgrade_elapsed_time_in_ms_isValid;
}

QString OAIApplicationUpgradeCompletedEvent::getApplicationId() const {
    return m_application_id;
}
void OAIApplicationUpgradeCompletedEvent::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApplicationUpgradeCompletedEvent::getCategory() const {
    return m_category;
}
void OAIApplicationUpgradeCompletedEvent::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_category_Set() const{
    return m_category_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIApplicationUpgradeCompletedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIApplicationUpgradeCompletedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIApplicationUpgradeCompletedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIApplicationUpgradeCompletedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIApplicationUpgradeCompletedEvent::getKind() const {
    return m_kind;
}
void OAIApplicationUpgradeCompletedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIApplicationUpgradeCompletedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIApplicationUpgradeCompletedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIApplicationUpgradeCompletedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIApplicationUpgradeCompletedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIApplicationUpgradeCompletedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_upgrade_elapsed_time_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationUpgradeCompletedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_type_name_isValid && m_application_type_version_isValid && m_overall_upgrade_elapsed_time_in_ms_isValid && m_application_id_isValid && m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && true;
}

} // namespace OpenAPI
