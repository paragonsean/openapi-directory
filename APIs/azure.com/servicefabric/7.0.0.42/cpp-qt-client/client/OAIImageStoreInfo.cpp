/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageStoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageStoreInfo::OAIImageStoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageStoreInfo::OAIImageStoreInfo() {
    this->initializeModel();
}

OAIImageStoreInfo::~OAIImageStoreInfo() {}

void OAIImageStoreInfo::initializeModel() {

    m_disk_info_isSet = false;
    m_disk_info_isValid = false;

    m_used_by_copy_isSet = false;
    m_used_by_copy_isValid = false;

    m_used_by_metadata_isSet = false;
    m_used_by_metadata_isValid = false;

    m_used_by_register_isSet = false;
    m_used_by_register_isValid = false;

    m_used_by_staging_isSet = false;
    m_used_by_staging_isValid = false;
}

void OAIImageStoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageStoreInfo::fromJsonObject(QJsonObject json) {

    m_disk_info_isValid = ::OpenAPI::fromJsonValue(m_disk_info, json[QString("DiskInfo")]);
    m_disk_info_isSet = !json[QString("DiskInfo")].isNull() && m_disk_info_isValid;

    m_used_by_copy_isValid = ::OpenAPI::fromJsonValue(m_used_by_copy, json[QString("UsedByCopy")]);
    m_used_by_copy_isSet = !json[QString("UsedByCopy")].isNull() && m_used_by_copy_isValid;

    m_used_by_metadata_isValid = ::OpenAPI::fromJsonValue(m_used_by_metadata, json[QString("UsedByMetadata")]);
    m_used_by_metadata_isSet = !json[QString("UsedByMetadata")].isNull() && m_used_by_metadata_isValid;

    m_used_by_register_isValid = ::OpenAPI::fromJsonValue(m_used_by_register, json[QString("UsedByRegister")]);
    m_used_by_register_isSet = !json[QString("UsedByRegister")].isNull() && m_used_by_register_isValid;

    m_used_by_staging_isValid = ::OpenAPI::fromJsonValue(m_used_by_staging, json[QString("UsedByStaging")]);
    m_used_by_staging_isSet = !json[QString("UsedByStaging")].isNull() && m_used_by_staging_isValid;
}

QString OAIImageStoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageStoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_info.isSet()) {
        obj.insert(QString("DiskInfo"), ::OpenAPI::toJsonValue(m_disk_info));
    }
    if (m_used_by_copy.isSet()) {
        obj.insert(QString("UsedByCopy"), ::OpenAPI::toJsonValue(m_used_by_copy));
    }
    if (m_used_by_metadata.isSet()) {
        obj.insert(QString("UsedByMetadata"), ::OpenAPI::toJsonValue(m_used_by_metadata));
    }
    if (m_used_by_register.isSet()) {
        obj.insert(QString("UsedByRegister"), ::OpenAPI::toJsonValue(m_used_by_register));
    }
    if (m_used_by_staging.isSet()) {
        obj.insert(QString("UsedByStaging"), ::OpenAPI::toJsonValue(m_used_by_staging));
    }
    return obj;
}

OAIDiskInfo OAIImageStoreInfo::getDiskInfo() const {
    return m_disk_info;
}
void OAIImageStoreInfo::setDiskInfo(const OAIDiskInfo &disk_info) {
    m_disk_info = disk_info;
    m_disk_info_isSet = true;
}

bool OAIImageStoreInfo::is_disk_info_Set() const{
    return m_disk_info_isSet;
}

bool OAIImageStoreInfo::is_disk_info_Valid() const{
    return m_disk_info_isValid;
}

OAIUsageInfo OAIImageStoreInfo::getUsedByCopy() const {
    return m_used_by_copy;
}
void OAIImageStoreInfo::setUsedByCopy(const OAIUsageInfo &used_by_copy) {
    m_used_by_copy = used_by_copy;
    m_used_by_copy_isSet = true;
}

bool OAIImageStoreInfo::is_used_by_copy_Set() const{
    return m_used_by_copy_isSet;
}

bool OAIImageStoreInfo::is_used_by_copy_Valid() const{
    return m_used_by_copy_isValid;
}

OAIUsageInfo OAIImageStoreInfo::getUsedByMetadata() const {
    return m_used_by_metadata;
}
void OAIImageStoreInfo::setUsedByMetadata(const OAIUsageInfo &used_by_metadata) {
    m_used_by_metadata = used_by_metadata;
    m_used_by_metadata_isSet = true;
}

bool OAIImageStoreInfo::is_used_by_metadata_Set() const{
    return m_used_by_metadata_isSet;
}

bool OAIImageStoreInfo::is_used_by_metadata_Valid() const{
    return m_used_by_metadata_isValid;
}

OAIUsageInfo OAIImageStoreInfo::getUsedByRegister() const {
    return m_used_by_register;
}
void OAIImageStoreInfo::setUsedByRegister(const OAIUsageInfo &used_by_register) {
    m_used_by_register = used_by_register;
    m_used_by_register_isSet = true;
}

bool OAIImageStoreInfo::is_used_by_register_Set() const{
    return m_used_by_register_isSet;
}

bool OAIImageStoreInfo::is_used_by_register_Valid() const{
    return m_used_by_register_isValid;
}

OAIUsageInfo OAIImageStoreInfo::getUsedByStaging() const {
    return m_used_by_staging;
}
void OAIImageStoreInfo::setUsedByStaging(const OAIUsageInfo &used_by_staging) {
    m_used_by_staging = used_by_staging;
    m_used_by_staging_isSet = true;
}

bool OAIImageStoreInfo::is_used_by_staging_Set() const{
    return m_used_by_staging_isSet;
}

bool OAIImageStoreInfo::is_used_by_staging_Valid() const{
    return m_used_by_staging_isValid;
}

bool OAIImageStoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_by_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_by_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_by_register.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_by_staging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageStoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
