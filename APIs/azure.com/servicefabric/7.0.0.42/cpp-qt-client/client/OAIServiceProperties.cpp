/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProperties::OAIServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProperties::OAIServiceProperties() {
    this->initializeModel();
}

OAIServiceProperties::~OAIServiceProperties() {}

void OAIServiceProperties::initializeModel() {

    m_auto_scaling_policies_isSet = false;
    m_auto_scaling_policies_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_execution_policy_isSet = false;
    m_execution_policy_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_identity_refs_isSet = false;
    m_identity_refs_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_unhealthy_evaluation_isSet = false;
    m_unhealthy_evaluation_isValid = false;
}

void OAIServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProperties::fromJsonObject(QJsonObject json) {

    m_auto_scaling_policies_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_policies, json[QString("autoScalingPolicies")]);
    m_auto_scaling_policies_isSet = !json[QString("autoScalingPolicies")].isNull() && m_auto_scaling_policies_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_execution_policy_isValid = ::OpenAPI::fromJsonValue(m_execution_policy, json[QString("executionPolicy")]);
    m_execution_policy_isSet = !json[QString("executionPolicy")].isNull() && m_execution_policy_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("healthState")]);
    m_health_state_isSet = !json[QString("healthState")].isNull() && m_health_state_isValid;

    m_identity_refs_isValid = ::OpenAPI::fromJsonValue(m_identity_refs, json[QString("identityRefs")]);
    m_identity_refs_isSet = !json[QString("identityRefs")].isNull() && m_identity_refs_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;

    m_unhealthy_evaluation_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluation, json[QString("unhealthyEvaluation")]);
    m_unhealthy_evaluation_isSet = !json[QString("unhealthyEvaluation")].isNull() && m_unhealthy_evaluation_isValid;
}

QString OAIServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scaling_policies.size() > 0) {
        obj.insert(QString("autoScalingPolicies"), ::OpenAPI::toJsonValue(m_auto_scaling_policies));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_execution_policy.isSet()) {
        obj.insert(QString("executionPolicy"), ::OpenAPI::toJsonValue(m_execution_policy));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("healthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_identity_refs.size() > 0) {
        obj.insert(QString("identityRefs"), ::OpenAPI::toJsonValue(m_identity_refs));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_unhealthy_evaluation_isSet) {
        obj.insert(QString("unhealthyEvaluation"), ::OpenAPI::toJsonValue(m_unhealthy_evaluation));
    }
    return obj;
}

QList<OAIAutoScalingPolicy> OAIServiceProperties::getAutoScalingPolicies() const {
    return m_auto_scaling_policies;
}
void OAIServiceProperties::setAutoScalingPolicies(const QList<OAIAutoScalingPolicy> &auto_scaling_policies) {
    m_auto_scaling_policies = auto_scaling_policies;
    m_auto_scaling_policies_isSet = true;
}

bool OAIServiceProperties::is_auto_scaling_policies_Set() const{
    return m_auto_scaling_policies_isSet;
}

bool OAIServiceProperties::is_auto_scaling_policies_Valid() const{
    return m_auto_scaling_policies_isValid;
}

QString OAIServiceProperties::getDescription() const {
    return m_description;
}
void OAIServiceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceProperties::getDnsName() const {
    return m_dns_name;
}
void OAIServiceProperties::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIServiceProperties::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIServiceProperties::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

OAIExecutionPolicy OAIServiceProperties::getExecutionPolicy() const {
    return m_execution_policy;
}
void OAIServiceProperties::setExecutionPolicy(const OAIExecutionPolicy &execution_policy) {
    m_execution_policy = execution_policy;
    m_execution_policy_isSet = true;
}

bool OAIServiceProperties::is_execution_policy_Set() const{
    return m_execution_policy_isSet;
}

bool OAIServiceProperties::is_execution_policy_Valid() const{
    return m_execution_policy_isValid;
}

OAIHealthState OAIServiceProperties::getHealthState() const {
    return m_health_state;
}
void OAIServiceProperties::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIServiceProperties::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIServiceProperties::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QList<OAIServiceIdentity> OAIServiceProperties::getIdentityRefs() const {
    return m_identity_refs;
}
void OAIServiceProperties::setIdentityRefs(const QList<OAIServiceIdentity> &identity_refs) {
    m_identity_refs = identity_refs;
    m_identity_refs_isSet = true;
}

bool OAIServiceProperties::is_identity_refs_Set() const{
    return m_identity_refs_isSet;
}

bool OAIServiceProperties::is_identity_refs_Valid() const{
    return m_identity_refs_isValid;
}

qint32 OAIServiceProperties::getReplicaCount() const {
    return m_replica_count;
}
void OAIServiceProperties::setReplicaCount(const qint32 &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIServiceProperties::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIServiceProperties::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

OAIResourceStatus OAIServiceProperties::getStatus() const {
    return m_status;
}
void OAIServiceProperties::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServiceProperties::getStatusDetails() const {
    return m_status_details;
}
void OAIServiceProperties::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIServiceProperties::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIServiceProperties::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAIServiceProperties::getUnhealthyEvaluation() const {
    return m_unhealthy_evaluation;
}
void OAIServiceProperties::setUnhealthyEvaluation(const QString &unhealthy_evaluation) {
    m_unhealthy_evaluation = unhealthy_evaluation;
    m_unhealthy_evaluation_isSet = true;
}

bool OAIServiceProperties::is_unhealthy_evaluation_Set() const{
    return m_unhealthy_evaluation_isSet;
}

bool OAIServiceProperties::is_unhealthy_evaluation_Valid() const{
    return m_unhealthy_evaluation_isValid;
}

bool OAIServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scaling_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
