/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationTypeApplicationsHealthEvaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationTypeApplicationsHealthEvaluation::OAIApplicationTypeApplicationsHealthEvaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationTypeApplicationsHealthEvaluation::OAIApplicationTypeApplicationsHealthEvaluation() {
    this->initializeModel();
}

OAIApplicationTypeApplicationsHealthEvaluation::~OAIApplicationTypeApplicationsHealthEvaluation() {}

void OAIApplicationTypeApplicationsHealthEvaluation::initializeModel() {

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_max_percent_unhealthy_applications_isSet = false;
    m_max_percent_unhealthy_applications_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_unhealthy_evaluations_isSet = false;
    m_unhealthy_evaluations_isValid = false;

    m_aggregated_health_state_isSet = false;
    m_aggregated_health_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIApplicationTypeApplicationsHealthEvaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationTypeApplicationsHealthEvaluation::fromJsonObject(QJsonObject json) {

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_max_percent_unhealthy_applications_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_applications, json[QString("MaxPercentUnhealthyApplications")]);
    m_max_percent_unhealthy_applications_isSet = !json[QString("MaxPercentUnhealthyApplications")].isNull() && m_max_percent_unhealthy_applications_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;

    m_unhealthy_evaluations_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluations, json[QString("UnhealthyEvaluations")]);
    m_unhealthy_evaluations_isSet = !json[QString("UnhealthyEvaluations")].isNull() && m_unhealthy_evaluations_isValid;

    m_aggregated_health_state_isValid = ::OpenAPI::fromJsonValue(m_aggregated_health_state, json[QString("AggregatedHealthState")]);
    m_aggregated_health_state_isSet = !json[QString("AggregatedHealthState")].isNull() && m_aggregated_health_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;
}

QString OAIApplicationTypeApplicationsHealthEvaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationTypeApplicationsHealthEvaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_max_percent_unhealthy_applications_isSet) {
        obj.insert(QString("MaxPercentUnhealthyApplications"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_applications));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_unhealthy_evaluations.size() > 0) {
        obj.insert(QString("UnhealthyEvaluations"), ::OpenAPI::toJsonValue(m_unhealthy_evaluations));
    }
    if (m_aggregated_health_state.isSet()) {
        obj.insert(QString("AggregatedHealthState"), ::OpenAPI::toJsonValue(m_aggregated_health_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIApplicationTypeApplicationsHealthEvaluation::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

qint32 OAIApplicationTypeApplicationsHealthEvaluation::getMaxPercentUnhealthyApplications() const {
    return m_max_percent_unhealthy_applications;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setMaxPercentUnhealthyApplications(const qint32 &max_percent_unhealthy_applications) {
    m_max_percent_unhealthy_applications = max_percent_unhealthy_applications;
    m_max_percent_unhealthy_applications_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_max_percent_unhealthy_applications_Set() const{
    return m_max_percent_unhealthy_applications_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_max_percent_unhealthy_applications_Valid() const{
    return m_max_percent_unhealthy_applications_isValid;
}

qint64 OAIApplicationTypeApplicationsHealthEvaluation::getTotalCount() const {
    return m_total_count;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QList<OAIHealthEvaluationWrapper> OAIApplicationTypeApplicationsHealthEvaluation::getUnhealthyEvaluations() const {
    return m_unhealthy_evaluations;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setUnhealthyEvaluations(const QList<OAIHealthEvaluationWrapper> &unhealthy_evaluations) {
    m_unhealthy_evaluations = unhealthy_evaluations;
    m_unhealthy_evaluations_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_unhealthy_evaluations_Set() const{
    return m_unhealthy_evaluations_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_unhealthy_evaluations_Valid() const{
    return m_unhealthy_evaluations_isValid;
}

OAIHealthState OAIApplicationTypeApplicationsHealthEvaluation::getAggregatedHealthState() const {
    return m_aggregated_health_state;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setAggregatedHealthState(const OAIHealthState &aggregated_health_state) {
    m_aggregated_health_state = aggregated_health_state;
    m_aggregated_health_state_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_aggregated_health_state_Set() const{
    return m_aggregated_health_state_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_aggregated_health_state_Valid() const{
    return m_aggregated_health_state_isValid;
}

QString OAIApplicationTypeApplicationsHealthEvaluation::getDescription() const {
    return m_description;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_description_Valid() const{
    return m_description_isValid;
}

OAIHealthEvaluationKind OAIApplicationTypeApplicationsHealthEvaluation::getKind() const {
    return m_kind;
}
void OAIApplicationTypeApplicationsHealthEvaluation::setKind(const OAIHealthEvaluationKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregated_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationTypeApplicationsHealthEvaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
