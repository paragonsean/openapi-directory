/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupRestoreApi_H
#define OAI_OAIBackupRestoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupPartitionDescription.h"
#include "OAIBackupPolicyDescription.h"
#include "OAIBackupProgressInfo.h"
#include "OAIDisableBackupDescription.h"
#include "OAIEnableBackupDescription.h"
#include "OAIFabricError.h"
#include "OAIGetBackupByStorageQueryDescription.h"
#include "OAIPagedBackupConfigurationInfoList.h"
#include "OAIPagedBackupEntityList.h"
#include "OAIPagedBackupInfoList.h"
#include "OAIPagedBackupPolicyDescriptionList.h"
#include "OAIPartitionBackupConfigurationInfo.h"
#include "OAIRestorePartitionDescription.h"
#include "OAIRestoreProgressInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupRestoreApi : public QObject {
    Q_OBJECT

public:
    OAIBackupRestoreApi(const int timeOut = 0);
    ~OAIBackupRestoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  backup_timeout qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  backup_partition_description OAIBackupPartitionDescription [optional]
    */
    virtual void backupPartition(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &backup_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIBackupPartitionDescription> &backup_partition_description = ::OpenAPI::OptionalParam<OAIBackupPartitionDescription>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  backup_policy_description OAIBackupPolicyDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createBackupPolicy(const QString &api_version, const OAIBackupPolicyDescription &backup_policy_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteBackupPolicy(const QString &backup_policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  disable_backup_description OAIDisableBackupDescription [optional]
    */
    virtual void disableApplicationBackup(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIDisableBackupDescription> &disable_backup_description = ::OpenAPI::OptionalParam<OAIDisableBackupDescription>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  disable_backup_description OAIDisableBackupDescription [optional]
    */
    virtual void disablePartitionBackup(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIDisableBackupDescription> &disable_backup_description = ::OpenAPI::OptionalParam<OAIDisableBackupDescription>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  disable_backup_description OAIDisableBackupDescription [optional]
    */
    virtual void disableServiceBackup(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIDisableBackupDescription> &disable_backup_description = ::OpenAPI::OptionalParam<OAIDisableBackupDescription>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  enable_backup_description OAIEnableBackupDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void enableApplicationBackup(const QString &application_id, const QString &api_version, const OAIEnableBackupDescription &enable_backup_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  enable_backup_description OAIEnableBackupDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void enablePartitionBackup(const QString &partition_id, const QString &api_version, const OAIEnableBackupDescription &enable_backup_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  enable_backup_description OAIEnableBackupDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void enableServiceBackup(const QString &service_id, const QString &api_version, const OAIEnableBackupDescription &enable_backup_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getAllEntitiesBackedUpByPolicy(const QString &backup_policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationBackupConfigurationInfo(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  latest bool [optional]
    * @param[in]  start_date_time_filter QDateTime [optional]
    * @param[in]  end_date_time_filter QDateTime [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    */
    virtual void getApplicationBackupList(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &latest = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getBackupPolicyByName(const QString &backup_policy_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getBackupPolicyList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  get_backup_by_storage_query_description OAIGetBackupByStorageQueryDescription [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    */
    virtual void getBackupsFromBackupLocation(const QString &api_version, const OAIGetBackupByStorageQueryDescription &get_backup_by_storage_query_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionBackupConfigurationInfo(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  latest bool [optional]
    * @param[in]  start_date_time_filter QDateTime [optional]
    * @param[in]  end_date_time_filter QDateTime [optional]
    */
    virtual void getPartitionBackupList(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &latest = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionBackupProgress(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionRestoreProgress(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceBackupConfigurationInfo(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  latest bool [optional]
    * @param[in]  start_date_time_filter QDateTime [optional]
    * @param[in]  end_date_time_filter QDateTime [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    */
    virtual void getServiceBackupList(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &latest = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date_time_filter = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  restore_partition_description OAIRestorePartitionDescription [required]
    * @param[in]  restore_timeout qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void restorePartition(const QString &partition_id, const QString &api_version, const OAIRestorePartitionDescription &restore_partition_description, const ::OpenAPI::OptionalParam<qint32> &restore_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resumeApplicationBackup(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resumePartitionBackup(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resumeServiceBackup(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void suspendApplicationBackup(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void suspendPartitionBackup(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void suspendServiceBackup(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  backup_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  backup_policy_description OAIBackupPolicyDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void updateBackupPolicy(const QString &backup_policy_name, const QString &api_version, const OAIBackupPolicyDescription &backup_policy_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupPartitionCallback(OAIHttpRequestWorker *worker);
    void createBackupPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteBackupPolicyCallback(OAIHttpRequestWorker *worker);
    void disableApplicationBackupCallback(OAIHttpRequestWorker *worker);
    void disablePartitionBackupCallback(OAIHttpRequestWorker *worker);
    void disableServiceBackupCallback(OAIHttpRequestWorker *worker);
    void enableApplicationBackupCallback(OAIHttpRequestWorker *worker);
    void enablePartitionBackupCallback(OAIHttpRequestWorker *worker);
    void enableServiceBackupCallback(OAIHttpRequestWorker *worker);
    void getAllEntitiesBackedUpByPolicyCallback(OAIHttpRequestWorker *worker);
    void getApplicationBackupConfigurationInfoCallback(OAIHttpRequestWorker *worker);
    void getApplicationBackupListCallback(OAIHttpRequestWorker *worker);
    void getBackupPolicyByNameCallback(OAIHttpRequestWorker *worker);
    void getBackupPolicyListCallback(OAIHttpRequestWorker *worker);
    void getBackupsFromBackupLocationCallback(OAIHttpRequestWorker *worker);
    void getPartitionBackupConfigurationInfoCallback(OAIHttpRequestWorker *worker);
    void getPartitionBackupListCallback(OAIHttpRequestWorker *worker);
    void getPartitionBackupProgressCallback(OAIHttpRequestWorker *worker);
    void getPartitionRestoreProgressCallback(OAIHttpRequestWorker *worker);
    void getServiceBackupConfigurationInfoCallback(OAIHttpRequestWorker *worker);
    void getServiceBackupListCallback(OAIHttpRequestWorker *worker);
    void restorePartitionCallback(OAIHttpRequestWorker *worker);
    void resumeApplicationBackupCallback(OAIHttpRequestWorker *worker);
    void resumePartitionBackupCallback(OAIHttpRequestWorker *worker);
    void resumeServiceBackupCallback(OAIHttpRequestWorker *worker);
    void suspendApplicationBackupCallback(OAIHttpRequestWorker *worker);
    void suspendPartitionBackupCallback(OAIHttpRequestWorker *worker);
    void suspendServiceBackupCallback(OAIHttpRequestWorker *worker);
    void updateBackupPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupPartitionSignal();
    void createBackupPolicySignal();
    void deleteBackupPolicySignal();
    void disableApplicationBackupSignal();
    void disablePartitionBackupSignal();
    void disableServiceBackupSignal();
    void enableApplicationBackupSignal();
    void enablePartitionBackupSignal();
    void enableServiceBackupSignal();
    void getAllEntitiesBackedUpByPolicySignal(OAIPagedBackupEntityList summary);
    void getApplicationBackupConfigurationInfoSignal(OAIPagedBackupConfigurationInfoList summary);
    void getApplicationBackupListSignal(OAIPagedBackupInfoList summary);
    void getBackupPolicyByNameSignal(OAIBackupPolicyDescription summary);
    void getBackupPolicyListSignal(OAIPagedBackupPolicyDescriptionList summary);
    void getBackupsFromBackupLocationSignal(OAIPagedBackupInfoList summary);
    void getPartitionBackupConfigurationInfoSignal(OAIPartitionBackupConfigurationInfo summary);
    void getPartitionBackupListSignal(OAIPagedBackupInfoList summary);
    void getPartitionBackupProgressSignal(OAIBackupProgressInfo summary);
    void getPartitionRestoreProgressSignal(OAIRestoreProgressInfo summary);
    void getServiceBackupConfigurationInfoSignal(OAIPagedBackupConfigurationInfoList summary);
    void getServiceBackupListSignal(OAIPagedBackupInfoList summary);
    void restorePartitionSignal();
    void resumeApplicationBackupSignal();
    void resumePartitionBackupSignal();
    void resumeServiceBackupSignal();
    void suspendApplicationBackupSignal();
    void suspendPartitionBackupSignal();
    void suspendServiceBackupSignal();
    void updateBackupPolicySignal();


    void backupPartitionSignalFull(OAIHttpRequestWorker *worker);
    void createBackupPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteBackupPolicySignalFull(OAIHttpRequestWorker *worker);
    void disableApplicationBackupSignalFull(OAIHttpRequestWorker *worker);
    void disablePartitionBackupSignalFull(OAIHttpRequestWorker *worker);
    void disableServiceBackupSignalFull(OAIHttpRequestWorker *worker);
    void enableApplicationBackupSignalFull(OAIHttpRequestWorker *worker);
    void enablePartitionBackupSignalFull(OAIHttpRequestWorker *worker);
    void enableServiceBackupSignalFull(OAIHttpRequestWorker *worker);
    void getAllEntitiesBackedUpByPolicySignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupEntityList summary);
    void getApplicationBackupConfigurationInfoSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupConfigurationInfoList summary);
    void getApplicationBackupListSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupInfoList summary);
    void getBackupPolicyByNameSignalFull(OAIHttpRequestWorker *worker, OAIBackupPolicyDescription summary);
    void getBackupPolicyListSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupPolicyDescriptionList summary);
    void getBackupsFromBackupLocationSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupInfoList summary);
    void getPartitionBackupConfigurationInfoSignalFull(OAIHttpRequestWorker *worker, OAIPartitionBackupConfigurationInfo summary);
    void getPartitionBackupListSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupInfoList summary);
    void getPartitionBackupProgressSignalFull(OAIHttpRequestWorker *worker, OAIBackupProgressInfo summary);
    void getPartitionRestoreProgressSignalFull(OAIHttpRequestWorker *worker, OAIRestoreProgressInfo summary);
    void getServiceBackupConfigurationInfoSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupConfigurationInfoList summary);
    void getServiceBackupListSignalFull(OAIHttpRequestWorker *worker, OAIPagedBackupInfoList summary);
    void restorePartitionSignalFull(OAIHttpRequestWorker *worker);
    void resumeApplicationBackupSignalFull(OAIHttpRequestWorker *worker);
    void resumePartitionBackupSignalFull(OAIHttpRequestWorker *worker);
    void resumeServiceBackupSignalFull(OAIHttpRequestWorker *worker);
    void suspendApplicationBackupSignalFull(OAIHttpRequestWorker *worker);
    void suspendPartitionBackupSignalFull(OAIHttpRequestWorker *worker);
    void suspendServiceBackupSignalFull(OAIHttpRequestWorker *worker);
    void updateBackupPolicySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use backupPartitionSignalError() instead")
    void backupPartitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backupPartitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBackupPolicySignalError() instead")
    void createBackupPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createBackupPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBackupPolicySignalError() instead")
    void deleteBackupPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBackupPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableApplicationBackupSignalError() instead")
    void disableApplicationBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableApplicationBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disablePartitionBackupSignalError() instead")
    void disablePartitionBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disablePartitionBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableServiceBackupSignalError() instead")
    void disableServiceBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableServiceBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableApplicationBackupSignalError() instead")
    void enableApplicationBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableApplicationBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePartitionBackupSignalError() instead")
    void enablePartitionBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enablePartitionBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableServiceBackupSignalError() instead")
    void enableServiceBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableServiceBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEntitiesBackedUpByPolicySignalError() instead")
    void getAllEntitiesBackedUpByPolicySignalE(OAIPagedBackupEntityList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEntitiesBackedUpByPolicySignalError(OAIPagedBackupEntityList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationBackupConfigurationInfoSignalError() instead")
    void getApplicationBackupConfigurationInfoSignalE(OAIPagedBackupConfigurationInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationBackupConfigurationInfoSignalError(OAIPagedBackupConfigurationInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationBackupListSignalError() instead")
    void getApplicationBackupListSignalE(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationBackupListSignalError(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupPolicyByNameSignalError() instead")
    void getBackupPolicyByNameSignalE(OAIBackupPolicyDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupPolicyByNameSignalError(OAIBackupPolicyDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupPolicyListSignalError() instead")
    void getBackupPolicyListSignalE(OAIPagedBackupPolicyDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupPolicyListSignalError(OAIPagedBackupPolicyDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupsFromBackupLocationSignalError() instead")
    void getBackupsFromBackupLocationSignalE(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupsFromBackupLocationSignalError(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupConfigurationInfoSignalError() instead")
    void getPartitionBackupConfigurationInfoSignalE(OAIPartitionBackupConfigurationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupConfigurationInfoSignalError(OAIPartitionBackupConfigurationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupListSignalError() instead")
    void getPartitionBackupListSignalE(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupListSignalError(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupProgressSignalError() instead")
    void getPartitionBackupProgressSignalE(OAIBackupProgressInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupProgressSignalError(OAIBackupProgressInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionRestoreProgressSignalError() instead")
    void getPartitionRestoreProgressSignalE(OAIRestoreProgressInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionRestoreProgressSignalError(OAIRestoreProgressInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceBackupConfigurationInfoSignalError() instead")
    void getServiceBackupConfigurationInfoSignalE(OAIPagedBackupConfigurationInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceBackupConfigurationInfoSignalError(OAIPagedBackupConfigurationInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceBackupListSignalError() instead")
    void getServiceBackupListSignalE(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceBackupListSignalError(OAIPagedBackupInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restorePartitionSignalError() instead")
    void restorePartitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restorePartitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeApplicationBackupSignalError() instead")
    void resumeApplicationBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumeApplicationBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumePartitionBackupSignalError() instead")
    void resumePartitionBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumePartitionBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeServiceBackupSignalError() instead")
    void resumeServiceBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumeServiceBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendApplicationBackupSignalError() instead")
    void suspendApplicationBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suspendApplicationBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendPartitionBackupSignalError() instead")
    void suspendPartitionBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suspendPartitionBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendServiceBackupSignalError() instead")
    void suspendServiceBackupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suspendServiceBackupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBackupPolicySignalError() instead")
    void updateBackupPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateBackupPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupPartitionSignalErrorFull() instead")
    void backupPartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupPartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBackupPolicySignalErrorFull() instead")
    void createBackupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBackupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBackupPolicySignalErrorFull() instead")
    void deleteBackupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBackupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableApplicationBackupSignalErrorFull() instead")
    void disableApplicationBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableApplicationBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disablePartitionBackupSignalErrorFull() instead")
    void disablePartitionBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disablePartitionBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableServiceBackupSignalErrorFull() instead")
    void disableServiceBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableServiceBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableApplicationBackupSignalErrorFull() instead")
    void enableApplicationBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableApplicationBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePartitionBackupSignalErrorFull() instead")
    void enablePartitionBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enablePartitionBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableServiceBackupSignalErrorFull() instead")
    void enableServiceBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableServiceBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllEntitiesBackedUpByPolicySignalErrorFull() instead")
    void getAllEntitiesBackedUpByPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllEntitiesBackedUpByPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationBackupConfigurationInfoSignalErrorFull() instead")
    void getApplicationBackupConfigurationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationBackupConfigurationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationBackupListSignalErrorFull() instead")
    void getApplicationBackupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationBackupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupPolicyByNameSignalErrorFull() instead")
    void getBackupPolicyByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupPolicyByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupPolicyListSignalErrorFull() instead")
    void getBackupPolicyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupPolicyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupsFromBackupLocationSignalErrorFull() instead")
    void getBackupsFromBackupLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupsFromBackupLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupConfigurationInfoSignalErrorFull() instead")
    void getPartitionBackupConfigurationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupConfigurationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupListSignalErrorFull() instead")
    void getPartitionBackupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionBackupProgressSignalErrorFull() instead")
    void getPartitionBackupProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionBackupProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionRestoreProgressSignalErrorFull() instead")
    void getPartitionRestoreProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionRestoreProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceBackupConfigurationInfoSignalErrorFull() instead")
    void getServiceBackupConfigurationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceBackupConfigurationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceBackupListSignalErrorFull() instead")
    void getServiceBackupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceBackupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restorePartitionSignalErrorFull() instead")
    void restorePartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restorePartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeApplicationBackupSignalErrorFull() instead")
    void resumeApplicationBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeApplicationBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumePartitionBackupSignalErrorFull() instead")
    void resumePartitionBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumePartitionBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeServiceBackupSignalErrorFull() instead")
    void resumeServiceBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeServiceBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendApplicationBackupSignalErrorFull() instead")
    void suspendApplicationBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendApplicationBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendPartitionBackupSignalErrorFull() instead")
    void suspendPartitionBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendPartitionBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendServiceBackupSignalErrorFull() instead")
    void suspendServiceBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendServiceBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBackupPolicySignalErrorFull() instead")
    void updateBackupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBackupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
