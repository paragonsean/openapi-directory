/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReconfigurationPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReconfigurationPhase::OAIReconfigurationPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReconfigurationPhase::OAIReconfigurationPhase() {
    this->initializeModel();
}

OAIReconfigurationPhase::~OAIReconfigurationPhase() {}

void OAIReconfigurationPhase::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReconfigurationPhase::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReconfigurationPhase::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Phase0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::PHASE0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Phase1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::PHASE1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Phase2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::PHASE2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Phase3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::PHASE3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Phase4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::PHASE4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AbortPhaseZero", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReconfigurationPhase::ABORTPHASEZERO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReconfigurationPhase::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReconfigurationPhase::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReconfigurationPhase::UNKNOWN:
            val = "Unknown";
            break;
        case eOAIReconfigurationPhase::NONE:
            val = "None";
            break;
        case eOAIReconfigurationPhase::PHASE0:
            val = "Phase0";
            break;
        case eOAIReconfigurationPhase::PHASE1:
            val = "Phase1";
            break;
        case eOAIReconfigurationPhase::PHASE2:
            val = "Phase2";
            break;
        case eOAIReconfigurationPhase::PHASE3:
            val = "Phase3";
            break;
        case eOAIReconfigurationPhase::PHASE4:
            val = "Phase4";
            break;
        case eOAIReconfigurationPhase::ABORTPHASEZERO:
            val = "AbortPhaseZero";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReconfigurationPhase::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReconfigurationPhase::eOAIReconfigurationPhase OAIReconfigurationPhase::getValue() const {
    return m_value;
}

void OAIReconfigurationPhase::setValue(const OAIReconfigurationPhase::eOAIReconfigurationPhase& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReconfigurationPhase::isSet() const {
    
    return m_value_isSet;
}

bool OAIReconfigurationPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
