/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChaosStartedEvent.h
 *
 * Chaos Started event.
 */

#ifndef OAIChaosStartedEvent_H
#define OAIChaosStartedEvent_H

#include <QJsonObject>

#include "OAIClusterEvent.h"
#include "OAIFabricEventKind.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChaosStartedEvent : public OAIObject {
public:
    OAIChaosStartedEvent();
    OAIChaosStartedEvent(QString json);
    ~OAIChaosStartedEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChaosContext() const;
    void setChaosContext(const QString &chaos_context);
    bool is_chaos_context_Set() const;
    bool is_chaos_context_Valid() const;

    QString getClusterHealthPolicy() const;
    void setClusterHealthPolicy(const QString &cluster_health_policy);
    bool is_cluster_health_policy_Set() const;
    bool is_cluster_health_policy_Valid() const;

    QString getIncludedApplicationList() const;
    void setIncludedApplicationList(const QString &included_application_list);
    bool is_included_application_list_Set() const;
    bool is_included_application_list_Valid() const;

    QString getIncludedNodeTypeList() const;
    void setIncludedNodeTypeList(const QString &included_node_type_list);
    bool is_included_node_type_list_Set() const;
    bool is_included_node_type_list_Valid() const;

    double getMaxClusterStabilizationTimeoutInSeconds() const;
    void setMaxClusterStabilizationTimeoutInSeconds(const double &max_cluster_stabilization_timeout_in_seconds);
    bool is_max_cluster_stabilization_timeout_in_seconds_Set() const;
    bool is_max_cluster_stabilization_timeout_in_seconds_Valid() const;

    qint64 getMaxConcurrentFaults() const;
    void setMaxConcurrentFaults(const qint64 &max_concurrent_faults);
    bool is_max_concurrent_faults_Set() const;
    bool is_max_concurrent_faults_Valid() const;

    bool isMoveReplicaFaultEnabled() const;
    void setMoveReplicaFaultEnabled(const bool &move_replica_fault_enabled);
    bool is_move_replica_fault_enabled_Set() const;
    bool is_move_replica_fault_enabled_Valid() const;

    double getTimeToRunInSeconds() const;
    void setTimeToRunInSeconds(const double &time_to_run_in_seconds);
    bool is_time_to_run_in_seconds_Set() const;
    bool is_time_to_run_in_seconds_Valid() const;

    double getWaitTimeBetweenFaultsInSeconds() const;
    void setWaitTimeBetweenFaultsInSeconds(const double &wait_time_between_faults_in_seconds);
    bool is_wait_time_between_faults_in_seconds_Set() const;
    bool is_wait_time_between_faults_in_seconds_Valid() const;

    double getWaitTimeBetweenIterationsInSeconds() const;
    void setWaitTimeBetweenIterationsInSeconds(const double &wait_time_between_iterations_in_seconds);
    bool is_wait_time_between_iterations_in_seconds_Set() const;
    bool is_wait_time_between_iterations_in_seconds_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getEventInstanceId() const;
    void setEventInstanceId(const QString &event_instance_id);
    bool is_event_instance_id_Set() const;
    bool is_event_instance_id_Valid() const;

    bool isHasCorrelatedEvents() const;
    void setHasCorrelatedEvents(const bool &has_correlated_events);
    bool is_has_correlated_events_Set() const;
    bool is_has_correlated_events_Valid() const;

    OAIFabricEventKind getKind() const;
    void setKind(const OAIFabricEventKind &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_chaos_context;
    bool m_chaos_context_isSet;
    bool m_chaos_context_isValid;

    QString m_cluster_health_policy;
    bool m_cluster_health_policy_isSet;
    bool m_cluster_health_policy_isValid;

    QString m_included_application_list;
    bool m_included_application_list_isSet;
    bool m_included_application_list_isValid;

    QString m_included_node_type_list;
    bool m_included_node_type_list_isSet;
    bool m_included_node_type_list_isValid;

    double m_max_cluster_stabilization_timeout_in_seconds;
    bool m_max_cluster_stabilization_timeout_in_seconds_isSet;
    bool m_max_cluster_stabilization_timeout_in_seconds_isValid;

    qint64 m_max_concurrent_faults;
    bool m_max_concurrent_faults_isSet;
    bool m_max_concurrent_faults_isValid;

    bool m_move_replica_fault_enabled;
    bool m_move_replica_fault_enabled_isSet;
    bool m_move_replica_fault_enabled_isValid;

    double m_time_to_run_in_seconds;
    bool m_time_to_run_in_seconds_isSet;
    bool m_time_to_run_in_seconds_isValid;

    double m_wait_time_between_faults_in_seconds;
    bool m_wait_time_between_faults_in_seconds_isSet;
    bool m_wait_time_between_faults_in_seconds_isValid;

    double m_wait_time_between_iterations_in_seconds;
    bool m_wait_time_between_iterations_in_seconds_isSet;
    bool m_wait_time_between_iterations_in_seconds_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_event_instance_id;
    bool m_event_instance_id_isSet;
    bool m_event_instance_id_isValid;

    bool m_has_correlated_events;
    bool m_has_correlated_events_isSet;
    bool m_has_correlated_events_isValid;

    OAIFabricEventKind m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QDateTime m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChaosStartedEvent)

#endif // OAIChaosStartedEvent_H
