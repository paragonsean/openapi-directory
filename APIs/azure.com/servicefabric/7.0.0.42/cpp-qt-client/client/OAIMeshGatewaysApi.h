/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeshGatewaysApi_H
#define OAI_OAIMeshGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAIGatewayResourceDescription.h"
#include "OAIPagedGatewayResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeshGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAIMeshGatewaysApi(const int timeOut = 0);
    ~OAIMeshGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  gateway_resource_name QString [required]
    * @param[in]  gateway_resource_description OAIGatewayResourceDescription [required]
    */
    virtual void meshGatewayCreateOrUpdate(const QString &api_version, const QString &gateway_resource_name, const OAIGatewayResourceDescription &gateway_resource_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  gateway_resource_name QString [required]
    */
    virtual void meshGatewayDelete(const QString &api_version, const QString &gateway_resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  gateway_resource_name QString [required]
    */
    virtual void meshGatewayGet(const QString &api_version, const QString &gateway_resource_name);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void meshGatewayList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meshGatewayCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void meshGatewayDeleteCallback(OAIHttpRequestWorker *worker);
    void meshGatewayGetCallback(OAIHttpRequestWorker *worker);
    void meshGatewayListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meshGatewayCreateOrUpdateSignal(OAIGatewayResourceDescription summary);
    void meshGatewayDeleteSignal();
    void meshGatewayGetSignal(OAIGatewayResourceDescription summary);
    void meshGatewayListSignal(OAIPagedGatewayResourceDescriptionList summary);


    void meshGatewayCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGatewayResourceDescription summary);
    void meshGatewayDeleteSignalFull(OAIHttpRequestWorker *worker);
    void meshGatewayGetSignalFull(OAIHttpRequestWorker *worker, OAIGatewayResourceDescription summary);
    void meshGatewayListSignalFull(OAIHttpRequestWorker *worker, OAIPagedGatewayResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use meshGatewayCreateOrUpdateSignalError() instead")
    void meshGatewayCreateOrUpdateSignalE(OAIGatewayResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayCreateOrUpdateSignalError(OAIGatewayResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayDeleteSignalError() instead")
    void meshGatewayDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayGetSignalError() instead")
    void meshGatewayGetSignalE(OAIGatewayResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayGetSignalError(OAIGatewayResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayListSignalError() instead")
    void meshGatewayListSignalE(OAIPagedGatewayResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayListSignalError(OAIPagedGatewayResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meshGatewayCreateOrUpdateSignalErrorFull() instead")
    void meshGatewayCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayDeleteSignalErrorFull() instead")
    void meshGatewayDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayGetSignalErrorFull() instead")
    void meshGatewayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshGatewayListSignalErrorFull() instead")
    void meshGatewayListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshGatewayListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
