/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniformInt64RangePartitionSchemeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniformInt64RangePartitionSchemeDescription::OAIUniformInt64RangePartitionSchemeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniformInt64RangePartitionSchemeDescription::OAIUniformInt64RangePartitionSchemeDescription() {
    this->initializeModel();
}

OAIUniformInt64RangePartitionSchemeDescription::~OAIUniformInt64RangePartitionSchemeDescription() {}

void OAIUniformInt64RangePartitionSchemeDescription::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_high_key_isSet = false;
    m_high_key_isValid = false;

    m_low_key_isSet = false;
    m_low_key_isValid = false;

    m_partition_scheme_isSet = false;
    m_partition_scheme_isValid = false;
}

void OAIUniformInt64RangePartitionSchemeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniformInt64RangePartitionSchemeDescription::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_high_key_isValid = ::OpenAPI::fromJsonValue(m_high_key, json[QString("HighKey")]);
    m_high_key_isSet = !json[QString("HighKey")].isNull() && m_high_key_isValid;

    m_low_key_isValid = ::OpenAPI::fromJsonValue(m_low_key, json[QString("LowKey")]);
    m_low_key_isSet = !json[QString("LowKey")].isNull() && m_low_key_isValid;

    m_partition_scheme_isValid = ::OpenAPI::fromJsonValue(m_partition_scheme, json[QString("PartitionScheme")]);
    m_partition_scheme_isSet = !json[QString("PartitionScheme")].isNull() && m_partition_scheme_isValid;
}

QString OAIUniformInt64RangePartitionSchemeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniformInt64RangePartitionSchemeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_high_key_isSet) {
        obj.insert(QString("HighKey"), ::OpenAPI::toJsonValue(m_high_key));
    }
    if (m_low_key_isSet) {
        obj.insert(QString("LowKey"), ::OpenAPI::toJsonValue(m_low_key));
    }
    if (m_partition_scheme.isSet()) {
        obj.insert(QString("PartitionScheme"), ::OpenAPI::toJsonValue(m_partition_scheme));
    }
    return obj;
}

qint32 OAIUniformInt64RangePartitionSchemeDescription::getCount() const {
    return m_count;
}
void OAIUniformInt64RangePartitionSchemeDescription::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_count_Set() const{
    return m_count_isSet;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIUniformInt64RangePartitionSchemeDescription::getHighKey() const {
    return m_high_key;
}
void OAIUniformInt64RangePartitionSchemeDescription::setHighKey(const QString &high_key) {
    m_high_key = high_key;
    m_high_key_isSet = true;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_high_key_Set() const{
    return m_high_key_isSet;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_high_key_Valid() const{
    return m_high_key_isValid;
}

QString OAIUniformInt64RangePartitionSchemeDescription::getLowKey() const {
    return m_low_key;
}
void OAIUniformInt64RangePartitionSchemeDescription::setLowKey(const QString &low_key) {
    m_low_key = low_key;
    m_low_key_isSet = true;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_low_key_Set() const{
    return m_low_key_isSet;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_low_key_Valid() const{
    return m_low_key_isValid;
}

OAIPartitionScheme OAIUniformInt64RangePartitionSchemeDescription::getPartitionScheme() const {
    return m_partition_scheme;
}
void OAIUniformInt64RangePartitionSchemeDescription::setPartitionScheme(const OAIPartitionScheme &partition_scheme) {
    m_partition_scheme = partition_scheme;
    m_partition_scheme_isSet = true;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_partition_scheme_Set() const{
    return m_partition_scheme_isSet;
}

bool OAIUniformInt64RangePartitionSchemeDescription::is_partition_scheme_Valid() const{
    return m_partition_scheme_isValid;
}

bool OAIUniformInt64RangePartitionSchemeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniformInt64RangePartitionSchemeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_high_key_isValid && m_low_key_isValid && m_partition_scheme_isValid && true;
}

} // namespace OpenAPI
