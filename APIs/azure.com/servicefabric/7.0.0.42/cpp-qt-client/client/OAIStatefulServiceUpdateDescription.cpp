/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatefulServiceUpdateDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatefulServiceUpdateDescription::OAIStatefulServiceUpdateDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatefulServiceUpdateDescription::OAIStatefulServiceUpdateDescription() {
    this->initializeModel();
}

OAIStatefulServiceUpdateDescription::~OAIStatefulServiceUpdateDescription() {}

void OAIStatefulServiceUpdateDescription::initializeModel() {

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_quorum_loss_wait_duration_seconds_isSet = false;
    m_quorum_loss_wait_duration_seconds_isValid = false;

    m_replica_restart_wait_duration_seconds_isSet = false;
    m_replica_restart_wait_duration_seconds_isValid = false;

    m_service_placement_time_limit_seconds_isSet = false;
    m_service_placement_time_limit_seconds_isValid = false;

    m_stand_by_replica_keep_duration_seconds_isSet = false;
    m_stand_by_replica_keep_duration_seconds_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;

    m_correlation_scheme_isSet = false;
    m_correlation_scheme_isValid = false;

    m_default_move_cost_isSet = false;
    m_default_move_cost_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_load_metrics_isSet = false;
    m_load_metrics_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_scaling_policies_isSet = false;
    m_scaling_policies_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;
}

void OAIStatefulServiceUpdateDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatefulServiceUpdateDescription::fromJsonObject(QJsonObject json) {

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("MinReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("MinReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_quorum_loss_wait_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_quorum_loss_wait_duration_seconds, json[QString("QuorumLossWaitDurationSeconds")]);
    m_quorum_loss_wait_duration_seconds_isSet = !json[QString("QuorumLossWaitDurationSeconds")].isNull() && m_quorum_loss_wait_duration_seconds_isValid;

    m_replica_restart_wait_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_replica_restart_wait_duration_seconds, json[QString("ReplicaRestartWaitDurationSeconds")]);
    m_replica_restart_wait_duration_seconds_isSet = !json[QString("ReplicaRestartWaitDurationSeconds")].isNull() && m_replica_restart_wait_duration_seconds_isValid;

    m_service_placement_time_limit_seconds_isValid = ::OpenAPI::fromJsonValue(m_service_placement_time_limit_seconds, json[QString("ServicePlacementTimeLimitSeconds")]);
    m_service_placement_time_limit_seconds_isSet = !json[QString("ServicePlacementTimeLimitSeconds")].isNull() && m_service_placement_time_limit_seconds_isValid;

    m_stand_by_replica_keep_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_stand_by_replica_keep_duration_seconds, json[QString("StandByReplicaKeepDurationSeconds")]);
    m_stand_by_replica_keep_duration_seconds_isSet = !json[QString("StandByReplicaKeepDurationSeconds")].isNull() && m_stand_by_replica_keep_duration_seconds_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("TargetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("TargetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;

    m_correlation_scheme_isValid = ::OpenAPI::fromJsonValue(m_correlation_scheme, json[QString("CorrelationScheme")]);
    m_correlation_scheme_isSet = !json[QString("CorrelationScheme")].isNull() && m_correlation_scheme_isValid;

    m_default_move_cost_isValid = ::OpenAPI::fromJsonValue(m_default_move_cost, json[QString("DefaultMoveCost")]);
    m_default_move_cost_isSet = !json[QString("DefaultMoveCost")].isNull() && m_default_move_cost_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_load_metrics_isValid = ::OpenAPI::fromJsonValue(m_load_metrics, json[QString("LoadMetrics")]);
    m_load_metrics_isSet = !json[QString("LoadMetrics")].isNull() && m_load_metrics_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_scaling_policies_isValid = ::OpenAPI::fromJsonValue(m_scaling_policies, json[QString("ScalingPolicies")]);
    m_scaling_policies_isSet = !json[QString("ScalingPolicies")].isNull() && m_scaling_policies_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("ServicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("ServicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;
}

QString OAIStatefulServiceUpdateDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatefulServiceUpdateDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("MinReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_quorum_loss_wait_duration_seconds_isSet) {
        obj.insert(QString("QuorumLossWaitDurationSeconds"), ::OpenAPI::toJsonValue(m_quorum_loss_wait_duration_seconds));
    }
    if (m_replica_restart_wait_duration_seconds_isSet) {
        obj.insert(QString("ReplicaRestartWaitDurationSeconds"), ::OpenAPI::toJsonValue(m_replica_restart_wait_duration_seconds));
    }
    if (m_service_placement_time_limit_seconds_isSet) {
        obj.insert(QString("ServicePlacementTimeLimitSeconds"), ::OpenAPI::toJsonValue(m_service_placement_time_limit_seconds));
    }
    if (m_stand_by_replica_keep_duration_seconds_isSet) {
        obj.insert(QString("StandByReplicaKeepDurationSeconds"), ::OpenAPI::toJsonValue(m_stand_by_replica_keep_duration_seconds));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("TargetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    if (m_correlation_scheme.size() > 0) {
        obj.insert(QString("CorrelationScheme"), ::OpenAPI::toJsonValue(m_correlation_scheme));
    }
    if (m_default_move_cost.isSet()) {
        obj.insert(QString("DefaultMoveCost"), ::OpenAPI::toJsonValue(m_default_move_cost));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_load_metrics.size() > 0) {
        obj.insert(QString("LoadMetrics"), ::OpenAPI::toJsonValue(m_load_metrics));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_scaling_policies.size() > 0) {
        obj.insert(QString("ScalingPolicies"), ::OpenAPI::toJsonValue(m_scaling_policies));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_placement_policies.size() > 0) {
        obj.insert(QString("ServicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    return obj;
}

qint32 OAIStatefulServiceUpdateDescription::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIStatefulServiceUpdateDescription::setMinReplicaSetSize(const qint32 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

QString OAIStatefulServiceUpdateDescription::getQuorumLossWaitDurationSeconds() const {
    return m_quorum_loss_wait_duration_seconds;
}
void OAIStatefulServiceUpdateDescription::setQuorumLossWaitDurationSeconds(const QString &quorum_loss_wait_duration_seconds) {
    m_quorum_loss_wait_duration_seconds = quorum_loss_wait_duration_seconds;
    m_quorum_loss_wait_duration_seconds_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_quorum_loss_wait_duration_seconds_Set() const{
    return m_quorum_loss_wait_duration_seconds_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_quorum_loss_wait_duration_seconds_Valid() const{
    return m_quorum_loss_wait_duration_seconds_isValid;
}

QString OAIStatefulServiceUpdateDescription::getReplicaRestartWaitDurationSeconds() const {
    return m_replica_restart_wait_duration_seconds;
}
void OAIStatefulServiceUpdateDescription::setReplicaRestartWaitDurationSeconds(const QString &replica_restart_wait_duration_seconds) {
    m_replica_restart_wait_duration_seconds = replica_restart_wait_duration_seconds;
    m_replica_restart_wait_duration_seconds_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_replica_restart_wait_duration_seconds_Set() const{
    return m_replica_restart_wait_duration_seconds_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_replica_restart_wait_duration_seconds_Valid() const{
    return m_replica_restart_wait_duration_seconds_isValid;
}

QString OAIStatefulServiceUpdateDescription::getServicePlacementTimeLimitSeconds() const {
    return m_service_placement_time_limit_seconds;
}
void OAIStatefulServiceUpdateDescription::setServicePlacementTimeLimitSeconds(const QString &service_placement_time_limit_seconds) {
    m_service_placement_time_limit_seconds = service_placement_time_limit_seconds;
    m_service_placement_time_limit_seconds_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_service_placement_time_limit_seconds_Set() const{
    return m_service_placement_time_limit_seconds_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_service_placement_time_limit_seconds_Valid() const{
    return m_service_placement_time_limit_seconds_isValid;
}

QString OAIStatefulServiceUpdateDescription::getStandByReplicaKeepDurationSeconds() const {
    return m_stand_by_replica_keep_duration_seconds;
}
void OAIStatefulServiceUpdateDescription::setStandByReplicaKeepDurationSeconds(const QString &stand_by_replica_keep_duration_seconds) {
    m_stand_by_replica_keep_duration_seconds = stand_by_replica_keep_duration_seconds;
    m_stand_by_replica_keep_duration_seconds_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_stand_by_replica_keep_duration_seconds_Set() const{
    return m_stand_by_replica_keep_duration_seconds_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_stand_by_replica_keep_duration_seconds_Valid() const{
    return m_stand_by_replica_keep_duration_seconds_isValid;
}

qint32 OAIStatefulServiceUpdateDescription::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIStatefulServiceUpdateDescription::setTargetReplicaSetSize(const qint32 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

QList<OAIServiceCorrelationDescription> OAIStatefulServiceUpdateDescription::getCorrelationScheme() const {
    return m_correlation_scheme;
}
void OAIStatefulServiceUpdateDescription::setCorrelationScheme(const QList<OAIServiceCorrelationDescription> &correlation_scheme) {
    m_correlation_scheme = correlation_scheme;
    m_correlation_scheme_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_correlation_scheme_Set() const{
    return m_correlation_scheme_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_correlation_scheme_Valid() const{
    return m_correlation_scheme_isValid;
}

OAIMoveCost OAIStatefulServiceUpdateDescription::getDefaultMoveCost() const {
    return m_default_move_cost;
}
void OAIStatefulServiceUpdateDescription::setDefaultMoveCost(const OAIMoveCost &default_move_cost) {
    m_default_move_cost = default_move_cost;
    m_default_move_cost_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_default_move_cost_Set() const{
    return m_default_move_cost_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_default_move_cost_Valid() const{
    return m_default_move_cost_isValid;
}

QString OAIStatefulServiceUpdateDescription::getFlags() const {
    return m_flags;
}
void OAIStatefulServiceUpdateDescription::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_flags_Valid() const{
    return m_flags_isValid;
}

QList<OAIServiceLoadMetricDescription> OAIStatefulServiceUpdateDescription::getLoadMetrics() const {
    return m_load_metrics;
}
void OAIStatefulServiceUpdateDescription::setLoadMetrics(const QList<OAIServiceLoadMetricDescription> &load_metrics) {
    m_load_metrics = load_metrics;
    m_load_metrics_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_load_metrics_Set() const{
    return m_load_metrics_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_load_metrics_Valid() const{
    return m_load_metrics_isValid;
}

QString OAIStatefulServiceUpdateDescription::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIStatefulServiceUpdateDescription::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIScalingPolicyDescription> OAIStatefulServiceUpdateDescription::getScalingPolicies() const {
    return m_scaling_policies;
}
void OAIStatefulServiceUpdateDescription::setScalingPolicies(const QList<OAIScalingPolicyDescription> &scaling_policies) {
    m_scaling_policies = scaling_policies;
    m_scaling_policies_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_scaling_policies_Set() const{
    return m_scaling_policies_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_scaling_policies_Valid() const{
    return m_scaling_policies_isValid;
}

OAIServiceKind OAIStatefulServiceUpdateDescription::getServiceKind() const {
    return m_service_kind;
}
void OAIStatefulServiceUpdateDescription::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QList<OAIServicePlacementPolicyDescription> OAIStatefulServiceUpdateDescription::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIStatefulServiceUpdateDescription::setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIStatefulServiceUpdateDescription::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIStatefulServiceUpdateDescription::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

bool OAIStatefulServiceUpdateDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quorum_loss_wait_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_restart_wait_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_time_limit_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stand_by_replica_keep_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_scheme.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_move_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatefulServiceUpdateDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
