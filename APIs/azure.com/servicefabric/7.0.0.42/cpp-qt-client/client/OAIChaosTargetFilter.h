/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChaosTargetFilter.h
 *
 * Defines all filters for targeted Chaos faults, for example, faulting only certain node types or faulting only certain applications. If ChaosTargetFilter is not used, Chaos faults all cluster entities. If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter specification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible to specify an intersection of NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify \&quot;fault this application only when it is on that node type.\&quot; Once an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be excluded using ChaosTargetFilter. Even if applicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted because it happens to be on a node of nodeTypeY that is included in NodeTypeInclusionList. If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an ArgumentException is thrown.
 */

#ifndef OAIChaosTargetFilter_H
#define OAIChaosTargetFilter_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChaosTargetFilter : public OAIObject {
public:
    OAIChaosTargetFilter();
    OAIChaosTargetFilter(QString json);
    ~OAIChaosTargetFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getApplicationInclusionList() const;
    void setApplicationInclusionList(const QList<QString> &application_inclusion_list);
    bool is_application_inclusion_list_Set() const;
    bool is_application_inclusion_list_Valid() const;

    QList<QString> getNodeTypeInclusionList() const;
    void setNodeTypeInclusionList(const QList<QString> &node_type_inclusion_list);
    bool is_node_type_inclusion_list_Set() const;
    bool is_node_type_inclusion_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_application_inclusion_list;
    bool m_application_inclusion_list_isSet;
    bool m_application_inclusion_list_isValid;

    QList<QString> m_node_type_inclusion_list;
    bool m_node_type_inclusion_list_isSet;
    bool m_node_type_inclusion_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChaosTargetFilter)

#endif // OAIChaosTargetFilter_H
