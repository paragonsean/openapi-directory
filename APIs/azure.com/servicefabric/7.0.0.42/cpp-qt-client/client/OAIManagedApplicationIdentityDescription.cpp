/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedApplicationIdentityDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedApplicationIdentityDescription::OAIManagedApplicationIdentityDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedApplicationIdentityDescription::OAIManagedApplicationIdentityDescription() {
    this->initializeModel();
}

OAIManagedApplicationIdentityDescription::~OAIManagedApplicationIdentityDescription() {}

void OAIManagedApplicationIdentityDescription::initializeModel() {

    m_managed_identities_isSet = false;
    m_managed_identities_isValid = false;

    m_token_service_endpoint_isSet = false;
    m_token_service_endpoint_isValid = false;
}

void OAIManagedApplicationIdentityDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedApplicationIdentityDescription::fromJsonObject(QJsonObject json) {

    m_managed_identities_isValid = ::OpenAPI::fromJsonValue(m_managed_identities, json[QString("ManagedIdentities")]);
    m_managed_identities_isSet = !json[QString("ManagedIdentities")].isNull() && m_managed_identities_isValid;

    m_token_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_service_endpoint, json[QString("TokenServiceEndpoint")]);
    m_token_service_endpoint_isSet = !json[QString("TokenServiceEndpoint")].isNull() && m_token_service_endpoint_isValid;
}

QString OAIManagedApplicationIdentityDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedApplicationIdentityDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_managed_identities.size() > 0) {
        obj.insert(QString("ManagedIdentities"), ::OpenAPI::toJsonValue(m_managed_identities));
    }
    if (m_token_service_endpoint_isSet) {
        obj.insert(QString("TokenServiceEndpoint"), ::OpenAPI::toJsonValue(m_token_service_endpoint));
    }
    return obj;
}

QList<OAIManagedApplicationIdentity> OAIManagedApplicationIdentityDescription::getManagedIdentities() const {
    return m_managed_identities;
}
void OAIManagedApplicationIdentityDescription::setManagedIdentities(const QList<OAIManagedApplicationIdentity> &managed_identities) {
    m_managed_identities = managed_identities;
    m_managed_identities_isSet = true;
}

bool OAIManagedApplicationIdentityDescription::is_managed_identities_Set() const{
    return m_managed_identities_isSet;
}

bool OAIManagedApplicationIdentityDescription::is_managed_identities_Valid() const{
    return m_managed_identities_isValid;
}

QString OAIManagedApplicationIdentityDescription::getTokenServiceEndpoint() const {
    return m_token_service_endpoint;
}
void OAIManagedApplicationIdentityDescription::setTokenServiceEndpoint(const QString &token_service_endpoint) {
    m_token_service_endpoint = token_service_endpoint;
    m_token_service_endpoint_isSet = true;
}

bool OAIManagedApplicationIdentityDescription::is_token_service_endpoint_Set() const{
    return m_token_service_endpoint_isSet;
}

bool OAIManagedApplicationIdentityDescription::is_token_service_endpoint_Valid() const{
    return m_token_service_endpoint_isValid;
}

bool OAIManagedApplicationIdentityDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_managed_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedApplicationIdentityDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
