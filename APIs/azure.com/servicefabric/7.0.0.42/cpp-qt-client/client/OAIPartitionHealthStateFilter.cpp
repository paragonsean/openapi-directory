/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionHealthStateFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionHealthStateFilter::OAIPartitionHealthStateFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionHealthStateFilter::OAIPartitionHealthStateFilter() {
    this->initializeModel();
}

OAIPartitionHealthStateFilter::~OAIPartitionHealthStateFilter() {}

void OAIPartitionHealthStateFilter::initializeModel() {

    m_health_state_filter_isSet = false;
    m_health_state_filter_isValid = false;

    m_partition_id_filter_isSet = false;
    m_partition_id_filter_isValid = false;

    m_replica_filters_isSet = false;
    m_replica_filters_isValid = false;
}

void OAIPartitionHealthStateFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionHealthStateFilter::fromJsonObject(QJsonObject json) {

    m_health_state_filter_isValid = ::OpenAPI::fromJsonValue(m_health_state_filter, json[QString("HealthStateFilter")]);
    m_health_state_filter_isSet = !json[QString("HealthStateFilter")].isNull() && m_health_state_filter_isValid;

    m_partition_id_filter_isValid = ::OpenAPI::fromJsonValue(m_partition_id_filter, json[QString("PartitionIdFilter")]);
    m_partition_id_filter_isSet = !json[QString("PartitionIdFilter")].isNull() && m_partition_id_filter_isValid;

    m_replica_filters_isValid = ::OpenAPI::fromJsonValue(m_replica_filters, json[QString("ReplicaFilters")]);
    m_replica_filters_isSet = !json[QString("ReplicaFilters")].isNull() && m_replica_filters_isValid;
}

QString OAIPartitionHealthStateFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionHealthStateFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_health_state_filter_isSet) {
        obj.insert(QString("HealthStateFilter"), ::OpenAPI::toJsonValue(m_health_state_filter));
    }
    if (m_partition_id_filter_isSet) {
        obj.insert(QString("PartitionIdFilter"), ::OpenAPI::toJsonValue(m_partition_id_filter));
    }
    if (m_replica_filters.size() > 0) {
        obj.insert(QString("ReplicaFilters"), ::OpenAPI::toJsonValue(m_replica_filters));
    }
    return obj;
}

qint32 OAIPartitionHealthStateFilter::getHealthStateFilter() const {
    return m_health_state_filter;
}
void OAIPartitionHealthStateFilter::setHealthStateFilter(const qint32 &health_state_filter) {
    m_health_state_filter = health_state_filter;
    m_health_state_filter_isSet = true;
}

bool OAIPartitionHealthStateFilter::is_health_state_filter_Set() const{
    return m_health_state_filter_isSet;
}

bool OAIPartitionHealthStateFilter::is_health_state_filter_Valid() const{
    return m_health_state_filter_isValid;
}

QString OAIPartitionHealthStateFilter::getPartitionIdFilter() const {
    return m_partition_id_filter;
}
void OAIPartitionHealthStateFilter::setPartitionIdFilter(const QString &partition_id_filter) {
    m_partition_id_filter = partition_id_filter;
    m_partition_id_filter_isSet = true;
}

bool OAIPartitionHealthStateFilter::is_partition_id_filter_Set() const{
    return m_partition_id_filter_isSet;
}

bool OAIPartitionHealthStateFilter::is_partition_id_filter_Valid() const{
    return m_partition_id_filter_isValid;
}

QList<OAIReplicaHealthStateFilter> OAIPartitionHealthStateFilter::getReplicaFilters() const {
    return m_replica_filters;
}
void OAIPartitionHealthStateFilter::setReplicaFilters(const QList<OAIReplicaHealthStateFilter> &replica_filters) {
    m_replica_filters = replica_filters;
    m_replica_filters_isSet = true;
}

bool OAIPartitionHealthStateFilter::is_replica_filters_Set() const{
    return m_replica_filters_isSet;
}

bool OAIPartitionHealthStateFilter::is_replica_filters_Valid() const{
    return m_replica_filters_isValid;
}

bool OAIPartitionHealthStateFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_state_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionHealthStateFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
