/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFabricEventKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFabricEventKind::OAIFabricEventKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFabricEventKind::OAIFabricEventKind() {
    this->initializeModel();
}

OAIFabricEventKind::~OAIFabricEventKind() {}

void OAIFabricEventKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFabricEventKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFabricEventKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ClusterEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTEREVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContainerInstanceEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CONTAINERINSTANCEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReplicaEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::REPLICAEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionAnalysisEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONANALYSISEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONCREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationDeleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONDELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONNEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeDomainCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEDOMAINCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeRollbackCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeRollbackStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationUpgradeStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONUPGRADESTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplicationNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDAPPLICATIONNEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplicationHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationProcessExited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONPROCESSEXITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationContainerInstanceExited", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::APPLICATIONCONTAINERINSTANCEEXITED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeAborted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeAddedToCluster", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEADDEDTOCLUSTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeClosed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODECLOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDeactivateCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDEACTIVATECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDeactivateStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDEACTIVATESTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODENEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeOpenSucceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEOPENSUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeOpenFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEOPENFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeRemovedFromCluster", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEREMOVEDFROMCLUSTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NodeUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::NODEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONNEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionReconfigured", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONRECONFIGURED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartitionPrimaryMoveAnalysis", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::PARTITIONPRIMARYMOVEANALYSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceCreated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICECREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceDeleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEDELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICENEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::SERVICEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServicePackageNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDSERVICEPACKAGENEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServicePackageHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::DEPLOYEDSERVICEPACKAGEHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatefulReplicaNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATEFULREPLICANEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatefulReplicaHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatelessReplicaNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATELESSREPLICANEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StatelessReplicaHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterNewHealthReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERNEWHEALTHREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterHealthReportExpired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERHEALTHREPORTEXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeDomainCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEDOMAINCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeRollbackCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeRollbackStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClusterUpgradeStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CLUSTERUPGRADESTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosStopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSSTOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosCodePackageRestartScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSCODEPACKAGERESTARTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosReplicaRemovalScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSREPLICAREMOVALSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosPartitionSecondaryMoveScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSPARTITIONSECONDARYMOVESCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosPartitionPrimaryMoveScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSPARTITIONPRIMARYMOVESCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosReplicaRestartScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSREPLICARESTARTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChaosNodeRestartScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFabricEventKind::CHAOSNODERESTARTSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFabricEventKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFabricEventKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFabricEventKind::CLUSTEREVENT:
            val = "ClusterEvent";
            break;
        case eOAIFabricEventKind::CONTAINERINSTANCEEVENT:
            val = "ContainerInstanceEvent";
            break;
        case eOAIFabricEventKind::NODEEVENT:
            val = "NodeEvent";
            break;
        case eOAIFabricEventKind::APPLICATIONEVENT:
            val = "ApplicationEvent";
            break;
        case eOAIFabricEventKind::SERVICEEVENT:
            val = "ServiceEvent";
            break;
        case eOAIFabricEventKind::PARTITIONEVENT:
            val = "PartitionEvent";
            break;
        case eOAIFabricEventKind::REPLICAEVENT:
            val = "ReplicaEvent";
            break;
        case eOAIFabricEventKind::PARTITIONANALYSISEVENT:
            val = "PartitionAnalysisEvent";
            break;
        case eOAIFabricEventKind::APPLICATIONCREATED:
            val = "ApplicationCreated";
            break;
        case eOAIFabricEventKind::APPLICATIONDELETED:
            val = "ApplicationDeleted";
            break;
        case eOAIFabricEventKind::APPLICATIONNEWHEALTHREPORT:
            val = "ApplicationNewHealthReport";
            break;
        case eOAIFabricEventKind::APPLICATIONHEALTHREPORTEXPIRED:
            val = "ApplicationHealthReportExpired";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADECOMPLETED:
            val = "ApplicationUpgradeCompleted";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEDOMAINCOMPLETED:
            val = "ApplicationUpgradeDomainCompleted";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKCOMPLETED:
            val = "ApplicationUpgradeRollbackCompleted";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADEROLLBACKSTARTED:
            val = "ApplicationUpgradeRollbackStarted";
            break;
        case eOAIFabricEventKind::APPLICATIONUPGRADESTARTED:
            val = "ApplicationUpgradeStarted";
            break;
        case eOAIFabricEventKind::DEPLOYEDAPPLICATIONNEWHEALTHREPORT:
            val = "DeployedApplicationNewHealthReport";
            break;
        case eOAIFabricEventKind::DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED:
            val = "DeployedApplicationHealthReportExpired";
            break;
        case eOAIFabricEventKind::APPLICATIONPROCESSEXITED:
            val = "ApplicationProcessExited";
            break;
        case eOAIFabricEventKind::APPLICATIONCONTAINERINSTANCEEXITED:
            val = "ApplicationContainerInstanceExited";
            break;
        case eOAIFabricEventKind::NODEABORTED:
            val = "NodeAborted";
            break;
        case eOAIFabricEventKind::NODEADDEDTOCLUSTER:
            val = "NodeAddedToCluster";
            break;
        case eOAIFabricEventKind::NODECLOSED:
            val = "NodeClosed";
            break;
        case eOAIFabricEventKind::NODEDEACTIVATECOMPLETED:
            val = "NodeDeactivateCompleted";
            break;
        case eOAIFabricEventKind::NODEDEACTIVATESTARTED:
            val = "NodeDeactivateStarted";
            break;
        case eOAIFabricEventKind::NODEDOWN:
            val = "NodeDown";
            break;
        case eOAIFabricEventKind::NODENEWHEALTHREPORT:
            val = "NodeNewHealthReport";
            break;
        case eOAIFabricEventKind::NODEHEALTHREPORTEXPIRED:
            val = "NodeHealthReportExpired";
            break;
        case eOAIFabricEventKind::NODEOPENSUCCEEDED:
            val = "NodeOpenSucceeded";
            break;
        case eOAIFabricEventKind::NODEOPENFAILED:
            val = "NodeOpenFailed";
            break;
        case eOAIFabricEventKind::NODEREMOVEDFROMCLUSTER:
            val = "NodeRemovedFromCluster";
            break;
        case eOAIFabricEventKind::NODEUP:
            val = "NodeUp";
            break;
        case eOAIFabricEventKind::PARTITIONNEWHEALTHREPORT:
            val = "PartitionNewHealthReport";
            break;
        case eOAIFabricEventKind::PARTITIONHEALTHREPORTEXPIRED:
            val = "PartitionHealthReportExpired";
            break;
        case eOAIFabricEventKind::PARTITIONRECONFIGURED:
            val = "PartitionReconfigured";
            break;
        case eOAIFabricEventKind::PARTITIONPRIMARYMOVEANALYSIS:
            val = "PartitionPrimaryMoveAnalysis";
            break;
        case eOAIFabricEventKind::SERVICECREATED:
            val = "ServiceCreated";
            break;
        case eOAIFabricEventKind::SERVICEDELETED:
            val = "ServiceDeleted";
            break;
        case eOAIFabricEventKind::SERVICENEWHEALTHREPORT:
            val = "ServiceNewHealthReport";
            break;
        case eOAIFabricEventKind::SERVICEHEALTHREPORTEXPIRED:
            val = "ServiceHealthReportExpired";
            break;
        case eOAIFabricEventKind::DEPLOYEDSERVICEPACKAGENEWHEALTHREPORT:
            val = "DeployedServicePackageNewHealthReport";
            break;
        case eOAIFabricEventKind::DEPLOYEDSERVICEPACKAGEHEALTHREPORTEXPIRED:
            val = "DeployedServicePackageHealthReportExpired";
            break;
        case eOAIFabricEventKind::STATEFULREPLICANEWHEALTHREPORT:
            val = "StatefulReplicaNewHealthReport";
            break;
        case eOAIFabricEventKind::STATEFULREPLICAHEALTHREPORTEXPIRED:
            val = "StatefulReplicaHealthReportExpired";
            break;
        case eOAIFabricEventKind::STATELESSREPLICANEWHEALTHREPORT:
            val = "StatelessReplicaNewHealthReport";
            break;
        case eOAIFabricEventKind::STATELESSREPLICAHEALTHREPORTEXPIRED:
            val = "StatelessReplicaHealthReportExpired";
            break;
        case eOAIFabricEventKind::CLUSTERNEWHEALTHREPORT:
            val = "ClusterNewHealthReport";
            break;
        case eOAIFabricEventKind::CLUSTERHEALTHREPORTEXPIRED:
            val = "ClusterHealthReportExpired";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADECOMPLETED:
            val = "ClusterUpgradeCompleted";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEDOMAINCOMPLETED:
            val = "ClusterUpgradeDomainCompleted";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKCOMPLETED:
            val = "ClusterUpgradeRollbackCompleted";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADEROLLBACKSTARTED:
            val = "ClusterUpgradeRollbackStarted";
            break;
        case eOAIFabricEventKind::CLUSTERUPGRADESTARTED:
            val = "ClusterUpgradeStarted";
            break;
        case eOAIFabricEventKind::CHAOSSTOPPED:
            val = "ChaosStopped";
            break;
        case eOAIFabricEventKind::CHAOSSTARTED:
            val = "ChaosStarted";
            break;
        case eOAIFabricEventKind::CHAOSCODEPACKAGERESTARTSCHEDULED:
            val = "ChaosCodePackageRestartScheduled";
            break;
        case eOAIFabricEventKind::CHAOSREPLICAREMOVALSCHEDULED:
            val = "ChaosReplicaRemovalScheduled";
            break;
        case eOAIFabricEventKind::CHAOSPARTITIONSECONDARYMOVESCHEDULED:
            val = "ChaosPartitionSecondaryMoveScheduled";
            break;
        case eOAIFabricEventKind::CHAOSPARTITIONPRIMARYMOVESCHEDULED:
            val = "ChaosPartitionPrimaryMoveScheduled";
            break;
        case eOAIFabricEventKind::CHAOSREPLICARESTARTSCHEDULED:
            val = "ChaosReplicaRestartScheduled";
            break;
        case eOAIFabricEventKind::CHAOSNODERESTARTSCHEDULED:
            val = "ChaosNodeRestartScheduled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFabricEventKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFabricEventKind::eOAIFabricEventKind OAIFabricEventKind::getValue() const {
    return m_value;
}

void OAIFabricEventKind::setValue(const OAIFabricEventKind::eOAIFabricEventKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFabricEventKind::isSet() const {
    
    return m_value_isSet;
}

bool OAIFabricEventKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
