/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryCredential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryCredential::OAIRegistryCredential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryCredential::OAIRegistryCredential() {
    this->initializeModel();
}

OAIRegistryCredential::~OAIRegistryCredential() {}

void OAIRegistryCredential::initializeModel() {

    m_password_encrypted_isSet = false;
    m_password_encrypted_isValid = false;

    m_registry_password_isSet = false;
    m_registry_password_isValid = false;

    m_registry_user_name_isSet = false;
    m_registry_user_name_isValid = false;
}

void OAIRegistryCredential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryCredential::fromJsonObject(QJsonObject json) {

    m_password_encrypted_isValid = ::OpenAPI::fromJsonValue(m_password_encrypted, json[QString("PasswordEncrypted")]);
    m_password_encrypted_isSet = !json[QString("PasswordEncrypted")].isNull() && m_password_encrypted_isValid;

    m_registry_password_isValid = ::OpenAPI::fromJsonValue(m_registry_password, json[QString("RegistryPassword")]);
    m_registry_password_isSet = !json[QString("RegistryPassword")].isNull() && m_registry_password_isValid;

    m_registry_user_name_isValid = ::OpenAPI::fromJsonValue(m_registry_user_name, json[QString("RegistryUserName")]);
    m_registry_user_name_isSet = !json[QString("RegistryUserName")].isNull() && m_registry_user_name_isValid;
}

QString OAIRegistryCredential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryCredential::asJsonObject() const {
    QJsonObject obj;
    if (m_password_encrypted_isSet) {
        obj.insert(QString("PasswordEncrypted"), ::OpenAPI::toJsonValue(m_password_encrypted));
    }
    if (m_registry_password_isSet) {
        obj.insert(QString("RegistryPassword"), ::OpenAPI::toJsonValue(m_registry_password));
    }
    if (m_registry_user_name_isSet) {
        obj.insert(QString("RegistryUserName"), ::OpenAPI::toJsonValue(m_registry_user_name));
    }
    return obj;
}

bool OAIRegistryCredential::isPasswordEncrypted() const {
    return m_password_encrypted;
}
void OAIRegistryCredential::setPasswordEncrypted(const bool &password_encrypted) {
    m_password_encrypted = password_encrypted;
    m_password_encrypted_isSet = true;
}

bool OAIRegistryCredential::is_password_encrypted_Set() const{
    return m_password_encrypted_isSet;
}

bool OAIRegistryCredential::is_password_encrypted_Valid() const{
    return m_password_encrypted_isValid;
}

QString OAIRegistryCredential::getRegistryPassword() const {
    return m_registry_password;
}
void OAIRegistryCredential::setRegistryPassword(const QString &registry_password) {
    m_registry_password = registry_password;
    m_registry_password_isSet = true;
}

bool OAIRegistryCredential::is_registry_password_Set() const{
    return m_registry_password_isSet;
}

bool OAIRegistryCredential::is_registry_password_Valid() const{
    return m_registry_password_isValid;
}

QString OAIRegistryCredential::getRegistryUserName() const {
    return m_registry_user_name;
}
void OAIRegistryCredential::setRegistryUserName(const QString &registry_user_name) {
    m_registry_user_name = registry_user_name;
    m_registry_user_name_isSet = true;
}

bool OAIRegistryCredential::is_registry_user_name_Set() const{
    return m_registry_user_name_isSet;
}

bool OAIRegistryCredential::is_registry_user_name_Valid() const{
    return m_registry_user_name_isValid;
}

bool OAIRegistryCredential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryCredential::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
