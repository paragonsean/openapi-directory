/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupProgressInfo::OAIBackupProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupProgressInfo::OAIBackupProgressInfo() {
    this->initializeModel();
}

OAIBackupProgressInfo::~OAIBackupProgressInfo() {}

void OAIBackupProgressInfo::initializeModel() {

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_backup_location_isSet = false;
    m_backup_location_isValid = false;

    m_backup_state_isSet = false;
    m_backup_state_isValid = false;

    m_epoch_of_last_backup_record_isSet = false;
    m_epoch_of_last_backup_record_isValid = false;

    m_failure_error_isSet = false;
    m_failure_error_isValid = false;

    m_lsn_of_last_backup_record_isSet = false;
    m_lsn_of_last_backup_record_isValid = false;

    m_time_stamp_utc_isSet = false;
    m_time_stamp_utc_isValid = false;
}

void OAIBackupProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupProgressInfo::fromJsonObject(QJsonObject json) {

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("BackupId")]);
    m_backup_id_isSet = !json[QString("BackupId")].isNull() && m_backup_id_isValid;

    m_backup_location_isValid = ::OpenAPI::fromJsonValue(m_backup_location, json[QString("BackupLocation")]);
    m_backup_location_isSet = !json[QString("BackupLocation")].isNull() && m_backup_location_isValid;

    m_backup_state_isValid = ::OpenAPI::fromJsonValue(m_backup_state, json[QString("BackupState")]);
    m_backup_state_isSet = !json[QString("BackupState")].isNull() && m_backup_state_isValid;

    m_epoch_of_last_backup_record_isValid = ::OpenAPI::fromJsonValue(m_epoch_of_last_backup_record, json[QString("EpochOfLastBackupRecord")]);
    m_epoch_of_last_backup_record_isSet = !json[QString("EpochOfLastBackupRecord")].isNull() && m_epoch_of_last_backup_record_isValid;

    m_failure_error_isValid = ::OpenAPI::fromJsonValue(m_failure_error, json[QString("FailureError")]);
    m_failure_error_isSet = !json[QString("FailureError")].isNull() && m_failure_error_isValid;

    m_lsn_of_last_backup_record_isValid = ::OpenAPI::fromJsonValue(m_lsn_of_last_backup_record, json[QString("LsnOfLastBackupRecord")]);
    m_lsn_of_last_backup_record_isSet = !json[QString("LsnOfLastBackupRecord")].isNull() && m_lsn_of_last_backup_record_isValid;

    m_time_stamp_utc_isValid = ::OpenAPI::fromJsonValue(m_time_stamp_utc, json[QString("TimeStampUtc")]);
    m_time_stamp_utc_isSet = !json[QString("TimeStampUtc")].isNull() && m_time_stamp_utc_isValid;
}

QString OAIBackupProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_id_isSet) {
        obj.insert(QString("BackupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_backup_location_isSet) {
        obj.insert(QString("BackupLocation"), ::OpenAPI::toJsonValue(m_backup_location));
    }
    if (m_backup_state.isSet()) {
        obj.insert(QString("BackupState"), ::OpenAPI::toJsonValue(m_backup_state));
    }
    if (m_epoch_of_last_backup_record.isSet()) {
        obj.insert(QString("EpochOfLastBackupRecord"), ::OpenAPI::toJsonValue(m_epoch_of_last_backup_record));
    }
    if (m_failure_error.isSet()) {
        obj.insert(QString("FailureError"), ::OpenAPI::toJsonValue(m_failure_error));
    }
    if (m_lsn_of_last_backup_record_isSet) {
        obj.insert(QString("LsnOfLastBackupRecord"), ::OpenAPI::toJsonValue(m_lsn_of_last_backup_record));
    }
    if (m_time_stamp_utc_isSet) {
        obj.insert(QString("TimeStampUtc"), ::OpenAPI::toJsonValue(m_time_stamp_utc));
    }
    return obj;
}

QString OAIBackupProgressInfo::getBackupId() const {
    return m_backup_id;
}
void OAIBackupProgressInfo::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIBackupProgressInfo::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIBackupProgressInfo::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

QString OAIBackupProgressInfo::getBackupLocation() const {
    return m_backup_location;
}
void OAIBackupProgressInfo::setBackupLocation(const QString &backup_location) {
    m_backup_location = backup_location;
    m_backup_location_isSet = true;
}

bool OAIBackupProgressInfo::is_backup_location_Set() const{
    return m_backup_location_isSet;
}

bool OAIBackupProgressInfo::is_backup_location_Valid() const{
    return m_backup_location_isValid;
}

OAIBackupState OAIBackupProgressInfo::getBackupState() const {
    return m_backup_state;
}
void OAIBackupProgressInfo::setBackupState(const OAIBackupState &backup_state) {
    m_backup_state = backup_state;
    m_backup_state_isSet = true;
}

bool OAIBackupProgressInfo::is_backup_state_Set() const{
    return m_backup_state_isSet;
}

bool OAIBackupProgressInfo::is_backup_state_Valid() const{
    return m_backup_state_isValid;
}

OAIEpoch OAIBackupProgressInfo::getEpochOfLastBackupRecord() const {
    return m_epoch_of_last_backup_record;
}
void OAIBackupProgressInfo::setEpochOfLastBackupRecord(const OAIEpoch &epoch_of_last_backup_record) {
    m_epoch_of_last_backup_record = epoch_of_last_backup_record;
    m_epoch_of_last_backup_record_isSet = true;
}

bool OAIBackupProgressInfo::is_epoch_of_last_backup_record_Set() const{
    return m_epoch_of_last_backup_record_isSet;
}

bool OAIBackupProgressInfo::is_epoch_of_last_backup_record_Valid() const{
    return m_epoch_of_last_backup_record_isValid;
}

OAIFabricErrorError OAIBackupProgressInfo::getFailureError() const {
    return m_failure_error;
}
void OAIBackupProgressInfo::setFailureError(const OAIFabricErrorError &failure_error) {
    m_failure_error = failure_error;
    m_failure_error_isSet = true;
}

bool OAIBackupProgressInfo::is_failure_error_Set() const{
    return m_failure_error_isSet;
}

bool OAIBackupProgressInfo::is_failure_error_Valid() const{
    return m_failure_error_isValid;
}

QString OAIBackupProgressInfo::getLsnOfLastBackupRecord() const {
    return m_lsn_of_last_backup_record;
}
void OAIBackupProgressInfo::setLsnOfLastBackupRecord(const QString &lsn_of_last_backup_record) {
    m_lsn_of_last_backup_record = lsn_of_last_backup_record;
    m_lsn_of_last_backup_record_isSet = true;
}

bool OAIBackupProgressInfo::is_lsn_of_last_backup_record_Set() const{
    return m_lsn_of_last_backup_record_isSet;
}

bool OAIBackupProgressInfo::is_lsn_of_last_backup_record_Valid() const{
    return m_lsn_of_last_backup_record_isValid;
}

QDateTime OAIBackupProgressInfo::getTimeStampUtc() const {
    return m_time_stamp_utc;
}
void OAIBackupProgressInfo::setTimeStampUtc(const QDateTime &time_stamp_utc) {
    m_time_stamp_utc = time_stamp_utc;
    m_time_stamp_utc_isSet = true;
}

bool OAIBackupProgressInfo::is_time_stamp_utc_Set() const{
    return m_time_stamp_utc_isSet;
}

bool OAIBackupProgressInfo::is_time_stamp_utc_Valid() const{
    return m_time_stamp_utc_isValid;
}

bool OAIBackupProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch_of_last_backup_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsn_of_last_backup_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
