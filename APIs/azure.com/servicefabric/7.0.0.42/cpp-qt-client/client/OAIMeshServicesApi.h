/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeshServicesApi_H
#define OAI_OAIMeshServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAIPagedServiceResourceDescriptionList.h"
#include "OAIServiceResourceDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeshServicesApi : public QObject {
    Q_OBJECT

public:
    OAIMeshServicesApi(const int timeOut = 0);
    ~OAIMeshServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    * @param[in]  service_resource_name QString [required]
    */
    virtual void meshServiceGet(const QString &api_version, const QString &application_resource_name, const QString &service_resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void meshServiceList(const QString &api_version, const QString &application_resource_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meshServiceGetCallback(OAIHttpRequestWorker *worker);
    void meshServiceListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meshServiceGetSignal(OAIServiceResourceDescription summary);
    void meshServiceListSignal(OAIPagedServiceResourceDescriptionList summary);


    void meshServiceGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceResourceDescription summary);
    void meshServiceListSignalFull(OAIHttpRequestWorker *worker, OAIPagedServiceResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use meshServiceGetSignalError() instead")
    void meshServiceGetSignalE(OAIServiceResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshServiceGetSignalError(OAIServiceResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshServiceListSignalError() instead")
    void meshServiceListSignalE(OAIPagedServiceResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshServiceListSignalError(OAIPagedServiceResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meshServiceGetSignalErrorFull() instead")
    void meshServiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshServiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshServiceListSignalErrorFull() instead")
    void meshServiceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshServiceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
