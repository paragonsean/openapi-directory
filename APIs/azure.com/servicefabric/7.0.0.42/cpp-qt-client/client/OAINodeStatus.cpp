/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeStatus::OAINodeStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeStatus::OAINodeStatus() {
    this->initializeModel();
}

OAINodeStatus::~OAINodeStatus() {}

void OAINodeStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINodeStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINodeStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Up", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::UP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Down", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Enabling", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::ENABLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Disabling", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::DISABLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Disabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Removed", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeStatus::REMOVED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINodeStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINodeStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINodeStatus::INVALID:
            val = "Invalid";
            break;
        case eOAINodeStatus::UP:
            val = "Up";
            break;
        case eOAINodeStatus::DOWN:
            val = "Down";
            break;
        case eOAINodeStatus::ENABLING:
            val = "Enabling";
            break;
        case eOAINodeStatus::DISABLING:
            val = "Disabling";
            break;
        case eOAINodeStatus::DISABLED:
            val = "Disabled";
            break;
        case eOAINodeStatus::UNKNOWN:
            val = "Unknown";
            break;
        case eOAINodeStatus::REMOVED:
            val = "Removed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINodeStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINodeStatus::eOAINodeStatus OAINodeStatus::getValue() const {
    return m_value;
}

void OAINodeStatus::setValue(const OAINodeStatus::eOAINodeStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINodeStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAINodeStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
