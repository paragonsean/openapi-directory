/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicRetentionPolicyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicRetentionPolicyDescription::OAIBasicRetentionPolicyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicRetentionPolicyDescription::OAIBasicRetentionPolicyDescription() {
    this->initializeModel();
}

OAIBasicRetentionPolicyDescription::~OAIBasicRetentionPolicyDescription() {}

void OAIBasicRetentionPolicyDescription::initializeModel() {

    m_minimum_number_of_backups_isSet = false;
    m_minimum_number_of_backups_isValid = false;

    m_retention_duration_isSet = false;
    m_retention_duration_isValid = false;

    m_retention_policy_type_isSet = false;
    m_retention_policy_type_isValid = false;
}

void OAIBasicRetentionPolicyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicRetentionPolicyDescription::fromJsonObject(QJsonObject json) {

    m_minimum_number_of_backups_isValid = ::OpenAPI::fromJsonValue(m_minimum_number_of_backups, json[QString("MinimumNumberOfBackups")]);
    m_minimum_number_of_backups_isSet = !json[QString("MinimumNumberOfBackups")].isNull() && m_minimum_number_of_backups_isValid;

    m_retention_duration_isValid = ::OpenAPI::fromJsonValue(m_retention_duration, json[QString("RetentionDuration")]);
    m_retention_duration_isSet = !json[QString("RetentionDuration")].isNull() && m_retention_duration_isValid;

    m_retention_policy_type_isValid = ::OpenAPI::fromJsonValue(m_retention_policy_type, json[QString("RetentionPolicyType")]);
    m_retention_policy_type_isSet = !json[QString("RetentionPolicyType")].isNull() && m_retention_policy_type_isValid;
}

QString OAIBasicRetentionPolicyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicRetentionPolicyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_number_of_backups_isSet) {
        obj.insert(QString("MinimumNumberOfBackups"), ::OpenAPI::toJsonValue(m_minimum_number_of_backups));
    }
    if (m_retention_duration_isSet) {
        obj.insert(QString("RetentionDuration"), ::OpenAPI::toJsonValue(m_retention_duration));
    }
    if (m_retention_policy_type.isSet()) {
        obj.insert(QString("RetentionPolicyType"), ::OpenAPI::toJsonValue(m_retention_policy_type));
    }
    return obj;
}

qint32 OAIBasicRetentionPolicyDescription::getMinimumNumberOfBackups() const {
    return m_minimum_number_of_backups;
}
void OAIBasicRetentionPolicyDescription::setMinimumNumberOfBackups(const qint32 &minimum_number_of_backups) {
    m_minimum_number_of_backups = minimum_number_of_backups;
    m_minimum_number_of_backups_isSet = true;
}

bool OAIBasicRetentionPolicyDescription::is_minimum_number_of_backups_Set() const{
    return m_minimum_number_of_backups_isSet;
}

bool OAIBasicRetentionPolicyDescription::is_minimum_number_of_backups_Valid() const{
    return m_minimum_number_of_backups_isValid;
}

QString OAIBasicRetentionPolicyDescription::getRetentionDuration() const {
    return m_retention_duration;
}
void OAIBasicRetentionPolicyDescription::setRetentionDuration(const QString &retention_duration) {
    m_retention_duration = retention_duration;
    m_retention_duration_isSet = true;
}

bool OAIBasicRetentionPolicyDescription::is_retention_duration_Set() const{
    return m_retention_duration_isSet;
}

bool OAIBasicRetentionPolicyDescription::is_retention_duration_Valid() const{
    return m_retention_duration_isValid;
}

OAIRetentionPolicyType OAIBasicRetentionPolicyDescription::getRetentionPolicyType() const {
    return m_retention_policy_type;
}
void OAIBasicRetentionPolicyDescription::setRetentionPolicyType(const OAIRetentionPolicyType &retention_policy_type) {
    m_retention_policy_type = retention_policy_type;
    m_retention_policy_type_isSet = true;
}

bool OAIBasicRetentionPolicyDescription::is_retention_policy_type_Set() const{
    return m_retention_policy_type_isSet;
}

bool OAIBasicRetentionPolicyDescription::is_retention_policy_type_Valid() const{
    return m_retention_policy_type_isValid;
}

bool OAIBasicRetentionPolicyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_number_of_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicRetentionPolicyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retention_duration_isValid && m_retention_policy_type_isValid && true;
}

} // namespace OpenAPI
