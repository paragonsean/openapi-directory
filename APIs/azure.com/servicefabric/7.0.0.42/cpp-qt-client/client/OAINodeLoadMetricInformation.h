/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeLoadMetricInformation.h
 *
 * Represents data structure that contains load information for a certain metric on a node.
 */

#ifndef OAINodeLoadMetricInformation_H
#define OAINodeLoadMetricInformation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINodeLoadMetricInformation : public OAIObject {
public:
    OAINodeLoadMetricInformation();
    OAINodeLoadMetricInformation(QString json);
    ~OAINodeLoadMetricInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBufferedNodeCapacityRemaining() const;
    void setBufferedNodeCapacityRemaining(const QString &buffered_node_capacity_remaining);
    bool is_buffered_node_capacity_remaining_Set() const;
    bool is_buffered_node_capacity_remaining_Valid() const;

    QString getCurrentNodeLoad() const;
    void setCurrentNodeLoad(const QString &current_node_load);
    bool is_current_node_load_Set() const;
    bool is_current_node_load_Valid() const;

    bool isIsCapacityViolation() const;
    void setIsCapacityViolation(const bool &is_capacity_violation);
    bool is_is_capacity_violation_Set() const;
    bool is_is_capacity_violation_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeBufferedCapacity() const;
    void setNodeBufferedCapacity(const QString &node_buffered_capacity);
    bool is_node_buffered_capacity_Set() const;
    bool is_node_buffered_capacity_Valid() const;

    QString getNodeCapacity() const;
    void setNodeCapacity(const QString &node_capacity);
    bool is_node_capacity_Set() const;
    bool is_node_capacity_Valid() const;

    QString getNodeCapacityRemaining() const;
    void setNodeCapacityRemaining(const QString &node_capacity_remaining);
    bool is_node_capacity_remaining_Set() const;
    bool is_node_capacity_remaining_Valid() const;

    QString getNodeLoad() const;
    void setNodeLoad(const QString &node_load);
    bool is_node_load_Set() const;
    bool is_node_load_Valid() const;

    QString getNodeRemainingBufferedCapacity() const;
    void setNodeRemainingBufferedCapacity(const QString &node_remaining_buffered_capacity);
    bool is_node_remaining_buffered_capacity_Set() const;
    bool is_node_remaining_buffered_capacity_Valid() const;

    QString getNodeRemainingCapacity() const;
    void setNodeRemainingCapacity(const QString &node_remaining_capacity);
    bool is_node_remaining_capacity_Set() const;
    bool is_node_remaining_capacity_Valid() const;

    QString getPlannedNodeLoadRemoval() const;
    void setPlannedNodeLoadRemoval(const QString &planned_node_load_removal);
    bool is_planned_node_load_removal_Set() const;
    bool is_planned_node_load_removal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_buffered_node_capacity_remaining;
    bool m_buffered_node_capacity_remaining_isSet;
    bool m_buffered_node_capacity_remaining_isValid;

    QString m_current_node_load;
    bool m_current_node_load_isSet;
    bool m_current_node_load_isValid;

    bool m_is_capacity_violation;
    bool m_is_capacity_violation_isSet;
    bool m_is_capacity_violation_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_buffered_capacity;
    bool m_node_buffered_capacity_isSet;
    bool m_node_buffered_capacity_isValid;

    QString m_node_capacity;
    bool m_node_capacity_isSet;
    bool m_node_capacity_isValid;

    QString m_node_capacity_remaining;
    bool m_node_capacity_remaining_isSet;
    bool m_node_capacity_remaining_isValid;

    QString m_node_load;
    bool m_node_load_isSet;
    bool m_node_load_isValid;

    QString m_node_remaining_buffered_capacity;
    bool m_node_remaining_buffered_capacity_isSet;
    bool m_node_remaining_buffered_capacity_isValid;

    QString m_node_remaining_capacity;
    bool m_node_remaining_capacity_isSet;
    bool m_node_remaining_capacity_isValid;

    QString m_planned_node_load_removal;
    bool m_planned_node_load_removal_isSet;
    bool m_planned_node_load_removal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeLoadMetricInformation)

#endif // OAINodeLoadMetricInformation_H
