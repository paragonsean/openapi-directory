/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyMetadata::OAIPropertyMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyMetadata::OAIPropertyMetadata() {
    this->initializeModel();
}

OAIPropertyMetadata::~OAIPropertyMetadata() {}

void OAIPropertyMetadata::initializeModel() {

    m_custom_type_id_isSet = false;
    m_custom_type_id_isValid = false;

    m_last_modified_utc_timestamp_isSet = false;
    m_last_modified_utc_timestamp_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIPropertyMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyMetadata::fromJsonObject(QJsonObject json) {

    m_custom_type_id_isValid = ::OpenAPI::fromJsonValue(m_custom_type_id, json[QString("CustomTypeId")]);
    m_custom_type_id_isSet = !json[QString("CustomTypeId")].isNull() && m_custom_type_id_isValid;

    m_last_modified_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_modified_utc_timestamp, json[QString("LastModifiedUtcTimestamp")]);
    m_last_modified_utc_timestamp_isSet = !json[QString("LastModifiedUtcTimestamp")].isNull() && m_last_modified_utc_timestamp_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("Parent")]);
    m_parent_isSet = !json[QString("Parent")].isNull() && m_parent_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("SizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("SizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("TypeId")]);
    m_type_id_isSet = !json[QString("TypeId")].isNull() && m_type_id_isValid;
}

QString OAIPropertyMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_type_id_isSet) {
        obj.insert(QString("CustomTypeId"), ::OpenAPI::toJsonValue(m_custom_type_id));
    }
    if (m_last_modified_utc_timestamp_isSet) {
        obj.insert(QString("LastModifiedUtcTimestamp"), ::OpenAPI::toJsonValue(m_last_modified_utc_timestamp));
    }
    if (m_parent_isSet) {
        obj.insert(QString("Parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("SizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_type_id.isSet()) {
        obj.insert(QString("TypeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIPropertyMetadata::getCustomTypeId() const {
    return m_custom_type_id;
}
void OAIPropertyMetadata::setCustomTypeId(const QString &custom_type_id) {
    m_custom_type_id = custom_type_id;
    m_custom_type_id_isSet = true;
}

bool OAIPropertyMetadata::is_custom_type_id_Set() const{
    return m_custom_type_id_isSet;
}

bool OAIPropertyMetadata::is_custom_type_id_Valid() const{
    return m_custom_type_id_isValid;
}

QDateTime OAIPropertyMetadata::getLastModifiedUtcTimestamp() const {
    return m_last_modified_utc_timestamp;
}
void OAIPropertyMetadata::setLastModifiedUtcTimestamp(const QDateTime &last_modified_utc_timestamp) {
    m_last_modified_utc_timestamp = last_modified_utc_timestamp;
    m_last_modified_utc_timestamp_isSet = true;
}

bool OAIPropertyMetadata::is_last_modified_utc_timestamp_Set() const{
    return m_last_modified_utc_timestamp_isSet;
}

bool OAIPropertyMetadata::is_last_modified_utc_timestamp_Valid() const{
    return m_last_modified_utc_timestamp_isValid;
}

QString OAIPropertyMetadata::getParent() const {
    return m_parent;
}
void OAIPropertyMetadata::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIPropertyMetadata::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIPropertyMetadata::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIPropertyMetadata::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIPropertyMetadata::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIPropertyMetadata::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIPropertyMetadata::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

qint32 OAIPropertyMetadata::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIPropertyMetadata::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIPropertyMetadata::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIPropertyMetadata::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

OAIPropertyValueKind OAIPropertyMetadata::getTypeId() const {
    return m_type_id;
}
void OAIPropertyMetadata::setTypeId(const OAIPropertyValueKind &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIPropertyMetadata::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIPropertyMetadata::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIPropertyMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
