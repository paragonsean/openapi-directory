/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationHealthStateFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationHealthStateFilter::OAIApplicationHealthStateFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationHealthStateFilter::OAIApplicationHealthStateFilter() {
    this->initializeModel();
}

OAIApplicationHealthStateFilter::~OAIApplicationHealthStateFilter() {}

void OAIApplicationHealthStateFilter::initializeModel() {

    m_application_name_filter_isSet = false;
    m_application_name_filter_isValid = false;

    m_application_type_name_filter_isSet = false;
    m_application_type_name_filter_isValid = false;

    m_deployed_application_filters_isSet = false;
    m_deployed_application_filters_isValid = false;

    m_health_state_filter_isSet = false;
    m_health_state_filter_isValid = false;

    m_service_filters_isSet = false;
    m_service_filters_isValid = false;
}

void OAIApplicationHealthStateFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationHealthStateFilter::fromJsonObject(QJsonObject json) {

    m_application_name_filter_isValid = ::OpenAPI::fromJsonValue(m_application_name_filter, json[QString("ApplicationNameFilter")]);
    m_application_name_filter_isSet = !json[QString("ApplicationNameFilter")].isNull() && m_application_name_filter_isValid;

    m_application_type_name_filter_isValid = ::OpenAPI::fromJsonValue(m_application_type_name_filter, json[QString("ApplicationTypeNameFilter")]);
    m_application_type_name_filter_isSet = !json[QString("ApplicationTypeNameFilter")].isNull() && m_application_type_name_filter_isValid;

    m_deployed_application_filters_isValid = ::OpenAPI::fromJsonValue(m_deployed_application_filters, json[QString("DeployedApplicationFilters")]);
    m_deployed_application_filters_isSet = !json[QString("DeployedApplicationFilters")].isNull() && m_deployed_application_filters_isValid;

    m_health_state_filter_isValid = ::OpenAPI::fromJsonValue(m_health_state_filter, json[QString("HealthStateFilter")]);
    m_health_state_filter_isSet = !json[QString("HealthStateFilter")].isNull() && m_health_state_filter_isValid;

    m_service_filters_isValid = ::OpenAPI::fromJsonValue(m_service_filters, json[QString("ServiceFilters")]);
    m_service_filters_isSet = !json[QString("ServiceFilters")].isNull() && m_service_filters_isValid;
}

QString OAIApplicationHealthStateFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationHealthStateFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_filter_isSet) {
        obj.insert(QString("ApplicationNameFilter"), ::OpenAPI::toJsonValue(m_application_name_filter));
    }
    if (m_application_type_name_filter_isSet) {
        obj.insert(QString("ApplicationTypeNameFilter"), ::OpenAPI::toJsonValue(m_application_type_name_filter));
    }
    if (m_deployed_application_filters.size() > 0) {
        obj.insert(QString("DeployedApplicationFilters"), ::OpenAPI::toJsonValue(m_deployed_application_filters));
    }
    if (m_health_state_filter_isSet) {
        obj.insert(QString("HealthStateFilter"), ::OpenAPI::toJsonValue(m_health_state_filter));
    }
    if (m_service_filters.size() > 0) {
        obj.insert(QString("ServiceFilters"), ::OpenAPI::toJsonValue(m_service_filters));
    }
    return obj;
}

QString OAIApplicationHealthStateFilter::getApplicationNameFilter() const {
    return m_application_name_filter;
}
void OAIApplicationHealthStateFilter::setApplicationNameFilter(const QString &application_name_filter) {
    m_application_name_filter = application_name_filter;
    m_application_name_filter_isSet = true;
}

bool OAIApplicationHealthStateFilter::is_application_name_filter_Set() const{
    return m_application_name_filter_isSet;
}

bool OAIApplicationHealthStateFilter::is_application_name_filter_Valid() const{
    return m_application_name_filter_isValid;
}

QString OAIApplicationHealthStateFilter::getApplicationTypeNameFilter() const {
    return m_application_type_name_filter;
}
void OAIApplicationHealthStateFilter::setApplicationTypeNameFilter(const QString &application_type_name_filter) {
    m_application_type_name_filter = application_type_name_filter;
    m_application_type_name_filter_isSet = true;
}

bool OAIApplicationHealthStateFilter::is_application_type_name_filter_Set() const{
    return m_application_type_name_filter_isSet;
}

bool OAIApplicationHealthStateFilter::is_application_type_name_filter_Valid() const{
    return m_application_type_name_filter_isValid;
}

QList<OAIDeployedApplicationHealthStateFilter> OAIApplicationHealthStateFilter::getDeployedApplicationFilters() const {
    return m_deployed_application_filters;
}
void OAIApplicationHealthStateFilter::setDeployedApplicationFilters(const QList<OAIDeployedApplicationHealthStateFilter> &deployed_application_filters) {
    m_deployed_application_filters = deployed_application_filters;
    m_deployed_application_filters_isSet = true;
}

bool OAIApplicationHealthStateFilter::is_deployed_application_filters_Set() const{
    return m_deployed_application_filters_isSet;
}

bool OAIApplicationHealthStateFilter::is_deployed_application_filters_Valid() const{
    return m_deployed_application_filters_isValid;
}

qint32 OAIApplicationHealthStateFilter::getHealthStateFilter() const {
    return m_health_state_filter;
}
void OAIApplicationHealthStateFilter::setHealthStateFilter(const qint32 &health_state_filter) {
    m_health_state_filter = health_state_filter;
    m_health_state_filter_isSet = true;
}

bool OAIApplicationHealthStateFilter::is_health_state_filter_Set() const{
    return m_health_state_filter_isSet;
}

bool OAIApplicationHealthStateFilter::is_health_state_filter_Valid() const{
    return m_health_state_filter_isValid;
}

QList<OAIServiceHealthStateFilter> OAIApplicationHealthStateFilter::getServiceFilters() const {
    return m_service_filters;
}
void OAIApplicationHealthStateFilter::setServiceFilters(const QList<OAIServiceHealthStateFilter> &service_filters) {
    m_service_filters = service_filters;
    m_service_filters_isSet = true;
}

bool OAIApplicationHealthStateFilter::is_service_filters_Set() const{
    return m_service_filters_isSet;
}

bool OAIApplicationHealthStateFilter::is_service_filters_Valid() const{
    return m_service_filters_isValid;
}

bool OAIApplicationHealthStateFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_name_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_application_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationHealthStateFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
