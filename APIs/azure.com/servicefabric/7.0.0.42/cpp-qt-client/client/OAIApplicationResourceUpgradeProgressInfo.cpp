/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationResourceUpgradeProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationResourceUpgradeProgressInfo::OAIApplicationResourceUpgradeProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationResourceUpgradeProgressInfo::OAIApplicationResourceUpgradeProgressInfo() {
    this->initializeModel();
}

OAIApplicationResourceUpgradeProgressInfo::~OAIApplicationResourceUpgradeProgressInfo() {}

void OAIApplicationResourceUpgradeProgressInfo::initializeModel() {

    m_application_upgrade_status_details_isSet = false;
    m_application_upgrade_status_details_isValid = false;

    m_failure_timestamp_utc_isSet = false;
    m_failure_timestamp_utc_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percent_completed_isSet = false;
    m_percent_completed_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_service_upgrade_progress_isSet = false;
    m_service_upgrade_progress_isValid = false;

    m_start_timestamp_utc_isSet = false;
    m_start_timestamp_utc_isValid = false;

    m_target_application_type_version_isSet = false;
    m_target_application_type_version_isValid = false;

    m_upgrade_duration_isSet = false;
    m_upgrade_duration_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;

    m_upgrade_state_isSet = false;
    m_upgrade_state_isValid = false;
}

void OAIApplicationResourceUpgradeProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationResourceUpgradeProgressInfo::fromJsonObject(QJsonObject json) {

    m_application_upgrade_status_details_isValid = ::OpenAPI::fromJsonValue(m_application_upgrade_status_details, json[QString("ApplicationUpgradeStatusDetails")]);
    m_application_upgrade_status_details_isSet = !json[QString("ApplicationUpgradeStatusDetails")].isNull() && m_application_upgrade_status_details_isValid;

    m_failure_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_failure_timestamp_utc, json[QString("FailureTimestampUtc")]);
    m_failure_timestamp_utc_isSet = !json[QString("FailureTimestampUtc")].isNull() && m_failure_timestamp_utc_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_percent_completed_isValid = ::OpenAPI::fromJsonValue(m_percent_completed, json[QString("PercentCompleted")]);
    m_percent_completed_isSet = !json[QString("PercentCompleted")].isNull() && m_percent_completed_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_service_upgrade_progress_isValid = ::OpenAPI::fromJsonValue(m_service_upgrade_progress, json[QString("ServiceUpgradeProgress")]);
    m_service_upgrade_progress_isSet = !json[QString("ServiceUpgradeProgress")].isNull() && m_service_upgrade_progress_isValid;

    m_start_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp_utc, json[QString("StartTimestampUtc")]);
    m_start_timestamp_utc_isSet = !json[QString("StartTimestampUtc")].isNull() && m_start_timestamp_utc_isValid;

    m_target_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_target_application_type_version, json[QString("TargetApplicationTypeVersion")]);
    m_target_application_type_version_isSet = !json[QString("TargetApplicationTypeVersion")].isNull() && m_target_application_type_version_isValid;

    m_upgrade_duration_isValid = ::OpenAPI::fromJsonValue(m_upgrade_duration, json[QString("UpgradeDuration")]);
    m_upgrade_duration_isSet = !json[QString("UpgradeDuration")].isNull() && m_upgrade_duration_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;

    m_upgrade_state_isValid = ::OpenAPI::fromJsonValue(m_upgrade_state, json[QString("UpgradeState")]);
    m_upgrade_state_isSet = !json[QString("UpgradeState")].isNull() && m_upgrade_state_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationResourceUpgradeProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_application_upgrade_status_details_isSet) {
        obj.insert(QString("ApplicationUpgradeStatusDetails"), ::OpenAPI::toJsonValue(m_application_upgrade_status_details));
    }
    if (m_failure_timestamp_utc_isSet) {
        obj.insert(QString("FailureTimestampUtc"), ::OpenAPI::toJsonValue(m_failure_timestamp_utc));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percent_completed_isSet) {
        obj.insert(QString("PercentCompleted"), ::OpenAPI::toJsonValue(m_percent_completed));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_service_upgrade_progress.size() > 0) {
        obj.insert(QString("ServiceUpgradeProgress"), ::OpenAPI::toJsonValue(m_service_upgrade_progress));
    }
    if (m_start_timestamp_utc_isSet) {
        obj.insert(QString("StartTimestampUtc"), ::OpenAPI::toJsonValue(m_start_timestamp_utc));
    }
    if (m_target_application_type_version_isSet) {
        obj.insert(QString("TargetApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_target_application_type_version));
    }
    if (m_upgrade_duration_isSet) {
        obj.insert(QString("UpgradeDuration"), ::OpenAPI::toJsonValue(m_upgrade_duration));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    if (m_upgrade_state.isSet()) {
        obj.insert(QString("UpgradeState"), ::OpenAPI::toJsonValue(m_upgrade_state));
    }
    return obj;
}

QString OAIApplicationResourceUpgradeProgressInfo::getApplicationUpgradeStatusDetails() const {
    return m_application_upgrade_status_details;
}
void OAIApplicationResourceUpgradeProgressInfo::setApplicationUpgradeStatusDetails(const QString &application_upgrade_status_details) {
    m_application_upgrade_status_details = application_upgrade_status_details;
    m_application_upgrade_status_details_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_application_upgrade_status_details_Set() const{
    return m_application_upgrade_status_details_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_application_upgrade_status_details_Valid() const{
    return m_application_upgrade_status_details_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getFailureTimestampUtc() const {
    return m_failure_timestamp_utc;
}
void OAIApplicationResourceUpgradeProgressInfo::setFailureTimestampUtc(const QString &failure_timestamp_utc) {
    m_failure_timestamp_utc = failure_timestamp_utc;
    m_failure_timestamp_utc_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_failure_timestamp_utc_Set() const{
    return m_failure_timestamp_utc_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_failure_timestamp_utc_Valid() const{
    return m_failure_timestamp_utc_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getName() const {
    return m_name;
}
void OAIApplicationResourceUpgradeProgressInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getPercentCompleted() const {
    return m_percent_completed;
}
void OAIApplicationResourceUpgradeProgressInfo::setPercentCompleted(const QString &percent_completed) {
    m_percent_completed = percent_completed;
    m_percent_completed_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_percent_completed_Set() const{
    return m_percent_completed_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_percent_completed_Valid() const{
    return m_percent_completed_isValid;
}

OAIRollingUpgradeMode OAIApplicationResourceUpgradeProgressInfo::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIApplicationResourceUpgradeProgressInfo::setRollingUpgradeMode(const OAIRollingUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

QList<OAIServiceUpgradeProgress> OAIApplicationResourceUpgradeProgressInfo::getServiceUpgradeProgress() const {
    return m_service_upgrade_progress;
}
void OAIApplicationResourceUpgradeProgressInfo::setServiceUpgradeProgress(const QList<OAIServiceUpgradeProgress> &service_upgrade_progress) {
    m_service_upgrade_progress = service_upgrade_progress;
    m_service_upgrade_progress_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_service_upgrade_progress_Set() const{
    return m_service_upgrade_progress_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_service_upgrade_progress_Valid() const{
    return m_service_upgrade_progress_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getStartTimestampUtc() const {
    return m_start_timestamp_utc;
}
void OAIApplicationResourceUpgradeProgressInfo::setStartTimestampUtc(const QString &start_timestamp_utc) {
    m_start_timestamp_utc = start_timestamp_utc;
    m_start_timestamp_utc_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_start_timestamp_utc_Set() const{
    return m_start_timestamp_utc_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_start_timestamp_utc_Valid() const{
    return m_start_timestamp_utc_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getTargetApplicationTypeVersion() const {
    return m_target_application_type_version;
}
void OAIApplicationResourceUpgradeProgressInfo::setTargetApplicationTypeVersion(const QString &target_application_type_version) {
    m_target_application_type_version = target_application_type_version;
    m_target_application_type_version_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_target_application_type_version_Set() const{
    return m_target_application_type_version_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_target_application_type_version_Valid() const{
    return m_target_application_type_version_isValid;
}

QString OAIApplicationResourceUpgradeProgressInfo::getUpgradeDuration() const {
    return m_upgrade_duration;
}
void OAIApplicationResourceUpgradeProgressInfo::setUpgradeDuration(const QString &upgrade_duration) {
    m_upgrade_duration = upgrade_duration;
    m_upgrade_duration_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_duration_Set() const{
    return m_upgrade_duration_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_duration_Valid() const{
    return m_upgrade_duration_isValid;
}

qint64 OAIApplicationResourceUpgradeProgressInfo::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIApplicationResourceUpgradeProgressInfo::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint64 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

OAIApplicationResourceUpgradeState OAIApplicationResourceUpgradeProgressInfo::getUpgradeState() const {
    return m_upgrade_state;
}
void OAIApplicationResourceUpgradeProgressInfo::setUpgradeState(const OAIApplicationResourceUpgradeState &upgrade_state) {
    m_upgrade_state = upgrade_state;
    m_upgrade_state_isSet = true;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_state_Set() const{
    return m_upgrade_state_isSet;
}

bool OAIApplicationResourceUpgradeProgressInfo::is_upgrade_state_Valid() const{
    return m_upgrade_state_isValid;
}

bool OAIApplicationResourceUpgradeProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_upgrade_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_upgrade_progress.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationResourceUpgradeProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
