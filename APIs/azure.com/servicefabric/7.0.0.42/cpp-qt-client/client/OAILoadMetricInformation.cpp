/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadMetricInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadMetricInformation::OAILoadMetricInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadMetricInformation::OAILoadMetricInformation() {
    this->initializeModel();
}

OAILoadMetricInformation::~OAILoadMetricInformation() {}

void OAILoadMetricInformation::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_activity_threshold_isSet = false;
    m_activity_threshold_isValid = false;

    m_balancing_threshold_isSet = false;
    m_balancing_threshold_isValid = false;

    m_buffered_cluster_capacity_remaining_isSet = false;
    m_buffered_cluster_capacity_remaining_isValid = false;

    m_cluster_buffered_capacity_isSet = false;
    m_cluster_buffered_capacity_isValid = false;

    m_cluster_capacity_isSet = false;
    m_cluster_capacity_isValid = false;

    m_cluster_capacity_remaining_isSet = false;
    m_cluster_capacity_remaining_isValid = false;

    m_cluster_load_isSet = false;
    m_cluster_load_isValid = false;

    m_cluster_remaining_buffered_capacity_isSet = false;
    m_cluster_remaining_buffered_capacity_isValid = false;

    m_cluster_remaining_capacity_isSet = false;
    m_cluster_remaining_capacity_isValid = false;

    m_current_cluster_load_isSet = false;
    m_current_cluster_load_isValid = false;

    m_deviation_after_isSet = false;
    m_deviation_after_isValid = false;

    m_deviation_before_isSet = false;
    m_deviation_before_isValid = false;

    m_is_balanced_after_isSet = false;
    m_is_balanced_after_isValid = false;

    m_is_balanced_before_isSet = false;
    m_is_balanced_before_isValid = false;

    m_is_cluster_capacity_violation_isSet = false;
    m_is_cluster_capacity_violation_isValid = false;

    m_max_node_load_node_id_isSet = false;
    m_max_node_load_node_id_isValid = false;

    m_max_node_load_value_isSet = false;
    m_max_node_load_value_isValid = false;

    m_maximum_node_load_isSet = false;
    m_maximum_node_load_isValid = false;

    m_min_node_load_node_id_isSet = false;
    m_min_node_load_node_id_isValid = false;

    m_min_node_load_value_isSet = false;
    m_min_node_load_value_isValid = false;

    m_minimum_node_load_isSet = false;
    m_minimum_node_load_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_buffer_percentage_isSet = false;
    m_node_buffer_percentage_isValid = false;

    m_planned_load_removal_isSet = false;
    m_planned_load_removal_isValid = false;
}

void OAILoadMetricInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadMetricInformation::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_activity_threshold_isValid = ::OpenAPI::fromJsonValue(m_activity_threshold, json[QString("ActivityThreshold")]);
    m_activity_threshold_isSet = !json[QString("ActivityThreshold")].isNull() && m_activity_threshold_isValid;

    m_balancing_threshold_isValid = ::OpenAPI::fromJsonValue(m_balancing_threshold, json[QString("BalancingThreshold")]);
    m_balancing_threshold_isSet = !json[QString("BalancingThreshold")].isNull() && m_balancing_threshold_isValid;

    m_buffered_cluster_capacity_remaining_isValid = ::OpenAPI::fromJsonValue(m_buffered_cluster_capacity_remaining, json[QString("BufferedClusterCapacityRemaining")]);
    m_buffered_cluster_capacity_remaining_isSet = !json[QString("BufferedClusterCapacityRemaining")].isNull() && m_buffered_cluster_capacity_remaining_isValid;

    m_cluster_buffered_capacity_isValid = ::OpenAPI::fromJsonValue(m_cluster_buffered_capacity, json[QString("ClusterBufferedCapacity")]);
    m_cluster_buffered_capacity_isSet = !json[QString("ClusterBufferedCapacity")].isNull() && m_cluster_buffered_capacity_isValid;

    m_cluster_capacity_isValid = ::OpenAPI::fromJsonValue(m_cluster_capacity, json[QString("ClusterCapacity")]);
    m_cluster_capacity_isSet = !json[QString("ClusterCapacity")].isNull() && m_cluster_capacity_isValid;

    m_cluster_capacity_remaining_isValid = ::OpenAPI::fromJsonValue(m_cluster_capacity_remaining, json[QString("ClusterCapacityRemaining")]);
    m_cluster_capacity_remaining_isSet = !json[QString("ClusterCapacityRemaining")].isNull() && m_cluster_capacity_remaining_isValid;

    m_cluster_load_isValid = ::OpenAPI::fromJsonValue(m_cluster_load, json[QString("ClusterLoad")]);
    m_cluster_load_isSet = !json[QString("ClusterLoad")].isNull() && m_cluster_load_isValid;

    m_cluster_remaining_buffered_capacity_isValid = ::OpenAPI::fromJsonValue(m_cluster_remaining_buffered_capacity, json[QString("ClusterRemainingBufferedCapacity")]);
    m_cluster_remaining_buffered_capacity_isSet = !json[QString("ClusterRemainingBufferedCapacity")].isNull() && m_cluster_remaining_buffered_capacity_isValid;

    m_cluster_remaining_capacity_isValid = ::OpenAPI::fromJsonValue(m_cluster_remaining_capacity, json[QString("ClusterRemainingCapacity")]);
    m_cluster_remaining_capacity_isSet = !json[QString("ClusterRemainingCapacity")].isNull() && m_cluster_remaining_capacity_isValid;

    m_current_cluster_load_isValid = ::OpenAPI::fromJsonValue(m_current_cluster_load, json[QString("CurrentClusterLoad")]);
    m_current_cluster_load_isSet = !json[QString("CurrentClusterLoad")].isNull() && m_current_cluster_load_isValid;

    m_deviation_after_isValid = ::OpenAPI::fromJsonValue(m_deviation_after, json[QString("DeviationAfter")]);
    m_deviation_after_isSet = !json[QString("DeviationAfter")].isNull() && m_deviation_after_isValid;

    m_deviation_before_isValid = ::OpenAPI::fromJsonValue(m_deviation_before, json[QString("DeviationBefore")]);
    m_deviation_before_isSet = !json[QString("DeviationBefore")].isNull() && m_deviation_before_isValid;

    m_is_balanced_after_isValid = ::OpenAPI::fromJsonValue(m_is_balanced_after, json[QString("IsBalancedAfter")]);
    m_is_balanced_after_isSet = !json[QString("IsBalancedAfter")].isNull() && m_is_balanced_after_isValid;

    m_is_balanced_before_isValid = ::OpenAPI::fromJsonValue(m_is_balanced_before, json[QString("IsBalancedBefore")]);
    m_is_balanced_before_isSet = !json[QString("IsBalancedBefore")].isNull() && m_is_balanced_before_isValid;

    m_is_cluster_capacity_violation_isValid = ::OpenAPI::fromJsonValue(m_is_cluster_capacity_violation, json[QString("IsClusterCapacityViolation")]);
    m_is_cluster_capacity_violation_isSet = !json[QString("IsClusterCapacityViolation")].isNull() && m_is_cluster_capacity_violation_isValid;

    m_max_node_load_node_id_isValid = ::OpenAPI::fromJsonValue(m_max_node_load_node_id, json[QString("MaxNodeLoadNodeId")]);
    m_max_node_load_node_id_isSet = !json[QString("MaxNodeLoadNodeId")].isNull() && m_max_node_load_node_id_isValid;

    m_max_node_load_value_isValid = ::OpenAPI::fromJsonValue(m_max_node_load_value, json[QString("MaxNodeLoadValue")]);
    m_max_node_load_value_isSet = !json[QString("MaxNodeLoadValue")].isNull() && m_max_node_load_value_isValid;

    m_maximum_node_load_isValid = ::OpenAPI::fromJsonValue(m_maximum_node_load, json[QString("MaximumNodeLoad")]);
    m_maximum_node_load_isSet = !json[QString("MaximumNodeLoad")].isNull() && m_maximum_node_load_isValid;

    m_min_node_load_node_id_isValid = ::OpenAPI::fromJsonValue(m_min_node_load_node_id, json[QString("MinNodeLoadNodeId")]);
    m_min_node_load_node_id_isSet = !json[QString("MinNodeLoadNodeId")].isNull() && m_min_node_load_node_id_isValid;

    m_min_node_load_value_isValid = ::OpenAPI::fromJsonValue(m_min_node_load_value, json[QString("MinNodeLoadValue")]);
    m_min_node_load_value_isSet = !json[QString("MinNodeLoadValue")].isNull() && m_min_node_load_value_isValid;

    m_minimum_node_load_isValid = ::OpenAPI::fromJsonValue(m_minimum_node_load, json[QString("MinimumNodeLoad")]);
    m_minimum_node_load_isSet = !json[QString("MinimumNodeLoad")].isNull() && m_minimum_node_load_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_node_buffer_percentage_isValid = ::OpenAPI::fromJsonValue(m_node_buffer_percentage, json[QString("NodeBufferPercentage")]);
    m_node_buffer_percentage_isSet = !json[QString("NodeBufferPercentage")].isNull() && m_node_buffer_percentage_isValid;

    m_planned_load_removal_isValid = ::OpenAPI::fromJsonValue(m_planned_load_removal, json[QString("PlannedLoadRemoval")]);
    m_planned_load_removal_isSet = !json[QString("PlannedLoadRemoval")].isNull() && m_planned_load_removal_isValid;
}

QString OAILoadMetricInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadMetricInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_activity_threshold_isSet) {
        obj.insert(QString("ActivityThreshold"), ::OpenAPI::toJsonValue(m_activity_threshold));
    }
    if (m_balancing_threshold_isSet) {
        obj.insert(QString("BalancingThreshold"), ::OpenAPI::toJsonValue(m_balancing_threshold));
    }
    if (m_buffered_cluster_capacity_remaining_isSet) {
        obj.insert(QString("BufferedClusterCapacityRemaining"), ::OpenAPI::toJsonValue(m_buffered_cluster_capacity_remaining));
    }
    if (m_cluster_buffered_capacity_isSet) {
        obj.insert(QString("ClusterBufferedCapacity"), ::OpenAPI::toJsonValue(m_cluster_buffered_capacity));
    }
    if (m_cluster_capacity_isSet) {
        obj.insert(QString("ClusterCapacity"), ::OpenAPI::toJsonValue(m_cluster_capacity));
    }
    if (m_cluster_capacity_remaining_isSet) {
        obj.insert(QString("ClusterCapacityRemaining"), ::OpenAPI::toJsonValue(m_cluster_capacity_remaining));
    }
    if (m_cluster_load_isSet) {
        obj.insert(QString("ClusterLoad"), ::OpenAPI::toJsonValue(m_cluster_load));
    }
    if (m_cluster_remaining_buffered_capacity_isSet) {
        obj.insert(QString("ClusterRemainingBufferedCapacity"), ::OpenAPI::toJsonValue(m_cluster_remaining_buffered_capacity));
    }
    if (m_cluster_remaining_capacity_isSet) {
        obj.insert(QString("ClusterRemainingCapacity"), ::OpenAPI::toJsonValue(m_cluster_remaining_capacity));
    }
    if (m_current_cluster_load_isSet) {
        obj.insert(QString("CurrentClusterLoad"), ::OpenAPI::toJsonValue(m_current_cluster_load));
    }
    if (m_deviation_after_isSet) {
        obj.insert(QString("DeviationAfter"), ::OpenAPI::toJsonValue(m_deviation_after));
    }
    if (m_deviation_before_isSet) {
        obj.insert(QString("DeviationBefore"), ::OpenAPI::toJsonValue(m_deviation_before));
    }
    if (m_is_balanced_after_isSet) {
        obj.insert(QString("IsBalancedAfter"), ::OpenAPI::toJsonValue(m_is_balanced_after));
    }
    if (m_is_balanced_before_isSet) {
        obj.insert(QString("IsBalancedBefore"), ::OpenAPI::toJsonValue(m_is_balanced_before));
    }
    if (m_is_cluster_capacity_violation_isSet) {
        obj.insert(QString("IsClusterCapacityViolation"), ::OpenAPI::toJsonValue(m_is_cluster_capacity_violation));
    }
    if (m_max_node_load_node_id.isSet()) {
        obj.insert(QString("MaxNodeLoadNodeId"), ::OpenAPI::toJsonValue(m_max_node_load_node_id));
    }
    if (m_max_node_load_value_isSet) {
        obj.insert(QString("MaxNodeLoadValue"), ::OpenAPI::toJsonValue(m_max_node_load_value));
    }
    if (m_maximum_node_load_isSet) {
        obj.insert(QString("MaximumNodeLoad"), ::OpenAPI::toJsonValue(m_maximum_node_load));
    }
    if (m_min_node_load_node_id.isSet()) {
        obj.insert(QString("MinNodeLoadNodeId"), ::OpenAPI::toJsonValue(m_min_node_load_node_id));
    }
    if (m_min_node_load_value_isSet) {
        obj.insert(QString("MinNodeLoadValue"), ::OpenAPI::toJsonValue(m_min_node_load_value));
    }
    if (m_minimum_node_load_isSet) {
        obj.insert(QString("MinimumNodeLoad"), ::OpenAPI::toJsonValue(m_minimum_node_load));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_buffer_percentage_isSet) {
        obj.insert(QString("NodeBufferPercentage"), ::OpenAPI::toJsonValue(m_node_buffer_percentage));
    }
    if (m_planned_load_removal_isSet) {
        obj.insert(QString("PlannedLoadRemoval"), ::OpenAPI::toJsonValue(m_planned_load_removal));
    }
    return obj;
}

QString OAILoadMetricInformation::getAction() const {
    return m_action;
}
void OAILoadMetricInformation::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAILoadMetricInformation::is_action_Set() const{
    return m_action_isSet;
}

bool OAILoadMetricInformation::is_action_Valid() const{
    return m_action_isValid;
}

QString OAILoadMetricInformation::getActivityThreshold() const {
    return m_activity_threshold;
}
void OAILoadMetricInformation::setActivityThreshold(const QString &activity_threshold) {
    m_activity_threshold = activity_threshold;
    m_activity_threshold_isSet = true;
}

bool OAILoadMetricInformation::is_activity_threshold_Set() const{
    return m_activity_threshold_isSet;
}

bool OAILoadMetricInformation::is_activity_threshold_Valid() const{
    return m_activity_threshold_isValid;
}

QString OAILoadMetricInformation::getBalancingThreshold() const {
    return m_balancing_threshold;
}
void OAILoadMetricInformation::setBalancingThreshold(const QString &balancing_threshold) {
    m_balancing_threshold = balancing_threshold;
    m_balancing_threshold_isSet = true;
}

bool OAILoadMetricInformation::is_balancing_threshold_Set() const{
    return m_balancing_threshold_isSet;
}

bool OAILoadMetricInformation::is_balancing_threshold_Valid() const{
    return m_balancing_threshold_isValid;
}

QString OAILoadMetricInformation::getBufferedClusterCapacityRemaining() const {
    return m_buffered_cluster_capacity_remaining;
}
void OAILoadMetricInformation::setBufferedClusterCapacityRemaining(const QString &buffered_cluster_capacity_remaining) {
    m_buffered_cluster_capacity_remaining = buffered_cluster_capacity_remaining;
    m_buffered_cluster_capacity_remaining_isSet = true;
}

bool OAILoadMetricInformation::is_buffered_cluster_capacity_remaining_Set() const{
    return m_buffered_cluster_capacity_remaining_isSet;
}

bool OAILoadMetricInformation::is_buffered_cluster_capacity_remaining_Valid() const{
    return m_buffered_cluster_capacity_remaining_isValid;
}

QString OAILoadMetricInformation::getClusterBufferedCapacity() const {
    return m_cluster_buffered_capacity;
}
void OAILoadMetricInformation::setClusterBufferedCapacity(const QString &cluster_buffered_capacity) {
    m_cluster_buffered_capacity = cluster_buffered_capacity;
    m_cluster_buffered_capacity_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_buffered_capacity_Set() const{
    return m_cluster_buffered_capacity_isSet;
}

bool OAILoadMetricInformation::is_cluster_buffered_capacity_Valid() const{
    return m_cluster_buffered_capacity_isValid;
}

QString OAILoadMetricInformation::getClusterCapacity() const {
    return m_cluster_capacity;
}
void OAILoadMetricInformation::setClusterCapacity(const QString &cluster_capacity) {
    m_cluster_capacity = cluster_capacity;
    m_cluster_capacity_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_capacity_Set() const{
    return m_cluster_capacity_isSet;
}

bool OAILoadMetricInformation::is_cluster_capacity_Valid() const{
    return m_cluster_capacity_isValid;
}

QString OAILoadMetricInformation::getClusterCapacityRemaining() const {
    return m_cluster_capacity_remaining;
}
void OAILoadMetricInformation::setClusterCapacityRemaining(const QString &cluster_capacity_remaining) {
    m_cluster_capacity_remaining = cluster_capacity_remaining;
    m_cluster_capacity_remaining_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_capacity_remaining_Set() const{
    return m_cluster_capacity_remaining_isSet;
}

bool OAILoadMetricInformation::is_cluster_capacity_remaining_Valid() const{
    return m_cluster_capacity_remaining_isValid;
}

QString OAILoadMetricInformation::getClusterLoad() const {
    return m_cluster_load;
}
void OAILoadMetricInformation::setClusterLoad(const QString &cluster_load) {
    m_cluster_load = cluster_load;
    m_cluster_load_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_load_Set() const{
    return m_cluster_load_isSet;
}

bool OAILoadMetricInformation::is_cluster_load_Valid() const{
    return m_cluster_load_isValid;
}

QString OAILoadMetricInformation::getClusterRemainingBufferedCapacity() const {
    return m_cluster_remaining_buffered_capacity;
}
void OAILoadMetricInformation::setClusterRemainingBufferedCapacity(const QString &cluster_remaining_buffered_capacity) {
    m_cluster_remaining_buffered_capacity = cluster_remaining_buffered_capacity;
    m_cluster_remaining_buffered_capacity_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_remaining_buffered_capacity_Set() const{
    return m_cluster_remaining_buffered_capacity_isSet;
}

bool OAILoadMetricInformation::is_cluster_remaining_buffered_capacity_Valid() const{
    return m_cluster_remaining_buffered_capacity_isValid;
}

QString OAILoadMetricInformation::getClusterRemainingCapacity() const {
    return m_cluster_remaining_capacity;
}
void OAILoadMetricInformation::setClusterRemainingCapacity(const QString &cluster_remaining_capacity) {
    m_cluster_remaining_capacity = cluster_remaining_capacity;
    m_cluster_remaining_capacity_isSet = true;
}

bool OAILoadMetricInformation::is_cluster_remaining_capacity_Set() const{
    return m_cluster_remaining_capacity_isSet;
}

bool OAILoadMetricInformation::is_cluster_remaining_capacity_Valid() const{
    return m_cluster_remaining_capacity_isValid;
}

QString OAILoadMetricInformation::getCurrentClusterLoad() const {
    return m_current_cluster_load;
}
void OAILoadMetricInformation::setCurrentClusterLoad(const QString &current_cluster_load) {
    m_current_cluster_load = current_cluster_load;
    m_current_cluster_load_isSet = true;
}

bool OAILoadMetricInformation::is_current_cluster_load_Set() const{
    return m_current_cluster_load_isSet;
}

bool OAILoadMetricInformation::is_current_cluster_load_Valid() const{
    return m_current_cluster_load_isValid;
}

QString OAILoadMetricInformation::getDeviationAfter() const {
    return m_deviation_after;
}
void OAILoadMetricInformation::setDeviationAfter(const QString &deviation_after) {
    m_deviation_after = deviation_after;
    m_deviation_after_isSet = true;
}

bool OAILoadMetricInformation::is_deviation_after_Set() const{
    return m_deviation_after_isSet;
}

bool OAILoadMetricInformation::is_deviation_after_Valid() const{
    return m_deviation_after_isValid;
}

QString OAILoadMetricInformation::getDeviationBefore() const {
    return m_deviation_before;
}
void OAILoadMetricInformation::setDeviationBefore(const QString &deviation_before) {
    m_deviation_before = deviation_before;
    m_deviation_before_isSet = true;
}

bool OAILoadMetricInformation::is_deviation_before_Set() const{
    return m_deviation_before_isSet;
}

bool OAILoadMetricInformation::is_deviation_before_Valid() const{
    return m_deviation_before_isValid;
}

bool OAILoadMetricInformation::isIsBalancedAfter() const {
    return m_is_balanced_after;
}
void OAILoadMetricInformation::setIsBalancedAfter(const bool &is_balanced_after) {
    m_is_balanced_after = is_balanced_after;
    m_is_balanced_after_isSet = true;
}

bool OAILoadMetricInformation::is_is_balanced_after_Set() const{
    return m_is_balanced_after_isSet;
}

bool OAILoadMetricInformation::is_is_balanced_after_Valid() const{
    return m_is_balanced_after_isValid;
}

bool OAILoadMetricInformation::isIsBalancedBefore() const {
    return m_is_balanced_before;
}
void OAILoadMetricInformation::setIsBalancedBefore(const bool &is_balanced_before) {
    m_is_balanced_before = is_balanced_before;
    m_is_balanced_before_isSet = true;
}

bool OAILoadMetricInformation::is_is_balanced_before_Set() const{
    return m_is_balanced_before_isSet;
}

bool OAILoadMetricInformation::is_is_balanced_before_Valid() const{
    return m_is_balanced_before_isValid;
}

bool OAILoadMetricInformation::isIsClusterCapacityViolation() const {
    return m_is_cluster_capacity_violation;
}
void OAILoadMetricInformation::setIsClusterCapacityViolation(const bool &is_cluster_capacity_violation) {
    m_is_cluster_capacity_violation = is_cluster_capacity_violation;
    m_is_cluster_capacity_violation_isSet = true;
}

bool OAILoadMetricInformation::is_is_cluster_capacity_violation_Set() const{
    return m_is_cluster_capacity_violation_isSet;
}

bool OAILoadMetricInformation::is_is_cluster_capacity_violation_Valid() const{
    return m_is_cluster_capacity_violation_isValid;
}

OAINodeId OAILoadMetricInformation::getMaxNodeLoadNodeId() const {
    return m_max_node_load_node_id;
}
void OAILoadMetricInformation::setMaxNodeLoadNodeId(const OAINodeId &max_node_load_node_id) {
    m_max_node_load_node_id = max_node_load_node_id;
    m_max_node_load_node_id_isSet = true;
}

bool OAILoadMetricInformation::is_max_node_load_node_id_Set() const{
    return m_max_node_load_node_id_isSet;
}

bool OAILoadMetricInformation::is_max_node_load_node_id_Valid() const{
    return m_max_node_load_node_id_isValid;
}

QString OAILoadMetricInformation::getMaxNodeLoadValue() const {
    return m_max_node_load_value;
}
void OAILoadMetricInformation::setMaxNodeLoadValue(const QString &max_node_load_value) {
    m_max_node_load_value = max_node_load_value;
    m_max_node_load_value_isSet = true;
}

bool OAILoadMetricInformation::is_max_node_load_value_Set() const{
    return m_max_node_load_value_isSet;
}

bool OAILoadMetricInformation::is_max_node_load_value_Valid() const{
    return m_max_node_load_value_isValid;
}

QString OAILoadMetricInformation::getMaximumNodeLoad() const {
    return m_maximum_node_load;
}
void OAILoadMetricInformation::setMaximumNodeLoad(const QString &maximum_node_load) {
    m_maximum_node_load = maximum_node_load;
    m_maximum_node_load_isSet = true;
}

bool OAILoadMetricInformation::is_maximum_node_load_Set() const{
    return m_maximum_node_load_isSet;
}

bool OAILoadMetricInformation::is_maximum_node_load_Valid() const{
    return m_maximum_node_load_isValid;
}

OAINodeId OAILoadMetricInformation::getMinNodeLoadNodeId() const {
    return m_min_node_load_node_id;
}
void OAILoadMetricInformation::setMinNodeLoadNodeId(const OAINodeId &min_node_load_node_id) {
    m_min_node_load_node_id = min_node_load_node_id;
    m_min_node_load_node_id_isSet = true;
}

bool OAILoadMetricInformation::is_min_node_load_node_id_Set() const{
    return m_min_node_load_node_id_isSet;
}

bool OAILoadMetricInformation::is_min_node_load_node_id_Valid() const{
    return m_min_node_load_node_id_isValid;
}

QString OAILoadMetricInformation::getMinNodeLoadValue() const {
    return m_min_node_load_value;
}
void OAILoadMetricInformation::setMinNodeLoadValue(const QString &min_node_load_value) {
    m_min_node_load_value = min_node_load_value;
    m_min_node_load_value_isSet = true;
}

bool OAILoadMetricInformation::is_min_node_load_value_Set() const{
    return m_min_node_load_value_isSet;
}

bool OAILoadMetricInformation::is_min_node_load_value_Valid() const{
    return m_min_node_load_value_isValid;
}

QString OAILoadMetricInformation::getMinimumNodeLoad() const {
    return m_minimum_node_load;
}
void OAILoadMetricInformation::setMinimumNodeLoad(const QString &minimum_node_load) {
    m_minimum_node_load = minimum_node_load;
    m_minimum_node_load_isSet = true;
}

bool OAILoadMetricInformation::is_minimum_node_load_Set() const{
    return m_minimum_node_load_isSet;
}

bool OAILoadMetricInformation::is_minimum_node_load_Valid() const{
    return m_minimum_node_load_isValid;
}

QString OAILoadMetricInformation::getName() const {
    return m_name;
}
void OAILoadMetricInformation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILoadMetricInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILoadMetricInformation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILoadMetricInformation::getNodeBufferPercentage() const {
    return m_node_buffer_percentage;
}
void OAILoadMetricInformation::setNodeBufferPercentage(const QString &node_buffer_percentage) {
    m_node_buffer_percentage = node_buffer_percentage;
    m_node_buffer_percentage_isSet = true;
}

bool OAILoadMetricInformation::is_node_buffer_percentage_Set() const{
    return m_node_buffer_percentage_isSet;
}

bool OAILoadMetricInformation::is_node_buffer_percentage_Valid() const{
    return m_node_buffer_percentage_isValid;
}

QString OAILoadMetricInformation::getPlannedLoadRemoval() const {
    return m_planned_load_removal;
}
void OAILoadMetricInformation::setPlannedLoadRemoval(const QString &planned_load_removal) {
    m_planned_load_removal = planned_load_removal;
    m_planned_load_removal_isSet = true;
}

bool OAILoadMetricInformation::is_planned_load_removal_Set() const{
    return m_planned_load_removal_isSet;
}

bool OAILoadMetricInformation::is_planned_load_removal_Valid() const{
    return m_planned_load_removal_isValid;
}

bool OAILoadMetricInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balancing_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffered_cluster_capacity_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_buffered_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_capacity_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_remaining_buffered_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_remaining_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_cluster_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deviation_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deviation_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_balanced_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_balanced_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cluster_capacity_violation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_load_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_load_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_node_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_node_load_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_node_load_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_node_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_buffer_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_load_removal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadMetricInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
