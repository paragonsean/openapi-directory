/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeshApplicationsApi_H
#define OAI_OAIMeshApplicationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationResourceDescription.h"
#include "OAIApplicationResourceUpgradeProgressInfo.h"
#include "OAIFabricError.h"
#include "OAIPagedApplicationResourceDescriptionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeshApplicationsApi : public QObject {
    Q_OBJECT

public:
    OAIMeshApplicationsApi(const int timeOut = 0);
    ~OAIMeshApplicationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    * @param[in]  application_resource_description OAIApplicationResourceDescription [required]
    */
    virtual void meshApplicationCreateOrUpdate(const QString &api_version, const QString &application_resource_name, const OAIApplicationResourceDescription &application_resource_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void meshApplicationDelete(const QString &api_version, const QString &application_resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void meshApplicationGet(const QString &api_version, const QString &application_resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_resource_name QString [required]
    */
    virtual void meshApplicationGetUpgradeProgress(const QString &api_version, const QString &application_resource_name);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void meshApplicationList(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meshApplicationCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void meshApplicationDeleteCallback(OAIHttpRequestWorker *worker);
    void meshApplicationGetCallback(OAIHttpRequestWorker *worker);
    void meshApplicationGetUpgradeProgressCallback(OAIHttpRequestWorker *worker);
    void meshApplicationListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meshApplicationCreateOrUpdateSignal(OAIApplicationResourceDescription summary);
    void meshApplicationDeleteSignal();
    void meshApplicationGetSignal(OAIApplicationResourceDescription summary);
    void meshApplicationGetUpgradeProgressSignal(OAIApplicationResourceUpgradeProgressInfo summary);
    void meshApplicationListSignal(OAIPagedApplicationResourceDescriptionList summary);


    void meshApplicationCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescription summary);
    void meshApplicationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void meshApplicationGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceDescription summary);
    void meshApplicationGetUpgradeProgressSignalFull(OAIHttpRequestWorker *worker, OAIApplicationResourceUpgradeProgressInfo summary);
    void meshApplicationListSignalFull(OAIHttpRequestWorker *worker, OAIPagedApplicationResourceDescriptionList summary);

    Q_DECL_DEPRECATED_X("Use meshApplicationCreateOrUpdateSignalError() instead")
    void meshApplicationCreateOrUpdateSignalE(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationCreateOrUpdateSignalError(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationDeleteSignalError() instead")
    void meshApplicationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationGetSignalError() instead")
    void meshApplicationGetSignalE(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationGetSignalError(OAIApplicationResourceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationGetUpgradeProgressSignalError() instead")
    void meshApplicationGetUpgradeProgressSignalE(OAIApplicationResourceUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationGetUpgradeProgressSignalError(OAIApplicationResourceUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationListSignalError() instead")
    void meshApplicationListSignalE(OAIPagedApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationListSignalError(OAIPagedApplicationResourceDescriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meshApplicationCreateOrUpdateSignalErrorFull() instead")
    void meshApplicationCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationDeleteSignalErrorFull() instead")
    void meshApplicationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationGetSignalErrorFull() instead")
    void meshApplicationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationGetUpgradeProgressSignalErrorFull() instead")
    void meshApplicationGetUpgradeProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationGetUpgradeProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meshApplicationListSignalErrorFull() instead")
    void meshApplicationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meshApplicationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
