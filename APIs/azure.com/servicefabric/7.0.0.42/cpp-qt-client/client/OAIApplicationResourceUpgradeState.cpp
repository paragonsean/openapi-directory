/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationResourceUpgradeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationResourceUpgradeState::OAIApplicationResourceUpgradeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationResourceUpgradeState::OAIApplicationResourceUpgradeState() {
    this->initializeModel();
}

OAIApplicationResourceUpgradeState::~OAIApplicationResourceUpgradeState() {}

void OAIApplicationResourceUpgradeState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationResourceUpgradeState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationResourceUpgradeState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProvisioningTarget", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::PROVISIONINGTARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForward", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::ROLLINGFORWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnprovisioningCurrent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::UNPROVISIONINGCURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompletedRollforward", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::COMPLETEDROLLFORWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingBack", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::ROLLINGBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnprovisioningTarget", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::UNPROVISIONINGTARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompletedRollback", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::COMPLETEDROLLBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationResourceUpgradeState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationResourceUpgradeState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationResourceUpgradeState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationResourceUpgradeState::INVALID:
            val = "Invalid";
            break;
        case eOAIApplicationResourceUpgradeState::PROVISIONINGTARGET:
            val = "ProvisioningTarget";
            break;
        case eOAIApplicationResourceUpgradeState::ROLLINGFORWARD:
            val = "RollingForward";
            break;
        case eOAIApplicationResourceUpgradeState::UNPROVISIONINGCURRENT:
            val = "UnprovisioningCurrent";
            break;
        case eOAIApplicationResourceUpgradeState::COMPLETEDROLLFORWARD:
            val = "CompletedRollforward";
            break;
        case eOAIApplicationResourceUpgradeState::ROLLINGBACK:
            val = "RollingBack";
            break;
        case eOAIApplicationResourceUpgradeState::UNPROVISIONINGTARGET:
            val = "UnprovisioningTarget";
            break;
        case eOAIApplicationResourceUpgradeState::COMPLETEDROLLBACK:
            val = "CompletedRollback";
            break;
        case eOAIApplicationResourceUpgradeState::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationResourceUpgradeState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationResourceUpgradeState::eOAIApplicationResourceUpgradeState OAIApplicationResourceUpgradeState::getValue() const {
    return m_value;
}

void OAIApplicationResourceUpgradeState::setValue(const OAIApplicationResourceUpgradeState::eOAIApplicationResourceUpgradeState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationResourceUpgradeState::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationResourceUpgradeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
