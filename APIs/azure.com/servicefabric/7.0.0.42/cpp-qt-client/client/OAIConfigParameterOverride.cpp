/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigParameterOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigParameterOverride::OAIConfigParameterOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigParameterOverride::OAIConfigParameterOverride() {
    this->initializeModel();
}

OAIConfigParameterOverride::~OAIConfigParameterOverride() {}

void OAIConfigParameterOverride::initializeModel() {

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_parameter_value_isSet = false;
    m_parameter_value_isValid = false;

    m_persist_across_upgrade_isSet = false;
    m_persist_across_upgrade_isValid = false;

    m_section_name_isSet = false;
    m_section_name_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIConfigParameterOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigParameterOverride::fromJsonObject(QJsonObject json) {

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_parameter_value_isValid = ::OpenAPI::fromJsonValue(m_parameter_value, json[QString("ParameterValue")]);
    m_parameter_value_isSet = !json[QString("ParameterValue")].isNull() && m_parameter_value_isValid;

    m_persist_across_upgrade_isValid = ::OpenAPI::fromJsonValue(m_persist_across_upgrade, json[QString("PersistAcrossUpgrade")]);
    m_persist_across_upgrade_isSet = !json[QString("PersistAcrossUpgrade")].isNull() && m_persist_across_upgrade_isValid;

    m_section_name_isValid = ::OpenAPI::fromJsonValue(m_section_name, json[QString("SectionName")]);
    m_section_name_isSet = !json[QString("SectionName")].isNull() && m_section_name_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;
}

QString OAIConfigParameterOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigParameterOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_parameter_value_isSet) {
        obj.insert(QString("ParameterValue"), ::OpenAPI::toJsonValue(m_parameter_value));
    }
    if (m_persist_across_upgrade_isSet) {
        obj.insert(QString("PersistAcrossUpgrade"), ::OpenAPI::toJsonValue(m_persist_across_upgrade));
    }
    if (m_section_name_isSet) {
        obj.insert(QString("SectionName"), ::OpenAPI::toJsonValue(m_section_name));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIConfigParameterOverride::getParameterName() const {
    return m_parameter_name;
}
void OAIConfigParameterOverride::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIConfigParameterOverride::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIConfigParameterOverride::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIConfigParameterOverride::getParameterValue() const {
    return m_parameter_value;
}
void OAIConfigParameterOverride::setParameterValue(const QString &parameter_value) {
    m_parameter_value = parameter_value;
    m_parameter_value_isSet = true;
}

bool OAIConfigParameterOverride::is_parameter_value_Set() const{
    return m_parameter_value_isSet;
}

bool OAIConfigParameterOverride::is_parameter_value_Valid() const{
    return m_parameter_value_isValid;
}

bool OAIConfigParameterOverride::isPersistAcrossUpgrade() const {
    return m_persist_across_upgrade;
}
void OAIConfigParameterOverride::setPersistAcrossUpgrade(const bool &persist_across_upgrade) {
    m_persist_across_upgrade = persist_across_upgrade;
    m_persist_across_upgrade_isSet = true;
}

bool OAIConfigParameterOverride::is_persist_across_upgrade_Set() const{
    return m_persist_across_upgrade_isSet;
}

bool OAIConfigParameterOverride::is_persist_across_upgrade_Valid() const{
    return m_persist_across_upgrade_isValid;
}

QString OAIConfigParameterOverride::getSectionName() const {
    return m_section_name;
}
void OAIConfigParameterOverride::setSectionName(const QString &section_name) {
    m_section_name = section_name;
    m_section_name_isSet = true;
}

bool OAIConfigParameterOverride::is_section_name_Set() const{
    return m_section_name_isSet;
}

bool OAIConfigParameterOverride::is_section_name_Valid() const{
    return m_section_name_isValid;
}

QString OAIConfigParameterOverride::getTimeout() const {
    return m_timeout;
}
void OAIConfigParameterOverride::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIConfigParameterOverride::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIConfigParameterOverride::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIConfigParameterOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persist_across_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigParameterOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_name_isValid && m_parameter_value_isValid && m_section_name_isValid && true;
}

} // namespace OpenAPI
