/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeAddedToClusterEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeAddedToClusterEvent::OAINodeAddedToClusterEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeAddedToClusterEvent::OAINodeAddedToClusterEvent() {
    this->initializeModel();
}

OAINodeAddedToClusterEvent::~OAINodeAddedToClusterEvent() {}

void OAINodeAddedToClusterEvent::initializeModel() {

    m_fabric_version_isSet = false;
    m_fabric_version_isValid = false;

    m_ip_address_or_fqdn_isSet = false;
    m_ip_address_or_fqdn_isValid = false;

    m_node_capacities_isSet = false;
    m_node_capacities_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_instance_isSet = false;
    m_node_instance_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAINodeAddedToClusterEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeAddedToClusterEvent::fromJsonObject(QJsonObject json) {

    m_fabric_version_isValid = ::OpenAPI::fromJsonValue(m_fabric_version, json[QString("FabricVersion")]);
    m_fabric_version_isSet = !json[QString("FabricVersion")].isNull() && m_fabric_version_isValid;

    m_ip_address_or_fqdn_isValid = ::OpenAPI::fromJsonValue(m_ip_address_or_fqdn, json[QString("IpAddressOrFQDN")]);
    m_ip_address_or_fqdn_isSet = !json[QString("IpAddressOrFQDN")].isNull() && m_ip_address_or_fqdn_isValid;

    m_node_capacities_isValid = ::OpenAPI::fromJsonValue(m_node_capacities, json[QString("NodeCapacities")]);
    m_node_capacities_isSet = !json[QString("NodeCapacities")].isNull() && m_node_capacities_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_node_instance_isValid = ::OpenAPI::fromJsonValue(m_node_instance, json[QString("NodeInstance")]);
    m_node_instance_isSet = !json[QString("NodeInstance")].isNull() && m_node_instance_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAINodeAddedToClusterEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeAddedToClusterEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_fabric_version_isSet) {
        obj.insert(QString("FabricVersion"), ::OpenAPI::toJsonValue(m_fabric_version));
    }
    if (m_ip_address_or_fqdn_isSet) {
        obj.insert(QString("IpAddressOrFQDN"), ::OpenAPI::toJsonValue(m_ip_address_or_fqdn));
    }
    if (m_node_capacities_isSet) {
        obj.insert(QString("NodeCapacities"), ::OpenAPI::toJsonValue(m_node_capacities));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_instance_isSet) {
        obj.insert(QString("NodeInstance"), ::OpenAPI::toJsonValue(m_node_instance));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAINodeAddedToClusterEvent::getFabricVersion() const {
    return m_fabric_version;
}
void OAINodeAddedToClusterEvent::setFabricVersion(const QString &fabric_version) {
    m_fabric_version = fabric_version;
    m_fabric_version_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_fabric_version_Set() const{
    return m_fabric_version_isSet;
}

bool OAINodeAddedToClusterEvent::is_fabric_version_Valid() const{
    return m_fabric_version_isValid;
}

QString OAINodeAddedToClusterEvent::getIpAddressOrFqdn() const {
    return m_ip_address_or_fqdn;
}
void OAINodeAddedToClusterEvent::setIpAddressOrFqdn(const QString &ip_address_or_fqdn) {
    m_ip_address_or_fqdn = ip_address_or_fqdn;
    m_ip_address_or_fqdn_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_ip_address_or_fqdn_Set() const{
    return m_ip_address_or_fqdn_isSet;
}

bool OAINodeAddedToClusterEvent::is_ip_address_or_fqdn_Valid() const{
    return m_ip_address_or_fqdn_isValid;
}

QString OAINodeAddedToClusterEvent::getNodeCapacities() const {
    return m_node_capacities;
}
void OAINodeAddedToClusterEvent::setNodeCapacities(const QString &node_capacities) {
    m_node_capacities = node_capacities;
    m_node_capacities_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_node_capacities_Set() const{
    return m_node_capacities_isSet;
}

bool OAINodeAddedToClusterEvent::is_node_capacities_Valid() const{
    return m_node_capacities_isValid;
}

QString OAINodeAddedToClusterEvent::getNodeId() const {
    return m_node_id;
}
void OAINodeAddedToClusterEvent::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINodeAddedToClusterEvent::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint64 OAINodeAddedToClusterEvent::getNodeInstance() const {
    return m_node_instance;
}
void OAINodeAddedToClusterEvent::setNodeInstance(const qint64 &node_instance) {
    m_node_instance = node_instance;
    m_node_instance_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_node_instance_Set() const{
    return m_node_instance_isSet;
}

bool OAINodeAddedToClusterEvent::is_node_instance_Valid() const{
    return m_node_instance_isValid;
}

QString OAINodeAddedToClusterEvent::getNodeType() const {
    return m_node_type;
}
void OAINodeAddedToClusterEvent::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAINodeAddedToClusterEvent::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAINodeAddedToClusterEvent::getNodeName() const {
    return m_node_name;
}
void OAINodeAddedToClusterEvent::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAINodeAddedToClusterEvent::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QString OAINodeAddedToClusterEvent::getCategory() const {
    return m_category;
}
void OAINodeAddedToClusterEvent::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_category_Set() const{
    return m_category_isSet;
}

bool OAINodeAddedToClusterEvent::is_category_Valid() const{
    return m_category_isValid;
}

QString OAINodeAddedToClusterEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAINodeAddedToClusterEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAINodeAddedToClusterEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAINodeAddedToClusterEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAINodeAddedToClusterEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAINodeAddedToClusterEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAINodeAddedToClusterEvent::getKind() const {
    return m_kind;
}
void OAINodeAddedToClusterEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINodeAddedToClusterEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAINodeAddedToClusterEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAINodeAddedToClusterEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAINodeAddedToClusterEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAINodeAddedToClusterEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAINodeAddedToClusterEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fabric_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_or_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_capacities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeAddedToClusterEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fabric_version_isValid && m_ip_address_or_fqdn_isValid && m_node_capacities_isValid && m_node_id_isValid && m_node_instance_isValid && m_node_type_isValid && m_node_name_isValid && m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && true;
}

} // namespace OpenAPI
