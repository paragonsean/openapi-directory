/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceLoadMetricDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceLoadMetricDescription::OAIServiceLoadMetricDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceLoadMetricDescription::OAIServiceLoadMetricDescription() {
    this->initializeModel();
}

OAIServiceLoadMetricDescription::~OAIServiceLoadMetricDescription() {}

void OAIServiceLoadMetricDescription::initializeModel() {

    m_default_load_isSet = false;
    m_default_load_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_default_load_isSet = false;
    m_primary_default_load_isValid = false;

    m_secondary_default_load_isSet = false;
    m_secondary_default_load_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIServiceLoadMetricDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceLoadMetricDescription::fromJsonObject(QJsonObject json) {

    m_default_load_isValid = ::OpenAPI::fromJsonValue(m_default_load, json[QString("DefaultLoad")]);
    m_default_load_isSet = !json[QString("DefaultLoad")].isNull() && m_default_load_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_primary_default_load_isValid = ::OpenAPI::fromJsonValue(m_primary_default_load, json[QString("PrimaryDefaultLoad")]);
    m_primary_default_load_isSet = !json[QString("PrimaryDefaultLoad")].isNull() && m_primary_default_load_isValid;

    m_secondary_default_load_isValid = ::OpenAPI::fromJsonValue(m_secondary_default_load, json[QString("SecondaryDefaultLoad")]);
    m_secondary_default_load_isSet = !json[QString("SecondaryDefaultLoad")].isNull() && m_secondary_default_load_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIServiceLoadMetricDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceLoadMetricDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_default_load_isSet) {
        obj.insert(QString("DefaultLoad"), ::OpenAPI::toJsonValue(m_default_load));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_default_load_isSet) {
        obj.insert(QString("PrimaryDefaultLoad"), ::OpenAPI::toJsonValue(m_primary_default_load));
    }
    if (m_secondary_default_load_isSet) {
        obj.insert(QString("SecondaryDefaultLoad"), ::OpenAPI::toJsonValue(m_secondary_default_load));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAIServiceLoadMetricDescription::getDefaultLoad() const {
    return m_default_load;
}
void OAIServiceLoadMetricDescription::setDefaultLoad(const qint32 &default_load) {
    m_default_load = default_load;
    m_default_load_isSet = true;
}

bool OAIServiceLoadMetricDescription::is_default_load_Set() const{
    return m_default_load_isSet;
}

bool OAIServiceLoadMetricDescription::is_default_load_Valid() const{
    return m_default_load_isValid;
}

QString OAIServiceLoadMetricDescription::getName() const {
    return m_name;
}
void OAIServiceLoadMetricDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceLoadMetricDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceLoadMetricDescription::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIServiceLoadMetricDescription::getPrimaryDefaultLoad() const {
    return m_primary_default_load;
}
void OAIServiceLoadMetricDescription::setPrimaryDefaultLoad(const qint32 &primary_default_load) {
    m_primary_default_load = primary_default_load;
    m_primary_default_load_isSet = true;
}

bool OAIServiceLoadMetricDescription::is_primary_default_load_Set() const{
    return m_primary_default_load_isSet;
}

bool OAIServiceLoadMetricDescription::is_primary_default_load_Valid() const{
    return m_primary_default_load_isValid;
}

qint32 OAIServiceLoadMetricDescription::getSecondaryDefaultLoad() const {
    return m_secondary_default_load;
}
void OAIServiceLoadMetricDescription::setSecondaryDefaultLoad(const qint32 &secondary_default_load) {
    m_secondary_default_load = secondary_default_load;
    m_secondary_default_load_isSet = true;
}

bool OAIServiceLoadMetricDescription::is_secondary_default_load_Set() const{
    return m_secondary_default_load_isSet;
}

bool OAIServiceLoadMetricDescription::is_secondary_default_load_Valid() const{
    return m_secondary_default_load_isValid;
}

OAIServiceLoadMetricWeight OAIServiceLoadMetricDescription::getWeight() const {
    return m_weight;
}
void OAIServiceLoadMetricDescription::setWeight(const OAIServiceLoadMetricWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIServiceLoadMetricDescription::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIServiceLoadMetricDescription::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIServiceLoadMetricDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_default_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_default_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceLoadMetricDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
