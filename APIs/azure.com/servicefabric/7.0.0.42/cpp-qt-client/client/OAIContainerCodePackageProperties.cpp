/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerCodePackageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerCodePackageProperties::OAIContainerCodePackageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerCodePackageProperties::OAIContainerCodePackageProperties() {
    this->initializeModel();
}

OAIContainerCodePackageProperties::~OAIContainerCodePackageProperties() {}

void OAIContainerCodePackageProperties::initializeModel() {

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_diagnostics_isSet = false;
    m_diagnostics_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_entrypoint_isSet = false;
    m_entrypoint_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_registry_credential_isSet = false;
    m_image_registry_credential_isValid = false;

    m_instance_view_isSet = false;
    m_instance_view_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_liveness_probe_isSet = false;
    m_liveness_probe_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_readiness_probe_isSet = false;
    m_readiness_probe_isValid = false;

    m_reliable_collections_refs_isSet = false;
    m_reliable_collections_refs_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_volume_refs_isSet = false;
    m_volume_refs_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIContainerCodePackageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerCodePackageProperties::fromJsonObject(QJsonObject json) {

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_diagnostics, json[QString("diagnostics")]);
    m_diagnostics_isSet = !json[QString("diagnostics")].isNull() && m_diagnostics_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_entrypoint, json[QString("entrypoint")]);
    m_entrypoint_isSet = !json[QString("entrypoint")].isNull() && m_entrypoint_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_registry_credential_isValid = ::OpenAPI::fromJsonValue(m_image_registry_credential, json[QString("imageRegistryCredential")]);
    m_image_registry_credential_isSet = !json[QString("imageRegistryCredential")].isNull() && m_image_registry_credential_isValid;

    m_instance_view_isValid = ::OpenAPI::fromJsonValue(m_instance_view, json[QString("instanceView")]);
    m_instance_view_isSet = !json[QString("instanceView")].isNull() && m_instance_view_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_liveness_probe_isValid = ::OpenAPI::fromJsonValue(m_liveness_probe, json[QString("livenessProbe")]);
    m_liveness_probe_isSet = !json[QString("livenessProbe")].isNull() && m_liveness_probe_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_readiness_probe_isValid = ::OpenAPI::fromJsonValue(m_readiness_probe, json[QString("readinessProbe")]);
    m_readiness_probe_isSet = !json[QString("readinessProbe")].isNull() && m_readiness_probe_isValid;

    m_reliable_collections_refs_isValid = ::OpenAPI::fromJsonValue(m_reliable_collections_refs, json[QString("reliableCollectionsRefs")]);
    m_reliable_collections_refs_isSet = !json[QString("reliableCollectionsRefs")].isNull() && m_reliable_collections_refs_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_volume_refs_isValid = ::OpenAPI::fromJsonValue(m_volume_refs, json[QString("volumeRefs")]);
    m_volume_refs_isSet = !json[QString("volumeRefs")].isNull() && m_volume_refs_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIContainerCodePackageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerCodePackageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_diagnostics.isSet()) {
        obj.insert(QString("diagnostics"), ::OpenAPI::toJsonValue(m_diagnostics));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_entrypoint_isSet) {
        obj.insert(QString("entrypoint"), ::OpenAPI::toJsonValue(m_entrypoint));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_registry_credential.isSet()) {
        obj.insert(QString("imageRegistryCredential"), ::OpenAPI::toJsonValue(m_image_registry_credential));
    }
    if (m_instance_view.isSet()) {
        obj.insert(QString("instanceView"), ::OpenAPI::toJsonValue(m_instance_view));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_liveness_probe.size() > 0) {
        obj.insert(QString("livenessProbe"), ::OpenAPI::toJsonValue(m_liveness_probe));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_readiness_probe.size() > 0) {
        obj.insert(QString("readinessProbe"), ::OpenAPI::toJsonValue(m_readiness_probe));
    }
    if (m_reliable_collections_refs.size() > 0) {
        obj.insert(QString("reliableCollectionsRefs"), ::OpenAPI::toJsonValue(m_reliable_collections_refs));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_volume_refs.size() > 0) {
        obj.insert(QString("volumeRefs"), ::OpenAPI::toJsonValue(m_volume_refs));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<QString> OAIContainerCodePackageProperties::getCommands() const {
    return m_commands;
}
void OAIContainerCodePackageProperties::setCommands(const QList<QString> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIContainerCodePackageProperties::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIContainerCodePackageProperties::is_commands_Valid() const{
    return m_commands_isValid;
}

OAIDiagnosticsRef OAIContainerCodePackageProperties::getDiagnostics() const {
    return m_diagnostics;
}
void OAIContainerCodePackageProperties::setDiagnostics(const OAIDiagnosticsRef &diagnostics) {
    m_diagnostics = diagnostics;
    m_diagnostics_isSet = true;
}

bool OAIContainerCodePackageProperties::is_diagnostics_Set() const{
    return m_diagnostics_isSet;
}

bool OAIContainerCodePackageProperties::is_diagnostics_Valid() const{
    return m_diagnostics_isValid;
}

QList<OAIEndpointProperties> OAIContainerCodePackageProperties::getEndpoints() const {
    return m_endpoints;
}
void OAIContainerCodePackageProperties::setEndpoints(const QList<OAIEndpointProperties> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIContainerCodePackageProperties::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIContainerCodePackageProperties::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIContainerCodePackageProperties::getEntrypoint() const {
    return m_entrypoint;
}
void OAIContainerCodePackageProperties::setEntrypoint(const QString &entrypoint) {
    m_entrypoint = entrypoint;
    m_entrypoint_isSet = true;
}

bool OAIContainerCodePackageProperties::is_entrypoint_Set() const{
    return m_entrypoint_isSet;
}

bool OAIContainerCodePackageProperties::is_entrypoint_Valid() const{
    return m_entrypoint_isValid;
}

QList<OAIEnvironmentVariable> OAIContainerCodePackageProperties::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIContainerCodePackageProperties::setEnvironmentVariables(const QList<OAIEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIContainerCodePackageProperties::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIContainerCodePackageProperties::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIContainerCodePackageProperties::getImage() const {
    return m_image;
}
void OAIContainerCodePackageProperties::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerCodePackageProperties::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerCodePackageProperties::is_image_Valid() const{
    return m_image_isValid;
}

OAIImageRegistryCredential OAIContainerCodePackageProperties::getImageRegistryCredential() const {
    return m_image_registry_credential;
}
void OAIContainerCodePackageProperties::setImageRegistryCredential(const OAIImageRegistryCredential &image_registry_credential) {
    m_image_registry_credential = image_registry_credential;
    m_image_registry_credential_isSet = true;
}

bool OAIContainerCodePackageProperties::is_image_registry_credential_Set() const{
    return m_image_registry_credential_isSet;
}

bool OAIContainerCodePackageProperties::is_image_registry_credential_Valid() const{
    return m_image_registry_credential_isValid;
}

OAIContainerInstanceView OAIContainerCodePackageProperties::getInstanceView() const {
    return m_instance_view;
}
void OAIContainerCodePackageProperties::setInstanceView(const OAIContainerInstanceView &instance_view) {
    m_instance_view = instance_view;
    m_instance_view_isSet = true;
}

bool OAIContainerCodePackageProperties::is_instance_view_Set() const{
    return m_instance_view_isSet;
}

bool OAIContainerCodePackageProperties::is_instance_view_Valid() const{
    return m_instance_view_isValid;
}

QList<OAIContainerLabel> OAIContainerCodePackageProperties::getLabels() const {
    return m_labels;
}
void OAIContainerCodePackageProperties::setLabels(const QList<OAIContainerLabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIContainerCodePackageProperties::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIContainerCodePackageProperties::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIProbe> OAIContainerCodePackageProperties::getLivenessProbe() const {
    return m_liveness_probe;
}
void OAIContainerCodePackageProperties::setLivenessProbe(const QList<OAIProbe> &liveness_probe) {
    m_liveness_probe = liveness_probe;
    m_liveness_probe_isSet = true;
}

bool OAIContainerCodePackageProperties::is_liveness_probe_Set() const{
    return m_liveness_probe_isSet;
}

bool OAIContainerCodePackageProperties::is_liveness_probe_Valid() const{
    return m_liveness_probe_isValid;
}

QString OAIContainerCodePackageProperties::getName() const {
    return m_name;
}
void OAIContainerCodePackageProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerCodePackageProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerCodePackageProperties::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProbe> OAIContainerCodePackageProperties::getReadinessProbe() const {
    return m_readiness_probe;
}
void OAIContainerCodePackageProperties::setReadinessProbe(const QList<OAIProbe> &readiness_probe) {
    m_readiness_probe = readiness_probe;
    m_readiness_probe_isSet = true;
}

bool OAIContainerCodePackageProperties::is_readiness_probe_Set() const{
    return m_readiness_probe_isSet;
}

bool OAIContainerCodePackageProperties::is_readiness_probe_Valid() const{
    return m_readiness_probe_isValid;
}

QList<OAIReliableCollectionsRef> OAIContainerCodePackageProperties::getReliableCollectionsRefs() const {
    return m_reliable_collections_refs;
}
void OAIContainerCodePackageProperties::setReliableCollectionsRefs(const QList<OAIReliableCollectionsRef> &reliable_collections_refs) {
    m_reliable_collections_refs = reliable_collections_refs;
    m_reliable_collections_refs_isSet = true;
}

bool OAIContainerCodePackageProperties::is_reliable_collections_refs_Set() const{
    return m_reliable_collections_refs_isSet;
}

bool OAIContainerCodePackageProperties::is_reliable_collections_refs_Valid() const{
    return m_reliable_collections_refs_isValid;
}

OAIResourceRequirements OAIContainerCodePackageProperties::getResources() const {
    return m_resources;
}
void OAIContainerCodePackageProperties::setResources(const OAIResourceRequirements &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIContainerCodePackageProperties::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIContainerCodePackageProperties::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<OAISetting> OAIContainerCodePackageProperties::getSettings() const {
    return m_settings;
}
void OAIContainerCodePackageProperties::setSettings(const QList<OAISetting> &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIContainerCodePackageProperties::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIContainerCodePackageProperties::is_settings_Valid() const{
    return m_settings_isValid;
}

QList<OAIVolumeReference> OAIContainerCodePackageProperties::getVolumeRefs() const {
    return m_volume_refs;
}
void OAIContainerCodePackageProperties::setVolumeRefs(const QList<OAIVolumeReference> &volume_refs) {
    m_volume_refs = volume_refs;
    m_volume_refs_isSet = true;
}

bool OAIContainerCodePackageProperties::is_volume_refs_Set() const{
    return m_volume_refs_isSet;
}

bool OAIContainerCodePackageProperties::is_volume_refs_Valid() const{
    return m_volume_refs_isValid;
}

QList<OAIApplicationScopedVolume> OAIContainerCodePackageProperties::getVolumes() const {
    return m_volumes;
}
void OAIContainerCodePackageProperties::setVolumes(const QList<OAIApplicationScopedVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIContainerCodePackageProperties::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIContainerCodePackageProperties::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIContainerCodePackageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrypoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_registry_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_liveness_probe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_probe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reliable_collections_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerCodePackageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_name_isValid && m_resources_isValid && true;
}

} // namespace OpenAPI
