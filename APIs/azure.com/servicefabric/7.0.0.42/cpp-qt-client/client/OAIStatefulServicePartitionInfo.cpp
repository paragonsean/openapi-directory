/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatefulServicePartitionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatefulServicePartitionInfo::OAIStatefulServicePartitionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatefulServicePartitionInfo::OAIStatefulServicePartitionInfo() {
    this->initializeModel();
}

OAIStatefulServicePartitionInfo::~OAIStatefulServicePartitionInfo() {}

void OAIStatefulServicePartitionInfo::initializeModel() {

    m_last_quorum_loss_duration_isSet = false;
    m_last_quorum_loss_duration_isValid = false;

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_primary_epoch_isSet = false;
    m_primary_epoch_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_partition_information_isSet = false;
    m_partition_information_isValid = false;

    m_partition_status_isSet = false;
    m_partition_status_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;
}

void OAIStatefulServicePartitionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatefulServicePartitionInfo::fromJsonObject(QJsonObject json) {

    m_last_quorum_loss_duration_isValid = ::OpenAPI::fromJsonValue(m_last_quorum_loss_duration, json[QString("LastQuorumLossDuration")]);
    m_last_quorum_loss_duration_isSet = !json[QString("LastQuorumLossDuration")].isNull() && m_last_quorum_loss_duration_isValid;

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("MinReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("MinReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_primary_epoch_isValid = ::OpenAPI::fromJsonValue(m_primary_epoch, json[QString("PrimaryEpoch")]);
    m_primary_epoch_isSet = !json[QString("PrimaryEpoch")].isNull() && m_primary_epoch_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("TargetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("TargetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_partition_information_isValid = ::OpenAPI::fromJsonValue(m_partition_information, json[QString("PartitionInformation")]);
    m_partition_information_isSet = !json[QString("PartitionInformation")].isNull() && m_partition_information_isValid;

    m_partition_status_isValid = ::OpenAPI::fromJsonValue(m_partition_status, json[QString("PartitionStatus")]);
    m_partition_status_isSet = !json[QString("PartitionStatus")].isNull() && m_partition_status_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;
}

QString OAIStatefulServicePartitionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatefulServicePartitionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_last_quorum_loss_duration_isSet) {
        obj.insert(QString("LastQuorumLossDuration"), ::OpenAPI::toJsonValue(m_last_quorum_loss_duration));
    }
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("MinReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_primary_epoch.isSet()) {
        obj.insert(QString("PrimaryEpoch"), ::OpenAPI::toJsonValue(m_primary_epoch));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("TargetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_partition_information.isSet()) {
        obj.insert(QString("PartitionInformation"), ::OpenAPI::toJsonValue(m_partition_information));
    }
    if (m_partition_status.isSet()) {
        obj.insert(QString("PartitionStatus"), ::OpenAPI::toJsonValue(m_partition_status));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    return obj;
}

QString OAIStatefulServicePartitionInfo::getLastQuorumLossDuration() const {
    return m_last_quorum_loss_duration;
}
void OAIStatefulServicePartitionInfo::setLastQuorumLossDuration(const QString &last_quorum_loss_duration) {
    m_last_quorum_loss_duration = last_quorum_loss_duration;
    m_last_quorum_loss_duration_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_last_quorum_loss_duration_Set() const{
    return m_last_quorum_loss_duration_isSet;
}

bool OAIStatefulServicePartitionInfo::is_last_quorum_loss_duration_Valid() const{
    return m_last_quorum_loss_duration_isValid;
}

qint64 OAIStatefulServicePartitionInfo::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIStatefulServicePartitionInfo::setMinReplicaSetSize(const qint64 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIStatefulServicePartitionInfo::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

OAIEpoch OAIStatefulServicePartitionInfo::getPrimaryEpoch() const {
    return m_primary_epoch;
}
void OAIStatefulServicePartitionInfo::setPrimaryEpoch(const OAIEpoch &primary_epoch) {
    m_primary_epoch = primary_epoch;
    m_primary_epoch_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_primary_epoch_Set() const{
    return m_primary_epoch_isSet;
}

bool OAIStatefulServicePartitionInfo::is_primary_epoch_Valid() const{
    return m_primary_epoch_isValid;
}

qint64 OAIStatefulServicePartitionInfo::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIStatefulServicePartitionInfo::setTargetReplicaSetSize(const qint64 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIStatefulServicePartitionInfo::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

OAIHealthState OAIStatefulServicePartitionInfo::getHealthState() const {
    return m_health_state;
}
void OAIStatefulServicePartitionInfo::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIStatefulServicePartitionInfo::is_health_state_Valid() const{
    return m_health_state_isValid;
}

OAIPartitionInformation OAIStatefulServicePartitionInfo::getPartitionInformation() const {
    return m_partition_information;
}
void OAIStatefulServicePartitionInfo::setPartitionInformation(const OAIPartitionInformation &partition_information) {
    m_partition_information = partition_information;
    m_partition_information_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_partition_information_Set() const{
    return m_partition_information_isSet;
}

bool OAIStatefulServicePartitionInfo::is_partition_information_Valid() const{
    return m_partition_information_isValid;
}

OAIServicePartitionStatus OAIStatefulServicePartitionInfo::getPartitionStatus() const {
    return m_partition_status;
}
void OAIStatefulServicePartitionInfo::setPartitionStatus(const OAIServicePartitionStatus &partition_status) {
    m_partition_status = partition_status;
    m_partition_status_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_partition_status_Set() const{
    return m_partition_status_isSet;
}

bool OAIStatefulServicePartitionInfo::is_partition_status_Valid() const{
    return m_partition_status_isValid;
}

OAIServiceKind OAIStatefulServicePartitionInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIStatefulServicePartitionInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatefulServicePartitionInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatefulServicePartitionInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

bool OAIStatefulServicePartitionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_quorum_loss_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_epoch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatefulServicePartitionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
