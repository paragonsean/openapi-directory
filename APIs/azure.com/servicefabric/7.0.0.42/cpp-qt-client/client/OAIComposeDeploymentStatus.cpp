/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComposeDeploymentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComposeDeploymentStatus::OAIComposeDeploymentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComposeDeploymentStatus::OAIComposeDeploymentStatus() {
    this->initializeModel();
}

OAIComposeDeploymentStatus::~OAIComposeDeploymentStatus() {}

void OAIComposeDeploymentStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComposeDeploymentStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComposeDeploymentStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Provisioning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::PROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unprovisioning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::UNPROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Upgrading", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentStatus::UPGRADING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComposeDeploymentStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComposeDeploymentStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComposeDeploymentStatus::INVALID:
            val = "Invalid";
            break;
        case eOAIComposeDeploymentStatus::PROVISIONING:
            val = "Provisioning";
            break;
        case eOAIComposeDeploymentStatus::CREATING:
            val = "Creating";
            break;
        case eOAIComposeDeploymentStatus::READY:
            val = "Ready";
            break;
        case eOAIComposeDeploymentStatus::UNPROVISIONING:
            val = "Unprovisioning";
            break;
        case eOAIComposeDeploymentStatus::DELETING:
            val = "Deleting";
            break;
        case eOAIComposeDeploymentStatus::FAILED:
            val = "Failed";
            break;
        case eOAIComposeDeploymentStatus::UPGRADING:
            val = "Upgrading";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComposeDeploymentStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComposeDeploymentStatus::eOAIComposeDeploymentStatus OAIComposeDeploymentStatus::getValue() const {
    return m_value;
}

void OAIComposeDeploymentStatus::setValue(const OAIComposeDeploymentStatus::eOAIComposeDeploymentStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComposeDeploymentStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIComposeDeploymentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
