/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileShareBackupStorageDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileShareBackupStorageDescription::OAIFileShareBackupStorageDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileShareBackupStorageDescription::OAIFileShareBackupStorageDescription() {
    this->initializeModel();
}

OAIFileShareBackupStorageDescription::~OAIFileShareBackupStorageDescription() {}

void OAIFileShareBackupStorageDescription::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_primary_password_isSet = false;
    m_primary_password_isValid = false;

    m_primary_user_name_isSet = false;
    m_primary_user_name_isValid = false;

    m_secondary_password_isSet = false;
    m_secondary_password_isValid = false;

    m_secondary_user_name_isSet = false;
    m_secondary_user_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_storage_kind_isSet = false;
    m_storage_kind_isValid = false;
}

void OAIFileShareBackupStorageDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileShareBackupStorageDescription::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_primary_password_isValid = ::OpenAPI::fromJsonValue(m_primary_password, json[QString("PrimaryPassword")]);
    m_primary_password_isSet = !json[QString("PrimaryPassword")].isNull() && m_primary_password_isValid;

    m_primary_user_name_isValid = ::OpenAPI::fromJsonValue(m_primary_user_name, json[QString("PrimaryUserName")]);
    m_primary_user_name_isSet = !json[QString("PrimaryUserName")].isNull() && m_primary_user_name_isValid;

    m_secondary_password_isValid = ::OpenAPI::fromJsonValue(m_secondary_password, json[QString("SecondaryPassword")]);
    m_secondary_password_isSet = !json[QString("SecondaryPassword")].isNull() && m_secondary_password_isValid;

    m_secondary_user_name_isValid = ::OpenAPI::fromJsonValue(m_secondary_user_name, json[QString("SecondaryUserName")]);
    m_secondary_user_name_isSet = !json[QString("SecondaryUserName")].isNull() && m_secondary_user_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("FriendlyName")]);
    m_friendly_name_isSet = !json[QString("FriendlyName")].isNull() && m_friendly_name_isValid;

    m_storage_kind_isValid = ::OpenAPI::fromJsonValue(m_storage_kind, json[QString("StorageKind")]);
    m_storage_kind_isSet = !json[QString("StorageKind")].isNull() && m_storage_kind_isValid;
}

QString OAIFileShareBackupStorageDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileShareBackupStorageDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_primary_password_isSet) {
        obj.insert(QString("PrimaryPassword"), ::OpenAPI::toJsonValue(m_primary_password));
    }
    if (m_primary_user_name_isSet) {
        obj.insert(QString("PrimaryUserName"), ::OpenAPI::toJsonValue(m_primary_user_name));
    }
    if (m_secondary_password_isSet) {
        obj.insert(QString("SecondaryPassword"), ::OpenAPI::toJsonValue(m_secondary_password));
    }
    if (m_secondary_user_name_isSet) {
        obj.insert(QString("SecondaryUserName"), ::OpenAPI::toJsonValue(m_secondary_user_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("FriendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_storage_kind.isSet()) {
        obj.insert(QString("StorageKind"), ::OpenAPI::toJsonValue(m_storage_kind));
    }
    return obj;
}

QString OAIFileShareBackupStorageDescription::getPath() const {
    return m_path;
}
void OAIFileShareBackupStorageDescription::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFileShareBackupStorageDescription::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIFileShareBackupStorageDescription::getPrimaryPassword() const {
    return m_primary_password;
}
void OAIFileShareBackupStorageDescription::setPrimaryPassword(const QString &primary_password) {
    m_primary_password = primary_password;
    m_primary_password_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_primary_password_Set() const{
    return m_primary_password_isSet;
}

bool OAIFileShareBackupStorageDescription::is_primary_password_Valid() const{
    return m_primary_password_isValid;
}

QString OAIFileShareBackupStorageDescription::getPrimaryUserName() const {
    return m_primary_user_name;
}
void OAIFileShareBackupStorageDescription::setPrimaryUserName(const QString &primary_user_name) {
    m_primary_user_name = primary_user_name;
    m_primary_user_name_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_primary_user_name_Set() const{
    return m_primary_user_name_isSet;
}

bool OAIFileShareBackupStorageDescription::is_primary_user_name_Valid() const{
    return m_primary_user_name_isValid;
}

QString OAIFileShareBackupStorageDescription::getSecondaryPassword() const {
    return m_secondary_password;
}
void OAIFileShareBackupStorageDescription::setSecondaryPassword(const QString &secondary_password) {
    m_secondary_password = secondary_password;
    m_secondary_password_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_secondary_password_Set() const{
    return m_secondary_password_isSet;
}

bool OAIFileShareBackupStorageDescription::is_secondary_password_Valid() const{
    return m_secondary_password_isValid;
}

QString OAIFileShareBackupStorageDescription::getSecondaryUserName() const {
    return m_secondary_user_name;
}
void OAIFileShareBackupStorageDescription::setSecondaryUserName(const QString &secondary_user_name) {
    m_secondary_user_name = secondary_user_name;
    m_secondary_user_name_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_secondary_user_name_Set() const{
    return m_secondary_user_name_isSet;
}

bool OAIFileShareBackupStorageDescription::is_secondary_user_name_Valid() const{
    return m_secondary_user_name_isValid;
}

QString OAIFileShareBackupStorageDescription::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFileShareBackupStorageDescription::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFileShareBackupStorageDescription::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

OAIBackupStorageKind OAIFileShareBackupStorageDescription::getStorageKind() const {
    return m_storage_kind;
}
void OAIFileShareBackupStorageDescription::setStorageKind(const OAIBackupStorageKind &storage_kind) {
    m_storage_kind = storage_kind;
    m_storage_kind_isSet = true;
}

bool OAIFileShareBackupStorageDescription::is_storage_kind_Set() const{
    return m_storage_kind_isSet;
}

bool OAIFileShareBackupStorageDescription::is_storage_kind_Valid() const{
    return m_storage_kind_isValid;
}

bool OAIFileShareBackupStorageDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileShareBackupStorageDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_storage_kind_isValid && true;
}

} // namespace OpenAPI
