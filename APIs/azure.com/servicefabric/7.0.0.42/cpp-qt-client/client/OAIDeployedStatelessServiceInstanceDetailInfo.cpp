/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedStatelessServiceInstanceDetailInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedStatelessServiceInstanceDetailInfo::OAIDeployedStatelessServiceInstanceDetailInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedStatelessServiceInstanceDetailInfo::OAIDeployedStatelessServiceInstanceDetailInfo() {
    this->initializeModel();
}

OAIDeployedStatelessServiceInstanceDetailInfo::~OAIDeployedStatelessServiceInstanceDetailInfo() {}

void OAIDeployedStatelessServiceInstanceDetailInfo::initializeModel() {

    m_deployed_service_replica_query_result_isSet = false;
    m_deployed_service_replica_query_result_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_current_service_operation_isSet = false;
    m_current_service_operation_isValid = false;

    m_current_service_operation_start_time_utc_isSet = false;
    m_current_service_operation_start_time_utc_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_reported_load_isSet = false;
    m_reported_load_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIDeployedStatelessServiceInstanceDetailInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedStatelessServiceInstanceDetailInfo::fromJsonObject(QJsonObject json) {

    m_deployed_service_replica_query_result_isValid = ::OpenAPI::fromJsonValue(m_deployed_service_replica_query_result, json[QString("DeployedServiceReplicaQueryResult")]);
    m_deployed_service_replica_query_result_isSet = !json[QString("DeployedServiceReplicaQueryResult")].isNull() && m_deployed_service_replica_query_result_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_current_service_operation_isValid = ::OpenAPI::fromJsonValue(m_current_service_operation, json[QString("CurrentServiceOperation")]);
    m_current_service_operation_isSet = !json[QString("CurrentServiceOperation")].isNull() && m_current_service_operation_isValid;

    m_current_service_operation_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_current_service_operation_start_time_utc, json[QString("CurrentServiceOperationStartTimeUtc")]);
    m_current_service_operation_start_time_utc_isSet = !json[QString("CurrentServiceOperationStartTimeUtc")].isNull() && m_current_service_operation_start_time_utc_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_reported_load_isValid = ::OpenAPI::fromJsonValue(m_reported_load, json[QString("ReportedLoad")]);
    m_reported_load_isSet = !json[QString("ReportedLoad")].isNull() && m_reported_load_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIDeployedStatelessServiceInstanceDetailInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedStatelessServiceInstanceDetailInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_deployed_service_replica_query_result.isSet()) {
        obj.insert(QString("DeployedServiceReplicaQueryResult"), ::OpenAPI::toJsonValue(m_deployed_service_replica_query_result));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_current_service_operation.isSet()) {
        obj.insert(QString("CurrentServiceOperation"), ::OpenAPI::toJsonValue(m_current_service_operation));
    }
    if (m_current_service_operation_start_time_utc_isSet) {
        obj.insert(QString("CurrentServiceOperationStartTimeUtc"), ::OpenAPI::toJsonValue(m_current_service_operation_start_time_utc));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_reported_load.size() > 0) {
        obj.insert(QString("ReportedLoad"), ::OpenAPI::toJsonValue(m_reported_load));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

OAIDeployedStatelessServiceInstanceInfo OAIDeployedStatelessServiceInstanceDetailInfo::getDeployedServiceReplicaQueryResult() const {
    return m_deployed_service_replica_query_result;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setDeployedServiceReplicaQueryResult(const OAIDeployedStatelessServiceInstanceInfo &deployed_service_replica_query_result) {
    m_deployed_service_replica_query_result = deployed_service_replica_query_result;
    m_deployed_service_replica_query_result_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_deployed_service_replica_query_result_Set() const{
    return m_deployed_service_replica_query_result_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_deployed_service_replica_query_result_Valid() const{
    return m_deployed_service_replica_query_result_isValid;
}

QString OAIDeployedStatelessServiceInstanceDetailInfo::getInstanceId() const {
    return m_instance_id;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAIServiceOperationName OAIDeployedStatelessServiceInstanceDetailInfo::getCurrentServiceOperation() const {
    return m_current_service_operation;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setCurrentServiceOperation(const OAIServiceOperationName &current_service_operation) {
    m_current_service_operation = current_service_operation;
    m_current_service_operation_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_current_service_operation_Set() const{
    return m_current_service_operation_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_current_service_operation_Valid() const{
    return m_current_service_operation_isValid;
}

QDateTime OAIDeployedStatelessServiceInstanceDetailInfo::getCurrentServiceOperationStartTimeUtc() const {
    return m_current_service_operation_start_time_utc;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setCurrentServiceOperationStartTimeUtc(const QDateTime &current_service_operation_start_time_utc) {
    m_current_service_operation_start_time_utc = current_service_operation_start_time_utc;
    m_current_service_operation_start_time_utc_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_current_service_operation_start_time_utc_Set() const{
    return m_current_service_operation_start_time_utc_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_current_service_operation_start_time_utc_Valid() const{
    return m_current_service_operation_start_time_utc_isValid;
}

QString OAIDeployedStatelessServiceInstanceDetailInfo::getPartitionId() const {
    return m_partition_id;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QList<OAILoadMetricReportInfo> OAIDeployedStatelessServiceInstanceDetailInfo::getReportedLoad() const {
    return m_reported_load;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setReportedLoad(const QList<OAILoadMetricReportInfo> &reported_load) {
    m_reported_load = reported_load;
    m_reported_load_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_reported_load_Set() const{
    return m_reported_load_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_reported_load_Valid() const{
    return m_reported_load_isValid;
}

OAIServiceKind OAIDeployedStatelessServiceInstanceDetailInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QString OAIDeployedStatelessServiceInstanceDetailInfo::getServiceName() const {
    return m_service_name;
}
void OAIDeployedStatelessServiceInstanceDetailInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployed_service_replica_query_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_operation_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_load.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedStatelessServiceInstanceDetailInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
