/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolderSizeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolderSizeInfo::OAIFolderSizeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolderSizeInfo::OAIFolderSizeInfo() {
    this->initializeModel();
}

OAIFolderSizeInfo::~OAIFolderSizeInfo() {}

void OAIFolderSizeInfo::initializeModel() {

    m_folder_size_isSet = false;
    m_folder_size_isValid = false;

    m_store_relative_path_isSet = false;
    m_store_relative_path_isValid = false;
}

void OAIFolderSizeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolderSizeInfo::fromJsonObject(QJsonObject json) {

    m_folder_size_isValid = ::OpenAPI::fromJsonValue(m_folder_size, json[QString("FolderSize")]);
    m_folder_size_isSet = !json[QString("FolderSize")].isNull() && m_folder_size_isValid;

    m_store_relative_path_isValid = ::OpenAPI::fromJsonValue(m_store_relative_path, json[QString("StoreRelativePath")]);
    m_store_relative_path_isSet = !json[QString("StoreRelativePath")].isNull() && m_store_relative_path_isValid;
}

QString OAIFolderSizeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolderSizeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_folder_size_isSet) {
        obj.insert(QString("FolderSize"), ::OpenAPI::toJsonValue(m_folder_size));
    }
    if (m_store_relative_path_isSet) {
        obj.insert(QString("StoreRelativePath"), ::OpenAPI::toJsonValue(m_store_relative_path));
    }
    return obj;
}

QString OAIFolderSizeInfo::getFolderSize() const {
    return m_folder_size;
}
void OAIFolderSizeInfo::setFolderSize(const QString &folder_size) {
    m_folder_size = folder_size;
    m_folder_size_isSet = true;
}

bool OAIFolderSizeInfo::is_folder_size_Set() const{
    return m_folder_size_isSet;
}

bool OAIFolderSizeInfo::is_folder_size_Valid() const{
    return m_folder_size_isValid;
}

QString OAIFolderSizeInfo::getStoreRelativePath() const {
    return m_store_relative_path;
}
void OAIFolderSizeInfo::setStoreRelativePath(const QString &store_relative_path) {
    m_store_relative_path = store_relative_path;
    m_store_relative_path_isSet = true;
}

bool OAIFolderSizeInfo::is_store_relative_path_Set() const{
    return m_store_relative_path_isSet;
}

bool OAIFolderSizeInfo::is_store_relative_path_Valid() const{
    return m_store_relative_path_isValid;
}

bool OAIFolderSizeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_folder_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolderSizeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
