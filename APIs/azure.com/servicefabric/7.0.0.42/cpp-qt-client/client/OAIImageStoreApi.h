/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageStoreApi_H
#define OAI_OAIImageStoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAIFolderSizeInfo.h"
#include "OAIImageStoreContent.h"
#include "OAIImageStoreCopyDescription.h"
#include "OAIImageStoreInfo.h"
#include "OAIUploadSession.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageStoreApi : public QObject {
    Q_OBJECT

public:
    OAIImageStoreApi(const int timeOut = 0);
    ~OAIImageStoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  session_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void commitImageStoreUploadSession(const QString &api_version, const QString &session_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  image_store_copy_description OAIImageStoreCopyDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void copyImageStoreContent(const QString &api_version, const OAIImageStoreCopyDescription &image_store_copy_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteImageStoreContent(const QString &api_version, const QString &content_path, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  session_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteImageStoreUploadSession(const QString &api_version, const QString &session_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreContent(const QString &api_version, const QString &content_path, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreFolderSize(const QString &api_version, const QString &content_path, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreInfo(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreRootContent(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreRootFolderSize(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  session_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreUploadSessionById(const QString &api_version, const QString &session_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getImageStoreUploadSessionByPath(const QString &api_version, const QString &content_path, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void uploadFile(const QString &api_version, const QString &content_path, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  content_path QString [required]
    * @param[in]  session_id QString [required]
    * @param[in]  content_range QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void uploadFileChunk(const QString &api_version, const QString &content_path, const QString &session_id, const QString &content_range, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commitImageStoreUploadSessionCallback(OAIHttpRequestWorker *worker);
    void copyImageStoreContentCallback(OAIHttpRequestWorker *worker);
    void deleteImageStoreContentCallback(OAIHttpRequestWorker *worker);
    void deleteImageStoreUploadSessionCallback(OAIHttpRequestWorker *worker);
    void getImageStoreContentCallback(OAIHttpRequestWorker *worker);
    void getImageStoreFolderSizeCallback(OAIHttpRequestWorker *worker);
    void getImageStoreInfoCallback(OAIHttpRequestWorker *worker);
    void getImageStoreRootContentCallback(OAIHttpRequestWorker *worker);
    void getImageStoreRootFolderSizeCallback(OAIHttpRequestWorker *worker);
    void getImageStoreUploadSessionByIdCallback(OAIHttpRequestWorker *worker);
    void getImageStoreUploadSessionByPathCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);
    void uploadFileChunkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commitImageStoreUploadSessionSignal();
    void copyImageStoreContentSignal();
    void deleteImageStoreContentSignal();
    void deleteImageStoreUploadSessionSignal();
    void getImageStoreContentSignal(OAIImageStoreContent summary);
    void getImageStoreFolderSizeSignal(OAIFolderSizeInfo summary);
    void getImageStoreInfoSignal(OAIImageStoreInfo summary);
    void getImageStoreRootContentSignal(OAIImageStoreContent summary);
    void getImageStoreRootFolderSizeSignal(OAIFolderSizeInfo summary);
    void getImageStoreUploadSessionByIdSignal(OAIUploadSession summary);
    void getImageStoreUploadSessionByPathSignal(OAIUploadSession summary);
    void uploadFileSignal();
    void uploadFileChunkSignal();


    void commitImageStoreUploadSessionSignalFull(OAIHttpRequestWorker *worker);
    void copyImageStoreContentSignalFull(OAIHttpRequestWorker *worker);
    void deleteImageStoreContentSignalFull(OAIHttpRequestWorker *worker);
    void deleteImageStoreUploadSessionSignalFull(OAIHttpRequestWorker *worker);
    void getImageStoreContentSignalFull(OAIHttpRequestWorker *worker, OAIImageStoreContent summary);
    void getImageStoreFolderSizeSignalFull(OAIHttpRequestWorker *worker, OAIFolderSizeInfo summary);
    void getImageStoreInfoSignalFull(OAIHttpRequestWorker *worker, OAIImageStoreInfo summary);
    void getImageStoreRootContentSignalFull(OAIHttpRequestWorker *worker, OAIImageStoreContent summary);
    void getImageStoreRootFolderSizeSignalFull(OAIHttpRequestWorker *worker, OAIFolderSizeInfo summary);
    void getImageStoreUploadSessionByIdSignalFull(OAIHttpRequestWorker *worker, OAIUploadSession summary);
    void getImageStoreUploadSessionByPathSignalFull(OAIHttpRequestWorker *worker, OAIUploadSession summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker);
    void uploadFileChunkSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use commitImageStoreUploadSessionSignalError() instead")
    void commitImageStoreUploadSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commitImageStoreUploadSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyImageStoreContentSignalError() instead")
    void copyImageStoreContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void copyImageStoreContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageStoreContentSignalError() instead")
    void deleteImageStoreContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageStoreContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageStoreUploadSessionSignalError() instead")
    void deleteImageStoreUploadSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageStoreUploadSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreContentSignalError() instead")
    void getImageStoreContentSignalE(OAIImageStoreContent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreContentSignalError(OAIImageStoreContent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreFolderSizeSignalError() instead")
    void getImageStoreFolderSizeSignalE(OAIFolderSizeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreFolderSizeSignalError(OAIFolderSizeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreInfoSignalError() instead")
    void getImageStoreInfoSignalE(OAIImageStoreInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreInfoSignalError(OAIImageStoreInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreRootContentSignalError() instead")
    void getImageStoreRootContentSignalE(OAIImageStoreContent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreRootContentSignalError(OAIImageStoreContent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreRootFolderSizeSignalError() instead")
    void getImageStoreRootFolderSizeSignalE(OAIFolderSizeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreRootFolderSizeSignalError(OAIFolderSizeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreUploadSessionByIdSignalError() instead")
    void getImageStoreUploadSessionByIdSignalE(OAIUploadSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreUploadSessionByIdSignalError(OAIUploadSession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreUploadSessionByPathSignalError() instead")
    void getImageStoreUploadSessionByPathSignalE(OAIUploadSession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreUploadSessionByPathSignalError(OAIUploadSession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileChunkSignalError() instead")
    void uploadFileChunkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileChunkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commitImageStoreUploadSessionSignalErrorFull() instead")
    void commitImageStoreUploadSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitImageStoreUploadSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyImageStoreContentSignalErrorFull() instead")
    void copyImageStoreContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyImageStoreContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageStoreContentSignalErrorFull() instead")
    void deleteImageStoreContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageStoreContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageStoreUploadSessionSignalErrorFull() instead")
    void deleteImageStoreUploadSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageStoreUploadSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreContentSignalErrorFull() instead")
    void getImageStoreContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreFolderSizeSignalErrorFull() instead")
    void getImageStoreFolderSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreFolderSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreInfoSignalErrorFull() instead")
    void getImageStoreInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreRootContentSignalErrorFull() instead")
    void getImageStoreRootContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreRootContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreRootFolderSizeSignalErrorFull() instead")
    void getImageStoreRootFolderSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreRootFolderSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreUploadSessionByIdSignalErrorFull() instead")
    void getImageStoreUploadSessionByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreUploadSessionByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageStoreUploadSessionByPathSignalErrorFull() instead")
    void getImageStoreUploadSessionByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageStoreUploadSessionByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileChunkSignalErrorFull() instead")
    void uploadFileChunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileChunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
