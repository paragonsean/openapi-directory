# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_match_header import HttpRouteMatchHeader
from openapi_server.models.http_route_match_path import HttpRouteMatchPath
from openapi_server import util


class HttpRouteMatchRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: List[HttpRouteMatchHeader]=None, path: HttpRouteMatchPath=None):
        """HttpRouteMatchRule - a model defined in OpenAPI

        :param headers: The headers of this HttpRouteMatchRule.
        :param path: The path of this HttpRouteMatchRule.
        """
        self.openapi_types = {
            'headers': List[HttpRouteMatchHeader],
            'path': HttpRouteMatchPath
        }

        self.attribute_map = {
            'headers': 'headers',
            'path': 'path'
        }

        self._headers = headers
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteMatchRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteMatchRule of this HttpRouteMatchRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this HttpRouteMatchRule.

        headers and their values to match in request.

        :return: The headers of this HttpRouteMatchRule.
        :rtype: List[HttpRouteMatchHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRouteMatchRule.

        headers and their values to match in request.

        :param headers: The headers of this HttpRouteMatchRule.
        :type headers: List[HttpRouteMatchHeader]
        """

        self._headers = headers

    @property
    def path(self):
        """Gets the path of this HttpRouteMatchRule.


        :return: The path of this HttpRouteMatchRule.
        :rtype: HttpRouteMatchPath
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this HttpRouteMatchRule.


        :param path: The path of this HttpRouteMatchRule.
        :type path: HttpRouteMatchPath
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
