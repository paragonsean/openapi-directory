# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestartNodeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_fabric_dump: str='False', node_instance_id: str='0'):
        """RestartNodeDescription - a model defined in OpenAPI

        :param create_fabric_dump: The create_fabric_dump of this RestartNodeDescription.
        :param node_instance_id: The node_instance_id of this RestartNodeDescription.
        """
        self.openapi_types = {
            'create_fabric_dump': str,
            'node_instance_id': str
        }

        self.attribute_map = {
            'create_fabric_dump': 'CreateFabricDump',
            'node_instance_id': 'NodeInstanceId'
        }

        self._create_fabric_dump = create_fabric_dump
        self._node_instance_id = node_instance_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestartNodeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestartNodeDescription of this RestartNodeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_fabric_dump(self):
        """Gets the create_fabric_dump of this RestartNodeDescription.

        Specify True to create a dump of the fabric node process. This is case-sensitive.

        :return: The create_fabric_dump of this RestartNodeDescription.
        :rtype: str
        """
        return self._create_fabric_dump

    @create_fabric_dump.setter
    def create_fabric_dump(self, create_fabric_dump):
        """Sets the create_fabric_dump of this RestartNodeDescription.

        Specify True to create a dump of the fabric node process. This is case-sensitive.

        :param create_fabric_dump: The create_fabric_dump of this RestartNodeDescription.
        :type create_fabric_dump: str
        """
        allowed_values = ["False", "True"]  # noqa: E501
        if create_fabric_dump not in allowed_values:
            raise ValueError(
                "Invalid value for `create_fabric_dump` ({0}), must be one of {1}"
                .format(create_fabric_dump, allowed_values)
            )

        self._create_fabric_dump = create_fabric_dump

    @property
    def node_instance_id(self):
        """Gets the node_instance_id of this RestartNodeDescription.

        The instance ID of the target node. If instance ID is specified the node is restarted only if it matches with the current instance of the node. A default value of \"0\" would match any instance ID. The instance ID can be obtained using get node query.

        :return: The node_instance_id of this RestartNodeDescription.
        :rtype: str
        """
        return self._node_instance_id

    @node_instance_id.setter
    def node_instance_id(self, node_instance_id):
        """Sets the node_instance_id of this RestartNodeDescription.

        The instance ID of the target node. If instance ID is specified the node is restarted only if it matches with the current instance of the node. A default value of \"0\" would match any instance ID. The instance ID can be obtained using get node query.

        :param node_instance_id: The node_instance_id of this RestartNodeDescription.
        :type node_instance_id: str
        """
        if node_instance_id is None:
            raise ValueError("Invalid value for `node_instance_id`, must not be `None`")

        self._node_instance_id = node_instance_id
