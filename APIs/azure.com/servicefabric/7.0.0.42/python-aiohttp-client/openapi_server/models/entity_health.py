# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_server.models.health_event import HealthEvent
from openapi_server.models.health_state import HealthState
from openapi_server.models.health_statistics import HealthStatistics
from openapi_server import util


class EntityHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_health_state: HealthState=None, health_events: List[HealthEvent]=None, health_statistics: HealthStatistics=None, unhealthy_evaluations: List[HealthEvaluationWrapper]=None):
        """EntityHealth - a model defined in OpenAPI

        :param aggregated_health_state: The aggregated_health_state of this EntityHealth.
        :param health_events: The health_events of this EntityHealth.
        :param health_statistics: The health_statistics of this EntityHealth.
        :param unhealthy_evaluations: The unhealthy_evaluations of this EntityHealth.
        """
        self.openapi_types = {
            'aggregated_health_state': HealthState,
            'health_events': List[HealthEvent],
            'health_statistics': HealthStatistics,
            'unhealthy_evaluations': List[HealthEvaluationWrapper]
        }

        self.attribute_map = {
            'aggregated_health_state': 'AggregatedHealthState',
            'health_events': 'HealthEvents',
            'health_statistics': 'HealthStatistics',
            'unhealthy_evaluations': 'UnhealthyEvaluations'
        }

        self._aggregated_health_state = aggregated_health_state
        self._health_events = health_events
        self._health_statistics = health_statistics
        self._unhealthy_evaluations = unhealthy_evaluations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityHealth of this EntityHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this EntityHealth.


        :return: The aggregated_health_state of this EntityHealth.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this EntityHealth.


        :param aggregated_health_state: The aggregated_health_state of this EntityHealth.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def health_events(self):
        """Gets the health_events of this EntityHealth.

        The list of health events reported on the entity.

        :return: The health_events of this EntityHealth.
        :rtype: List[HealthEvent]
        """
        return self._health_events

    @health_events.setter
    def health_events(self, health_events):
        """Sets the health_events of this EntityHealth.

        The list of health events reported on the entity.

        :param health_events: The health_events of this EntityHealth.
        :type health_events: List[HealthEvent]
        """

        self._health_events = health_events

    @property
    def health_statistics(self):
        """Gets the health_statistics of this EntityHealth.


        :return: The health_statistics of this EntityHealth.
        :rtype: HealthStatistics
        """
        return self._health_statistics

    @health_statistics.setter
    def health_statistics(self, health_statistics):
        """Sets the health_statistics of this EntityHealth.


        :param health_statistics: The health_statistics of this EntityHealth.
        :type health_statistics: HealthStatistics
        """

        self._health_statistics = health_statistics

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this EntityHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :return: The unhealthy_evaluations of this EntityHealth.
        :rtype: List[HealthEvaluationWrapper]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this EntityHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :param unhealthy_evaluations: The unhealthy_evaluations of this EntityHealth.
        :type unhealthy_evaluations: List[HealthEvaluationWrapper]
        """

        self._unhealthy_evaluations = unhealthy_evaluations
