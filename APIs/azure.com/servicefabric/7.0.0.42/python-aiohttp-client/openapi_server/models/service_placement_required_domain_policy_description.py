# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_server.models.service_placement_policy_type import ServicePlacementPolicyType
from openapi_server import util


class ServicePlacementRequiredDomainPolicyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, type: ServicePlacementPolicyType=None):
        """ServicePlacementRequiredDomainPolicyDescription - a model defined in OpenAPI

        :param domain_name: The domain_name of this ServicePlacementRequiredDomainPolicyDescription.
        :param type: The type of this ServicePlacementRequiredDomainPolicyDescription.
        """
        self.openapi_types = {
            'domain_name': str,
            'type': ServicePlacementPolicyType
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'type': 'Type'
        }

        self._domain_name = domain_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePlacementRequiredDomainPolicyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePlacementRequiredDomainPolicyDescription of this ServicePlacementRequiredDomainPolicyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this ServicePlacementRequiredDomainPolicyDescription.

        The name of the domain that should used for placement as per this policy.

        :return: The domain_name of this ServicePlacementRequiredDomainPolicyDescription.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ServicePlacementRequiredDomainPolicyDescription.

        The name of the domain that should used for placement as per this policy.

        :param domain_name: The domain_name of this ServicePlacementRequiredDomainPolicyDescription.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def type(self):
        """Gets the type of this ServicePlacementRequiredDomainPolicyDescription.


        :return: The type of this ServicePlacementRequiredDomainPolicyDescription.
        :rtype: ServicePlacementPolicyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServicePlacementRequiredDomainPolicyDescription.


        :param type: The type of this ServicePlacementRequiredDomainPolicyDescription.
        :type type: ServicePlacementPolicyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
