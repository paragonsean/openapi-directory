# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_action import FailureAction
from openapi_server import util


class MonitoringPolicyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_action: FailureAction=None, health_check_retry_timeout_in_milliseconds: str='PT0H10M0S', health_check_stable_duration_in_milliseconds: str='PT0H2M0S', health_check_wait_duration_in_milliseconds: str='0', upgrade_domain_timeout_in_milliseconds: str='P10675199DT02H48M05.4775807S', upgrade_timeout_in_milliseconds: str='P10675199DT02H48M05.4775807S'):
        """MonitoringPolicyDescription - a model defined in OpenAPI

        :param failure_action: The failure_action of this MonitoringPolicyDescription.
        :param health_check_retry_timeout_in_milliseconds: The health_check_retry_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :param health_check_stable_duration_in_milliseconds: The health_check_stable_duration_in_milliseconds of this MonitoringPolicyDescription.
        :param health_check_wait_duration_in_milliseconds: The health_check_wait_duration_in_milliseconds of this MonitoringPolicyDescription.
        :param upgrade_domain_timeout_in_milliseconds: The upgrade_domain_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :param upgrade_timeout_in_milliseconds: The upgrade_timeout_in_milliseconds of this MonitoringPolicyDescription.
        """
        self.openapi_types = {
            'failure_action': FailureAction,
            'health_check_retry_timeout_in_milliseconds': str,
            'health_check_stable_duration_in_milliseconds': str,
            'health_check_wait_duration_in_milliseconds': str,
            'upgrade_domain_timeout_in_milliseconds': str,
            'upgrade_timeout_in_milliseconds': str
        }

        self.attribute_map = {
            'failure_action': 'FailureAction',
            'health_check_retry_timeout_in_milliseconds': 'HealthCheckRetryTimeoutInMilliseconds',
            'health_check_stable_duration_in_milliseconds': 'HealthCheckStableDurationInMilliseconds',
            'health_check_wait_duration_in_milliseconds': 'HealthCheckWaitDurationInMilliseconds',
            'upgrade_domain_timeout_in_milliseconds': 'UpgradeDomainTimeoutInMilliseconds',
            'upgrade_timeout_in_milliseconds': 'UpgradeTimeoutInMilliseconds'
        }

        self._failure_action = failure_action
        self._health_check_retry_timeout_in_milliseconds = health_check_retry_timeout_in_milliseconds
        self._health_check_stable_duration_in_milliseconds = health_check_stable_duration_in_milliseconds
        self._health_check_wait_duration_in_milliseconds = health_check_wait_duration_in_milliseconds
        self._upgrade_domain_timeout_in_milliseconds = upgrade_domain_timeout_in_milliseconds
        self._upgrade_timeout_in_milliseconds = upgrade_timeout_in_milliseconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringPolicyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringPolicyDescription of this MonitoringPolicyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_action(self):
        """Gets the failure_action of this MonitoringPolicyDescription.


        :return: The failure_action of this MonitoringPolicyDescription.
        :rtype: FailureAction
        """
        return self._failure_action

    @failure_action.setter
    def failure_action(self, failure_action):
        """Sets the failure_action of this MonitoringPolicyDescription.


        :param failure_action: The failure_action of this MonitoringPolicyDescription.
        :type failure_action: FailureAction
        """

        self._failure_action = failure_action

    @property
    def health_check_retry_timeout_in_milliseconds(self):
        """Gets the health_check_retry_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_retry_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :rtype: str
        """
        return self._health_check_retry_timeout_in_milliseconds

    @health_check_retry_timeout_in_milliseconds.setter
    def health_check_retry_timeout_in_milliseconds(self, health_check_retry_timeout_in_milliseconds):
        """Sets the health_check_retry_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_retry_timeout_in_milliseconds: The health_check_retry_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :type health_check_retry_timeout_in_milliseconds: str
        """

        self._health_check_retry_timeout_in_milliseconds = health_check_retry_timeout_in_milliseconds

    @property
    def health_check_stable_duration_in_milliseconds(self):
        """Gets the health_check_stable_duration_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_stable_duration_in_milliseconds of this MonitoringPolicyDescription.
        :rtype: str
        """
        return self._health_check_stable_duration_in_milliseconds

    @health_check_stable_duration_in_milliseconds.setter
    def health_check_stable_duration_in_milliseconds(self, health_check_stable_duration_in_milliseconds):
        """Sets the health_check_stable_duration_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_stable_duration_in_milliseconds: The health_check_stable_duration_in_milliseconds of this MonitoringPolicyDescription.
        :type health_check_stable_duration_in_milliseconds: str
        """

        self._health_check_stable_duration_in_milliseconds = health_check_stable_duration_in_milliseconds

    @property
    def health_check_wait_duration_in_milliseconds(self):
        """Gets the health_check_wait_duration_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_wait_duration_in_milliseconds of this MonitoringPolicyDescription.
        :rtype: str
        """
        return self._health_check_wait_duration_in_milliseconds

    @health_check_wait_duration_in_milliseconds.setter
    def health_check_wait_duration_in_milliseconds(self, health_check_wait_duration_in_milliseconds):
        """Sets the health_check_wait_duration_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_wait_duration_in_milliseconds: The health_check_wait_duration_in_milliseconds of this MonitoringPolicyDescription.
        :type health_check_wait_duration_in_milliseconds: str
        """

        self._health_check_wait_duration_in_milliseconds = health_check_wait_duration_in_milliseconds

    @property
    def upgrade_domain_timeout_in_milliseconds(self):
        """Gets the upgrade_domain_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The upgrade_domain_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :rtype: str
        """
        return self._upgrade_domain_timeout_in_milliseconds

    @upgrade_domain_timeout_in_milliseconds.setter
    def upgrade_domain_timeout_in_milliseconds(self, upgrade_domain_timeout_in_milliseconds):
        """Sets the upgrade_domain_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param upgrade_domain_timeout_in_milliseconds: The upgrade_domain_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :type upgrade_domain_timeout_in_milliseconds: str
        """

        self._upgrade_domain_timeout_in_milliseconds = upgrade_domain_timeout_in_milliseconds

    @property
    def upgrade_timeout_in_milliseconds(self):
        """Gets the upgrade_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The upgrade_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :rtype: str
        """
        return self._upgrade_timeout_in_milliseconds

    @upgrade_timeout_in_milliseconds.setter
    def upgrade_timeout_in_milliseconds(self, upgrade_timeout_in_milliseconds):
        """Sets the upgrade_timeout_in_milliseconds of this MonitoringPolicyDescription.

        The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param upgrade_timeout_in_milliseconds: The upgrade_timeout_in_milliseconds of this MonitoringPolicyDescription.
        :type upgrade_timeout_in_milliseconds: str
        """

        self._upgrade_timeout_in_milliseconds = upgrade_timeout_in_milliseconds
