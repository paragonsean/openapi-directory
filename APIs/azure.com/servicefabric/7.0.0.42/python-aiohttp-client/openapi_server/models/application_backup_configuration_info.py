# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_configuration_info import BackupConfigurationInfo
from openapi_server.models.backup_entity_kind import BackupEntityKind
from openapi_server.models.backup_policy_scope import BackupPolicyScope
from openapi_server.models.backup_suspension_info import BackupSuspensionInfo
from openapi_server import util


class ApplicationBackupConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, kind: BackupEntityKind=None, policy_inherited_from: BackupPolicyScope=None, policy_name: str=None, suspension_info: BackupSuspensionInfo=None):
        """ApplicationBackupConfigurationInfo - a model defined in OpenAPI

        :param application_name: The application_name of this ApplicationBackupConfigurationInfo.
        :param kind: The kind of this ApplicationBackupConfigurationInfo.
        :param policy_inherited_from: The policy_inherited_from of this ApplicationBackupConfigurationInfo.
        :param policy_name: The policy_name of this ApplicationBackupConfigurationInfo.
        :param suspension_info: The suspension_info of this ApplicationBackupConfigurationInfo.
        """
        self.openapi_types = {
            'application_name': str,
            'kind': BackupEntityKind,
            'policy_inherited_from': BackupPolicyScope,
            'policy_name': str,
            'suspension_info': BackupSuspensionInfo
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'kind': 'Kind',
            'policy_inherited_from': 'PolicyInheritedFrom',
            'policy_name': 'PolicyName',
            'suspension_info': 'SuspensionInfo'
        }

        self._application_name = application_name
        self._kind = kind
        self._policy_inherited_from = policy_inherited_from
        self._policy_name = policy_name
        self._suspension_info = suspension_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationBackupConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationBackupConfigurationInfo of this ApplicationBackupConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationBackupConfigurationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The application_name of this ApplicationBackupConfigurationInfo.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationBackupConfigurationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :param application_name: The application_name of this ApplicationBackupConfigurationInfo.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def kind(self):
        """Gets the kind of this ApplicationBackupConfigurationInfo.


        :return: The kind of this ApplicationBackupConfigurationInfo.
        :rtype: BackupEntityKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationBackupConfigurationInfo.


        :param kind: The kind of this ApplicationBackupConfigurationInfo.
        :type kind: BackupEntityKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def policy_inherited_from(self):
        """Gets the policy_inherited_from of this ApplicationBackupConfigurationInfo.


        :return: The policy_inherited_from of this ApplicationBackupConfigurationInfo.
        :rtype: BackupPolicyScope
        """
        return self._policy_inherited_from

    @policy_inherited_from.setter
    def policy_inherited_from(self, policy_inherited_from):
        """Sets the policy_inherited_from of this ApplicationBackupConfigurationInfo.


        :param policy_inherited_from: The policy_inherited_from of this ApplicationBackupConfigurationInfo.
        :type policy_inherited_from: BackupPolicyScope
        """

        self._policy_inherited_from = policy_inherited_from

    @property
    def policy_name(self):
        """Gets the policy_name of this ApplicationBackupConfigurationInfo.

        The name of the backup policy which is applicable to this Service Fabric application or service or partition.

        :return: The policy_name of this ApplicationBackupConfigurationInfo.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ApplicationBackupConfigurationInfo.

        The name of the backup policy which is applicable to this Service Fabric application or service or partition.

        :param policy_name: The policy_name of this ApplicationBackupConfigurationInfo.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def suspension_info(self):
        """Gets the suspension_info of this ApplicationBackupConfigurationInfo.


        :return: The suspension_info of this ApplicationBackupConfigurationInfo.
        :rtype: BackupSuspensionInfo
        """
        return self._suspension_info

    @suspension_info.setter
    def suspension_info(self, suspension_info):
        """Sets the suspension_info of this ApplicationBackupConfigurationInfo.


        :param suspension_info: The suspension_info of this ApplicationBackupConfigurationInfo.
        :type suspension_info: BackupSuspensionInfo
        """

        self._suspension_info = suspension_info
