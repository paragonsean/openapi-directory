# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerApiResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, content_encoding: str=None, content_type: str=None, status: int=None):
        """ContainerApiResult - a model defined in OpenAPI

        :param body: The body of this ContainerApiResult.
        :param content_encoding: The content_encoding of this ContainerApiResult.
        :param content_type: The content_type of this ContainerApiResult.
        :param status: The status of this ContainerApiResult.
        """
        self.openapi_types = {
            'body': str,
            'content_encoding': str,
            'content_type': str,
            'status': int
        }

        self.attribute_map = {
            'body': 'Body',
            'content_encoding': 'Content-Encoding',
            'content_type': 'Content-Type',
            'status': 'Status'
        }

        self._body = body
        self._content_encoding = content_encoding
        self._content_type = content_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerApiResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerApiResult of this ContainerApiResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ContainerApiResult.

        container API result body

        :return: The body of this ContainerApiResult.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ContainerApiResult.

        container API result body

        :param body: The body of this ContainerApiResult.
        :type body: str
        """

        self._body = body

    @property
    def content_encoding(self):
        """Gets the content_encoding of this ContainerApiResult.

        HTTP content encoding

        :return: The content_encoding of this ContainerApiResult.
        :rtype: str
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this ContainerApiResult.

        HTTP content encoding

        :param content_encoding: The content_encoding of this ContainerApiResult.
        :type content_encoding: str
        """

        self._content_encoding = content_encoding

    @property
    def content_type(self):
        """Gets the content_type of this ContainerApiResult.

        HTTP content type

        :return: The content_type of this ContainerApiResult.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContainerApiResult.

        HTTP content type

        :param content_type: The content_type of this ContainerApiResult.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def status(self):
        """Gets the status of this ContainerApiResult.

        HTTP status code returned by the target container API

        :return: The status of this ContainerApiResult.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainerApiResult.

        HTTP status code returned by the target container API

        :param status: The status of this ContainerApiResult.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
