# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceUpgradeProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_replica_count: str=None, pending_replica_count: str=None, service_name: str=None):
        """ServiceUpgradeProgress - a model defined in OpenAPI

        :param completed_replica_count: The completed_replica_count of this ServiceUpgradeProgress.
        :param pending_replica_count: The pending_replica_count of this ServiceUpgradeProgress.
        :param service_name: The service_name of this ServiceUpgradeProgress.
        """
        self.openapi_types = {
            'completed_replica_count': str,
            'pending_replica_count': str,
            'service_name': str
        }

        self.attribute_map = {
            'completed_replica_count': 'CompletedReplicaCount',
            'pending_replica_count': 'PendingReplicaCount',
            'service_name': 'ServiceName'
        }

        self._completed_replica_count = completed_replica_count
        self._pending_replica_count = pending_replica_count
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceUpgradeProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceUpgradeProgress of this ServiceUpgradeProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_replica_count(self):
        """Gets the completed_replica_count of this ServiceUpgradeProgress.

        The number of replicas that completes the upgrade in the service.

        :return: The completed_replica_count of this ServiceUpgradeProgress.
        :rtype: str
        """
        return self._completed_replica_count

    @completed_replica_count.setter
    def completed_replica_count(self, completed_replica_count):
        """Sets the completed_replica_count of this ServiceUpgradeProgress.

        The number of replicas that completes the upgrade in the service.

        :param completed_replica_count: The completed_replica_count of this ServiceUpgradeProgress.
        :type completed_replica_count: str
        """

        self._completed_replica_count = completed_replica_count

    @property
    def pending_replica_count(self):
        """Gets the pending_replica_count of this ServiceUpgradeProgress.

        The number of replicas that are waiting to be upgraded in the service.

        :return: The pending_replica_count of this ServiceUpgradeProgress.
        :rtype: str
        """
        return self._pending_replica_count

    @pending_replica_count.setter
    def pending_replica_count(self, pending_replica_count):
        """Sets the pending_replica_count of this ServiceUpgradeProgress.

        The number of replicas that are waiting to be upgraded in the service.

        :param pending_replica_count: The pending_replica_count of this ServiceUpgradeProgress.
        :type pending_replica_count: str
        """

        self._pending_replica_count = pending_replica_count

    @property
    def service_name(self):
        """Gets the service_name of this ServiceUpgradeProgress.

        Name of the Service resource.

        :return: The service_name of this ServiceUpgradeProgress.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceUpgradeProgress.

        Name of the Service resource.

        :param service_name: The service_name of this ServiceUpgradeProgress.
        :type service_name: str
        """

        self._service_name = service_name
