# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_mechanism_description import ScalingMechanismDescription
from openapi_server.models.scaling_mechanism_kind import ScalingMechanismKind
from openapi_server import util


class AddRemoveIncrementalNamedPartitionScalingMechanism(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_partition_count: int=None, min_partition_count: int=None, scale_increment: int=None, kind: ScalingMechanismKind=None):
        """AddRemoveIncrementalNamedPartitionScalingMechanism - a model defined in OpenAPI

        :param max_partition_count: The max_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :param min_partition_count: The min_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :param scale_increment: The scale_increment of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :param kind: The kind of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        """
        self.openapi_types = {
            'max_partition_count': int,
            'min_partition_count': int,
            'scale_increment': int,
            'kind': ScalingMechanismKind
        }

        self.attribute_map = {
            'max_partition_count': 'MaxPartitionCount',
            'min_partition_count': 'MinPartitionCount',
            'scale_increment': 'ScaleIncrement',
            'kind': 'Kind'
        }

        self._max_partition_count = max_partition_count
        self._min_partition_count = min_partition_count
        self._scale_increment = scale_increment
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddRemoveIncrementalNamedPartitionScalingMechanism':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddRemoveIncrementalNamedPartitionScalingMechanism of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_partition_count(self):
        """Gets the max_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        Maximum number of named partitions of the service.

        :return: The max_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :rtype: int
        """
        return self._max_partition_count

    @max_partition_count.setter
    def max_partition_count(self, max_partition_count):
        """Sets the max_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        Maximum number of named partitions of the service.

        :param max_partition_count: The max_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :type max_partition_count: int
        """
        if max_partition_count is None:
            raise ValueError("Invalid value for `max_partition_count`, must not be `None`")

        self._max_partition_count = max_partition_count

    @property
    def min_partition_count(self):
        """Gets the min_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        Minimum number of named partitions of the service.

        :return: The min_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :rtype: int
        """
        return self._min_partition_count

    @min_partition_count.setter
    def min_partition_count(self, min_partition_count):
        """Sets the min_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        Minimum number of named partitions of the service.

        :param min_partition_count: The min_partition_count of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :type min_partition_count: int
        """
        if min_partition_count is None:
            raise ValueError("Invalid value for `min_partition_count`, must not be `None`")

        self._min_partition_count = min_partition_count

    @property
    def scale_increment(self):
        """Gets the scale_increment of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        The number of instances to add or remove during a scaling operation.

        :return: The scale_increment of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :rtype: int
        """
        return self._scale_increment

    @scale_increment.setter
    def scale_increment(self, scale_increment):
        """Sets the scale_increment of this AddRemoveIncrementalNamedPartitionScalingMechanism.

        The number of instances to add or remove during a scaling operation.

        :param scale_increment: The scale_increment of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :type scale_increment: int
        """
        if scale_increment is None:
            raise ValueError("Invalid value for `scale_increment`, must not be `None`")

        self._scale_increment = scale_increment

    @property
    def kind(self):
        """Gets the kind of this AddRemoveIncrementalNamedPartitionScalingMechanism.


        :return: The kind of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :rtype: ScalingMechanismKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AddRemoveIncrementalNamedPartitionScalingMechanism.


        :param kind: The kind of this AddRemoveIncrementalNamedPartitionScalingMechanism.
        :type kind: ScalingMechanismKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
