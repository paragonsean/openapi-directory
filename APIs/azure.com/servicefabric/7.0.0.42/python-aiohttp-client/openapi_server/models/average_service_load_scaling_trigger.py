# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_trigger_description import ScalingTriggerDescription
from openapi_server.models.scaling_trigger_kind import ScalingTriggerKind
from openapi_server import util


class AverageServiceLoadScalingTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower_load_threshold: float=None, metric_name: str=None, scale_interval_in_seconds: int=None, upper_load_threshold: float=None, kind: ScalingTriggerKind=None):
        """AverageServiceLoadScalingTrigger - a model defined in OpenAPI

        :param lower_load_threshold: The lower_load_threshold of this AverageServiceLoadScalingTrigger.
        :param metric_name: The metric_name of this AverageServiceLoadScalingTrigger.
        :param scale_interval_in_seconds: The scale_interval_in_seconds of this AverageServiceLoadScalingTrigger.
        :param upper_load_threshold: The upper_load_threshold of this AverageServiceLoadScalingTrigger.
        :param kind: The kind of this AverageServiceLoadScalingTrigger.
        """
        self.openapi_types = {
            'lower_load_threshold': float,
            'metric_name': str,
            'scale_interval_in_seconds': int,
            'upper_load_threshold': float,
            'kind': ScalingTriggerKind
        }

        self.attribute_map = {
            'lower_load_threshold': 'LowerLoadThreshold',
            'metric_name': 'MetricName',
            'scale_interval_in_seconds': 'ScaleIntervalInSeconds',
            'upper_load_threshold': 'UpperLoadThreshold',
            'kind': 'Kind'
        }

        self._lower_load_threshold = lower_load_threshold
        self._metric_name = metric_name
        self._scale_interval_in_seconds = scale_interval_in_seconds
        self._upper_load_threshold = upper_load_threshold
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AverageServiceLoadScalingTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AverageServiceLoadScalingTrigger of this AverageServiceLoadScalingTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower_load_threshold(self):
        """Gets the lower_load_threshold of this AverageServiceLoadScalingTrigger.

        The lower limit of the load below which a scale in operation should be performed.

        :return: The lower_load_threshold of this AverageServiceLoadScalingTrigger.
        :rtype: float
        """
        return self._lower_load_threshold

    @lower_load_threshold.setter
    def lower_load_threshold(self, lower_load_threshold):
        """Sets the lower_load_threshold of this AverageServiceLoadScalingTrigger.

        The lower limit of the load below which a scale in operation should be performed.

        :param lower_load_threshold: The lower_load_threshold of this AverageServiceLoadScalingTrigger.
        :type lower_load_threshold: float
        """
        if lower_load_threshold is None:
            raise ValueError("Invalid value for `lower_load_threshold`, must not be `None`")

        self._lower_load_threshold = lower_load_threshold

    @property
    def metric_name(self):
        """Gets the metric_name of this AverageServiceLoadScalingTrigger.

        The name of the metric for which usage should be tracked.

        :return: The metric_name of this AverageServiceLoadScalingTrigger.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this AverageServiceLoadScalingTrigger.

        The name of the metric for which usage should be tracked.

        :param metric_name: The metric_name of this AverageServiceLoadScalingTrigger.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def scale_interval_in_seconds(self):
        """Gets the scale_interval_in_seconds of this AverageServiceLoadScalingTrigger.

        The period in seconds on which a decision is made whether to scale or not.

        :return: The scale_interval_in_seconds of this AverageServiceLoadScalingTrigger.
        :rtype: int
        """
        return self._scale_interval_in_seconds

    @scale_interval_in_seconds.setter
    def scale_interval_in_seconds(self, scale_interval_in_seconds):
        """Sets the scale_interval_in_seconds of this AverageServiceLoadScalingTrigger.

        The period in seconds on which a decision is made whether to scale or not.

        :param scale_interval_in_seconds: The scale_interval_in_seconds of this AverageServiceLoadScalingTrigger.
        :type scale_interval_in_seconds: int
        """
        if scale_interval_in_seconds is None:
            raise ValueError("Invalid value for `scale_interval_in_seconds`, must not be `None`")
        if scale_interval_in_seconds is not None and scale_interval_in_seconds > 4294967295:
            raise ValueError("Invalid value for `scale_interval_in_seconds`, must be a value less than or equal to `4294967295`")
        if scale_interval_in_seconds is not None and scale_interval_in_seconds < 0:
            raise ValueError("Invalid value for `scale_interval_in_seconds`, must be a value greater than or equal to `0`")

        self._scale_interval_in_seconds = scale_interval_in_seconds

    @property
    def upper_load_threshold(self):
        """Gets the upper_load_threshold of this AverageServiceLoadScalingTrigger.

        The upper limit of the load beyond which a scale out operation should be performed.

        :return: The upper_load_threshold of this AverageServiceLoadScalingTrigger.
        :rtype: float
        """
        return self._upper_load_threshold

    @upper_load_threshold.setter
    def upper_load_threshold(self, upper_load_threshold):
        """Sets the upper_load_threshold of this AverageServiceLoadScalingTrigger.

        The upper limit of the load beyond which a scale out operation should be performed.

        :param upper_load_threshold: The upper_load_threshold of this AverageServiceLoadScalingTrigger.
        :type upper_load_threshold: float
        """
        if upper_load_threshold is None:
            raise ValueError("Invalid value for `upper_load_threshold`, must not be `None`")

        self._upper_load_threshold = upper_load_threshold

    @property
    def kind(self):
        """Gets the kind of this AverageServiceLoadScalingTrigger.


        :return: The kind of this AverageServiceLoadScalingTrigger.
        :rtype: ScalingTriggerKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AverageServiceLoadScalingTrigger.


        :param kind: The kind of this AverageServiceLoadScalingTrigger.
        :type kind: ScalingTriggerKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
