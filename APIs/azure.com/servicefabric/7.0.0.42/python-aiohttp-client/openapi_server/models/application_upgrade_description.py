# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server.models.application_parameter import ApplicationParameter
from openapi_server.models.monitoring_policy_description import MonitoringPolicyDescription
from openapi_server.models.upgrade_kind import UpgradeKind
from openapi_server.models.upgrade_mode import UpgradeMode
from openapi_server.models.upgrade_sort_order import UpgradeSortOrder
from openapi_server import util


class ApplicationUpgradeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy: ApplicationHealthPolicy=None, force_restart: bool=False, instance_close_delay_duration_in_seconds: int=None, monitoring_policy: MonitoringPolicyDescription=None, name: str=None, parameters: List[ApplicationParameter]=None, rolling_upgrade_mode: UpgradeMode=UpgradeMode.UNMONITOREDAUTO, sort_order: UpgradeSortOrder=UpgradeSortOrder.DEFAULT, target_application_type_version: str=None, upgrade_kind: UpgradeKind=UpgradeKind.ROLLING, upgrade_replica_set_check_timeout_in_seconds: int=None):
        """ApplicationUpgradeDescription - a model defined in OpenAPI

        :param application_health_policy: The application_health_policy of this ApplicationUpgradeDescription.
        :param force_restart: The force_restart of this ApplicationUpgradeDescription.
        :param instance_close_delay_duration_in_seconds: The instance_close_delay_duration_in_seconds of this ApplicationUpgradeDescription.
        :param monitoring_policy: The monitoring_policy of this ApplicationUpgradeDescription.
        :param name: The name of this ApplicationUpgradeDescription.
        :param parameters: The parameters of this ApplicationUpgradeDescription.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ApplicationUpgradeDescription.
        :param sort_order: The sort_order of this ApplicationUpgradeDescription.
        :param target_application_type_version: The target_application_type_version of this ApplicationUpgradeDescription.
        :param upgrade_kind: The upgrade_kind of this ApplicationUpgradeDescription.
        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ApplicationUpgradeDescription.
        """
        self.openapi_types = {
            'application_health_policy': ApplicationHealthPolicy,
            'force_restart': bool,
            'instance_close_delay_duration_in_seconds': int,
            'monitoring_policy': MonitoringPolicyDescription,
            'name': str,
            'parameters': List[ApplicationParameter],
            'rolling_upgrade_mode': UpgradeMode,
            'sort_order': UpgradeSortOrder,
            'target_application_type_version': str,
            'upgrade_kind': UpgradeKind,
            'upgrade_replica_set_check_timeout_in_seconds': int
        }

        self.attribute_map = {
            'application_health_policy': 'ApplicationHealthPolicy',
            'force_restart': 'ForceRestart',
            'instance_close_delay_duration_in_seconds': 'InstanceCloseDelayDurationInSeconds',
            'monitoring_policy': 'MonitoringPolicy',
            'name': 'Name',
            'parameters': 'Parameters',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'sort_order': 'SortOrder',
            'target_application_type_version': 'TargetApplicationTypeVersion',
            'upgrade_kind': 'UpgradeKind',
            'upgrade_replica_set_check_timeout_in_seconds': 'UpgradeReplicaSetCheckTimeoutInSeconds'
        }

        self._application_health_policy = application_health_policy
        self._force_restart = force_restart
        self._instance_close_delay_duration_in_seconds = instance_close_delay_duration_in_seconds
        self._monitoring_policy = monitoring_policy
        self._name = name
        self._parameters = parameters
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._sort_order = sort_order
        self._target_application_type_version = target_application_type_version
        self._upgrade_kind = upgrade_kind
        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradeDescription of this ApplicationUpgradeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy(self):
        """Gets the application_health_policy of this ApplicationUpgradeDescription.


        :return: The application_health_policy of this ApplicationUpgradeDescription.
        :rtype: ApplicationHealthPolicy
        """
        return self._application_health_policy

    @application_health_policy.setter
    def application_health_policy(self, application_health_policy):
        """Sets the application_health_policy of this ApplicationUpgradeDescription.


        :param application_health_policy: The application_health_policy of this ApplicationUpgradeDescription.
        :type application_health_policy: ApplicationHealthPolicy
        """

        self._application_health_policy = application_health_policy

    @property
    def force_restart(self):
        """Gets the force_restart of this ApplicationUpgradeDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :return: The force_restart of this ApplicationUpgradeDescription.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this ApplicationUpgradeDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :param force_restart: The force_restart of this ApplicationUpgradeDescription.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def instance_close_delay_duration_in_seconds(self):
        """Gets the instance_close_delay_duration_in_seconds of this ApplicationUpgradeDescription.

        Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. See InstanceCloseDelayDurationSeconds property in $ref: \"#/definitions/StatelessServiceDescription.yaml\" for details. Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior will entirely depend on the delay configured in the stateless service description.

        :return: The instance_close_delay_duration_in_seconds of this ApplicationUpgradeDescription.
        :rtype: int
        """
        return self._instance_close_delay_duration_in_seconds

    @instance_close_delay_duration_in_seconds.setter
    def instance_close_delay_duration_in_seconds(self, instance_close_delay_duration_in_seconds):
        """Sets the instance_close_delay_duration_in_seconds of this ApplicationUpgradeDescription.

        Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. See InstanceCloseDelayDurationSeconds property in $ref: \"#/definitions/StatelessServiceDescription.yaml\" for details. Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior will entirely depend on the delay configured in the stateless service description.

        :param instance_close_delay_duration_in_seconds: The instance_close_delay_duration_in_seconds of this ApplicationUpgradeDescription.
        :type instance_close_delay_duration_in_seconds: int
        """

        self._instance_close_delay_duration_in_seconds = instance_close_delay_duration_in_seconds

    @property
    def monitoring_policy(self):
        """Gets the monitoring_policy of this ApplicationUpgradeDescription.


        :return: The monitoring_policy of this ApplicationUpgradeDescription.
        :rtype: MonitoringPolicyDescription
        """
        return self._monitoring_policy

    @monitoring_policy.setter
    def monitoring_policy(self, monitoring_policy):
        """Sets the monitoring_policy of this ApplicationUpgradeDescription.


        :param monitoring_policy: The monitoring_policy of this ApplicationUpgradeDescription.
        :type monitoring_policy: MonitoringPolicyDescription
        """

        self._monitoring_policy = monitoring_policy

    @property
    def name(self):
        """Gets the name of this ApplicationUpgradeDescription.

        The name of the target application, including the 'fabric:' URI scheme.

        :return: The name of this ApplicationUpgradeDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationUpgradeDescription.

        The name of the target application, including the 'fabric:' URI scheme.

        :param name: The name of this ApplicationUpgradeDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationUpgradeDescription.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :return: The parameters of this ApplicationUpgradeDescription.
        :rtype: List[ApplicationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationUpgradeDescription.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :param parameters: The parameters of this ApplicationUpgradeDescription.
        :type parameters: List[ApplicationParameter]
        """

        self._parameters = parameters

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this ApplicationUpgradeDescription.


        :return: The rolling_upgrade_mode of this ApplicationUpgradeDescription.
        :rtype: UpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this ApplicationUpgradeDescription.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ApplicationUpgradeDescription.
        :type rolling_upgrade_mode: UpgradeMode
        """

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def sort_order(self):
        """Gets the sort_order of this ApplicationUpgradeDescription.


        :return: The sort_order of this ApplicationUpgradeDescription.
        :rtype: UpgradeSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ApplicationUpgradeDescription.


        :param sort_order: The sort_order of this ApplicationUpgradeDescription.
        :type sort_order: UpgradeSortOrder
        """

        self._sort_order = sort_order

    @property
    def target_application_type_version(self):
        """Gets the target_application_type_version of this ApplicationUpgradeDescription.

        The target application type version (found in the application manifest) for the application upgrade.

        :return: The target_application_type_version of this ApplicationUpgradeDescription.
        :rtype: str
        """
        return self._target_application_type_version

    @target_application_type_version.setter
    def target_application_type_version(self, target_application_type_version):
        """Sets the target_application_type_version of this ApplicationUpgradeDescription.

        The target application type version (found in the application manifest) for the application upgrade.

        :param target_application_type_version: The target_application_type_version of this ApplicationUpgradeDescription.
        :type target_application_type_version: str
        """
        if target_application_type_version is None:
            raise ValueError("Invalid value for `target_application_type_version`, must not be `None`")

        self._target_application_type_version = target_application_type_version

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this ApplicationUpgradeDescription.


        :return: The upgrade_kind of this ApplicationUpgradeDescription.
        :rtype: UpgradeKind
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this ApplicationUpgradeDescription.


        :param upgrade_kind: The upgrade_kind of this ApplicationUpgradeDescription.
        :type upgrade_kind: UpgradeKind
        """
        if upgrade_kind is None:
            raise ValueError("Invalid value for `upgrade_kind`, must not be `None`")

        self._upgrade_kind = upgrade_kind

    @property
    def upgrade_replica_set_check_timeout_in_seconds(self):
        """Gets the upgrade_replica_set_check_timeout_in_seconds of this ApplicationUpgradeDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :return: The upgrade_replica_set_check_timeout_in_seconds of this ApplicationUpgradeDescription.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout_in_seconds

    @upgrade_replica_set_check_timeout_in_seconds.setter
    def upgrade_replica_set_check_timeout_in_seconds(self, upgrade_replica_set_check_timeout_in_seconds):
        """Sets the upgrade_replica_set_check_timeout_in_seconds of this ApplicationUpgradeDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ApplicationUpgradeDescription.
        :type upgrade_replica_set_check_timeout_in_seconds: int
        """

        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds
