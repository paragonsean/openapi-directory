# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnplacedReplicaInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_id: str=None, service_name: str=None, unplaced_replica_details: List[str]=None):
        """UnplacedReplicaInformation - a model defined in OpenAPI

        :param partition_id: The partition_id of this UnplacedReplicaInformation.
        :param service_name: The service_name of this UnplacedReplicaInformation.
        :param unplaced_replica_details: The unplaced_replica_details of this UnplacedReplicaInformation.
        """
        self.openapi_types = {
            'partition_id': str,
            'service_name': str,
            'unplaced_replica_details': List[str]
        }

        self.attribute_map = {
            'partition_id': 'PartitionId',
            'service_name': 'ServiceName',
            'unplaced_replica_details': 'UnplacedReplicaDetails'
        }

        self._partition_id = partition_id
        self._service_name = service_name
        self._unplaced_replica_details = unplaced_replica_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnplacedReplicaInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnplacedReplicaInformation of this UnplacedReplicaInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_id(self):
        """Gets the partition_id of this UnplacedReplicaInformation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this UnplacedReplicaInformation.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this UnplacedReplicaInformation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this UnplacedReplicaInformation.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def service_name(self):
        """Gets the service_name of this UnplacedReplicaInformation.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this UnplacedReplicaInformation.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this UnplacedReplicaInformation.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this UnplacedReplicaInformation.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def unplaced_replica_details(self):
        """Gets the unplaced_replica_details of this UnplacedReplicaInformation.

        List of reasons due to which a replica cannot be placed.

        :return: The unplaced_replica_details of this UnplacedReplicaInformation.
        :rtype: List[str]
        """
        return self._unplaced_replica_details

    @unplaced_replica_details.setter
    def unplaced_replica_details(self, unplaced_replica_details):
        """Sets the unplaced_replica_details of this UnplacedReplicaInformation.

        List of reasons due to which a replica cannot be placed.

        :param unplaced_replica_details: The unplaced_replica_details of this UnplacedReplicaInformation.
        :type unplaced_replica_details: List[str]
        """

        self._unplaced_replica_details = unplaced_replica_details
