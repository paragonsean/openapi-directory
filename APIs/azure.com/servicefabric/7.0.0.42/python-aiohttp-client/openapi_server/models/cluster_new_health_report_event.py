# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_event import ClusterEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ClusterNewHealthReportEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, health_state: str=None, _property: str=None, remove_when_expired: bool=None, sequence_number: int=None, source_id: str=None, source_utc_timestamp: datetime=None, time_to_live_ms: int=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ClusterNewHealthReportEvent - a model defined in OpenAPI

        :param description: The description of this ClusterNewHealthReportEvent.
        :param health_state: The health_state of this ClusterNewHealthReportEvent.
        :param _property: The _property of this ClusterNewHealthReportEvent.
        :param remove_when_expired: The remove_when_expired of this ClusterNewHealthReportEvent.
        :param sequence_number: The sequence_number of this ClusterNewHealthReportEvent.
        :param source_id: The source_id of this ClusterNewHealthReportEvent.
        :param source_utc_timestamp: The source_utc_timestamp of this ClusterNewHealthReportEvent.
        :param time_to_live_ms: The time_to_live_ms of this ClusterNewHealthReportEvent.
        :param category: The category of this ClusterNewHealthReportEvent.
        :param event_instance_id: The event_instance_id of this ClusterNewHealthReportEvent.
        :param has_correlated_events: The has_correlated_events of this ClusterNewHealthReportEvent.
        :param kind: The kind of this ClusterNewHealthReportEvent.
        :param time_stamp: The time_stamp of this ClusterNewHealthReportEvent.
        """
        self.openapi_types = {
            'description': str,
            'health_state': str,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': int,
            'source_id': str,
            'source_utc_timestamp': datetime,
            'time_to_live_ms': int,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'description': 'Description',
            'health_state': 'HealthState',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'source_id': 'SourceId',
            'source_utc_timestamp': 'SourceUtcTimestamp',
            'time_to_live_ms': 'TimeToLiveMs',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._description = description
        self._health_state = health_state
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._source_id = source_id
        self._source_utc_timestamp = source_utc_timestamp
        self._time_to_live_ms = time_to_live_ms
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterNewHealthReportEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterNewHealthReportEvent of this ClusterNewHealthReportEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ClusterNewHealthReportEvent.

        Description of report.

        :return: The description of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterNewHealthReportEvent.

        Description of report.

        :param description: The description of this ClusterNewHealthReportEvent.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this ClusterNewHealthReportEvent.

        Describes the property health state.

        :return: The health_state of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ClusterNewHealthReportEvent.

        Describes the property health state.

        :param health_state: The health_state of this ClusterNewHealthReportEvent.
        :type health_state: str
        """
        if health_state is None:
            raise ValueError("Invalid value for `health_state`, must not be `None`")

        self._health_state = health_state

    @property
    def _property(self):
        """Gets the _property of this ClusterNewHealthReportEvent.

        Describes the property.

        :return: The _property of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ClusterNewHealthReportEvent.

        Describes the property.

        :param _property: The _property of this ClusterNewHealthReportEvent.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this ClusterNewHealthReportEvent.

        Indicates the removal when it expires.

        :return: The remove_when_expired of this ClusterNewHealthReportEvent.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this ClusterNewHealthReportEvent.

        Indicates the removal when it expires.

        :param remove_when_expired: The remove_when_expired of this ClusterNewHealthReportEvent.
        :type remove_when_expired: bool
        """
        if remove_when_expired is None:
            raise ValueError("Invalid value for `remove_when_expired`, must not be `None`")

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ClusterNewHealthReportEvent.

        Sequence number of report.

        :return: The sequence_number of this ClusterNewHealthReportEvent.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ClusterNewHealthReportEvent.

        Sequence number of report.

        :param sequence_number: The sequence_number of this ClusterNewHealthReportEvent.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")

        self._sequence_number = sequence_number

    @property
    def source_id(self):
        """Gets the source_id of this ClusterNewHealthReportEvent.

        Id of report source.

        :return: The source_id of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ClusterNewHealthReportEvent.

        Id of report source.

        :param source_id: The source_id of this ClusterNewHealthReportEvent.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_utc_timestamp(self):
        """Gets the source_utc_timestamp of this ClusterNewHealthReportEvent.

        Source time.

        :return: The source_utc_timestamp of this ClusterNewHealthReportEvent.
        :rtype: datetime
        """
        return self._source_utc_timestamp

    @source_utc_timestamp.setter
    def source_utc_timestamp(self, source_utc_timestamp):
        """Sets the source_utc_timestamp of this ClusterNewHealthReportEvent.

        Source time.

        :param source_utc_timestamp: The source_utc_timestamp of this ClusterNewHealthReportEvent.
        :type source_utc_timestamp: datetime
        """
        if source_utc_timestamp is None:
            raise ValueError("Invalid value for `source_utc_timestamp`, must not be `None`")

        self._source_utc_timestamp = source_utc_timestamp

    @property
    def time_to_live_ms(self):
        """Gets the time_to_live_ms of this ClusterNewHealthReportEvent.

        Time to live in milli-seconds.

        :return: The time_to_live_ms of this ClusterNewHealthReportEvent.
        :rtype: int
        """
        return self._time_to_live_ms

    @time_to_live_ms.setter
    def time_to_live_ms(self, time_to_live_ms):
        """Sets the time_to_live_ms of this ClusterNewHealthReportEvent.

        Time to live in milli-seconds.

        :param time_to_live_ms: The time_to_live_ms of this ClusterNewHealthReportEvent.
        :type time_to_live_ms: int
        """
        if time_to_live_ms is None:
            raise ValueError("Invalid value for `time_to_live_ms`, must not be `None`")

        self._time_to_live_ms = time_to_live_ms

    @property
    def category(self):
        """Gets the category of this ClusterNewHealthReportEvent.

        The category of event.

        :return: The category of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ClusterNewHealthReportEvent.

        The category of event.

        :param category: The category of this ClusterNewHealthReportEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ClusterNewHealthReportEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ClusterNewHealthReportEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ClusterNewHealthReportEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ClusterNewHealthReportEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ClusterNewHealthReportEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ClusterNewHealthReportEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ClusterNewHealthReportEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ClusterNewHealthReportEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ClusterNewHealthReportEvent.


        :return: The kind of this ClusterNewHealthReportEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterNewHealthReportEvent.


        :param kind: The kind of this ClusterNewHealthReportEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ClusterNewHealthReportEvent.

        The time event was logged.

        :return: The time_stamp of this ClusterNewHealthReportEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ClusterNewHealthReportEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ClusterNewHealthReportEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
