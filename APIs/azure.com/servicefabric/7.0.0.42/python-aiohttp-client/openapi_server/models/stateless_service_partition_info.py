# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.partition_information import PartitionInformation
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_partition_info import ServicePartitionInfo
from openapi_server.models.service_partition_status import ServicePartitionStatus
from openapi_server import util


class StatelessServicePartitionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_count: int=None, min_instance_count: int=1, min_instance_percentage: int=0, health_state: HealthState=None, partition_information: PartitionInformation=None, partition_status: ServicePartitionStatus=None, service_kind: ServiceKind=None):
        """StatelessServicePartitionInfo - a model defined in OpenAPI

        :param instance_count: The instance_count of this StatelessServicePartitionInfo.
        :param min_instance_count: The min_instance_count of this StatelessServicePartitionInfo.
        :param min_instance_percentage: The min_instance_percentage of this StatelessServicePartitionInfo.
        :param health_state: The health_state of this StatelessServicePartitionInfo.
        :param partition_information: The partition_information of this StatelessServicePartitionInfo.
        :param partition_status: The partition_status of this StatelessServicePartitionInfo.
        :param service_kind: The service_kind of this StatelessServicePartitionInfo.
        """
        self.openapi_types = {
            'instance_count': int,
            'min_instance_count': int,
            'min_instance_percentage': int,
            'health_state': HealthState,
            'partition_information': PartitionInformation,
            'partition_status': ServicePartitionStatus,
            'service_kind': ServiceKind
        }

        self.attribute_map = {
            'instance_count': 'InstanceCount',
            'min_instance_count': 'MinInstanceCount',
            'min_instance_percentage': 'MinInstancePercentage',
            'health_state': 'HealthState',
            'partition_information': 'PartitionInformation',
            'partition_status': 'PartitionStatus',
            'service_kind': 'ServiceKind'
        }

        self._instance_count = instance_count
        self._min_instance_count = min_instance_count
        self._min_instance_percentage = min_instance_percentage
        self._health_state = health_state
        self._partition_information = partition_information
        self._partition_status = partition_status
        self._service_kind = service_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatelessServicePartitionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatelessServicePartitionInfo of this StatelessServicePartitionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_count(self):
        """Gets the instance_count of this StatelessServicePartitionInfo.

        Number of instances of this partition.

        :return: The instance_count of this StatelessServicePartitionInfo.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this StatelessServicePartitionInfo.

        Number of instances of this partition.

        :param instance_count: The instance_count of this StatelessServicePartitionInfo.
        :type instance_count: int
        """

        self._instance_count = instance_count

    @property
    def min_instance_count(self):
        """Gets the min_instance_count of this StatelessServicePartitionInfo.

        MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.

        :return: The min_instance_count of this StatelessServicePartitionInfo.
        :rtype: int
        """
        return self._min_instance_count

    @min_instance_count.setter
    def min_instance_count(self, min_instance_count):
        """Sets the min_instance_count of this StatelessServicePartitionInfo.

        MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.

        :param min_instance_count: The min_instance_count of this StatelessServicePartitionInfo.
        :type min_instance_count: int
        """
        if min_instance_count is not None and min_instance_count < 1:
            raise ValueError("Invalid value for `min_instance_count`, must be a value greater than or equal to `1`")

        self._min_instance_count = min_instance_count

    @property
    def min_instance_percentage(self):
        """Gets the min_instance_percentage of this StatelessServicePartitionInfo.

        MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.

        :return: The min_instance_percentage of this StatelessServicePartitionInfo.
        :rtype: int
        """
        return self._min_instance_percentage

    @min_instance_percentage.setter
    def min_instance_percentage(self, min_instance_percentage):
        """Sets the min_instance_percentage of this StatelessServicePartitionInfo.

        MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.

        :param min_instance_percentage: The min_instance_percentage of this StatelessServicePartitionInfo.
        :type min_instance_percentage: int
        """
        if min_instance_percentage is not None and min_instance_percentage > 100:
            raise ValueError("Invalid value for `min_instance_percentage`, must be a value less than or equal to `100`")
        if min_instance_percentage is not None and min_instance_percentage < 0:
            raise ValueError("Invalid value for `min_instance_percentage`, must be a value greater than or equal to `0`")

        self._min_instance_percentage = min_instance_percentage

    @property
    def health_state(self):
        """Gets the health_state of this StatelessServicePartitionInfo.


        :return: The health_state of this StatelessServicePartitionInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this StatelessServicePartitionInfo.


        :param health_state: The health_state of this StatelessServicePartitionInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def partition_information(self):
        """Gets the partition_information of this StatelessServicePartitionInfo.


        :return: The partition_information of this StatelessServicePartitionInfo.
        :rtype: PartitionInformation
        """
        return self._partition_information

    @partition_information.setter
    def partition_information(self, partition_information):
        """Sets the partition_information of this StatelessServicePartitionInfo.


        :param partition_information: The partition_information of this StatelessServicePartitionInfo.
        :type partition_information: PartitionInformation
        """

        self._partition_information = partition_information

    @property
    def partition_status(self):
        """Gets the partition_status of this StatelessServicePartitionInfo.


        :return: The partition_status of this StatelessServicePartitionInfo.
        :rtype: ServicePartitionStatus
        """
        return self._partition_status

    @partition_status.setter
    def partition_status(self, partition_status):
        """Sets the partition_status of this StatelessServicePartitionInfo.


        :param partition_status: The partition_status of this StatelessServicePartitionInfo.
        :type partition_status: ServicePartitionStatus
        """

        self._partition_status = partition_status

    @property
    def service_kind(self):
        """Gets the service_kind of this StatelessServicePartitionInfo.


        :return: The service_kind of this StatelessServicePartitionInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatelessServicePartitionInfo.


        :param service_kind: The service_kind of this StatelessServicePartitionInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind
