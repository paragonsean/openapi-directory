# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provision_application_type_description_base import ProvisionApplicationTypeDescriptionBase
from openapi_server.models.provision_application_type_kind import ProvisionApplicationTypeKind
from openapi_server import util


class ExternalStoreProvisionApplicationTypeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_package_download_uri: str=None, application_type_name: str=None, application_type_version: str=None, _async: bool=None, kind: ProvisionApplicationTypeKind=None):
        """ExternalStoreProvisionApplicationTypeDescription - a model defined in OpenAPI

        :param application_package_download_uri: The application_package_download_uri of this ExternalStoreProvisionApplicationTypeDescription.
        :param application_type_name: The application_type_name of this ExternalStoreProvisionApplicationTypeDescription.
        :param application_type_version: The application_type_version of this ExternalStoreProvisionApplicationTypeDescription.
        :param _async: The _async of this ExternalStoreProvisionApplicationTypeDescription.
        :param kind: The kind of this ExternalStoreProvisionApplicationTypeDescription.
        """
        self.openapi_types = {
            'application_package_download_uri': str,
            'application_type_name': str,
            'application_type_version': str,
            '_async': bool,
            'kind': ProvisionApplicationTypeKind
        }

        self.attribute_map = {
            'application_package_download_uri': 'ApplicationPackageDownloadUri',
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            '_async': 'Async',
            'kind': 'Kind'
        }

        self._application_package_download_uri = application_package_download_uri
        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self.__async = _async
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalStoreProvisionApplicationTypeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalStoreProvisionApplicationTypeDescription of this ExternalStoreProvisionApplicationTypeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_package_download_uri(self):
        """Gets the application_package_download_uri of this ExternalStoreProvisionApplicationTypeDescription.

        The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.

        :return: The application_package_download_uri of this ExternalStoreProvisionApplicationTypeDescription.
        :rtype: str
        """
        return self._application_package_download_uri

    @application_package_download_uri.setter
    def application_package_download_uri(self, application_package_download_uri):
        """Sets the application_package_download_uri of this ExternalStoreProvisionApplicationTypeDescription.

        The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.

        :param application_package_download_uri: The application_package_download_uri of this ExternalStoreProvisionApplicationTypeDescription.
        :type application_package_download_uri: str
        """
        if application_package_download_uri is None:
            raise ValueError("Invalid value for `application_package_download_uri`, must not be `None`")

        self._application_package_download_uri = application_package_download_uri

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ExternalStoreProvisionApplicationTypeDescription.

        The application type name represents the name of the application type found in the application manifest.

        :return: The application_type_name of this ExternalStoreProvisionApplicationTypeDescription.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ExternalStoreProvisionApplicationTypeDescription.

        The application type name represents the name of the application type found in the application manifest.

        :param application_type_name: The application_type_name of this ExternalStoreProvisionApplicationTypeDescription.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this ExternalStoreProvisionApplicationTypeDescription.

        The application type version represents the version of the application type found in the application manifest.

        :return: The application_type_version of this ExternalStoreProvisionApplicationTypeDescription.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this ExternalStoreProvisionApplicationTypeDescription.

        The application type version represents the version of the application type found in the application manifest.

        :param application_type_version: The application_type_version of this ExternalStoreProvisionApplicationTypeDescription.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def _async(self):
        """Gets the _async of this ExternalStoreProvisionApplicationTypeDescription.

        Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.

        :return: The _async of this ExternalStoreProvisionApplicationTypeDescription.
        :rtype: bool
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this ExternalStoreProvisionApplicationTypeDescription.

        Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.

        :param _async: The _async of this ExternalStoreProvisionApplicationTypeDescription.
        :type _async: bool
        """
        if _async is None:
            raise ValueError("Invalid value for `_async`, must not be `None`")

        self.__async = _async

    @property
    def kind(self):
        """Gets the kind of this ExternalStoreProvisionApplicationTypeDescription.


        :return: The kind of this ExternalStoreProvisionApplicationTypeDescription.
        :rtype: ProvisionApplicationTypeKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ExternalStoreProvisionApplicationTypeDescription.


        :param kind: The kind of this ExternalStoreProvisionApplicationTypeDescription.
        :type kind: ProvisionApplicationTypeKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
