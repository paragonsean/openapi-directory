# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeployedServicePackageHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state_filter: int=None, service_manifest_name_filter: str=None, service_package_activation_id_filter: str=None):
        """DeployedServicePackageHealthStateFilter - a model defined in OpenAPI

        :param health_state_filter: The health_state_filter of this DeployedServicePackageHealthStateFilter.
        :param service_manifest_name_filter: The service_manifest_name_filter of this DeployedServicePackageHealthStateFilter.
        :param service_package_activation_id_filter: The service_package_activation_id_filter of this DeployedServicePackageHealthStateFilter.
        """
        self.openapi_types = {
            'health_state_filter': int,
            'service_manifest_name_filter': str,
            'service_package_activation_id_filter': str
        }

        self.attribute_map = {
            'health_state_filter': 'HealthStateFilter',
            'service_manifest_name_filter': 'ServiceManifestNameFilter',
            'service_package_activation_id_filter': 'ServicePackageActivationIdFilter'
        }

        self._health_state_filter = health_state_filter
        self._service_manifest_name_filter = service_manifest_name_filter
        self._service_package_activation_id_filter = service_package_activation_id_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedServicePackageHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedServicePackageHealthStateFilter of this DeployedServicePackageHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this DeployedServicePackageHealthStateFilter.

        The filter for the health state of the deployed service packages. It allows selecting deployed service packages if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the parent deployed application aggregated health state. If not specified, default value is None, unless the deployed service package ID is specified. If the filter has default value and deployed service package ID is specified, the matching deployed service package is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :return: The health_state_filter of this DeployedServicePackageHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this DeployedServicePackageHealthStateFilter.

        The filter for the health state of the deployed service packages. It allows selecting deployed service packages if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the parent deployed application aggregated health state. If not specified, default value is None, unless the deployed service package ID is specified. If the filter has default value and deployed service package ID is specified, the matching deployed service package is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :param health_state_filter: The health_state_filter of this DeployedServicePackageHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def service_manifest_name_filter(self):
        """Gets the service_manifest_name_filter of this DeployedServicePackageHealthStateFilter.

        The name of the service manifest which identifies the deployed service packages that matches the filter. If specified, the filter is applied only to the specified deployed service packages, if any. If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk based on this filter. If any deployed service package exists, they are included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :return: The service_manifest_name_filter of this DeployedServicePackageHealthStateFilter.
        :rtype: str
        """
        return self._service_manifest_name_filter

    @service_manifest_name_filter.setter
    def service_manifest_name_filter(self, service_manifest_name_filter):
        """Sets the service_manifest_name_filter of this DeployedServicePackageHealthStateFilter.

        The name of the service manifest which identifies the deployed service packages that matches the filter. If specified, the filter is applied only to the specified deployed service packages, if any. If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk based on this filter. If any deployed service package exists, they are included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :param service_manifest_name_filter: The service_manifest_name_filter of this DeployedServicePackageHealthStateFilter.
        :type service_manifest_name_filter: str
        """

        self._service_manifest_name_filter = service_manifest_name_filter

    @property
    def service_package_activation_id_filter(self):
        """Gets the service_package_activation_id_filter of this DeployedServicePackageHealthStateFilter.

        The activation ID of a deployed service package that matches the filter. If not specified, the filter applies to all deployed service packages that match the other parameters. If specified, the filter matches only the deployed service package with the specified activation ID.

        :return: The service_package_activation_id_filter of this DeployedServicePackageHealthStateFilter.
        :rtype: str
        """
        return self._service_package_activation_id_filter

    @service_package_activation_id_filter.setter
    def service_package_activation_id_filter(self, service_package_activation_id_filter):
        """Sets the service_package_activation_id_filter of this DeployedServicePackageHealthStateFilter.

        The activation ID of a deployed service package that matches the filter. If not specified, the filter applies to all deployed service packages that match the other parameters. If specified, the filter matches only the deployed service package with the specified activation ID.

        :param service_package_activation_id_filter: The service_package_activation_id_filter of this DeployedServicePackageHealthStateFilter.
        :type service_package_activation_id_filter: str
        """

        self._service_package_activation_id_filter = service_package_activation_id_filter
