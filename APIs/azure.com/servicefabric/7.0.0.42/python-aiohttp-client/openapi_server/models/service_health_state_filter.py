# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_health_state_filter import PartitionHealthStateFilter
from openapi_server import util


class ServiceHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state_filter: int=None, partition_filters: List[PartitionHealthStateFilter]=None, service_name_filter: str=None):
        """ServiceHealthStateFilter - a model defined in OpenAPI

        :param health_state_filter: The health_state_filter of this ServiceHealthStateFilter.
        :param partition_filters: The partition_filters of this ServiceHealthStateFilter.
        :param service_name_filter: The service_name_filter of this ServiceHealthStateFilter.
        """
        self.openapi_types = {
            'health_state_filter': int,
            'partition_filters': List[PartitionHealthStateFilter],
            'service_name_filter': str
        }

        self.attribute_map = {
            'health_state_filter': 'HealthStateFilter',
            'partition_filters': 'PartitionFilters',
            'service_name_filter': 'ServiceNameFilter'
        }

        self._health_state_filter = health_state_filter
        self._partition_filters = partition_filters
        self._service_name_filter = service_name_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceHealthStateFilter of this ServiceHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this ServiceHealthStateFilter.

        The filter for the health state of the services. It allows selecting services if they match the desired health states. The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :return: The health_state_filter of this ServiceHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this ServiceHealthStateFilter.

        The filter for the health state of the services. It allows selecting services if they match the desired health states. The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :param health_state_filter: The health_state_filter of this ServiceHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def partition_filters(self):
        """Gets the partition_filters of this ServiceHealthStateFilter.

        Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter. If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters. The service filter may specify multiple partition filters. For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID.

        :return: The partition_filters of this ServiceHealthStateFilter.
        :rtype: List[PartitionHealthStateFilter]
        """
        return self._partition_filters

    @partition_filters.setter
    def partition_filters(self, partition_filters):
        """Sets the partition_filters of this ServiceHealthStateFilter.

        Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter. If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters. The service filter may specify multiple partition filters. For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition ID.

        :param partition_filters: The partition_filters of this ServiceHealthStateFilter.
        :type partition_filters: List[PartitionHealthStateFilter]
        """

        self._partition_filters = partition_filters

    @property
    def service_name_filter(self):
        """Gets the service_name_filter of this ServiceHealthStateFilter.

        The name of the service that matches the filter. The filter is applied only to the specified service, if it exists. If the service doesn't exist, no service is returned in the cluster health chunk based on this filter. If the service exists, it is included as the application's child if the health state matches the other filter properties. If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :return: The service_name_filter of this ServiceHealthStateFilter.
        :rtype: str
        """
        return self._service_name_filter

    @service_name_filter.setter
    def service_name_filter(self, service_name_filter):
        """Sets the service_name_filter of this ServiceHealthStateFilter.

        The name of the service that matches the filter. The filter is applied only to the specified service, if it exists. If the service doesn't exist, no service is returned in the cluster health chunk based on this filter. If the service exists, it is included as the application's child if the health state matches the other filter properties. If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :param service_name_filter: The service_name_filter of this ServiceHealthStateFilter.
        :type service_name_filter: str
        """

        self._service_name_filter = service_name_filter
