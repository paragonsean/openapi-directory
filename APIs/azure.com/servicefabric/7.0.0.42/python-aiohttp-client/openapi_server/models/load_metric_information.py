# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_id import NodeId
from openapi_server import util


class LoadMetricInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, activity_threshold: float=None, balancing_threshold: float=None, buffered_cluster_capacity_remaining: float=None, cluster_buffered_capacity: str=None, cluster_capacity: str=None, cluster_capacity_remaining: str=None, cluster_load: str=None, cluster_remaining_buffered_capacity: str=None, cluster_remaining_capacity: str=None, current_cluster_load: float=None, deviation_after: float=None, deviation_before: float=None, is_balanced_after: bool=None, is_balanced_before: bool=None, is_cluster_capacity_violation: bool=None, max_node_load_node_id: NodeId=None, max_node_load_value: str=None, maximum_node_load: float=None, min_node_load_node_id: NodeId=None, min_node_load_value: str=None, minimum_node_load: float=None, name: str=None, node_buffer_percentage: float=None, planned_load_removal: float=None):
        """LoadMetricInformation - a model defined in OpenAPI

        :param action: The action of this LoadMetricInformation.
        :param activity_threshold: The activity_threshold of this LoadMetricInformation.
        :param balancing_threshold: The balancing_threshold of this LoadMetricInformation.
        :param buffered_cluster_capacity_remaining: The buffered_cluster_capacity_remaining of this LoadMetricInformation.
        :param cluster_buffered_capacity: The cluster_buffered_capacity of this LoadMetricInformation.
        :param cluster_capacity: The cluster_capacity of this LoadMetricInformation.
        :param cluster_capacity_remaining: The cluster_capacity_remaining of this LoadMetricInformation.
        :param cluster_load: The cluster_load of this LoadMetricInformation.
        :param cluster_remaining_buffered_capacity: The cluster_remaining_buffered_capacity of this LoadMetricInformation.
        :param cluster_remaining_capacity: The cluster_remaining_capacity of this LoadMetricInformation.
        :param current_cluster_load: The current_cluster_load of this LoadMetricInformation.
        :param deviation_after: The deviation_after of this LoadMetricInformation.
        :param deviation_before: The deviation_before of this LoadMetricInformation.
        :param is_balanced_after: The is_balanced_after of this LoadMetricInformation.
        :param is_balanced_before: The is_balanced_before of this LoadMetricInformation.
        :param is_cluster_capacity_violation: The is_cluster_capacity_violation of this LoadMetricInformation.
        :param max_node_load_node_id: The max_node_load_node_id of this LoadMetricInformation.
        :param max_node_load_value: The max_node_load_value of this LoadMetricInformation.
        :param maximum_node_load: The maximum_node_load of this LoadMetricInformation.
        :param min_node_load_node_id: The min_node_load_node_id of this LoadMetricInformation.
        :param min_node_load_value: The min_node_load_value of this LoadMetricInformation.
        :param minimum_node_load: The minimum_node_load of this LoadMetricInformation.
        :param name: The name of this LoadMetricInformation.
        :param node_buffer_percentage: The node_buffer_percentage of this LoadMetricInformation.
        :param planned_load_removal: The planned_load_removal of this LoadMetricInformation.
        """
        self.openapi_types = {
            'action': str,
            'activity_threshold': float,
            'balancing_threshold': float,
            'buffered_cluster_capacity_remaining': float,
            'cluster_buffered_capacity': str,
            'cluster_capacity': str,
            'cluster_capacity_remaining': str,
            'cluster_load': str,
            'cluster_remaining_buffered_capacity': str,
            'cluster_remaining_capacity': str,
            'current_cluster_load': float,
            'deviation_after': float,
            'deviation_before': float,
            'is_balanced_after': bool,
            'is_balanced_before': bool,
            'is_cluster_capacity_violation': bool,
            'max_node_load_node_id': NodeId,
            'max_node_load_value': str,
            'maximum_node_load': float,
            'min_node_load_node_id': NodeId,
            'min_node_load_value': str,
            'minimum_node_load': float,
            'name': str,
            'node_buffer_percentage': float,
            'planned_load_removal': float
        }

        self.attribute_map = {
            'action': 'Action',
            'activity_threshold': 'ActivityThreshold',
            'balancing_threshold': 'BalancingThreshold',
            'buffered_cluster_capacity_remaining': 'BufferedClusterCapacityRemaining',
            'cluster_buffered_capacity': 'ClusterBufferedCapacity',
            'cluster_capacity': 'ClusterCapacity',
            'cluster_capacity_remaining': 'ClusterCapacityRemaining',
            'cluster_load': 'ClusterLoad',
            'cluster_remaining_buffered_capacity': 'ClusterRemainingBufferedCapacity',
            'cluster_remaining_capacity': 'ClusterRemainingCapacity',
            'current_cluster_load': 'CurrentClusterLoad',
            'deviation_after': 'DeviationAfter',
            'deviation_before': 'DeviationBefore',
            'is_balanced_after': 'IsBalancedAfter',
            'is_balanced_before': 'IsBalancedBefore',
            'is_cluster_capacity_violation': 'IsClusterCapacityViolation',
            'max_node_load_node_id': 'MaxNodeLoadNodeId',
            'max_node_load_value': 'MaxNodeLoadValue',
            'maximum_node_load': 'MaximumNodeLoad',
            'min_node_load_node_id': 'MinNodeLoadNodeId',
            'min_node_load_value': 'MinNodeLoadValue',
            'minimum_node_load': 'MinimumNodeLoad',
            'name': 'Name',
            'node_buffer_percentage': 'NodeBufferPercentage',
            'planned_load_removal': 'PlannedLoadRemoval'
        }

        self._action = action
        self._activity_threshold = activity_threshold
        self._balancing_threshold = balancing_threshold
        self._buffered_cluster_capacity_remaining = buffered_cluster_capacity_remaining
        self._cluster_buffered_capacity = cluster_buffered_capacity
        self._cluster_capacity = cluster_capacity
        self._cluster_capacity_remaining = cluster_capacity_remaining
        self._cluster_load = cluster_load
        self._cluster_remaining_buffered_capacity = cluster_remaining_buffered_capacity
        self._cluster_remaining_capacity = cluster_remaining_capacity
        self._current_cluster_load = current_cluster_load
        self._deviation_after = deviation_after
        self._deviation_before = deviation_before
        self._is_balanced_after = is_balanced_after
        self._is_balanced_before = is_balanced_before
        self._is_cluster_capacity_violation = is_cluster_capacity_violation
        self._max_node_load_node_id = max_node_load_node_id
        self._max_node_load_value = max_node_load_value
        self._maximum_node_load = maximum_node_load
        self._min_node_load_node_id = min_node_load_node_id
        self._min_node_load_value = min_node_load_value
        self._minimum_node_load = minimum_node_load
        self._name = name
        self._node_buffer_percentage = node_buffer_percentage
        self._planned_load_removal = planned_load_removal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadMetricInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadMetricInformation of this LoadMetricInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LoadMetricInformation.

        The current action being taken with regard to this metric

        :return: The action of this LoadMetricInformation.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LoadMetricInformation.

        The current action being taken with regard to this metric

        :param action: The action of this LoadMetricInformation.
        :type action: str
        """

        self._action = action

    @property
    def activity_threshold(self):
        """Gets the activity_threshold of this LoadMetricInformation.

        The Activity Threshold specified for this metric in the system Cluster Manifest.

        :return: The activity_threshold of this LoadMetricInformation.
        :rtype: float
        """
        return self._activity_threshold

    @activity_threshold.setter
    def activity_threshold(self, activity_threshold):
        """Sets the activity_threshold of this LoadMetricInformation.

        The Activity Threshold specified for this metric in the system Cluster Manifest.

        :param activity_threshold: The activity_threshold of this LoadMetricInformation.
        :type activity_threshold: float
        """

        self._activity_threshold = activity_threshold

    @property
    def balancing_threshold(self):
        """Gets the balancing_threshold of this LoadMetricInformation.

        The balancing threshold for a certain metric.

        :return: The balancing_threshold of this LoadMetricInformation.
        :rtype: float
        """
        return self._balancing_threshold

    @balancing_threshold.setter
    def balancing_threshold(self, balancing_threshold):
        """Sets the balancing_threshold of this LoadMetricInformation.

        The balancing threshold for a certain metric.

        :param balancing_threshold: The balancing_threshold of this LoadMetricInformation.
        :type balancing_threshold: float
        """

        self._balancing_threshold = balancing_threshold

    @property
    def buffered_cluster_capacity_remaining(self):
        """Gets the buffered_cluster_capacity_remaining of this LoadMetricInformation.

        Remaining capacity in the cluster excluding the reserved space.

        :return: The buffered_cluster_capacity_remaining of this LoadMetricInformation.
        :rtype: float
        """
        return self._buffered_cluster_capacity_remaining

    @buffered_cluster_capacity_remaining.setter
    def buffered_cluster_capacity_remaining(self, buffered_cluster_capacity_remaining):
        """Sets the buffered_cluster_capacity_remaining of this LoadMetricInformation.

        Remaining capacity in the cluster excluding the reserved space.

        :param buffered_cluster_capacity_remaining: The buffered_cluster_capacity_remaining of this LoadMetricInformation.
        :type buffered_cluster_capacity_remaining: float
        """

        self._buffered_cluster_capacity_remaining = buffered_cluster_capacity_remaining

    @property
    def cluster_buffered_capacity(self):
        """Gets the cluster_buffered_capacity of this LoadMetricInformation.

        Remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.

        :return: The cluster_buffered_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_buffered_capacity

    @cluster_buffered_capacity.setter
    def cluster_buffered_capacity(self, cluster_buffered_capacity):
        """Sets the cluster_buffered_capacity of this LoadMetricInformation.

        Remaining capacity in the cluster excluding the reserved space. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedClusterCapacityRemaining.

        :param cluster_buffered_capacity: The cluster_buffered_capacity of this LoadMetricInformation.
        :type cluster_buffered_capacity: str
        """

        self._cluster_buffered_capacity = cluster_buffered_capacity

    @property
    def cluster_capacity(self):
        """Gets the cluster_capacity of this LoadMetricInformation.

        The total cluster capacity for a given metric

        :return: The cluster_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_capacity

    @cluster_capacity.setter
    def cluster_capacity(self, cluster_capacity):
        """Sets the cluster_capacity of this LoadMetricInformation.

        The total cluster capacity for a given metric

        :param cluster_capacity: The cluster_capacity of this LoadMetricInformation.
        :type cluster_capacity: str
        """

        self._cluster_capacity = cluster_capacity

    @property
    def cluster_capacity_remaining(self):
        """Gets the cluster_capacity_remaining of this LoadMetricInformation.

        The remaining capacity for the metric in the cluster.

        :return: The cluster_capacity_remaining of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_capacity_remaining

    @cluster_capacity_remaining.setter
    def cluster_capacity_remaining(self, cluster_capacity_remaining):
        """Sets the cluster_capacity_remaining of this LoadMetricInformation.

        The remaining capacity for the metric in the cluster.

        :param cluster_capacity_remaining: The cluster_capacity_remaining of this LoadMetricInformation.
        :type cluster_capacity_remaining: str
        """

        self._cluster_capacity_remaining = cluster_capacity_remaining

    @property
    def cluster_load(self):
        """Gets the cluster_load of this LoadMetricInformation.

        The total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentClusterLoad.

        :return: The cluster_load of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_load

    @cluster_load.setter
    def cluster_load(self, cluster_load):
        """Sets the cluster_load of this LoadMetricInformation.

        The total cluster load. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentClusterLoad.

        :param cluster_load: The cluster_load of this LoadMetricInformation.
        :type cluster_load: str
        """

        self._cluster_load = cluster_load

    @property
    def cluster_remaining_buffered_capacity(self):
        """Gets the cluster_remaining_buffered_capacity of this LoadMetricInformation.

        The remaining percentage of cluster total capacity for this metric.

        :return: The cluster_remaining_buffered_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_remaining_buffered_capacity

    @cluster_remaining_buffered_capacity.setter
    def cluster_remaining_buffered_capacity(self, cluster_remaining_buffered_capacity):
        """Sets the cluster_remaining_buffered_capacity of this LoadMetricInformation.

        The remaining percentage of cluster total capacity for this metric.

        :param cluster_remaining_buffered_capacity: The cluster_remaining_buffered_capacity of this LoadMetricInformation.
        :type cluster_remaining_buffered_capacity: str
        """

        self._cluster_remaining_buffered_capacity = cluster_remaining_buffered_capacity

    @property
    def cluster_remaining_capacity(self):
        """Gets the cluster_remaining_capacity of this LoadMetricInformation.

        The remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.

        :return: The cluster_remaining_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_remaining_capacity

    @cluster_remaining_capacity.setter
    def cluster_remaining_capacity(self, cluster_remaining_capacity):
        """Sets the cluster_remaining_capacity of this LoadMetricInformation.

        The remaining capacity for the metric in the cluster. In future releases of Service Fabric this parameter will be deprecated in favor of ClusterCapacityRemaining.

        :param cluster_remaining_capacity: The cluster_remaining_capacity of this LoadMetricInformation.
        :type cluster_remaining_capacity: str
        """

        self._cluster_remaining_capacity = cluster_remaining_capacity

    @property
    def current_cluster_load(self):
        """Gets the current_cluster_load of this LoadMetricInformation.

        The total cluster load.

        :return: The current_cluster_load of this LoadMetricInformation.
        :rtype: float
        """
        return self._current_cluster_load

    @current_cluster_load.setter
    def current_cluster_load(self, current_cluster_load):
        """Sets the current_cluster_load of this LoadMetricInformation.

        The total cluster load.

        :param current_cluster_load: The current_cluster_load of this LoadMetricInformation.
        :type current_cluster_load: float
        """

        self._current_cluster_load = current_cluster_load

    @property
    def deviation_after(self):
        """Gets the deviation_after of this LoadMetricInformation.

        The standard average deviation of the metrics after resource balancer run.

        :return: The deviation_after of this LoadMetricInformation.
        :rtype: float
        """
        return self._deviation_after

    @deviation_after.setter
    def deviation_after(self, deviation_after):
        """Sets the deviation_after of this LoadMetricInformation.

        The standard average deviation of the metrics after resource balancer run.

        :param deviation_after: The deviation_after of this LoadMetricInformation.
        :type deviation_after: float
        """

        self._deviation_after = deviation_after

    @property
    def deviation_before(self):
        """Gets the deviation_before of this LoadMetricInformation.

        The standard average deviation of the metrics before resource balancer run.

        :return: The deviation_before of this LoadMetricInformation.
        :rtype: float
        """
        return self._deviation_before

    @deviation_before.setter
    def deviation_before(self, deviation_before):
        """Sets the deviation_before of this LoadMetricInformation.

        The standard average deviation of the metrics before resource balancer run.

        :param deviation_before: The deviation_before of this LoadMetricInformation.
        :type deviation_before: float
        """

        self._deviation_before = deviation_before

    @property
    def is_balanced_after(self):
        """Gets the is_balanced_after of this LoadMetricInformation.

        Value that indicates whether the metrics is balanced or not after resource balancer run.

        :return: The is_balanced_after of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_balanced_after

    @is_balanced_after.setter
    def is_balanced_after(self, is_balanced_after):
        """Sets the is_balanced_after of this LoadMetricInformation.

        Value that indicates whether the metrics is balanced or not after resource balancer run.

        :param is_balanced_after: The is_balanced_after of this LoadMetricInformation.
        :type is_balanced_after: bool
        """

        self._is_balanced_after = is_balanced_after

    @property
    def is_balanced_before(self):
        """Gets the is_balanced_before of this LoadMetricInformation.

        Value that indicates whether the metrics is balanced or not before resource balancer run

        :return: The is_balanced_before of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_balanced_before

    @is_balanced_before.setter
    def is_balanced_before(self, is_balanced_before):
        """Sets the is_balanced_before of this LoadMetricInformation.

        Value that indicates whether the metrics is balanced or not before resource balancer run

        :param is_balanced_before: The is_balanced_before of this LoadMetricInformation.
        :type is_balanced_before: bool
        """

        self._is_balanced_before = is_balanced_before

    @property
    def is_cluster_capacity_violation(self):
        """Gets the is_cluster_capacity_violation of this LoadMetricInformation.

        Indicates that the metric is currently over capacity in the cluster.

        :return: The is_cluster_capacity_violation of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_cluster_capacity_violation

    @is_cluster_capacity_violation.setter
    def is_cluster_capacity_violation(self, is_cluster_capacity_violation):
        """Sets the is_cluster_capacity_violation of this LoadMetricInformation.

        Indicates that the metric is currently over capacity in the cluster.

        :param is_cluster_capacity_violation: The is_cluster_capacity_violation of this LoadMetricInformation.
        :type is_cluster_capacity_violation: bool
        """

        self._is_cluster_capacity_violation = is_cluster_capacity_violation

    @property
    def max_node_load_node_id(self):
        """Gets the max_node_load_node_id of this LoadMetricInformation.


        :return: The max_node_load_node_id of this LoadMetricInformation.
        :rtype: NodeId
        """
        return self._max_node_load_node_id

    @max_node_load_node_id.setter
    def max_node_load_node_id(self, max_node_load_node_id):
        """Sets the max_node_load_node_id of this LoadMetricInformation.


        :param max_node_load_node_id: The max_node_load_node_id of this LoadMetricInformation.
        :type max_node_load_node_id: NodeId
        """

        self._max_node_load_node_id = max_node_load_node_id

    @property
    def max_node_load_value(self):
        """Gets the max_node_load_value of this LoadMetricInformation.

        The maximum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MaximumNodeLoad.

        :return: The max_node_load_value of this LoadMetricInformation.
        :rtype: str
        """
        return self._max_node_load_value

    @max_node_load_value.setter
    def max_node_load_value(self, max_node_load_value):
        """Sets the max_node_load_value of this LoadMetricInformation.

        The maximum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MaximumNodeLoad.

        :param max_node_load_value: The max_node_load_value of this LoadMetricInformation.
        :type max_node_load_value: str
        """

        self._max_node_load_value = max_node_load_value

    @property
    def maximum_node_load(self):
        """Gets the maximum_node_load of this LoadMetricInformation.

        The maximum load on any node for this metric.

        :return: The maximum_node_load of this LoadMetricInformation.
        :rtype: float
        """
        return self._maximum_node_load

    @maximum_node_load.setter
    def maximum_node_load(self, maximum_node_load):
        """Sets the maximum_node_load of this LoadMetricInformation.

        The maximum load on any node for this metric.

        :param maximum_node_load: The maximum_node_load of this LoadMetricInformation.
        :type maximum_node_load: float
        """

        self._maximum_node_load = maximum_node_load

    @property
    def min_node_load_node_id(self):
        """Gets the min_node_load_node_id of this LoadMetricInformation.


        :return: The min_node_load_node_id of this LoadMetricInformation.
        :rtype: NodeId
        """
        return self._min_node_load_node_id

    @min_node_load_node_id.setter
    def min_node_load_node_id(self, min_node_load_node_id):
        """Sets the min_node_load_node_id of this LoadMetricInformation.


        :param min_node_load_node_id: The min_node_load_node_id of this LoadMetricInformation.
        :type min_node_load_node_id: NodeId
        """

        self._min_node_load_node_id = min_node_load_node_id

    @property
    def min_node_load_value(self):
        """Gets the min_node_load_value of this LoadMetricInformation.

        The minimum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MinimumNodeLoad.

        :return: The min_node_load_value of this LoadMetricInformation.
        :rtype: str
        """
        return self._min_node_load_value

    @min_node_load_value.setter
    def min_node_load_value(self, min_node_load_value):
        """Sets the min_node_load_value of this LoadMetricInformation.

        The minimum load on any node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of MinimumNodeLoad.

        :param min_node_load_value: The min_node_load_value of this LoadMetricInformation.
        :type min_node_load_value: str
        """

        self._min_node_load_value = min_node_load_value

    @property
    def minimum_node_load(self):
        """Gets the minimum_node_load of this LoadMetricInformation.

        The minimum load on any node for this metric.

        :return: The minimum_node_load of this LoadMetricInformation.
        :rtype: float
        """
        return self._minimum_node_load

    @minimum_node_load.setter
    def minimum_node_load(self, minimum_node_load):
        """Sets the minimum_node_load of this LoadMetricInformation.

        The minimum load on any node for this metric.

        :param minimum_node_load: The minimum_node_load of this LoadMetricInformation.
        :type minimum_node_load: float
        """

        self._minimum_node_load = minimum_node_load

    @property
    def name(self):
        """Gets the name of this LoadMetricInformation.

        Name of the metric for which this load information is provided.

        :return: The name of this LoadMetricInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoadMetricInformation.

        Name of the metric for which this load information is provided.

        :param name: The name of this LoadMetricInformation.
        :type name: str
        """

        self._name = name

    @property
    def node_buffer_percentage(self):
        """Gets the node_buffer_percentage of this LoadMetricInformation.

        The reserved percentage of total node capacity for this metric.

        :return: The node_buffer_percentage of this LoadMetricInformation.
        :rtype: float
        """
        return self._node_buffer_percentage

    @node_buffer_percentage.setter
    def node_buffer_percentage(self, node_buffer_percentage):
        """Sets the node_buffer_percentage of this LoadMetricInformation.

        The reserved percentage of total node capacity for this metric.

        :param node_buffer_percentage: The node_buffer_percentage of this LoadMetricInformation.
        :type node_buffer_percentage: float
        """

        self._node_buffer_percentage = node_buffer_percentage

    @property
    def planned_load_removal(self):
        """Gets the planned_load_removal of this LoadMetricInformation.

        This value represents the load of the replicas that are planned to be removed in the future within the cluster. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.

        :return: The planned_load_removal of this LoadMetricInformation.
        :rtype: float
        """
        return self._planned_load_removal

    @planned_load_removal.setter
    def planned_load_removal(self, planned_load_removal):
        """Sets the planned_load_removal of this LoadMetricInformation.

        This value represents the load of the replicas that are planned to be removed in the future within the cluster. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.

        :param planned_load_removal: The planned_load_removal of this LoadMetricInformation.
        :type planned_load_removal: float
        """

        self._planned_load_removal = planned_load_removal
