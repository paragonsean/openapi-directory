# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_configuration_info import BackupConfigurationInfo
from openapi_server.models.backup_entity_kind import BackupEntityKind
from openapi_server.models.backup_policy_scope import BackupPolicyScope
from openapi_server.models.backup_suspension_info import BackupSuspensionInfo
from openapi_server import util


class PartitionBackupConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_id: str=None, service_name: str=None, kind: BackupEntityKind=None, policy_inherited_from: BackupPolicyScope=None, policy_name: str=None, suspension_info: BackupSuspensionInfo=None):
        """PartitionBackupConfigurationInfo - a model defined in OpenAPI

        :param partition_id: The partition_id of this PartitionBackupConfigurationInfo.
        :param service_name: The service_name of this PartitionBackupConfigurationInfo.
        :param kind: The kind of this PartitionBackupConfigurationInfo.
        :param policy_inherited_from: The policy_inherited_from of this PartitionBackupConfigurationInfo.
        :param policy_name: The policy_name of this PartitionBackupConfigurationInfo.
        :param suspension_info: The suspension_info of this PartitionBackupConfigurationInfo.
        """
        self.openapi_types = {
            'partition_id': str,
            'service_name': str,
            'kind': BackupEntityKind,
            'policy_inherited_from': BackupPolicyScope,
            'policy_name': str,
            'suspension_info': BackupSuspensionInfo
        }

        self.attribute_map = {
            'partition_id': 'PartitionId',
            'service_name': 'ServiceName',
            'kind': 'Kind',
            'policy_inherited_from': 'PolicyInheritedFrom',
            'policy_name': 'PolicyName',
            'suspension_info': 'SuspensionInfo'
        }

        self._partition_id = partition_id
        self._service_name = service_name
        self._kind = kind
        self._policy_inherited_from = policy_inherited_from
        self._policy_name = policy_name
        self._suspension_info = suspension_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionBackupConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionBackupConfigurationInfo of this PartitionBackupConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionBackupConfigurationInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionBackupConfigurationInfo.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionBackupConfigurationInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionBackupConfigurationInfo.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def service_name(self):
        """Gets the service_name of this PartitionBackupConfigurationInfo.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this PartitionBackupConfigurationInfo.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this PartitionBackupConfigurationInfo.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this PartitionBackupConfigurationInfo.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def kind(self):
        """Gets the kind of this PartitionBackupConfigurationInfo.


        :return: The kind of this PartitionBackupConfigurationInfo.
        :rtype: BackupEntityKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PartitionBackupConfigurationInfo.


        :param kind: The kind of this PartitionBackupConfigurationInfo.
        :type kind: BackupEntityKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def policy_inherited_from(self):
        """Gets the policy_inherited_from of this PartitionBackupConfigurationInfo.


        :return: The policy_inherited_from of this PartitionBackupConfigurationInfo.
        :rtype: BackupPolicyScope
        """
        return self._policy_inherited_from

    @policy_inherited_from.setter
    def policy_inherited_from(self, policy_inherited_from):
        """Sets the policy_inherited_from of this PartitionBackupConfigurationInfo.


        :param policy_inherited_from: The policy_inherited_from of this PartitionBackupConfigurationInfo.
        :type policy_inherited_from: BackupPolicyScope
        """

        self._policy_inherited_from = policy_inherited_from

    @property
    def policy_name(self):
        """Gets the policy_name of this PartitionBackupConfigurationInfo.

        The name of the backup policy which is applicable to this Service Fabric application or service or partition.

        :return: The policy_name of this PartitionBackupConfigurationInfo.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PartitionBackupConfigurationInfo.

        The name of the backup policy which is applicable to this Service Fabric application or service or partition.

        :param policy_name: The policy_name of this PartitionBackupConfigurationInfo.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def suspension_info(self):
        """Gets the suspension_info of this PartitionBackupConfigurationInfo.


        :return: The suspension_info of this PartitionBackupConfigurationInfo.
        :rtype: BackupSuspensionInfo
        """
        return self._suspension_info

    @suspension_info.setter
    def suspension_info(self, suspension_info):
        """Sets the suspension_info of this PartitionBackupConfigurationInfo.


        :param suspension_info: The suspension_info of this PartitionBackupConfigurationInfo.
        :type suspension_info: BackupSuspensionInfo
        """

        self._suspension_info = suspension_info
