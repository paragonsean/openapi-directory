# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpgradeOrchestrationServiceStateSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_code_version: str=None, current_manifest_version: str=None, pending_upgrade_type: str=None, target_code_version: str=None, target_manifest_version: str=None):
        """UpgradeOrchestrationServiceStateSummary - a model defined in OpenAPI

        :param current_code_version: The current_code_version of this UpgradeOrchestrationServiceStateSummary.
        :param current_manifest_version: The current_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        :param pending_upgrade_type: The pending_upgrade_type of this UpgradeOrchestrationServiceStateSummary.
        :param target_code_version: The target_code_version of this UpgradeOrchestrationServiceStateSummary.
        :param target_manifest_version: The target_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        """
        self.openapi_types = {
            'current_code_version': str,
            'current_manifest_version': str,
            'pending_upgrade_type': str,
            'target_code_version': str,
            'target_manifest_version': str
        }

        self.attribute_map = {
            'current_code_version': 'CurrentCodeVersion',
            'current_manifest_version': 'CurrentManifestVersion',
            'pending_upgrade_type': 'PendingUpgradeType',
            'target_code_version': 'TargetCodeVersion',
            'target_manifest_version': 'TargetManifestVersion'
        }

        self._current_code_version = current_code_version
        self._current_manifest_version = current_manifest_version
        self._pending_upgrade_type = pending_upgrade_type
        self._target_code_version = target_code_version
        self._target_manifest_version = target_manifest_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeOrchestrationServiceStateSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeOrchestrationServiceStateSummary of this UpgradeOrchestrationServiceStateSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_code_version(self):
        """Gets the current_code_version of this UpgradeOrchestrationServiceStateSummary.

        The current code version of the cluster.

        :return: The current_code_version of this UpgradeOrchestrationServiceStateSummary.
        :rtype: str
        """
        return self._current_code_version

    @current_code_version.setter
    def current_code_version(self, current_code_version):
        """Sets the current_code_version of this UpgradeOrchestrationServiceStateSummary.

        The current code version of the cluster.

        :param current_code_version: The current_code_version of this UpgradeOrchestrationServiceStateSummary.
        :type current_code_version: str
        """

        self._current_code_version = current_code_version

    @property
    def current_manifest_version(self):
        """Gets the current_manifest_version of this UpgradeOrchestrationServiceStateSummary.

        The current manifest version of the cluster.

        :return: The current_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        :rtype: str
        """
        return self._current_manifest_version

    @current_manifest_version.setter
    def current_manifest_version(self, current_manifest_version):
        """Sets the current_manifest_version of this UpgradeOrchestrationServiceStateSummary.

        The current manifest version of the cluster.

        :param current_manifest_version: The current_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        :type current_manifest_version: str
        """

        self._current_manifest_version = current_manifest_version

    @property
    def pending_upgrade_type(self):
        """Gets the pending_upgrade_type of this UpgradeOrchestrationServiceStateSummary.

        The type of the pending upgrade of the cluster.

        :return: The pending_upgrade_type of this UpgradeOrchestrationServiceStateSummary.
        :rtype: str
        """
        return self._pending_upgrade_type

    @pending_upgrade_type.setter
    def pending_upgrade_type(self, pending_upgrade_type):
        """Sets the pending_upgrade_type of this UpgradeOrchestrationServiceStateSummary.

        The type of the pending upgrade of the cluster.

        :param pending_upgrade_type: The pending_upgrade_type of this UpgradeOrchestrationServiceStateSummary.
        :type pending_upgrade_type: str
        """

        self._pending_upgrade_type = pending_upgrade_type

    @property
    def target_code_version(self):
        """Gets the target_code_version of this UpgradeOrchestrationServiceStateSummary.

        The target code version of  the cluster.

        :return: The target_code_version of this UpgradeOrchestrationServiceStateSummary.
        :rtype: str
        """
        return self._target_code_version

    @target_code_version.setter
    def target_code_version(self, target_code_version):
        """Sets the target_code_version of this UpgradeOrchestrationServiceStateSummary.

        The target code version of  the cluster.

        :param target_code_version: The target_code_version of this UpgradeOrchestrationServiceStateSummary.
        :type target_code_version: str
        """

        self._target_code_version = target_code_version

    @property
    def target_manifest_version(self):
        """Gets the target_manifest_version of this UpgradeOrchestrationServiceStateSummary.

        The target manifest version of the cluster.

        :return: The target_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        :rtype: str
        """
        return self._target_manifest_version

    @target_manifest_version.setter
    def target_manifest_version(self, target_manifest_version):
        """Sets the target_manifest_version of this UpgradeOrchestrationServiceStateSummary.

        The target manifest version of the cluster.

        :param target_manifest_version: The target_manifest_version of this UpgradeOrchestrationServiceStateSummary.
        :type target_manifest_version: str
        """

        self._target_manifest_version = target_manifest_version
