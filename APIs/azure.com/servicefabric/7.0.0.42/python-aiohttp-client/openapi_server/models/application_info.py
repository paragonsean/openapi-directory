# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_definition_kind import ApplicationDefinitionKind
from openapi_server.models.application_parameter import ApplicationParameter
from openapi_server.models.application_status import ApplicationStatus
from openapi_server.models.health_state import HealthState
from openapi_server import util


class ApplicationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_definition_kind: ApplicationDefinitionKind=None, health_state: HealthState=None, id: str=None, name: str=None, parameters: List[ApplicationParameter]=None, status: ApplicationStatus=None, type_name: str=None, type_version: str=None):
        """ApplicationInfo - a model defined in OpenAPI

        :param application_definition_kind: The application_definition_kind of this ApplicationInfo.
        :param health_state: The health_state of this ApplicationInfo.
        :param id: The id of this ApplicationInfo.
        :param name: The name of this ApplicationInfo.
        :param parameters: The parameters of this ApplicationInfo.
        :param status: The status of this ApplicationInfo.
        :param type_name: The type_name of this ApplicationInfo.
        :param type_version: The type_version of this ApplicationInfo.
        """
        self.openapi_types = {
            'application_definition_kind': ApplicationDefinitionKind,
            'health_state': HealthState,
            'id': str,
            'name': str,
            'parameters': List[ApplicationParameter],
            'status': ApplicationStatus,
            'type_name': str,
            'type_version': str
        }

        self.attribute_map = {
            'application_definition_kind': 'ApplicationDefinitionKind',
            'health_state': 'HealthState',
            'id': 'Id',
            'name': 'Name',
            'parameters': 'Parameters',
            'status': 'Status',
            'type_name': 'TypeName',
            'type_version': 'TypeVersion'
        }

        self._application_definition_kind = application_definition_kind
        self._health_state = health_state
        self._id = id
        self._name = name
        self._parameters = parameters
        self._status = status
        self._type_name = type_name
        self._type_version = type_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInfo of this ApplicationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_definition_kind(self):
        """Gets the application_definition_kind of this ApplicationInfo.


        :return: The application_definition_kind of this ApplicationInfo.
        :rtype: ApplicationDefinitionKind
        """
        return self._application_definition_kind

    @application_definition_kind.setter
    def application_definition_kind(self, application_definition_kind):
        """Sets the application_definition_kind of this ApplicationInfo.


        :param application_definition_kind: The application_definition_kind of this ApplicationInfo.
        :type application_definition_kind: ApplicationDefinitionKind
        """

        self._application_definition_kind = application_definition_kind

    @property
    def health_state(self):
        """Gets the health_state of this ApplicationInfo.


        :return: The health_state of this ApplicationInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ApplicationInfo.


        :param health_state: The health_state of this ApplicationInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this ApplicationInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The id of this ApplicationInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param id: The id of this ApplicationInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApplicationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The name of this ApplicationInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :param name: The name of this ApplicationInfo.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationInfo.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :return: The parameters of this ApplicationInfo.
        :rtype: List[ApplicationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationInfo.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :param parameters: The parameters of this ApplicationInfo.
        :type parameters: List[ApplicationParameter]
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this ApplicationInfo.


        :return: The status of this ApplicationInfo.
        :rtype: ApplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationInfo.


        :param status: The status of this ApplicationInfo.
        :type status: ApplicationStatus
        """

        self._status = status

    @property
    def type_name(self):
        """Gets the type_name of this ApplicationInfo.

        The application type name as defined in the application manifest.

        :return: The type_name of this ApplicationInfo.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ApplicationInfo.

        The application type name as defined in the application manifest.

        :param type_name: The type_name of this ApplicationInfo.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def type_version(self):
        """Gets the type_version of this ApplicationInfo.

        The version of the application type as defined in the application manifest.

        :return: The type_version of this ApplicationInfo.
        :rtype: str
        """
        return self._type_version

    @type_version.setter
    def type_version(self, type_version):
        """Sets the type_version of this ApplicationInfo.

        The version of the application type as defined in the application manifest.

        :param type_version: The type_version of this ApplicationInfo.
        :type type_version: str
        """

        self._type_version = type_version
