# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigParameterOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_name: str=None, parameter_value: str=None, persist_across_upgrade: bool=None, section_name: str=None, timeout: str=None):
        """ConfigParameterOverride - a model defined in OpenAPI

        :param parameter_name: The parameter_name of this ConfigParameterOverride.
        :param parameter_value: The parameter_value of this ConfigParameterOverride.
        :param persist_across_upgrade: The persist_across_upgrade of this ConfigParameterOverride.
        :param section_name: The section_name of this ConfigParameterOverride.
        :param timeout: The timeout of this ConfigParameterOverride.
        """
        self.openapi_types = {
            'parameter_name': str,
            'parameter_value': str,
            'persist_across_upgrade': bool,
            'section_name': str,
            'timeout': str
        }

        self.attribute_map = {
            'parameter_name': 'ParameterName',
            'parameter_value': 'ParameterValue',
            'persist_across_upgrade': 'PersistAcrossUpgrade',
            'section_name': 'SectionName',
            'timeout': 'Timeout'
        }

        self._parameter_name = parameter_name
        self._parameter_value = parameter_value
        self._persist_across_upgrade = persist_across_upgrade
        self._section_name = section_name
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigParameterOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigParameterOverride of this ConfigParameterOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_name(self):
        """Gets the parameter_name of this ConfigParameterOverride.

        Name of the parameter that has been overridden.

        :return: The parameter_name of this ConfigParameterOverride.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this ConfigParameterOverride.

        Name of the parameter that has been overridden.

        :param parameter_name: The parameter_name of this ConfigParameterOverride.
        :type parameter_name: str
        """
        if parameter_name is None:
            raise ValueError("Invalid value for `parameter_name`, must not be `None`")

        self._parameter_name = parameter_name

    @property
    def parameter_value(self):
        """Gets the parameter_value of this ConfigParameterOverride.

        Value of the overridden parameter.

        :return: The parameter_value of this ConfigParameterOverride.
        :rtype: str
        """
        return self._parameter_value

    @parameter_value.setter
    def parameter_value(self, parameter_value):
        """Sets the parameter_value of this ConfigParameterOverride.

        Value of the overridden parameter.

        :param parameter_value: The parameter_value of this ConfigParameterOverride.
        :type parameter_value: str
        """
        if parameter_value is None:
            raise ValueError("Invalid value for `parameter_value`, must not be `None`")

        self._parameter_value = parameter_value

    @property
    def persist_across_upgrade(self):
        """Gets the persist_across_upgrade of this ConfigParameterOverride.

        A value that indicates whether config override will be removed on upgrade or will still be considered as valid.

        :return: The persist_across_upgrade of this ConfigParameterOverride.
        :rtype: bool
        """
        return self._persist_across_upgrade

    @persist_across_upgrade.setter
    def persist_across_upgrade(self, persist_across_upgrade):
        """Sets the persist_across_upgrade of this ConfigParameterOverride.

        A value that indicates whether config override will be removed on upgrade or will still be considered as valid.

        :param persist_across_upgrade: The persist_across_upgrade of this ConfigParameterOverride.
        :type persist_across_upgrade: bool
        """

        self._persist_across_upgrade = persist_across_upgrade

    @property
    def section_name(self):
        """Gets the section_name of this ConfigParameterOverride.

        Name of the section for the parameter override.

        :return: The section_name of this ConfigParameterOverride.
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this ConfigParameterOverride.

        Name of the section for the parameter override.

        :param section_name: The section_name of this ConfigParameterOverride.
        :type section_name: str
        """
        if section_name is None:
            raise ValueError("Invalid value for `section_name`, must not be `None`")

        self._section_name = section_name

    @property
    def timeout(self):
        """Gets the timeout of this ConfigParameterOverride.

        The duration until config override is considered as valid.

        :return: The timeout of this ConfigParameterOverride.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConfigParameterOverride.

        The duration until config override is considered as valid.

        :param timeout: The timeout of this ConfigParameterOverride.
        :type timeout: str
        """

        self._timeout = timeout
