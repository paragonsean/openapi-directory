# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableBackupDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_policy_name: str=None):
        """EnableBackupDescription - a model defined in OpenAPI

        :param backup_policy_name: The backup_policy_name of this EnableBackupDescription.
        """
        self.openapi_types = {
            'backup_policy_name': str
        }

        self.attribute_map = {
            'backup_policy_name': 'BackupPolicyName'
        }

        self._backup_policy_name = backup_policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableBackupDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableBackupDescription of this EnableBackupDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_policy_name(self):
        """Gets the backup_policy_name of this EnableBackupDescription.

        Name of the backup policy to be used for enabling periodic backups.

        :return: The backup_policy_name of this EnableBackupDescription.
        :rtype: str
        """
        return self._backup_policy_name

    @backup_policy_name.setter
    def backup_policy_name(self, backup_policy_name):
        """Sets the backup_policy_name of this EnableBackupDescription.

        Name of the backup policy to be used for enabling periodic backups.

        :param backup_policy_name: The backup_policy_name of this EnableBackupDescription.
        :type backup_policy_name: str
        """
        if backup_policy_name is None:
            raise ValueError("Invalid value for `backup_policy_name`, must not be `None`")

        self._backup_policy_name = backup_policy_name
