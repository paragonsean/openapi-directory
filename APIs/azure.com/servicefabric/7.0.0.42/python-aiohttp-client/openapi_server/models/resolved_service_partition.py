# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_information import PartitionInformation
from openapi_server.models.resolved_service_endpoint import ResolvedServiceEndpoint
from openapi_server import util


class ResolvedServicePartition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoints: List[ResolvedServiceEndpoint]=None, name: str=None, partition_information: PartitionInformation=None, version: str=None):
        """ResolvedServicePartition - a model defined in OpenAPI

        :param endpoints: The endpoints of this ResolvedServicePartition.
        :param name: The name of this ResolvedServicePartition.
        :param partition_information: The partition_information of this ResolvedServicePartition.
        :param version: The version of this ResolvedServicePartition.
        """
        self.openapi_types = {
            'endpoints': List[ResolvedServiceEndpoint],
            'name': str,
            'partition_information': PartitionInformation,
            'version': str
        }

        self.attribute_map = {
            'endpoints': 'Endpoints',
            'name': 'Name',
            'partition_information': 'PartitionInformation',
            'version': 'Version'
        }

        self._endpoints = endpoints
        self._name = name
        self._partition_information = partition_information
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolvedServicePartition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolvedServicePartition of this ResolvedServicePartition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoints(self):
        """Gets the endpoints of this ResolvedServicePartition.

        List of resolved service endpoints of a service partition.

        :return: The endpoints of this ResolvedServicePartition.
        :rtype: List[ResolvedServiceEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ResolvedServicePartition.

        List of resolved service endpoints of a service partition.

        :param endpoints: The endpoints of this ResolvedServicePartition.
        :type endpoints: List[ResolvedServiceEndpoint]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")

        self._endpoints = endpoints

    @property
    def name(self):
        """Gets the name of this ResolvedServicePartition.

        The full name of the service with 'fabric:' URI scheme.

        :return: The name of this ResolvedServicePartition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResolvedServicePartition.

        The full name of the service with 'fabric:' URI scheme.

        :param name: The name of this ResolvedServicePartition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def partition_information(self):
        """Gets the partition_information of this ResolvedServicePartition.


        :return: The partition_information of this ResolvedServicePartition.
        :rtype: PartitionInformation
        """
        return self._partition_information

    @partition_information.setter
    def partition_information(self, partition_information):
        """Sets the partition_information of this ResolvedServicePartition.


        :param partition_information: The partition_information of this ResolvedServicePartition.
        :type partition_information: PartitionInformation
        """
        if partition_information is None:
            raise ValueError("Invalid value for `partition_information`, must not be `None`")

        self._partition_information = partition_information

    @property
    def version(self):
        """Gets the version of this ResolvedServicePartition.

        The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter.

        :return: The version of this ResolvedServicePartition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ResolvedServicePartition.

        The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter.

        :param version: The version of this ResolvedServicePartition.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
