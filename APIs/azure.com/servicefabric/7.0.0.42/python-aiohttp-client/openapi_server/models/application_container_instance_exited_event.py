# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationContainerInstanceExitedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_package_name: str=None, container_name: str=None, entry_point_type: str=None, exit_code: int=None, host_id: str=None, image_name: str=None, is_exclusive: bool=None, service_name: str=None, service_package_activation_id: str=None, service_package_name: str=None, start_time: datetime=None, unexpected_termination: bool=None, application_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ApplicationContainerInstanceExitedEvent - a model defined in OpenAPI

        :param code_package_name: The code_package_name of this ApplicationContainerInstanceExitedEvent.
        :param container_name: The container_name of this ApplicationContainerInstanceExitedEvent.
        :param entry_point_type: The entry_point_type of this ApplicationContainerInstanceExitedEvent.
        :param exit_code: The exit_code of this ApplicationContainerInstanceExitedEvent.
        :param host_id: The host_id of this ApplicationContainerInstanceExitedEvent.
        :param image_name: The image_name of this ApplicationContainerInstanceExitedEvent.
        :param is_exclusive: The is_exclusive of this ApplicationContainerInstanceExitedEvent.
        :param service_name: The service_name of this ApplicationContainerInstanceExitedEvent.
        :param service_package_activation_id: The service_package_activation_id of this ApplicationContainerInstanceExitedEvent.
        :param service_package_name: The service_package_name of this ApplicationContainerInstanceExitedEvent.
        :param start_time: The start_time of this ApplicationContainerInstanceExitedEvent.
        :param unexpected_termination: The unexpected_termination of this ApplicationContainerInstanceExitedEvent.
        :param application_id: The application_id of this ApplicationContainerInstanceExitedEvent.
        :param category: The category of this ApplicationContainerInstanceExitedEvent.
        :param event_instance_id: The event_instance_id of this ApplicationContainerInstanceExitedEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationContainerInstanceExitedEvent.
        :param kind: The kind of this ApplicationContainerInstanceExitedEvent.
        :param time_stamp: The time_stamp of this ApplicationContainerInstanceExitedEvent.
        """
        self.openapi_types = {
            'code_package_name': str,
            'container_name': str,
            'entry_point_type': str,
            'exit_code': int,
            'host_id': str,
            'image_name': str,
            'is_exclusive': bool,
            'service_name': str,
            'service_package_activation_id': str,
            'service_package_name': str,
            'start_time': datetime,
            'unexpected_termination': bool,
            'application_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'code_package_name': 'CodePackageName',
            'container_name': 'ContainerName',
            'entry_point_type': 'EntryPointType',
            'exit_code': 'ExitCode',
            'host_id': 'HostId',
            'image_name': 'ImageName',
            'is_exclusive': 'IsExclusive',
            'service_name': 'ServiceName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_package_name': 'ServicePackageName',
            'start_time': 'StartTime',
            'unexpected_termination': 'UnexpectedTermination',
            'application_id': 'ApplicationId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._code_package_name = code_package_name
        self._container_name = container_name
        self._entry_point_type = entry_point_type
        self._exit_code = exit_code
        self._host_id = host_id
        self._image_name = image_name
        self._is_exclusive = is_exclusive
        self._service_name = service_name
        self._service_package_activation_id = service_package_activation_id
        self._service_package_name = service_package_name
        self._start_time = start_time
        self._unexpected_termination = unexpected_termination
        self._application_id = application_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationContainerInstanceExitedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationContainerInstanceExitedEvent of this ApplicationContainerInstanceExitedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_package_name(self):
        """Gets the code_package_name of this ApplicationContainerInstanceExitedEvent.

        Name of Code package.

        :return: The code_package_name of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this ApplicationContainerInstanceExitedEvent.

        Name of Code package.

        :param code_package_name: The code_package_name of this ApplicationContainerInstanceExitedEvent.
        :type code_package_name: str
        """
        if code_package_name is None:
            raise ValueError("Invalid value for `code_package_name`, must not be `None`")

        self._code_package_name = code_package_name

    @property
    def container_name(self):
        """Gets the container_name of this ApplicationContainerInstanceExitedEvent.

        Name of Container.

        :return: The container_name of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ApplicationContainerInstanceExitedEvent.

        Name of Container.

        :param container_name: The container_name of this ApplicationContainerInstanceExitedEvent.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def entry_point_type(self):
        """Gets the entry_point_type of this ApplicationContainerInstanceExitedEvent.

        Type of EntryPoint.

        :return: The entry_point_type of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._entry_point_type

    @entry_point_type.setter
    def entry_point_type(self, entry_point_type):
        """Sets the entry_point_type of this ApplicationContainerInstanceExitedEvent.

        Type of EntryPoint.

        :param entry_point_type: The entry_point_type of this ApplicationContainerInstanceExitedEvent.
        :type entry_point_type: str
        """
        if entry_point_type is None:
            raise ValueError("Invalid value for `entry_point_type`, must not be `None`")

        self._entry_point_type = entry_point_type

    @property
    def exit_code(self):
        """Gets the exit_code of this ApplicationContainerInstanceExitedEvent.

        Exit code of process.

        :return: The exit_code of this ApplicationContainerInstanceExitedEvent.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ApplicationContainerInstanceExitedEvent.

        Exit code of process.

        :param exit_code: The exit_code of this ApplicationContainerInstanceExitedEvent.
        :type exit_code: int
        """
        if exit_code is None:
            raise ValueError("Invalid value for `exit_code`, must not be `None`")

        self._exit_code = exit_code

    @property
    def host_id(self):
        """Gets the host_id of this ApplicationContainerInstanceExitedEvent.

        Host Id.

        :return: The host_id of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ApplicationContainerInstanceExitedEvent.

        Host Id.

        :param host_id: The host_id of this ApplicationContainerInstanceExitedEvent.
        :type host_id: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")

        self._host_id = host_id

    @property
    def image_name(self):
        """Gets the image_name of this ApplicationContainerInstanceExitedEvent.

        Name of Container image.

        :return: The image_name of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ApplicationContainerInstanceExitedEvent.

        Name of Container image.

        :param image_name: The image_name of this ApplicationContainerInstanceExitedEvent.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def is_exclusive(self):
        """Gets the is_exclusive of this ApplicationContainerInstanceExitedEvent.

        Indicates IsExclusive flag.

        :return: The is_exclusive of this ApplicationContainerInstanceExitedEvent.
        :rtype: bool
        """
        return self._is_exclusive

    @is_exclusive.setter
    def is_exclusive(self, is_exclusive):
        """Sets the is_exclusive of this ApplicationContainerInstanceExitedEvent.

        Indicates IsExclusive flag.

        :param is_exclusive: The is_exclusive of this ApplicationContainerInstanceExitedEvent.
        :type is_exclusive: bool
        """
        if is_exclusive is None:
            raise ValueError("Invalid value for `is_exclusive`, must not be `None`")

        self._is_exclusive = is_exclusive

    @property
    def service_name(self):
        """Gets the service_name of this ApplicationContainerInstanceExitedEvent.

        Name of Service.

        :return: The service_name of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ApplicationContainerInstanceExitedEvent.

        Name of Service.

        :param service_name: The service_name of this ApplicationContainerInstanceExitedEvent.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this ApplicationContainerInstanceExitedEvent.

        Activation Id of Service package.

        :return: The service_package_activation_id of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this ApplicationContainerInstanceExitedEvent.

        Activation Id of Service package.

        :param service_package_activation_id: The service_package_activation_id of this ApplicationContainerInstanceExitedEvent.
        :type service_package_activation_id: str
        """
        if service_package_activation_id is None:
            raise ValueError("Invalid value for `service_package_activation_id`, must not be `None`")

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_package_name(self):
        """Gets the service_package_name of this ApplicationContainerInstanceExitedEvent.

        Name of Service package.

        :return: The service_package_name of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._service_package_name

    @service_package_name.setter
    def service_package_name(self, service_package_name):
        """Sets the service_package_name of this ApplicationContainerInstanceExitedEvent.

        Name of Service package.

        :param service_package_name: The service_package_name of this ApplicationContainerInstanceExitedEvent.
        :type service_package_name: str
        """
        if service_package_name is None:
            raise ValueError("Invalid value for `service_package_name`, must not be `None`")

        self._service_package_name = service_package_name

    @property
    def start_time(self):
        """Gets the start_time of this ApplicationContainerInstanceExitedEvent.

        Start time of process.

        :return: The start_time of this ApplicationContainerInstanceExitedEvent.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ApplicationContainerInstanceExitedEvent.

        Start time of process.

        :param start_time: The start_time of this ApplicationContainerInstanceExitedEvent.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def unexpected_termination(self):
        """Gets the unexpected_termination of this ApplicationContainerInstanceExitedEvent.

        Indicates if termination is unexpected.

        :return: The unexpected_termination of this ApplicationContainerInstanceExitedEvent.
        :rtype: bool
        """
        return self._unexpected_termination

    @unexpected_termination.setter
    def unexpected_termination(self, unexpected_termination):
        """Sets the unexpected_termination of this ApplicationContainerInstanceExitedEvent.

        Indicates if termination is unexpected.

        :param unexpected_termination: The unexpected_termination of this ApplicationContainerInstanceExitedEvent.
        :type unexpected_termination: bool
        """
        if unexpected_termination is None:
            raise ValueError("Invalid value for `unexpected_termination`, must not be `None`")

        self._unexpected_termination = unexpected_termination

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationContainerInstanceExitedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationContainerInstanceExitedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationContainerInstanceExitedEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def category(self):
        """Gets the category of this ApplicationContainerInstanceExitedEvent.

        The category of event.

        :return: The category of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApplicationContainerInstanceExitedEvent.

        The category of event.

        :param category: The category of this ApplicationContainerInstanceExitedEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationContainerInstanceExitedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationContainerInstanceExitedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationContainerInstanceExitedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationContainerInstanceExitedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationContainerInstanceExitedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationContainerInstanceExitedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationContainerInstanceExitedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationContainerInstanceExitedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationContainerInstanceExitedEvent.


        :return: The kind of this ApplicationContainerInstanceExitedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationContainerInstanceExitedEvent.


        :param kind: The kind of this ApplicationContainerInstanceExitedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationContainerInstanceExitedEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationContainerInstanceExitedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationContainerInstanceExitedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationContainerInstanceExitedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
