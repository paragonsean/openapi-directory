# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceTypeHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_percent_unhealthy_partitions_per_service: int=None, max_percent_unhealthy_replicas_per_partition: int=None, max_percent_unhealthy_services: int=None):
        """ServiceTypeHealthPolicy - a model defined in OpenAPI

        :param max_percent_unhealthy_partitions_per_service: The max_percent_unhealthy_partitions_per_service of this ServiceTypeHealthPolicy.
        :param max_percent_unhealthy_replicas_per_partition: The max_percent_unhealthy_replicas_per_partition of this ServiceTypeHealthPolicy.
        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ServiceTypeHealthPolicy.
        """
        self.openapi_types = {
            'max_percent_unhealthy_partitions_per_service': int,
            'max_percent_unhealthy_replicas_per_partition': int,
            'max_percent_unhealthy_services': int
        }

        self.attribute_map = {
            'max_percent_unhealthy_partitions_per_service': 'MaxPercentUnhealthyPartitionsPerService',
            'max_percent_unhealthy_replicas_per_partition': 'MaxPercentUnhealthyReplicasPerPartition',
            'max_percent_unhealthy_services': 'MaxPercentUnhealthyServices'
        }

        self._max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service
        self._max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition
        self._max_percent_unhealthy_services = max_percent_unhealthy_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceTypeHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceTypeHealthPolicy of this ServiceTypeHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_percent_unhealthy_partitions_per_service(self):
        """Gets the max_percent_unhealthy_partitions_per_service of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100  The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error. If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service. The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.

        :return: The max_percent_unhealthy_partitions_per_service of this ServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_partitions_per_service

    @max_percent_unhealthy_partitions_per_service.setter
    def max_percent_unhealthy_partitions_per_service(self, max_percent_unhealthy_partitions_per_service):
        """Sets the max_percent_unhealthy_partitions_per_service of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100  The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error. If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service. The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.

        :param max_percent_unhealthy_partitions_per_service: The max_percent_unhealthy_partitions_per_service of this ServiceTypeHealthPolicy.
        :type max_percent_unhealthy_partitions_per_service: int
        """

        self._max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service

    @property
    def max_percent_unhealthy_replicas_per_partition(self):
        """Gets the max_percent_unhealthy_replicas_per_partition of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error. If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition. The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.

        :return: The max_percent_unhealthy_replicas_per_partition of this ServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_replicas_per_partition

    @max_percent_unhealthy_replicas_per_partition.setter
    def max_percent_unhealthy_replicas_per_partition(self, max_percent_unhealthy_replicas_per_partition):
        """Sets the max_percent_unhealthy_replicas_per_partition of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error. If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition. The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.

        :param max_percent_unhealthy_replicas_per_partition: The max_percent_unhealthy_replicas_per_partition of this ServiceTypeHealthPolicy.
        :type max_percent_unhealthy_replicas_per_partition: int
        """

        self._max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition

    @property
    def max_percent_unhealthy_services(self):
        """Gets the max_percent_unhealthy_services of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error. If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type. The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.

        :return: The max_percent_unhealthy_services of this ServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_services

    @max_percent_unhealthy_services.setter
    def max_percent_unhealthy_services(self, max_percent_unhealthy_services):
        """Sets the max_percent_unhealthy_services of this ServiceTypeHealthPolicy.

        The maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error. If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type. The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.

        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ServiceTypeHealthPolicy.
        :type max_percent_unhealthy_services: int
        """

        self._max_percent_unhealthy_services = max_percent_unhealthy_services
