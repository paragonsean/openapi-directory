# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_action import FailureAction
from openapi_server.models.upgrade_mode import UpgradeMode
from openapi_server import util


class RollingUpgradeUpdateDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_action: FailureAction=None, force_restart: bool=False, health_check_retry_timeout_in_milliseconds: str='PT0H10M0S', health_check_stable_duration_in_milliseconds: str='PT0H2M0S', health_check_wait_duration_in_milliseconds: str='0', instance_close_delay_duration_in_seconds: int=None, replica_set_check_timeout_in_milliseconds: int=None, rolling_upgrade_mode: UpgradeMode=UpgradeMode.UNMONITOREDAUTO, upgrade_domain_timeout_in_milliseconds: str='P10675199DT02H48M05.4775807S', upgrade_timeout_in_milliseconds: str='P10675199DT02H48M05.4775807S'):
        """RollingUpgradeUpdateDescription - a model defined in OpenAPI

        :param failure_action: The failure_action of this RollingUpgradeUpdateDescription.
        :param force_restart: The force_restart of this RollingUpgradeUpdateDescription.
        :param health_check_retry_timeout_in_milliseconds: The health_check_retry_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :param health_check_stable_duration_in_milliseconds: The health_check_stable_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :param health_check_wait_duration_in_milliseconds: The health_check_wait_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :param instance_close_delay_duration_in_seconds: The instance_close_delay_duration_in_seconds of this RollingUpgradeUpdateDescription.
        :param replica_set_check_timeout_in_milliseconds: The replica_set_check_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this RollingUpgradeUpdateDescription.
        :param upgrade_domain_timeout_in_milliseconds: The upgrade_domain_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :param upgrade_timeout_in_milliseconds: The upgrade_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        """
        self.openapi_types = {
            'failure_action': FailureAction,
            'force_restart': bool,
            'health_check_retry_timeout_in_milliseconds': str,
            'health_check_stable_duration_in_milliseconds': str,
            'health_check_wait_duration_in_milliseconds': str,
            'instance_close_delay_duration_in_seconds': int,
            'replica_set_check_timeout_in_milliseconds': int,
            'rolling_upgrade_mode': UpgradeMode,
            'upgrade_domain_timeout_in_milliseconds': str,
            'upgrade_timeout_in_milliseconds': str
        }

        self.attribute_map = {
            'failure_action': 'FailureAction',
            'force_restart': 'ForceRestart',
            'health_check_retry_timeout_in_milliseconds': 'HealthCheckRetryTimeoutInMilliseconds',
            'health_check_stable_duration_in_milliseconds': 'HealthCheckStableDurationInMilliseconds',
            'health_check_wait_duration_in_milliseconds': 'HealthCheckWaitDurationInMilliseconds',
            'instance_close_delay_duration_in_seconds': 'InstanceCloseDelayDurationInSeconds',
            'replica_set_check_timeout_in_milliseconds': 'ReplicaSetCheckTimeoutInMilliseconds',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'upgrade_domain_timeout_in_milliseconds': 'UpgradeDomainTimeoutInMilliseconds',
            'upgrade_timeout_in_milliseconds': 'UpgradeTimeoutInMilliseconds'
        }

        self._failure_action = failure_action
        self._force_restart = force_restart
        self._health_check_retry_timeout_in_milliseconds = health_check_retry_timeout_in_milliseconds
        self._health_check_stable_duration_in_milliseconds = health_check_stable_duration_in_milliseconds
        self._health_check_wait_duration_in_milliseconds = health_check_wait_duration_in_milliseconds
        self._instance_close_delay_duration_in_seconds = instance_close_delay_duration_in_seconds
        self._replica_set_check_timeout_in_milliseconds = replica_set_check_timeout_in_milliseconds
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._upgrade_domain_timeout_in_milliseconds = upgrade_domain_timeout_in_milliseconds
        self._upgrade_timeout_in_milliseconds = upgrade_timeout_in_milliseconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollingUpgradeUpdateDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollingUpgradeUpdateDescription of this RollingUpgradeUpdateDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_action(self):
        """Gets the failure_action of this RollingUpgradeUpdateDescription.


        :return: The failure_action of this RollingUpgradeUpdateDescription.
        :rtype: FailureAction
        """
        return self._failure_action

    @failure_action.setter
    def failure_action(self, failure_action):
        """Sets the failure_action of this RollingUpgradeUpdateDescription.


        :param failure_action: The failure_action of this RollingUpgradeUpdateDescription.
        :type failure_action: FailureAction
        """

        self._failure_action = failure_action

    @property
    def force_restart(self):
        """Gets the force_restart of this RollingUpgradeUpdateDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :return: The force_restart of this RollingUpgradeUpdateDescription.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this RollingUpgradeUpdateDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :param force_restart: The force_restart of this RollingUpgradeUpdateDescription.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def health_check_retry_timeout_in_milliseconds(self):
        """Gets the health_check_retry_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_retry_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: str
        """
        return self._health_check_retry_timeout_in_milliseconds

    @health_check_retry_timeout_in_milliseconds.setter
    def health_check_retry_timeout_in_milliseconds(self, health_check_retry_timeout_in_milliseconds):
        """Sets the health_check_retry_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_retry_timeout_in_milliseconds: The health_check_retry_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type health_check_retry_timeout_in_milliseconds: str
        """

        self._health_check_retry_timeout_in_milliseconds = health_check_retry_timeout_in_milliseconds

    @property
    def health_check_stable_duration_in_milliseconds(self):
        """Gets the health_check_stable_duration_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_stable_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: str
        """
        return self._health_check_stable_duration_in_milliseconds

    @health_check_stable_duration_in_milliseconds.setter
    def health_check_stable_duration_in_milliseconds(self, health_check_stable_duration_in_milliseconds):
        """Sets the health_check_stable_duration_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_stable_duration_in_milliseconds: The health_check_stable_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type health_check_stable_duration_in_milliseconds: str
        """

        self._health_check_stable_duration_in_milliseconds = health_check_stable_duration_in_milliseconds

    @property
    def health_check_wait_duration_in_milliseconds(self):
        """Gets the health_check_wait_duration_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The health_check_wait_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: str
        """
        return self._health_check_wait_duration_in_milliseconds

    @health_check_wait_duration_in_milliseconds.setter
    def health_check_wait_duration_in_milliseconds(self, health_check_wait_duration_in_milliseconds):
        """Sets the health_check_wait_duration_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param health_check_wait_duration_in_milliseconds: The health_check_wait_duration_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type health_check_wait_duration_in_milliseconds: str
        """

        self._health_check_wait_duration_in_milliseconds = health_check_wait_duration_in_milliseconds

    @property
    def instance_close_delay_duration_in_seconds(self):
        """Gets the instance_close_delay_duration_in_seconds of this RollingUpgradeUpdateDescription.

        Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. See InstanceCloseDelayDurationSeconds property in $ref: \"#/definitions/StatelessServiceDescription.yaml\" for details. Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior will entirely depend on the delay configured in the stateless service description.

        :return: The instance_close_delay_duration_in_seconds of this RollingUpgradeUpdateDescription.
        :rtype: int
        """
        return self._instance_close_delay_duration_in_seconds

    @instance_close_delay_duration_in_seconds.setter
    def instance_close_delay_duration_in_seconds(self, instance_close_delay_duration_in_seconds):
        """Sets the instance_close_delay_duration_in_seconds of this RollingUpgradeUpdateDescription.

        Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. See InstanceCloseDelayDurationSeconds property in $ref: \"#/definitions/StatelessServiceDescription.yaml\" for details. Note, the default value of InstanceCloseDelayDurationInSeconds is 4294967295, which indicates that the behavior will entirely depend on the delay configured in the stateless service description.

        :param instance_close_delay_duration_in_seconds: The instance_close_delay_duration_in_seconds of this RollingUpgradeUpdateDescription.
        :type instance_close_delay_duration_in_seconds: int
        """

        self._instance_close_delay_duration_in_seconds = instance_close_delay_duration_in_seconds

    @property
    def replica_set_check_timeout_in_milliseconds(self):
        """Gets the replica_set_check_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :return: The replica_set_check_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: int
        """
        return self._replica_set_check_timeout_in_milliseconds

    @replica_set_check_timeout_in_milliseconds.setter
    def replica_set_check_timeout_in_milliseconds(self, replica_set_check_timeout_in_milliseconds):
        """Sets the replica_set_check_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :param replica_set_check_timeout_in_milliseconds: The replica_set_check_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type replica_set_check_timeout_in_milliseconds: int
        """

        self._replica_set_check_timeout_in_milliseconds = replica_set_check_timeout_in_milliseconds

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this RollingUpgradeUpdateDescription.


        :return: The rolling_upgrade_mode of this RollingUpgradeUpdateDescription.
        :rtype: UpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this RollingUpgradeUpdateDescription.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this RollingUpgradeUpdateDescription.
        :type rolling_upgrade_mode: UpgradeMode
        """
        if rolling_upgrade_mode is None:
            raise ValueError("Invalid value for `rolling_upgrade_mode`, must not be `None`")

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def upgrade_domain_timeout_in_milliseconds(self):
        """Gets the upgrade_domain_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The upgrade_domain_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: str
        """
        return self._upgrade_domain_timeout_in_milliseconds

    @upgrade_domain_timeout_in_milliseconds.setter
    def upgrade_domain_timeout_in_milliseconds(self, upgrade_domain_timeout_in_milliseconds):
        """Sets the upgrade_domain_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param upgrade_domain_timeout_in_milliseconds: The upgrade_domain_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type upgrade_domain_timeout_in_milliseconds: str
        """

        self._upgrade_domain_timeout_in_milliseconds = upgrade_domain_timeout_in_milliseconds

    @property
    def upgrade_timeout_in_milliseconds(self):
        """Gets the upgrade_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :return: The upgrade_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :rtype: str
        """
        return self._upgrade_timeout_in_milliseconds

    @upgrade_timeout_in_milliseconds.setter
    def upgrade_timeout_in_milliseconds(self, upgrade_timeout_in_milliseconds):
        """Sets the upgrade_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.

        The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.

        :param upgrade_timeout_in_milliseconds: The upgrade_timeout_in_milliseconds of this RollingUpgradeUpdateDescription.
        :type upgrade_timeout_in_milliseconds: str
        """

        self._upgrade_timeout_in_milliseconds = upgrade_timeout_in_milliseconds
