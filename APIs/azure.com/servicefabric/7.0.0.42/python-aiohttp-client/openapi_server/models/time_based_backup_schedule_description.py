# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_schedule_description import BackupScheduleDescription
from openapi_server.models.backup_schedule_frequency_type import BackupScheduleFrequencyType
from openapi_server.models.backup_schedule_kind import BackupScheduleKind
from openapi_server.models.day_of_week import DayOfWeek
from openapi_server import util


class TimeBasedBackupScheduleDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_days: List[DayOfWeek]=None, run_times: List[datetime]=None, schedule_frequency_type: BackupScheduleFrequencyType=None, schedule_kind: BackupScheduleKind=None):
        """TimeBasedBackupScheduleDescription - a model defined in OpenAPI

        :param run_days: The run_days of this TimeBasedBackupScheduleDescription.
        :param run_times: The run_times of this TimeBasedBackupScheduleDescription.
        :param schedule_frequency_type: The schedule_frequency_type of this TimeBasedBackupScheduleDescription.
        :param schedule_kind: The schedule_kind of this TimeBasedBackupScheduleDescription.
        """
        self.openapi_types = {
            'run_days': List[DayOfWeek],
            'run_times': List[datetime],
            'schedule_frequency_type': BackupScheduleFrequencyType,
            'schedule_kind': BackupScheduleKind
        }

        self.attribute_map = {
            'run_days': 'RunDays',
            'run_times': 'RunTimes',
            'schedule_frequency_type': 'ScheduleFrequencyType',
            'schedule_kind': 'ScheduleKind'
        }

        self._run_days = run_days
        self._run_times = run_times
        self._schedule_frequency_type = schedule_frequency_type
        self._schedule_kind = schedule_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeBasedBackupScheduleDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeBasedBackupScheduleDescription of this TimeBasedBackupScheduleDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_days(self):
        """Gets the run_days of this TimeBasedBackupScheduleDescription.

        List of days of a week when to trigger the periodic backup. This is valid only when the backup schedule frequency type is weekly.

        :return: The run_days of this TimeBasedBackupScheduleDescription.
        :rtype: List[DayOfWeek]
        """
        return self._run_days

    @run_days.setter
    def run_days(self, run_days):
        """Sets the run_days of this TimeBasedBackupScheduleDescription.

        List of days of a week when to trigger the periodic backup. This is valid only when the backup schedule frequency type is weekly.

        :param run_days: The run_days of this TimeBasedBackupScheduleDescription.
        :type run_days: List[DayOfWeek]
        """

        self._run_days = run_days

    @property
    def run_times(self):
        """Gets the run_times of this TimeBasedBackupScheduleDescription.

        Represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will represent '7PM' during the day. Date specified along with time will be ignored.

        :return: The run_times of this TimeBasedBackupScheduleDescription.
        :rtype: List[datetime]
        """
        return self._run_times

    @run_times.setter
    def run_times(self, run_times):
        """Sets the run_times of this TimeBasedBackupScheduleDescription.

        Represents the list of exact time during the day in ISO8601 format. Like '19:00:00' will represent '7PM' during the day. Date specified along with time will be ignored.

        :param run_times: The run_times of this TimeBasedBackupScheduleDescription.
        :type run_times: List[datetime]
        """
        if run_times is None:
            raise ValueError("Invalid value for `run_times`, must not be `None`")

        self._run_times = run_times

    @property
    def schedule_frequency_type(self):
        """Gets the schedule_frequency_type of this TimeBasedBackupScheduleDescription.


        :return: The schedule_frequency_type of this TimeBasedBackupScheduleDescription.
        :rtype: BackupScheduleFrequencyType
        """
        return self._schedule_frequency_type

    @schedule_frequency_type.setter
    def schedule_frequency_type(self, schedule_frequency_type):
        """Sets the schedule_frequency_type of this TimeBasedBackupScheduleDescription.


        :param schedule_frequency_type: The schedule_frequency_type of this TimeBasedBackupScheduleDescription.
        :type schedule_frequency_type: BackupScheduleFrequencyType
        """
        if schedule_frequency_type is None:
            raise ValueError("Invalid value for `schedule_frequency_type`, must not be `None`")

        self._schedule_frequency_type = schedule_frequency_type

    @property
    def schedule_kind(self):
        """Gets the schedule_kind of this TimeBasedBackupScheduleDescription.


        :return: The schedule_kind of this TimeBasedBackupScheduleDescription.
        :rtype: BackupScheduleKind
        """
        return self._schedule_kind

    @schedule_kind.setter
    def schedule_kind(self, schedule_kind):
        """Sets the schedule_kind of this TimeBasedBackupScheduleDescription.


        :param schedule_kind: The schedule_kind of this TimeBasedBackupScheduleDescription.
        :type schedule_kind: BackupScheduleKind
        """
        if schedule_kind is None:
            raise ValueError("Invalid value for `schedule_kind`, must not be `None`")

        self._schedule_kind = schedule_kind
