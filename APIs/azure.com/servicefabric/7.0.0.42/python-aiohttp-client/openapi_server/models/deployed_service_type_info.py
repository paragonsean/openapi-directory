# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_type_registration_status import ServiceTypeRegistrationStatus
from openapi_server import util


class DeployedServiceTypeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_package_name: str=None, service_manifest_name: str=None, service_package_activation_id: str=None, service_type_name: str=None, status: ServiceTypeRegistrationStatus=None):
        """DeployedServiceTypeInfo - a model defined in OpenAPI

        :param code_package_name: The code_package_name of this DeployedServiceTypeInfo.
        :param service_manifest_name: The service_manifest_name of this DeployedServiceTypeInfo.
        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceTypeInfo.
        :param service_type_name: The service_type_name of this DeployedServiceTypeInfo.
        :param status: The status of this DeployedServiceTypeInfo.
        """
        self.openapi_types = {
            'code_package_name': str,
            'service_manifest_name': str,
            'service_package_activation_id': str,
            'service_type_name': str,
            'status': ServiceTypeRegistrationStatus
        }

        self.attribute_map = {
            'code_package_name': 'CodePackageName',
            'service_manifest_name': 'ServiceManifestName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_type_name': 'ServiceTypeName',
            'status': 'Status'
        }

        self._code_package_name = code_package_name
        self._service_manifest_name = service_manifest_name
        self._service_package_activation_id = service_package_activation_id
        self._service_type_name = service_type_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedServiceTypeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedServiceTypeInfo of this DeployedServiceTypeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_package_name(self):
        """Gets the code_package_name of this DeployedServiceTypeInfo.

        The name of the code package defined in the service manifest.

        :return: The code_package_name of this DeployedServiceTypeInfo.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this DeployedServiceTypeInfo.

        The name of the code package defined in the service manifest.

        :param code_package_name: The code_package_name of this DeployedServiceTypeInfo.
        :type code_package_name: str
        """

        self._code_package_name = code_package_name

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployedServiceTypeInfo.

        The name of the service manifest.

        :return: The service_manifest_name of this DeployedServiceTypeInfo.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployedServiceTypeInfo.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this DeployedServiceTypeInfo.
        :type service_manifest_name: str
        """

        self._service_manifest_name = service_manifest_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this DeployedServiceTypeInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.

        :return: The service_package_activation_id of this DeployedServiceTypeInfo.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this DeployedServiceTypeInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.

        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceTypeInfo.
        :type service_package_activation_id: str
        """

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_type_name(self):
        """Gets the service_type_name of this DeployedServiceTypeInfo.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this DeployedServiceTypeInfo.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this DeployedServiceTypeInfo.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this DeployedServiceTypeInfo.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name

    @property
    def status(self):
        """Gets the status of this DeployedServiceTypeInfo.


        :return: The status of this DeployedServiceTypeInfo.
        :rtype: ServiceTypeRegistrationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeployedServiceTypeInfo.


        :param status: The status of this DeployedServiceTypeInfo.
        :type status: ServiceTypeRegistrationStatus
        """

        self._status = status
