# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_upgrade_phase import NodeUpgradePhase
from openapi_server.models.safety_check_wrapper import SafetyCheckWrapper
from openapi_server import util


class NodeUpgradeProgressInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_name: str=None, pending_safety_checks: List[SafetyCheckWrapper]=None, upgrade_phase: NodeUpgradePhase=None):
        """NodeUpgradeProgressInfo - a model defined in OpenAPI

        :param node_name: The node_name of this NodeUpgradeProgressInfo.
        :param pending_safety_checks: The pending_safety_checks of this NodeUpgradeProgressInfo.
        :param upgrade_phase: The upgrade_phase of this NodeUpgradeProgressInfo.
        """
        self.openapi_types = {
            'node_name': str,
            'pending_safety_checks': List[SafetyCheckWrapper],
            'upgrade_phase': NodeUpgradePhase
        }

        self.attribute_map = {
            'node_name': 'NodeName',
            'pending_safety_checks': 'PendingSafetyChecks',
            'upgrade_phase': 'UpgradePhase'
        }

        self._node_name = node_name
        self._pending_safety_checks = pending_safety_checks
        self._upgrade_phase = upgrade_phase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeUpgradeProgressInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeUpgradeProgressInfo of this NodeUpgradeProgressInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_name(self):
        """Gets the node_name of this NodeUpgradeProgressInfo.

        The name of a Service Fabric node.

        :return: The node_name of this NodeUpgradeProgressInfo.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeUpgradeProgressInfo.

        The name of a Service Fabric node.

        :param node_name: The node_name of this NodeUpgradeProgressInfo.
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def pending_safety_checks(self):
        """Gets the pending_safety_checks of this NodeUpgradeProgressInfo.

        List of pending safety checks

        :return: The pending_safety_checks of this NodeUpgradeProgressInfo.
        :rtype: List[SafetyCheckWrapper]
        """
        return self._pending_safety_checks

    @pending_safety_checks.setter
    def pending_safety_checks(self, pending_safety_checks):
        """Sets the pending_safety_checks of this NodeUpgradeProgressInfo.

        List of pending safety checks

        :param pending_safety_checks: The pending_safety_checks of this NodeUpgradeProgressInfo.
        :type pending_safety_checks: List[SafetyCheckWrapper]
        """

        self._pending_safety_checks = pending_safety_checks

    @property
    def upgrade_phase(self):
        """Gets the upgrade_phase of this NodeUpgradeProgressInfo.


        :return: The upgrade_phase of this NodeUpgradeProgressInfo.
        :rtype: NodeUpgradePhase
        """
        return self._upgrade_phase

    @upgrade_phase.setter
    def upgrade_phase(self, upgrade_phase):
        """Sets the upgrade_phase of this NodeUpgradeProgressInfo.


        :param upgrade_phase: The upgrade_phase of this NodeUpgradeProgressInfo.
        :type upgrade_phase: NodeUpgradePhase
        """

        self._upgrade_phase = upgrade_phase
