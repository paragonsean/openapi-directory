# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_scaling_metric import AutoScalingMetric
from openapi_server.models.auto_scaling_trigger import AutoScalingTrigger
from openapi_server.models.auto_scaling_trigger_kind import AutoScalingTriggerKind
from openapi_server import util


class AverageLoadScalingTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower_load_threshold: float=None, metric: AutoScalingMetric=None, scale_interval_in_seconds: int=None, upper_load_threshold: float=None, kind: AutoScalingTriggerKind=None):
        """AverageLoadScalingTrigger - a model defined in OpenAPI

        :param lower_load_threshold: The lower_load_threshold of this AverageLoadScalingTrigger.
        :param metric: The metric of this AverageLoadScalingTrigger.
        :param scale_interval_in_seconds: The scale_interval_in_seconds of this AverageLoadScalingTrigger.
        :param upper_load_threshold: The upper_load_threshold of this AverageLoadScalingTrigger.
        :param kind: The kind of this AverageLoadScalingTrigger.
        """
        self.openapi_types = {
            'lower_load_threshold': float,
            'metric': AutoScalingMetric,
            'scale_interval_in_seconds': int,
            'upper_load_threshold': float,
            'kind': AutoScalingTriggerKind
        }

        self.attribute_map = {
            'lower_load_threshold': 'lowerLoadThreshold',
            'metric': 'metric',
            'scale_interval_in_seconds': 'scaleIntervalInSeconds',
            'upper_load_threshold': 'upperLoadThreshold',
            'kind': 'kind'
        }

        self._lower_load_threshold = lower_load_threshold
        self._metric = metric
        self._scale_interval_in_seconds = scale_interval_in_seconds
        self._upper_load_threshold = upper_load_threshold
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AverageLoadScalingTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AverageLoadScalingTrigger of this AverageLoadScalingTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower_load_threshold(self):
        """Gets the lower_load_threshold of this AverageLoadScalingTrigger.

        Lower load threshold (if average load is below this threshold, service will scale down).

        :return: The lower_load_threshold of this AverageLoadScalingTrigger.
        :rtype: float
        """
        return self._lower_load_threshold

    @lower_load_threshold.setter
    def lower_load_threshold(self, lower_load_threshold):
        """Sets the lower_load_threshold of this AverageLoadScalingTrigger.

        Lower load threshold (if average load is below this threshold, service will scale down).

        :param lower_load_threshold: The lower_load_threshold of this AverageLoadScalingTrigger.
        :type lower_load_threshold: float
        """
        if lower_load_threshold is None:
            raise ValueError("Invalid value for `lower_load_threshold`, must not be `None`")

        self._lower_load_threshold = lower_load_threshold

    @property
    def metric(self):
        """Gets the metric of this AverageLoadScalingTrigger.


        :return: The metric of this AverageLoadScalingTrigger.
        :rtype: AutoScalingMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AverageLoadScalingTrigger.


        :param metric: The metric of this AverageLoadScalingTrigger.
        :type metric: AutoScalingMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def scale_interval_in_seconds(self):
        """Gets the scale_interval_in_seconds of this AverageLoadScalingTrigger.

        Scale interval that indicates how often will this trigger be checked.

        :return: The scale_interval_in_seconds of this AverageLoadScalingTrigger.
        :rtype: int
        """
        return self._scale_interval_in_seconds

    @scale_interval_in_seconds.setter
    def scale_interval_in_seconds(self, scale_interval_in_seconds):
        """Sets the scale_interval_in_seconds of this AverageLoadScalingTrigger.

        Scale interval that indicates how often will this trigger be checked.

        :param scale_interval_in_seconds: The scale_interval_in_seconds of this AverageLoadScalingTrigger.
        :type scale_interval_in_seconds: int
        """
        if scale_interval_in_seconds is None:
            raise ValueError("Invalid value for `scale_interval_in_seconds`, must not be `None`")
        if scale_interval_in_seconds is not None and scale_interval_in_seconds < 60:
            raise ValueError("Invalid value for `scale_interval_in_seconds`, must be a value greater than or equal to `60`")

        self._scale_interval_in_seconds = scale_interval_in_seconds

    @property
    def upper_load_threshold(self):
        """Gets the upper_load_threshold of this AverageLoadScalingTrigger.

        Upper load threshold (if average load is above this threshold, service will scale up).

        :return: The upper_load_threshold of this AverageLoadScalingTrigger.
        :rtype: float
        """
        return self._upper_load_threshold

    @upper_load_threshold.setter
    def upper_load_threshold(self, upper_load_threshold):
        """Sets the upper_load_threshold of this AverageLoadScalingTrigger.

        Upper load threshold (if average load is above this threshold, service will scale up).

        :param upper_load_threshold: The upper_load_threshold of this AverageLoadScalingTrigger.
        :type upper_load_threshold: float
        """
        if upper_load_threshold is None:
            raise ValueError("Invalid value for `upper_load_threshold`, must not be `None`")

        self._upper_load_threshold = upper_load_threshold

    @property
    def kind(self):
        """Gets the kind of this AverageLoadScalingTrigger.


        :return: The kind of this AverageLoadScalingTrigger.
        :rtype: AutoScalingTriggerKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AverageLoadScalingTrigger.


        :param kind: The kind of this AverageLoadScalingTrigger.
        :type kind: AutoScalingTriggerKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
