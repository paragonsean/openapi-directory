# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_config import HttpRouteConfig
from openapi_server import util


class HttpHostConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, routes: List[HttpRouteConfig]=None):
        """HttpHostConfig - a model defined in OpenAPI

        :param name: The name of this HttpHostConfig.
        :param routes: The routes of this HttpHostConfig.
        """
        self.openapi_types = {
            'name': str,
            'routes': List[HttpRouteConfig]
        }

        self.attribute_map = {
            'name': 'name',
            'routes': 'routes'
        }

        self._name = name
        self._routes = routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpHostConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpHostConfig of this HttpHostConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HttpHostConfig.

        http hostname config name.

        :return: The name of this HttpHostConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpHostConfig.

        http hostname config name.

        :param name: The name of this HttpHostConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def routes(self):
        """Gets the routes of this HttpHostConfig.

        Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases.

        :return: The routes of this HttpHostConfig.
        :rtype: List[HttpRouteConfig]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this HttpHostConfig.

        Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases.

        :param routes: The routes of this HttpHostConfig.
        :type routes: List[HttpRouteConfig]
        """
        if routes is None:
            raise ValueError("Invalid value for `routes`, must not be `None`")

        self._routes = routes
