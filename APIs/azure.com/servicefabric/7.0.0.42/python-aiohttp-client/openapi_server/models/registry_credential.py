# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistryCredential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password_encrypted: bool=None, registry_password: str=None, registry_user_name: str=None):
        """RegistryCredential - a model defined in OpenAPI

        :param password_encrypted: The password_encrypted of this RegistryCredential.
        :param registry_password: The registry_password of this RegistryCredential.
        :param registry_user_name: The registry_user_name of this RegistryCredential.
        """
        self.openapi_types = {
            'password_encrypted': bool,
            'registry_password': str,
            'registry_user_name': str
        }

        self.attribute_map = {
            'password_encrypted': 'PasswordEncrypted',
            'registry_password': 'RegistryPassword',
            'registry_user_name': 'RegistryUserName'
        }

        self._password_encrypted = password_encrypted
        self._registry_password = registry_password
        self._registry_user_name = registry_user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryCredential of this RegistryCredential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password_encrypted(self):
        """Gets the password_encrypted of this RegistryCredential.

        Indicates that supplied container registry password is encrypted.

        :return: The password_encrypted of this RegistryCredential.
        :rtype: bool
        """
        return self._password_encrypted

    @password_encrypted.setter
    def password_encrypted(self, password_encrypted):
        """Sets the password_encrypted of this RegistryCredential.

        Indicates that supplied container registry password is encrypted.

        :param password_encrypted: The password_encrypted of this RegistryCredential.
        :type password_encrypted: bool
        """

        self._password_encrypted = password_encrypted

    @property
    def registry_password(self):
        """Gets the registry_password of this RegistryCredential.

        The password for supplied username to connect to container registry.

        :return: The registry_password of this RegistryCredential.
        :rtype: str
        """
        return self._registry_password

    @registry_password.setter
    def registry_password(self, registry_password):
        """Sets the registry_password of this RegistryCredential.

        The password for supplied username to connect to container registry.

        :param registry_password: The registry_password of this RegistryCredential.
        :type registry_password: str
        """

        self._registry_password = registry_password

    @property
    def registry_user_name(self):
        """Gets the registry_user_name of this RegistryCredential.

        The user name to connect to container registry.

        :return: The registry_user_name of this RegistryCredential.
        :rtype: str
        """
        return self._registry_user_name

    @registry_user_name.setter
    def registry_user_name(self, registry_user_name):
        """Sets the registry_user_name of this RegistryCredential.

        The user name to connect to container registry.

        :param registry_user_name: The registry_user_name of this RegistryCredential.
        :type registry_user_name: str
        """

        self._registry_user_name = registry_user_name
