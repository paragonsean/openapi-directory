# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeLoadMetricInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buffered_node_capacity_remaining: float=None, current_node_load: float=None, is_capacity_violation: bool=None, name: str=None, node_buffered_capacity: str=None, node_capacity: str=None, node_capacity_remaining: float=None, node_load: str=None, node_remaining_buffered_capacity: str=None, node_remaining_capacity: str=None, planned_node_load_removal: float=None):
        """NodeLoadMetricInformation - a model defined in OpenAPI

        :param buffered_node_capacity_remaining: The buffered_node_capacity_remaining of this NodeLoadMetricInformation.
        :param current_node_load: The current_node_load of this NodeLoadMetricInformation.
        :param is_capacity_violation: The is_capacity_violation of this NodeLoadMetricInformation.
        :param name: The name of this NodeLoadMetricInformation.
        :param node_buffered_capacity: The node_buffered_capacity of this NodeLoadMetricInformation.
        :param node_capacity: The node_capacity of this NodeLoadMetricInformation.
        :param node_capacity_remaining: The node_capacity_remaining of this NodeLoadMetricInformation.
        :param node_load: The node_load of this NodeLoadMetricInformation.
        :param node_remaining_buffered_capacity: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :param node_remaining_capacity: The node_remaining_capacity of this NodeLoadMetricInformation.
        :param planned_node_load_removal: The planned_node_load_removal of this NodeLoadMetricInformation.
        """
        self.openapi_types = {
            'buffered_node_capacity_remaining': float,
            'current_node_load': float,
            'is_capacity_violation': bool,
            'name': str,
            'node_buffered_capacity': str,
            'node_capacity': str,
            'node_capacity_remaining': float,
            'node_load': str,
            'node_remaining_buffered_capacity': str,
            'node_remaining_capacity': str,
            'planned_node_load_removal': float
        }

        self.attribute_map = {
            'buffered_node_capacity_remaining': 'BufferedNodeCapacityRemaining',
            'current_node_load': 'CurrentNodeLoad',
            'is_capacity_violation': 'IsCapacityViolation',
            'name': 'Name',
            'node_buffered_capacity': 'NodeBufferedCapacity',
            'node_capacity': 'NodeCapacity',
            'node_capacity_remaining': 'NodeCapacityRemaining',
            'node_load': 'NodeLoad',
            'node_remaining_buffered_capacity': 'NodeRemainingBufferedCapacity',
            'node_remaining_capacity': 'NodeRemainingCapacity',
            'planned_node_load_removal': 'PlannedNodeLoadRemoval'
        }

        self._buffered_node_capacity_remaining = buffered_node_capacity_remaining
        self._current_node_load = current_node_load
        self._is_capacity_violation = is_capacity_violation
        self._name = name
        self._node_buffered_capacity = node_buffered_capacity
        self._node_capacity = node_capacity
        self._node_capacity_remaining = node_capacity_remaining
        self._node_load = node_load
        self._node_remaining_buffered_capacity = node_remaining_buffered_capacity
        self._node_remaining_capacity = node_remaining_capacity
        self._planned_node_load_removal = planned_node_load_removal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeLoadMetricInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeLoadMetricInformation of this NodeLoadMetricInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buffered_node_capacity_remaining(self):
        """Gets the buffered_node_capacity_remaining of this NodeLoadMetricInformation.

        The remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.

        :return: The buffered_node_capacity_remaining of this NodeLoadMetricInformation.
        :rtype: float
        """
        return self._buffered_node_capacity_remaining

    @buffered_node_capacity_remaining.setter
    def buffered_node_capacity_remaining(self, buffered_node_capacity_remaining):
        """Sets the buffered_node_capacity_remaining of this NodeLoadMetricInformation.

        The remaining capacity which is not reserved by NodeBufferPercentage for this metric on the node.

        :param buffered_node_capacity_remaining: The buffered_node_capacity_remaining of this NodeLoadMetricInformation.
        :type buffered_node_capacity_remaining: float
        """

        self._buffered_node_capacity_remaining = buffered_node_capacity_remaining

    @property
    def current_node_load(self):
        """Gets the current_node_load of this NodeLoadMetricInformation.

        Current load on the node for this metric.

        :return: The current_node_load of this NodeLoadMetricInformation.
        :rtype: float
        """
        return self._current_node_load

    @current_node_load.setter
    def current_node_load(self, current_node_load):
        """Sets the current_node_load of this NodeLoadMetricInformation.

        Current load on the node for this metric.

        :param current_node_load: The current_node_load of this NodeLoadMetricInformation.
        :type current_node_load: float
        """

        self._current_node_load = current_node_load

    @property
    def is_capacity_violation(self):
        """Gets the is_capacity_violation of this NodeLoadMetricInformation.

        Indicates if there is a capacity violation for this metric on the node.

        :return: The is_capacity_violation of this NodeLoadMetricInformation.
        :rtype: bool
        """
        return self._is_capacity_violation

    @is_capacity_violation.setter
    def is_capacity_violation(self, is_capacity_violation):
        """Sets the is_capacity_violation of this NodeLoadMetricInformation.

        Indicates if there is a capacity violation for this metric on the node.

        :param is_capacity_violation: The is_capacity_violation of this NodeLoadMetricInformation.
        :type is_capacity_violation: bool
        """

        self._is_capacity_violation = is_capacity_violation

    @property
    def name(self):
        """Gets the name of this NodeLoadMetricInformation.

        Name of the metric for which this load information is provided.

        :return: The name of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeLoadMetricInformation.

        Name of the metric for which this load information is provided.

        :param name: The name of this NodeLoadMetricInformation.
        :type name: str
        """

        self._name = name

    @property
    def node_buffered_capacity(self):
        """Gets the node_buffered_capacity of this NodeLoadMetricInformation.

        The value that indicates the reserved capacity for this metric on the node.

        :return: The node_buffered_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_buffered_capacity

    @node_buffered_capacity.setter
    def node_buffered_capacity(self, node_buffered_capacity):
        """Sets the node_buffered_capacity of this NodeLoadMetricInformation.

        The value that indicates the reserved capacity for this metric on the node.

        :param node_buffered_capacity: The node_buffered_capacity of this NodeLoadMetricInformation.
        :type node_buffered_capacity: str
        """

        self._node_buffered_capacity = node_buffered_capacity

    @property
    def node_capacity(self):
        """Gets the node_capacity of this NodeLoadMetricInformation.

        Total capacity on the node for this metric.

        :return: The node_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_capacity

    @node_capacity.setter
    def node_capacity(self, node_capacity):
        """Sets the node_capacity of this NodeLoadMetricInformation.

        Total capacity on the node for this metric.

        :param node_capacity: The node_capacity of this NodeLoadMetricInformation.
        :type node_capacity: str
        """

        self._node_capacity = node_capacity

    @property
    def node_capacity_remaining(self):
        """Gets the node_capacity_remaining of this NodeLoadMetricInformation.

        The remaining capacity on the node for the metric.

        :return: The node_capacity_remaining of this NodeLoadMetricInformation.
        :rtype: float
        """
        return self._node_capacity_remaining

    @node_capacity_remaining.setter
    def node_capacity_remaining(self, node_capacity_remaining):
        """Sets the node_capacity_remaining of this NodeLoadMetricInformation.

        The remaining capacity on the node for the metric.

        :param node_capacity_remaining: The node_capacity_remaining of this NodeLoadMetricInformation.
        :type node_capacity_remaining: float
        """

        self._node_capacity_remaining = node_capacity_remaining

    @property
    def node_load(self):
        """Gets the node_load of this NodeLoadMetricInformation.

        Current load on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentNodeLoad.

        :return: The node_load of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_load

    @node_load.setter
    def node_load(self, node_load):
        """Sets the node_load of this NodeLoadMetricInformation.

        Current load on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of CurrentNodeLoad.

        :param node_load: The node_load of this NodeLoadMetricInformation.
        :type node_load: str
        """

        self._node_load = node_load

    @property
    def node_remaining_buffered_capacity(self):
        """Gets the node_remaining_buffered_capacity of this NodeLoadMetricInformation.

        The remaining reserved capacity for this metric on the node. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedNodeCapacityRemaining.

        :return: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_remaining_buffered_capacity

    @node_remaining_buffered_capacity.setter
    def node_remaining_buffered_capacity(self, node_remaining_buffered_capacity):
        """Sets the node_remaining_buffered_capacity of this NodeLoadMetricInformation.

        The remaining reserved capacity for this metric on the node. In future releases of Service Fabric this parameter will be deprecated in favor of BufferedNodeCapacityRemaining.

        :param node_remaining_buffered_capacity: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :type node_remaining_buffered_capacity: str
        """

        self._node_remaining_buffered_capacity = node_remaining_buffered_capacity

    @property
    def node_remaining_capacity(self):
        """Gets the node_remaining_capacity of this NodeLoadMetricInformation.

        The remaining capacity on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of NodeCapacityRemaining.

        :return: The node_remaining_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_remaining_capacity

    @node_remaining_capacity.setter
    def node_remaining_capacity(self, node_remaining_capacity):
        """Sets the node_remaining_capacity of this NodeLoadMetricInformation.

        The remaining capacity on the node for this metric. In future releases of Service Fabric this parameter will be deprecated in favor of NodeCapacityRemaining.

        :param node_remaining_capacity: The node_remaining_capacity of this NodeLoadMetricInformation.
        :type node_remaining_capacity: str
        """

        self._node_remaining_capacity = node_remaining_capacity

    @property
    def planned_node_load_removal(self):
        """Gets the planned_node_load_removal of this NodeLoadMetricInformation.

        This value represents the load of the replicas that are planned to be removed in the future. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.

        :return: The planned_node_load_removal of this NodeLoadMetricInformation.
        :rtype: float
        """
        return self._planned_node_load_removal

    @planned_node_load_removal.setter
    def planned_node_load_removal(self, planned_node_load_removal):
        """Sets the planned_node_load_removal of this NodeLoadMetricInformation.

        This value represents the load of the replicas that are planned to be removed in the future. This kind of load is reported for replicas that are currently being moving to other nodes and for replicas that are currently being dropped but still use the load on the source node.

        :param planned_node_load_removal: The planned_node_load_removal of this NodeLoadMetricInformation.
        :type planned_node_load_removal: float
        """

        self._planned_node_load_removal = planned_node_load_removal
