# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageStoreCopyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_mark_file: bool=None, remote_destination: str=None, remote_source: str=None, skip_files: List[str]=None):
        """ImageStoreCopyDescription - a model defined in OpenAPI

        :param check_mark_file: The check_mark_file of this ImageStoreCopyDescription.
        :param remote_destination: The remote_destination of this ImageStoreCopyDescription.
        :param remote_source: The remote_source of this ImageStoreCopyDescription.
        :param skip_files: The skip_files of this ImageStoreCopyDescription.
        """
        self.openapi_types = {
            'check_mark_file': bool,
            'remote_destination': str,
            'remote_source': str,
            'skip_files': List[str]
        }

        self.attribute_map = {
            'check_mark_file': 'CheckMarkFile',
            'remote_destination': 'RemoteDestination',
            'remote_source': 'RemoteSource',
            'skip_files': 'SkipFiles'
        }

        self._check_mark_file = check_mark_file
        self._remote_destination = remote_destination
        self._remote_source = remote_source
        self._skip_files = skip_files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageStoreCopyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageStoreCopyDescription of this ImageStoreCopyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_mark_file(self):
        """Gets the check_mark_file of this ImageStoreCopyDescription.

        Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped.

        :return: The check_mark_file of this ImageStoreCopyDescription.
        :rtype: bool
        """
        return self._check_mark_file

    @check_mark_file.setter
    def check_mark_file(self, check_mark_file):
        """Sets the check_mark_file of this ImageStoreCopyDescription.

        Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped.

        :param check_mark_file: The check_mark_file of this ImageStoreCopyDescription.
        :type check_mark_file: bool
        """

        self._check_mark_file = check_mark_file

    @property
    def remote_destination(self):
        """Gets the remote_destination of this ImageStoreCopyDescription.

        The relative path of destination image store content to be copied to.

        :return: The remote_destination of this ImageStoreCopyDescription.
        :rtype: str
        """
        return self._remote_destination

    @remote_destination.setter
    def remote_destination(self, remote_destination):
        """Sets the remote_destination of this ImageStoreCopyDescription.

        The relative path of destination image store content to be copied to.

        :param remote_destination: The remote_destination of this ImageStoreCopyDescription.
        :type remote_destination: str
        """
        if remote_destination is None:
            raise ValueError("Invalid value for `remote_destination`, must not be `None`")

        self._remote_destination = remote_destination

    @property
    def remote_source(self):
        """Gets the remote_source of this ImageStoreCopyDescription.

        The relative path of source image store content to be copied from.

        :return: The remote_source of this ImageStoreCopyDescription.
        :rtype: str
        """
        return self._remote_source

    @remote_source.setter
    def remote_source(self, remote_source):
        """Sets the remote_source of this ImageStoreCopyDescription.

        The relative path of source image store content to be copied from.

        :param remote_source: The remote_source of this ImageStoreCopyDescription.
        :type remote_source: str
        """
        if remote_source is None:
            raise ValueError("Invalid value for `remote_source`, must not be `None`")

        self._remote_source = remote_source

    @property
    def skip_files(self):
        """Gets the skip_files of this ImageStoreCopyDescription.

        The list of the file names to be skipped for copying.

        :return: The skip_files of this ImageStoreCopyDescription.
        :rtype: List[str]
        """
        return self._skip_files

    @skip_files.setter
    def skip_files(self, skip_files):
        """Sets the skip_files of this ImageStoreCopyDescription.

        The list of the file names to be skipped for copying.

        :param skip_files: The skip_files of this ImageStoreCopyDescription.
        :type skip_files: List[str]
        """

        self._skip_files = skip_files
