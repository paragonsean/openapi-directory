# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationCreatedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_definition_kind: str=None, application_type_name: str=None, application_type_version: str=None, application_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ApplicationCreatedEvent - a model defined in OpenAPI

        :param application_definition_kind: The application_definition_kind of this ApplicationCreatedEvent.
        :param application_type_name: The application_type_name of this ApplicationCreatedEvent.
        :param application_type_version: The application_type_version of this ApplicationCreatedEvent.
        :param application_id: The application_id of this ApplicationCreatedEvent.
        :param category: The category of this ApplicationCreatedEvent.
        :param event_instance_id: The event_instance_id of this ApplicationCreatedEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationCreatedEvent.
        :param kind: The kind of this ApplicationCreatedEvent.
        :param time_stamp: The time_stamp of this ApplicationCreatedEvent.
        """
        self.openapi_types = {
            'application_definition_kind': str,
            'application_type_name': str,
            'application_type_version': str,
            'application_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'application_definition_kind': 'ApplicationDefinitionKind',
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            'application_id': 'ApplicationId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._application_definition_kind = application_definition_kind
        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self._application_id = application_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationCreatedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationCreatedEvent of this ApplicationCreatedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_definition_kind(self):
        """Gets the application_definition_kind of this ApplicationCreatedEvent.

        Application definition kind.

        :return: The application_definition_kind of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._application_definition_kind

    @application_definition_kind.setter
    def application_definition_kind(self, application_definition_kind):
        """Sets the application_definition_kind of this ApplicationCreatedEvent.

        Application definition kind.

        :param application_definition_kind: The application_definition_kind of this ApplicationCreatedEvent.
        :type application_definition_kind: str
        """
        if application_definition_kind is None:
            raise ValueError("Invalid value for `application_definition_kind`, must not be `None`")

        self._application_definition_kind = application_definition_kind

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ApplicationCreatedEvent.

        Application type name.

        :return: The application_type_name of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ApplicationCreatedEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ApplicationCreatedEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this ApplicationCreatedEvent.

        Application type version.

        :return: The application_type_version of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this ApplicationCreatedEvent.

        Application type version.

        :param application_type_version: The application_type_version of this ApplicationCreatedEvent.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationCreatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationCreatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationCreatedEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def category(self):
        """Gets the category of this ApplicationCreatedEvent.

        The category of event.

        :return: The category of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApplicationCreatedEvent.

        The category of event.

        :param category: The category of this ApplicationCreatedEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationCreatedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationCreatedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationCreatedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationCreatedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationCreatedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationCreatedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationCreatedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationCreatedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationCreatedEvent.


        :return: The kind of this ApplicationCreatedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationCreatedEvent.


        :param kind: The kind of this ApplicationCreatedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationCreatedEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationCreatedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationCreatedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationCreatedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
