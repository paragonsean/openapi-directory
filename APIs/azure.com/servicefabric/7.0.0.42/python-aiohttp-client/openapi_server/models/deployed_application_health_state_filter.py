# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployed_service_package_health_state_filter import DeployedServicePackageHealthStateFilter
from openapi_server import util


class DeployedApplicationHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployed_service_package_filters: List[DeployedServicePackageHealthStateFilter]=None, health_state_filter: int=None, node_name_filter: str=None):
        """DeployedApplicationHealthStateFilter - a model defined in OpenAPI

        :param deployed_service_package_filters: The deployed_service_package_filters of this DeployedApplicationHealthStateFilter.
        :param health_state_filter: The health_state_filter of this DeployedApplicationHealthStateFilter.
        :param node_name_filter: The node_name_filter of this DeployedApplicationHealthStateFilter.
        """
        self.openapi_types = {
            'deployed_service_package_filters': List[DeployedServicePackageHealthStateFilter],
            'health_state_filter': int,
            'node_name_filter': str
        }

        self.attribute_map = {
            'deployed_service_package_filters': 'DeployedServicePackageFilters',
            'health_state_filter': 'HealthStateFilter',
            'node_name_filter': 'NodeNameFilter'
        }

        self._deployed_service_package_filters = deployed_service_package_filters
        self._health_state_filter = health_state_filter
        self._node_name_filter = node_name_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedApplicationHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedApplicationHealthStateFilter of this DeployedApplicationHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployed_service_package_filters(self):
        """Gets the deployed_service_package_filters of this DeployedApplicationHealthStateFilter.

        Defines a list of filters that specify which deployed service packages to be included in the returned cluster health chunk as children of the parent deployed application. The deployed service packages are returned only if the parent deployed application matches a filter. If the list is empty, no deployed service packages are returned. All the deployed service packages are used to evaluate the parent deployed application aggregated health state, regardless of the input filters. The deployed application filter may specify multiple deployed service package filters. For example, it can specify a filter to return all deployed service packages with health state Error and another filter to always include a deployed service package on a node.

        :return: The deployed_service_package_filters of this DeployedApplicationHealthStateFilter.
        :rtype: List[DeployedServicePackageHealthStateFilter]
        """
        return self._deployed_service_package_filters

    @deployed_service_package_filters.setter
    def deployed_service_package_filters(self, deployed_service_package_filters):
        """Sets the deployed_service_package_filters of this DeployedApplicationHealthStateFilter.

        Defines a list of filters that specify which deployed service packages to be included in the returned cluster health chunk as children of the parent deployed application. The deployed service packages are returned only if the parent deployed application matches a filter. If the list is empty, no deployed service packages are returned. All the deployed service packages are used to evaluate the parent deployed application aggregated health state, regardless of the input filters. The deployed application filter may specify multiple deployed service package filters. For example, it can specify a filter to return all deployed service packages with health state Error and another filter to always include a deployed service package on a node.

        :param deployed_service_package_filters: The deployed_service_package_filters of this DeployedApplicationHealthStateFilter.
        :type deployed_service_package_filters: List[DeployedServicePackageHealthStateFilter]
        """

        self._deployed_service_package_filters = deployed_service_package_filters

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this DeployedApplicationHealthStateFilter.

        The filter for the health state of the deployed applications. It allows selecting deployed applications if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed applications that match the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching deployed application is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :return: The health_state_filter of this DeployedApplicationHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this DeployedApplicationHealthStateFilter.

        The filter for the health state of the deployed applications. It allows selecting deployed applications if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed applications that match the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching deployed application is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :param health_state_filter: The health_state_filter of this DeployedApplicationHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def node_name_filter(self):
        """Gets the node_name_filter of this DeployedApplicationHealthStateFilter.

        The name of the node where the application is deployed in order to match the filter. If specified, the filter is applied only to the application deployed on the specified node. If the application is not deployed on the node with the specified name, no deployed application is returned in the cluster health chunk based on this filter. Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :return: The node_name_filter of this DeployedApplicationHealthStateFilter.
        :rtype: str
        """
        return self._node_name_filter

    @node_name_filter.setter
    def node_name_filter(self, node_name_filter):
        """Sets the node_name_filter of this DeployedApplicationHealthStateFilter.

        The name of the node where the application is deployed in order to match the filter. If specified, the filter is applied only to the application deployed on the specified node. If the application is not deployed on the node with the specified name, no deployed application is returned in the cluster health chunk based on this filter. Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :param node_name_filter: The node_name_filter of this DeployedApplicationHealthStateFilter.
        :type node_name_filter: str
        """

        self._node_name_filter = node_name_filter
