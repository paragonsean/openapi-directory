# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_storage_description import BackupStorageDescription
from openapi_server import util


class RestorePartitionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, backup_location: str=None, backup_storage: BackupStorageDescription=None):
        """RestorePartitionDescription - a model defined in OpenAPI

        :param backup_id: The backup_id of this RestorePartitionDescription.
        :param backup_location: The backup_location of this RestorePartitionDescription.
        :param backup_storage: The backup_storage of this RestorePartitionDescription.
        """
        self.openapi_types = {
            'backup_id': str,
            'backup_location': str,
            'backup_storage': BackupStorageDescription
        }

        self.attribute_map = {
            'backup_id': 'BackupId',
            'backup_location': 'BackupLocation',
            'backup_storage': 'BackupStorage'
        }

        self._backup_id = backup_id
        self._backup_location = backup_location
        self._backup_storage = backup_storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestorePartitionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestorePartitionDescription of this RestorePartitionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this RestorePartitionDescription.

        Unique backup ID.

        :return: The backup_id of this RestorePartitionDescription.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this RestorePartitionDescription.

        Unique backup ID.

        :param backup_id: The backup_id of this RestorePartitionDescription.
        :type backup_id: str
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")

        self._backup_id = backup_id

    @property
    def backup_location(self):
        """Gets the backup_location of this RestorePartitionDescription.

        Location of the backup relative to the backup storage specified/ configured.

        :return: The backup_location of this RestorePartitionDescription.
        :rtype: str
        """
        return self._backup_location

    @backup_location.setter
    def backup_location(self, backup_location):
        """Sets the backup_location of this RestorePartitionDescription.

        Location of the backup relative to the backup storage specified/ configured.

        :param backup_location: The backup_location of this RestorePartitionDescription.
        :type backup_location: str
        """
        if backup_location is None:
            raise ValueError("Invalid value for `backup_location`, must not be `None`")

        self._backup_location = backup_location

    @property
    def backup_storage(self):
        """Gets the backup_storage of this RestorePartitionDescription.


        :return: The backup_storage of this RestorePartitionDescription.
        :rtype: BackupStorageDescription
        """
        return self._backup_storage

    @backup_storage.setter
    def backup_storage(self, backup_storage):
        """Sets the backup_storage of this RestorePartitionDescription.


        :param backup_storage: The backup_storage of this RestorePartitionDescription.
        :type backup_storage: BackupStorageDescription
        """

        self._backup_storage = backup_storage
