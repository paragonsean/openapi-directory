# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_schedule_description import BackupScheduleDescription
from openapi_server.models.backup_storage_description import BackupStorageDescription
from openapi_server.models.retention_policy_description import RetentionPolicyDescription
from openapi_server import util


class BackupPolicyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_restore_on_data_loss: bool=None, max_incremental_backups: int=None, name: str=None, retention_policy: RetentionPolicyDescription=None, schedule: BackupScheduleDescription=None, storage: BackupStorageDescription=None):
        """BackupPolicyDescription - a model defined in OpenAPI

        :param auto_restore_on_data_loss: The auto_restore_on_data_loss of this BackupPolicyDescription.
        :param max_incremental_backups: The max_incremental_backups of this BackupPolicyDescription.
        :param name: The name of this BackupPolicyDescription.
        :param retention_policy: The retention_policy of this BackupPolicyDescription.
        :param schedule: The schedule of this BackupPolicyDescription.
        :param storage: The storage of this BackupPolicyDescription.
        """
        self.openapi_types = {
            'auto_restore_on_data_loss': bool,
            'max_incremental_backups': int,
            'name': str,
            'retention_policy': RetentionPolicyDescription,
            'schedule': BackupScheduleDescription,
            'storage': BackupStorageDescription
        }

        self.attribute_map = {
            'auto_restore_on_data_loss': 'AutoRestoreOnDataLoss',
            'max_incremental_backups': 'MaxIncrementalBackups',
            'name': 'Name',
            'retention_policy': 'RetentionPolicy',
            'schedule': 'Schedule',
            'storage': 'Storage'
        }

        self._auto_restore_on_data_loss = auto_restore_on_data_loss
        self._max_incremental_backups = max_incremental_backups
        self._name = name
        self._retention_policy = retention_policy
        self._schedule = schedule
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupPolicyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupPolicyDescription of this BackupPolicyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_restore_on_data_loss(self):
        """Gets the auto_restore_on_data_loss of this BackupPolicyDescription.

        Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.

        :return: The auto_restore_on_data_loss of this BackupPolicyDescription.
        :rtype: bool
        """
        return self._auto_restore_on_data_loss

    @auto_restore_on_data_loss.setter
    def auto_restore_on_data_loss(self, auto_restore_on_data_loss):
        """Sets the auto_restore_on_data_loss of this BackupPolicyDescription.

        Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.

        :param auto_restore_on_data_loss: The auto_restore_on_data_loss of this BackupPolicyDescription.
        :type auto_restore_on_data_loss: bool
        """
        if auto_restore_on_data_loss is None:
            raise ValueError("Invalid value for `auto_restore_on_data_loss`, must not be `None`")

        self._auto_restore_on_data_loss = auto_restore_on_data_loss

    @property
    def max_incremental_backups(self):
        """Gets the max_incremental_backups of this BackupPolicyDescription.

        Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.

        :return: The max_incremental_backups of this BackupPolicyDescription.
        :rtype: int
        """
        return self._max_incremental_backups

    @max_incremental_backups.setter
    def max_incremental_backups(self, max_incremental_backups):
        """Sets the max_incremental_backups of this BackupPolicyDescription.

        Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.

        :param max_incremental_backups: The max_incremental_backups of this BackupPolicyDescription.
        :type max_incremental_backups: int
        """
        if max_incremental_backups is None:
            raise ValueError("Invalid value for `max_incremental_backups`, must not be `None`")
        if max_incremental_backups is not None and max_incremental_backups > 255:
            raise ValueError("Invalid value for `max_incremental_backups`, must be a value less than or equal to `255`")
        if max_incremental_backups is not None and max_incremental_backups < 0:
            raise ValueError("Invalid value for `max_incremental_backups`, must be a value greater than or equal to `0`")

        self._max_incremental_backups = max_incremental_backups

    @property
    def name(self):
        """Gets the name of this BackupPolicyDescription.

        The unique name identifying this backup policy.

        :return: The name of this BackupPolicyDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupPolicyDescription.

        The unique name identifying this backup policy.

        :param name: The name of this BackupPolicyDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def retention_policy(self):
        """Gets the retention_policy of this BackupPolicyDescription.


        :return: The retention_policy of this BackupPolicyDescription.
        :rtype: RetentionPolicyDescription
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this BackupPolicyDescription.


        :param retention_policy: The retention_policy of this BackupPolicyDescription.
        :type retention_policy: RetentionPolicyDescription
        """

        self._retention_policy = retention_policy

    @property
    def schedule(self):
        """Gets the schedule of this BackupPolicyDescription.


        :return: The schedule of this BackupPolicyDescription.
        :rtype: BackupScheduleDescription
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this BackupPolicyDescription.


        :param schedule: The schedule of this BackupPolicyDescription.
        :type schedule: BackupScheduleDescription
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def storage(self):
        """Gets the storage of this BackupPolicyDescription.


        :return: The storage of this BackupPolicyDescription.
        :rtype: BackupStorageDescription
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this BackupPolicyDescription.


        :param storage: The storage of this BackupPolicyDescription.
        :type storage: BackupStorageDescription
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")

        self._storage = storage
