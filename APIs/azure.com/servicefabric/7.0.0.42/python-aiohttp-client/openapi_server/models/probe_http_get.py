# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.probe_http_get_headers import ProbeHttpGetHeaders
from openapi_server import util


class ProbeHttpGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, http_headers: List[ProbeHttpGetHeaders]=None, path: str=None, port: int=None, scheme: str=None):
        """ProbeHttpGet - a model defined in OpenAPI

        :param host: The host of this ProbeHttpGet.
        :param http_headers: The http_headers of this ProbeHttpGet.
        :param path: The path of this ProbeHttpGet.
        :param port: The port of this ProbeHttpGet.
        :param scheme: The scheme of this ProbeHttpGet.
        """
        self.openapi_types = {
            'host': str,
            'http_headers': List[ProbeHttpGetHeaders],
            'path': str,
            'port': int,
            'scheme': str
        }

        self.attribute_map = {
            'host': 'host',
            'http_headers': 'httpHeaders',
            'path': 'path',
            'port': 'port',
            'scheme': 'scheme'
        }

        self._host = host
        self._http_headers = http_headers
        self._path = path
        self._port = port
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProbeHttpGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProbeHttpGet of this ProbeHttpGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this ProbeHttpGet.

        Host IP to connect to.

        :return: The host of this ProbeHttpGet.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ProbeHttpGet.

        Host IP to connect to.

        :param host: The host of this ProbeHttpGet.
        :type host: str
        """

        self._host = host

    @property
    def http_headers(self):
        """Gets the http_headers of this ProbeHttpGet.

        Headers to set in the request.

        :return: The http_headers of this ProbeHttpGet.
        :rtype: List[ProbeHttpGetHeaders]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this ProbeHttpGet.

        Headers to set in the request.

        :param http_headers: The http_headers of this ProbeHttpGet.
        :type http_headers: List[ProbeHttpGetHeaders]
        """

        self._http_headers = http_headers

    @property
    def path(self):
        """Gets the path of this ProbeHttpGet.

        Path to access on the HTTP request.

        :return: The path of this ProbeHttpGet.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProbeHttpGet.

        Path to access on the HTTP request.

        :param path: The path of this ProbeHttpGet.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this ProbeHttpGet.

        Port to access for probe.

        :return: The port of this ProbeHttpGet.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ProbeHttpGet.

        Port to access for probe.

        :param port: The port of this ProbeHttpGet.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def scheme(self):
        """Gets the scheme of this ProbeHttpGet.

        Scheme for the http probe. Can be Http or Https.

        :return: The scheme of this ProbeHttpGet.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this ProbeHttpGet.

        Scheme for the http probe. Can be Http or Https.

        :param scheme: The scheme of this ProbeHttpGet.
        :type scheme: str
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if scheme not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme` ({0}), must be one of {1}"
                .format(scheme, allowed_values)
            )

        self._scheme = scheme
