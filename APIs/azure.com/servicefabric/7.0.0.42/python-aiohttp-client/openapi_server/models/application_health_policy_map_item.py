# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server import util


class ApplicationHealthPolicyMapItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, value: ApplicationHealthPolicy=None):
        """ApplicationHealthPolicyMapItem - a model defined in OpenAPI

        :param key: The key of this ApplicationHealthPolicyMapItem.
        :param value: The value of this ApplicationHealthPolicyMapItem.
        """
        self.openapi_types = {
            'key': str,
            'value': ApplicationHealthPolicy
        }

        self.attribute_map = {
            'key': 'Key',
            'value': 'Value'
        }

        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationHealthPolicyMapItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationHealthPolicyMapItem of this ApplicationHealthPolicyMapItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ApplicationHealthPolicyMapItem.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The key of this ApplicationHealthPolicyMapItem.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApplicationHealthPolicyMapItem.

        The name of the application, including the 'fabric:' URI scheme.

        :param key: The key of this ApplicationHealthPolicyMapItem.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def value(self):
        """Gets the value of this ApplicationHealthPolicyMapItem.


        :return: The value of this ApplicationHealthPolicyMapItem.
        :rtype: ApplicationHealthPolicy
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApplicationHealthPolicyMapItem.


        :param value: The value of this ApplicationHealthPolicyMapItem.
        :type value: ApplicationHealthPolicy
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
