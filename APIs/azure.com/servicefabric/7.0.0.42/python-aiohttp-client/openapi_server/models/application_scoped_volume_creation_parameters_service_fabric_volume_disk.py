# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_scoped_volume_creation_parameters import ApplicationScopedVolumeCreationParameters
from openapi_server.models.application_scoped_volume_kind import ApplicationScopedVolumeKind
from openapi_server import util


class ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size_disk: str=None, description: str=None, kind: ApplicationScopedVolumeKind=None):
        """ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk - a model defined in OpenAPI

        :param size_disk: The size_disk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :param description: The description of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :param kind: The kind of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        """
        self.openapi_types = {
            'size_disk': str,
            'description': str,
            'kind': ApplicationScopedVolumeKind
        }

        self.attribute_map = {
            'size_disk': 'sizeDisk',
            'description': 'description',
            'kind': 'kind'
        }

        self._size_disk = size_disk
        self._description = description
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size_disk(self):
        """Gets the size_disk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.

        Volume size

        :return: The size_disk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :rtype: str
        """
        return self._size_disk

    @size_disk.setter
    def size_disk(self, size_disk):
        """Sets the size_disk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.

        Volume size

        :param size_disk: The size_disk of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :type size_disk: str
        """
        allowed_values = ["Small", "Medium", "Large"]  # noqa: E501
        if size_disk not in allowed_values:
            raise ValueError(
                "Invalid value for `size_disk` ({0}), must be one of {1}"
                .format(size_disk, allowed_values)
            )

        self._size_disk = size_disk

    @property
    def description(self):
        """Gets the description of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.

        User readable description of the volume.

        :return: The description of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.

        User readable description of the volume.

        :param description: The description of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :type description: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.


        :return: The kind of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :rtype: ApplicationScopedVolumeKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.


        :param kind: The kind of this ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
        :type kind: ApplicationScopedVolumeKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
