# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy_map_item import ApplicationHealthPolicyMapItem
from openapi_server.models.cluster_health_policy import ClusterHealthPolicy
from openapi_server.models.cluster_upgrade_health_policy_object import ClusterUpgradeHealthPolicyObject
from openapi_server.models.monitoring_policy_description import MonitoringPolicyDescription
from openapi_server.models.upgrade_kind import UpgradeKind
from openapi_server.models.upgrade_mode import UpgradeMode
from openapi_server.models.upgrade_sort_order import UpgradeSortOrder
from openapi_server import util


class ClusterUpgradeDescriptionObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy_map: List[ApplicationHealthPolicyMapItem]=None, cluster_health_policy: ClusterHealthPolicy=None, cluster_upgrade_health_policy: ClusterUpgradeHealthPolicyObject=None, code_version: str=None, config_version: str=None, enable_delta_health_evaluation: bool=None, force_restart: bool=False, monitoring_policy: MonitoringPolicyDescription=None, rolling_upgrade_mode: UpgradeMode=UpgradeMode.UNMONITOREDAUTO, sort_order: UpgradeSortOrder=UpgradeSortOrder.DEFAULT, upgrade_kind: UpgradeKind=UpgradeKind.ROLLING, upgrade_replica_set_check_timeout_in_seconds: int=None):
        """ClusterUpgradeDescriptionObject - a model defined in OpenAPI

        :param application_health_policy_map: The application_health_policy_map of this ClusterUpgradeDescriptionObject.
        :param cluster_health_policy: The cluster_health_policy of this ClusterUpgradeDescriptionObject.
        :param cluster_upgrade_health_policy: The cluster_upgrade_health_policy of this ClusterUpgradeDescriptionObject.
        :param code_version: The code_version of this ClusterUpgradeDescriptionObject.
        :param config_version: The config_version of this ClusterUpgradeDescriptionObject.
        :param enable_delta_health_evaluation: The enable_delta_health_evaluation of this ClusterUpgradeDescriptionObject.
        :param force_restart: The force_restart of this ClusterUpgradeDescriptionObject.
        :param monitoring_policy: The monitoring_policy of this ClusterUpgradeDescriptionObject.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ClusterUpgradeDescriptionObject.
        :param sort_order: The sort_order of this ClusterUpgradeDescriptionObject.
        :param upgrade_kind: The upgrade_kind of this ClusterUpgradeDescriptionObject.
        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ClusterUpgradeDescriptionObject.
        """
        self.openapi_types = {
            'application_health_policy_map': List[ApplicationHealthPolicyMapItem],
            'cluster_health_policy': ClusterHealthPolicy,
            'cluster_upgrade_health_policy': ClusterUpgradeHealthPolicyObject,
            'code_version': str,
            'config_version': str,
            'enable_delta_health_evaluation': bool,
            'force_restart': bool,
            'monitoring_policy': MonitoringPolicyDescription,
            'rolling_upgrade_mode': UpgradeMode,
            'sort_order': UpgradeSortOrder,
            'upgrade_kind': UpgradeKind,
            'upgrade_replica_set_check_timeout_in_seconds': int
        }

        self.attribute_map = {
            'application_health_policy_map': 'ApplicationHealthPolicyMap',
            'cluster_health_policy': 'ClusterHealthPolicy',
            'cluster_upgrade_health_policy': 'ClusterUpgradeHealthPolicy',
            'code_version': 'CodeVersion',
            'config_version': 'ConfigVersion',
            'enable_delta_health_evaluation': 'EnableDeltaHealthEvaluation',
            'force_restart': 'ForceRestart',
            'monitoring_policy': 'MonitoringPolicy',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'sort_order': 'SortOrder',
            'upgrade_kind': 'UpgradeKind',
            'upgrade_replica_set_check_timeout_in_seconds': 'UpgradeReplicaSetCheckTimeoutInSeconds'
        }

        self._application_health_policy_map = application_health_policy_map
        self._cluster_health_policy = cluster_health_policy
        self._cluster_upgrade_health_policy = cluster_upgrade_health_policy
        self._code_version = code_version
        self._config_version = config_version
        self._enable_delta_health_evaluation = enable_delta_health_evaluation
        self._force_restart = force_restart
        self._monitoring_policy = monitoring_policy
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._sort_order = sort_order
        self._upgrade_kind = upgrade_kind
        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeDescriptionObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeDescriptionObject of this ClusterUpgradeDescriptionObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy_map(self):
        """Gets the application_health_policy_map of this ClusterUpgradeDescriptionObject.

        Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default.

        :return: The application_health_policy_map of this ClusterUpgradeDescriptionObject.
        :rtype: List[ApplicationHealthPolicyMapItem]
        """
        return self._application_health_policy_map

    @application_health_policy_map.setter
    def application_health_policy_map(self, application_health_policy_map):
        """Sets the application_health_policy_map of this ClusterUpgradeDescriptionObject.

        Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default.

        :param application_health_policy_map: The application_health_policy_map of this ClusterUpgradeDescriptionObject.
        :type application_health_policy_map: List[ApplicationHealthPolicyMapItem]
        """

        self._application_health_policy_map = application_health_policy_map

    @property
    def cluster_health_policy(self):
        """Gets the cluster_health_policy of this ClusterUpgradeDescriptionObject.


        :return: The cluster_health_policy of this ClusterUpgradeDescriptionObject.
        :rtype: ClusterHealthPolicy
        """
        return self._cluster_health_policy

    @cluster_health_policy.setter
    def cluster_health_policy(self, cluster_health_policy):
        """Sets the cluster_health_policy of this ClusterUpgradeDescriptionObject.


        :param cluster_health_policy: The cluster_health_policy of this ClusterUpgradeDescriptionObject.
        :type cluster_health_policy: ClusterHealthPolicy
        """

        self._cluster_health_policy = cluster_health_policy

    @property
    def cluster_upgrade_health_policy(self):
        """Gets the cluster_upgrade_health_policy of this ClusterUpgradeDescriptionObject.


        :return: The cluster_upgrade_health_policy of this ClusterUpgradeDescriptionObject.
        :rtype: ClusterUpgradeHealthPolicyObject
        """
        return self._cluster_upgrade_health_policy

    @cluster_upgrade_health_policy.setter
    def cluster_upgrade_health_policy(self, cluster_upgrade_health_policy):
        """Sets the cluster_upgrade_health_policy of this ClusterUpgradeDescriptionObject.


        :param cluster_upgrade_health_policy: The cluster_upgrade_health_policy of this ClusterUpgradeDescriptionObject.
        :type cluster_upgrade_health_policy: ClusterUpgradeHealthPolicyObject
        """

        self._cluster_upgrade_health_policy = cluster_upgrade_health_policy

    @property
    def code_version(self):
        """Gets the code_version of this ClusterUpgradeDescriptionObject.

        The ServiceFabric code version of the cluster.

        :return: The code_version of this ClusterUpgradeDescriptionObject.
        :rtype: str
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this ClusterUpgradeDescriptionObject.

        The ServiceFabric code version of the cluster.

        :param code_version: The code_version of this ClusterUpgradeDescriptionObject.
        :type code_version: str
        """

        self._code_version = code_version

    @property
    def config_version(self):
        """Gets the config_version of this ClusterUpgradeDescriptionObject.

        The cluster configuration version (specified in the cluster manifest).

        :return: The config_version of this ClusterUpgradeDescriptionObject.
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this ClusterUpgradeDescriptionObject.

        The cluster configuration version (specified in the cluster manifest).

        :param config_version: The config_version of this ClusterUpgradeDescriptionObject.
        :type config_version: str
        """

        self._config_version = config_version

    @property
    def enable_delta_health_evaluation(self):
        """Gets the enable_delta_health_evaluation of this ClusterUpgradeDescriptionObject.

        When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.

        :return: The enable_delta_health_evaluation of this ClusterUpgradeDescriptionObject.
        :rtype: bool
        """
        return self._enable_delta_health_evaluation

    @enable_delta_health_evaluation.setter
    def enable_delta_health_evaluation(self, enable_delta_health_evaluation):
        """Sets the enable_delta_health_evaluation of this ClusterUpgradeDescriptionObject.

        When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.

        :param enable_delta_health_evaluation: The enable_delta_health_evaluation of this ClusterUpgradeDescriptionObject.
        :type enable_delta_health_evaluation: bool
        """

        self._enable_delta_health_evaluation = enable_delta_health_evaluation

    @property
    def force_restart(self):
        """Gets the force_restart of this ClusterUpgradeDescriptionObject.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :return: The force_restart of this ClusterUpgradeDescriptionObject.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this ClusterUpgradeDescriptionObject.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :param force_restart: The force_restart of this ClusterUpgradeDescriptionObject.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def monitoring_policy(self):
        """Gets the monitoring_policy of this ClusterUpgradeDescriptionObject.


        :return: The monitoring_policy of this ClusterUpgradeDescriptionObject.
        :rtype: MonitoringPolicyDescription
        """
        return self._monitoring_policy

    @monitoring_policy.setter
    def monitoring_policy(self, monitoring_policy):
        """Sets the monitoring_policy of this ClusterUpgradeDescriptionObject.


        :param monitoring_policy: The monitoring_policy of this ClusterUpgradeDescriptionObject.
        :type monitoring_policy: MonitoringPolicyDescription
        """

        self._monitoring_policy = monitoring_policy

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this ClusterUpgradeDescriptionObject.


        :return: The rolling_upgrade_mode of this ClusterUpgradeDescriptionObject.
        :rtype: UpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this ClusterUpgradeDescriptionObject.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ClusterUpgradeDescriptionObject.
        :type rolling_upgrade_mode: UpgradeMode
        """

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def sort_order(self):
        """Gets the sort_order of this ClusterUpgradeDescriptionObject.


        :return: The sort_order of this ClusterUpgradeDescriptionObject.
        :rtype: UpgradeSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ClusterUpgradeDescriptionObject.


        :param sort_order: The sort_order of this ClusterUpgradeDescriptionObject.
        :type sort_order: UpgradeSortOrder
        """

        self._sort_order = sort_order

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this ClusterUpgradeDescriptionObject.


        :return: The upgrade_kind of this ClusterUpgradeDescriptionObject.
        :rtype: UpgradeKind
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this ClusterUpgradeDescriptionObject.


        :param upgrade_kind: The upgrade_kind of this ClusterUpgradeDescriptionObject.
        :type upgrade_kind: UpgradeKind
        """

        self._upgrade_kind = upgrade_kind

    @property
    def upgrade_replica_set_check_timeout_in_seconds(self):
        """Gets the upgrade_replica_set_check_timeout_in_seconds of this ClusterUpgradeDescriptionObject.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :return: The upgrade_replica_set_check_timeout_in_seconds of this ClusterUpgradeDescriptionObject.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout_in_seconds

    @upgrade_replica_set_check_timeout_in_seconds.setter
    def upgrade_replica_set_check_timeout_in_seconds(self, upgrade_replica_set_check_timeout_in_seconds):
        """Sets the upgrade_replica_set_check_timeout_in_seconds of this ClusterUpgradeDescriptionObject.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ClusterUpgradeDescriptionObject.
        :type upgrade_replica_set_check_timeout_in_seconds: int
        """

        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds
