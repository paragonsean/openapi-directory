# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replica_kind import ReplicaKind
from openapi_server.models.replica_status_base import ReplicaStatusBase
from openapi_server import util


class KeyValueStoreReplicaStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_notification_current_key_filter: str=None, copy_notification_current_progress: str=None, database_logical_size_estimate: str=None, database_row_count_estimate: str=None, status_details: str=None, kind: ReplicaKind=None):
        """KeyValueStoreReplicaStatus - a model defined in OpenAPI

        :param copy_notification_current_key_filter: The copy_notification_current_key_filter of this KeyValueStoreReplicaStatus.
        :param copy_notification_current_progress: The copy_notification_current_progress of this KeyValueStoreReplicaStatus.
        :param database_logical_size_estimate: The database_logical_size_estimate of this KeyValueStoreReplicaStatus.
        :param database_row_count_estimate: The database_row_count_estimate of this KeyValueStoreReplicaStatus.
        :param status_details: The status_details of this KeyValueStoreReplicaStatus.
        :param kind: The kind of this KeyValueStoreReplicaStatus.
        """
        self.openapi_types = {
            'copy_notification_current_key_filter': str,
            'copy_notification_current_progress': str,
            'database_logical_size_estimate': str,
            'database_row_count_estimate': str,
            'status_details': str,
            'kind': ReplicaKind
        }

        self.attribute_map = {
            'copy_notification_current_key_filter': 'CopyNotificationCurrentKeyFilter',
            'copy_notification_current_progress': 'CopyNotificationCurrentProgress',
            'database_logical_size_estimate': 'DatabaseLogicalSizeEstimate',
            'database_row_count_estimate': 'DatabaseRowCountEstimate',
            'status_details': 'StatusDetails',
            'kind': 'Kind'
        }

        self._copy_notification_current_key_filter = copy_notification_current_key_filter
        self._copy_notification_current_progress = copy_notification_current_progress
        self._database_logical_size_estimate = database_logical_size_estimate
        self._database_row_count_estimate = database_row_count_estimate
        self._status_details = status_details
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyValueStoreReplicaStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyValueStoreReplicaStatus of this KeyValueStoreReplicaStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_notification_current_key_filter(self):
        """Gets the copy_notification_current_key_filter of this KeyValueStoreReplicaStatus.

        Value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no pending callback.

        :return: The copy_notification_current_key_filter of this KeyValueStoreReplicaStatus.
        :rtype: str
        """
        return self._copy_notification_current_key_filter

    @copy_notification_current_key_filter.setter
    def copy_notification_current_key_filter(self, copy_notification_current_key_filter):
        """Sets the copy_notification_current_key_filter of this KeyValueStoreReplicaStatus.

        Value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no pending callback.

        :param copy_notification_current_key_filter: The copy_notification_current_key_filter of this KeyValueStoreReplicaStatus.
        :type copy_notification_current_key_filter: str
        """

        self._copy_notification_current_key_filter = copy_notification_current_key_filter

    @property
    def copy_notification_current_progress(self):
        """Gets the copy_notification_current_progress of this KeyValueStoreReplicaStatus.

        Value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback.

        :return: The copy_notification_current_progress of this KeyValueStoreReplicaStatus.
        :rtype: str
        """
        return self._copy_notification_current_progress

    @copy_notification_current_progress.setter
    def copy_notification_current_progress(self, copy_notification_current_progress):
        """Sets the copy_notification_current_progress of this KeyValueStoreReplicaStatus.

        Value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback.

        :param copy_notification_current_progress: The copy_notification_current_progress of this KeyValueStoreReplicaStatus.
        :type copy_notification_current_progress: str
        """

        self._copy_notification_current_progress = copy_notification_current_progress

    @property
    def database_logical_size_estimate(self):
        """Gets the database_logical_size_estimate of this KeyValueStoreReplicaStatus.

        Value indicating the estimated size of the underlying database.

        :return: The database_logical_size_estimate of this KeyValueStoreReplicaStatus.
        :rtype: str
        """
        return self._database_logical_size_estimate

    @database_logical_size_estimate.setter
    def database_logical_size_estimate(self, database_logical_size_estimate):
        """Sets the database_logical_size_estimate of this KeyValueStoreReplicaStatus.

        Value indicating the estimated size of the underlying database.

        :param database_logical_size_estimate: The database_logical_size_estimate of this KeyValueStoreReplicaStatus.
        :type database_logical_size_estimate: str
        """

        self._database_logical_size_estimate = database_logical_size_estimate

    @property
    def database_row_count_estimate(self):
        """Gets the database_row_count_estimate of this KeyValueStoreReplicaStatus.

        Value indicating the estimated number of rows in the underlying database.

        :return: The database_row_count_estimate of this KeyValueStoreReplicaStatus.
        :rtype: str
        """
        return self._database_row_count_estimate

    @database_row_count_estimate.setter
    def database_row_count_estimate(self, database_row_count_estimate):
        """Sets the database_row_count_estimate of this KeyValueStoreReplicaStatus.

        Value indicating the estimated number of rows in the underlying database.

        :param database_row_count_estimate: The database_row_count_estimate of this KeyValueStoreReplicaStatus.
        :type database_row_count_estimate: str
        """

        self._database_row_count_estimate = database_row_count_estimate

    @property
    def status_details(self):
        """Gets the status_details of this KeyValueStoreReplicaStatus.

        Value indicating the current status details of the replica.

        :return: The status_details of this KeyValueStoreReplicaStatus.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this KeyValueStoreReplicaStatus.

        Value indicating the current status details of the replica.

        :param status_details: The status_details of this KeyValueStoreReplicaStatus.
        :type status_details: str
        """

        self._status_details = status_details

    @property
    def kind(self):
        """Gets the kind of this KeyValueStoreReplicaStatus.


        :return: The kind of this KeyValueStoreReplicaStatus.
        :rtype: ReplicaKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this KeyValueStoreReplicaStatus.


        :param kind: The kind of this KeyValueStoreReplicaStatus.
        :type kind: ReplicaKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
