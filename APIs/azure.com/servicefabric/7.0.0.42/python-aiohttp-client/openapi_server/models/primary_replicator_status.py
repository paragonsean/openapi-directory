# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remote_replicator_status import RemoteReplicatorStatus
from openapi_server.models.replica_role import ReplicaRole
from openapi_server.models.replicator_queue_status import ReplicatorQueueStatus
from openapi_server.models.replicator_status import ReplicatorStatus
from openapi_server import util


class PrimaryReplicatorStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remote_replicators: List[RemoteReplicatorStatus]=None, replication_queue_status: ReplicatorQueueStatus=None, kind: ReplicaRole=None):
        """PrimaryReplicatorStatus - a model defined in OpenAPI

        :param remote_replicators: The remote_replicators of this PrimaryReplicatorStatus.
        :param replication_queue_status: The replication_queue_status of this PrimaryReplicatorStatus.
        :param kind: The kind of this PrimaryReplicatorStatus.
        """
        self.openapi_types = {
            'remote_replicators': List[RemoteReplicatorStatus],
            'replication_queue_status': ReplicatorQueueStatus,
            'kind': ReplicaRole
        }

        self.attribute_map = {
            'remote_replicators': 'RemoteReplicators',
            'replication_queue_status': 'ReplicationQueueStatus',
            'kind': 'Kind'
        }

        self._remote_replicators = remote_replicators
        self._replication_queue_status = replication_queue_status
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrimaryReplicatorStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrimaryReplicatorStatus of this PrimaryReplicatorStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remote_replicators(self):
        """Gets the remote_replicators of this PrimaryReplicatorStatus.

        List of remote replicator status

        :return: The remote_replicators of this PrimaryReplicatorStatus.
        :rtype: List[RemoteReplicatorStatus]
        """
        return self._remote_replicators

    @remote_replicators.setter
    def remote_replicators(self, remote_replicators):
        """Sets the remote_replicators of this PrimaryReplicatorStatus.

        List of remote replicator status

        :param remote_replicators: The remote_replicators of this PrimaryReplicatorStatus.
        :type remote_replicators: List[RemoteReplicatorStatus]
        """

        self._remote_replicators = remote_replicators

    @property
    def replication_queue_status(self):
        """Gets the replication_queue_status of this PrimaryReplicatorStatus.


        :return: The replication_queue_status of this PrimaryReplicatorStatus.
        :rtype: ReplicatorQueueStatus
        """
        return self._replication_queue_status

    @replication_queue_status.setter
    def replication_queue_status(self, replication_queue_status):
        """Sets the replication_queue_status of this PrimaryReplicatorStatus.


        :param replication_queue_status: The replication_queue_status of this PrimaryReplicatorStatus.
        :type replication_queue_status: ReplicatorQueueStatus
        """

        self._replication_queue_status = replication_queue_status

    @property
    def kind(self):
        """Gets the kind of this PrimaryReplicatorStatus.


        :return: The kind of this PrimaryReplicatorStatus.
        :rtype: ReplicaRole
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PrimaryReplicatorStatus.


        :param kind: The kind of this PrimaryReplicatorStatus.
        :type kind: ReplicaRole
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
