/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.DeployServicePackageToNodeDescription;
import org.openapitools.client.model.DeployedServicePackageHealth;
import org.openapitools.client.model.DeployedServicePackageInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicePackageApi
 */
@Disabled
public class ServicePackageApiTest {

    private final ServicePackageApi api = new ServicePackageApi();

    /**
     * Downloads all of the code packages associated with specified service manifest on the specified node.
     *
     * This API provides a way to download code packages including the container images on a specific node outside of the normal application deployment and upgrade path. This is useful for the large code packages and container images to be present on the node before the actual application deployment and upgrade, thus significantly reducing the total time required for the deployment or upgrade.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployServicePackageToNodeTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        DeployServicePackageToNodeDescription deployServicePackageToNodeDescription = null;
        Long timeout = null;
        api.deployServicePackageToNode(apiVersion, nodeName, deployServicePackageToNodeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about health of a service package for a specific application deployed for a Service Fabric node and application.
     *
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServicePackageHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String servicePackageName = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        DeployedServicePackageHealth response = api.getDeployedServicePackageHealth(apiVersion, nodeName, applicationId, servicePackageName, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about health of service package for a specific application deployed on a Service Fabric node using the specified policy.
     *
     * Gets the information about health of a service package for a specific application deployed on a Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed service package based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses &#39;ConsiderWarningAsError&#39; field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed service package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServicePackageHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String servicePackageName = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        DeployedServicePackageHealth response = api.getDeployedServicePackageHealthUsingPolicy(apiVersion, nodeName, applicationId, servicePackageName, eventsHealthStateFilter, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the list of service packages deployed on a Service Fabric node.
     *
     * Returns the information about the service packages deployed on a Service Fabric node for the given application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServicePackageInfoListTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        Long timeout = null;
        List<DeployedServicePackageInfo> response = api.getDeployedServicePackageInfoList(apiVersion, nodeName, applicationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of service packages deployed on a Service Fabric node matching exactly the specified name.
     *
     * Returns the information about the service packages deployed on a Service Fabric node for the given application. These results are of service packages whose name match exactly the service package name specified as the parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServicePackageInfoListByNameTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String servicePackageName = null;
        Long timeout = null;
        List<DeployedServicePackageInfo> response = api.getDeployedServicePackageInfoListByName(apiVersion, nodeName, applicationId, servicePackageName, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric deployed service package.
     *
     * Reports health state of the service package of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get deployed service package health and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportDeployedServicePackageHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String servicePackageName = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportDeployedServicePackageHealth(apiVersion, nodeName, applicationId, servicePackageName, healthInformation, immediate, timeout);
        // TODO: test validations
    }

}
