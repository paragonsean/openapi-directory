/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeId;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for LoadMetricInformation
 */
public class LoadMetricInformationTest {
    private final LoadMetricInformation model = new LoadMetricInformation();

    /**
     * Model tests for LoadMetricInformation
     */
    @Test
    public void testLoadMetricInformation() {
        // TODO: test LoadMetricInformation
    }

    /**
     * Test the property 'action'
     */
    @Test
    public void actionTest() {
        // TODO: test action
    }

    /**
     * Test the property 'activityThreshold'
     */
    @Test
    public void activityThresholdTest() {
        // TODO: test activityThreshold
    }

    /**
     * Test the property 'balancingThreshold'
     */
    @Test
    public void balancingThresholdTest() {
        // TODO: test balancingThreshold
    }

    /**
     * Test the property 'bufferedClusterCapacityRemaining'
     */
    @Test
    public void bufferedClusterCapacityRemainingTest() {
        // TODO: test bufferedClusterCapacityRemaining
    }

    /**
     * Test the property 'clusterBufferedCapacity'
     */
    @Test
    public void clusterBufferedCapacityTest() {
        // TODO: test clusterBufferedCapacity
    }

    /**
     * Test the property 'clusterCapacity'
     */
    @Test
    public void clusterCapacityTest() {
        // TODO: test clusterCapacity
    }

    /**
     * Test the property 'clusterCapacityRemaining'
     */
    @Test
    public void clusterCapacityRemainingTest() {
        // TODO: test clusterCapacityRemaining
    }

    /**
     * Test the property 'clusterLoad'
     */
    @Test
    public void clusterLoadTest() {
        // TODO: test clusterLoad
    }

    /**
     * Test the property 'clusterRemainingBufferedCapacity'
     */
    @Test
    public void clusterRemainingBufferedCapacityTest() {
        // TODO: test clusterRemainingBufferedCapacity
    }

    /**
     * Test the property 'clusterRemainingCapacity'
     */
    @Test
    public void clusterRemainingCapacityTest() {
        // TODO: test clusterRemainingCapacity
    }

    /**
     * Test the property 'currentClusterLoad'
     */
    @Test
    public void currentClusterLoadTest() {
        // TODO: test currentClusterLoad
    }

    /**
     * Test the property 'deviationAfter'
     */
    @Test
    public void deviationAfterTest() {
        // TODO: test deviationAfter
    }

    /**
     * Test the property 'deviationBefore'
     */
    @Test
    public void deviationBeforeTest() {
        // TODO: test deviationBefore
    }

    /**
     * Test the property 'isBalancedAfter'
     */
    @Test
    public void isBalancedAfterTest() {
        // TODO: test isBalancedAfter
    }

    /**
     * Test the property 'isBalancedBefore'
     */
    @Test
    public void isBalancedBeforeTest() {
        // TODO: test isBalancedBefore
    }

    /**
     * Test the property 'isClusterCapacityViolation'
     */
    @Test
    public void isClusterCapacityViolationTest() {
        // TODO: test isClusterCapacityViolation
    }

    /**
     * Test the property 'maxNodeLoadNodeId'
     */
    @Test
    public void maxNodeLoadNodeIdTest() {
        // TODO: test maxNodeLoadNodeId
    }

    /**
     * Test the property 'maxNodeLoadValue'
     */
    @Test
    public void maxNodeLoadValueTest() {
        // TODO: test maxNodeLoadValue
    }

    /**
     * Test the property 'maximumNodeLoad'
     */
    @Test
    public void maximumNodeLoadTest() {
        // TODO: test maximumNodeLoad
    }

    /**
     * Test the property 'minNodeLoadNodeId'
     */
    @Test
    public void minNodeLoadNodeIdTest() {
        // TODO: test minNodeLoadNodeId
    }

    /**
     * Test the property 'minNodeLoadValue'
     */
    @Test
    public void minNodeLoadValueTest() {
        // TODO: test minNodeLoadValue
    }

    /**
     * Test the property 'minimumNodeLoad'
     */
    @Test
    public void minimumNodeLoadTest() {
        // TODO: test minimumNodeLoad
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nodeBufferPercentage'
     */
    @Test
    public void nodeBufferPercentageTest() {
        // TODO: test nodeBufferPercentage
    }

    /**
     * Test the property 'plannedLoadRemoval'
     */
    @Test
    public void plannedLoadRemovalTest() {
        // TODO: test plannedLoadRemoval
    }

}
