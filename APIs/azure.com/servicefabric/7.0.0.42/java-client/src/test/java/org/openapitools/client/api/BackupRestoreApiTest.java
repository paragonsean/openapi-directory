/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupPartitionDescription;
import org.openapitools.client.model.BackupPolicyDescription;
import org.openapitools.client.model.BackupProgressInfo;
import org.openapitools.client.model.DisableBackupDescription;
import org.openapitools.client.model.EnableBackupDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.GetBackupByStorageQueryDescription;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PagedBackupConfigurationInfoList;
import org.openapitools.client.model.PagedBackupEntityList;
import org.openapitools.client.model.PagedBackupInfoList;
import org.openapitools.client.model.PagedBackupPolicyDescriptionList;
import org.openapitools.client.model.PartitionBackupConfigurationInfo;
import org.openapitools.client.model.RestorePartitionDescription;
import org.openapitools.client.model.RestoreProgressInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BackupRestoreApi
 */
@Disabled
public class BackupRestoreApiTest {

    private final BackupRestoreApi api = new BackupRestoreApi();

    /**
     * Triggers backup of the partition&#39;s state.
     *
     * Creates a backup of the stateful persisted partition&#39;s state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation.  In case, the operation times out, specify a greater backup timeout value in the query parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backupPartitionTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Integer backupTimeout = null;
        Long timeout = null;
        BackupPartitionDescription backupPartitionDescription = null;
        api.backupPartition(partitionId, apiVersion, backupTimeout, timeout, backupPartitionDescription);
        // TODO: test validations
    }

    /**
     * Creates a backup policy.
     *
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackupPolicyTest() throws ApiException {
        String apiVersion = null;
        BackupPolicyDescription backupPolicyDescription = null;
        Long timeout = null;
        api.createBackupPolicy(apiVersion, backupPolicyDescription, timeout);
        // TODO: test validations
    }

    /**
     * Deletes the backup policy.
     *
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackupPolicyTest() throws ApiException {
        String backupPolicyName = null;
        String apiVersion = null;
        Long timeout = null;
        api.deleteBackupPolicy(backupPolicyName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Disables periodic backup of Service Fabric application.
     *
     * Disables periodic backup of Service Fabric application which was previously enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableApplicationBackupTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Long timeout = null;
        DisableBackupDescription disableBackupDescription = null;
        api.disableApplicationBackup(applicationId, apiVersion, timeout, disableBackupDescription);
        // TODO: test validations
    }

    /**
     * Disables periodic backup of Service Fabric partition which was previously enabled.
     *
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled.  In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disablePartitionBackupTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        DisableBackupDescription disableBackupDescription = null;
        api.disablePartitionBackup(partitionId, apiVersion, timeout, disableBackupDescription);
        // TODO: test validations
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled.
     *
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableServiceBackupTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        DisableBackupDescription disableBackupDescription = null;
        api.disableServiceBackup(serviceId, apiVersion, timeout, disableBackupDescription);
        // TODO: test validations
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric application.
     *
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description.  Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableApplicationBackupTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        EnableBackupDescription enableBackupDescription = null;
        Long timeout = null;
        api.enableApplicationBackup(applicationId, apiVersion, enableBackupDescription, timeout);
        // TODO: test validations
    }

    /**
     * Enables periodic backup of the stateful persisted partition.
     *
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition. Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enablePartitionBackupTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        EnableBackupDescription enableBackupDescription = null;
        Long timeout = null;
        api.enablePartitionBackup(partitionId, apiVersion, enableBackupDescription, timeout);
        // TODO: test validations
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric service.
     *
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableServiceBackupTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        EnableBackupDescription enableBackupDescription = null;
        Long timeout = null;
        api.enableServiceBackup(serviceId, apiVersion, enableBackupDescription, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of backup entities that are associated with this policy.
     *
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEntitiesBackedUpByPolicyTest() throws ApiException {
        String backupPolicyName = null;
        String apiVersion = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedBackupEntityList response = api.getAllEntitiesBackedUpByPolicy(backupPolicyName, apiVersion, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the Service Fabric application backup configuration information.
     *
     * Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationBackupConfigurationInfoTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedBackupConfigurationInfoList response = api.getApplicationBackupConfigurationInfo(applicationId, apiVersion, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of backups available for every partition in this application.
     *
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationBackupListTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Long timeout = null;
        Boolean latest = null;
        OffsetDateTime startDateTimeFilter = null;
        OffsetDateTime endDateTimeFilter = null;
        String continuationToken = null;
        Long maxResults = null;
        PagedBackupInfoList response = api.getApplicationBackupList(applicationId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults);
        // TODO: test validations
    }

    /**
     * Gets a particular backup policy by name.
     *
     * Gets a particular backup policy identified by {backupPolicyName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupPolicyByNameTest() throws ApiException {
        String backupPolicyName = null;
        String apiVersion = null;
        Long timeout = null;
        BackupPolicyDescription response = api.getBackupPolicyByName(backupPolicyName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets all the backup policies configured.
     *
     * Get a list of all the backup policies configured.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupPolicyListTest() throws ApiException {
        String apiVersion = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedBackupPolicyDescriptionList response = api.getBackupPolicyList(apiVersion, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of backups available for the specified backed up entity at the specified backup location.
     *
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupsFromBackupLocationTest() throws ApiException {
        String apiVersion = null;
        GetBackupByStorageQueryDescription getBackupByStorageQueryDescription = null;
        Long timeout = null;
        String continuationToken = null;
        Long maxResults = null;
        PagedBackupInfoList response = api.getBackupsFromBackupLocation(apiVersion, getBackupByStorageQueryDescription, timeout, continuationToken, maxResults);
        // TODO: test validations
    }

    /**
     * Gets the partition backup configuration information
     *
     * Gets the Service Fabric Backup configuration information for the specified partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionBackupConfigurationInfoTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        PartitionBackupConfigurationInfo response = api.getPartitionBackupConfigurationInfo(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of backups available for the specified partition.
     *
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionBackupListTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        Boolean latest = null;
        OffsetDateTime startDateTimeFilter = null;
        OffsetDateTime endDateTimeFilter = null;
        PagedBackupInfoList response = api.getPartitionBackupList(partitionId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter);
        // TODO: test validations
    }

    /**
     * Gets details for the latest backup triggered for this partition.
     *
     * Returns information about the state of the latest backup along with details or failure reason in case of completion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionBackupProgressTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        BackupProgressInfo response = api.getPartitionBackupProgress(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets details for the latest restore operation triggered for this partition.
     *
     * Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionRestoreProgressTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        RestoreProgressInfo response = api.getPartitionRestoreProgress(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the Service Fabric service backup configuration information.
     *
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceBackupConfigurationInfoTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedBackupConfigurationInfoList response = api.getServiceBackupConfigurationInfo(serviceId, apiVersion, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of backups available for every partition in this service.
     *
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceBackupListTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        Boolean latest = null;
        OffsetDateTime startDateTimeFilter = null;
        OffsetDateTime endDateTimeFilter = null;
        String continuationToken = null;
        Long maxResults = null;
        PagedBackupInfoList response = api.getServiceBackupList(serviceId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults);
        // TODO: test validations
    }

    /**
     * Triggers restore of the state of the partition using the specified restore partition description.
     *
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation.  In case, the operation times out, specify a greater restore timeout value in the query parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restorePartitionTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        RestorePartitionDescription restorePartitionDescription = null;
        Integer restoreTimeout = null;
        Long timeout = null;
        api.restorePartition(partitionId, apiVersion, restorePartitionDescription, restoreTimeout, timeout);
        // TODO: test validations
    }

    /**
     * Resumes periodic backup of a Service Fabric application which was previously suspended.
     *
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeApplicationBackupTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Long timeout = null;
        api.resumeApplicationBackup(applicationId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Resumes periodic backup of partition which was previously suspended.
     *
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumePartitionBackupTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        api.resumePartitionBackup(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Resumes periodic backup of a Service Fabric service which was previously suspended.
     *
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeServiceBackupTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        api.resumeServiceBackup(serviceId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Suspends periodic backup for the specified Service Fabric application.
     *
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application&#39;s hierarchy. It means all the services and partitions under this application are now suspended for backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendApplicationBackupTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Long timeout = null;
        api.suspendApplicationBackup(applicationId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Suspends periodic backup for the specified partition.
     *
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendPartitionBackupTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        api.suspendPartitionBackup(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Suspends periodic backup for the specified Service Fabric service.
     *
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service&#39;s hierarchy. It means all the partitions under this service are now suspended for backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendServiceBackupTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        api.suspendServiceBackup(serviceId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Updates the backup policy.
     *
     * Updates the backup policy identified by {backupPolicyName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackupPolicyTest() throws ApiException {
        String backupPolicyName = null;
        String apiVersion = null;
        BackupPolicyDescription backupPolicyDescription = null;
        Long timeout = null;
        api.updateBackupPolicy(backupPolicyName, apiVersion, backupPolicyDescription, timeout);
        // TODO: test validations
    }

}
