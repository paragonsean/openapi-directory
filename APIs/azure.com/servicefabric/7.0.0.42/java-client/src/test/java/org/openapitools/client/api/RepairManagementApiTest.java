/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.RepairTask;
import org.openapitools.client.model.RepairTaskApproveDescription;
import org.openapitools.client.model.RepairTaskCancelDescription;
import org.openapitools.client.model.RepairTaskDeleteDescription;
import org.openapitools.client.model.RepairTaskUpdateHealthPolicyDescription;
import org.openapitools.client.model.RepairTaskUpdateInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepairManagementApi
 */
@Disabled
public class RepairManagementApiTest {

    private final RepairManagementApi api = new RepairManagementApi();

    /**
     * Requests the cancellation of the given repair task.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRepairTaskTest() throws ApiException {
        String apiVersion = null;
        RepairTaskCancelDescription repairTaskCancelDescription = null;
        RepairTaskUpdateInfo response = api.cancelRepairTask(apiVersion, repairTaskCancelDescription);
        // TODO: test validations
    }

    /**
     * Creates a new repair task.
     *
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be running for each repair action to run automatically. These are currently only available in specially-configured Azure Cloud Services.  To create a manual repair task, provide the set of impacted node names and the expected impact. When the state of the created repair task changes to approved, you can safely perform repair actions on those nodes.  This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepairTaskTest() throws ApiException {
        String apiVersion = null;
        RepairTask repairTask = null;
        RepairTaskUpdateInfo response = api.createRepairTask(apiVersion, repairTask);
        // TODO: test validations
    }

    /**
     * Deletes a completed repair task.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepairTaskTest() throws ApiException {
        String apiVersion = null;
        RepairTaskDeleteDescription repairTaskDeleteDescription = null;
        api.deleteRepairTask(apiVersion, repairTaskDeleteDescription);
        // TODO: test validations
    }

    /**
     * Forces the approval of the given repair task.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forceApproveRepairTaskTest() throws ApiException {
        String apiVersion = null;
        RepairTaskApproveDescription repairTaskApproveDescription = null;
        RepairTaskUpdateInfo response = api.forceApproveRepairTask(apiVersion, repairTaskApproveDescription);
        // TODO: test validations
    }

    /**
     * Gets a list of repair tasks matching the given filters.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepairTaskListTest() throws ApiException {
        String apiVersion = null;
        String taskIdFilter = null;
        Integer stateFilter = null;
        String executorFilter = null;
        List<RepairTask> response = api.getRepairTaskList(apiVersion, taskIdFilter, stateFilter, executorFilter);
        // TODO: test validations
    }

    /**
     * Updates the execution state of a repair task.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepairExecutionStateTest() throws ApiException {
        String apiVersion = null;
        RepairTask repairTask = null;
        RepairTaskUpdateInfo response = api.updateRepairExecutionState(apiVersion, repairTask);
        // TODO: test validations
    }

    /**
     * Updates the health policy of the given repair task.
     *
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepairTaskHealthPolicyTest() throws ApiException {
        String apiVersion = null;
        RepairTaskUpdateHealthPolicyDescription repairTaskUpdateHealthPolicyDescription = null;
        RepairTaskUpdateInfo response = api.updateRepairTaskHealthPolicy(apiVersion, repairTaskUpdateHealthPolicyDescription);
        // TODO: test validations
    }

}
