/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupPartitionDescription;
import org.openapitools.client.model.BackupPolicyDescription;
import org.openapitools.client.model.BackupProgressInfo;
import org.openapitools.client.model.DisableBackupDescription;
import org.openapitools.client.model.EnableBackupDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.GetBackupByStorageQueryDescription;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PagedBackupConfigurationInfoList;
import org.openapitools.client.model.PagedBackupEntityList;
import org.openapitools.client.model.PagedBackupInfoList;
import org.openapitools.client.model.PagedBackupPolicyDescriptionList;
import org.openapitools.client.model.PartitionBackupConfigurationInfo;
import org.openapitools.client.model.RestorePartitionDescription;
import org.openapitools.client.model.RestoreProgressInfo;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupRestoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackupRestoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupRestoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for backupPartition
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and backup will be initiated. Use GetPartitionBackupProgress operation to get the status of the backup operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPartitionCall(UUID partitionId, String apiVersion, Integer backupTimeout, Long timeout, BackupPartitionDescription backupPartitionDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backupPartitionDescription;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/Backup"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (backupTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupTimeout", backupTimeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupPartitionValidateBeforeCall(UUID partitionId, String apiVersion, Integer backupTimeout, Long timeout, BackupPartitionDescription backupPartitionDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling backupPartition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupPartition(Async)");
        }

        return backupPartitionCall(partitionId, apiVersion, backupTimeout, timeout, backupPartitionDescription, _callback);

    }

    /**
     * Triggers backup of the partition&#39;s state.
     * Creates a backup of the stateful persisted partition&#39;s state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation.  In case, the operation times out, specify a greater backup timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and backup will be initiated. Use GetPartitionBackupProgress operation to get the status of the backup operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void backupPartition(UUID partitionId, String apiVersion, Integer backupTimeout, Long timeout, BackupPartitionDescription backupPartitionDescription) throws ApiException {
        backupPartitionWithHttpInfo(partitionId, apiVersion, backupTimeout, timeout, backupPartitionDescription);
    }

    /**
     * Triggers backup of the partition&#39;s state.
     * Creates a backup of the stateful persisted partition&#39;s state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation.  In case, the operation times out, specify a greater backup timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and backup will be initiated. Use GetPartitionBackupProgress operation to get the status of the backup operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> backupPartitionWithHttpInfo(UUID partitionId, String apiVersion, Integer backupTimeout, Long timeout, BackupPartitionDescription backupPartitionDescription) throws ApiException {
        okhttp3.Call localVarCall = backupPartitionValidateBeforeCall(partitionId, apiVersion, backupTimeout, timeout, backupPartitionDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Triggers backup of the partition&#39;s state. (asynchronously)
     * Creates a backup of the stateful persisted partition&#39;s state. In case the partition is already being periodically backed up, then by default the new backup is created at the same backup storage. One can also override the same by specifying the backup storage details as part of the request body. Once the backup is initiated, its progress can be tracked using the GetBackupProgress operation.  In case, the operation times out, specify a greater backup timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupTimeout Specifies the maximum amount of time, in minutes, to wait for the backup operation to complete. Post that, the operation completes with timeout error. However, in certain corner cases it could be that though the operation returns back timeout, the backup actually goes through. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. The default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param backupPartitionDescription Describes the parameters to backup the partition now. If not present, backup operation uses default parameters from the backup policy current associated with this partition. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and backup will be initiated. Use GetPartitionBackupProgress operation to get the status of the backup operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupPartitionAsync(UUID partitionId, String apiVersion, Integer backupTimeout, Long timeout, BackupPartitionDescription backupPartitionDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupPartitionValidateBeforeCall(partitionId, apiVersion, backupTimeout, timeout, backupPartitionDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBackupPolicy
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful operation returns 201 status code and creates a new backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupPolicyCall(String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backupPolicyDescription;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies/$/Create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBackupPolicyValidateBeforeCall(String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling createBackupPolicy(Async)");
        }

        // verify the required parameter 'backupPolicyDescription' is set
        if (backupPolicyDescription == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyDescription' when calling createBackupPolicy(Async)");
        }

        return createBackupPolicyCall(apiVersion, backupPolicyDescription, timeout, _callback);

    }

    /**
     * Creates a backup policy.
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful operation returns 201 status code and creates a new backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void createBackupPolicy(String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout) throws ApiException {
        createBackupPolicyWithHttpInfo(apiVersion, backupPolicyDescription, timeout);
    }

    /**
     * Creates a backup policy.
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful operation returns 201 status code and creates a new backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createBackupPolicyWithHttpInfo(String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = createBackupPolicyValidateBeforeCall(apiVersion, backupPolicyDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a backup policy. (asynchronously)
     * Creates a backup policy which can be associated later with a Service Fabric application, service or a partition for periodic backup.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful operation returns 201 status code and creates a new backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBackupPolicyAsync(String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBackupPolicyValidateBeforeCall(apiVersion, backupPolicyDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBackupPolicy
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and deletes the backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupPolicyCall(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete"
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBackupPolicyValidateBeforeCall(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling deleteBackupPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteBackupPolicy(Async)");
        }

        return deleteBackupPolicyCall(backupPolicyName, apiVersion, timeout, _callback);

    }

    /**
     * Deletes the backup policy.
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and deletes the backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBackupPolicy(String backupPolicyName, String apiVersion, Long timeout) throws ApiException {
        deleteBackupPolicyWithHttpInfo(backupPolicyName, apiVersion, timeout);
    }

    /**
     * Deletes the backup policy.
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and deletes the backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBackupPolicyWithHttpInfo(String backupPolicyName, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = deleteBackupPolicyValidateBeforeCall(backupPolicyName, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the backup policy. (asynchronously)
     * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A currently active backup policy, associated with any Service Fabric application, service or partition, cannot be deleted without first deleting the mapping.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and deletes the backup policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBackupPolicyAsync(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBackupPolicyValidateBeforeCall(backupPolicyName, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableApplicationBackup
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableApplicationBackupCall(String applicationId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableBackupDescription;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/DisableBackup"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableApplicationBackupValidateBeforeCall(String applicationId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling disableApplicationBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disableApplicationBackup(Async)");
        }

        return disableApplicationBackupCall(applicationId, apiVersion, timeout, disableBackupDescription, _callback);

    }

    /**
     * Disables periodic backup of Service Fabric application.
     * Disables periodic backup of Service Fabric application which was previously enabled.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void disableApplicationBackup(String applicationId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        disableApplicationBackupWithHttpInfo(applicationId, apiVersion, timeout, disableBackupDescription);
    }

    /**
     * Disables periodic backup of Service Fabric application.
     * Disables periodic backup of Service Fabric application which was previously enabled.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disableApplicationBackupWithHttpInfo(String applicationId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        okhttp3.Call localVarCall = disableApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, disableBackupDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables periodic backup of Service Fabric application. (asynchronously)
     * Disables periodic backup of Service Fabric application which was previously enabled.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableApplicationBackupAsync(String applicationId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, disableBackupDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disablePartitionBackup
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disablePartitionBackupCall(UUID partitionId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableBackupDescription;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/DisableBackup"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disablePartitionBackupValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling disablePartitionBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disablePartitionBackup(Async)");
        }

        return disablePartitionBackupCall(partitionId, apiVersion, timeout, disableBackupDescription, _callback);

    }

    /**
     * Disables periodic backup of Service Fabric partition which was previously enabled.
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled.  In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void disablePartitionBackup(UUID partitionId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        disablePartitionBackupWithHttpInfo(partitionId, apiVersion, timeout, disableBackupDescription);
    }

    /**
     * Disables periodic backup of Service Fabric partition which was previously enabled.
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled.  In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disablePartitionBackupWithHttpInfo(UUID partitionId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        okhttp3.Call localVarCall = disablePartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, disableBackupDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables periodic backup of Service Fabric partition which was previously enabled. (asynchronously)
     * Disables periodic backup of partition which was previously enabled. Backup must be explicitly enabled before it can be disabled.  In case the backup is enabled for the Service Fabric application or service, which this partition is part of, this partition would continue to be periodically backed up as per the policy mapped at the higher level entity.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disablePartitionBackupAsync(UUID partitionId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disablePartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, disableBackupDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableServiceBackup
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableServiceBackupCall(String serviceId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableBackupDescription;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/DisableBackup"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableServiceBackupValidateBeforeCall(String serviceId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling disableServiceBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disableServiceBackup(Async)");
        }

        return disableServiceBackupCall(serviceId, apiVersion, timeout, disableBackupDescription, _callback);

    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled.
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void disableServiceBackup(String serviceId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        disableServiceBackupWithHttpInfo(serviceId, apiVersion, timeout, disableBackupDescription);
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled.
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> disableServiceBackupWithHttpInfo(String serviceId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription) throws ApiException {
        okhttp3.Call localVarCall = disableServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, disableBackupDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables periodic backup of Service Fabric service which was previously enabled. (asynchronously)
     * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be explicitly enabled before it can be disabled. In case the backup is enabled for the Service Fabric application, which this service is part of, this service would continue to be periodically backed up as per the policy mapped at the application level.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param disableBackupDescription Specifies the parameters to disable backup for any backup entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to disable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableServiceBackupAsync(String serviceId, String apiVersion, Long timeout, DisableBackupDescription disableBackupDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, disableBackupDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableApplicationBackup
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableApplicationBackupCall(String applicationId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableBackupDescription;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/EnableBackup"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableApplicationBackupValidateBeforeCall(String applicationId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling enableApplicationBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enableApplicationBackup(Async)");
        }

        // verify the required parameter 'enableBackupDescription' is set
        if (enableBackupDescription == null) {
            throw new ApiException("Missing the required parameter 'enableBackupDescription' when calling enableApplicationBackup(Async)");
        }

        return enableApplicationBackupCall(applicationId, apiVersion, enableBackupDescription, timeout, _callback);

    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric application.
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description.  Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void enableApplicationBackup(String applicationId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        enableApplicationBackupWithHttpInfo(applicationId, apiVersion, enableBackupDescription, timeout);
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric application.
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description.  Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enableApplicationBackupWithHttpInfo(String applicationId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = enableApplicationBackupValidateBeforeCall(applicationId, apiVersion, enableBackupDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric application. (asynchronously)
     * Enables periodic backup of stateful partitions which are part of this Service Fabric application. Each partition is backed up individually as per the specified backup policy description.  Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable application backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableApplicationBackupAsync(String applicationId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableApplicationBackupValidateBeforeCall(applicationId, apiVersion, enableBackupDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enablePartitionBackup
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enablePartitionBackupCall(UUID partitionId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableBackupDescription;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/EnableBackup"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enablePartitionBackupValidateBeforeCall(UUID partitionId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling enablePartitionBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enablePartitionBackup(Async)");
        }

        // verify the required parameter 'enableBackupDescription' is set
        if (enableBackupDescription == null) {
            throw new ApiException("Missing the required parameter 'enableBackupDescription' when calling enablePartitionBackup(Async)");
        }

        return enablePartitionBackupCall(partitionId, apiVersion, enableBackupDescription, timeout, _callback);

    }

    /**
     * Enables periodic backup of the stateful persisted partition.
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition. Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void enablePartitionBackup(UUID partitionId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        enablePartitionBackupWithHttpInfo(partitionId, apiVersion, enableBackupDescription, timeout);
    }

    /**
     * Enables periodic backup of the stateful persisted partition.
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition. Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enablePartitionBackupWithHttpInfo(UUID partitionId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = enablePartitionBackupValidateBeforeCall(partitionId, apiVersion, enableBackupDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enables periodic backup of the stateful persisted partition. (asynchronously)
     * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the specified backup policy description. In case the application or service, which is partition is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup of this partition. Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable partition backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enablePartitionBackupAsync(UUID partitionId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enablePartitionBackupValidateBeforeCall(partitionId, apiVersion, enableBackupDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableServiceBackup
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableServiceBackupCall(String serviceId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableBackupDescription;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/EnableBackup"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableServiceBackupValidateBeforeCall(String serviceId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling enableServiceBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enableServiceBackup(Async)");
        }

        // verify the required parameter 'enableBackupDescription' is set
        if (enableBackupDescription == null) {
            throw new ApiException("Missing the required parameter 'enableBackupDescription' when calling enableServiceBackup(Async)");
        }

        return enableServiceBackupCall(serviceId, apiVersion, enableBackupDescription, timeout, _callback);

    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric service.
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void enableServiceBackup(String serviceId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        enableServiceBackupWithHttpInfo(serviceId, apiVersion, enableBackupDescription, timeout);
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric service.
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enableServiceBackupWithHttpInfo(String serviceId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = enableServiceBackupValidateBeforeCall(serviceId, apiVersion, enableBackupDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enables periodic backup of stateful partitions under this Service Fabric service. (asynchronously)
     * Enables periodic backup of stateful partitions which are part of this Service Fabric service. Each partition is backed up individually as per the specified backup policy description. In case the application, which the service is part of, is already enabled for backup then this operation would override the policy being used to take the periodic backup for this service and its partitions (unless explicitly overridden at the partition level). Note only C# based Reliable Actor and Reliable Stateful services are currently supported for periodic backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param enableBackupDescription Specifies the parameters for enabling backup. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the request to enable service backup has been accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableServiceBackupAsync(String serviceId, String apiVersion, EnableBackupDescription enableBackupDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableServiceBackupValidateBeforeCall(serviceId, apiVersion, enableBackupDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllEntitiesBackedUpByPolicy
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of Service Fabric entities that are associated with this policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllEntitiesBackedUpByPolicyCall(String backupPolicyName, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities"
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllEntitiesBackedUpByPolicyValidateBeforeCall(String backupPolicyName, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling getAllEntitiesBackedUpByPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getAllEntitiesBackedUpByPolicy(Async)");
        }

        return getAllEntitiesBackedUpByPolicyCall(backupPolicyName, apiVersion, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the list of backup entities that are associated with this policy.
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedBackupEntityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of Service Fabric entities that are associated with this policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupEntityList getAllEntitiesBackedUpByPolicy(String backupPolicyName, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedBackupEntityList> localVarResp = getAllEntitiesBackedUpByPolicyWithHttpInfo(backupPolicyName, apiVersion, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the list of backup entities that are associated with this policy.
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedBackupEntityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of Service Fabric entities that are associated with this policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupEntityList> getAllEntitiesBackedUpByPolicyWithHttpInfo(String backupPolicyName, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getAllEntitiesBackedUpByPolicyValidateBeforeCall(backupPolicyName, apiVersion, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedBackupEntityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of backup entities that are associated with this policy. (asynchronously)
     * Returns a list of Service Fabric application, service or partition which are associated with this backup policy.
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of Service Fabric entities that are associated with this policy. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllEntitiesBackedUpByPolicyAsync(String backupPolicyName, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedBackupEntityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllEntitiesBackedUpByPolicyValidateBeforeCall(backupPolicyName, apiVersion, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupEntityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationBackupConfigurationInfo
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the application, and the services and partitions under this application, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationBackupConfigurationInfoCall(String applicationId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/GetBackupConfigurationInfo"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationBackupConfigurationInfoValidateBeforeCall(String applicationId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationBackupConfigurationInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationBackupConfigurationInfo(Async)");
        }

        return getApplicationBackupConfigurationInfoCall(applicationId, apiVersion, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the Service Fabric application backup configuration information.
     * Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedBackupConfigurationInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the application, and the services and partitions under this application, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupConfigurationInfoList getApplicationBackupConfigurationInfo(String applicationId, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedBackupConfigurationInfoList> localVarResp = getApplicationBackupConfigurationInfoWithHttpInfo(applicationId, apiVersion, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the Service Fabric application backup configuration information.
     * Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedBackupConfigurationInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the application, and the services and partitions under this application, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupConfigurationInfoList> getApplicationBackupConfigurationInfoWithHttpInfo(String applicationId, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getApplicationBackupConfigurationInfoValidateBeforeCall(applicationId, apiVersion, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedBackupConfigurationInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Service Fabric application backup configuration information. (asynchronously)
     * Gets the Service Fabric backup configuration information for the application and the services and partitions under this application.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the application, and the services and partitions under this application, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationBackupConfigurationInfoAsync(String applicationId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedBackupConfigurationInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationBackupConfigurationInfoValidateBeforeCall(applicationId, apiVersion, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupConfigurationInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationBackupList
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationBackupListCall(String applicationId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/GetBackups"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (latest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Latest", latest));
        }

        if (startDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDateTimeFilter", startDateTimeFilter));
        }

        if (endDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDateTimeFilter", endDateTimeFilter));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationBackupListValidateBeforeCall(String applicationId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationBackupList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationBackupList(Async)");
        }

        return getApplicationBackupListCall(applicationId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, _callback);

    }

    /**
     * Gets the list of backups available for every partition in this application.
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return PagedBackupInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupInfoList getApplicationBackupList(String applicationId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults) throws ApiException {
        ApiResponse<PagedBackupInfoList> localVarResp = getApplicationBackupListWithHttpInfo(applicationId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * Gets the list of backups available for every partition in this application.
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return ApiResponse&lt;PagedBackupInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupInfoList> getApplicationBackupListWithHttpInfo(String applicationId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults) throws ApiException {
        okhttp3.Call localVarCall = getApplicationBackupListValidateBeforeCall(applicationId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, null);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of backups available for every partition in this application. (asynchronously)
     * Returns a list of backups available for every partition in this Service Fabric application. The server enumerates all the backups available at the backup location configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationBackupListAsync(String applicationId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback<PagedBackupInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationBackupListValidateBeforeCall(applicationId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackupPolicyByName
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupPolicyByNameCall(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies/{backupPolicyName}"
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupPolicyByNameValidateBeforeCall(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling getBackupPolicyByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getBackupPolicyByName(Async)");
        }

        return getBackupPolicyByNameCall(backupPolicyName, apiVersion, timeout, _callback);

    }

    /**
     * Gets a particular backup policy by name.
     * Gets a particular backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return BackupPolicyDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupPolicyDescription getBackupPolicyByName(String backupPolicyName, String apiVersion, Long timeout) throws ApiException {
        ApiResponse<BackupPolicyDescription> localVarResp = getBackupPolicyByNameWithHttpInfo(backupPolicyName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets a particular backup policy by name.
     * Gets a particular backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;BackupPolicyDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupPolicyDescription> getBackupPolicyByNameWithHttpInfo(String backupPolicyName, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getBackupPolicyByNameValidateBeforeCall(backupPolicyName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<BackupPolicyDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a particular backup policy by name. (asynchronously)
     * Gets a particular backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupPolicyByNameAsync(String backupPolicyName, String apiVersion, Long timeout, final ApiCallback<BackupPolicyDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupPolicyByNameValidateBeforeCall(backupPolicyName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<BackupPolicyDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackupPolicyList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and paged list of backup policies. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupPolicyListCall(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupPolicyListValidateBeforeCall(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getBackupPolicyList(Async)");
        }

        return getBackupPolicyListCall(apiVersion, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets all the backup policies configured.
     * Get a list of all the backup policies configured.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedBackupPolicyDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and paged list of backup policies. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupPolicyDescriptionList getBackupPolicyList(String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedBackupPolicyDescriptionList> localVarResp = getBackupPolicyListWithHttpInfo(apiVersion, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets all the backup policies configured.
     * Get a list of all the backup policies configured.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedBackupPolicyDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and paged list of backup policies. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupPolicyDescriptionList> getBackupPolicyListWithHttpInfo(String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getBackupPolicyListValidateBeforeCall(apiVersion, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedBackupPolicyDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the backup policies configured. (asynchronously)
     * Get a list of all the backup policies configured.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and paged list of backup policies. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupPolicyListAsync(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedBackupPolicyDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupPolicyListValidateBeforeCall(apiVersion, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupPolicyDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackupsFromBackupLocation
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for enumerating backups. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupsFromBackupLocationCall(String apiVersion, GetBackupByStorageQueryDescription getBackupByStorageQueryDescription, Long timeout, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBackupByStorageQueryDescription;

        // create path and map variables
        String localVarPath = "/BackupRestore/$/GetBackups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupsFromBackupLocationValidateBeforeCall(String apiVersion, GetBackupByStorageQueryDescription getBackupByStorageQueryDescription, Long timeout, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getBackupsFromBackupLocation(Async)");
        }

        // verify the required parameter 'getBackupByStorageQueryDescription' is set
        if (getBackupByStorageQueryDescription == null) {
            throw new ApiException("Missing the required parameter 'getBackupByStorageQueryDescription' when calling getBackupsFromBackupLocation(Async)");
        }

        return getBackupsFromBackupLocationCall(apiVersion, getBackupByStorageQueryDescription, timeout, continuationToken, maxResults, _callback);

    }

    /**
     * Gets the list of backups available for the specified backed up entity at the specified backup location.
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for enumerating backups. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return PagedBackupInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupInfoList getBackupsFromBackupLocation(String apiVersion, GetBackupByStorageQueryDescription getBackupByStorageQueryDescription, Long timeout, String continuationToken, Long maxResults) throws ApiException {
        ApiResponse<PagedBackupInfoList> localVarResp = getBackupsFromBackupLocationWithHttpInfo(apiVersion, getBackupByStorageQueryDescription, timeout, continuationToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * Gets the list of backups available for the specified backed up entity at the specified backup location.
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for enumerating backups. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return ApiResponse&lt;PagedBackupInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupInfoList> getBackupsFromBackupLocationWithHttpInfo(String apiVersion, GetBackupByStorageQueryDescription getBackupByStorageQueryDescription, Long timeout, String continuationToken, Long maxResults) throws ApiException {
        okhttp3.Call localVarCall = getBackupsFromBackupLocationValidateBeforeCall(apiVersion, getBackupByStorageQueryDescription, timeout, continuationToken, maxResults, null);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of backups available for the specified backed up entity at the specified backup location. (asynchronously)
     * Gets the list of backups available for the specified backed up entity (Application, Service or Partition) at the specified backup location (FileShare or Azure Blob Storage).
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be used for enumerating backups. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupsFromBackupLocationAsync(String apiVersion, GetBackupByStorageQueryDescription getBackupByStorageQueryDescription, Long timeout, String continuationToken, Long maxResults, final ApiCallback<PagedBackupInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupsFromBackupLocationValidateBeforeCall(apiVersion, getBackupByStorageQueryDescription, timeout, continuationToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionBackupConfigurationInfo
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and gets the partition&#39;s backup configuration information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupConfigurationInfoCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetBackupConfigurationInfo"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionBackupConfigurationInfoValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionBackupConfigurationInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionBackupConfigurationInfo(Async)");
        }

        return getPartitionBackupConfigurationInfoCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * Gets the partition backup configuration information
     * Gets the Service Fabric Backup configuration information for the specified partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PartitionBackupConfigurationInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and gets the partition&#39;s backup configuration information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PartitionBackupConfigurationInfo getPartitionBackupConfigurationInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        ApiResponse<PartitionBackupConfigurationInfo> localVarResp = getPartitionBackupConfigurationInfoWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the partition backup configuration information
     * Gets the Service Fabric Backup configuration information for the specified partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PartitionBackupConfigurationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and gets the partition&#39;s backup configuration information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionBackupConfigurationInfo> getPartitionBackupConfigurationInfoWithHttpInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getPartitionBackupConfigurationInfoValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<PartitionBackupConfigurationInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the partition backup configuration information (asynchronously)
     * Gets the Service Fabric Backup configuration information for the specified partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and gets the partition&#39;s backup configuration information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupConfigurationInfoAsync(UUID partitionId, String apiVersion, Long timeout, final ApiCallback<PartitionBackupConfigurationInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionBackupConfigurationInfoValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<PartitionBackupConfigurationInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionBackupList
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupListCall(UUID partitionId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetBackups"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (latest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Latest", latest));
        }

        if (startDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDateTimeFilter", startDateTimeFilter));
        }

        if (endDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDateTimeFilter", endDateTimeFilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionBackupListValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionBackupList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionBackupList(Async)");
        }

        return getPartitionBackupListCall(partitionId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, _callback);

    }

    /**
     * Gets the list of backups available for the specified partition.
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @return PagedBackupInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupInfoList getPartitionBackupList(UUID partitionId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter) throws ApiException {
        ApiResponse<PagedBackupInfoList> localVarResp = getPartitionBackupListWithHttpInfo(partitionId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter);
        return localVarResp.getData();
    }

    /**
     * Gets the list of backups available for the specified partition.
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @return ApiResponse&lt;PagedBackupInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupInfoList> getPartitionBackupListWithHttpInfo(UUID partitionId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter) throws ApiException {
        okhttp3.Call localVarCall = getPartitionBackupListValidateBeforeCall(partitionId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, null);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of backups available for the specified partition. (asynchronously)
     * Returns a list of backups available for the specified partition. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for the partition.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupListAsync(UUID partitionId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, final ApiCallback<PagedBackupInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionBackupListValidateBeforeCall(partitionId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionBackupProgress
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and backup progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupProgressCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetBackupProgress"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionBackupProgressValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionBackupProgress(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionBackupProgress(Async)");
        }

        return getPartitionBackupProgressCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * Gets details for the latest backup triggered for this partition.
     * Returns information about the state of the latest backup along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return BackupProgressInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and backup progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public BackupProgressInfo getPartitionBackupProgress(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        ApiResponse<BackupProgressInfo> localVarResp = getPartitionBackupProgressWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets details for the latest backup triggered for this partition.
     * Returns information about the state of the latest backup along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;BackupProgressInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and backup progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupProgressInfo> getPartitionBackupProgressWithHttpInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getPartitionBackupProgressValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<BackupProgressInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details for the latest backup triggered for this partition. (asynchronously)
     * Returns information about the state of the latest backup along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and backup progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionBackupProgressAsync(UUID partitionId, String apiVersion, Long timeout, final ApiCallback<BackupProgressInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionBackupProgressValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<BackupProgressInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionRestoreProgress
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and restore progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionRestoreProgressCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetRestoreProgress"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionRestoreProgressValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionRestoreProgress(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionRestoreProgress(Async)");
        }

        return getPartitionRestoreProgressCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * Gets details for the latest restore operation triggered for this partition.
     * Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return RestoreProgressInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and restore progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public RestoreProgressInfo getPartitionRestoreProgress(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        ApiResponse<RestoreProgressInfo> localVarResp = getPartitionRestoreProgressWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets details for the latest restore operation triggered for this partition.
     * Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;RestoreProgressInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and restore progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreProgressInfo> getPartitionRestoreProgressWithHttpInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getPartitionRestoreProgressValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<RestoreProgressInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details for the latest restore operation triggered for this partition. (asynchronously)
     * Returns information about the state of the latest restore operation along with details or failure reason in case of completion.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and restore progress details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionRestoreProgressAsync(UUID partitionId, String apiVersion, Long timeout, final ApiCallback<RestoreProgressInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionRestoreProgressValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<RestoreProgressInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceBackupConfigurationInfo
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the service, and the partitions under this service, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceBackupConfigurationInfoCall(String serviceId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/GetBackupConfigurationInfo"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceBackupConfigurationInfoValidateBeforeCall(String serviceId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceBackupConfigurationInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getServiceBackupConfigurationInfo(Async)");
        }

        return getServiceBackupConfigurationInfoCall(serviceId, apiVersion, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the Service Fabric service backup configuration information.
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedBackupConfigurationInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the service, and the partitions under this service, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupConfigurationInfoList getServiceBackupConfigurationInfo(String serviceId, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedBackupConfigurationInfoList> localVarResp = getServiceBackupConfigurationInfoWithHttpInfo(serviceId, apiVersion, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the Service Fabric service backup configuration information.
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedBackupConfigurationInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the service, and the partitions under this service, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupConfigurationInfoList> getServiceBackupConfigurationInfoWithHttpInfo(String serviceId, String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getServiceBackupConfigurationInfoValidateBeforeCall(serviceId, apiVersion, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedBackupConfigurationInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Service Fabric service backup configuration information. (asynchronously)
     * Gets the Service Fabric backup configuration information for the service and the partitions under this service.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup configuration information for the service, and the partitions under this service, for which backup configuration has been overridden. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceBackupConfigurationInfoAsync(String serviceId, String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedBackupConfigurationInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceBackupConfigurationInfoValidateBeforeCall(serviceId, apiVersion, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupConfigurationInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceBackupList
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceBackupListCall(String serviceId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/GetBackups"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (latest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Latest", latest));
        }

        if (startDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDateTimeFilter", startDateTimeFilter));
        }

        if (endDateTimeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDateTimeFilter", endDateTimeFilter));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceBackupListValidateBeforeCall(String serviceId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceBackupList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getServiceBackupList(Async)");
        }

        return getServiceBackupListCall(serviceId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, _callback);

    }

    /**
     * Gets the list of backups available for every partition in this service.
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return PagedBackupInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedBackupInfoList getServiceBackupList(String serviceId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults) throws ApiException {
        ApiResponse<PagedBackupInfoList> localVarResp = getServiceBackupListWithHttpInfo(serviceId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * Gets the list of backups available for every partition in this service.
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @return ApiResponse&lt;PagedBackupInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedBackupInfoList> getServiceBackupListWithHttpInfo(String serviceId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults) throws ApiException {
        okhttp3.Call localVarCall = getServiceBackupListValidateBeforeCall(serviceId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, null);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of backups available for every partition in this service. (asynchronously)
     * Returns a list of backups available for every partition in this Service Fabric service. The server enumerates all the backups available in the backup store configured in the backup policy. It also allows filtering of the result based on start and end datetime or just fetching the latest available backup for every partition.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param latest Specifies whether to get only the most recent backup available for a partition for the specified time range. (optional, default to false)
     * @param startDateTimeFilter Specify the start date time from which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, all backups from the beginning are enumerated. (optional)
     * @param endDateTimeFilter Specify the end date time till which to enumerate backups, in datetime format. The date time must be specified in ISO8601 format. This is an optional parameter. If not specified, enumeration is done till the most recent backup. (optional)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and a paged list of backup information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceBackupListAsync(String serviceId, String apiVersion, Long timeout, Boolean latest, OffsetDateTime startDateTimeFilter, OffsetDateTime endDateTimeFilter, String continuationToken, Long maxResults, final ApiCallback<PagedBackupInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceBackupListValidateBeforeCall(serviceId, apiVersion, timeout, latest, startDateTimeFilter, endDateTimeFilter, continuationToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PagedBackupInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restorePartition
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param restorePartitionDescription Describes the parameters to restore the partition. (required)
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and restore will be initiated. Use GetPartitionRestoreProgress operation to get the status of the restore operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restorePartitionCall(UUID partitionId, String apiVersion, RestorePartitionDescription restorePartitionDescription, Integer restoreTimeout, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restorePartitionDescription;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/Restore"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restoreTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RestoreTimeout", restoreTimeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restorePartitionValidateBeforeCall(UUID partitionId, String apiVersion, RestorePartitionDescription restorePartitionDescription, Integer restoreTimeout, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling restorePartition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling restorePartition(Async)");
        }

        // verify the required parameter 'restorePartitionDescription' is set
        if (restorePartitionDescription == null) {
            throw new ApiException("Missing the required parameter 'restorePartitionDescription' when calling restorePartition(Async)");
        }

        return restorePartitionCall(partitionId, apiVersion, restorePartitionDescription, restoreTimeout, timeout, _callback);

    }

    /**
     * Triggers restore of the state of the partition using the specified restore partition description.
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation.  In case, the operation times out, specify a greater restore timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param restorePartitionDescription Describes the parameters to restore the partition. (required)
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and restore will be initiated. Use GetPartitionRestoreProgress operation to get the status of the restore operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void restorePartition(UUID partitionId, String apiVersion, RestorePartitionDescription restorePartitionDescription, Integer restoreTimeout, Long timeout) throws ApiException {
        restorePartitionWithHttpInfo(partitionId, apiVersion, restorePartitionDescription, restoreTimeout, timeout);
    }

    /**
     * Triggers restore of the state of the partition using the specified restore partition description.
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation.  In case, the operation times out, specify a greater restore timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param restorePartitionDescription Describes the parameters to restore the partition. (required)
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and restore will be initiated. Use GetPartitionRestoreProgress operation to get the status of the restore operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> restorePartitionWithHttpInfo(UUID partitionId, String apiVersion, RestorePartitionDescription restorePartitionDescription, Integer restoreTimeout, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = restorePartitionValidateBeforeCall(partitionId, apiVersion, restorePartitionDescription, restoreTimeout, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Triggers restore of the state of the partition using the specified restore partition description. (asynchronously)
     * Restores the state of a of the stateful persisted partition using the specified backup point. In case the partition is already being periodically backed up, then by default the backup point is looked for in the storage specified in backup policy. One can also override the same by specifying the backup storage details as part of the restore partition description in body. Once the restore is initiated, its progress can be tracked using the GetRestoreProgress operation.  In case, the operation times out, specify a greater restore timeout value in the query parameter.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param restorePartitionDescription Describes the parameters to restore the partition. (required)
     * @param restoreTimeout Specifies the maximum amount of time to wait, in minutes, for the restore operation to complete. Post that, the operation returns back with timeout error. However, in certain corner cases it could be that the restore operation goes through even though it completes with timeout. In case of timeout error, its recommended to invoke this operation again with a greater timeout value. the default value for the same is 10 minutes. (optional, default to 10)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and restore will be initiated. Use GetPartitionRestoreProgress operation to get the status of the restore operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restorePartitionAsync(UUID partitionId, String apiVersion, RestorePartitionDescription restorePartitionDescription, Integer restoreTimeout, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restorePartitionValidateBeforeCall(partitionId, apiVersion, restorePartitionDescription, restoreTimeout, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeApplicationBackup
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeApplicationBackupCall(String applicationId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/ResumeBackup"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeApplicationBackupValidateBeforeCall(String applicationId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling resumeApplicationBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resumeApplicationBackup(Async)");
        }

        return resumeApplicationBackupCall(applicationId, apiVersion, timeout, _callback);

    }

    /**
     * Resumes periodic backup of a Service Fabric application which was previously suspended.
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void resumeApplicationBackup(String applicationId, String apiVersion, Long timeout) throws ApiException {
        resumeApplicationBackupWithHttpInfo(applicationId, apiVersion, timeout);
    }

    /**
     * Resumes periodic backup of a Service Fabric application which was previously suspended.
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resumeApplicationBackupWithHttpInfo(String applicationId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = resumeApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resumes periodic backup of a Service Fabric application which was previously suspended. (asynchronously)
     * The previously suspended Service Fabric application resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeApplicationBackupAsync(String applicationId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumePartitionBackup
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumePartitionBackupCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/ResumeBackup"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumePartitionBackupValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling resumePartitionBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resumePartitionBackup(Async)");
        }

        return resumePartitionBackupCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * Resumes periodic backup of partition which was previously suspended.
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void resumePartitionBackup(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        resumePartitionBackupWithHttpInfo(partitionId, apiVersion, timeout);
    }

    /**
     * Resumes periodic backup of partition which was previously suspended.
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resumePartitionBackupWithHttpInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = resumePartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resumes periodic backup of partition which was previously suspended. (asynchronously)
     * The previously suspended partition resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumePartitionBackupAsync(UUID partitionId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumePartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resumeServiceBackup
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeServiceBackupCall(String serviceId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/ResumeBackup"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeServiceBackupValidateBeforeCall(String serviceId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling resumeServiceBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resumeServiceBackup(Async)");
        }

        return resumeServiceBackupCall(serviceId, apiVersion, timeout, _callback);

    }

    /**
     * Resumes periodic backup of a Service Fabric service which was previously suspended.
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void resumeServiceBackup(String serviceId, String apiVersion, Long timeout) throws ApiException {
        resumeServiceBackupWithHttpInfo(serviceId, apiVersion, timeout);
    }

    /**
     * Resumes periodic backup of a Service Fabric service which was previously suspended.
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resumeServiceBackupWithHttpInfo(String serviceId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = resumeServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resumes periodic backup of a Service Fabric service which was previously suspended. (asynchronously)
     * The previously suspended Service Fabric service resumes taking periodic backup as per the backup policy currently configured for the same.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be resumed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resumeServiceBackupAsync(String serviceId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendApplicationBackup
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendApplicationBackupCall(String applicationId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationId}/$/SuspendBackup"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendApplicationBackupValidateBeforeCall(String applicationId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling suspendApplicationBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling suspendApplicationBackup(Async)");
        }

        return suspendApplicationBackupCall(applicationId, apiVersion, timeout, _callback);

    }

    /**
     * Suspends periodic backup for the specified Service Fabric application.
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application&#39;s hierarchy. It means all the services and partitions under this application are now suspended for backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void suspendApplicationBackup(String applicationId, String apiVersion, Long timeout) throws ApiException {
        suspendApplicationBackupWithHttpInfo(applicationId, apiVersion, timeout);
    }

    /**
     * Suspends periodic backup for the specified Service Fabric application.
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application&#39;s hierarchy. It means all the services and partitions under this application are now suspended for backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> suspendApplicationBackupWithHttpInfo(String applicationId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = suspendApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suspends periodic backup for the specified Service Fabric application. (asynchronously)
     * The application which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire application&#39;s hierarchy. It means all the services and partitions under this application are now suspended for backup.
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and application backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendApplicationBackupAsync(String applicationId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendApplicationBackupValidateBeforeCall(applicationId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendPartitionBackup
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendPartitionBackupCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/SuspendBackup"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendPartitionBackupValidateBeforeCall(UUID partitionId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling suspendPartitionBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling suspendPartitionBackup(Async)");
        }

        return suspendPartitionBackupCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * Suspends periodic backup for the specified partition.
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void suspendPartitionBackup(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        suspendPartitionBackupWithHttpInfo(partitionId, apiVersion, timeout);
    }

    /**
     * Suspends periodic backup for the specified partition.
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> suspendPartitionBackupWithHttpInfo(UUID partitionId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = suspendPartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suspends periodic backup for the specified partition. (asynchronously)
     * The partition which is configured to take periodic backups, is suspended for taking further backups till it is resumed again.
     * @param partitionId The identity of the partition. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and partition backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendPartitionBackupAsync(UUID partitionId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendPartitionBackupValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendServiceBackup
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendServiceBackupCall(String serviceId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceId}/$/SuspendBackup"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendServiceBackupValidateBeforeCall(String serviceId, String apiVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling suspendServiceBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling suspendServiceBackup(Async)");
        }

        return suspendServiceBackupCall(serviceId, apiVersion, timeout, _callback);

    }

    /**
     * Suspends periodic backup for the specified Service Fabric service.
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service&#39;s hierarchy. It means all the partitions under this service are now suspended for backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void suspendServiceBackup(String serviceId, String apiVersion, Long timeout) throws ApiException {
        suspendServiceBackupWithHttpInfo(serviceId, apiVersion, timeout);
    }

    /**
     * Suspends periodic backup for the specified Service Fabric service.
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service&#39;s hierarchy. It means all the partitions under this service are now suspended for backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> suspendServiceBackupWithHttpInfo(String serviceId, String apiVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = suspendServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suspends periodic backup for the specified Service Fabric service. (asynchronously)
     * The service which is configured to take periodic backups, is suspended for taking further backups till it is resumed again. This operation applies to the entire service&#39;s hierarchy. It means all the partitions under this service are now suspended for backup.
     * @param serviceId The identity of the service. This ID is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation request was accepted and service backup will be suspended. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendServiceBackupAsync(String serviceId, String apiVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendServiceBackupValidateBeforeCall(serviceId, apiVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBackupPolicy
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and updates the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBackupPolicyCall(String backupPolicyName, String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backupPolicyDescription;

        // create path and map variables
        String localVarPath = "/BackupRestore/BackupPolicies/{backupPolicyName}/$/Update"
            .replace("{" + "backupPolicyName" + "}", localVarApiClient.escapeString(backupPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBackupPolicyValidateBeforeCall(String backupPolicyName, String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backupPolicyName' is set
        if (backupPolicyName == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyName' when calling updateBackupPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateBackupPolicy(Async)");
        }

        // verify the required parameter 'backupPolicyDescription' is set
        if (backupPolicyDescription == null) {
            throw new ApiException("Missing the required parameter 'backupPolicyDescription' when calling updateBackupPolicy(Async)");
        }

        return updateBackupPolicyCall(backupPolicyName, apiVersion, backupPolicyDescription, timeout, _callback);

    }

    /**
     * Updates the backup policy.
     * Updates the backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and updates the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void updateBackupPolicy(String backupPolicyName, String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout) throws ApiException {
        updateBackupPolicyWithHttpInfo(backupPolicyName, apiVersion, backupPolicyDescription, timeout);
    }

    /**
     * Updates the backup policy.
     * Updates the backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and updates the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBackupPolicyWithHttpInfo(String backupPolicyName, String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = updateBackupPolicyValidateBeforeCall(backupPolicyName, apiVersion, backupPolicyDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the backup policy. (asynchronously)
     * Updates the backup policy identified by {backupPolicyName}
     * @param backupPolicyName The name of the backup policy. (required)
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param backupPolicyDescription Describes the backup policy. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation returns 200 status code and updates the backup policy description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBackupPolicyAsync(String backupPolicyName, String apiVersion, BackupPolicyDescription backupPolicyDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBackupPolicyValidateBeforeCall(backupPolicyName, apiVersion, backupPolicyDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
