/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.ComposeDeploymentUpgradeState;
import org.openapitools.client.model.CurrentUpgradeDomainProgressInfo;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.FailureUpgradeDomainProgressInfo;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.MonitoringPolicyDescription;
import org.openapitools.client.model.UpgradeKind;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for a compose deployment upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComposeDeploymentUpgradeProgressInfo {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY = "ApplicationHealthPolicy";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY)
  private ApplicationHealthPolicy applicationHealthPolicy;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_UNHEALTHY_EVALUATIONS = "ApplicationUnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_APPLICATION_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> applicationUnhealthyEvaluations = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLICATION_UPGRADE_STATUS_DETAILS = "ApplicationUpgradeStatusDetails";
  @SerializedName(SERIALIZED_NAME_APPLICATION_UPGRADE_STATUS_DETAILS)
  private String applicationUpgradeStatusDetails;

  public static final String SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_DURATION = "CurrentUpgradeDomainDuration";
  @SerializedName(SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_DURATION)
  private String currentUpgradeDomainDuration = "PT0H2M0S";

  public static final String SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS = "CurrentUpgradeDomainProgress";
  @SerializedName(SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS)
  private CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress;

  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "DeploymentName";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  public static final String SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC = "FailureTimestampUtc";
  @SerializedName(SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC)
  private String failureTimestampUtc;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart = false;

  public static final String SERIALIZED_NAME_MONITORING_POLICY = "MonitoringPolicy";
  @SerializedName(SERIALIZED_NAME_MONITORING_POLICY)
  private MonitoringPolicyDescription monitoringPolicy;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private UpgradeMode rollingUpgradeMode = UpgradeMode.UNMONITORED_AUTO;

  public static final String SERIALIZED_NAME_START_TIMESTAMP_UTC = "StartTimestampUtc";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP_UTC)
  private String startTimestampUtc;

  public static final String SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION = "TargetApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION)
  private String targetApplicationTypeVersion;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_PROGRESS_AT_FAILURE = "UpgradeDomainProgressAtFailure";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_PROGRESS_AT_FAILURE)
  private FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure;

  public static final String SERIALIZED_NAME_UPGRADE_DURATION = "UpgradeDuration";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DURATION)
  private String upgradeDuration = "PT0H2M0S";

  public static final String SERIALIZED_NAME_UPGRADE_KIND = "UpgradeKind";
  @SerializedName(SERIALIZED_NAME_UPGRADE_KIND)
  private UpgradeKind upgradeKind = UpgradeKind.ROLLING;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Long upgradeReplicaSetCheckTimeoutInSeconds;

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "UpgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private ComposeDeploymentUpgradeState upgradeState;

  public static final String SERIALIZED_NAME_UPGRADE_STATUS_DETAILS = "UpgradeStatusDetails";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATUS_DETAILS)
  private String upgradeStatusDetails;

  public ComposeDeploymentUpgradeProgressInfo() {
  }

  public ComposeDeploymentUpgradeProgressInfo applicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
    return this;
  }

  /**
   * Get applicationHealthPolicy
   * @return applicationHealthPolicy
   */
  @javax.annotation.Nullable
  public ApplicationHealthPolicy getApplicationHealthPolicy() {
    return applicationHealthPolicy;
  }

  public void setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
  }


  public ComposeDeploymentUpgradeProgressInfo applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * The name of the target application, including the &#39;fabric:&#39; URI scheme.
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ComposeDeploymentUpgradeProgressInfo applicationUnhealthyEvaluations(List<HealthEvaluationWrapper> applicationUnhealthyEvaluations) {
    this.applicationUnhealthyEvaluations = applicationUnhealthyEvaluations;
    return this;
  }

  public ComposeDeploymentUpgradeProgressInfo addApplicationUnhealthyEvaluationsItem(HealthEvaluationWrapper applicationUnhealthyEvaluationsItem) {
    if (this.applicationUnhealthyEvaluations == null) {
      this.applicationUnhealthyEvaluations = new ArrayList<>();
    }
    this.applicationUnhealthyEvaluations.add(applicationUnhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return applicationUnhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getApplicationUnhealthyEvaluations() {
    return applicationUnhealthyEvaluations;
  }

  public void setApplicationUnhealthyEvaluations(List<HealthEvaluationWrapper> applicationUnhealthyEvaluations) {
    this.applicationUnhealthyEvaluations = applicationUnhealthyEvaluations;
  }


  public ComposeDeploymentUpgradeProgressInfo applicationUpgradeStatusDetails(String applicationUpgradeStatusDetails) {
    this.applicationUpgradeStatusDetails = applicationUpgradeStatusDetails;
    return this;
  }

  /**
   * Additional details of application upgrade including failure message.
   * @return applicationUpgradeStatusDetails
   */
  @javax.annotation.Nullable
  public String getApplicationUpgradeStatusDetails() {
    return applicationUpgradeStatusDetails;
  }

  public void setApplicationUpgradeStatusDetails(String applicationUpgradeStatusDetails) {
    this.applicationUpgradeStatusDetails = applicationUpgradeStatusDetails;
  }


  public ComposeDeploymentUpgradeProgressInfo currentUpgradeDomainDuration(String currentUpgradeDomainDuration) {
    this.currentUpgradeDomainDuration = currentUpgradeDomainDuration;
    return this;
  }

  /**
   * The estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return currentUpgradeDomainDuration
   */
  @javax.annotation.Nullable
  public String getCurrentUpgradeDomainDuration() {
    return currentUpgradeDomainDuration;
  }

  public void setCurrentUpgradeDomainDuration(String currentUpgradeDomainDuration) {
    this.currentUpgradeDomainDuration = currentUpgradeDomainDuration;
  }


  public ComposeDeploymentUpgradeProgressInfo currentUpgradeDomainProgress(CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
    return this;
  }

  /**
   * Get currentUpgradeDomainProgress
   * @return currentUpgradeDomainProgress
   */
  @javax.annotation.Nullable
  public CurrentUpgradeDomainProgressInfo getCurrentUpgradeDomainProgress() {
    return currentUpgradeDomainProgress;
  }

  public void setCurrentUpgradeDomainProgress(CurrentUpgradeDomainProgressInfo currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
  }


  public ComposeDeploymentUpgradeProgressInfo deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * The name of the target deployment.
   * @return deploymentName
   */
  @javax.annotation.Nullable
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public ComposeDeploymentUpgradeProgressInfo failureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
  }


  public ComposeDeploymentUpgradeProgressInfo failureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
    return this;
  }

  /**
   * The estimated UTC datetime when the upgrade failed and FailureAction was executed.
   * @return failureTimestampUtc
   */
  @javax.annotation.Nullable
  public String getFailureTimestampUtc() {
    return failureTimestampUtc;
  }

  public void setFailureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
  }


  public ComposeDeploymentUpgradeProgressInfo forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public ComposeDeploymentUpgradeProgressInfo monitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
    return this;
  }

  /**
   * Get monitoringPolicy
   * @return monitoringPolicy
   */
  @javax.annotation.Nullable
  public MonitoringPolicyDescription getMonitoringPolicy() {
    return monitoringPolicy;
  }

  public void setMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
  }


  public ComposeDeploymentUpgradeProgressInfo rollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ComposeDeploymentUpgradeProgressInfo startTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
    return this;
  }

  /**
   * The estimated UTC datetime when the upgrade started.
   * @return startTimestampUtc
   */
  @javax.annotation.Nullable
  public String getStartTimestampUtc() {
    return startTimestampUtc;
  }

  public void setStartTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
  }


  public ComposeDeploymentUpgradeProgressInfo targetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
    return this;
  }

  /**
   * The target application type version (found in the application manifest) for the application upgrade.
   * @return targetApplicationTypeVersion
   */
  @javax.annotation.Nullable
  public String getTargetApplicationTypeVersion() {
    return targetApplicationTypeVersion;
  }

  public void setTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeDomainProgressAtFailure(FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure) {
    this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
    return this;
  }

  /**
   * Get upgradeDomainProgressAtFailure
   * @return upgradeDomainProgressAtFailure
   */
  @javax.annotation.Nullable
  public FailureUpgradeDomainProgressInfo getUpgradeDomainProgressAtFailure() {
    return upgradeDomainProgressAtFailure;
  }

  public void setUpgradeDomainProgressAtFailure(FailureUpgradeDomainProgressInfo upgradeDomainProgressAtFailure) {
    this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeDuration(String upgradeDuration) {
    this.upgradeDuration = upgradeDuration;
    return this;
  }

  /**
   * The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeDuration
   */
  @javax.annotation.Nullable
  public String getUpgradeDuration() {
    return upgradeDuration;
  }

  public void setUpgradeDuration(String upgradeDuration) {
    this.upgradeDuration = upgradeDuration;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
    return this;
  }

  /**
   * Get upgradeKind
   * @return upgradeKind
   */
  @javax.annotation.Nullable
  public UpgradeKind getUpgradeKind() {
    return upgradeKind;
  }

  public void setUpgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeState(ComposeDeploymentUpgradeState upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * Get upgradeState
   * @return upgradeState
   */
  @javax.annotation.Nullable
  public ComposeDeploymentUpgradeState getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(ComposeDeploymentUpgradeState upgradeState) {
    this.upgradeState = upgradeState;
  }


  public ComposeDeploymentUpgradeProgressInfo upgradeStatusDetails(String upgradeStatusDetails) {
    this.upgradeStatusDetails = upgradeStatusDetails;
    return this;
  }

  /**
   * Additional detailed information about the status of the pending upgrade.
   * @return upgradeStatusDetails
   */
  @javax.annotation.Nullable
  public String getUpgradeStatusDetails() {
    return upgradeStatusDetails;
  }

  public void setUpgradeStatusDetails(String upgradeStatusDetails) {
    this.upgradeStatusDetails = upgradeStatusDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComposeDeploymentUpgradeProgressInfo composeDeploymentUpgradeProgressInfo = (ComposeDeploymentUpgradeProgressInfo) o;
    return Objects.equals(this.applicationHealthPolicy, composeDeploymentUpgradeProgressInfo.applicationHealthPolicy) &&
        Objects.equals(this.applicationName, composeDeploymentUpgradeProgressInfo.applicationName) &&
        Objects.equals(this.applicationUnhealthyEvaluations, composeDeploymentUpgradeProgressInfo.applicationUnhealthyEvaluations) &&
        Objects.equals(this.applicationUpgradeStatusDetails, composeDeploymentUpgradeProgressInfo.applicationUpgradeStatusDetails) &&
        Objects.equals(this.currentUpgradeDomainDuration, composeDeploymentUpgradeProgressInfo.currentUpgradeDomainDuration) &&
        Objects.equals(this.currentUpgradeDomainProgress, composeDeploymentUpgradeProgressInfo.currentUpgradeDomainProgress) &&
        Objects.equals(this.deploymentName, composeDeploymentUpgradeProgressInfo.deploymentName) &&
        Objects.equals(this.failureReason, composeDeploymentUpgradeProgressInfo.failureReason) &&
        Objects.equals(this.failureTimestampUtc, composeDeploymentUpgradeProgressInfo.failureTimestampUtc) &&
        Objects.equals(this.forceRestart, composeDeploymentUpgradeProgressInfo.forceRestart) &&
        Objects.equals(this.monitoringPolicy, composeDeploymentUpgradeProgressInfo.monitoringPolicy) &&
        Objects.equals(this.rollingUpgradeMode, composeDeploymentUpgradeProgressInfo.rollingUpgradeMode) &&
        Objects.equals(this.startTimestampUtc, composeDeploymentUpgradeProgressInfo.startTimestampUtc) &&
        Objects.equals(this.targetApplicationTypeVersion, composeDeploymentUpgradeProgressInfo.targetApplicationTypeVersion) &&
        Objects.equals(this.upgradeDomainProgressAtFailure, composeDeploymentUpgradeProgressInfo.upgradeDomainProgressAtFailure) &&
        Objects.equals(this.upgradeDuration, composeDeploymentUpgradeProgressInfo.upgradeDuration) &&
        Objects.equals(this.upgradeKind, composeDeploymentUpgradeProgressInfo.upgradeKind) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, composeDeploymentUpgradeProgressInfo.upgradeReplicaSetCheckTimeoutInSeconds) &&
        Objects.equals(this.upgradeState, composeDeploymentUpgradeProgressInfo.upgradeState) &&
        Objects.equals(this.upgradeStatusDetails, composeDeploymentUpgradeProgressInfo.upgradeStatusDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicy, applicationName, applicationUnhealthyEvaluations, applicationUpgradeStatusDetails, currentUpgradeDomainDuration, currentUpgradeDomainProgress, deploymentName, failureReason, failureTimestampUtc, forceRestart, monitoringPolicy, rollingUpgradeMode, startTimestampUtc, targetApplicationTypeVersion, upgradeDomainProgressAtFailure, upgradeDuration, upgradeKind, upgradeReplicaSetCheckTimeoutInSeconds, upgradeState, upgradeStatusDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComposeDeploymentUpgradeProgressInfo {\n");
    sb.append("    applicationHealthPolicy: ").append(toIndentedString(applicationHealthPolicy)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationUnhealthyEvaluations: ").append(toIndentedString(applicationUnhealthyEvaluations)).append("\n");
    sb.append("    applicationUpgradeStatusDetails: ").append(toIndentedString(applicationUpgradeStatusDetails)).append("\n");
    sb.append("    currentUpgradeDomainDuration: ").append(toIndentedString(currentUpgradeDomainDuration)).append("\n");
    sb.append("    currentUpgradeDomainProgress: ").append(toIndentedString(currentUpgradeDomainProgress)).append("\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    failureTimestampUtc: ").append(toIndentedString(failureTimestampUtc)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    monitoringPolicy: ").append(toIndentedString(monitoringPolicy)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    startTimestampUtc: ").append(toIndentedString(startTimestampUtc)).append("\n");
    sb.append("    targetApplicationTypeVersion: ").append(toIndentedString(targetApplicationTypeVersion)).append("\n");
    sb.append("    upgradeDomainProgressAtFailure: ").append(toIndentedString(upgradeDomainProgressAtFailure)).append("\n");
    sb.append("    upgradeDuration: ").append(toIndentedString(upgradeDuration)).append("\n");
    sb.append("    upgradeKind: ").append(toIndentedString(upgradeKind)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("    upgradeStatusDetails: ").append(toIndentedString(upgradeStatusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicy");
    openapiFields.add("ApplicationName");
    openapiFields.add("ApplicationUnhealthyEvaluations");
    openapiFields.add("ApplicationUpgradeStatusDetails");
    openapiFields.add("CurrentUpgradeDomainDuration");
    openapiFields.add("CurrentUpgradeDomainProgress");
    openapiFields.add("DeploymentName");
    openapiFields.add("FailureReason");
    openapiFields.add("FailureTimestampUtc");
    openapiFields.add("ForceRestart");
    openapiFields.add("MonitoringPolicy");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("StartTimestampUtc");
    openapiFields.add("TargetApplicationTypeVersion");
    openapiFields.add("UpgradeDomainProgressAtFailure");
    openapiFields.add("UpgradeDuration");
    openapiFields.add("UpgradeKind");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");
    openapiFields.add("UpgradeState");
    openapiFields.add("UpgradeStatusDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComposeDeploymentUpgradeProgressInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComposeDeploymentUpgradeProgressInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComposeDeploymentUpgradeProgressInfo is not found in the empty JSON string", ComposeDeploymentUpgradeProgressInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComposeDeploymentUpgradeProgressInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComposeDeploymentUpgradeProgressInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationHealthPolicy`
      if (jsonObj.get("ApplicationHealthPolicy") != null && !jsonObj.get("ApplicationHealthPolicy").isJsonNull()) {
        ApplicationHealthPolicy.validateJsonElement(jsonObj.get("ApplicationHealthPolicy"));
      }
      if ((jsonObj.get("ApplicationName") != null && !jsonObj.get("ApplicationName").isJsonNull()) && !jsonObj.get("ApplicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationName").toString()));
      }
      if (jsonObj.get("ApplicationUnhealthyEvaluations") != null && !jsonObj.get("ApplicationUnhealthyEvaluations").isJsonNull()) {
        JsonArray jsonArrayapplicationUnhealthyEvaluations = jsonObj.getAsJsonArray("ApplicationUnhealthyEvaluations");
        if (jsonArrayapplicationUnhealthyEvaluations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ApplicationUnhealthyEvaluations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ApplicationUnhealthyEvaluations` to be an array in the JSON string but got `%s`", jsonObj.get("ApplicationUnhealthyEvaluations").toString()));
          }

          // validate the optional field `ApplicationUnhealthyEvaluations` (array)
          for (int i = 0; i < jsonArrayapplicationUnhealthyEvaluations.size(); i++) {
            HealthEvaluationWrapper.validateJsonElement(jsonArrayapplicationUnhealthyEvaluations.get(i));
          };
        }
      }
      if ((jsonObj.get("ApplicationUpgradeStatusDetails") != null && !jsonObj.get("ApplicationUpgradeStatusDetails").isJsonNull()) && !jsonObj.get("ApplicationUpgradeStatusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationUpgradeStatusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationUpgradeStatusDetails").toString()));
      }
      if ((jsonObj.get("CurrentUpgradeDomainDuration") != null && !jsonObj.get("CurrentUpgradeDomainDuration").isJsonNull()) && !jsonObj.get("CurrentUpgradeDomainDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentUpgradeDomainDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentUpgradeDomainDuration").toString()));
      }
      // validate the optional field `CurrentUpgradeDomainProgress`
      if (jsonObj.get("CurrentUpgradeDomainProgress") != null && !jsonObj.get("CurrentUpgradeDomainProgress").isJsonNull()) {
        CurrentUpgradeDomainProgressInfo.validateJsonElement(jsonObj.get("CurrentUpgradeDomainProgress"));
      }
      if ((jsonObj.get("DeploymentName") != null && !jsonObj.get("DeploymentName").isJsonNull()) && !jsonObj.get("DeploymentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeploymentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeploymentName").toString()));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        FailureReason.validateJsonElement(jsonObj.get("FailureReason"));
      }
      if ((jsonObj.get("FailureTimestampUtc") != null && !jsonObj.get("FailureTimestampUtc").isJsonNull()) && !jsonObj.get("FailureTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureTimestampUtc").toString()));
      }
      // validate the optional field `MonitoringPolicy`
      if (jsonObj.get("MonitoringPolicy") != null && !jsonObj.get("MonitoringPolicy").isJsonNull()) {
        MonitoringPolicyDescription.validateJsonElement(jsonObj.get("MonitoringPolicy"));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        UpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if ((jsonObj.get("StartTimestampUtc") != null && !jsonObj.get("StartTimestampUtc").isJsonNull()) && !jsonObj.get("StartTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTimestampUtc").toString()));
      }
      if ((jsonObj.get("TargetApplicationTypeVersion") != null && !jsonObj.get("TargetApplicationTypeVersion").isJsonNull()) && !jsonObj.get("TargetApplicationTypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetApplicationTypeVersion").toString()));
      }
      // validate the optional field `UpgradeDomainProgressAtFailure`
      if (jsonObj.get("UpgradeDomainProgressAtFailure") != null && !jsonObj.get("UpgradeDomainProgressAtFailure").isJsonNull()) {
        FailureUpgradeDomainProgressInfo.validateJsonElement(jsonObj.get("UpgradeDomainProgressAtFailure"));
      }
      if ((jsonObj.get("UpgradeDuration") != null && !jsonObj.get("UpgradeDuration").isJsonNull()) && !jsonObj.get("UpgradeDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDuration").toString()));
      }
      // validate the optional field `UpgradeKind`
      if (jsonObj.get("UpgradeKind") != null && !jsonObj.get("UpgradeKind").isJsonNull()) {
        UpgradeKind.validateJsonElement(jsonObj.get("UpgradeKind"));
      }
      // validate the optional field `UpgradeState`
      if (jsonObj.get("UpgradeState") != null && !jsonObj.get("UpgradeState").isJsonNull()) {
        ComposeDeploymentUpgradeState.validateJsonElement(jsonObj.get("UpgradeState"));
      }
      if ((jsonObj.get("UpgradeStatusDetails") != null && !jsonObj.get("UpgradeStatusDetails").isJsonNull()) && !jsonObj.get("UpgradeStatusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeStatusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeStatusDetails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComposeDeploymentUpgradeProgressInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComposeDeploymentUpgradeProgressInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComposeDeploymentUpgradeProgressInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComposeDeploymentUpgradeProgressInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ComposeDeploymentUpgradeProgressInfo>() {
           @Override
           public void write(JsonWriter out, ComposeDeploymentUpgradeProgressInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComposeDeploymentUpgradeProgressInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComposeDeploymentUpgradeProgressInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComposeDeploymentUpgradeProgressInfo
   * @throws IOException if the JSON string is invalid with respect to ComposeDeploymentUpgradeProgressInfo
   */
  public static ComposeDeploymentUpgradeProgressInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComposeDeploymentUpgradeProgressInfo.class);
  }

  /**
   * Convert an instance of ComposeDeploymentUpgradeProgressInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

