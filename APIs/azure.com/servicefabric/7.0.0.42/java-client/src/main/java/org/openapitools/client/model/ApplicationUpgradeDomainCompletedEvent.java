/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ApplicationEvent;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application Upgrade Domain Completed event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationUpgradeDomainCompletedEvent extends ApplicationEvent {
  public static final String SERIALIZED_NAME_APPLICATION_TYPE_NAME = "ApplicationTypeName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_NAME)
  private String applicationTypeName;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_VERSION = "ApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_VERSION)
  private String applicationTypeVersion;

  public static final String SERIALIZED_NAME_CURRENT_APPLICATION_TYPE_VERSION = "CurrentApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_APPLICATION_TYPE_VERSION)
  private String currentApplicationTypeVersion;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_ELAPSED_TIME_IN_MS = "UpgradeDomainElapsedTimeInMs";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_ELAPSED_TIME_IN_MS)
  private Double upgradeDomainElapsedTimeInMs;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAINS = "UpgradeDomains";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAINS)
  private String upgradeDomains;

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "UpgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private String upgradeState;

  public ApplicationUpgradeDomainCompletedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ApplicationUpgradeDomainCompletedEvent applicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
    return this;
  }

  /**
   * Application type name.
   * @return applicationTypeName
   */
  @javax.annotation.Nonnull
  public String getApplicationTypeName() {
    return applicationTypeName;
  }

  public void setApplicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
  }


  public ApplicationUpgradeDomainCompletedEvent applicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
    return this;
  }

  /**
   * Target Application type version.
   * @return applicationTypeVersion
   */
  @javax.annotation.Nonnull
  public String getApplicationTypeVersion() {
    return applicationTypeVersion;
  }

  public void setApplicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
  }


  public ApplicationUpgradeDomainCompletedEvent currentApplicationTypeVersion(String currentApplicationTypeVersion) {
    this.currentApplicationTypeVersion = currentApplicationTypeVersion;
    return this;
  }

  /**
   * Current Application type version.
   * @return currentApplicationTypeVersion
   */
  @javax.annotation.Nonnull
  public String getCurrentApplicationTypeVersion() {
    return currentApplicationTypeVersion;
  }

  public void setCurrentApplicationTypeVersion(String currentApplicationTypeVersion) {
    this.currentApplicationTypeVersion = currentApplicationTypeVersion;
  }


  public ApplicationUpgradeDomainCompletedEvent upgradeDomainElapsedTimeInMs(Double upgradeDomainElapsedTimeInMs) {
    this.upgradeDomainElapsedTimeInMs = upgradeDomainElapsedTimeInMs;
    return this;
  }

  /**
   * Upgrade time of domain in milli-seconds.
   * @return upgradeDomainElapsedTimeInMs
   */
  @javax.annotation.Nonnull
  public Double getUpgradeDomainElapsedTimeInMs() {
    return upgradeDomainElapsedTimeInMs;
  }

  public void setUpgradeDomainElapsedTimeInMs(Double upgradeDomainElapsedTimeInMs) {
    this.upgradeDomainElapsedTimeInMs = upgradeDomainElapsedTimeInMs;
  }


  public ApplicationUpgradeDomainCompletedEvent upgradeDomains(String upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
    return this;
  }

  /**
   * Upgrade domains.
   * @return upgradeDomains
   */
  @javax.annotation.Nonnull
  public String getUpgradeDomains() {
    return upgradeDomains;
  }

  public void setUpgradeDomains(String upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
  }


  public ApplicationUpgradeDomainCompletedEvent upgradeState(String upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * State of upgrade.
   * @return upgradeState
   */
  @javax.annotation.Nonnull
  public String getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(String upgradeState) {
    this.upgradeState = upgradeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationUpgradeDomainCompletedEvent applicationUpgradeDomainCompletedEvent = (ApplicationUpgradeDomainCompletedEvent) o;
    return Objects.equals(this.applicationTypeName, applicationUpgradeDomainCompletedEvent.applicationTypeName) &&
        Objects.equals(this.applicationTypeVersion, applicationUpgradeDomainCompletedEvent.applicationTypeVersion) &&
        Objects.equals(this.currentApplicationTypeVersion, applicationUpgradeDomainCompletedEvent.currentApplicationTypeVersion) &&
        Objects.equals(this.upgradeDomainElapsedTimeInMs, applicationUpgradeDomainCompletedEvent.upgradeDomainElapsedTimeInMs) &&
        Objects.equals(this.upgradeDomains, applicationUpgradeDomainCompletedEvent.upgradeDomains) &&
        Objects.equals(this.upgradeState, applicationUpgradeDomainCompletedEvent.upgradeState) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationTypeName, applicationTypeVersion, currentApplicationTypeVersion, upgradeDomainElapsedTimeInMs, upgradeDomains, upgradeState, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationUpgradeDomainCompletedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    applicationTypeName: ").append(toIndentedString(applicationTypeName)).append("\n");
    sb.append("    applicationTypeVersion: ").append(toIndentedString(applicationTypeVersion)).append("\n");
    sb.append("    currentApplicationTypeVersion: ").append(toIndentedString(currentApplicationTypeVersion)).append("\n");
    sb.append("    upgradeDomainElapsedTimeInMs: ").append(toIndentedString(upgradeDomainElapsedTimeInMs)).append("\n");
    sb.append("    upgradeDomains: ").append(toIndentedString(upgradeDomains)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("Category");
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationTypeName");
    openapiRequiredFields.add("ApplicationTypeVersion");
    openapiRequiredFields.add("CurrentApplicationTypeVersion");
    openapiRequiredFields.add("UpgradeDomainElapsedTimeInMs");
    openapiRequiredFields.add("UpgradeDomains");
    openapiRequiredFields.add("UpgradeState");
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationUpgradeDomainCompletedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationUpgradeDomainCompletedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationUpgradeDomainCompletedEvent is not found in the empty JSON string", ApplicationUpgradeDomainCompletedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationUpgradeDomainCompletedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationUpgradeDomainCompletedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationUpgradeDomainCompletedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationUpgradeDomainCompletedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationUpgradeDomainCompletedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationUpgradeDomainCompletedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationUpgradeDomainCompletedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationUpgradeDomainCompletedEvent>() {
           @Override
           public void write(JsonWriter out, ApplicationUpgradeDomainCompletedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationUpgradeDomainCompletedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationUpgradeDomainCompletedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationUpgradeDomainCompletedEvent
   * @throws IOException if the JSON string is invalid with respect to ApplicationUpgradeDomainCompletedEvent
   */
  public static ApplicationUpgradeDomainCompletedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationUpgradeDomainCompletedEvent.class);
  }

  /**
   * Convert an instance of ApplicationUpgradeDomainCompletedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

