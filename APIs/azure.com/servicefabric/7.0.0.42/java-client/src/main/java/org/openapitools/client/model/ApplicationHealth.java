/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeployedApplicationHealthState;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.HealthEvent;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.HealthStatistics;
import org.openapitools.client.model.ServiceHealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the health of the application. Contains the application aggregated health state and the service and deployed application health states.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationHealth {
  public static final String SERIALIZED_NAME_DEPLOYED_APPLICATION_HEALTH_STATES = "DeployedApplicationHealthStates";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_APPLICATION_HEALTH_STATES)
  private List<DeployedApplicationHealthState> deployedApplicationHealthStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_HEALTH_STATES = "ServiceHealthStates";
  @SerializedName(SERIALIZED_NAME_SERVICE_HEALTH_STATES)
  private List<ServiceHealthState> serviceHealthStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGGREGATED_HEALTH_STATE = "AggregatedHealthState";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_HEALTH_STATE)
  private HealthState aggregatedHealthState;

  public static final String SERIALIZED_NAME_HEALTH_EVENTS = "HealthEvents";
  @SerializedName(SERIALIZED_NAME_HEALTH_EVENTS)
  private List<HealthEvent> healthEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_STATISTICS = "HealthStatistics";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATISTICS)
  private HealthStatistics healthStatistics;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> unhealthyEvaluations = new ArrayList<>();

  public ApplicationHealth() {
  }

  public ApplicationHealth deployedApplicationHealthStates(List<DeployedApplicationHealthState> deployedApplicationHealthStates) {
    this.deployedApplicationHealthStates = deployedApplicationHealthStates;
    return this;
  }

  public ApplicationHealth addDeployedApplicationHealthStatesItem(DeployedApplicationHealthState deployedApplicationHealthStatesItem) {
    if (this.deployedApplicationHealthStates == null) {
      this.deployedApplicationHealthStates = new ArrayList<>();
    }
    this.deployedApplicationHealthStates.add(deployedApplicationHealthStatesItem);
    return this;
  }

  /**
   * Deployed application health states as found in the health store.
   * @return deployedApplicationHealthStates
   */
  @javax.annotation.Nullable
  public List<DeployedApplicationHealthState> getDeployedApplicationHealthStates() {
    return deployedApplicationHealthStates;
  }

  public void setDeployedApplicationHealthStates(List<DeployedApplicationHealthState> deployedApplicationHealthStates) {
    this.deployedApplicationHealthStates = deployedApplicationHealthStates;
  }


  public ApplicationHealth name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application, including the &#39;fabric:&#39; URI scheme.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationHealth serviceHealthStates(List<ServiceHealthState> serviceHealthStates) {
    this.serviceHealthStates = serviceHealthStates;
    return this;
  }

  public ApplicationHealth addServiceHealthStatesItem(ServiceHealthState serviceHealthStatesItem) {
    if (this.serviceHealthStates == null) {
      this.serviceHealthStates = new ArrayList<>();
    }
    this.serviceHealthStates.add(serviceHealthStatesItem);
    return this;
  }

  /**
   * Service health states as found in the health store.
   * @return serviceHealthStates
   */
  @javax.annotation.Nullable
  public List<ServiceHealthState> getServiceHealthStates() {
    return serviceHealthStates;
  }

  public void setServiceHealthStates(List<ServiceHealthState> serviceHealthStates) {
    this.serviceHealthStates = serviceHealthStates;
  }


  public ApplicationHealth aggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
    return this;
  }

  /**
   * Get aggregatedHealthState
   * @return aggregatedHealthState
   */
  @javax.annotation.Nullable
  public HealthState getAggregatedHealthState() {
    return aggregatedHealthState;
  }

  public void setAggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
  }


  public ApplicationHealth healthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
    return this;
  }

  public ApplicationHealth addHealthEventsItem(HealthEvent healthEventsItem) {
    if (this.healthEvents == null) {
      this.healthEvents = new ArrayList<>();
    }
    this.healthEvents.add(healthEventsItem);
    return this;
  }

  /**
   * The list of health events reported on the entity.
   * @return healthEvents
   */
  @javax.annotation.Nullable
  public List<HealthEvent> getHealthEvents() {
    return healthEvents;
  }

  public void setHealthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
  }


  public ApplicationHealth healthStatistics(HealthStatistics healthStatistics) {
    this.healthStatistics = healthStatistics;
    return this;
  }

  /**
   * Get healthStatistics
   * @return healthStatistics
   */
  @javax.annotation.Nullable
  public HealthStatistics getHealthStatistics() {
    return healthStatistics;
  }

  public void setHealthStatistics(HealthStatistics healthStatistics) {
    this.healthStatistics = healthStatistics;
  }


  public ApplicationHealth unhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public ApplicationHealth addUnhealthyEvaluationsItem(HealthEvaluationWrapper unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationHealth applicationHealth = (ApplicationHealth) o;
    return Objects.equals(this.deployedApplicationHealthStates, applicationHealth.deployedApplicationHealthStates) &&
        Objects.equals(this.name, applicationHealth.name) &&
        Objects.equals(this.serviceHealthStates, applicationHealth.serviceHealthStates) &&
        Objects.equals(this.aggregatedHealthState, applicationHealth.aggregatedHealthState) &&
        Objects.equals(this.healthEvents, applicationHealth.healthEvents) &&
        Objects.equals(this.healthStatistics, applicationHealth.healthStatistics) &&
        Objects.equals(this.unhealthyEvaluations, applicationHealth.unhealthyEvaluations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployedApplicationHealthStates, name, serviceHealthStates, aggregatedHealthState, healthEvents, healthStatistics, unhealthyEvaluations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationHealth {\n");
    sb.append("    deployedApplicationHealthStates: ").append(toIndentedString(deployedApplicationHealthStates)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceHealthStates: ").append(toIndentedString(serviceHealthStates)).append("\n");
    sb.append("    aggregatedHealthState: ").append(toIndentedString(aggregatedHealthState)).append("\n");
    sb.append("    healthEvents: ").append(toIndentedString(healthEvents)).append("\n");
    sb.append("    healthStatistics: ").append(toIndentedString(healthStatistics)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("HealthEvents");
    openapiFields.add("HealthStatistics");
    openapiFields.add("UnhealthyEvaluations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationHealth is not found in the empty JSON string", ApplicationHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeployedApplicationHealthStates") != null && !jsonObj.get("DeployedApplicationHealthStates").isJsonNull()) {
        JsonArray jsonArraydeployedApplicationHealthStates = jsonObj.getAsJsonArray("DeployedApplicationHealthStates");
        if (jsonArraydeployedApplicationHealthStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeployedApplicationHealthStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeployedApplicationHealthStates` to be an array in the JSON string but got `%s`", jsonObj.get("DeployedApplicationHealthStates").toString()));
          }

          // validate the optional field `DeployedApplicationHealthStates` (array)
          for (int i = 0; i < jsonArraydeployedApplicationHealthStates.size(); i++) {
            DeployedApplicationHealthState.validateJsonElement(jsonArraydeployedApplicationHealthStates.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("ServiceHealthStates") != null && !jsonObj.get("ServiceHealthStates").isJsonNull()) {
        JsonArray jsonArrayserviceHealthStates = jsonObj.getAsJsonArray("ServiceHealthStates");
        if (jsonArrayserviceHealthStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ServiceHealthStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ServiceHealthStates` to be an array in the JSON string but got `%s`", jsonObj.get("ServiceHealthStates").toString()));
          }

          // validate the optional field `ServiceHealthStates` (array)
          for (int i = 0; i < jsonArrayserviceHealthStates.size(); i++) {
            ServiceHealthState.validateJsonElement(jsonArrayserviceHealthStates.get(i));
          };
        }
      }
      // validate the optional field `AggregatedHealthState`
      if (jsonObj.get("AggregatedHealthState") != null && !jsonObj.get("AggregatedHealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("AggregatedHealthState"));
      }
      if (jsonObj.get("HealthEvents") != null && !jsonObj.get("HealthEvents").isJsonNull()) {
        JsonArray jsonArrayhealthEvents = jsonObj.getAsJsonArray("HealthEvents");
        if (jsonArrayhealthEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HealthEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HealthEvents` to be an array in the JSON string but got `%s`", jsonObj.get("HealthEvents").toString()));
          }

          // validate the optional field `HealthEvents` (array)
          for (int i = 0; i < jsonArrayhealthEvents.size(); i++) {
            HealthEvent.validateJsonElement(jsonArrayhealthEvents.get(i));
          };
        }
      }
      // validate the optional field `HealthStatistics`
      if (jsonObj.get("HealthStatistics") != null && !jsonObj.get("HealthStatistics").isJsonNull()) {
        HealthStatistics.validateJsonElement(jsonObj.get("HealthStatistics"));
      }
      if (jsonObj.get("UnhealthyEvaluations") != null && !jsonObj.get("UnhealthyEvaluations").isJsonNull()) {
        JsonArray jsonArrayunhealthyEvaluations = jsonObj.getAsJsonArray("UnhealthyEvaluations");
        if (jsonArrayunhealthyEvaluations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UnhealthyEvaluations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UnhealthyEvaluations` to be an array in the JSON string but got `%s`", jsonObj.get("UnhealthyEvaluations").toString()));
          }

          // validate the optional field `UnhealthyEvaluations` (array)
          for (int i = 0; i < jsonArrayunhealthyEvaluations.size(); i++) {
            HealthEvaluationWrapper.validateJsonElement(jsonArrayunhealthyEvaluations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationHealth>() {
           @Override
           public void write(JsonWriter out, ApplicationHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationHealth
   * @throws IOException if the JSON string is invalid with respect to ApplicationHealth
   */
  public static ApplicationHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationHealth.class);
  }

  /**
   * Convert an instance of ApplicationHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

