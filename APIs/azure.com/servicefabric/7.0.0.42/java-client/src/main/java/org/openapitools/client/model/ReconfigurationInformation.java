/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReconfigurationPhase;
import org.openapitools.client.model.ReconfigurationType;
import org.openapitools.client.model.ReplicaRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about current reconfiguration like phase, type, previous configuration role of replica and reconfiguration start date time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReconfigurationInformation {
  public static final String SERIALIZED_NAME_PREVIOUS_CONFIGURATION_ROLE = "PreviousConfigurationRole";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_CONFIGURATION_ROLE)
  private ReplicaRole previousConfigurationRole;

  public static final String SERIALIZED_NAME_RECONFIGURATION_PHASE = "ReconfigurationPhase";
  @SerializedName(SERIALIZED_NAME_RECONFIGURATION_PHASE)
  private ReconfigurationPhase reconfigurationPhase;

  public static final String SERIALIZED_NAME_RECONFIGURATION_START_TIME_UTC = "ReconfigurationStartTimeUtc";
  @SerializedName(SERIALIZED_NAME_RECONFIGURATION_START_TIME_UTC)
  private OffsetDateTime reconfigurationStartTimeUtc;

  public static final String SERIALIZED_NAME_RECONFIGURATION_TYPE = "ReconfigurationType";
  @SerializedName(SERIALIZED_NAME_RECONFIGURATION_TYPE)
  private ReconfigurationType reconfigurationType;

  public ReconfigurationInformation() {
  }

  public ReconfigurationInformation previousConfigurationRole(ReplicaRole previousConfigurationRole) {
    this.previousConfigurationRole = previousConfigurationRole;
    return this;
  }

  /**
   * Get previousConfigurationRole
   * @return previousConfigurationRole
   */
  @javax.annotation.Nullable
  public ReplicaRole getPreviousConfigurationRole() {
    return previousConfigurationRole;
  }

  public void setPreviousConfigurationRole(ReplicaRole previousConfigurationRole) {
    this.previousConfigurationRole = previousConfigurationRole;
  }


  public ReconfigurationInformation reconfigurationPhase(ReconfigurationPhase reconfigurationPhase) {
    this.reconfigurationPhase = reconfigurationPhase;
    return this;
  }

  /**
   * Get reconfigurationPhase
   * @return reconfigurationPhase
   */
  @javax.annotation.Nullable
  public ReconfigurationPhase getReconfigurationPhase() {
    return reconfigurationPhase;
  }

  public void setReconfigurationPhase(ReconfigurationPhase reconfigurationPhase) {
    this.reconfigurationPhase = reconfigurationPhase;
  }


  public ReconfigurationInformation reconfigurationStartTimeUtc(OffsetDateTime reconfigurationStartTimeUtc) {
    this.reconfigurationStartTimeUtc = reconfigurationStartTimeUtc;
    return this;
  }

  /**
   * Start time (in UTC) of the ongoing reconfiguration. If no reconfiguration is taking place then this value will be zero date-time.
   * @return reconfigurationStartTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReconfigurationStartTimeUtc() {
    return reconfigurationStartTimeUtc;
  }

  public void setReconfigurationStartTimeUtc(OffsetDateTime reconfigurationStartTimeUtc) {
    this.reconfigurationStartTimeUtc = reconfigurationStartTimeUtc;
  }


  public ReconfigurationInformation reconfigurationType(ReconfigurationType reconfigurationType) {
    this.reconfigurationType = reconfigurationType;
    return this;
  }

  /**
   * Get reconfigurationType
   * @return reconfigurationType
   */
  @javax.annotation.Nullable
  public ReconfigurationType getReconfigurationType() {
    return reconfigurationType;
  }

  public void setReconfigurationType(ReconfigurationType reconfigurationType) {
    this.reconfigurationType = reconfigurationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconfigurationInformation reconfigurationInformation = (ReconfigurationInformation) o;
    return Objects.equals(this.previousConfigurationRole, reconfigurationInformation.previousConfigurationRole) &&
        Objects.equals(this.reconfigurationPhase, reconfigurationInformation.reconfigurationPhase) &&
        Objects.equals(this.reconfigurationStartTimeUtc, reconfigurationInformation.reconfigurationStartTimeUtc) &&
        Objects.equals(this.reconfigurationType, reconfigurationInformation.reconfigurationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(previousConfigurationRole, reconfigurationPhase, reconfigurationStartTimeUtc, reconfigurationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconfigurationInformation {\n");
    sb.append("    previousConfigurationRole: ").append(toIndentedString(previousConfigurationRole)).append("\n");
    sb.append("    reconfigurationPhase: ").append(toIndentedString(reconfigurationPhase)).append("\n");
    sb.append("    reconfigurationStartTimeUtc: ").append(toIndentedString(reconfigurationStartTimeUtc)).append("\n");
    sb.append("    reconfigurationType: ").append(toIndentedString(reconfigurationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PreviousConfigurationRole");
    openapiFields.add("ReconfigurationPhase");
    openapiFields.add("ReconfigurationStartTimeUtc");
    openapiFields.add("ReconfigurationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReconfigurationInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReconfigurationInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconfigurationInformation is not found in the empty JSON string", ReconfigurationInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReconfigurationInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconfigurationInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PreviousConfigurationRole`
      if (jsonObj.get("PreviousConfigurationRole") != null && !jsonObj.get("PreviousConfigurationRole").isJsonNull()) {
        ReplicaRole.validateJsonElement(jsonObj.get("PreviousConfigurationRole"));
      }
      // validate the optional field `ReconfigurationPhase`
      if (jsonObj.get("ReconfigurationPhase") != null && !jsonObj.get("ReconfigurationPhase").isJsonNull()) {
        ReconfigurationPhase.validateJsonElement(jsonObj.get("ReconfigurationPhase"));
      }
      // validate the optional field `ReconfigurationType`
      if (jsonObj.get("ReconfigurationType") != null && !jsonObj.get("ReconfigurationType").isJsonNull()) {
        ReconfigurationType.validateJsonElement(jsonObj.get("ReconfigurationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconfigurationInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconfigurationInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconfigurationInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconfigurationInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconfigurationInformation>() {
           @Override
           public void write(JsonWriter out, ReconfigurationInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconfigurationInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReconfigurationInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReconfigurationInformation
   * @throws IOException if the JSON string is invalid with respect to ReconfigurationInformation
   */
  public static ReconfigurationInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconfigurationInformation.class);
  }

  /**
   * Convert an instance of ReconfigurationInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

