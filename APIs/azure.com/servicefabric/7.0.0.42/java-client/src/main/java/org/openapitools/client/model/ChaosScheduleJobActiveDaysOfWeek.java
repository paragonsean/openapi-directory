/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the days of the week that a Chaos Schedule Job will run for.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosScheduleJobActiveDaysOfWeek {
  public static final String SERIALIZED_NAME_FRIDAY = "Friday";
  @SerializedName(SERIALIZED_NAME_FRIDAY)
  private Boolean friday = false;

  public static final String SERIALIZED_NAME_MONDAY = "Monday";
  @SerializedName(SERIALIZED_NAME_MONDAY)
  private Boolean monday = false;

  public static final String SERIALIZED_NAME_SATURDAY = "Saturday";
  @SerializedName(SERIALIZED_NAME_SATURDAY)
  private Boolean saturday = false;

  public static final String SERIALIZED_NAME_SUNDAY = "Sunday";
  @SerializedName(SERIALIZED_NAME_SUNDAY)
  private Boolean sunday = false;

  public static final String SERIALIZED_NAME_THURSDAY = "Thursday";
  @SerializedName(SERIALIZED_NAME_THURSDAY)
  private Boolean thursday = false;

  public static final String SERIALIZED_NAME_TUESDAY = "Tuesday";
  @SerializedName(SERIALIZED_NAME_TUESDAY)
  private Boolean tuesday = false;

  public static final String SERIALIZED_NAME_WEDNESDAY = "Wednesday";
  @SerializedName(SERIALIZED_NAME_WEDNESDAY)
  private Boolean wednesday = false;

  public ChaosScheduleJobActiveDaysOfWeek() {
  }

  public ChaosScheduleJobActiveDaysOfWeek friday(Boolean friday) {
    this.friday = friday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Friday
   * @return friday
   */
  @javax.annotation.Nullable
  public Boolean getFriday() {
    return friday;
  }

  public void setFriday(Boolean friday) {
    this.friday = friday;
  }


  public ChaosScheduleJobActiveDaysOfWeek monday(Boolean monday) {
    this.monday = monday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Monday
   * @return monday
   */
  @javax.annotation.Nullable
  public Boolean getMonday() {
    return monday;
  }

  public void setMonday(Boolean monday) {
    this.monday = monday;
  }


  public ChaosScheduleJobActiveDaysOfWeek saturday(Boolean saturday) {
    this.saturday = saturday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Saturday
   * @return saturday
   */
  @javax.annotation.Nullable
  public Boolean getSaturday() {
    return saturday;
  }

  public void setSaturday(Boolean saturday) {
    this.saturday = saturday;
  }


  public ChaosScheduleJobActiveDaysOfWeek sunday(Boolean sunday) {
    this.sunday = sunday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Sunday
   * @return sunday
   */
  @javax.annotation.Nullable
  public Boolean getSunday() {
    return sunday;
  }

  public void setSunday(Boolean sunday) {
    this.sunday = sunday;
  }


  public ChaosScheduleJobActiveDaysOfWeek thursday(Boolean thursday) {
    this.thursday = thursday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Thursday
   * @return thursday
   */
  @javax.annotation.Nullable
  public Boolean getThursday() {
    return thursday;
  }

  public void setThursday(Boolean thursday) {
    this.thursday = thursday;
  }


  public ChaosScheduleJobActiveDaysOfWeek tuesday(Boolean tuesday) {
    this.tuesday = tuesday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Tuesday
   * @return tuesday
   */
  @javax.annotation.Nullable
  public Boolean getTuesday() {
    return tuesday;
  }

  public void setTuesday(Boolean tuesday) {
    this.tuesday = tuesday;
  }


  public ChaosScheduleJobActiveDaysOfWeek wednesday(Boolean wednesday) {
    this.wednesday = wednesday;
    return this;
  }

  /**
   * Indicates if the Chaos Schedule Job will run on Wednesday
   * @return wednesday
   */
  @javax.annotation.Nullable
  public Boolean getWednesday() {
    return wednesday;
  }

  public void setWednesday(Boolean wednesday) {
    this.wednesday = wednesday;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosScheduleJobActiveDaysOfWeek chaosScheduleJobActiveDaysOfWeek = (ChaosScheduleJobActiveDaysOfWeek) o;
    return Objects.equals(this.friday, chaosScheduleJobActiveDaysOfWeek.friday) &&
        Objects.equals(this.monday, chaosScheduleJobActiveDaysOfWeek.monday) &&
        Objects.equals(this.saturday, chaosScheduleJobActiveDaysOfWeek.saturday) &&
        Objects.equals(this.sunday, chaosScheduleJobActiveDaysOfWeek.sunday) &&
        Objects.equals(this.thursday, chaosScheduleJobActiveDaysOfWeek.thursday) &&
        Objects.equals(this.tuesday, chaosScheduleJobActiveDaysOfWeek.tuesday) &&
        Objects.equals(this.wednesday, chaosScheduleJobActiveDaysOfWeek.wednesday);
  }

  @Override
  public int hashCode() {
    return Objects.hash(friday, monday, saturday, sunday, thursday, tuesday, wednesday);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosScheduleJobActiveDaysOfWeek {\n");
    sb.append("    friday: ").append(toIndentedString(friday)).append("\n");
    sb.append("    monday: ").append(toIndentedString(monday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("    thursday: ").append(toIndentedString(thursday)).append("\n");
    sb.append("    tuesday: ").append(toIndentedString(tuesday)).append("\n");
    sb.append("    wednesday: ").append(toIndentedString(wednesday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Friday");
    openapiFields.add("Monday");
    openapiFields.add("Saturday");
    openapiFields.add("Sunday");
    openapiFields.add("Thursday");
    openapiFields.add("Tuesday");
    openapiFields.add("Wednesday");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosScheduleJobActiveDaysOfWeek
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosScheduleJobActiveDaysOfWeek.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosScheduleJobActiveDaysOfWeek is not found in the empty JSON string", ChaosScheduleJobActiveDaysOfWeek.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosScheduleJobActiveDaysOfWeek.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosScheduleJobActiveDaysOfWeek` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosScheduleJobActiveDaysOfWeek.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosScheduleJobActiveDaysOfWeek' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosScheduleJobActiveDaysOfWeek> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosScheduleJobActiveDaysOfWeek.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosScheduleJobActiveDaysOfWeek>() {
           @Override
           public void write(JsonWriter out, ChaosScheduleJobActiveDaysOfWeek value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosScheduleJobActiveDaysOfWeek read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosScheduleJobActiveDaysOfWeek given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosScheduleJobActiveDaysOfWeek
   * @throws IOException if the JSON string is invalid with respect to ChaosScheduleJobActiveDaysOfWeek
   */
  public static ChaosScheduleJobActiveDaysOfWeek fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosScheduleJobActiveDaysOfWeek.class);
  }

  /**
   * Convert an instance of ChaosScheduleJobActiveDaysOfWeek to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

