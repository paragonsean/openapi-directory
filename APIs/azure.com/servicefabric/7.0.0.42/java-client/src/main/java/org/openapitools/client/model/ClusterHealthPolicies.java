/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationHealthPolicyMapItem;
import org.openapitools.client.model.ClusterHealthPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health policies to evaluate cluster health.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterHealthPolicies {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP = "ApplicationHealthPolicyMap";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP)
  private List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_HEALTH_POLICY = "ClusterHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HEALTH_POLICY)
  private ClusterHealthPolicy clusterHealthPolicy;

  public ClusterHealthPolicies() {
  }

  public ClusterHealthPolicies applicationHealthPolicyMap(List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
    return this;
  }

  public ClusterHealthPolicies addApplicationHealthPolicyMapItem(ApplicationHealthPolicyMapItem applicationHealthPolicyMapItem) {
    if (this.applicationHealthPolicyMap == null) {
      this.applicationHealthPolicyMap = new ArrayList<>();
    }
    this.applicationHealthPolicyMap.add(applicationHealthPolicyMapItem);
    return this;
  }

  /**
   * Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default.
   * @return applicationHealthPolicyMap
   */
  @javax.annotation.Nullable
  public List<ApplicationHealthPolicyMapItem> getApplicationHealthPolicyMap() {
    return applicationHealthPolicyMap;
  }

  public void setApplicationHealthPolicyMap(List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
  }


  public ClusterHealthPolicies clusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
    return this;
  }

  /**
   * Get clusterHealthPolicy
   * @return clusterHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterHealthPolicy getClusterHealthPolicy() {
    return clusterHealthPolicy;
  }

  public void setClusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterHealthPolicies clusterHealthPolicies = (ClusterHealthPolicies) o;
    return Objects.equals(this.applicationHealthPolicyMap, clusterHealthPolicies.applicationHealthPolicyMap) &&
        Objects.equals(this.clusterHealthPolicy, clusterHealthPolicies.clusterHealthPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicyMap, clusterHealthPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterHealthPolicies {\n");
    sb.append("    applicationHealthPolicyMap: ").append(toIndentedString(applicationHealthPolicyMap)).append("\n");
    sb.append("    clusterHealthPolicy: ").append(toIndentedString(clusterHealthPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicyMap");
    openapiFields.add("ClusterHealthPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterHealthPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterHealthPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterHealthPolicies is not found in the empty JSON string", ClusterHealthPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterHealthPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterHealthPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ApplicationHealthPolicyMap") != null && !jsonObj.get("ApplicationHealthPolicyMap").isJsonNull()) {
        JsonArray jsonArrayapplicationHealthPolicyMap = jsonObj.getAsJsonArray("ApplicationHealthPolicyMap");
        if (jsonArrayapplicationHealthPolicyMap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ApplicationHealthPolicyMap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ApplicationHealthPolicyMap` to be an array in the JSON string but got `%s`", jsonObj.get("ApplicationHealthPolicyMap").toString()));
          }

          // validate the optional field `ApplicationHealthPolicyMap` (array)
          for (int i = 0; i < jsonArrayapplicationHealthPolicyMap.size(); i++) {
            ApplicationHealthPolicyMapItem.validateJsonElement(jsonArrayapplicationHealthPolicyMap.get(i));
          };
        }
      }
      // validate the optional field `ClusterHealthPolicy`
      if (jsonObj.get("ClusterHealthPolicy") != null && !jsonObj.get("ClusterHealthPolicy").isJsonNull()) {
        ClusterHealthPolicy.validateJsonElement(jsonObj.get("ClusterHealthPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterHealthPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterHealthPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterHealthPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterHealthPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterHealthPolicies>() {
           @Override
           public void write(JsonWriter out, ClusterHealthPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterHealthPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterHealthPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterHealthPolicies
   * @throws IOException if the JSON string is invalid with respect to ClusterHealthPolicies
   */
  public static ClusterHealthPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterHealthPolicies.class);
  }

  /**
   * Convert an instance of ClusterHealthPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

