/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationResourceUpgradeState;
import org.openapitools.client.model.RollingUpgradeMode;
import org.openapitools.client.model.ServiceUpgradeProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This type describes an application resource upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationResourceUpgradeProgressInfo {
  public static final String SERIALIZED_NAME_APPLICATION_UPGRADE_STATUS_DETAILS = "ApplicationUpgradeStatusDetails";
  @SerializedName(SERIALIZED_NAME_APPLICATION_UPGRADE_STATUS_DETAILS)
  private String applicationUpgradeStatusDetails;

  public static final String SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC = "FailureTimestampUtc";
  @SerializedName(SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC)
  private String failureTimestampUtc;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETED = "PercentCompleted";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETED)
  private String percentCompleted;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private RollingUpgradeMode rollingUpgradeMode = RollingUpgradeMode.MONITORED;

  public static final String SERIALIZED_NAME_SERVICE_UPGRADE_PROGRESS = "ServiceUpgradeProgress";
  @SerializedName(SERIALIZED_NAME_SERVICE_UPGRADE_PROGRESS)
  private List<ServiceUpgradeProgress> serviceUpgradeProgress = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIMESTAMP_UTC = "StartTimestampUtc";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP_UTC)
  private String startTimestampUtc;

  public static final String SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION = "TargetApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION)
  private String targetApplicationTypeVersion;

  public static final String SERIALIZED_NAME_UPGRADE_DURATION = "UpgradeDuration";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DURATION)
  private String upgradeDuration = "PT0H2M0S";

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Long upgradeReplicaSetCheckTimeoutInSeconds = 42949672925l;

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "UpgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private ApplicationResourceUpgradeState upgradeState;

  public ApplicationResourceUpgradeProgressInfo() {
  }

  public ApplicationResourceUpgradeProgressInfo applicationUpgradeStatusDetails(String applicationUpgradeStatusDetails) {
    this.applicationUpgradeStatusDetails = applicationUpgradeStatusDetails;
    return this;
  }

  /**
   * Additional detailed information about the status of the pending upgrade.
   * @return applicationUpgradeStatusDetails
   */
  @javax.annotation.Nullable
  public String getApplicationUpgradeStatusDetails() {
    return applicationUpgradeStatusDetails;
  }

  public void setApplicationUpgradeStatusDetails(String applicationUpgradeStatusDetails) {
    this.applicationUpgradeStatusDetails = applicationUpgradeStatusDetails;
  }


  public ApplicationResourceUpgradeProgressInfo failureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
    return this;
  }

  /**
   * The estimated UTC datetime when the upgrade failed and FailureAction was executed.
   * @return failureTimestampUtc
   */
  @javax.annotation.Nullable
  public String getFailureTimestampUtc() {
    return failureTimestampUtc;
  }

  public void setFailureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
  }


  public ApplicationResourceUpgradeProgressInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Application resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationResourceUpgradeProgressInfo percentCompleted(String percentCompleted) {
    this.percentCompleted = percentCompleted;
    return this;
  }

  /**
   * The estimated percent of replicas are completed in the upgrade.
   * @return percentCompleted
   */
  @javax.annotation.Nullable
  public String getPercentCompleted() {
    return percentCompleted;
  }

  public void setPercentCompleted(String percentCompleted) {
    this.percentCompleted = percentCompleted;
  }


  public ApplicationResourceUpgradeProgressInfo rollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public RollingUpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ApplicationResourceUpgradeProgressInfo serviceUpgradeProgress(List<ServiceUpgradeProgress> serviceUpgradeProgress) {
    this.serviceUpgradeProgress = serviceUpgradeProgress;
    return this;
  }

  public ApplicationResourceUpgradeProgressInfo addServiceUpgradeProgressItem(ServiceUpgradeProgress serviceUpgradeProgressItem) {
    if (this.serviceUpgradeProgress == null) {
      this.serviceUpgradeProgress = new ArrayList<>();
    }
    this.serviceUpgradeProgress.add(serviceUpgradeProgressItem);
    return this;
  }

  /**
   * List of service upgrade progresses.
   * @return serviceUpgradeProgress
   */
  @javax.annotation.Nullable
  public List<ServiceUpgradeProgress> getServiceUpgradeProgress() {
    return serviceUpgradeProgress;
  }

  public void setServiceUpgradeProgress(List<ServiceUpgradeProgress> serviceUpgradeProgress) {
    this.serviceUpgradeProgress = serviceUpgradeProgress;
  }


  public ApplicationResourceUpgradeProgressInfo startTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
    return this;
  }

  /**
   * The estimated UTC datetime when the upgrade started.
   * @return startTimestampUtc
   */
  @javax.annotation.Nullable
  public String getStartTimestampUtc() {
    return startTimestampUtc;
  }

  public void setStartTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
  }


  public ApplicationResourceUpgradeProgressInfo targetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
    return this;
  }

  /**
   * The target application version for the application upgrade.
   * @return targetApplicationTypeVersion
   */
  @javax.annotation.Nullable
  public String getTargetApplicationTypeVersion() {
    return targetApplicationTypeVersion;
  }

  public void setTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
  }


  public ApplicationResourceUpgradeProgressInfo upgradeDuration(String upgradeDuration) {
    this.upgradeDuration = upgradeDuration;
    return this;
  }

  /**
   * The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeDuration
   */
  @javax.annotation.Nullable
  public String getUpgradeDuration() {
    return upgradeDuration;
  }

  public void setUpgradeDuration(String upgradeDuration) {
    this.upgradeDuration = upgradeDuration;
  }


  public ApplicationResourceUpgradeProgressInfo upgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }


  public ApplicationResourceUpgradeProgressInfo upgradeState(ApplicationResourceUpgradeState upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * Get upgradeState
   * @return upgradeState
   */
  @javax.annotation.Nullable
  public ApplicationResourceUpgradeState getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(ApplicationResourceUpgradeState upgradeState) {
    this.upgradeState = upgradeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationResourceUpgradeProgressInfo applicationResourceUpgradeProgressInfo = (ApplicationResourceUpgradeProgressInfo) o;
    return Objects.equals(this.applicationUpgradeStatusDetails, applicationResourceUpgradeProgressInfo.applicationUpgradeStatusDetails) &&
        Objects.equals(this.failureTimestampUtc, applicationResourceUpgradeProgressInfo.failureTimestampUtc) &&
        Objects.equals(this.name, applicationResourceUpgradeProgressInfo.name) &&
        Objects.equals(this.percentCompleted, applicationResourceUpgradeProgressInfo.percentCompleted) &&
        Objects.equals(this.rollingUpgradeMode, applicationResourceUpgradeProgressInfo.rollingUpgradeMode) &&
        Objects.equals(this.serviceUpgradeProgress, applicationResourceUpgradeProgressInfo.serviceUpgradeProgress) &&
        Objects.equals(this.startTimestampUtc, applicationResourceUpgradeProgressInfo.startTimestampUtc) &&
        Objects.equals(this.targetApplicationTypeVersion, applicationResourceUpgradeProgressInfo.targetApplicationTypeVersion) &&
        Objects.equals(this.upgradeDuration, applicationResourceUpgradeProgressInfo.upgradeDuration) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, applicationResourceUpgradeProgressInfo.upgradeReplicaSetCheckTimeoutInSeconds) &&
        Objects.equals(this.upgradeState, applicationResourceUpgradeProgressInfo.upgradeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationUpgradeStatusDetails, failureTimestampUtc, name, percentCompleted, rollingUpgradeMode, serviceUpgradeProgress, startTimestampUtc, targetApplicationTypeVersion, upgradeDuration, upgradeReplicaSetCheckTimeoutInSeconds, upgradeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationResourceUpgradeProgressInfo {\n");
    sb.append("    applicationUpgradeStatusDetails: ").append(toIndentedString(applicationUpgradeStatusDetails)).append("\n");
    sb.append("    failureTimestampUtc: ").append(toIndentedString(failureTimestampUtc)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentCompleted: ").append(toIndentedString(percentCompleted)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    serviceUpgradeProgress: ").append(toIndentedString(serviceUpgradeProgress)).append("\n");
    sb.append("    startTimestampUtc: ").append(toIndentedString(startTimestampUtc)).append("\n");
    sb.append("    targetApplicationTypeVersion: ").append(toIndentedString(targetApplicationTypeVersion)).append("\n");
    sb.append("    upgradeDuration: ").append(toIndentedString(upgradeDuration)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationUpgradeStatusDetails");
    openapiFields.add("FailureTimestampUtc");
    openapiFields.add("Name");
    openapiFields.add("PercentCompleted");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("ServiceUpgradeProgress");
    openapiFields.add("StartTimestampUtc");
    openapiFields.add("TargetApplicationTypeVersion");
    openapiFields.add("UpgradeDuration");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");
    openapiFields.add("UpgradeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationResourceUpgradeProgressInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationResourceUpgradeProgressInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationResourceUpgradeProgressInfo is not found in the empty JSON string", ApplicationResourceUpgradeProgressInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationResourceUpgradeProgressInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationResourceUpgradeProgressInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApplicationUpgradeStatusDetails") != null && !jsonObj.get("ApplicationUpgradeStatusDetails").isJsonNull()) && !jsonObj.get("ApplicationUpgradeStatusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationUpgradeStatusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationUpgradeStatusDetails").toString()));
      }
      if ((jsonObj.get("FailureTimestampUtc") != null && !jsonObj.get("FailureTimestampUtc").isJsonNull()) && !jsonObj.get("FailureTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureTimestampUtc").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PercentCompleted") != null && !jsonObj.get("PercentCompleted").isJsonNull()) && !jsonObj.get("PercentCompleted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PercentCompleted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PercentCompleted").toString()));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        RollingUpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if (jsonObj.get("ServiceUpgradeProgress") != null && !jsonObj.get("ServiceUpgradeProgress").isJsonNull()) {
        JsonArray jsonArrayserviceUpgradeProgress = jsonObj.getAsJsonArray("ServiceUpgradeProgress");
        if (jsonArrayserviceUpgradeProgress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ServiceUpgradeProgress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ServiceUpgradeProgress` to be an array in the JSON string but got `%s`", jsonObj.get("ServiceUpgradeProgress").toString()));
          }

          // validate the optional field `ServiceUpgradeProgress` (array)
          for (int i = 0; i < jsonArrayserviceUpgradeProgress.size(); i++) {
            ServiceUpgradeProgress.validateJsonElement(jsonArrayserviceUpgradeProgress.get(i));
          };
        }
      }
      if ((jsonObj.get("StartTimestampUtc") != null && !jsonObj.get("StartTimestampUtc").isJsonNull()) && !jsonObj.get("StartTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTimestampUtc").toString()));
      }
      if ((jsonObj.get("TargetApplicationTypeVersion") != null && !jsonObj.get("TargetApplicationTypeVersion").isJsonNull()) && !jsonObj.get("TargetApplicationTypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetApplicationTypeVersion").toString()));
      }
      if ((jsonObj.get("UpgradeDuration") != null && !jsonObj.get("UpgradeDuration").isJsonNull()) && !jsonObj.get("UpgradeDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDuration").toString()));
      }
      // validate the optional field `UpgradeState`
      if (jsonObj.get("UpgradeState") != null && !jsonObj.get("UpgradeState").isJsonNull()) {
        ApplicationResourceUpgradeState.validateJsonElement(jsonObj.get("UpgradeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationResourceUpgradeProgressInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationResourceUpgradeProgressInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationResourceUpgradeProgressInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationResourceUpgradeProgressInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationResourceUpgradeProgressInfo>() {
           @Override
           public void write(JsonWriter out, ApplicationResourceUpgradeProgressInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationResourceUpgradeProgressInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationResourceUpgradeProgressInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationResourceUpgradeProgressInfo
   * @throws IOException if the JSON string is invalid with respect to ApplicationResourceUpgradeProgressInfo
   */
  public static ApplicationResourceUpgradeProgressInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationResourceUpgradeProgressInfo.class);
  }

  /**
   * Convert an instance of ApplicationResourceUpgradeProgressInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

