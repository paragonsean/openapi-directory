/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a configuration parameter override.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigParameterOverride {
  public static final String SERIALIZED_NAME_PARAMETER_NAME = "ParameterName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  public static final String SERIALIZED_NAME_PARAMETER_VALUE = "ParameterValue";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VALUE)
  private String parameterValue;

  public static final String SERIALIZED_NAME_PERSIST_ACROSS_UPGRADE = "PersistAcrossUpgrade";
  @SerializedName(SERIALIZED_NAME_PERSIST_ACROSS_UPGRADE)
  private Boolean persistAcrossUpgrade;

  public static final String SERIALIZED_NAME_SECTION_NAME = "SectionName";
  @SerializedName(SERIALIZED_NAME_SECTION_NAME)
  private String sectionName;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public ConfigParameterOverride() {
  }

  public ConfigParameterOverride parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

  /**
   * Name of the parameter that has been overridden.
   * @return parameterName
   */
  @javax.annotation.Nonnull
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public ConfigParameterOverride parameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
    return this;
  }

  /**
   * Value of the overridden parameter.
   * @return parameterValue
   */
  @javax.annotation.Nonnull
  public String getParameterValue() {
    return parameterValue;
  }

  public void setParameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
  }


  public ConfigParameterOverride persistAcrossUpgrade(Boolean persistAcrossUpgrade) {
    this.persistAcrossUpgrade = persistAcrossUpgrade;
    return this;
  }

  /**
   * A value that indicates whether config override will be removed on upgrade or will still be considered as valid.
   * @return persistAcrossUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getPersistAcrossUpgrade() {
    return persistAcrossUpgrade;
  }

  public void setPersistAcrossUpgrade(Boolean persistAcrossUpgrade) {
    this.persistAcrossUpgrade = persistAcrossUpgrade;
  }


  public ConfigParameterOverride sectionName(String sectionName) {
    this.sectionName = sectionName;
    return this;
  }

  /**
   * Name of the section for the parameter override.
   * @return sectionName
   */
  @javax.annotation.Nonnull
  public String getSectionName() {
    return sectionName;
  }

  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }


  public ConfigParameterOverride timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The duration until config override is considered as valid.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigParameterOverride configParameterOverride = (ConfigParameterOverride) o;
    return Objects.equals(this.parameterName, configParameterOverride.parameterName) &&
        Objects.equals(this.parameterValue, configParameterOverride.parameterValue) &&
        Objects.equals(this.persistAcrossUpgrade, configParameterOverride.persistAcrossUpgrade) &&
        Objects.equals(this.sectionName, configParameterOverride.sectionName) &&
        Objects.equals(this.timeout, configParameterOverride.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameterName, parameterValue, persistAcrossUpgrade, sectionName, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigParameterOverride {\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    parameterValue: ").append(toIndentedString(parameterValue)).append("\n");
    sb.append("    persistAcrossUpgrade: ").append(toIndentedString(persistAcrossUpgrade)).append("\n");
    sb.append("    sectionName: ").append(toIndentedString(sectionName)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParameterName");
    openapiFields.add("ParameterValue");
    openapiFields.add("PersistAcrossUpgrade");
    openapiFields.add("SectionName");
    openapiFields.add("Timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ParameterName");
    openapiRequiredFields.add("ParameterValue");
    openapiRequiredFields.add("SectionName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigParameterOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigParameterOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigParameterOverride is not found in the empty JSON string", ConfigParameterOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigParameterOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigParameterOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigParameterOverride.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ParameterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterName").toString()));
      }
      if (!jsonObj.get("ParameterValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParameterValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParameterValue").toString()));
      }
      if (!jsonObj.get("SectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SectionName").toString()));
      }
      if ((jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) && !jsonObj.get("Timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigParameterOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigParameterOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigParameterOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigParameterOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigParameterOverride>() {
           @Override
           public void write(JsonWriter out, ConfigParameterOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigParameterOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigParameterOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigParameterOverride
   * @throws IOException if the JSON string is invalid with respect to ConfigParameterOverride
   */
  public static ConfigParameterOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigParameterOverride.class);
  }

  /**
   * Convert an instance of ConfigParameterOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

