/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.PartitionInformation;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServicePartitionInfo;
import org.openapitools.client.model.ServicePartitionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a partition of a stateless Service Fabric service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatelessServicePartitionInfo extends ServicePartitionInfo {
  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "InstanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Long instanceCount;

  public static final String SERIALIZED_NAME_MIN_INSTANCE_COUNT = "MinInstanceCount";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCE_COUNT)
  private Integer minInstanceCount = 1;

  public static final String SERIALIZED_NAME_MIN_INSTANCE_PERCENTAGE = "MinInstancePercentage";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCE_PERCENTAGE)
  private Integer minInstancePercentage = 0;

  public StatelessServicePartitionInfo() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public StatelessServicePartitionInfo instanceCount(Long instanceCount) {
    this.instanceCount = instanceCount;
    return this;
  }

  /**
   * Number of instances of this partition.
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public Long getInstanceCount() {
    return instanceCount;
  }

  public void setInstanceCount(Long instanceCount) {
    this.instanceCount = instanceCount;
  }


  public StatelessServicePartitionInfo minInstanceCount(Integer minInstanceCount) {
    this.minInstanceCount = minInstanceCount;
    return this;
  }

  /**
   * MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
   * minimum: 1
   * @return minInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getMinInstanceCount() {
    return minInstanceCount;
  }

  public void setMinInstanceCount(Integer minInstanceCount) {
    this.minInstanceCount = minInstanceCount;
  }


  public StatelessServicePartitionInfo minInstancePercentage(Integer minInstancePercentage) {
    this.minInstancePercentage = minInstancePercentage;
    return this;
  }

  /**
   * MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
   * minimum: 0
   * maximum: 100
   * @return minInstancePercentage
   */
  @javax.annotation.Nullable
  public Integer getMinInstancePercentage() {
    return minInstancePercentage;
  }

  public void setMinInstancePercentage(Integer minInstancePercentage) {
    this.minInstancePercentage = minInstancePercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatelessServicePartitionInfo statelessServicePartitionInfo = (StatelessServicePartitionInfo) o;
    return Objects.equals(this.instanceCount, statelessServicePartitionInfo.instanceCount) &&
        Objects.equals(this.minInstanceCount, statelessServicePartitionInfo.minInstanceCount) &&
        Objects.equals(this.minInstancePercentage, statelessServicePartitionInfo.minInstancePercentage) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceCount, minInstanceCount, minInstancePercentage, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatelessServicePartitionInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    minInstanceCount: ").append(toIndentedString(minInstanceCount)).append("\n");
    sb.append("    minInstancePercentage: ").append(toIndentedString(minInstancePercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthState");
    openapiFields.add("PartitionInformation");
    openapiFields.add("PartitionStatus");
    openapiFields.add("ServiceKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatelessServicePartitionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatelessServicePartitionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatelessServicePartitionInfo is not found in the empty JSON string", StatelessServicePartitionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatelessServicePartitionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatelessServicePartitionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatelessServicePartitionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatelessServicePartitionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatelessServicePartitionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatelessServicePartitionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatelessServicePartitionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StatelessServicePartitionInfo>() {
           @Override
           public void write(JsonWriter out, StatelessServicePartitionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatelessServicePartitionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatelessServicePartitionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatelessServicePartitionInfo
   * @throws IOException if the JSON string is invalid with respect to StatelessServicePartitionInfo
   */
  public static StatelessServicePartitionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatelessServicePartitionInfo.class);
  }

  /**
   * Convert an instance of StatelessServicePartitionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

