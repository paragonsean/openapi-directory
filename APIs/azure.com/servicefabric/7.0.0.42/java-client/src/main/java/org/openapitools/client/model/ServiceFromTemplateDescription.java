/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServicePackageActivationMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines description for creating a Service Fabric service from a template defined in the application manifest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceFromTemplateDescription {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_INITIALIZATION_DATA = "InitializationData";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_DATA)
  private List<Integer> initializationData = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_DNS_NAME = "ServiceDnsName";
  @SerializedName(SERIALIZED_NAME_SERVICE_DNS_NAME)
  private String serviceDnsName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_MODE = "ServicePackageActivationMode";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_MODE)
  private ServicePackageActivationMode servicePackageActivationMode;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public ServiceFromTemplateDescription() {
  }

  public ServiceFromTemplateDescription applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * The name of the application, including the &#39;fabric:&#39; URI scheme.
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ServiceFromTemplateDescription initializationData(List<Integer> initializationData) {
    this.initializationData = initializationData;
    return this;
  }

  public ServiceFromTemplateDescription addInitializationDataItem(Integer initializationDataItem) {
    if (this.initializationData == null) {
      this.initializationData = new ArrayList<>();
    }
    this.initializationData.add(initializationDataItem);
    return this;
  }

  /**
   * Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
   * @return initializationData
   */
  @javax.annotation.Nullable
  public List<Integer> getInitializationData() {
    return initializationData;
  }

  public void setInitializationData(List<Integer> initializationData) {
    this.initializationData = initializationData;
  }


  public ServiceFromTemplateDescription serviceDnsName(String serviceDnsName) {
    this.serviceDnsName = serviceDnsName;
    return this;
  }

  /**
   * The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
   * @return serviceDnsName
   */
  @javax.annotation.Nullable
  public String getServiceDnsName() {
    return serviceDnsName;
  }

  public void setServiceDnsName(String serviceDnsName) {
    this.serviceDnsName = serviceDnsName;
  }


  public ServiceFromTemplateDescription serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The full name of the service with &#39;fabric:&#39; URI scheme.
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceFromTemplateDescription servicePackageActivationMode(ServicePackageActivationMode servicePackageActivationMode) {
    this.servicePackageActivationMode = servicePackageActivationMode;
    return this;
  }

  /**
   * Get servicePackageActivationMode
   * @return servicePackageActivationMode
   */
  @javax.annotation.Nullable
  public ServicePackageActivationMode getServicePackageActivationMode() {
    return servicePackageActivationMode;
  }

  public void setServicePackageActivationMode(ServicePackageActivationMode servicePackageActivationMode) {
    this.servicePackageActivationMode = servicePackageActivationMode;
  }


  public ServiceFromTemplateDescription serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Name of the service type as specified in the service manifest.
   * @return serviceTypeName
   */
  @javax.annotation.Nonnull
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceFromTemplateDescription serviceFromTemplateDescription = (ServiceFromTemplateDescription) o;
    return Objects.equals(this.applicationName, serviceFromTemplateDescription.applicationName) &&
        Objects.equals(this.initializationData, serviceFromTemplateDescription.initializationData) &&
        Objects.equals(this.serviceDnsName, serviceFromTemplateDescription.serviceDnsName) &&
        Objects.equals(this.serviceName, serviceFromTemplateDescription.serviceName) &&
        Objects.equals(this.servicePackageActivationMode, serviceFromTemplateDescription.servicePackageActivationMode) &&
        Objects.equals(this.serviceTypeName, serviceFromTemplateDescription.serviceTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, initializationData, serviceDnsName, serviceName, servicePackageActivationMode, serviceTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceFromTemplateDescription {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    initializationData: ").append(toIndentedString(initializationData)).append("\n");
    sb.append("    serviceDnsName: ").append(toIndentedString(serviceDnsName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    servicePackageActivationMode: ").append(toIndentedString(servicePackageActivationMode)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("InitializationData");
    openapiFields.add("ServiceDnsName");
    openapiFields.add("ServiceName");
    openapiFields.add("ServicePackageActivationMode");
    openapiFields.add("ServiceTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("ServiceName");
    openapiRequiredFields.add("ServiceTypeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceFromTemplateDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceFromTemplateDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceFromTemplateDescription is not found in the empty JSON string", ServiceFromTemplateDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceFromTemplateDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceFromTemplateDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceFromTemplateDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("InitializationData") != null && !jsonObj.get("InitializationData").isJsonNull() && !jsonObj.get("InitializationData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `InitializationData` to be an array in the JSON string but got `%s`", jsonObj.get("InitializationData").toString()));
      }
      if ((jsonObj.get("ServiceDnsName") != null && !jsonObj.get("ServiceDnsName").isJsonNull()) && !jsonObj.get("ServiceDnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceDnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceDnsName").toString()));
      }
      if (!jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
      // validate the optional field `ServicePackageActivationMode`
      if (jsonObj.get("ServicePackageActivationMode") != null && !jsonObj.get("ServicePackageActivationMode").isJsonNull()) {
        ServicePackageActivationMode.validateJsonElement(jsonObj.get("ServicePackageActivationMode"));
      }
      if (!jsonObj.get("ServiceTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceFromTemplateDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceFromTemplateDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceFromTemplateDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceFromTemplateDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceFromTemplateDescription>() {
           @Override
           public void write(JsonWriter out, ServiceFromTemplateDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceFromTemplateDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceFromTemplateDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceFromTemplateDescription
   * @throws IOException if the JSON string is invalid with respect to ServiceFromTemplateDescription
   */
  public static ServiceFromTemplateDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceFromTemplateDescription.class);
  }

  /**
   * Convert an instance of ServiceFromTemplateDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

