/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.HealthEvent;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.HealthStatistics;
import org.openapitools.client.model.ReplicaHealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the health of a Service Fabric partition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionHealth {
  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_REPLICA_HEALTH_STATES = "ReplicaHealthStates";
  @SerializedName(SERIALIZED_NAME_REPLICA_HEALTH_STATES)
  private List<ReplicaHealthState> replicaHealthStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_AGGREGATED_HEALTH_STATE = "AggregatedHealthState";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_HEALTH_STATE)
  private HealthState aggregatedHealthState;

  public static final String SERIALIZED_NAME_HEALTH_EVENTS = "HealthEvents";
  @SerializedName(SERIALIZED_NAME_HEALTH_EVENTS)
  private List<HealthEvent> healthEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_STATISTICS = "HealthStatistics";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATISTICS)
  private HealthStatistics healthStatistics;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> unhealthyEvaluations = new ArrayList<>();

  public PartitionHealth() {
  }

  public PartitionHealth partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public PartitionHealth replicaHealthStates(List<ReplicaHealthState> replicaHealthStates) {
    this.replicaHealthStates = replicaHealthStates;
    return this;
  }

  public PartitionHealth addReplicaHealthStatesItem(ReplicaHealthState replicaHealthStatesItem) {
    if (this.replicaHealthStates == null) {
      this.replicaHealthStates = new ArrayList<>();
    }
    this.replicaHealthStates.add(replicaHealthStatesItem);
    return this;
  }

  /**
   * The list of replica health states associated with the partition.
   * @return replicaHealthStates
   */
  @javax.annotation.Nullable
  public List<ReplicaHealthState> getReplicaHealthStates() {
    return replicaHealthStates;
  }

  public void setReplicaHealthStates(List<ReplicaHealthState> replicaHealthStates) {
    this.replicaHealthStates = replicaHealthStates;
  }


  public PartitionHealth aggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
    return this;
  }

  /**
   * Get aggregatedHealthState
   * @return aggregatedHealthState
   */
  @javax.annotation.Nullable
  public HealthState getAggregatedHealthState() {
    return aggregatedHealthState;
  }

  public void setAggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
  }


  public PartitionHealth healthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
    return this;
  }

  public PartitionHealth addHealthEventsItem(HealthEvent healthEventsItem) {
    if (this.healthEvents == null) {
      this.healthEvents = new ArrayList<>();
    }
    this.healthEvents.add(healthEventsItem);
    return this;
  }

  /**
   * The list of health events reported on the entity.
   * @return healthEvents
   */
  @javax.annotation.Nullable
  public List<HealthEvent> getHealthEvents() {
    return healthEvents;
  }

  public void setHealthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
  }


  public PartitionHealth healthStatistics(HealthStatistics healthStatistics) {
    this.healthStatistics = healthStatistics;
    return this;
  }

  /**
   * Get healthStatistics
   * @return healthStatistics
   */
  @javax.annotation.Nullable
  public HealthStatistics getHealthStatistics() {
    return healthStatistics;
  }

  public void setHealthStatistics(HealthStatistics healthStatistics) {
    this.healthStatistics = healthStatistics;
  }


  public PartitionHealth unhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public PartitionHealth addUnhealthyEvaluationsItem(HealthEvaluationWrapper unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionHealth partitionHealth = (PartitionHealth) o;
    return Objects.equals(this.partitionId, partitionHealth.partitionId) &&
        Objects.equals(this.replicaHealthStates, partitionHealth.replicaHealthStates) &&
        Objects.equals(this.aggregatedHealthState, partitionHealth.aggregatedHealthState) &&
        Objects.equals(this.healthEvents, partitionHealth.healthEvents) &&
        Objects.equals(this.healthStatistics, partitionHealth.healthStatistics) &&
        Objects.equals(this.unhealthyEvaluations, partitionHealth.unhealthyEvaluations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionId, replicaHealthStates, aggregatedHealthState, healthEvents, healthStatistics, unhealthyEvaluations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionHealth {\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaHealthStates: ").append(toIndentedString(replicaHealthStates)).append("\n");
    sb.append("    aggregatedHealthState: ").append(toIndentedString(aggregatedHealthState)).append("\n");
    sb.append("    healthEvents: ").append(toIndentedString(healthEvents)).append("\n");
    sb.append("    healthStatistics: ").append(toIndentedString(healthStatistics)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("HealthEvents");
    openapiFields.add("HealthStatistics");
    openapiFields.add("UnhealthyEvaluations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionHealth is not found in the empty JSON string", PartitionHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      if (jsonObj.get("ReplicaHealthStates") != null && !jsonObj.get("ReplicaHealthStates").isJsonNull()) {
        JsonArray jsonArrayreplicaHealthStates = jsonObj.getAsJsonArray("ReplicaHealthStates");
        if (jsonArrayreplicaHealthStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReplicaHealthStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReplicaHealthStates` to be an array in the JSON string but got `%s`", jsonObj.get("ReplicaHealthStates").toString()));
          }

          // validate the optional field `ReplicaHealthStates` (array)
          for (int i = 0; i < jsonArrayreplicaHealthStates.size(); i++) {
            ReplicaHealthState.validateJsonElement(jsonArrayreplicaHealthStates.get(i));
          };
        }
      }
      // validate the optional field `AggregatedHealthState`
      if (jsonObj.get("AggregatedHealthState") != null && !jsonObj.get("AggregatedHealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("AggregatedHealthState"));
      }
      if (jsonObj.get("HealthEvents") != null && !jsonObj.get("HealthEvents").isJsonNull()) {
        JsonArray jsonArrayhealthEvents = jsonObj.getAsJsonArray("HealthEvents");
        if (jsonArrayhealthEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HealthEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HealthEvents` to be an array in the JSON string but got `%s`", jsonObj.get("HealthEvents").toString()));
          }

          // validate the optional field `HealthEvents` (array)
          for (int i = 0; i < jsonArrayhealthEvents.size(); i++) {
            HealthEvent.validateJsonElement(jsonArrayhealthEvents.get(i));
          };
        }
      }
      // validate the optional field `HealthStatistics`
      if (jsonObj.get("HealthStatistics") != null && !jsonObj.get("HealthStatistics").isJsonNull()) {
        HealthStatistics.validateJsonElement(jsonObj.get("HealthStatistics"));
      }
      if (jsonObj.get("UnhealthyEvaluations") != null && !jsonObj.get("UnhealthyEvaluations").isJsonNull()) {
        JsonArray jsonArrayunhealthyEvaluations = jsonObj.getAsJsonArray("UnhealthyEvaluations");
        if (jsonArrayunhealthyEvaluations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UnhealthyEvaluations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UnhealthyEvaluations` to be an array in the JSON string but got `%s`", jsonObj.get("UnhealthyEvaluations").toString()));
          }

          // validate the optional field `UnhealthyEvaluations` (array)
          for (int i = 0; i < jsonArrayunhealthyEvaluations.size(); i++) {
            HealthEvaluationWrapper.validateJsonElement(jsonArrayunhealthyEvaluations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionHealth>() {
           @Override
           public void write(JsonWriter out, PartitionHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionHealth
   * @throws IOException if the JSON string is invalid with respect to PartitionHealth
   */
  public static PartitionHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionHealth.class);
  }

  /**
   * Convert an instance of PartitionHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

