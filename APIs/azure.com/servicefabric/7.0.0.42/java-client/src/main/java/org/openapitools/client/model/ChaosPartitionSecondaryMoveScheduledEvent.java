/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;
import org.openapitools.client.model.PartitionEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chaos Move Secondary Fault Scheduled event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosPartitionSecondaryMoveScheduledEvent extends PartitionEvent {
  public static final String SERIALIZED_NAME_DESTINATION_NODE = "DestinationNode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NODE)
  private String destinationNode;

  public static final String SERIALIZED_NAME_FAULT_GROUP_ID = "FaultGroupId";
  @SerializedName(SERIALIZED_NAME_FAULT_GROUP_ID)
  private UUID faultGroupId;

  public static final String SERIALIZED_NAME_FAULT_ID = "FaultId";
  @SerializedName(SERIALIZED_NAME_FAULT_ID)
  private UUID faultId;

  public static final String SERIALIZED_NAME_FORCED_MOVE = "ForcedMove";
  @SerializedName(SERIALIZED_NAME_FORCED_MOVE)
  private Boolean forcedMove;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SOURCE_NODE = "SourceNode";
  @SerializedName(SERIALIZED_NAME_SOURCE_NODE)
  private String sourceNode;

  public ChaosPartitionSecondaryMoveScheduledEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ChaosPartitionSecondaryMoveScheduledEvent destinationNode(String destinationNode) {
    this.destinationNode = destinationNode;
    return this;
  }

  /**
   * The name of a Service Fabric node.
   * @return destinationNode
   */
  @javax.annotation.Nonnull
  public String getDestinationNode() {
    return destinationNode;
  }

  public void setDestinationNode(String destinationNode) {
    this.destinationNode = destinationNode;
  }


  public ChaosPartitionSecondaryMoveScheduledEvent faultGroupId(UUID faultGroupId) {
    this.faultGroupId = faultGroupId;
    return this;
  }

  /**
   * Id of fault group.
   * @return faultGroupId
   */
  @javax.annotation.Nonnull
  public UUID getFaultGroupId() {
    return faultGroupId;
  }

  public void setFaultGroupId(UUID faultGroupId) {
    this.faultGroupId = faultGroupId;
  }


  public ChaosPartitionSecondaryMoveScheduledEvent faultId(UUID faultId) {
    this.faultId = faultId;
    return this;
  }

  /**
   * Id of fault.
   * @return faultId
   */
  @javax.annotation.Nonnull
  public UUID getFaultId() {
    return faultId;
  }

  public void setFaultId(UUID faultId) {
    this.faultId = faultId;
  }


  public ChaosPartitionSecondaryMoveScheduledEvent forcedMove(Boolean forcedMove) {
    this.forcedMove = forcedMove;
    return this;
  }

  /**
   * Indicates a forced move.
   * @return forcedMove
   */
  @javax.annotation.Nonnull
  public Boolean getForcedMove() {
    return forcedMove;
  }

  public void setForcedMove(Boolean forcedMove) {
    this.forcedMove = forcedMove;
  }


  public ChaosPartitionSecondaryMoveScheduledEvent serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Service name.
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ChaosPartitionSecondaryMoveScheduledEvent sourceNode(String sourceNode) {
    this.sourceNode = sourceNode;
    return this;
  }

  /**
   * The name of a Service Fabric node.
   * @return sourceNode
   */
  @javax.annotation.Nonnull
  public String getSourceNode() {
    return sourceNode;
  }

  public void setSourceNode(String sourceNode) {
    this.sourceNode = sourceNode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosPartitionSecondaryMoveScheduledEvent chaosPartitionSecondaryMoveScheduledEvent = (ChaosPartitionSecondaryMoveScheduledEvent) o;
    return Objects.equals(this.destinationNode, chaosPartitionSecondaryMoveScheduledEvent.destinationNode) &&
        Objects.equals(this.faultGroupId, chaosPartitionSecondaryMoveScheduledEvent.faultGroupId) &&
        Objects.equals(this.faultId, chaosPartitionSecondaryMoveScheduledEvent.faultId) &&
        Objects.equals(this.forcedMove, chaosPartitionSecondaryMoveScheduledEvent.forcedMove) &&
        Objects.equals(this.serviceName, chaosPartitionSecondaryMoveScheduledEvent.serviceName) &&
        Objects.equals(this.sourceNode, chaosPartitionSecondaryMoveScheduledEvent.sourceNode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationNode, faultGroupId, faultId, forcedMove, serviceName, sourceNode, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosPartitionSecondaryMoveScheduledEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    destinationNode: ").append(toIndentedString(destinationNode)).append("\n");
    sb.append("    faultGroupId: ").append(toIndentedString(faultGroupId)).append("\n");
    sb.append("    faultId: ").append(toIndentedString(faultId)).append("\n");
    sb.append("    forcedMove: ").append(toIndentedString(forcedMove)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    sourceNode: ").append(toIndentedString(sourceNode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PartitionId");
    openapiFields.add("Category");
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DestinationNode");
    openapiRequiredFields.add("FaultGroupId");
    openapiRequiredFields.add("FaultId");
    openapiRequiredFields.add("ForcedMove");
    openapiRequiredFields.add("ServiceName");
    openapiRequiredFields.add("SourceNode");
    openapiRequiredFields.add("PartitionId");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosPartitionSecondaryMoveScheduledEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosPartitionSecondaryMoveScheduledEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosPartitionSecondaryMoveScheduledEvent is not found in the empty JSON string", ChaosPartitionSecondaryMoveScheduledEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosPartitionSecondaryMoveScheduledEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosPartitionSecondaryMoveScheduledEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChaosPartitionSecondaryMoveScheduledEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosPartitionSecondaryMoveScheduledEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosPartitionSecondaryMoveScheduledEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosPartitionSecondaryMoveScheduledEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosPartitionSecondaryMoveScheduledEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosPartitionSecondaryMoveScheduledEvent>() {
           @Override
           public void write(JsonWriter out, ChaosPartitionSecondaryMoveScheduledEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosPartitionSecondaryMoveScheduledEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosPartitionSecondaryMoveScheduledEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosPartitionSecondaryMoveScheduledEvent
   * @throws IOException if the JSON string is invalid with respect to ChaosPartitionSecondaryMoveScheduledEvent
   */
  public static ChaosPartitionSecondaryMoveScheduledEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosPartitionSecondaryMoveScheduledEvent.class);
  }

  /**
   * Convert an instance of ChaosPartitionSecondaryMoveScheduledEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

