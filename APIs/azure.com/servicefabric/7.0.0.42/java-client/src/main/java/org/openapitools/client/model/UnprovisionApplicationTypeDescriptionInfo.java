/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the operation to unregister or unprovision an application type and its version that was registered with the Service Fabric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnprovisionApplicationTypeDescriptionInfo {
  public static final String SERIALIZED_NAME_APPLICATION_TYPE_VERSION = "ApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_VERSION)
  private String applicationTypeVersion;

  public static final String SERIALIZED_NAME_ASYNC = "Async";
  @SerializedName(SERIALIZED_NAME_ASYNC)
  private Boolean async;

  public UnprovisionApplicationTypeDescriptionInfo() {
  }

  public UnprovisionApplicationTypeDescriptionInfo applicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
    return this;
  }

  /**
   * The version of the application type as defined in the application manifest.
   * @return applicationTypeVersion
   */
  @javax.annotation.Nonnull
  public String getApplicationTypeVersion() {
    return applicationTypeVersion;
  }

  public void setApplicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
  }


  public UnprovisionApplicationTypeDescriptionInfo async(Boolean async) {
    this.async = async;
    return this;
  }

  /**
   * The flag indicating whether or not unprovision should occur asynchronously. When set to true, the unprovision operation returns when the request is accepted by the system, and the unprovision operation continues without any timeout limit. The default value is false. However, we recommend setting it to true for large application packages that were provisioned.
   * @return async
   */
  @javax.annotation.Nullable
  public Boolean getAsync() {
    return async;
  }

  public void setAsync(Boolean async) {
    this.async = async;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnprovisionApplicationTypeDescriptionInfo unprovisionApplicationTypeDescriptionInfo = (UnprovisionApplicationTypeDescriptionInfo) o;
    return Objects.equals(this.applicationTypeVersion, unprovisionApplicationTypeDescriptionInfo.applicationTypeVersion) &&
        Objects.equals(this.async, unprovisionApplicationTypeDescriptionInfo.async);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationTypeVersion, async);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnprovisionApplicationTypeDescriptionInfo {\n");
    sb.append("    applicationTypeVersion: ").append(toIndentedString(applicationTypeVersion)).append("\n");
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationTypeVersion");
    openapiFields.add("Async");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationTypeVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnprovisionApplicationTypeDescriptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnprovisionApplicationTypeDescriptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnprovisionApplicationTypeDescriptionInfo is not found in the empty JSON string", UnprovisionApplicationTypeDescriptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnprovisionApplicationTypeDescriptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnprovisionApplicationTypeDescriptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UnprovisionApplicationTypeDescriptionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationTypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationTypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationTypeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnprovisionApplicationTypeDescriptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnprovisionApplicationTypeDescriptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnprovisionApplicationTypeDescriptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnprovisionApplicationTypeDescriptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UnprovisionApplicationTypeDescriptionInfo>() {
           @Override
           public void write(JsonWriter out, UnprovisionApplicationTypeDescriptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnprovisionApplicationTypeDescriptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnprovisionApplicationTypeDescriptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnprovisionApplicationTypeDescriptionInfo
   * @throws IOException if the JSON string is invalid with respect to UnprovisionApplicationTypeDescriptionInfo
   */
  public static UnprovisionApplicationTypeDescriptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnprovisionApplicationTypeDescriptionInfo.class);
  }

  /**
   * Convert an instance of UnprovisionApplicationTypeDescriptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

