/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 7.0.0.42
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskInfo;
import org.openapitools.client.model.UsageInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the ImageStore&#39;s resource usage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.135207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageStoreInfo {
  public static final String SERIALIZED_NAME_DISK_INFO = "DiskInfo";
  @SerializedName(SERIALIZED_NAME_DISK_INFO)
  private DiskInfo diskInfo;

  public static final String SERIALIZED_NAME_USED_BY_COPY = "UsedByCopy";
  @SerializedName(SERIALIZED_NAME_USED_BY_COPY)
  private UsageInfo usedByCopy;

  public static final String SERIALIZED_NAME_USED_BY_METADATA = "UsedByMetadata";
  @SerializedName(SERIALIZED_NAME_USED_BY_METADATA)
  private UsageInfo usedByMetadata;

  public static final String SERIALIZED_NAME_USED_BY_REGISTER = "UsedByRegister";
  @SerializedName(SERIALIZED_NAME_USED_BY_REGISTER)
  private UsageInfo usedByRegister;

  public static final String SERIALIZED_NAME_USED_BY_STAGING = "UsedByStaging";
  @SerializedName(SERIALIZED_NAME_USED_BY_STAGING)
  private UsageInfo usedByStaging;

  public ImageStoreInfo() {
  }

  public ImageStoreInfo diskInfo(DiskInfo diskInfo) {
    this.diskInfo = diskInfo;
    return this;
  }

  /**
   * Get diskInfo
   * @return diskInfo
   */
  @javax.annotation.Nullable
  public DiskInfo getDiskInfo() {
    return diskInfo;
  }

  public void setDiskInfo(DiskInfo diskInfo) {
    this.diskInfo = diskInfo;
  }


  public ImageStoreInfo usedByCopy(UsageInfo usedByCopy) {
    this.usedByCopy = usedByCopy;
    return this;
  }

  /**
   * Get usedByCopy
   * @return usedByCopy
   */
  @javax.annotation.Nullable
  public UsageInfo getUsedByCopy() {
    return usedByCopy;
  }

  public void setUsedByCopy(UsageInfo usedByCopy) {
    this.usedByCopy = usedByCopy;
  }


  public ImageStoreInfo usedByMetadata(UsageInfo usedByMetadata) {
    this.usedByMetadata = usedByMetadata;
    return this;
  }

  /**
   * Get usedByMetadata
   * @return usedByMetadata
   */
  @javax.annotation.Nullable
  public UsageInfo getUsedByMetadata() {
    return usedByMetadata;
  }

  public void setUsedByMetadata(UsageInfo usedByMetadata) {
    this.usedByMetadata = usedByMetadata;
  }


  public ImageStoreInfo usedByRegister(UsageInfo usedByRegister) {
    this.usedByRegister = usedByRegister;
    return this;
  }

  /**
   * Get usedByRegister
   * @return usedByRegister
   */
  @javax.annotation.Nullable
  public UsageInfo getUsedByRegister() {
    return usedByRegister;
  }

  public void setUsedByRegister(UsageInfo usedByRegister) {
    this.usedByRegister = usedByRegister;
  }


  public ImageStoreInfo usedByStaging(UsageInfo usedByStaging) {
    this.usedByStaging = usedByStaging;
    return this;
  }

  /**
   * Get usedByStaging
   * @return usedByStaging
   */
  @javax.annotation.Nullable
  public UsageInfo getUsedByStaging() {
    return usedByStaging;
  }

  public void setUsedByStaging(UsageInfo usedByStaging) {
    this.usedByStaging = usedByStaging;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageStoreInfo imageStoreInfo = (ImageStoreInfo) o;
    return Objects.equals(this.diskInfo, imageStoreInfo.diskInfo) &&
        Objects.equals(this.usedByCopy, imageStoreInfo.usedByCopy) &&
        Objects.equals(this.usedByMetadata, imageStoreInfo.usedByMetadata) &&
        Objects.equals(this.usedByRegister, imageStoreInfo.usedByRegister) &&
        Objects.equals(this.usedByStaging, imageStoreInfo.usedByStaging);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskInfo, usedByCopy, usedByMetadata, usedByRegister, usedByStaging);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageStoreInfo {\n");
    sb.append("    diskInfo: ").append(toIndentedString(diskInfo)).append("\n");
    sb.append("    usedByCopy: ").append(toIndentedString(usedByCopy)).append("\n");
    sb.append("    usedByMetadata: ").append(toIndentedString(usedByMetadata)).append("\n");
    sb.append("    usedByRegister: ").append(toIndentedString(usedByRegister)).append("\n");
    sb.append("    usedByStaging: ").append(toIndentedString(usedByStaging)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DiskInfo");
    openapiFields.add("UsedByCopy");
    openapiFields.add("UsedByMetadata");
    openapiFields.add("UsedByRegister");
    openapiFields.add("UsedByStaging");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageStoreInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageStoreInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageStoreInfo is not found in the empty JSON string", ImageStoreInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageStoreInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageStoreInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DiskInfo`
      if (jsonObj.get("DiskInfo") != null && !jsonObj.get("DiskInfo").isJsonNull()) {
        DiskInfo.validateJsonElement(jsonObj.get("DiskInfo"));
      }
      // validate the optional field `UsedByCopy`
      if (jsonObj.get("UsedByCopy") != null && !jsonObj.get("UsedByCopy").isJsonNull()) {
        UsageInfo.validateJsonElement(jsonObj.get("UsedByCopy"));
      }
      // validate the optional field `UsedByMetadata`
      if (jsonObj.get("UsedByMetadata") != null && !jsonObj.get("UsedByMetadata").isJsonNull()) {
        UsageInfo.validateJsonElement(jsonObj.get("UsedByMetadata"));
      }
      // validate the optional field `UsedByRegister`
      if (jsonObj.get("UsedByRegister") != null && !jsonObj.get("UsedByRegister").isJsonNull()) {
        UsageInfo.validateJsonElement(jsonObj.get("UsedByRegister"));
      }
      // validate the optional field `UsedByStaging`
      if (jsonObj.get("UsedByStaging") != null && !jsonObj.get("UsedByStaging").isJsonNull()) {
        UsageInfo.validateJsonElement(jsonObj.get("UsedByStaging"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageStoreInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageStoreInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageStoreInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageStoreInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageStoreInfo>() {
           @Override
           public void write(JsonWriter out, ImageStoreInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageStoreInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageStoreInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageStoreInfo
   * @throws IOException if the JSON string is invalid with respect to ImageStoreInfo
   */
  public static ImageStoreInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageStoreInfo.class);
  }

  /**
   * Convert an instance of ImageStoreInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

