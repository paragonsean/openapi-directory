/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.ApplicationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationApi', function() {
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationHealth', function() {
      it('should call getApplicationHealth successfully', function(done) {
        //uncomment below and update the code to test getApplicationHealth
        //instance.getApplicationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationHealthUsingPolicy', function() {
      it('should call getApplicationHealthUsingPolicy successfully', function(done) {
        //uncomment below and update the code to test getApplicationHealthUsingPolicy
        //instance.getApplicationHealthUsingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationInfo', function() {
      it('should call getApplicationInfo successfully', function(done) {
        //uncomment below and update the code to test getApplicationInfo
        //instance.getApplicationInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationInfoList', function() {
      it('should call getApplicationInfoList successfully', function(done) {
        //uncomment below and update the code to test getApplicationInfoList
        //instance.getApplicationInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationLoadInfo', function() {
      it('should call getApplicationLoadInfo successfully', function(done) {
        //uncomment below and update the code to test getApplicationLoadInfo
        //instance.getApplicationLoadInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationUpgrade', function() {
      it('should call getApplicationUpgrade successfully', function(done) {
        //uncomment below and update the code to test getApplicationUpgrade
        //instance.getApplicationUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedApplicationHealth', function() {
      it('should call getDeployedApplicationHealth successfully', function(done) {
        //uncomment below and update the code to test getDeployedApplicationHealth
        //instance.getDeployedApplicationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedApplicationHealthUsingPolicy', function() {
      it('should call getDeployedApplicationHealthUsingPolicy successfully', function(done) {
        //uncomment below and update the code to test getDeployedApplicationHealthUsingPolicy
        //instance.getDeployedApplicationHealthUsingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedApplicationInfo', function() {
      it('should call getDeployedApplicationInfo successfully', function(done) {
        //uncomment below and update the code to test getDeployedApplicationInfo
        //instance.getDeployedApplicationInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployedApplicationInfoList', function() {
      it('should call getDeployedApplicationInfoList successfully', function(done) {
        //uncomment below and update the code to test getDeployedApplicationInfoList
        //instance.getDeployedApplicationInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportApplicationHealth', function() {
      it('should call reportApplicationHealth successfully', function(done) {
        //uncomment below and update the code to test reportApplicationHealth
        //instance.reportApplicationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportDeployedApplicationHealth', function() {
      it('should call reportDeployedApplicationHealth successfully', function(done) {
        //uncomment below and update the code to test reportDeployedApplicationHealth
        //instance.reportDeployedApplicationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeApplicationUpgrade', function() {
      it('should call resumeApplicationUpgrade successfully', function(done) {
        //uncomment below and update the code to test resumeApplicationUpgrade
        //instance.resumeApplicationUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rollbackApplicationUpgrade', function() {
      it('should call rollbackApplicationUpgrade successfully', function(done) {
        //uncomment below and update the code to test rollbackApplicationUpgrade
        //instance.rollbackApplicationUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startApplicationUpgrade', function() {
      it('should call startApplicationUpgrade successfully', function(done) {
        //uncomment below and update the code to test startApplicationUpgrade
        //instance.startApplicationUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplicationUpgrade', function() {
      it('should call updateApplicationUpgrade successfully', function(done) {
        //uncomment below and update the code to test updateApplicationUpgrade
        //instance.updateApplicationUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
