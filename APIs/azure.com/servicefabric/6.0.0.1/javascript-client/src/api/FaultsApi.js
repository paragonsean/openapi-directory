/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FabricError from '../model/FabricError';
import NodeTransitionProgress from '../model/NodeTransitionProgress';
import OperationStatus from '../model/OperationStatus';
import PartitionDataLossProgress from '../model/PartitionDataLossProgress';
import PartitionQuorumLossProgress from '../model/PartitionQuorumLossProgress';
import PartitionRestartProgress from '../model/PartitionRestartProgress';

/**
* Faults service.
* @module api/FaultsApi
* @version 6.0.0.1
*/
export default class FaultsApi {

    /**
    * Constructs a new FaultsApi. 
    * @alias module:api/FaultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelOperation operation.
     * @callback module:api/FaultsApi~cancelOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a user-induced fault operation.
     * The following is a list of APIs that start fault operations that may be cancelled using CancelOperation - - StartDataLoss - StartQuorumLoss - StartPartitionRestart - StartNodeTransition  If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system will/is be cleaning up internal system state caused by executing the command.  It will not restore data if the test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command. It will not restore the target partition's data, if the command progressed far enough to cause data loss.  Important note:  if this API is invoked with force==true, internal state may be left behind. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {Boolean} force Indicates whether to gracefully rollback and clean up internal system state modified by executing the user-induced operation.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~cancelOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelOperation(apiVersion, operationId, force, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cancelOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling cancelOperation");
      }
      // verify the required parameter 'force' is set
      if (force === undefined || force === null) {
        throw new Error("Missing the required parameter 'force' when calling cancelOperation");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'Force': force,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Faults/$/Cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataLossProgress operation.
     * @callback module:api/FaultsApi~getDataLossProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionDataLossProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the progress of a partition data loss operation started using the StartDataLoss API.
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~getDataLossProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionDataLossProgress}
     */
    getDataLossProgress(apiVersion, serviceId, partitionId, operationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDataLossProgress");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getDataLossProgress");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getDataLossProgress");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getDataLossProgress");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionDataLossProgress;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFaultOperationList operation.
     * @callback module:api/FaultsApi~getFaultOperationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OperationStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of user-induced fault operations filtered by provided input.
     * Gets the a list of user-induced fault operations filtered by provided input.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {Number} typeFilter Used to filter on OperationType for user-induced operations. 65535 - select all 1     - select PartitionDataLoss. 2     - select PartitionQuorumLoss. 4     - select PartitionRestart. 8     - select NodeTransition. 
     * @param {Number} stateFilter Used to filter on OperationState's for user-induced operations. 65535 - select All 1     - select Running 2     - select RollingBack 8     - select Completed 16    - select Faulted 32    - select Cancelled 64    - select ForceCancelled 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~getFaultOperationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OperationStatus>}
     */
    getFaultOperationList(apiVersion, typeFilter, stateFilter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getFaultOperationList");
      }
      // verify the required parameter 'typeFilter' is set
      if (typeFilter === undefined || typeFilter === null) {
        throw new Error("Missing the required parameter 'typeFilter' when calling getFaultOperationList");
      }
      // verify the required parameter 'stateFilter' is set
      if (stateFilter === undefined || stateFilter === null) {
        throw new Error("Missing the required parameter 'stateFilter' when calling getFaultOperationList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'TypeFilter': typeFilter,
        'StateFilter': stateFilter,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OperationStatus];
      return this.apiClient.callApi(
        '/Faults/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeTransitionProgress operation.
     * @callback module:api/FaultsApi~getNodeTransitionProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeTransitionProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the progress of an operation started using StartNodeTransition.
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} nodeName The name of the node.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~getNodeTransitionProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeTransitionProgress}
     */
    getNodeTransitionProgress(apiVersion, nodeName, operationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getNodeTransitionProgress");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling getNodeTransitionProgress");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getNodeTransitionProgress");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeTransitionProgress;
      return this.apiClient.callApi(
        '/Faults/Nodes/{nodeName}/$/GetTransitionProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartitionRestartProgress operation.
     * @callback module:api/FaultsApi~getPartitionRestartProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionRestartProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the progress of a PartitionRestart operation started using StartPartitionRestart.
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~getPartitionRestartProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionRestartProgress}
     */
    getPartitionRestartProgress(apiVersion, serviceId, partitionId, operationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPartitionRestartProgress");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getPartitionRestartProgress");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getPartitionRestartProgress");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getPartitionRestartProgress");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionRestartProgress;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuorumLossProgress operation.
     * @callback module:api/FaultsApi~getQuorumLossProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionQuorumLossProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the progress of a quorum loss operation on a partition started using the StartQuorumLoss API.
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~getQuorumLossProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionQuorumLossProgress}
     */
    getQuorumLossProgress(apiVersion, serviceId, partitionId, operationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getQuorumLossProgress");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getQuorumLossProgress");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling getQuorumLossProgress");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getQuorumLossProgress");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionQuorumLossProgress;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDataLoss operation.
     * @callback module:api/FaultsApi~startDataLossCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLossAsync API of the partition.
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition. Actual data loss will depend on the specified DataLossMode PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication. FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.  This API should only be called with a stateful service as the target.  Calling this API with a system service as the target is not advised.  Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state. It will not restore data if the command has progressed far enough to cause data loss.  Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {module:model/String} dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data loss to induce. - Invalid - Reserved.  Do not pass into API. - PartialDataLoss - PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for the given partition. - FullDataLoss - FullDataLoss option will drop all the replicas which means that all the data will be lost. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~startDataLossCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startDataLoss(apiVersion, serviceId, partitionId, operationId, dataLossMode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startDataLoss");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling startDataLoss");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling startDataLoss");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling startDataLoss");
      }
      // verify the required parameter 'dataLossMode' is set
      if (dataLossMode === undefined || dataLossMode === null) {
        throw new Error("Missing the required parameter 'dataLossMode' when calling startDataLoss");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'DataLossMode': dataLossMode,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startNodeTransition operation.
     * @callback module:api/FaultsApi~startNodeTransitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts or stops a cluster node.
     * Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in \"Start\" for the NodeTransitionType parameter. To stop a node, pass in \"Stop\" for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet. Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} nodeName The name of the node.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {module:model/String} nodeTransitionType Indicates the type of transition to perform.  NodeTransitionType.Start will start a stopped node.  NodeTransitionType.Stop will stop a node that is up.   - Invalid - Reserved.  Do not pass into API.   - Start - Transition a stopped node to up.   - Stop - Transition an up node to stopped. 
     * @param {String} nodeInstanceId The node instance ID of the target node.  This can be determined through GetNodeInfo API.
     * @param {Number} stopDurationInSeconds The duration, in seconds, to keep the node stopped.  The minimum value is 600, the maximum is 14400.  After this time expires, the node will automatically come back up.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~startNodeTransitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startNodeTransition(apiVersion, nodeName, operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startNodeTransition");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling startNodeTransition");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling startNodeTransition");
      }
      // verify the required parameter 'nodeTransitionType' is set
      if (nodeTransitionType === undefined || nodeTransitionType === null) {
        throw new Error("Missing the required parameter 'nodeTransitionType' when calling startNodeTransition");
      }
      // verify the required parameter 'nodeInstanceId' is set
      if (nodeInstanceId === undefined || nodeInstanceId === null) {
        throw new Error("Missing the required parameter 'nodeInstanceId' when calling startNodeTransition");
      }
      // verify the required parameter 'stopDurationInSeconds' is set
      if (stopDurationInSeconds === undefined || stopDurationInSeconds === null) {
        throw new Error("Missing the required parameter 'stopDurationInSeconds' when calling startNodeTransition");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'NodeTransitionType': nodeTransitionType,
        'NodeInstanceId': nodeInstanceId,
        'StopDurationInSeconds': stopDurationInSeconds,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Faults/Nodes/{nodeName}/$/StartTransition/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startPartitionRestart operation.
     * @callback module:api/FaultsApi~startPartitionRestartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API will restart some or all replicas or instances of the specified partition.
     * This API is useful for testing failover.  If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.  Call the GetPartitionRestartProgress API using the same OperationId to get the progress. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {module:model/String} restartPartitionMode - Invalid - Reserved.  Do not pass into API. - AllReplicasOrInstances - All replicas or instances in the partition are restarted at once. - OnlyActiveSecondaries - Only the secondary replicas are restarted. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~startPartitionRestartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startPartitionRestart(apiVersion, serviceId, partitionId, operationId, restartPartitionMode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startPartitionRestart");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling startPartitionRestart");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling startPartitionRestart");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling startPartitionRestart");
      }
      // verify the required parameter 'restartPartitionMode' is set
      if (restartPartitionMode === undefined || restartPartitionMode === null) {
        throw new Error("Missing the required parameter 'restartPartitionMode' when calling startPartitionRestart");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'RestartPartitionMode': restartPartitionMode,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startQuorumLoss operation.
     * @callback module:api/FaultsApi~startQuorumLossCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Induces quorum loss for a given stateful service partition.
     * Induces quorum loss for a given stateful service partition.  This API is useful for a temporary quorum loss situation on your service.  Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.  This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use this API on stateless services or stateful in-memory only services. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} serviceId The identity of the service. This is typically the full name of the service without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.
     * @param {String} partitionId The identity of the partition.
     * @param {String} operationId A GUID that identifies a call of this API.  This is passed into the corresponding GetProgress API
     * @param {module:model/String} quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of quorum loss to induce.   - Invalid - Reserved.  Do not pass into API.   - QuorumReplicas - Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss.   - AllReplicas- Full Quorum loss mode : All replicas for a partition will be down that will cause a quorum loss. 
     * @param {Number} quorumLossDuration The amount of time for which the partition will be kept in quorum loss.  This must be specified in seconds.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/FaultsApi~startQuorumLossCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startQuorumLoss(apiVersion, serviceId, partitionId, operationId, quorumLossMode, quorumLossDuration, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startQuorumLoss");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling startQuorumLoss");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling startQuorumLoss");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling startQuorumLoss");
      }
      // verify the required parameter 'quorumLossMode' is set
      if (quorumLossMode === undefined || quorumLossMode === null) {
        throw new Error("Missing the required parameter 'quorumLossMode' when calling startQuorumLoss");
      }
      // verify the required parameter 'quorumLossDuration' is set
      if (quorumLossDuration === undefined || quorumLossDuration === null) {
        throw new Error("Missing the required parameter 'quorumLossDuration' when calling startQuorumLoss");
      }

      let pathParams = {
        'serviceId': serviceId,
        'partitionId': partitionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'OperationId': operationId,
        'QuorumLossMode': quorumLossMode,
        'QuorumLossDuration': quorumLossDuration,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
