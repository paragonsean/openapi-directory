/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FabricError from '../model/FabricError';
import ImageStoreContent from '../model/ImageStoreContent';
import ImageStoreCopyDescription from '../model/ImageStoreCopyDescription';

/**
* ImageStore service.
* @module api/ImageStoreApi
* @version 6.0.0.1
*/
export default class ImageStoreApi {

    /**
    * Constructs a new ImageStoreApi. 
    * @alias module:api/ImageStoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the copyImageStoreContent operation.
     * @callback module:api/ImageStoreApi~copyImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies image store content internally
     * Copies the image store content from the source image store relative path to the destination image store relative path.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/ImageStoreCopyDescription} imageStoreCopyDescription Describes the copy description for the image store.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~copyImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    copyImageStoreContent(apiVersion, imageStoreCopyDescription, opts, callback) {
      opts = opts || {};
      let postBody = imageStoreCopyDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling copyImageStoreContent");
      }
      // verify the required parameter 'imageStoreCopyDescription' is set
      if (imageStoreCopyDescription === undefined || imageStoreCopyDescription === null) {
        throw new Error("Missing the required parameter 'imageStoreCopyDescription' when calling copyImageStoreContent");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/$/Copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageStoreContent operation.
     * @callback module:api/ImageStoreApi~deleteImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes existing image store content.
     * Deletes existing image store content being found within the given image store relative path. This can be used to delete uploaded application packages once they are provisioned.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~deleteImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageStoreContent(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteImageStoreContent");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling deleteImageStoreContent");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreContent operation.
     * @callback module:api/ImageStoreApi~getImageStoreContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageStoreContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the image store content information.
     * Returns the information about the image store content at the specified contentPath relative to the root of the image store.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageStoreContent}
     */
    getImageStoreContent(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreContent");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling getImageStoreContent");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageStoreContent;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageStoreRootContent operation.
     * @callback module:api/ImageStoreApi~getImageStoreRootContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageStoreContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the content information at the root of the image store.
     * Returns the information about the image store content at the root of the image store.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~getImageStoreRootContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageStoreContent}
     */
    getImageStoreRootContent(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getImageStoreRootContent");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageStoreContent;
      return this.apiClient.callApi(
        '/ImageStore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/ImageStoreApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads contents of the file to the image store.
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file's data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named \"_.dir\". The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn't aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} contentPath Relative path to file or folder in the image store from its root.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ImageStoreApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadFile(apiVersion, contentPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling uploadFile");
      }
      // verify the required parameter 'contentPath' is set
      if (contentPath === undefined || contentPath === null) {
        throw new Error("Missing the required parameter 'contentPath' when calling uploadFile");
      }

      let pathParams = {
        'contentPath': contentPath
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ImageStore/{contentPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
