/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeployedServiceTypeInfo from '../model/DeployedServiceTypeInfo';
import FabricError from '../model/FabricError';
import ServiceTypeInfo from '../model/ServiceTypeInfo';
import ServiceTypeManifest from '../model/ServiceTypeManifest';

/**
* ServiceType service.
* @module api/ServiceTypeApi
* @version 6.0.0.1
*/
export default class ServiceTypeApi {

    /**
    * Constructs a new ServiceTypeApi. 
    * @alias module:api/ServiceTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDeployedServiceTypeInfoByName operation.
     * @callback module:api/ServiceTypeApi~getDeployedServiceTypeInfoByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedServiceTypeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the information about a specified service type of the application deployed on a node in a Service Fabric cluster.
     * Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation id of the service package. Each entry represents one activation of a service type, differentiated by the activation id.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric://myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {String} serviceTypeName Specifies the name of a Service Fabric service type.
     * @param {Object} opts Optional parameters
     * @param {String} [serviceManifestName] The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ServiceTypeApi~getDeployedServiceTypeInfoByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedServiceTypeInfo>}
     */
    getDeployedServiceTypeInfoByName(apiVersion, nodeName, applicationId, serviceTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeployedServiceTypeInfoByName");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling getDeployedServiceTypeInfoByName");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDeployedServiceTypeInfoByName");
      }
      // verify the required parameter 'serviceTypeName' is set
      if (serviceTypeName === undefined || serviceTypeName === null) {
        throw new Error("Missing the required parameter 'serviceTypeName' when calling getDeployedServiceTypeInfoByName");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId,
        'serviceTypeName': serviceTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'ServiceManifestName': opts['serviceManifestName'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedServiceTypeInfo];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployedServiceTypeInfoList operation.
     * @callback module:api/ServiceTypeApi~getDeployedServiceTypeInfoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedServiceTypeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster.
     * Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation id of the service package.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} nodeName The name of the node.
     * @param {String} applicationId The identity of the application. This is typically the full name of the application without the 'fabric:' URI scheme. Starting from version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric://myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param {Object} opts Optional parameters
     * @param {String} [serviceManifestName] The name of the service manifest to filter the list of deployed service type information. If specified, the response will only contain the information about service types that are defined in this service manifest.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ServiceTypeApi~getDeployedServiceTypeInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedServiceTypeInfo>}
     */
    getDeployedServiceTypeInfoList(apiVersion, nodeName, applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getDeployedServiceTypeInfoList");
      }
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling getDeployedServiceTypeInfoList");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDeployedServiceTypeInfoList");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationId': applicationId
      };
      let queryParams = {
        'api-version': apiVersion,
        'ServiceManifestName': opts['serviceManifestName'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedServiceTypeInfo];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceManifest operation.
     * @callback module:api/ServiceTypeApi~getServiceManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTypeManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the manifest describing a service type.
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} applicationTypeName The name of the application type.
     * @param {String} applicationTypeVersion The version of the application type.
     * @param {String} serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ServiceTypeApi~getServiceManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTypeManifest}
     */
    getServiceManifest(apiVersion, applicationTypeName, applicationTypeVersion, serviceManifestName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getServiceManifest");
      }
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling getServiceManifest");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling getServiceManifest");
      }
      // verify the required parameter 'serviceManifestName' is set
      if (serviceManifestName === undefined || serviceManifestName === null) {
        throw new Error("Missing the required parameter 'serviceManifestName' when calling getServiceManifest");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'ApplicationTypeVersion': applicationTypeVersion,
        'ServiceManifestName': serviceManifestName,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceTypeManifest;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceTypeInfoList operation.
     * @callback module:api/ServiceTypeApi~getServiceTypeInfoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceTypeInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster.
     * Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The response includes the name of the service type, the name and version of the service manifest the type is defined in, kind (stateless or stateless) of the service type and other information about it.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {String} applicationTypeName The name of the application type.
     * @param {String} applicationTypeVersion The version of the application type.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ServiceTypeApi~getServiceTypeInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceTypeInfo>}
     */
    getServiceTypeInfoList(apiVersion, applicationTypeName, applicationTypeVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getServiceTypeInfoList");
      }
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling getServiceTypeInfoList");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling getServiceTypeInfoList");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'api-version': apiVersion,
        'ApplicationTypeVersion': applicationTypeVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceTypeInfo];
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
