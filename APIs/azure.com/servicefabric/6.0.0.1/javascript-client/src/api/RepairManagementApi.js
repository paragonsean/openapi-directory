/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FabricError from '../model/FabricError';
import RepairTask from '../model/RepairTask';
import RepairTaskApproveDescription from '../model/RepairTaskApproveDescription';
import RepairTaskCancelDescription from '../model/RepairTaskCancelDescription';
import RepairTaskDeleteDescription from '../model/RepairTaskDeleteDescription';
import RepairTaskUpdateHealthPolicyDescription from '../model/RepairTaskUpdateHealthPolicyDescription';
import RepairTaskUpdateInfo from '../model/RepairTaskUpdateInfo';

/**
* RepairManagement service.
* @module api/RepairManagementApi
* @version 6.0.0.1
*/
export default class RepairManagementApi {

    /**
    * Constructs a new RepairManagementApi. 
    * @alias module:api/RepairManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRepairTask operation.
     * @callback module:api/RepairManagementApi~cancelRepairTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepairTaskUpdateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests the cancellation of the given repair task.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTaskCancelDescription} repairTaskCancelDescription Describes the repair task to be cancelled.
     * @param {module:api/RepairManagementApi~cancelRepairTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepairTaskUpdateInfo}
     */
    cancelRepairTask(apiVersion, repairTaskCancelDescription, callback) {
      let postBody = repairTaskCancelDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling cancelRepairTask");
      }
      // verify the required parameter 'repairTaskCancelDescription' is set
      if (repairTaskCancelDescription === undefined || repairTaskCancelDescription === null) {
        throw new Error("Missing the required parameter 'repairTaskCancelDescription' when calling cancelRepairTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepairTaskUpdateInfo;
      return this.apiClient.callApi(
        '/$/CancelRepairTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepairTask operation.
     * @callback module:api/RepairManagementApi~createRepairTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepairTaskUpdateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new repair task.
     * For clusters that have the Repair Manager Service configured, this API provides a way to create repair tasks that run automatically or manually. For repair tasks that run automatically, an appropriate repair executor must be running for each repair action to run automatically. These are currently only available in specially-configured Azure Cloud Services.  To create a manual repair task, provide the set of impacted node names and the expected impact. When the state of the created repair task changes to approved, you can safely perform repair actions on those nodes.  This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTask} repairTask Describes the repair task to be created or updated.
     * @param {module:api/RepairManagementApi~createRepairTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepairTaskUpdateInfo}
     */
    createRepairTask(apiVersion, repairTask, callback) {
      let postBody = repairTask;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createRepairTask");
      }
      // verify the required parameter 'repairTask' is set
      if (repairTask === undefined || repairTask === null) {
        throw new Error("Missing the required parameter 'repairTask' when calling createRepairTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepairTaskUpdateInfo;
      return this.apiClient.callApi(
        '/$/CreateRepairTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepairTask operation.
     * @callback module:api/RepairManagementApi~deleteRepairTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a completed repair task.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTaskDeleteDescription} repairTaskDeleteDescription Describes the repair task to be deleted.
     * @param {module:api/RepairManagementApi~deleteRepairTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepairTask(apiVersion, repairTaskDeleteDescription, callback) {
      let postBody = repairTaskDeleteDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deleteRepairTask");
      }
      // verify the required parameter 'repairTaskDeleteDescription' is set
      if (repairTaskDeleteDescription === undefined || repairTaskDeleteDescription === null) {
        throw new Error("Missing the required parameter 'repairTaskDeleteDescription' when calling deleteRepairTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/DeleteRepairTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceApproveRepairTask operation.
     * @callback module:api/RepairManagementApi~forceApproveRepairTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepairTaskUpdateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forces the approval of the given repair task.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTaskApproveDescription} repairTaskApproveDescription Describes the repair task to be approved.
     * @param {module:api/RepairManagementApi~forceApproveRepairTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepairTaskUpdateInfo}
     */
    forceApproveRepairTask(apiVersion, repairTaskApproveDescription, callback) {
      let postBody = repairTaskApproveDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling forceApproveRepairTask");
      }
      // verify the required parameter 'repairTaskApproveDescription' is set
      if (repairTaskApproveDescription === undefined || repairTaskApproveDescription === null) {
        throw new Error("Missing the required parameter 'repairTaskApproveDescription' when calling forceApproveRepairTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepairTaskUpdateInfo;
      return this.apiClient.callApi(
        '/$/ForceApproveRepairTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepairTaskList operation.
     * @callback module:api/RepairManagementApi~getRepairTaskListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepairTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of repair tasks matching the given filters.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {Object} opts Optional parameters
     * @param {String} [taskIdFilter] The repair task ID prefix to be matched.
     * @param {Number} [stateFilter] A bitwise-OR of the following values, specifying which task states should be included in the result list. - 1 - Created - 2 - Claimed - 4 - Preparing - 8 - Approved - 16 - Executing - 32 - Restoring - 64 - Completed 
     * @param {String} [executorFilter] The name of the repair executor whose claimed tasks should be included in the list.
     * @param {module:api/RepairManagementApi~getRepairTaskListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepairTask>}
     */
    getRepairTaskList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getRepairTaskList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'TaskIdFilter': opts['taskIdFilter'],
        'StateFilter': opts['stateFilter'],
        'ExecutorFilter': opts['executorFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepairTask];
      return this.apiClient.callApi(
        '/$/GetRepairTaskList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepairExecutionState operation.
     * @callback module:api/RepairManagementApi~updateRepairExecutionStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepairTaskUpdateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the execution state of a repair task.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTask} repairTask Describes the repair task to be created or updated.
     * @param {module:api/RepairManagementApi~updateRepairExecutionStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepairTaskUpdateInfo}
     */
    updateRepairExecutionState(apiVersion, repairTask, callback) {
      let postBody = repairTask;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateRepairExecutionState");
      }
      // verify the required parameter 'repairTask' is set
      if (repairTask === undefined || repairTask === null) {
        throw new Error("Missing the required parameter 'repairTask' when calling updateRepairExecutionState");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepairTaskUpdateInfo;
      return this.apiClient.callApi(
        '/$/UpdateRepairExecutionState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepairTaskHealthPolicy operation.
     * @callback module:api/RepairManagementApi~updateRepairTaskHealthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepairTaskUpdateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the health policy of the given repair task.
     * This API supports the Service Fabric platform; it is not meant to be used directly from your code. 
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and it's value must be \"6.0\".
     * @param {module:model/RepairTaskUpdateHealthPolicyDescription} repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be updated.
     * @param {module:api/RepairManagementApi~updateRepairTaskHealthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepairTaskUpdateInfo}
     */
    updateRepairTaskHealthPolicy(apiVersion, repairTaskUpdateHealthPolicyDescription, callback) {
      let postBody = repairTaskUpdateHealthPolicyDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateRepairTaskHealthPolicy");
      }
      // verify the required parameter 'repairTaskUpdateHealthPolicyDescription' is set
      if (repairTaskUpdateHealthPolicyDescription === undefined || repairTaskUpdateHealthPolicyDescription === null) {
        throw new Error("Missing the required parameter 'repairTaskUpdateHealthPolicyDescription' when calling updateRepairTaskHealthPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepairTaskUpdateInfo;
      return this.apiClient.callApi(
        '/$/UpdateRepairTaskHealthPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
