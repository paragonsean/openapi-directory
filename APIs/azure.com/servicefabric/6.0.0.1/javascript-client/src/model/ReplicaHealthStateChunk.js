/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityHealthStateChunk from './EntityHealthStateChunk';
import HealthState from './HealthState';

/**
 * The ReplicaHealthStateChunk model module.
 * @module model/ReplicaHealthStateChunk
 * @version 6.0.0.1
 */
class ReplicaHealthStateChunk {
    /**
     * Constructs a new <code>ReplicaHealthStateChunk</code>.
     * Represents the health state chunk of a stateful service replica or a stateless service instance. The replica health state contains the replica ID and its aggregated health state. 
     * @alias module:model/ReplicaHealthStateChunk
     * @implements module:model/EntityHealthStateChunk
     */
    constructor() { 
        EntityHealthStateChunk.initialize(this);
        ReplicaHealthStateChunk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicaHealthStateChunk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicaHealthStateChunk} obj Optional instance to populate.
     * @return {module:model/ReplicaHealthStateChunk} The populated <code>ReplicaHealthStateChunk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicaHealthStateChunk();
            EntityHealthStateChunk.constructFromObject(data, obj);

            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('ReplicaOrInstanceId')) {
                obj['ReplicaOrInstanceId'] = ApiClient.convertToType(data['ReplicaOrInstanceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicaHealthStateChunk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicaHealthStateChunk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ReplicaOrInstanceId'] && !(typeof data['ReplicaOrInstanceId'] === 'string' || data['ReplicaOrInstanceId'] instanceof String)) {
            throw new Error("Expected the field `ReplicaOrInstanceId` to be a primitive type in the JSON string but got " + data['ReplicaOrInstanceId']);
        }

        return true;
    }


}



/**
 * @member {module:model/HealthState} HealthState
 */
ReplicaHealthStateChunk.prototype['HealthState'] = undefined;

/**
 * Id of a stateful service replica or a stateless service instance. This id is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. If a staless instance is failed over on the same or different node it will get a different value for the id.
 * @member {String} ReplicaOrInstanceId
 */
ReplicaHealthStateChunk.prototype['ReplicaOrInstanceId'] = undefined;


// Implement EntityHealthStateChunk interface:
/**
 * @member {module:model/HealthState} HealthState
 */
EntityHealthStateChunk.prototype['HealthState'] = undefined;




export default ReplicaHealthStateChunk;

