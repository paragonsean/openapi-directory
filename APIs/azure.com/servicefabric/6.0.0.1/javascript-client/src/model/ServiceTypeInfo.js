/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceTypeDescription from './ServiceTypeDescription';

/**
 * The ServiceTypeInfo model module.
 * @module model/ServiceTypeInfo
 * @version 6.0.0.1
 */
class ServiceTypeInfo {
    /**
     * Constructs a new <code>ServiceTypeInfo</code>.
     * Information about a service type that is defined in a service manifest of a provisioned application type.
     * @alias module:model/ServiceTypeInfo
     */
    constructor() { 
        
        ServiceTypeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceTypeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceTypeInfo} obj Optional instance to populate.
     * @return {module:model/ServiceTypeInfo} The populated <code>ServiceTypeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceTypeInfo();

            if (data.hasOwnProperty('IsServiceGroup')) {
                obj['IsServiceGroup'] = ApiClient.convertToType(data['IsServiceGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('ServiceManifestName')) {
                obj['ServiceManifestName'] = ApiClient.convertToType(data['ServiceManifestName'], 'String');
            }
            if (data.hasOwnProperty('ServiceManifestVersion')) {
                obj['ServiceManifestVersion'] = ApiClient.convertToType(data['ServiceManifestVersion'], 'String');
            }
            if (data.hasOwnProperty('ServiceTypeDescription')) {
                obj['ServiceTypeDescription'] = ServiceTypeDescription.constructFromObject(data['ServiceTypeDescription']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceTypeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceTypeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ServiceManifestName'] && !(typeof data['ServiceManifestName'] === 'string' || data['ServiceManifestName'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got " + data['ServiceManifestName']);
        }
        // ensure the json data is a string
        if (data['ServiceManifestVersion'] && !(typeof data['ServiceManifestVersion'] === 'string' || data['ServiceManifestVersion'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestVersion` to be a primitive type in the JSON string but got " + data['ServiceManifestVersion']);
        }
        // validate the optional field `ServiceTypeDescription`
        if (data['ServiceTypeDescription']) { // data not null
          ServiceTypeDescription.validateJSON(data['ServiceTypeDescription']);
        }

        return true;
    }


}



/**
 * Indicates whether the service is a service group. If it is, the property value is true otherwise false.
 * @member {Boolean} IsServiceGroup
 */
ServiceTypeInfo.prototype['IsServiceGroup'] = undefined;

/**
 * The name of the service manifest.
 * @member {String} ServiceManifestName
 */
ServiceTypeInfo.prototype['ServiceManifestName'] = undefined;

/**
 * The version of the service manifest in which this service type is defined.
 * @member {String} ServiceManifestVersion
 */
ServiceTypeInfo.prototype['ServiceManifestVersion'] = undefined;

/**
 * @member {module:model/ServiceTypeDescription} ServiceTypeDescription
 */
ServiceTypeInfo.prototype['ServiceTypeDescription'] = undefined;






export default ServiceTypeInfo;

