/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionScheme from './PartitionScheme';
import PartitionSchemeDescription from './PartitionSchemeDescription';

/**
 * The SingletonPartitionSchemeDescription model module.
 * @module model/SingletonPartitionSchemeDescription
 * @version 6.0.0.1
 */
class SingletonPartitionSchemeDescription {
    /**
     * Constructs a new <code>SingletonPartitionSchemeDescription</code>.
     * Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
     * @alias module:model/SingletonPartitionSchemeDescription
     * @extends module:model/PartitionSchemeDescription
     * @implements module:model/PartitionSchemeDescription
     * @param partitionScheme {module:model/PartitionScheme} 
     */
    constructor(partitionScheme) { 
        PartitionSchemeDescription.initialize(this, partitionScheme);
        SingletonPartitionSchemeDescription.initialize(this, partitionScheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionScheme) { 
    }

    /**
     * Constructs a <code>SingletonPartitionSchemeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingletonPartitionSchemeDescription} obj Optional instance to populate.
     * @return {module:model/SingletonPartitionSchemeDescription} The populated <code>SingletonPartitionSchemeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingletonPartitionSchemeDescription();
            PartitionSchemeDescription.constructFromObject(data, obj);
            PartitionSchemeDescription.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingletonPartitionSchemeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingletonPartitionSchemeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingletonPartitionSchemeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SingletonPartitionSchemeDescription.RequiredProperties = ["PartitionScheme"];


// Implement PartitionSchemeDescription interface:
/**
 * @member {module:model/PartitionScheme} PartitionScheme
 */
PartitionSchemeDescription.prototype['PartitionScheme'] = undefined;




export default SingletonPartitionSchemeDescription;

