/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthState from './HealthState';
import ReplicaHealthState from './ReplicaHealthState';
import ServiceKind from './ServiceKind';

/**
 * The StatefulServiceReplicaHealthState model module.
 * @module model/StatefulServiceReplicaHealthState
 * @version 6.0.0.1
 */
class StatefulServiceReplicaHealthState {
    /**
     * Constructs a new <code>StatefulServiceReplicaHealthState</code>.
     * Represents the health state of the stateful service replica, which contains the replica id and the aggregated health state.
     * @alias module:model/StatefulServiceReplicaHealthState
     * @implements module:model/ReplicaHealthState
     */
    constructor() { 
        ReplicaHealthState.initialize(this);
        StatefulServiceReplicaHealthState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatefulServiceReplicaHealthState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatefulServiceReplicaHealthState} obj Optional instance to populate.
     * @return {module:model/StatefulServiceReplicaHealthState} The populated <code>StatefulServiceReplicaHealthState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatefulServiceReplicaHealthState();
            ReplicaHealthState.constructFromObject(data, obj);

            if (data.hasOwnProperty('AggregatedHealthState')) {
                obj['AggregatedHealthState'] = HealthState.constructFromObject(data['AggregatedHealthState']);
            }
            if (data.hasOwnProperty('PartitionId')) {
                obj['PartitionId'] = ApiClient.convertToType(data['PartitionId'], 'String');
            }
            if (data.hasOwnProperty('ServiceKind')) {
                obj['ServiceKind'] = ServiceKind.constructFromObject(data['ServiceKind']);
            }
            if (data.hasOwnProperty('ReplicaId')) {
                obj['ReplicaId'] = ApiClient.convertToType(data['ReplicaId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatefulServiceReplicaHealthState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatefulServiceReplicaHealthState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PartitionId'] && !(typeof data['PartitionId'] === 'string' || data['PartitionId'] instanceof String)) {
            throw new Error("Expected the field `PartitionId` to be a primitive type in the JSON string but got " + data['PartitionId']);
        }
        // ensure the json data is a string
        if (data['ReplicaId'] && !(typeof data['ReplicaId'] === 'string' || data['ReplicaId'] instanceof String)) {
            throw new Error("Expected the field `ReplicaId` to be a primitive type in the JSON string but got " + data['ReplicaId']);
        }

        return true;
    }


}



/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
StatefulServiceReplicaHealthState.prototype['AggregatedHealthState'] = undefined;

/**
 * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
 * @member {String} PartitionId
 */
StatefulServiceReplicaHealthState.prototype['PartitionId'] = undefined;

/**
 * @member {module:model/ServiceKind} ServiceKind
 */
StatefulServiceReplicaHealthState.prototype['ServiceKind'] = undefined;

/**
 * Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
 * @member {String} ReplicaId
 */
StatefulServiceReplicaHealthState.prototype['ReplicaId'] = undefined;


// Implement ReplicaHealthState interface:
/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
ReplicaHealthState.prototype['AggregatedHealthState'] = undefined;
/**
 * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
 * @member {String} PartitionId
 */
ReplicaHealthState.prototype['PartitionId'] = undefined;
/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ReplicaHealthState.prototype['ServiceKind'] = undefined;




export default StatefulServiceReplicaHealthState;

