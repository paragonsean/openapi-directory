/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AadMetadata model module.
 * @module model/AadMetadata
 * @version 6.0.0.1
 */
class AadMetadata {
    /**
     * Constructs a new <code>AadMetadata</code>.
     * Azure Active Directory metadata used for secured connection to cluster.
     * @alias module:model/AadMetadata
     */
    constructor() { 
        
        AadMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AadMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AadMetadata} obj Optional instance to populate.
     * @return {module:model/AadMetadata} The populated <code>AadMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AadMetadata();

            if (data.hasOwnProperty('authority')) {
                obj['authority'] = ApiClient.convertToType(data['authority'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = ApiClient.convertToType(data['cluster'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('redirect')) {
                obj['redirect'] = ApiClient.convertToType(data['redirect'], 'String');
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AadMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AadMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authority'] && !(typeof data['authority'] === 'string' || data['authority'] instanceof String)) {
            throw new Error("Expected the field `authority` to be a primitive type in the JSON string but got " + data['authority']);
        }
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        // ensure the json data is a string
        if (data['cluster'] && !(typeof data['cluster'] === 'string' || data['cluster'] instanceof String)) {
            throw new Error("Expected the field `cluster` to be a primitive type in the JSON string but got " + data['cluster']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['redirect'] && !(typeof data['redirect'] === 'string' || data['redirect'] instanceof String)) {
            throw new Error("Expected the field `redirect` to be a primitive type in the JSON string but got " + data['redirect']);
        }
        // ensure the json data is a string
        if (data['tenant'] && !(typeof data['tenant'] === 'string' || data['tenant'] instanceof String)) {
            throw new Error("Expected the field `tenant` to be a primitive type in the JSON string but got " + data['tenant']);
        }

        return true;
    }


}



/**
 * The AAD authority url.
 * @member {String} authority
 */
AadMetadata.prototype['authority'] = undefined;

/**
 * The AAD client application Id.
 * @member {String} client
 */
AadMetadata.prototype['client'] = undefined;

/**
 * The AAD cluster application Id.
 * @member {String} cluster
 */
AadMetadata.prototype['cluster'] = undefined;

/**
 * The AAD login url.
 * @member {String} login
 */
AadMetadata.prototype['login'] = undefined;

/**
 * The client application redirect address.
 * @member {String} redirect
 */
AadMetadata.prototype['redirect'] = undefined;

/**
 * The AAD tenant Id.
 * @member {String} tenant
 */
AadMetadata.prototype['tenant'] = undefined;






export default AadMetadata;

