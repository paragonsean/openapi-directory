/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyBatchOperation from './PropertyBatchOperation';
import PropertyBatchOperationKind from './PropertyBatchOperationKind';
import PropertyValue from './PropertyValue';

/**
 * The CheckValuePropertyBatchOperation model module.
 * @module model/CheckValuePropertyBatchOperation
 * @version 6.0.0.1
 */
class CheckValuePropertyBatchOperation {
    /**
     * Constructs a new <code>CheckValuePropertyBatchOperation</code>.
     * Represents a PropertyBatchOperation that compares the value of the property with the expected value.  The CheckValuePropertyBatchOperation is generally used as a precondition for the write operations in the batch.  Note that if one PropertyBatchOperation in a PropertyBatch fails,  the entire batch fails and cannot be committed in a transactional manner. 
     * @alias module:model/CheckValuePropertyBatchOperation
     * @extends module:model/PropertyBatchOperation
     * @implements module:model/PropertyBatchOperation
     * @param kind {module:model/PropertyBatchOperationKind} 
     * @param propertyName {String} The name of the Service Fabric property.
     */
    constructor(kind, propertyName) { 
        PropertyBatchOperation.initialize(this, kind, propertyName);
        CheckValuePropertyBatchOperation.initialize(this, kind, propertyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, propertyName) { 
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>CheckValuePropertyBatchOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckValuePropertyBatchOperation} obj Optional instance to populate.
     * @return {module:model/CheckValuePropertyBatchOperation} The populated <code>CheckValuePropertyBatchOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckValuePropertyBatchOperation();
            PropertyBatchOperation.constructFromObject(data, obj);
            PropertyBatchOperation.constructFromObject(data, obj);

            if (data.hasOwnProperty('Value')) {
                obj['Value'] = PropertyValue.constructFromObject(data['Value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckValuePropertyBatchOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckValuePropertyBatchOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckValuePropertyBatchOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          PropertyValue.validateJSON(data['Value']);
        }

        return true;
    }


}

CheckValuePropertyBatchOperation.RequiredProperties = ["Value", "Kind", "PropertyName"];

/**
 * @member {module:model/PropertyValue} Value
 */
CheckValuePropertyBatchOperation.prototype['Value'] = undefined;


// Implement PropertyBatchOperation interface:
/**
 * @member {module:model/PropertyBatchOperationKind} Kind
 */
PropertyBatchOperation.prototype['Kind'] = undefined;
/**
 * The name of the Service Fabric property.
 * @member {String} PropertyName
 */
PropertyBatchOperation.prototype['PropertyName'] = undefined;




export default CheckValuePropertyBatchOperation;

