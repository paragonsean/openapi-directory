/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicyMapItem from './ApplicationHealthPolicyMapItem';
import ClusterHealthPolicy from './ClusterHealthPolicy';
import ClusterUpgradeHealthPolicyObject from './ClusterUpgradeHealthPolicyObject';
import MonitoringPolicyDescription from './MonitoringPolicyDescription';
import UpgradeKind from './UpgradeKind';
import UpgradeMode from './UpgradeMode';

/**
 * The ClusterUpgradeDescriptionObject model module.
 * @module model/ClusterUpgradeDescriptionObject
 * @version 6.0.0.1
 */
class ClusterUpgradeDescriptionObject {
    /**
     * Constructs a new <code>ClusterUpgradeDescriptionObject</code>.
     * Represents a ServiceFabric cluster upgrade
     * @alias module:model/ClusterUpgradeDescriptionObject
     */
    constructor() { 
        
        ClusterUpgradeDescriptionObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ForceRestart'] = false;
    }

    /**
     * Constructs a <code>ClusterUpgradeDescriptionObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterUpgradeDescriptionObject} obj Optional instance to populate.
     * @return {module:model/ClusterUpgradeDescriptionObject} The populated <code>ClusterUpgradeDescriptionObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterUpgradeDescriptionObject();

            if (data.hasOwnProperty('ApplicationHealthPolicyMap')) {
                obj['ApplicationHealthPolicyMap'] = ApiClient.convertToType(data['ApplicationHealthPolicyMap'], [ApplicationHealthPolicyMapItem]);
            }
            if (data.hasOwnProperty('ClusterHealthPolicy')) {
                obj['ClusterHealthPolicy'] = ClusterHealthPolicy.constructFromObject(data['ClusterHealthPolicy']);
            }
            if (data.hasOwnProperty('ClusterUpgradeHealthPolicy')) {
                obj['ClusterUpgradeHealthPolicy'] = ClusterUpgradeHealthPolicyObject.constructFromObject(data['ClusterUpgradeHealthPolicy']);
            }
            if (data.hasOwnProperty('CodeVersion')) {
                obj['CodeVersion'] = ApiClient.convertToType(data['CodeVersion'], 'String');
            }
            if (data.hasOwnProperty('ConfigVersion')) {
                obj['ConfigVersion'] = ApiClient.convertToType(data['ConfigVersion'], 'String');
            }
            if (data.hasOwnProperty('EnableDeltaHealthEvaluation')) {
                obj['EnableDeltaHealthEvaluation'] = ApiClient.convertToType(data['EnableDeltaHealthEvaluation'], 'Boolean');
            }
            if (data.hasOwnProperty('ForceRestart')) {
                obj['ForceRestart'] = ApiClient.convertToType(data['ForceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('MonitoringPolicy')) {
                obj['MonitoringPolicy'] = MonitoringPolicyDescription.constructFromObject(data['MonitoringPolicy']);
            }
            if (data.hasOwnProperty('RollingUpgradeMode')) {
                obj['RollingUpgradeMode'] = UpgradeMode.constructFromObject(data['RollingUpgradeMode']);
            }
            if (data.hasOwnProperty('UpgradeKind')) {
                obj['UpgradeKind'] = UpgradeKind.constructFromObject(data['UpgradeKind']);
            }
            if (data.hasOwnProperty('UpgradeReplicaSetCheckTimeoutInSeconds')) {
                obj['UpgradeReplicaSetCheckTimeoutInSeconds'] = ApiClient.convertToType(data['UpgradeReplicaSetCheckTimeoutInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterUpgradeDescriptionObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterUpgradeDescriptionObject</code>.
     */
    static validateJSON(data) {
        if (data['ApplicationHealthPolicyMap']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ApplicationHealthPolicyMap'])) {
                throw new Error("Expected the field `ApplicationHealthPolicyMap` to be an array in the JSON data but got " + data['ApplicationHealthPolicyMap']);
            }
            // validate the optional field `ApplicationHealthPolicyMap` (array)
            for (const item of data['ApplicationHealthPolicyMap']) {
                ApplicationHealthPolicyMapItem.validateJSON(item);
            };
        }
        // validate the optional field `ClusterHealthPolicy`
        if (data['ClusterHealthPolicy']) { // data not null
          ClusterHealthPolicy.validateJSON(data['ClusterHealthPolicy']);
        }
        // validate the optional field `ClusterUpgradeHealthPolicy`
        if (data['ClusterUpgradeHealthPolicy']) { // data not null
          ClusterUpgradeHealthPolicyObject.validateJSON(data['ClusterUpgradeHealthPolicy']);
        }
        // ensure the json data is a string
        if (data['CodeVersion'] && !(typeof data['CodeVersion'] === 'string' || data['CodeVersion'] instanceof String)) {
            throw new Error("Expected the field `CodeVersion` to be a primitive type in the JSON string but got " + data['CodeVersion']);
        }
        // ensure the json data is a string
        if (data['ConfigVersion'] && !(typeof data['ConfigVersion'] === 'string' || data['ConfigVersion'] instanceof String)) {
            throw new Error("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got " + data['ConfigVersion']);
        }
        // validate the optional field `MonitoringPolicy`
        if (data['MonitoringPolicy']) { // data not null
          MonitoringPolicyDescription.validateJSON(data['MonitoringPolicy']);
        }

        return true;
    }


}



/**
 * Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default. 
 * @member {Array.<module:model/ApplicationHealthPolicyMapItem>} ApplicationHealthPolicyMap
 */
ClusterUpgradeDescriptionObject.prototype['ApplicationHealthPolicyMap'] = undefined;

/**
 * @member {module:model/ClusterHealthPolicy} ClusterHealthPolicy
 */
ClusterUpgradeDescriptionObject.prototype['ClusterHealthPolicy'] = undefined;

/**
 * @member {module:model/ClusterUpgradeHealthPolicyObject} ClusterUpgradeHealthPolicy
 */
ClusterUpgradeDescriptionObject.prototype['ClusterUpgradeHealthPolicy'] = undefined;

/**
 * The ServiceFabric code version of the cluster.
 * @member {String} CodeVersion
 */
ClusterUpgradeDescriptionObject.prototype['CodeVersion'] = undefined;

/**
 * The cluster configuration version (specified in the cluster manifest).
 * @member {String} ConfigVersion
 */
ClusterUpgradeDescriptionObject.prototype['ConfigVersion'] = undefined;

/**
 * When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.
 * @member {Boolean} EnableDeltaHealthEvaluation
 */
ClusterUpgradeDescriptionObject.prototype['EnableDeltaHealthEvaluation'] = undefined;

/**
 * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
 * @member {Boolean} ForceRestart
 * @default false
 */
ClusterUpgradeDescriptionObject.prototype['ForceRestart'] = false;

/**
 * @member {module:model/MonitoringPolicyDescription} MonitoringPolicy
 */
ClusterUpgradeDescriptionObject.prototype['MonitoringPolicy'] = undefined;

/**
 * @member {module:model/UpgradeMode} RollingUpgradeMode
 */
ClusterUpgradeDescriptionObject.prototype['RollingUpgradeMode'] = undefined;

/**
 * @member {module:model/UpgradeKind} UpgradeKind
 */
ClusterUpgradeDescriptionObject.prototype['UpgradeKind'] = undefined;

/**
 * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {Number} UpgradeReplicaSetCheckTimeoutInSeconds
 */
ClusterUpgradeDescriptionObject.prototype['UpgradeReplicaSetCheckTimeoutInSeconds'] = undefined;






export default ClusterUpgradeDescriptionObject;

