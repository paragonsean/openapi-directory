/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyValue from './PropertyValue';

/**
 * The PropertyDescription model module.
 * @module model/PropertyDescription
 * @version 6.0.0.1
 */
class PropertyDescription {
    /**
     * Constructs a new <code>PropertyDescription</code>.
     * Description of a Service Fabric property.
     * @alias module:model/PropertyDescription
     * @param propertyName {String} The name of the Service Fabric property.
     * @param value {module:model/PropertyValue} 
     */
    constructor(propertyName, value) { 
        
        PropertyDescription.initialize(this, propertyName, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, propertyName, value) { 
        obj['PropertyName'] = propertyName;
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>PropertyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyDescription} obj Optional instance to populate.
     * @return {module:model/PropertyDescription} The populated <code>PropertyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyDescription();

            if (data.hasOwnProperty('CustomTypeId')) {
                obj['CustomTypeId'] = ApiClient.convertToType(data['CustomTypeId'], 'String');
            }
            if (data.hasOwnProperty('PropertyName')) {
                obj['PropertyName'] = ApiClient.convertToType(data['PropertyName'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = PropertyValue.constructFromObject(data['Value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PropertyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CustomTypeId'] && !(typeof data['CustomTypeId'] === 'string' || data['CustomTypeId'] instanceof String)) {
            throw new Error("Expected the field `CustomTypeId` to be a primitive type in the JSON string but got " + data['CustomTypeId']);
        }
        // ensure the json data is a string
        if (data['PropertyName'] && !(typeof data['PropertyName'] === 'string' || data['PropertyName'] instanceof String)) {
            throw new Error("Expected the field `PropertyName` to be a primitive type in the JSON string but got " + data['PropertyName']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          PropertyValue.validateJSON(data['Value']);
        }

        return true;
    }


}

PropertyDescription.RequiredProperties = ["PropertyName", "Value"];

/**
 * The property's custom type id. Using this property, the user is able to tag the type of the value of the property.
 * @member {String} CustomTypeId
 */
PropertyDescription.prototype['CustomTypeId'] = undefined;

/**
 * The name of the Service Fabric property.
 * @member {String} PropertyName
 */
PropertyDescription.prototype['PropertyName'] = undefined;

/**
 * @member {module:model/PropertyValue} Value
 */
PropertyDescription.prototype['Value'] = undefined;






export default PropertyDescription;

