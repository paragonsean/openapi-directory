/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedServiceTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedServiceTypeInfo::OAIDeployedServiceTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedServiceTypeInfo::OAIDeployedServiceTypeInfo() {
    this->initializeModel();
}

OAIDeployedServiceTypeInfo::~OAIDeployedServiceTypeInfo() {}

void OAIDeployedServiceTypeInfo::initializeModel() {

    m_code_package_name_isSet = false;
    m_code_package_name_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_service_package_activation_id_isSet = false;
    m_service_package_activation_id_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeployedServiceTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedServiceTypeInfo::fromJsonObject(QJsonObject json) {

    m_code_package_name_isValid = ::OpenAPI::fromJsonValue(m_code_package_name, json[QString("CodePackageName")]);
    m_code_package_name_isSet = !json[QString("CodePackageName")].isNull() && m_code_package_name_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_service_package_activation_id_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_id, json[QString("ServicePackageActivationId")]);
    m_service_package_activation_id_isSet = !json[QString("ServicePackageActivationId")].isNull() && m_service_package_activation_id_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDeployedServiceTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedServiceTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_code_package_name_isSet) {
        obj.insert(QString("CodePackageName"), ::OpenAPI::toJsonValue(m_code_package_name));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_service_package_activation_id_isSet) {
        obj.insert(QString("ServicePackageActivationId"), ::OpenAPI::toJsonValue(m_service_package_activation_id));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeployedServiceTypeInfo::getCodePackageName() const {
    return m_code_package_name;
}
void OAIDeployedServiceTypeInfo::setCodePackageName(const QString &code_package_name) {
    m_code_package_name = code_package_name;
    m_code_package_name_isSet = true;
}

bool OAIDeployedServiceTypeInfo::is_code_package_name_Set() const{
    return m_code_package_name_isSet;
}

bool OAIDeployedServiceTypeInfo::is_code_package_name_Valid() const{
    return m_code_package_name_isValid;
}

QString OAIDeployedServiceTypeInfo::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIDeployedServiceTypeInfo::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIDeployedServiceTypeInfo::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIDeployedServiceTypeInfo::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

QString OAIDeployedServiceTypeInfo::getServicePackageActivationId() const {
    return m_service_package_activation_id;
}
void OAIDeployedServiceTypeInfo::setServicePackageActivationId(const QString &service_package_activation_id) {
    m_service_package_activation_id = service_package_activation_id;
    m_service_package_activation_id_isSet = true;
}

bool OAIDeployedServiceTypeInfo::is_service_package_activation_id_Set() const{
    return m_service_package_activation_id_isSet;
}

bool OAIDeployedServiceTypeInfo::is_service_package_activation_id_Valid() const{
    return m_service_package_activation_id_isValid;
}

QString OAIDeployedServiceTypeInfo::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIDeployedServiceTypeInfo::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIDeployedServiceTypeInfo::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIDeployedServiceTypeInfo::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

OAIServiceTypeRegistrationStatus OAIDeployedServiceTypeInfo::getStatus() const {
    return m_status;
}
void OAIDeployedServiceTypeInfo::setStatus(const OAIServiceTypeRegistrationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeployedServiceTypeInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeployedServiceTypeInfo::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeployedServiceTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedServiceTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
