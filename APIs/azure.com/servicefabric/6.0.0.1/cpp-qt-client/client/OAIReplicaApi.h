/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicaApi_H
#define OAI_OAIReplicaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationHealthPolicy.h"
#include "OAIDeployedServiceReplicaDetailInfo.h"
#include "OAIDeployedServiceReplicaInfo.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAIPagedReplicaInfoList.h"
#include "OAIReplicaHealth.h"
#include "OAIReplicaInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicaApi : public QObject {
    Q_OBJECT

public:
    OAIReplicaApi(const int timeOut = 0);
    ~OAIReplicaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServiceReplicaDetailInfo(const QString &api_version, const QString &node_name, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServiceReplicaDetailInfoByPartitionId(const QString &api_version, const QString &node_name, const QString &partition_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  partition_id QString [optional]
    * @param[in]  service_manifest_name QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServiceReplicaInfoList(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<QString> &partition_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_manifest_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getReplicaHealth(const QString &api_version, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getReplicaHealthUsingPolicy(const QString &api_version, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getReplicaInfo(const QString &api_version, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getReplicaInfoList(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  force_remove bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void removeReplica(const QString &api_version, const QString &node_name, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<bool> &force_remove = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  service_kind QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportReplicaHealth(const QString &api_version, const QString &partition_id, const QString &replica_id, const QString &service_kind, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void restartReplica(const QString &api_version, const QString &node_name, const QString &partition_id, const QString &replica_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeployedServiceReplicaDetailInfoCallback(OAIHttpRequestWorker *worker);
    void getDeployedServiceReplicaDetailInfoByPartitionIdCallback(OAIHttpRequestWorker *worker);
    void getDeployedServiceReplicaInfoListCallback(OAIHttpRequestWorker *worker);
    void getReplicaHealthCallback(OAIHttpRequestWorker *worker);
    void getReplicaHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getReplicaInfoCallback(OAIHttpRequestWorker *worker);
    void getReplicaInfoListCallback(OAIHttpRequestWorker *worker);
    void removeReplicaCallback(OAIHttpRequestWorker *worker);
    void reportReplicaHealthCallback(OAIHttpRequestWorker *worker);
    void restartReplicaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeployedServiceReplicaDetailInfoSignal(OAIDeployedServiceReplicaDetailInfo summary);
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignal(OAIDeployedServiceReplicaDetailInfo summary);
    void getDeployedServiceReplicaInfoListSignal(QList<OAIDeployedServiceReplicaInfo> summary);
    void getReplicaHealthSignal(OAIReplicaHealth summary);
    void getReplicaHealthUsingPolicySignal(OAIReplicaHealth summary);
    void getReplicaInfoSignal(OAIReplicaInfo summary);
    void getReplicaInfoListSignal(OAIPagedReplicaInfoList summary);
    void removeReplicaSignal();
    void reportReplicaHealthSignal();
    void restartReplicaSignal();


    void getDeployedServiceReplicaDetailInfoSignalFull(OAIHttpRequestWorker *worker, OAIDeployedServiceReplicaDetailInfo summary);
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignalFull(OAIHttpRequestWorker *worker, OAIDeployedServiceReplicaDetailInfo summary);
    void getDeployedServiceReplicaInfoListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedServiceReplicaInfo> summary);
    void getReplicaHealthSignalFull(OAIHttpRequestWorker *worker, OAIReplicaHealth summary);
    void getReplicaHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIReplicaHealth summary);
    void getReplicaInfoSignalFull(OAIHttpRequestWorker *worker, OAIReplicaInfo summary);
    void getReplicaInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedReplicaInfoList summary);
    void removeReplicaSignalFull(OAIHttpRequestWorker *worker);
    void reportReplicaHealthSignalFull(OAIHttpRequestWorker *worker);
    void restartReplicaSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaDetailInfoSignalError() instead")
    void getDeployedServiceReplicaDetailInfoSignalE(OAIDeployedServiceReplicaDetailInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaDetailInfoSignalError(OAIDeployedServiceReplicaDetailInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaDetailInfoByPartitionIdSignalError() instead")
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignalE(OAIDeployedServiceReplicaDetailInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignalError(OAIDeployedServiceReplicaDetailInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaInfoListSignalError() instead")
    void getDeployedServiceReplicaInfoListSignalE(QList<OAIDeployedServiceReplicaInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaInfoListSignalError(QList<OAIDeployedServiceReplicaInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaHealthSignalError() instead")
    void getReplicaHealthSignalE(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaHealthSignalError(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaHealthUsingPolicySignalError() instead")
    void getReplicaHealthUsingPolicySignalE(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaHealthUsingPolicySignalError(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaInfoSignalError() instead")
    void getReplicaInfoSignalE(OAIReplicaInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaInfoSignalError(OAIReplicaInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaInfoListSignalError() instead")
    void getReplicaInfoListSignalE(OAIPagedReplicaInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaInfoListSignalError(OAIPagedReplicaInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReplicaSignalError() instead")
    void removeReplicaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeReplicaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportReplicaHealthSignalError() instead")
    void reportReplicaHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportReplicaHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartReplicaSignalError() instead")
    void restartReplicaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restartReplicaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaDetailInfoSignalErrorFull() instead")
    void getDeployedServiceReplicaDetailInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaDetailInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaDetailInfoByPartitionIdSignalErrorFull() instead")
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaDetailInfoByPartitionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServiceReplicaInfoListSignalErrorFull() instead")
    void getDeployedServiceReplicaInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServiceReplicaInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaHealthSignalErrorFull() instead")
    void getReplicaHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaHealthUsingPolicySignalErrorFull() instead")
    void getReplicaHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaInfoSignalErrorFull() instead")
    void getReplicaInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReplicaInfoListSignalErrorFull() instead")
    void getReplicaInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReplicaInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeReplicaSignalErrorFull() instead")
    void removeReplicaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReplicaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportReplicaHealthSignalErrorFull() instead")
    void reportReplicaHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportReplicaHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartReplicaSignalErrorFull() instead")
    void restartReplicaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restartReplicaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
