/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRepairManagementApi_H
#define OAI_OAIRepairManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFabricError.h"
#include "OAIRepairTask.h"
#include "OAIRepairTaskApproveDescription.h"
#include "OAIRepairTaskCancelDescription.h"
#include "OAIRepairTaskDeleteDescription.h"
#include "OAIRepairTaskUpdateHealthPolicyDescription.h"
#include "OAIRepairTaskUpdateInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRepairManagementApi : public QObject {
    Q_OBJECT

public:
    OAIRepairManagementApi(const int timeOut = 0);
    ~OAIRepairManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task_cancel_description OAIRepairTaskCancelDescription [required]
    */
    virtual void cancelRepairTask(const QString &api_version, const OAIRepairTaskCancelDescription &repair_task_cancel_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task OAIRepairTask [required]
    */
    virtual void createRepairTask(const QString &api_version, const OAIRepairTask &repair_task);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task_delete_description OAIRepairTaskDeleteDescription [required]
    */
    virtual void deleteRepairTask(const QString &api_version, const OAIRepairTaskDeleteDescription &repair_task_delete_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task_approve_description OAIRepairTaskApproveDescription [required]
    */
    virtual void forceApproveRepairTask(const QString &api_version, const OAIRepairTaskApproveDescription &repair_task_approve_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  task_id_filter QString [optional]
    * @param[in]  state_filter qint32 [optional]
    * @param[in]  executor_filter QString [optional]
    */
    virtual void getRepairTaskList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &task_id_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &executor_filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task OAIRepairTask [required]
    */
    virtual void updateRepairExecutionState(const QString &api_version, const OAIRepairTask &repair_task);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  repair_task_update_health_policy_description OAIRepairTaskUpdateHealthPolicyDescription [required]
    */
    virtual void updateRepairTaskHealthPolicy(const QString &api_version, const OAIRepairTaskUpdateHealthPolicyDescription &repair_task_update_health_policy_description);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelRepairTaskCallback(OAIHttpRequestWorker *worker);
    void createRepairTaskCallback(OAIHttpRequestWorker *worker);
    void deleteRepairTaskCallback(OAIHttpRequestWorker *worker);
    void forceApproveRepairTaskCallback(OAIHttpRequestWorker *worker);
    void getRepairTaskListCallback(OAIHttpRequestWorker *worker);
    void updateRepairExecutionStateCallback(OAIHttpRequestWorker *worker);
    void updateRepairTaskHealthPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelRepairTaskSignal(OAIRepairTaskUpdateInfo summary);
    void createRepairTaskSignal(OAIRepairTaskUpdateInfo summary);
    void deleteRepairTaskSignal();
    void forceApproveRepairTaskSignal(OAIRepairTaskUpdateInfo summary);
    void getRepairTaskListSignal(QList<OAIRepairTask> summary);
    void updateRepairExecutionStateSignal(OAIRepairTaskUpdateInfo summary);
    void updateRepairTaskHealthPolicySignal(OAIRepairTaskUpdateInfo summary);


    void cancelRepairTaskSignalFull(OAIHttpRequestWorker *worker, OAIRepairTaskUpdateInfo summary);
    void createRepairTaskSignalFull(OAIHttpRequestWorker *worker, OAIRepairTaskUpdateInfo summary);
    void deleteRepairTaskSignalFull(OAIHttpRequestWorker *worker);
    void forceApproveRepairTaskSignalFull(OAIHttpRequestWorker *worker, OAIRepairTaskUpdateInfo summary);
    void getRepairTaskListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepairTask> summary);
    void updateRepairExecutionStateSignalFull(OAIHttpRequestWorker *worker, OAIRepairTaskUpdateInfo summary);
    void updateRepairTaskHealthPolicySignalFull(OAIHttpRequestWorker *worker, OAIRepairTaskUpdateInfo summary);

    Q_DECL_DEPRECATED_X("Use cancelRepairTaskSignalError() instead")
    void cancelRepairTaskSignalE(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRepairTaskSignalError(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepairTaskSignalError() instead")
    void createRepairTaskSignalE(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepairTaskSignalError(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepairTaskSignalError() instead")
    void deleteRepairTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepairTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forceApproveRepairTaskSignalError() instead")
    void forceApproveRepairTaskSignalE(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forceApproveRepairTaskSignalError(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepairTaskListSignalError() instead")
    void getRepairTaskListSignalE(QList<OAIRepairTask> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepairTaskListSignalError(QList<OAIRepairTask> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepairExecutionStateSignalError() instead")
    void updateRepairExecutionStateSignalE(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepairExecutionStateSignalError(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepairTaskHealthPolicySignalError() instead")
    void updateRepairTaskHealthPolicySignalE(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepairTaskHealthPolicySignalError(OAIRepairTaskUpdateInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelRepairTaskSignalErrorFull() instead")
    void cancelRepairTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRepairTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepairTaskSignalErrorFull() instead")
    void createRepairTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepairTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepairTaskSignalErrorFull() instead")
    void deleteRepairTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepairTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forceApproveRepairTaskSignalErrorFull() instead")
    void forceApproveRepairTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forceApproveRepairTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepairTaskListSignalErrorFull() instead")
    void getRepairTaskListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepairTaskListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepairExecutionStateSignalErrorFull() instead")
    void updateRepairExecutionStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepairExecutionStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepairTaskHealthPolicySignalErrorFull() instead")
    void updateRepairTaskHealthPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepairTaskHealthPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
