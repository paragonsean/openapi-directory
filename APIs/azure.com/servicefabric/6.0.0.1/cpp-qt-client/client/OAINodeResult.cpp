/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeResult::OAINodeResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeResult::OAINodeResult() {
    this->initializeModel();
}

OAINodeResult::~OAINodeResult() {}

void OAINodeResult::initializeModel() {

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;
}

void OAINodeResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeResult::fromJsonObject(QJsonObject json) {

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("NodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("NodeInstanceId")].isNull() && m_node_instance_id_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;
}

QString OAINodeResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeResult::asJsonObject() const {
    QJsonObject obj;
    if (m_node_instance_id_isSet) {
        obj.insert(QString("NodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    return obj;
}

QString OAINodeResult::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAINodeResult::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAINodeResult::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAINodeResult::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

QString OAINodeResult::getNodeName() const {
    return m_node_name;
}
void OAINodeResult::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAINodeResult::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAINodeResult::is_node_name_Valid() const{
    return m_node_name_isValid;
}

bool OAINodeResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
