/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComposeDeploymentUpgradeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComposeDeploymentUpgradeDescription::OAIComposeDeploymentUpgradeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComposeDeploymentUpgradeDescription::OAIComposeDeploymentUpgradeDescription() {
    this->initializeModel();
}

OAIComposeDeploymentUpgradeDescription::~OAIComposeDeploymentUpgradeDescription() {}

void OAIComposeDeploymentUpgradeDescription::initializeModel() {

    m_application_health_policy_isSet = false;
    m_application_health_policy_isValid = false;

    m_compose_file_content_isSet = false;
    m_compose_file_content_isValid = false;

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_monitoring_policy_isSet = false;
    m_monitoring_policy_isValid = false;

    m_registry_credential_isSet = false;
    m_registry_credential_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_upgrade_kind_isSet = false;
    m_upgrade_kind_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;
}

void OAIComposeDeploymentUpgradeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComposeDeploymentUpgradeDescription::fromJsonObject(QJsonObject json) {

    m_application_health_policy_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy, json[QString("ApplicationHealthPolicy")]);
    m_application_health_policy_isSet = !json[QString("ApplicationHealthPolicy")].isNull() && m_application_health_policy_isValid;

    m_compose_file_content_isValid = ::OpenAPI::fromJsonValue(m_compose_file_content, json[QString("ComposeFileContent")]);
    m_compose_file_content_isSet = !json[QString("ComposeFileContent")].isNull() && m_compose_file_content_isValid;

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("DeploymentName")]);
    m_deployment_name_isSet = !json[QString("DeploymentName")].isNull() && m_deployment_name_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("ForceRestart")]);
    m_force_restart_isSet = !json[QString("ForceRestart")].isNull() && m_force_restart_isValid;

    m_monitoring_policy_isValid = ::OpenAPI::fromJsonValue(m_monitoring_policy, json[QString("MonitoringPolicy")]);
    m_monitoring_policy_isSet = !json[QString("MonitoringPolicy")].isNull() && m_monitoring_policy_isValid;

    m_registry_credential_isValid = ::OpenAPI::fromJsonValue(m_registry_credential, json[QString("RegistryCredential")]);
    m_registry_credential_isSet = !json[QString("RegistryCredential")].isNull() && m_registry_credential_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_upgrade_kind_isValid = ::OpenAPI::fromJsonValue(m_upgrade_kind, json[QString("UpgradeKind")]);
    m_upgrade_kind_isSet = !json[QString("UpgradeKind")].isNull() && m_upgrade_kind_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

QString OAIComposeDeploymentUpgradeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComposeDeploymentUpgradeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy.isSet()) {
        obj.insert(QString("ApplicationHealthPolicy"), ::OpenAPI::toJsonValue(m_application_health_policy));
    }
    if (m_compose_file_content_isSet) {
        obj.insert(QString("ComposeFileContent"), ::OpenAPI::toJsonValue(m_compose_file_content));
    }
    if (m_deployment_name_isSet) {
        obj.insert(QString("DeploymentName"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("ForceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_monitoring_policy.isSet()) {
        obj.insert(QString("MonitoringPolicy"), ::OpenAPI::toJsonValue(m_monitoring_policy));
    }
    if (m_registry_credential.isSet()) {
        obj.insert(QString("RegistryCredential"), ::OpenAPI::toJsonValue(m_registry_credential));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_upgrade_kind.isSet()) {
        obj.insert(QString("UpgradeKind"), ::OpenAPI::toJsonValue(m_upgrade_kind));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    return obj;
}

OAIApplicationHealthPolicy OAIComposeDeploymentUpgradeDescription::getApplicationHealthPolicy() const {
    return m_application_health_policy;
}
void OAIComposeDeploymentUpgradeDescription::setApplicationHealthPolicy(const OAIApplicationHealthPolicy &application_health_policy) {
    m_application_health_policy = application_health_policy;
    m_application_health_policy_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_application_health_policy_Set() const{
    return m_application_health_policy_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_application_health_policy_Valid() const{
    return m_application_health_policy_isValid;
}

QString OAIComposeDeploymentUpgradeDescription::getComposeFileContent() const {
    return m_compose_file_content;
}
void OAIComposeDeploymentUpgradeDescription::setComposeFileContent(const QString &compose_file_content) {
    m_compose_file_content = compose_file_content;
    m_compose_file_content_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_compose_file_content_Set() const{
    return m_compose_file_content_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_compose_file_content_Valid() const{
    return m_compose_file_content_isValid;
}

QString OAIComposeDeploymentUpgradeDescription::getDeploymentName() const {
    return m_deployment_name;
}
void OAIComposeDeploymentUpgradeDescription::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

bool OAIComposeDeploymentUpgradeDescription::isForceRestart() const {
    return m_force_restart;
}
void OAIComposeDeploymentUpgradeDescription::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

OAIMonitoringPolicyDescription OAIComposeDeploymentUpgradeDescription::getMonitoringPolicy() const {
    return m_monitoring_policy;
}
void OAIComposeDeploymentUpgradeDescription::setMonitoringPolicy(const OAIMonitoringPolicyDescription &monitoring_policy) {
    m_monitoring_policy = monitoring_policy;
    m_monitoring_policy_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_monitoring_policy_Set() const{
    return m_monitoring_policy_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_monitoring_policy_Valid() const{
    return m_monitoring_policy_isValid;
}

OAIRegistryCredential OAIComposeDeploymentUpgradeDescription::getRegistryCredential() const {
    return m_registry_credential;
}
void OAIComposeDeploymentUpgradeDescription::setRegistryCredential(const OAIRegistryCredential &registry_credential) {
    m_registry_credential = registry_credential;
    m_registry_credential_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_registry_credential_Set() const{
    return m_registry_credential_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_registry_credential_Valid() const{
    return m_registry_credential_isValid;
}

OAIUpgradeMode OAIComposeDeploymentUpgradeDescription::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIComposeDeploymentUpgradeDescription::setRollingUpgradeMode(const OAIUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

OAIUpgradeKind OAIComposeDeploymentUpgradeDescription::getUpgradeKind() const {
    return m_upgrade_kind;
}
void OAIComposeDeploymentUpgradeDescription::setUpgradeKind(const OAIUpgradeKind &upgrade_kind) {
    m_upgrade_kind = upgrade_kind;
    m_upgrade_kind_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_upgrade_kind_Set() const{
    return m_upgrade_kind_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_upgrade_kind_Valid() const{
    return m_upgrade_kind_isValid;
}

qint64 OAIComposeDeploymentUpgradeDescription::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIComposeDeploymentUpgradeDescription::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint64 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIComposeDeploymentUpgradeDescription::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIComposeDeploymentUpgradeDescription::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

bool OAIComposeDeploymentUpgradeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compose_file_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComposeDeploymentUpgradeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compose_file_content_isValid && m_deployment_name_isValid && m_upgrade_kind_isValid && true;
}

} // namespace OpenAPI
