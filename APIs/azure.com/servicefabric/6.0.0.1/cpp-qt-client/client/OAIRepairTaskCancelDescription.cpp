/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairTaskCancelDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairTaskCancelDescription::OAIRepairTaskCancelDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairTaskCancelDescription::OAIRepairTaskCancelDescription() {
    this->initializeModel();
}

OAIRepairTaskCancelDescription::~OAIRepairTaskCancelDescription() {}

void OAIRepairTaskCancelDescription::initializeModel() {

    m_request_abort_isSet = false;
    m_request_abort_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRepairTaskCancelDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairTaskCancelDescription::fromJsonObject(QJsonObject json) {

    m_request_abort_isValid = ::OpenAPI::fromJsonValue(m_request_abort, json[QString("RequestAbort")]);
    m_request_abort_isSet = !json[QString("RequestAbort")].isNull() && m_request_abort_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("TaskId")]);
    m_task_id_isSet = !json[QString("TaskId")].isNull() && m_task_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIRepairTaskCancelDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairTaskCancelDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_request_abort_isSet) {
        obj.insert(QString("RequestAbort"), ::OpenAPI::toJsonValue(m_request_abort));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("TaskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIRepairTaskCancelDescription::isRequestAbort() const {
    return m_request_abort;
}
void OAIRepairTaskCancelDescription::setRequestAbort(const bool &request_abort) {
    m_request_abort = request_abort;
    m_request_abort_isSet = true;
}

bool OAIRepairTaskCancelDescription::is_request_abort_Set() const{
    return m_request_abort_isSet;
}

bool OAIRepairTaskCancelDescription::is_request_abort_Valid() const{
    return m_request_abort_isValid;
}

QString OAIRepairTaskCancelDescription::getTaskId() const {
    return m_task_id;
}
void OAIRepairTaskCancelDescription::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIRepairTaskCancelDescription::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIRepairTaskCancelDescription::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAIRepairTaskCancelDescription::getVersion() const {
    return m_version;
}
void OAIRepairTaskCancelDescription::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRepairTaskCancelDescription::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRepairTaskCancelDescription::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRepairTaskCancelDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_abort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairTaskCancelDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_id_isValid && true;
}

} // namespace OpenAPI
