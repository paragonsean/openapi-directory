/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailedPropertyBatchInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailedPropertyBatchInfo::OAIFailedPropertyBatchInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailedPropertyBatchInfo::OAIFailedPropertyBatchInfo() {
    this->initializeModel();
}

OAIFailedPropertyBatchInfo::~OAIFailedPropertyBatchInfo() {}

void OAIFailedPropertyBatchInfo::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_operation_index_isSet = false;
    m_operation_index_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIFailedPropertyBatchInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailedPropertyBatchInfo::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_operation_index_isValid = ::OpenAPI::fromJsonValue(m_operation_index, json[QString("OperationIndex")]);
    m_operation_index_isSet = !json[QString("OperationIndex")].isNull() && m_operation_index_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;
}

QString OAIFailedPropertyBatchInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailedPropertyBatchInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_operation_index_isSet) {
        obj.insert(QString("OperationIndex"), ::OpenAPI::toJsonValue(m_operation_index));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIFailedPropertyBatchInfo::getErrorMessage() const {
    return m_error_message;
}
void OAIFailedPropertyBatchInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIFailedPropertyBatchInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIFailedPropertyBatchInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

qint32 OAIFailedPropertyBatchInfo::getOperationIndex() const {
    return m_operation_index;
}
void OAIFailedPropertyBatchInfo::setOperationIndex(const qint32 &operation_index) {
    m_operation_index = operation_index;
    m_operation_index_isSet = true;
}

bool OAIFailedPropertyBatchInfo::is_operation_index_Set() const{
    return m_operation_index_isSet;
}

bool OAIFailedPropertyBatchInfo::is_operation_index_Valid() const{
    return m_operation_index_isValid;
}

OAIPropertyBatchInfoKind OAIFailedPropertyBatchInfo::getKind() const {
    return m_kind;
}
void OAIFailedPropertyBatchInfo::setKind(const OAIPropertyBatchInfoKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFailedPropertyBatchInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFailedPropertyBatchInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIFailedPropertyBatchInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailedPropertyBatchInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
