/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyValueKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyValueKind::OAIPropertyValueKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyValueKind::OAIPropertyValueKind() {
    this->initializeModel();
}

OAIPropertyValueKind::~OAIPropertyValueKind() {}

void OAIPropertyValueKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPropertyValueKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPropertyValueKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Binary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::BINARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Int64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::INT64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Double", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("String", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Guid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPropertyValueKind::GUID;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPropertyValueKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPropertyValueKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPropertyValueKind::INVALID:
            val = "Invalid";
            break;
        case eOAIPropertyValueKind::BINARY:
            val = "Binary";
            break;
        case eOAIPropertyValueKind::INT64:
            val = "Int64";
            break;
        case eOAIPropertyValueKind::DOUBLE:
            val = "Double";
            break;
        case eOAIPropertyValueKind::STRING:
            val = "String";
            break;
        case eOAIPropertyValueKind::GUID:
            val = "Guid";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPropertyValueKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPropertyValueKind::eOAIPropertyValueKind OAIPropertyValueKind::getValue() const {
    return m_value;
}

void OAIPropertyValueKind::setValue(const OAIPropertyValueKind::eOAIPropertyValueKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPropertyValueKind::isSet() const {
    
    return m_value_isSet;
}

bool OAIPropertyValueKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
