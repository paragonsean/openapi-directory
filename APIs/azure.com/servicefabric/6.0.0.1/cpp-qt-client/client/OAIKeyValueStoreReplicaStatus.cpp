/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyValueStoreReplicaStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyValueStoreReplicaStatus::OAIKeyValueStoreReplicaStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyValueStoreReplicaStatus::OAIKeyValueStoreReplicaStatus() {
    this->initializeModel();
}

OAIKeyValueStoreReplicaStatus::~OAIKeyValueStoreReplicaStatus() {}

void OAIKeyValueStoreReplicaStatus::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_copy_notification_current_key_filter_isSet = false;
    m_copy_notification_current_key_filter_isValid = false;

    m_copy_notification_current_progress_isSet = false;
    m_copy_notification_current_progress_isValid = false;

    m_database_logical_size_estimate_isSet = false;
    m_database_logical_size_estimate_isValid = false;

    m_database_row_count_estimate_isSet = false;
    m_database_row_count_estimate_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;
}

void OAIKeyValueStoreReplicaStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyValueStoreReplicaStatus::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_copy_notification_current_key_filter_isValid = ::OpenAPI::fromJsonValue(m_copy_notification_current_key_filter, json[QString("CopyNotificationCurrentKeyFilter")]);
    m_copy_notification_current_key_filter_isSet = !json[QString("CopyNotificationCurrentKeyFilter")].isNull() && m_copy_notification_current_key_filter_isValid;

    m_copy_notification_current_progress_isValid = ::OpenAPI::fromJsonValue(m_copy_notification_current_progress, json[QString("CopyNotificationCurrentProgress")]);
    m_copy_notification_current_progress_isSet = !json[QString("CopyNotificationCurrentProgress")].isNull() && m_copy_notification_current_progress_isValid;

    m_database_logical_size_estimate_isValid = ::OpenAPI::fromJsonValue(m_database_logical_size_estimate, json[QString("DatabaseLogicalSizeEstimate")]);
    m_database_logical_size_estimate_isSet = !json[QString("DatabaseLogicalSizeEstimate")].isNull() && m_database_logical_size_estimate_isValid;

    m_database_row_count_estimate_isValid = ::OpenAPI::fromJsonValue(m_database_row_count_estimate, json[QString("DatabaseRowCountEstimate")]);
    m_database_row_count_estimate_isSet = !json[QString("DatabaseRowCountEstimate")].isNull() && m_database_row_count_estimate_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("StatusDetails")]);
    m_status_details_isSet = !json[QString("StatusDetails")].isNull() && m_status_details_isValid;
}

QString OAIKeyValueStoreReplicaStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyValueStoreReplicaStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_copy_notification_current_key_filter_isSet) {
        obj.insert(QString("CopyNotificationCurrentKeyFilter"), ::OpenAPI::toJsonValue(m_copy_notification_current_key_filter));
    }
    if (m_copy_notification_current_progress_isSet) {
        obj.insert(QString("CopyNotificationCurrentProgress"), ::OpenAPI::toJsonValue(m_copy_notification_current_progress));
    }
    if (m_database_logical_size_estimate_isSet) {
        obj.insert(QString("DatabaseLogicalSizeEstimate"), ::OpenAPI::toJsonValue(m_database_logical_size_estimate));
    }
    if (m_database_row_count_estimate_isSet) {
        obj.insert(QString("DatabaseRowCountEstimate"), ::OpenAPI::toJsonValue(m_database_row_count_estimate));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("StatusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    return obj;
}

OAIReplicaKind OAIKeyValueStoreReplicaStatus::getKind() const {
    return m_kind;
}
void OAIKeyValueStoreReplicaStatus::setKind(const OAIReplicaKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIKeyValueStoreReplicaStatus::getCopyNotificationCurrentKeyFilter() const {
    return m_copy_notification_current_key_filter;
}
void OAIKeyValueStoreReplicaStatus::setCopyNotificationCurrentKeyFilter(const QString &copy_notification_current_key_filter) {
    m_copy_notification_current_key_filter = copy_notification_current_key_filter;
    m_copy_notification_current_key_filter_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_copy_notification_current_key_filter_Set() const{
    return m_copy_notification_current_key_filter_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_copy_notification_current_key_filter_Valid() const{
    return m_copy_notification_current_key_filter_isValid;
}

QString OAIKeyValueStoreReplicaStatus::getCopyNotificationCurrentProgress() const {
    return m_copy_notification_current_progress;
}
void OAIKeyValueStoreReplicaStatus::setCopyNotificationCurrentProgress(const QString &copy_notification_current_progress) {
    m_copy_notification_current_progress = copy_notification_current_progress;
    m_copy_notification_current_progress_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_copy_notification_current_progress_Set() const{
    return m_copy_notification_current_progress_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_copy_notification_current_progress_Valid() const{
    return m_copy_notification_current_progress_isValid;
}

QString OAIKeyValueStoreReplicaStatus::getDatabaseLogicalSizeEstimate() const {
    return m_database_logical_size_estimate;
}
void OAIKeyValueStoreReplicaStatus::setDatabaseLogicalSizeEstimate(const QString &database_logical_size_estimate) {
    m_database_logical_size_estimate = database_logical_size_estimate;
    m_database_logical_size_estimate_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_database_logical_size_estimate_Set() const{
    return m_database_logical_size_estimate_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_database_logical_size_estimate_Valid() const{
    return m_database_logical_size_estimate_isValid;
}

QString OAIKeyValueStoreReplicaStatus::getDatabaseRowCountEstimate() const {
    return m_database_row_count_estimate;
}
void OAIKeyValueStoreReplicaStatus::setDatabaseRowCountEstimate(const QString &database_row_count_estimate) {
    m_database_row_count_estimate = database_row_count_estimate;
    m_database_row_count_estimate_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_database_row_count_estimate_Set() const{
    return m_database_row_count_estimate_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_database_row_count_estimate_Valid() const{
    return m_database_row_count_estimate_isValid;
}

QString OAIKeyValueStoreReplicaStatus::getStatusDetails() const {
    return m_status_details;
}
void OAIKeyValueStoreReplicaStatus::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIKeyValueStoreReplicaStatus::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIKeyValueStoreReplicaStatus::is_status_details_Valid() const{
    return m_status_details_isValid;
}

bool OAIKeyValueStoreReplicaStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_notification_current_key_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_notification_current_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_logical_size_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_row_count_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyValueStoreReplicaStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
