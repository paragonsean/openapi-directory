/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComposeDeploymentUpgradeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComposeDeploymentUpgradeState::OAIComposeDeploymentUpgradeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComposeDeploymentUpgradeState::OAIComposeDeploymentUpgradeState() {
    this->initializeModel();
}

OAIComposeDeploymentUpgradeState::~OAIComposeDeploymentUpgradeState() {}

void OAIComposeDeploymentUpgradeState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIComposeDeploymentUpgradeState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIComposeDeploymentUpgradeState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProvisioningTarget", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::PROVISIONINGTARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardPending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDPENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnprovisioningCurrent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::UNPROVISIONINGCURRENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingForwardCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingBackInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::ROLLINGBACKINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnprovisioningTarget", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::UNPROVISIONINGTARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RollingBackCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::ROLLINGBACKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIComposeDeploymentUpgradeState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIComposeDeploymentUpgradeState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIComposeDeploymentUpgradeState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIComposeDeploymentUpgradeState::INVALID:
            val = "Invalid";
            break;
        case eOAIComposeDeploymentUpgradeState::PROVISIONINGTARGET:
            val = "ProvisioningTarget";
            break;
        case eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDINPROGRESS:
            val = "RollingForwardInProgress";
            break;
        case eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDPENDING:
            val = "RollingForwardPending";
            break;
        case eOAIComposeDeploymentUpgradeState::UNPROVISIONINGCURRENT:
            val = "UnprovisioningCurrent";
            break;
        case eOAIComposeDeploymentUpgradeState::ROLLINGFORWARDCOMPLETED:
            val = "RollingForwardCompleted";
            break;
        case eOAIComposeDeploymentUpgradeState::ROLLINGBACKINPROGRESS:
            val = "RollingBackInProgress";
            break;
        case eOAIComposeDeploymentUpgradeState::UNPROVISIONINGTARGET:
            val = "UnprovisioningTarget";
            break;
        case eOAIComposeDeploymentUpgradeState::ROLLINGBACKCOMPLETED:
            val = "RollingBackCompleted";
            break;
        case eOAIComposeDeploymentUpgradeState::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIComposeDeploymentUpgradeState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIComposeDeploymentUpgradeState::eOAIComposeDeploymentUpgradeState OAIComposeDeploymentUpgradeState::getValue() const {
    return m_value;
}

void OAIComposeDeploymentUpgradeState::setValue(const OAIComposeDeploymentUpgradeState::eOAIComposeDeploymentUpgradeState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIComposeDeploymentUpgradeState::isSet() const {
    
    return m_value_isSet;
}

bool OAIComposeDeploymentUpgradeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
