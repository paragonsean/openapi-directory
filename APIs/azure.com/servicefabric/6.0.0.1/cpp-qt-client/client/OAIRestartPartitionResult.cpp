/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestartPartitionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestartPartitionResult::OAIRestartPartitionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestartPartitionResult::OAIRestartPartitionResult() {
    this->initializeModel();
}

OAIRestartPartitionResult::~OAIRestartPartitionResult() {}

void OAIRestartPartitionResult::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_selected_partition_isSet = false;
    m_selected_partition_isValid = false;
}

void OAIRestartPartitionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestartPartitionResult::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_selected_partition_isValid = ::OpenAPI::fromJsonValue(m_selected_partition, json[QString("SelectedPartition")]);
    m_selected_partition_isSet = !json[QString("SelectedPartition")].isNull() && m_selected_partition_isValid;
}

QString OAIRestartPartitionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestartPartitionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_selected_partition.isSet()) {
        obj.insert(QString("SelectedPartition"), ::OpenAPI::toJsonValue(m_selected_partition));
    }
    return obj;
}

qint32 OAIRestartPartitionResult::getErrorCode() const {
    return m_error_code;
}
void OAIRestartPartitionResult::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRestartPartitionResult::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRestartPartitionResult::is_error_code_Valid() const{
    return m_error_code_isValid;
}

OAISelectedPartition OAIRestartPartitionResult::getSelectedPartition() const {
    return m_selected_partition;
}
void OAIRestartPartitionResult::setSelectedPartition(const OAISelectedPartition &selected_partition) {
    m_selected_partition = selected_partition;
    m_selected_partition_isSet = true;
}

bool OAIRestartPartitionResult::is_selected_partition_Set() const{
    return m_selected_partition_isSet;
}

bool OAIRestartPartitionResult::is_selected_partition_Valid() const{
    return m_selected_partition_isValid;
}

bool OAIRestartPartitionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_partition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestartPartitionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
