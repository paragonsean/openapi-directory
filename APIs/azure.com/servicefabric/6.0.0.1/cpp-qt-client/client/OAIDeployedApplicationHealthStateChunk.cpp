/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedApplicationHealthStateChunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedApplicationHealthStateChunk::OAIDeployedApplicationHealthStateChunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedApplicationHealthStateChunk::OAIDeployedApplicationHealthStateChunk() {
    this->initializeModel();
}

OAIDeployedApplicationHealthStateChunk::~OAIDeployedApplicationHealthStateChunk() {}

void OAIDeployedApplicationHealthStateChunk::initializeModel() {

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_deployed_service_package_health_state_chunks_isSet = false;
    m_deployed_service_package_health_state_chunks_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;
}

void OAIDeployedApplicationHealthStateChunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedApplicationHealthStateChunk::fromJsonObject(QJsonObject json) {

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_deployed_service_package_health_state_chunks_isValid = ::OpenAPI::fromJsonValue(m_deployed_service_package_health_state_chunks, json[QString("DeployedServicePackageHealthStateChunks")]);
    m_deployed_service_package_health_state_chunks_isSet = !json[QString("DeployedServicePackageHealthStateChunks")].isNull() && m_deployed_service_package_health_state_chunks_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;
}

QString OAIDeployedApplicationHealthStateChunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedApplicationHealthStateChunk::asJsonObject() const {
    QJsonObject obj;
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_deployed_service_package_health_state_chunks.isSet()) {
        obj.insert(QString("DeployedServicePackageHealthStateChunks"), ::OpenAPI::toJsonValue(m_deployed_service_package_health_state_chunks));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    return obj;
}

OAIHealthState OAIDeployedApplicationHealthStateChunk::getHealthState() const {
    return m_health_state;
}
void OAIDeployedApplicationHealthStateChunk::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIDeployedApplicationHealthStateChunk::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIDeployedApplicationHealthStateChunk::is_health_state_Valid() const{
    return m_health_state_isValid;
}

OAIDeployedServicePackageHealthStateChunkList OAIDeployedApplicationHealthStateChunk::getDeployedServicePackageHealthStateChunks() const {
    return m_deployed_service_package_health_state_chunks;
}
void OAIDeployedApplicationHealthStateChunk::setDeployedServicePackageHealthStateChunks(const OAIDeployedServicePackageHealthStateChunkList &deployed_service_package_health_state_chunks) {
    m_deployed_service_package_health_state_chunks = deployed_service_package_health_state_chunks;
    m_deployed_service_package_health_state_chunks_isSet = true;
}

bool OAIDeployedApplicationHealthStateChunk::is_deployed_service_package_health_state_chunks_Set() const{
    return m_deployed_service_package_health_state_chunks_isSet;
}

bool OAIDeployedApplicationHealthStateChunk::is_deployed_service_package_health_state_chunks_Valid() const{
    return m_deployed_service_package_health_state_chunks_isValid;
}

QString OAIDeployedApplicationHealthStateChunk::getNodeName() const {
    return m_node_name;
}
void OAIDeployedApplicationHealthStateChunk::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIDeployedApplicationHealthStateChunk::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIDeployedApplicationHealthStateChunk::is_node_name_Valid() const{
    return m_node_name_isValid;
}

bool OAIDeployedApplicationHealthStateChunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_service_package_health_state_chunks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedApplicationHealthStateChunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
