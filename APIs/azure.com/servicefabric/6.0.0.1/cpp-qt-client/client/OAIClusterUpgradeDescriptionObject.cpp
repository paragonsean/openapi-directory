/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeDescriptionObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeDescriptionObject::OAIClusterUpgradeDescriptionObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeDescriptionObject::OAIClusterUpgradeDescriptionObject() {
    this->initializeModel();
}

OAIClusterUpgradeDescriptionObject::~OAIClusterUpgradeDescriptionObject() {}

void OAIClusterUpgradeDescriptionObject::initializeModel() {

    m_application_health_policy_map_isSet = false;
    m_application_health_policy_map_isValid = false;

    m_cluster_health_policy_isSet = false;
    m_cluster_health_policy_isValid = false;

    m_cluster_upgrade_health_policy_isSet = false;
    m_cluster_upgrade_health_policy_isValid = false;

    m_code_version_isSet = false;
    m_code_version_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_enable_delta_health_evaluation_isSet = false;
    m_enable_delta_health_evaluation_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_monitoring_policy_isSet = false;
    m_monitoring_policy_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_upgrade_kind_isSet = false;
    m_upgrade_kind_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;
}

void OAIClusterUpgradeDescriptionObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeDescriptionObject::fromJsonObject(QJsonObject json) {

    m_application_health_policy_map_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy_map, json[QString("ApplicationHealthPolicyMap")]);
    m_application_health_policy_map_isSet = !json[QString("ApplicationHealthPolicyMap")].isNull() && m_application_health_policy_map_isValid;

    m_cluster_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_health_policy, json[QString("ClusterHealthPolicy")]);
    m_cluster_health_policy_isSet = !json[QString("ClusterHealthPolicy")].isNull() && m_cluster_health_policy_isValid;

    m_cluster_upgrade_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_upgrade_health_policy, json[QString("ClusterUpgradeHealthPolicy")]);
    m_cluster_upgrade_health_policy_isSet = !json[QString("ClusterUpgradeHealthPolicy")].isNull() && m_cluster_upgrade_health_policy_isValid;

    m_code_version_isValid = ::OpenAPI::fromJsonValue(m_code_version, json[QString("CodeVersion")]);
    m_code_version_isSet = !json[QString("CodeVersion")].isNull() && m_code_version_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("ConfigVersion")]);
    m_config_version_isSet = !json[QString("ConfigVersion")].isNull() && m_config_version_isValid;

    m_enable_delta_health_evaluation_isValid = ::OpenAPI::fromJsonValue(m_enable_delta_health_evaluation, json[QString("EnableDeltaHealthEvaluation")]);
    m_enable_delta_health_evaluation_isSet = !json[QString("EnableDeltaHealthEvaluation")].isNull() && m_enable_delta_health_evaluation_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("ForceRestart")]);
    m_force_restart_isSet = !json[QString("ForceRestart")].isNull() && m_force_restart_isValid;

    m_monitoring_policy_isValid = ::OpenAPI::fromJsonValue(m_monitoring_policy, json[QString("MonitoringPolicy")]);
    m_monitoring_policy_isSet = !json[QString("MonitoringPolicy")].isNull() && m_monitoring_policy_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_upgrade_kind_isValid = ::OpenAPI::fromJsonValue(m_upgrade_kind, json[QString("UpgradeKind")]);
    m_upgrade_kind_isSet = !json[QString("UpgradeKind")].isNull() && m_upgrade_kind_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

QString OAIClusterUpgradeDescriptionObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeDescriptionObject::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy_map.size() > 0) {
        obj.insert(QString("ApplicationHealthPolicyMap"), ::OpenAPI::toJsonValue(m_application_health_policy_map));
    }
    if (m_cluster_health_policy.isSet()) {
        obj.insert(QString("ClusterHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_health_policy));
    }
    if (m_cluster_upgrade_health_policy.isSet()) {
        obj.insert(QString("ClusterUpgradeHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_upgrade_health_policy));
    }
    if (m_code_version_isSet) {
        obj.insert(QString("CodeVersion"), ::OpenAPI::toJsonValue(m_code_version));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("ConfigVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_enable_delta_health_evaluation_isSet) {
        obj.insert(QString("EnableDeltaHealthEvaluation"), ::OpenAPI::toJsonValue(m_enable_delta_health_evaluation));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("ForceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_monitoring_policy.isSet()) {
        obj.insert(QString("MonitoringPolicy"), ::OpenAPI::toJsonValue(m_monitoring_policy));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_upgrade_kind.isSet()) {
        obj.insert(QString("UpgradeKind"), ::OpenAPI::toJsonValue(m_upgrade_kind));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    return obj;
}

QList<OAIApplicationHealthPolicyMapItem> OAIClusterUpgradeDescriptionObject::getApplicationHealthPolicyMap() const {
    return m_application_health_policy_map;
}
void OAIClusterUpgradeDescriptionObject::setApplicationHealthPolicyMap(const QList<OAIApplicationHealthPolicyMapItem> &application_health_policy_map) {
    m_application_health_policy_map = application_health_policy_map;
    m_application_health_policy_map_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_application_health_policy_map_Set() const{
    return m_application_health_policy_map_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_application_health_policy_map_Valid() const{
    return m_application_health_policy_map_isValid;
}

OAIClusterHealthPolicy OAIClusterUpgradeDescriptionObject::getClusterHealthPolicy() const {
    return m_cluster_health_policy;
}
void OAIClusterUpgradeDescriptionObject::setClusterHealthPolicy(const OAIClusterHealthPolicy &cluster_health_policy) {
    m_cluster_health_policy = cluster_health_policy;
    m_cluster_health_policy_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_cluster_health_policy_Set() const{
    return m_cluster_health_policy_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_cluster_health_policy_Valid() const{
    return m_cluster_health_policy_isValid;
}

OAIClusterUpgradeHealthPolicyObject OAIClusterUpgradeDescriptionObject::getClusterUpgradeHealthPolicy() const {
    return m_cluster_upgrade_health_policy;
}
void OAIClusterUpgradeDescriptionObject::setClusterUpgradeHealthPolicy(const OAIClusterUpgradeHealthPolicyObject &cluster_upgrade_health_policy) {
    m_cluster_upgrade_health_policy = cluster_upgrade_health_policy;
    m_cluster_upgrade_health_policy_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_cluster_upgrade_health_policy_Set() const{
    return m_cluster_upgrade_health_policy_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_cluster_upgrade_health_policy_Valid() const{
    return m_cluster_upgrade_health_policy_isValid;
}

QString OAIClusterUpgradeDescriptionObject::getCodeVersion() const {
    return m_code_version;
}
void OAIClusterUpgradeDescriptionObject::setCodeVersion(const QString &code_version) {
    m_code_version = code_version;
    m_code_version_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_code_version_Set() const{
    return m_code_version_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_code_version_Valid() const{
    return m_code_version_isValid;
}

QString OAIClusterUpgradeDescriptionObject::getConfigVersion() const {
    return m_config_version;
}
void OAIClusterUpgradeDescriptionObject::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_config_version_Valid() const{
    return m_config_version_isValid;
}

bool OAIClusterUpgradeDescriptionObject::isEnableDeltaHealthEvaluation() const {
    return m_enable_delta_health_evaluation;
}
void OAIClusterUpgradeDescriptionObject::setEnableDeltaHealthEvaluation(const bool &enable_delta_health_evaluation) {
    m_enable_delta_health_evaluation = enable_delta_health_evaluation;
    m_enable_delta_health_evaluation_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_enable_delta_health_evaluation_Set() const{
    return m_enable_delta_health_evaluation_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_enable_delta_health_evaluation_Valid() const{
    return m_enable_delta_health_evaluation_isValid;
}

bool OAIClusterUpgradeDescriptionObject::isForceRestart() const {
    return m_force_restart;
}
void OAIClusterUpgradeDescriptionObject::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

OAIMonitoringPolicyDescription OAIClusterUpgradeDescriptionObject::getMonitoringPolicy() const {
    return m_monitoring_policy;
}
void OAIClusterUpgradeDescriptionObject::setMonitoringPolicy(const OAIMonitoringPolicyDescription &monitoring_policy) {
    m_monitoring_policy = monitoring_policy;
    m_monitoring_policy_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_monitoring_policy_Set() const{
    return m_monitoring_policy_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_monitoring_policy_Valid() const{
    return m_monitoring_policy_isValid;
}

OAIUpgradeMode OAIClusterUpgradeDescriptionObject::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIClusterUpgradeDescriptionObject::setRollingUpgradeMode(const OAIUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

OAIUpgradeKind OAIClusterUpgradeDescriptionObject::getUpgradeKind() const {
    return m_upgrade_kind;
}
void OAIClusterUpgradeDescriptionObject::setUpgradeKind(const OAIUpgradeKind &upgrade_kind) {
    m_upgrade_kind = upgrade_kind;
    m_upgrade_kind_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_upgrade_kind_Set() const{
    return m_upgrade_kind_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_upgrade_kind_Valid() const{
    return m_upgrade_kind_isValid;
}

qint64 OAIClusterUpgradeDescriptionObject::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIClusterUpgradeDescriptionObject::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint64 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIClusterUpgradeDescriptionObject::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIClusterUpgradeDescriptionObject::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

bool OAIClusterUpgradeDescriptionObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_upgrade_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_delta_health_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeDescriptionObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
