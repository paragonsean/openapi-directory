/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageStoreContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageStoreContent::OAIImageStoreContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageStoreContent::OAIImageStoreContent() {
    this->initializeModel();
}

OAIImageStoreContent::~OAIImageStoreContent() {}

void OAIImageStoreContent::initializeModel() {

    m_store_files_isSet = false;
    m_store_files_isValid = false;

    m_store_folders_isSet = false;
    m_store_folders_isValid = false;
}

void OAIImageStoreContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageStoreContent::fromJsonObject(QJsonObject json) {

    m_store_files_isValid = ::OpenAPI::fromJsonValue(m_store_files, json[QString("StoreFiles")]);
    m_store_files_isSet = !json[QString("StoreFiles")].isNull() && m_store_files_isValid;

    m_store_folders_isValid = ::OpenAPI::fromJsonValue(m_store_folders, json[QString("StoreFolders")]);
    m_store_folders_isSet = !json[QString("StoreFolders")].isNull() && m_store_folders_isValid;
}

QString OAIImageStoreContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageStoreContent::asJsonObject() const {
    QJsonObject obj;
    if (m_store_files.size() > 0) {
        obj.insert(QString("StoreFiles"), ::OpenAPI::toJsonValue(m_store_files));
    }
    if (m_store_folders.size() > 0) {
        obj.insert(QString("StoreFolders"), ::OpenAPI::toJsonValue(m_store_folders));
    }
    return obj;
}

QList<OAIFileInfo> OAIImageStoreContent::getStoreFiles() const {
    return m_store_files;
}
void OAIImageStoreContent::setStoreFiles(const QList<OAIFileInfo> &store_files) {
    m_store_files = store_files;
    m_store_files_isSet = true;
}

bool OAIImageStoreContent::is_store_files_Set() const{
    return m_store_files_isSet;
}

bool OAIImageStoreContent::is_store_files_Valid() const{
    return m_store_files_isValid;
}

QList<OAIFolderInfo> OAIImageStoreContent::getStoreFolders() const {
    return m_store_folders;
}
void OAIImageStoreContent::setStoreFolders(const QList<OAIFolderInfo> &store_folders) {
    m_store_folders = store_folders;
    m_store_folders_isSet = true;
}

bool OAIImageStoreContent::is_store_folders_Set() const{
    return m_store_folders_isSet;
}

bool OAIImageStoreContent::is_store_folders_Valid() const{
    return m_store_folders_isValid;
}

bool OAIImageStoreContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_store_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageStoreContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
