/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationTypeStatus.h
 *
 * The status of the application type. Possible values are following.    - Invalid - Indicates the application type status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.   - Provisioning - Indicates that the application type is being provisioned in the cluster. The value is 1.   - Available - Indicates that the application type is fully provisioned and is available for use. An application of this type and version can be created. The value is 2.   - Unprovisioning - Indicates that the application type is in process of being unprovisioned from the cluster. The value is 3.   - Failed - Indicates that the application type provisioning failed and it is unavailable for use. The failure details can be obtained from the application type information query. The failed application type information remains in the cluster until it is unprovisioned or reprovisioned successfully. The value is 4. 
 */

#ifndef OAIApplicationTypeStatus_H
#define OAIApplicationTypeStatus_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApplicationTypeStatus : public OAIEnum {
public:
    OAIApplicationTypeStatus();
    OAIApplicationTypeStatus(QString json);
    ~OAIApplicationTypeStatus() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIApplicationTypeStatus {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        INVALID, 
        PROVISIONING, 
        AVAILABLE, 
        UNPROVISIONING, 
        FAILED
    };
    OAIApplicationTypeStatus::eOAIApplicationTypeStatus getValue() const;
    void setValue(const OAIApplicationTypeStatus::eOAIApplicationTypeStatus& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIApplicationTypeStatus m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationTypeStatus)

#endif // OAIApplicationTypeStatus_H
