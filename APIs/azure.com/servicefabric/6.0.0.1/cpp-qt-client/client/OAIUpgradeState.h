/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpgradeState.h
 *
 * The state of the upgrade domain.      - Invalid - Indicates the upgrade state is invalid. All Service Fabric enumerations have the invalid type. The value is zero.     - RollingBackInProgress - The upgrade is rolling back to the previous version but is not complete yet. The value is 1     - RollingBackCompleted - The upgrade has finished rolling back. The value is 2     - RollingForwardPending - The current upgrade domain has finished upgrading. The overall upgrade is waiting for an explicit move next request in UnmonitoredManual mode or performing health checks in Monitored mode. The value is 3     - RollingForwardInProgress - The upgrade is rolling forward to the target version but is not complete yet. The value is 4     - RollingForwardCompleted - The upgrade has finished rolling forward. The value is 5     - Failed - The upgrade has failed and is unable to execute FailureAction. The value is 6 
 */

#ifndef OAIUpgradeState_H
#define OAIUpgradeState_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpgradeState : public OAIEnum {
public:
    OAIUpgradeState();
    OAIUpgradeState(QString json);
    ~OAIUpgradeState() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIUpgradeState {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        INVALID, 
        ROLLINGBACKINPROGRESS, 
        ROLLINGBACKCOMPLETED, 
        ROLLINGFORWARDPENDING, 
        ROLLINGFORWARDINPROGRESS, 
        ROLLINGFORWARDCOMPLETED, 
        FAILED
    };
    OAIUpgradeState::eOAIUpgradeState getValue() const;
    void setValue(const OAIUpgradeState::eOAIUpgradeState& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIUpgradeState m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpgradeState)

#endif // OAIUpgradeState_H
