/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicatorQueueStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicatorQueueStatus::OAIReplicatorQueueStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicatorQueueStatus::OAIReplicatorQueueStatus() {
    this->initializeModel();
}

OAIReplicatorQueueStatus::~OAIReplicatorQueueStatus() {}

void OAIReplicatorQueueStatus::initializeModel() {

    m_committed_sequence_number_isSet = false;
    m_committed_sequence_number_isValid = false;

    m_completed_sequence_number_isSet = false;
    m_completed_sequence_number_isValid = false;

    m_first_sequence_number_isSet = false;
    m_first_sequence_number_isValid = false;

    m_last_sequence_number_isSet = false;
    m_last_sequence_number_isValid = false;

    m_queue_memory_size_isSet = false;
    m_queue_memory_size_isValid = false;

    m_queue_utilization_percentage_isSet = false;
    m_queue_utilization_percentage_isValid = false;
}

void OAIReplicatorQueueStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicatorQueueStatus::fromJsonObject(QJsonObject json) {

    m_committed_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_committed_sequence_number, json[QString("CommittedSequenceNumber")]);
    m_committed_sequence_number_isSet = !json[QString("CommittedSequenceNumber")].isNull() && m_committed_sequence_number_isValid;

    m_completed_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_completed_sequence_number, json[QString("CompletedSequenceNumber")]);
    m_completed_sequence_number_isSet = !json[QString("CompletedSequenceNumber")].isNull() && m_completed_sequence_number_isValid;

    m_first_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_first_sequence_number, json[QString("FirstSequenceNumber")]);
    m_first_sequence_number_isSet = !json[QString("FirstSequenceNumber")].isNull() && m_first_sequence_number_isValid;

    m_last_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_last_sequence_number, json[QString("LastSequenceNumber")]);
    m_last_sequence_number_isSet = !json[QString("LastSequenceNumber")].isNull() && m_last_sequence_number_isValid;

    m_queue_memory_size_isValid = ::OpenAPI::fromJsonValue(m_queue_memory_size, json[QString("QueueMemorySize")]);
    m_queue_memory_size_isSet = !json[QString("QueueMemorySize")].isNull() && m_queue_memory_size_isValid;

    m_queue_utilization_percentage_isValid = ::OpenAPI::fromJsonValue(m_queue_utilization_percentage, json[QString("QueueUtilizationPercentage")]);
    m_queue_utilization_percentage_isSet = !json[QString("QueueUtilizationPercentage")].isNull() && m_queue_utilization_percentage_isValid;
}

QString OAIReplicatorQueueStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicatorQueueStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_committed_sequence_number_isSet) {
        obj.insert(QString("CommittedSequenceNumber"), ::OpenAPI::toJsonValue(m_committed_sequence_number));
    }
    if (m_completed_sequence_number_isSet) {
        obj.insert(QString("CompletedSequenceNumber"), ::OpenAPI::toJsonValue(m_completed_sequence_number));
    }
    if (m_first_sequence_number_isSet) {
        obj.insert(QString("FirstSequenceNumber"), ::OpenAPI::toJsonValue(m_first_sequence_number));
    }
    if (m_last_sequence_number_isSet) {
        obj.insert(QString("LastSequenceNumber"), ::OpenAPI::toJsonValue(m_last_sequence_number));
    }
    if (m_queue_memory_size_isSet) {
        obj.insert(QString("QueueMemorySize"), ::OpenAPI::toJsonValue(m_queue_memory_size));
    }
    if (m_queue_utilization_percentage_isSet) {
        obj.insert(QString("QueueUtilizationPercentage"), ::OpenAPI::toJsonValue(m_queue_utilization_percentage));
    }
    return obj;
}

QString OAIReplicatorQueueStatus::getCommittedSequenceNumber() const {
    return m_committed_sequence_number;
}
void OAIReplicatorQueueStatus::setCommittedSequenceNumber(const QString &committed_sequence_number) {
    m_committed_sequence_number = committed_sequence_number;
    m_committed_sequence_number_isSet = true;
}

bool OAIReplicatorQueueStatus::is_committed_sequence_number_Set() const{
    return m_committed_sequence_number_isSet;
}

bool OAIReplicatorQueueStatus::is_committed_sequence_number_Valid() const{
    return m_committed_sequence_number_isValid;
}

QString OAIReplicatorQueueStatus::getCompletedSequenceNumber() const {
    return m_completed_sequence_number;
}
void OAIReplicatorQueueStatus::setCompletedSequenceNumber(const QString &completed_sequence_number) {
    m_completed_sequence_number = completed_sequence_number;
    m_completed_sequence_number_isSet = true;
}

bool OAIReplicatorQueueStatus::is_completed_sequence_number_Set() const{
    return m_completed_sequence_number_isSet;
}

bool OAIReplicatorQueueStatus::is_completed_sequence_number_Valid() const{
    return m_completed_sequence_number_isValid;
}

QString OAIReplicatorQueueStatus::getFirstSequenceNumber() const {
    return m_first_sequence_number;
}
void OAIReplicatorQueueStatus::setFirstSequenceNumber(const QString &first_sequence_number) {
    m_first_sequence_number = first_sequence_number;
    m_first_sequence_number_isSet = true;
}

bool OAIReplicatorQueueStatus::is_first_sequence_number_Set() const{
    return m_first_sequence_number_isSet;
}

bool OAIReplicatorQueueStatus::is_first_sequence_number_Valid() const{
    return m_first_sequence_number_isValid;
}

QString OAIReplicatorQueueStatus::getLastSequenceNumber() const {
    return m_last_sequence_number;
}
void OAIReplicatorQueueStatus::setLastSequenceNumber(const QString &last_sequence_number) {
    m_last_sequence_number = last_sequence_number;
    m_last_sequence_number_isSet = true;
}

bool OAIReplicatorQueueStatus::is_last_sequence_number_Set() const{
    return m_last_sequence_number_isSet;
}

bool OAIReplicatorQueueStatus::is_last_sequence_number_Valid() const{
    return m_last_sequence_number_isValid;
}

QString OAIReplicatorQueueStatus::getQueueMemorySize() const {
    return m_queue_memory_size;
}
void OAIReplicatorQueueStatus::setQueueMemorySize(const QString &queue_memory_size) {
    m_queue_memory_size = queue_memory_size;
    m_queue_memory_size_isSet = true;
}

bool OAIReplicatorQueueStatus::is_queue_memory_size_Set() const{
    return m_queue_memory_size_isSet;
}

bool OAIReplicatorQueueStatus::is_queue_memory_size_Valid() const{
    return m_queue_memory_size_isValid;
}

qint32 OAIReplicatorQueueStatus::getQueueUtilizationPercentage() const {
    return m_queue_utilization_percentage;
}
void OAIReplicatorQueueStatus::setQueueUtilizationPercentage(const qint32 &queue_utilization_percentage) {
    m_queue_utilization_percentage = queue_utilization_percentage;
    m_queue_utilization_percentage_isSet = true;
}

bool OAIReplicatorQueueStatus::is_queue_utilization_percentage_Set() const{
    return m_queue_utilization_percentage_isSet;
}

bool OAIReplicatorQueueStatus::is_queue_utilization_percentage_Valid() const{
    return m_queue_utilization_percentage_isValid;
}

bool OAIReplicatorQueueStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_committed_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_memory_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_utilization_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicatorQueueStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
