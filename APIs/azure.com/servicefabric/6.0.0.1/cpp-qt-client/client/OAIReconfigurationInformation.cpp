/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReconfigurationInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReconfigurationInformation::OAIReconfigurationInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReconfigurationInformation::OAIReconfigurationInformation() {
    this->initializeModel();
}

OAIReconfigurationInformation::~OAIReconfigurationInformation() {}

void OAIReconfigurationInformation::initializeModel() {

    m_previous_configuration_role_isSet = false;
    m_previous_configuration_role_isValid = false;

    m_reconfiguration_phase_isSet = false;
    m_reconfiguration_phase_isValid = false;

    m_reconfiguration_start_time_utc_isSet = false;
    m_reconfiguration_start_time_utc_isValid = false;

    m_reconfiguration_type_isSet = false;
    m_reconfiguration_type_isValid = false;
}

void OAIReconfigurationInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReconfigurationInformation::fromJsonObject(QJsonObject json) {

    m_previous_configuration_role_isValid = ::OpenAPI::fromJsonValue(m_previous_configuration_role, json[QString("PreviousConfigurationRole")]);
    m_previous_configuration_role_isSet = !json[QString("PreviousConfigurationRole")].isNull() && m_previous_configuration_role_isValid;

    m_reconfiguration_phase_isValid = ::OpenAPI::fromJsonValue(m_reconfiguration_phase, json[QString("ReconfigurationPhase")]);
    m_reconfiguration_phase_isSet = !json[QString("ReconfigurationPhase")].isNull() && m_reconfiguration_phase_isValid;

    m_reconfiguration_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_reconfiguration_start_time_utc, json[QString("ReconfigurationStartTimeUtc")]);
    m_reconfiguration_start_time_utc_isSet = !json[QString("ReconfigurationStartTimeUtc")].isNull() && m_reconfiguration_start_time_utc_isValid;

    m_reconfiguration_type_isValid = ::OpenAPI::fromJsonValue(m_reconfiguration_type, json[QString("ReconfigurationType")]);
    m_reconfiguration_type_isSet = !json[QString("ReconfigurationType")].isNull() && m_reconfiguration_type_isValid;
}

QString OAIReconfigurationInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReconfigurationInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_previous_configuration_role.isSet()) {
        obj.insert(QString("PreviousConfigurationRole"), ::OpenAPI::toJsonValue(m_previous_configuration_role));
    }
    if (m_reconfiguration_phase.isSet()) {
        obj.insert(QString("ReconfigurationPhase"), ::OpenAPI::toJsonValue(m_reconfiguration_phase));
    }
    if (m_reconfiguration_start_time_utc_isSet) {
        obj.insert(QString("ReconfigurationStartTimeUtc"), ::OpenAPI::toJsonValue(m_reconfiguration_start_time_utc));
    }
    if (m_reconfiguration_type.isSet()) {
        obj.insert(QString("ReconfigurationType"), ::OpenAPI::toJsonValue(m_reconfiguration_type));
    }
    return obj;
}

OAIReplicaRole OAIReconfigurationInformation::getPreviousConfigurationRole() const {
    return m_previous_configuration_role;
}
void OAIReconfigurationInformation::setPreviousConfigurationRole(const OAIReplicaRole &previous_configuration_role) {
    m_previous_configuration_role = previous_configuration_role;
    m_previous_configuration_role_isSet = true;
}

bool OAIReconfigurationInformation::is_previous_configuration_role_Set() const{
    return m_previous_configuration_role_isSet;
}

bool OAIReconfigurationInformation::is_previous_configuration_role_Valid() const{
    return m_previous_configuration_role_isValid;
}

OAIReconfigurationPhase OAIReconfigurationInformation::getReconfigurationPhase() const {
    return m_reconfiguration_phase;
}
void OAIReconfigurationInformation::setReconfigurationPhase(const OAIReconfigurationPhase &reconfiguration_phase) {
    m_reconfiguration_phase = reconfiguration_phase;
    m_reconfiguration_phase_isSet = true;
}

bool OAIReconfigurationInformation::is_reconfiguration_phase_Set() const{
    return m_reconfiguration_phase_isSet;
}

bool OAIReconfigurationInformation::is_reconfiguration_phase_Valid() const{
    return m_reconfiguration_phase_isValid;
}

QDateTime OAIReconfigurationInformation::getReconfigurationStartTimeUtc() const {
    return m_reconfiguration_start_time_utc;
}
void OAIReconfigurationInformation::setReconfigurationStartTimeUtc(const QDateTime &reconfiguration_start_time_utc) {
    m_reconfiguration_start_time_utc = reconfiguration_start_time_utc;
    m_reconfiguration_start_time_utc_isSet = true;
}

bool OAIReconfigurationInformation::is_reconfiguration_start_time_utc_Set() const{
    return m_reconfiguration_start_time_utc_isSet;
}

bool OAIReconfigurationInformation::is_reconfiguration_start_time_utc_Valid() const{
    return m_reconfiguration_start_time_utc_isValid;
}

OAIReconfigurationType OAIReconfigurationInformation::getReconfigurationType() const {
    return m_reconfiguration_type;
}
void OAIReconfigurationInformation::setReconfigurationType(const OAIReconfigurationType &reconfiguration_type) {
    m_reconfiguration_type = reconfiguration_type;
    m_reconfiguration_type_isSet = true;
}

bool OAIReconfigurationInformation::is_reconfiguration_type_Set() const{
    return m_reconfiguration_type_isSet;
}

bool OAIReconfigurationInformation::is_reconfiguration_type_Valid() const{
    return m_reconfiguration_type_isValid;
}

bool OAIReconfigurationInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_previous_configuration_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconfiguration_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconfiguration_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconfiguration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReconfigurationInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
