/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatelessServiceTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatelessServiceTypeDescription::OAIStatelessServiceTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatelessServiceTypeDescription::OAIStatelessServiceTypeDescription() {
    this->initializeModel();
}

OAIStatelessServiceTypeDescription::~OAIStatelessServiceTypeDescription() {}

void OAIStatelessServiceTypeDescription::initializeModel() {

    m_use_implicit_host_isSet = false;
    m_use_implicit_host_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_is_stateful_isSet = false;
    m_is_stateful_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;
}

void OAIStatelessServiceTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatelessServiceTypeDescription::fromJsonObject(QJsonObject json) {

    m_use_implicit_host_isValid = ::OpenAPI::fromJsonValue(m_use_implicit_host, json[QString("UseImplicitHost")]);
    m_use_implicit_host_isSet = !json[QString("UseImplicitHost")].isNull() && m_use_implicit_host_isValid;

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("Extensions")]);
    m_extensions_isSet = !json[QString("Extensions")].isNull() && m_extensions_isValid;

    m_is_stateful_isValid = ::OpenAPI::fromJsonValue(m_is_stateful, json[QString("IsStateful")]);
    m_is_stateful_isSet = !json[QString("IsStateful")].isNull() && m_is_stateful_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("ServicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("ServicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;
}

QString OAIStatelessServiceTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatelessServiceTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_use_implicit_host_isSet) {
        obj.insert(QString("UseImplicitHost"), ::OpenAPI::toJsonValue(m_use_implicit_host));
    }
    if (m_extensions.size() > 0) {
        obj.insert(QString("Extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_is_stateful_isSet) {
        obj.insert(QString("IsStateful"), ::OpenAPI::toJsonValue(m_is_stateful));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_service_placement_policies.size() > 0) {
        obj.insert(QString("ServicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    return obj;
}

bool OAIStatelessServiceTypeDescription::isUseImplicitHost() const {
    return m_use_implicit_host;
}
void OAIStatelessServiceTypeDescription::setUseImplicitHost(const bool &use_implicit_host) {
    m_use_implicit_host = use_implicit_host;
    m_use_implicit_host_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_use_implicit_host_Set() const{
    return m_use_implicit_host_isSet;
}

bool OAIStatelessServiceTypeDescription::is_use_implicit_host_Valid() const{
    return m_use_implicit_host_isValid;
}

QList<OAIServiceTypeExtensionDescription> OAIStatelessServiceTypeDescription::getExtensions() const {
    return m_extensions;
}
void OAIStatelessServiceTypeDescription::setExtensions(const QList<OAIServiceTypeExtensionDescription> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIStatelessServiceTypeDescription::is_extensions_Valid() const{
    return m_extensions_isValid;
}

bool OAIStatelessServiceTypeDescription::isIsStateful() const {
    return m_is_stateful;
}
void OAIStatelessServiceTypeDescription::setIsStateful(const bool &is_stateful) {
    m_is_stateful = is_stateful;
    m_is_stateful_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_is_stateful_Set() const{
    return m_is_stateful_isSet;
}

bool OAIStatelessServiceTypeDescription::is_is_stateful_Valid() const{
    return m_is_stateful_isValid;
}

OAIServiceKind OAIStatelessServiceTypeDescription::getKind() const {
    return m_kind;
}
void OAIStatelessServiceTypeDescription::setKind(const OAIServiceKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStatelessServiceTypeDescription::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIStatelessServiceTypeDescription::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIStatelessServiceTypeDescription::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIStatelessServiceTypeDescription::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIServicePlacementPolicyDescription> OAIStatelessServiceTypeDescription::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIStatelessServiceTypeDescription::setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIStatelessServiceTypeDescription::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

QString OAIStatelessServiceTypeDescription::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIStatelessServiceTypeDescription::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIStatelessServiceTypeDescription::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIStatelessServiceTypeDescription::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

bool OAIStatelessServiceTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_use_implicit_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stateful_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatelessServiceTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
