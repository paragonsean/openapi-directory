# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server import util


class HealthInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, health_state: HealthState=None, _property: str=None, remove_when_expired: bool=None, sequence_number: str=None, source_id: str=None, time_to_live_in_milli_seconds: str=None):
        """HealthInformation - a model defined in OpenAPI

        :param description: The description of this HealthInformation.
        :param health_state: The health_state of this HealthInformation.
        :param _property: The _property of this HealthInformation.
        :param remove_when_expired: The remove_when_expired of this HealthInformation.
        :param sequence_number: The sequence_number of this HealthInformation.
        :param source_id: The source_id of this HealthInformation.
        :param time_to_live_in_milli_seconds: The time_to_live_in_milli_seconds of this HealthInformation.
        """
        self.openapi_types = {
            'description': str,
            'health_state': HealthState,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': str,
            'source_id': str,
            'time_to_live_in_milli_seconds': str
        }

        self.attribute_map = {
            'description': 'Description',
            'health_state': 'HealthState',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'source_id': 'SourceId',
            'time_to_live_in_milli_seconds': 'TimeToLiveInMilliSeconds'
        }

        self._description = description
        self._health_state = health_state
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._source_id = source_id
        self._time_to_live_in_milli_seconds = time_to_live_in_milli_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthInformation of this HealthInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this HealthInformation.

        The description of the health information. It represents free text used to add human readable information about the report. The maximum string length for the description is 4096 characters. If the provided string is longer, it will be automatically truncated. When truncated, the last characters of the description contain a marker \"[Truncated]\", and total string size is 4096 characters. The presence of the marker indicates to users that truncation occurred. Note that when truncated, the description has less than 4096 characters from the original string. 

        :return: The description of this HealthInformation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthInformation.

        The description of the health information. It represents free text used to add human readable information about the report. The maximum string length for the description is 4096 characters. If the provided string is longer, it will be automatically truncated. When truncated, the last characters of the description contain a marker \"[Truncated]\", and total string size is 4096 characters. The presence of the marker indicates to users that truncation occurred. Note that when truncated, the description has less than 4096 characters from the original string. 

        :param description: The description of this HealthInformation.
        :type description: str
        """

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this HealthInformation.


        :return: The health_state of this HealthInformation.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this HealthInformation.


        :param health_state: The health_state of this HealthInformation.
        :type health_state: HealthState
        """
        if health_state is None:
            raise ValueError("Invalid value for `health_state`, must not be `None`")

        self._health_state = health_state

    @property
    def _property(self):
        """Gets the _property of this HealthInformation.

        The property of the health information. An entity can have health reports for different properties. The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report. For example, a reporter with SourceId \"LocalWatchdog\" can monitor the state of the available disk on a node, so it can report \"AvailableDisk\" property on that node. The same reporter can monitor the node connectivity, so it can report a property \"Connectivity\" on the same node. In the health store, these reports are treated as separate health events for the specified node.  Together with the SourceId, the property uniquely identifies the health information. 

        :return: The _property of this HealthInformation.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this HealthInformation.

        The property of the health information. An entity can have health reports for different properties. The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state condition that triggers the report. For example, a reporter with SourceId \"LocalWatchdog\" can monitor the state of the available disk on a node, so it can report \"AvailableDisk\" property on that node. The same reporter can monitor the node connectivity, so it can report a property \"Connectivity\" on the same node. In the health store, these reports are treated as separate health events for the specified node.  Together with the SourceId, the property uniquely identifies the health information. 

        :param _property: The _property of this HealthInformation.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this HealthInformation.

        Value that indicates whether the report is removed from health store when it expires. If set to true, the report is remopved from the health store after it expires. If set to false, the report is treated as an error when expired. The value of this property is false by default. When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires. This flags the entity as being in Error health state. 

        :return: The remove_when_expired of this HealthInformation.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this HealthInformation.

        Value that indicates whether the report is removed from health store when it expires. If set to true, the report is remopved from the health store after it expires. If set to false, the report is treated as an error when expired. The value of this property is false by default. When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires. This flags the entity as being in Error health state. 

        :param remove_when_expired: The remove_when_expired of this HealthInformation.
        :type remove_when_expired: bool
        """

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this HealthInformation.

        The sequence number for this health report as a numeric string. The report sequence number is used by the health store to detect stale reports. If not specified, a sequence number is auto-generated by the health client when a report is added. 

        :return: The sequence_number of this HealthInformation.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this HealthInformation.

        The sequence number for this health report as a numeric string. The report sequence number is used by the health store to detect stale reports. If not specified, a sequence number is auto-generated by the health client when a report is added. 

        :param sequence_number: The sequence_number of this HealthInformation.
        :type sequence_number: str
        """

        self._sequence_number = sequence_number

    @property
    def source_id(self):
        """Gets the source_id of this HealthInformation.

        The source name which identifies the client/watchdog/system component which generated the health information. 

        :return: The source_id of this HealthInformation.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this HealthInformation.

        The source name which identifies the client/watchdog/system component which generated the health information. 

        :param source_id: The source_id of this HealthInformation.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def time_to_live_in_milli_seconds(self):
        """Gets the time_to_live_in_milli_seconds of this HealthInformation.

        The duration for which this health report is valid. This field is using ISO8601 format for specifying the duration. When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.  If not specified, time to live defaults to infinite value. 

        :return: The time_to_live_in_milli_seconds of this HealthInformation.
        :rtype: str
        """
        return self._time_to_live_in_milli_seconds

    @time_to_live_in_milli_seconds.setter
    def time_to_live_in_milli_seconds(self, time_to_live_in_milli_seconds):
        """Sets the time_to_live_in_milli_seconds of this HealthInformation.

        The duration for which this health report is valid. This field is using ISO8601 format for specifying the duration. When clients report periodically, they should send reports with higher frequency than time to live. If clients report on transition, they can set the time to live to infinite. When time to live expires, the health event that contains the health information is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired false.  If not specified, time to live defaults to infinite value. 

        :param time_to_live_in_milli_seconds: The time_to_live_in_milli_seconds of this HealthInformation.
        :type time_to_live_in_milli_seconds: str
        """

        self._time_to_live_in_milli_seconds = time_to_live_in_milli_seconds
