# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_metric_description import ApplicationMetricDescription
from openapi_server import util


class ApplicationLoadInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_load_metric_information: List[ApplicationMetricDescription]=None, id: str=None, maximum_nodes: int=None, minimum_nodes: int=None, node_count: int=None):
        """ApplicationLoadInfo - a model defined in OpenAPI

        :param application_load_metric_information: The application_load_metric_information of this ApplicationLoadInfo.
        :param id: The id of this ApplicationLoadInfo.
        :param maximum_nodes: The maximum_nodes of this ApplicationLoadInfo.
        :param minimum_nodes: The minimum_nodes of this ApplicationLoadInfo.
        :param node_count: The node_count of this ApplicationLoadInfo.
        """
        self.openapi_types = {
            'application_load_metric_information': List[ApplicationMetricDescription],
            'id': str,
            'maximum_nodes': int,
            'minimum_nodes': int,
            'node_count': int
        }

        self.attribute_map = {
            'application_load_metric_information': 'ApplicationLoadMetricInformation',
            'id': 'Id',
            'maximum_nodes': 'MaximumNodes',
            'minimum_nodes': 'MinimumNodes',
            'node_count': 'NodeCount'
        }

        self._application_load_metric_information = application_load_metric_information
        self._id = id
        self._maximum_nodes = maximum_nodes
        self._minimum_nodes = minimum_nodes
        self._node_count = node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationLoadInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationLoadInfo of this ApplicationLoadInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_load_metric_information(self):
        """Gets the application_load_metric_information of this ApplicationLoadInfo.

        List of application capacity metric description.

        :return: The application_load_metric_information of this ApplicationLoadInfo.
        :rtype: List[ApplicationMetricDescription]
        """
        return self._application_load_metric_information

    @application_load_metric_information.setter
    def application_load_metric_information(self, application_load_metric_information):
        """Sets the application_load_metric_information of this ApplicationLoadInfo.

        List of application capacity metric description.

        :param application_load_metric_information: The application_load_metric_information of this ApplicationLoadInfo.
        :type application_load_metric_information: List[ApplicationMetricDescription]
        """

        self._application_load_metric_information = application_load_metric_information

    @property
    def id(self):
        """Gets the id of this ApplicationLoadInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.   Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric://myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions. 

        :return: The id of this ApplicationLoadInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationLoadInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource.   Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the application name is \"fabric://myapp/app1\", the application identity would be \"myapp~app1\" in 6.0+ and \"myapp/app1\" in previous versions. 

        :param id: The id of this ApplicationLoadInfo.
        :type id: str
        """

        self._id = id

    @property
    def maximum_nodes(self):
        """Gets the maximum_nodes of this ApplicationLoadInfo.

        The maximum number of nodes where this application can be instantiated. It is the number of nodes this application is allowed to span. For applications that do not have application capacity defined this value will be zero. 

        :return: The maximum_nodes of this ApplicationLoadInfo.
        :rtype: int
        """
        return self._maximum_nodes

    @maximum_nodes.setter
    def maximum_nodes(self, maximum_nodes):
        """Sets the maximum_nodes of this ApplicationLoadInfo.

        The maximum number of nodes where this application can be instantiated. It is the number of nodes this application is allowed to span. For applications that do not have application capacity defined this value will be zero. 

        :param maximum_nodes: The maximum_nodes of this ApplicationLoadInfo.
        :type maximum_nodes: int
        """

        self._maximum_nodes = maximum_nodes

    @property
    def minimum_nodes(self):
        """Gets the minimum_nodes of this ApplicationLoadInfo.

        The minimum number of nodes for this application. It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad * MinimumNodes for this Application instance. For applications that do not have application capacity defined this value will be zero. 

        :return: The minimum_nodes of this ApplicationLoadInfo.
        :rtype: int
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes):
        """Sets the minimum_nodes of this ApplicationLoadInfo.

        The minimum number of nodes for this application. It is the number of nodes where Service Fabric will reserve Capacity in the cluster which equals to ReservedLoad * MinimumNodes for this Application instance. For applications that do not have application capacity defined this value will be zero. 

        :param minimum_nodes: The minimum_nodes of this ApplicationLoadInfo.
        :type minimum_nodes: int
        """

        self._minimum_nodes = minimum_nodes

    @property
    def node_count(self):
        """Gets the node_count of this ApplicationLoadInfo.

        The number of nodes on which this application is instantiated. For applications that do not have application capacity defined this value will be zero. 

        :return: The node_count of this ApplicationLoadInfo.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ApplicationLoadInfo.

        The number of nodes on which this application is instantiated. For applications that do not have application capacity defined this value will be zero. 

        :param node_count: The node_count of this ApplicationLoadInfo.
        :type node_count: int
        """

        self._node_count = node_count
