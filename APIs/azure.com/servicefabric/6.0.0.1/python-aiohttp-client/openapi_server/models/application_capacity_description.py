# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_metric_description import ApplicationMetricDescription
from openapi_server import util


class ApplicationCapacityDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_metrics: List[ApplicationMetricDescription]=None, maximum_nodes: int=0, minimum_nodes: int=None):
        """ApplicationCapacityDescription - a model defined in OpenAPI

        :param application_metrics: The application_metrics of this ApplicationCapacityDescription.
        :param maximum_nodes: The maximum_nodes of this ApplicationCapacityDescription.
        :param minimum_nodes: The minimum_nodes of this ApplicationCapacityDescription.
        """
        self.openapi_types = {
            'application_metrics': List[ApplicationMetricDescription],
            'maximum_nodes': int,
            'minimum_nodes': int
        }

        self.attribute_map = {
            'application_metrics': 'ApplicationMetrics',
            'maximum_nodes': 'MaximumNodes',
            'minimum_nodes': 'MinimumNodes'
        }

        self._application_metrics = application_metrics
        self._maximum_nodes = maximum_nodes
        self._minimum_nodes = minimum_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationCapacityDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationCapacityDescription of this ApplicationCapacityDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_metrics(self):
        """Gets the application_metrics of this ApplicationCapacityDescription.

        List of application capacity metric description.

        :return: The application_metrics of this ApplicationCapacityDescription.
        :rtype: List[ApplicationMetricDescription]
        """
        return self._application_metrics

    @application_metrics.setter
    def application_metrics(self, application_metrics):
        """Sets the application_metrics of this ApplicationCapacityDescription.

        List of application capacity metric description.

        :param application_metrics: The application_metrics of this ApplicationCapacityDescription.
        :type application_metrics: List[ApplicationMetricDescription]
        """

        self._application_metrics = application_metrics

    @property
    def maximum_nodes(self):
        """Gets the maximum_nodes of this ApplicationCapacityDescription.

        The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.

        :return: The maximum_nodes of this ApplicationCapacityDescription.
        :rtype: int
        """
        return self._maximum_nodes

    @maximum_nodes.setter
    def maximum_nodes(self, maximum_nodes):
        """Sets the maximum_nodes of this ApplicationCapacityDescription.

        The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.

        :param maximum_nodes: The maximum_nodes of this ApplicationCapacityDescription.
        :type maximum_nodes: int
        """
        if maximum_nodes is not None and maximum_nodes < 0:
            raise ValueError("Invalid value for `maximum_nodes`, must be a value greater than or equal to `0`")

        self._maximum_nodes = maximum_nodes

    @property
    def minimum_nodes(self):
        """Gets the minimum_nodes of this ApplicationCapacityDescription.

        The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.

        :return: The minimum_nodes of this ApplicationCapacityDescription.
        :rtype: int
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes):
        """Sets the minimum_nodes of this ApplicationCapacityDescription.

        The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.

        :param minimum_nodes: The minimum_nodes of this ApplicationCapacityDescription.
        :type minimum_nodes: int
        """
        if minimum_nodes is not None and minimum_nodes < 0:
            raise ValueError("Invalid value for `minimum_nodes`, must be a value greater than or equal to `0`")

        self._minimum_nodes = minimum_nodes
