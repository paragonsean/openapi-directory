# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server import util


class NodeHealthStateChunk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state: HealthState=None, node_name: str=None):
        """NodeHealthStateChunk - a model defined in OpenAPI

        :param health_state: The health_state of this NodeHealthStateChunk.
        :param node_name: The node_name of this NodeHealthStateChunk.
        """
        self.openapi_types = {
            'health_state': HealthState,
            'node_name': str
        }

        self.attribute_map = {
            'health_state': 'HealthState',
            'node_name': 'NodeName'
        }

        self._health_state = health_state
        self._node_name = node_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeHealthStateChunk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeHealthStateChunk of this NodeHealthStateChunk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state(self):
        """Gets the health_state of this NodeHealthStateChunk.


        :return: The health_state of this NodeHealthStateChunk.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this NodeHealthStateChunk.


        :param health_state: The health_state of this NodeHealthStateChunk.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def node_name(self):
        """Gets the node_name of this NodeHealthStateChunk.

        The name of a Service Fabric node.

        :return: The node_name of this NodeHealthStateChunk.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeHealthStateChunk.

        The name of a Service Fabric node.

        :param node_name: The node_name of this NodeHealthStateChunk.
        :type node_name: str
        """

        self._node_name = node_name
