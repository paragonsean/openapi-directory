# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceNameInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None):
        """ServiceNameInfo - a model defined in OpenAPI

        :param id: The id of this ServiceNameInfo.
        :param name: The name of this ServiceNameInfo.
        """
        self.openapi_types = {
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name'
        }

        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceNameInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceNameInfo of this ServiceNameInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ServiceNameInfo.

        The identity of the service. This is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.  Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions. 

        :return: The id of this ServiceNameInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceNameInfo.

        The identity of the service. This is an encoded representation of the service name. This is used in the REST APIs to identify the service resource.  Starting in version 6.0, hierarchical names are delimited with the \"~\" character. For example, if the service name is \"fabric://myapp/app1/svc1\", the service identity would be \"myapp~app1~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions. 

        :param id: The id of this ServiceNameInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceNameInfo.

        The full name of the service with 'fabric:' URI scheme.

        :return: The name of this ServiceNameInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceNameInfo.

        The full name of the service with 'fabric:' URI scheme.

        :param name: The name of this ServiceNameInfo.
        :type name: str
        """

        self._name = name
