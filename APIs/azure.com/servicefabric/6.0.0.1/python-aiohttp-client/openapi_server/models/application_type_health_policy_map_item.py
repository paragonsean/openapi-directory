# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationTypeHealthPolicyMapItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, value: int=None):
        """ApplicationTypeHealthPolicyMapItem - a model defined in OpenAPI

        :param key: The key of this ApplicationTypeHealthPolicyMapItem.
        :param value: The value of this ApplicationTypeHealthPolicyMapItem.
        """
        self.openapi_types = {
            'key': str,
            'value': int
        }

        self.attribute_map = {
            'key': 'Key',
            'value': 'Value'
        }

        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationTypeHealthPolicyMapItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationTypeHealthPolicyMapItem of this ApplicationTypeHealthPolicyMapItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ApplicationTypeHealthPolicyMapItem.

        The key of the application type health policy map item. This is the name of the application type.

        :return: The key of this ApplicationTypeHealthPolicyMapItem.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApplicationTypeHealthPolicyMapItem.

        The key of the application type health policy map item. This is the name of the application type.

        :param key: The key of this ApplicationTypeHealthPolicyMapItem.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def value(self):
        """Gets the value of this ApplicationTypeHealthPolicyMapItem.

        The value of the application type health policy map item. The max percent unhealthy applications allowed for the application type. Must be between zero and 100. 

        :return: The value of this ApplicationTypeHealthPolicyMapItem.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApplicationTypeHealthPolicyMapItem.

        The value of the application type health policy map item. The max percent unhealthy applications allowed for the application type. Must be between zero and 100. 

        :param value: The value of this ApplicationTypeHealthPolicyMapItem.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
