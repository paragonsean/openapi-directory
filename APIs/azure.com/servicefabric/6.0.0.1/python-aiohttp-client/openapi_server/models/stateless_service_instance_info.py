# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.replica_info import ReplicaInfo
from openapi_server.models.replica_status import ReplicaStatus
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class StatelessServiceInstanceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, health_state: HealthState=None, last_in_build_duration_in_seconds: str=None, node_name: str=None, replica_status: ReplicaStatus=None, service_kind: ServiceKind=None, instance_id: str=None):
        """StatelessServiceInstanceInfo - a model defined in OpenAPI

        :param address: The address of this StatelessServiceInstanceInfo.
        :param health_state: The health_state of this StatelessServiceInstanceInfo.
        :param last_in_build_duration_in_seconds: The last_in_build_duration_in_seconds of this StatelessServiceInstanceInfo.
        :param node_name: The node_name of this StatelessServiceInstanceInfo.
        :param replica_status: The replica_status of this StatelessServiceInstanceInfo.
        :param service_kind: The service_kind of this StatelessServiceInstanceInfo.
        :param instance_id: The instance_id of this StatelessServiceInstanceInfo.
        """
        self.openapi_types = {
            'address': str,
            'health_state': HealthState,
            'last_in_build_duration_in_seconds': str,
            'node_name': str,
            'replica_status': ReplicaStatus,
            'service_kind': ServiceKind,
            'instance_id': str
        }

        self.attribute_map = {
            'address': 'Address',
            'health_state': 'HealthState',
            'last_in_build_duration_in_seconds': 'LastInBuildDurationInSeconds',
            'node_name': 'NodeName',
            'replica_status': 'ReplicaStatus',
            'service_kind': 'ServiceKind',
            'instance_id': 'InstanceId'
        }

        self._address = address
        self._health_state = health_state
        self._last_in_build_duration_in_seconds = last_in_build_duration_in_seconds
        self._node_name = node_name
        self._replica_status = replica_status
        self._service_kind = service_kind
        self._instance_id = instance_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatelessServiceInstanceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatelessServiceInstanceInfo of this StatelessServiceInstanceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this StatelessServiceInstanceInfo.

        The address the replica is listening on.

        :return: The address of this StatelessServiceInstanceInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StatelessServiceInstanceInfo.

        The address the replica is listening on.

        :param address: The address of this StatelessServiceInstanceInfo.
        :type address: str
        """

        self._address = address

    @property
    def health_state(self):
        """Gets the health_state of this StatelessServiceInstanceInfo.


        :return: The health_state of this StatelessServiceInstanceInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this StatelessServiceInstanceInfo.


        :param health_state: The health_state of this StatelessServiceInstanceInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def last_in_build_duration_in_seconds(self):
        """Gets the last_in_build_duration_in_seconds of this StatelessServiceInstanceInfo.

        The last in build duration of the replica in seconds.

        :return: The last_in_build_duration_in_seconds of this StatelessServiceInstanceInfo.
        :rtype: str
        """
        return self._last_in_build_duration_in_seconds

    @last_in_build_duration_in_seconds.setter
    def last_in_build_duration_in_seconds(self, last_in_build_duration_in_seconds):
        """Sets the last_in_build_duration_in_seconds of this StatelessServiceInstanceInfo.

        The last in build duration of the replica in seconds.

        :param last_in_build_duration_in_seconds: The last_in_build_duration_in_seconds of this StatelessServiceInstanceInfo.
        :type last_in_build_duration_in_seconds: str
        """

        self._last_in_build_duration_in_seconds = last_in_build_duration_in_seconds

    @property
    def node_name(self):
        """Gets the node_name of this StatelessServiceInstanceInfo.

        The name of a Service Fabric node.

        :return: The node_name of this StatelessServiceInstanceInfo.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this StatelessServiceInstanceInfo.

        The name of a Service Fabric node.

        :param node_name: The node_name of this StatelessServiceInstanceInfo.
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def replica_status(self):
        """Gets the replica_status of this StatelessServiceInstanceInfo.


        :return: The replica_status of this StatelessServiceInstanceInfo.
        :rtype: ReplicaStatus
        """
        return self._replica_status

    @replica_status.setter
    def replica_status(self, replica_status):
        """Sets the replica_status of this StatelessServiceInstanceInfo.


        :param replica_status: The replica_status of this StatelessServiceInstanceInfo.
        :type replica_status: ReplicaStatus
        """

        self._replica_status = replica_status

    @property
    def service_kind(self):
        """Gets the service_kind of this StatelessServiceInstanceInfo.


        :return: The service_kind of this StatelessServiceInstanceInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatelessServiceInstanceInfo.


        :param service_kind: The service_kind of this StatelessServiceInstanceInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def instance_id(self):
        """Gets the instance_id of this StatelessServiceInstanceInfo.

        Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance is failedover on the same or different node, it will get a different value for the InstanceId.

        :return: The instance_id of this StatelessServiceInstanceInfo.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this StatelessServiceInstanceInfo.

        Id of a stateless service instance. InstanceId is used by Service Fabric to uniquely identify an instance of a partition of a stateless service. It is unique within a partition and does not change for the lifetime of the instance. If the instance is failedover on the same or different node, it will get a different value for the InstanceId.

        :param instance_id: The instance_id of this StatelessServiceInstanceInfo.
        :type instance_id: str
        """

        self._instance_id = instance_id
