# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestartDeployedCodePackageDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_package_instance_id: str=None, code_package_name: str=None, service_manifest_name: str=None, service_package_activation_id: str=None):
        """RestartDeployedCodePackageDescription - a model defined in OpenAPI

        :param code_package_instance_id: The code_package_instance_id of this RestartDeployedCodePackageDescription.
        :param code_package_name: The code_package_name of this RestartDeployedCodePackageDescription.
        :param service_manifest_name: The service_manifest_name of this RestartDeployedCodePackageDescription.
        :param service_package_activation_id: The service_package_activation_id of this RestartDeployedCodePackageDescription.
        """
        self.openapi_types = {
            'code_package_instance_id': str,
            'code_package_name': str,
            'service_manifest_name': str,
            'service_package_activation_id': str
        }

        self.attribute_map = {
            'code_package_instance_id': 'CodePackageInstanceId',
            'code_package_name': 'CodePackageName',
            'service_manifest_name': 'ServiceManifestName',
            'service_package_activation_id': 'ServicePackageActivationId'
        }

        self._code_package_instance_id = code_package_instance_id
        self._code_package_name = code_package_name
        self._service_manifest_name = service_manifest_name
        self._service_package_activation_id = service_package_activation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestartDeployedCodePackageDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestartDeployedCodePackageDescription of this RestartDeployedCodePackageDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_package_instance_id(self):
        """Gets the code_package_instance_id of this RestartDeployedCodePackageDescription.

        The instance id for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.

        :return: The code_package_instance_id of this RestartDeployedCodePackageDescription.
        :rtype: str
        """
        return self._code_package_instance_id

    @code_package_instance_id.setter
    def code_package_instance_id(self, code_package_instance_id):
        """Sets the code_package_instance_id of this RestartDeployedCodePackageDescription.

        The instance id for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.

        :param code_package_instance_id: The code_package_instance_id of this RestartDeployedCodePackageDescription.
        :type code_package_instance_id: str
        """
        if code_package_instance_id is None:
            raise ValueError("Invalid value for `code_package_instance_id`, must not be `None`")

        self._code_package_instance_id = code_package_instance_id

    @property
    def code_package_name(self):
        """Gets the code_package_name of this RestartDeployedCodePackageDescription.

        The name of the code package defined in the service manifest.

        :return: The code_package_name of this RestartDeployedCodePackageDescription.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this RestartDeployedCodePackageDescription.

        The name of the code package defined in the service manifest.

        :param code_package_name: The code_package_name of this RestartDeployedCodePackageDescription.
        :type code_package_name: str
        """
        if code_package_name is None:
            raise ValueError("Invalid value for `code_package_name`, must not be `None`")

        self._code_package_name = code_package_name

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this RestartDeployedCodePackageDescription.

        The name of the service manifest.

        :return: The service_manifest_name of this RestartDeployedCodePackageDescription.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this RestartDeployedCodePackageDescription.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this RestartDeployedCodePackageDescription.
        :type service_manifest_name: str
        """
        if service_manifest_name is None:
            raise ValueError("Invalid value for `service_manifest_name`, must not be `None`")

        self._service_manifest_name = service_manifest_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this RestartDeployedCodePackageDescription.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :return: The service_package_activation_id of this RestartDeployedCodePackageDescription.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this RestartDeployedCodePackageDescription.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :param service_package_activation_id: The service_package_activation_id of this RestartDeployedCodePackageDescription.
        :type service_package_activation_id: str
        """

        self._service_package_activation_id = service_package_activation_id
