# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_endpoint_role import ServiceEndpointRole
from openapi_server import util


class ResolvedServiceEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, kind: ServiceEndpointRole=None):
        """ResolvedServiceEndpoint - a model defined in OpenAPI

        :param address: The address of this ResolvedServiceEndpoint.
        :param kind: The kind of this ResolvedServiceEndpoint.
        """
        self.openapi_types = {
            'address': str,
            'kind': ServiceEndpointRole
        }

        self.attribute_map = {
            'address': 'Address',
            'kind': 'Kind'
        }

        self._address = address
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolvedServiceEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolvedServiceEndpoint of this ResolvedServiceEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ResolvedServiceEndpoint.

        The address of the endpoint. If the endpoint has multiple listeners the address is a JSON object with one property per listener with the value as the address of that listener.

        :return: The address of this ResolvedServiceEndpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ResolvedServiceEndpoint.

        The address of the endpoint. If the endpoint has multiple listeners the address is a JSON object with one property per listener with the value as the address of that listener.

        :param address: The address of this ResolvedServiceEndpoint.
        :type address: str
        """

        self._address = address

    @property
    def kind(self):
        """Gets the kind of this ResolvedServiceEndpoint.


        :return: The kind of this ResolvedServiceEndpoint.
        :rtype: ServiceEndpointRole
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResolvedServiceEndpoint.


        :param kind: The kind of this ResolvedServiceEndpoint.
        :type kind: ServiceEndpointRole
        """

        self._kind = kind
