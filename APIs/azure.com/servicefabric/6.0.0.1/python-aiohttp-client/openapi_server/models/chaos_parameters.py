# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chaos_context import ChaosContext
from openapi_server.models.cluster_health_policy import ClusterHealthPolicy
from openapi_server import util


class ChaosParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_health_policy: ClusterHealthPolicy=None, context: ChaosContext=None, enable_move_replica_faults: bool=True, max_cluster_stabilization_timeout_in_seconds: int=60, max_concurrent_faults: int=1, time_to_run_in_seconds: str='4294967295', wait_time_between_faults_in_seconds: int=20, wait_time_between_iterations_in_seconds: int=30):
        """ChaosParameters - a model defined in OpenAPI

        :param cluster_health_policy: The cluster_health_policy of this ChaosParameters.
        :param context: The context of this ChaosParameters.
        :param enable_move_replica_faults: The enable_move_replica_faults of this ChaosParameters.
        :param max_cluster_stabilization_timeout_in_seconds: The max_cluster_stabilization_timeout_in_seconds of this ChaosParameters.
        :param max_concurrent_faults: The max_concurrent_faults of this ChaosParameters.
        :param time_to_run_in_seconds: The time_to_run_in_seconds of this ChaosParameters.
        :param wait_time_between_faults_in_seconds: The wait_time_between_faults_in_seconds of this ChaosParameters.
        :param wait_time_between_iterations_in_seconds: The wait_time_between_iterations_in_seconds of this ChaosParameters.
        """
        self.openapi_types = {
            'cluster_health_policy': ClusterHealthPolicy,
            'context': ChaosContext,
            'enable_move_replica_faults': bool,
            'max_cluster_stabilization_timeout_in_seconds': int,
            'max_concurrent_faults': int,
            'time_to_run_in_seconds': str,
            'wait_time_between_faults_in_seconds': int,
            'wait_time_between_iterations_in_seconds': int
        }

        self.attribute_map = {
            'cluster_health_policy': 'ClusterHealthPolicy',
            'context': 'Context',
            'enable_move_replica_faults': 'EnableMoveReplicaFaults',
            'max_cluster_stabilization_timeout_in_seconds': 'MaxClusterStabilizationTimeoutInSeconds',
            'max_concurrent_faults': 'MaxConcurrentFaults',
            'time_to_run_in_seconds': 'TimeToRunInSeconds',
            'wait_time_between_faults_in_seconds': 'WaitTimeBetweenFaultsInSeconds',
            'wait_time_between_iterations_in_seconds': 'WaitTimeBetweenIterationsInSeconds'
        }

        self._cluster_health_policy = cluster_health_policy
        self._context = context
        self._enable_move_replica_faults = enable_move_replica_faults
        self._max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds
        self._max_concurrent_faults = max_concurrent_faults
        self._time_to_run_in_seconds = time_to_run_in_seconds
        self._wait_time_between_faults_in_seconds = wait_time_between_faults_in_seconds
        self._wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosParameters of this ChaosParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_health_policy(self):
        """Gets the cluster_health_policy of this ChaosParameters.


        :return: The cluster_health_policy of this ChaosParameters.
        :rtype: ClusterHealthPolicy
        """
        return self._cluster_health_policy

    @cluster_health_policy.setter
    def cluster_health_policy(self, cluster_health_policy):
        """Sets the cluster_health_policy of this ChaosParameters.


        :param cluster_health_policy: The cluster_health_policy of this ChaosParameters.
        :type cluster_health_policy: ClusterHealthPolicy
        """

        self._cluster_health_policy = cluster_health_policy

    @property
    def context(self):
        """Gets the context of this ChaosParameters.


        :return: The context of this ChaosParameters.
        :rtype: ChaosContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ChaosParameters.


        :param context: The context of this ChaosParameters.
        :type context: ChaosContext
        """

        self._context = context

    @property
    def enable_move_replica_faults(self):
        """Gets the enable_move_replica_faults of this ChaosParameters.

        Enables or disables the move primary and move secondary faults. 

        :return: The enable_move_replica_faults of this ChaosParameters.
        :rtype: bool
        """
        return self._enable_move_replica_faults

    @enable_move_replica_faults.setter
    def enable_move_replica_faults(self, enable_move_replica_faults):
        """Sets the enable_move_replica_faults of this ChaosParameters.

        Enables or disables the move primary and move secondary faults. 

        :param enable_move_replica_faults: The enable_move_replica_faults of this ChaosParameters.
        :type enable_move_replica_faults: bool
        """

        self._enable_move_replica_faults = enable_move_replica_faults

    @property
    def max_cluster_stabilization_timeout_in_seconds(self):
        """Gets the max_cluster_stabilization_timeout_in_seconds of this ChaosParameters.

        The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities. During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event. 

        :return: The max_cluster_stabilization_timeout_in_seconds of this ChaosParameters.
        :rtype: int
        """
        return self._max_cluster_stabilization_timeout_in_seconds

    @max_cluster_stabilization_timeout_in_seconds.setter
    def max_cluster_stabilization_timeout_in_seconds(self, max_cluster_stabilization_timeout_in_seconds):
        """Sets the max_cluster_stabilization_timeout_in_seconds of this ChaosParameters.

        The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities. During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event. 

        :param max_cluster_stabilization_timeout_in_seconds: The max_cluster_stabilization_timeout_in_seconds of this ChaosParameters.
        :type max_cluster_stabilization_timeout_in_seconds: int
        """
        if max_cluster_stabilization_timeout_in_seconds is not None and max_cluster_stabilization_timeout_in_seconds > 4294967295:
            raise ValueError("Invalid value for `max_cluster_stabilization_timeout_in_seconds`, must be a value less than or equal to `4294967295`")
        if max_cluster_stabilization_timeout_in_seconds is not None and max_cluster_stabilization_timeout_in_seconds < 0:
            raise ValueError("Invalid value for `max_cluster_stabilization_timeout_in_seconds`, must be a value greater than or equal to `0`")

        self._max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds

    @property
    def max_concurrent_faults(self):
        """Gets the max_concurrent_faults of this ChaosParameters.

        MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration. Chaos executes in iterations and two consecutive iterations are separated by a validation phase. The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs. The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up. 

        :return: The max_concurrent_faults of this ChaosParameters.
        :rtype: int
        """
        return self._max_concurrent_faults

    @max_concurrent_faults.setter
    def max_concurrent_faults(self, max_concurrent_faults):
        """Sets the max_concurrent_faults of this ChaosParameters.

        MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration. Chaos executes in iterations and two consecutive iterations are separated by a validation phase. The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs. The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up. 

        :param max_concurrent_faults: The max_concurrent_faults of this ChaosParameters.
        :type max_concurrent_faults: int
        """
        if max_concurrent_faults is not None and max_concurrent_faults > 4294967295:
            raise ValueError("Invalid value for `max_concurrent_faults`, must be a value less than or equal to `4294967295`")
        if max_concurrent_faults is not None and max_concurrent_faults < 0:
            raise ValueError("Invalid value for `max_concurrent_faults`, must be a value greater than or equal to `0`")

        self._max_concurrent_faults = max_concurrent_faults

    @property
    def time_to_run_in_seconds(self):
        """Gets the time_to_run_in_seconds of this ChaosParameters.

        Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue). 

        :return: The time_to_run_in_seconds of this ChaosParameters.
        :rtype: str
        """
        return self._time_to_run_in_seconds

    @time_to_run_in_seconds.setter
    def time_to_run_in_seconds(self, time_to_run_in_seconds):
        """Sets the time_to_run_in_seconds of this ChaosParameters.

        Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue). 

        :param time_to_run_in_seconds: The time_to_run_in_seconds of this ChaosParameters.
        :type time_to_run_in_seconds: str
        """

        self._time_to_run_in_seconds = time_to_run_in_seconds

    @property
    def wait_time_between_faults_in_seconds(self):
        """Gets the wait_time_between_faults_in_seconds of this ChaosParameters.

        Wait time (in seconds) between consecutive faults within a single iteration. The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through. The recommendation is to start with a value between 1 and 5 and exercise caution while moving up. 

        :return: The wait_time_between_faults_in_seconds of this ChaosParameters.
        :rtype: int
        """
        return self._wait_time_between_faults_in_seconds

    @wait_time_between_faults_in_seconds.setter
    def wait_time_between_faults_in_seconds(self, wait_time_between_faults_in_seconds):
        """Sets the wait_time_between_faults_in_seconds of this ChaosParameters.

        Wait time (in seconds) between consecutive faults within a single iteration. The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through. The recommendation is to start with a value between 1 and 5 and exercise caution while moving up. 

        :param wait_time_between_faults_in_seconds: The wait_time_between_faults_in_seconds of this ChaosParameters.
        :type wait_time_between_faults_in_seconds: int
        """
        if wait_time_between_faults_in_seconds is not None and wait_time_between_faults_in_seconds > 4294967295:
            raise ValueError("Invalid value for `wait_time_between_faults_in_seconds`, must be a value less than or equal to `4294967295`")
        if wait_time_between_faults_in_seconds is not None and wait_time_between_faults_in_seconds < 0:
            raise ValueError("Invalid value for `wait_time_between_faults_in_seconds`, must be a value greater than or equal to `0`")

        self._wait_time_between_faults_in_seconds = wait_time_between_faults_in_seconds

    @property
    def wait_time_between_iterations_in_seconds(self):
        """Gets the wait_time_between_iterations_in_seconds of this ChaosParameters.

        Time-separation (in seconds) between two consecutive iterations of Chaos. The larger the value, the lower the fault injection rate. 

        :return: The wait_time_between_iterations_in_seconds of this ChaosParameters.
        :rtype: int
        """
        return self._wait_time_between_iterations_in_seconds

    @wait_time_between_iterations_in_seconds.setter
    def wait_time_between_iterations_in_seconds(self, wait_time_between_iterations_in_seconds):
        """Sets the wait_time_between_iterations_in_seconds of this ChaosParameters.

        Time-separation (in seconds) between two consecutive iterations of Chaos. The larger the value, the lower the fault injection rate. 

        :param wait_time_between_iterations_in_seconds: The wait_time_between_iterations_in_seconds of this ChaosParameters.
        :type wait_time_between_iterations_in_seconds: int
        """
        if wait_time_between_iterations_in_seconds is not None and wait_time_between_iterations_in_seconds > 4294967295:
            raise ValueError("Invalid value for `wait_time_between_iterations_in_seconds`, must be a value less than or equal to `4294967295`")
        if wait_time_between_iterations_in_seconds is not None and wait_time_between_iterations_in_seconds < 0:
            raise ValueError("Invalid value for `wait_time_between_iterations_in_seconds`, must be a value greater than or equal to `0`")

        self._wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds
