# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployed_service_replica_info import DeployedServiceReplicaInfo
from openapi_server.models.reconfiguration_information import ReconfigurationInformation
from openapi_server.models.replica_role import ReplicaRole
from openapi_server.models.replica_status import ReplicaStatus
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class DeployedStatefulServiceReplicaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, code_package_name: str=None, host_process_id: str=None, partition_id: str=None, replica_status: ReplicaStatus=None, service_kind: ServiceKind=None, service_manifest_name: str=None, service_name: str=None, service_package_activation_id: str=None, service_type_name: str=None, reconfiguration_information: ReconfigurationInformation=None, replica_id: str=None, replica_role: ReplicaRole=None):
        """DeployedStatefulServiceReplicaInfo - a model defined in OpenAPI

        :param address: The address of this DeployedStatefulServiceReplicaInfo.
        :param code_package_name: The code_package_name of this DeployedStatefulServiceReplicaInfo.
        :param host_process_id: The host_process_id of this DeployedStatefulServiceReplicaInfo.
        :param partition_id: The partition_id of this DeployedStatefulServiceReplicaInfo.
        :param replica_status: The replica_status of this DeployedStatefulServiceReplicaInfo.
        :param service_kind: The service_kind of this DeployedStatefulServiceReplicaInfo.
        :param service_manifest_name: The service_manifest_name of this DeployedStatefulServiceReplicaInfo.
        :param service_name: The service_name of this DeployedStatefulServiceReplicaInfo.
        :param service_package_activation_id: The service_package_activation_id of this DeployedStatefulServiceReplicaInfo.
        :param service_type_name: The service_type_name of this DeployedStatefulServiceReplicaInfo.
        :param reconfiguration_information: The reconfiguration_information of this DeployedStatefulServiceReplicaInfo.
        :param replica_id: The replica_id of this DeployedStatefulServiceReplicaInfo.
        :param replica_role: The replica_role of this DeployedStatefulServiceReplicaInfo.
        """
        self.openapi_types = {
            'address': str,
            'code_package_name': str,
            'host_process_id': str,
            'partition_id': str,
            'replica_status': ReplicaStatus,
            'service_kind': ServiceKind,
            'service_manifest_name': str,
            'service_name': str,
            'service_package_activation_id': str,
            'service_type_name': str,
            'reconfiguration_information': ReconfigurationInformation,
            'replica_id': str,
            'replica_role': ReplicaRole
        }

        self.attribute_map = {
            'address': 'Address',
            'code_package_name': 'CodePackageName',
            'host_process_id': 'HostProcessId',
            'partition_id': 'PartitionId',
            'replica_status': 'ReplicaStatus',
            'service_kind': 'ServiceKind',
            'service_manifest_name': 'ServiceManifestName',
            'service_name': 'ServiceName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_type_name': 'ServiceTypeName',
            'reconfiguration_information': 'ReconfigurationInformation',
            'replica_id': 'ReplicaId',
            'replica_role': 'ReplicaRole'
        }

        self._address = address
        self._code_package_name = code_package_name
        self._host_process_id = host_process_id
        self._partition_id = partition_id
        self._replica_status = replica_status
        self._service_kind = service_kind
        self._service_manifest_name = service_manifest_name
        self._service_name = service_name
        self._service_package_activation_id = service_package_activation_id
        self._service_type_name = service_type_name
        self._reconfiguration_information = reconfiguration_information
        self._replica_id = replica_id
        self._replica_role = replica_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedStatefulServiceReplicaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedStatefulServiceReplicaInfo of this DeployedStatefulServiceReplicaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this DeployedStatefulServiceReplicaInfo.

        The last address returned by the replica in Open or ChangeRole.

        :return: The address of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeployedStatefulServiceReplicaInfo.

        The last address returned by the replica in Open or ChangeRole.

        :param address: The address of this DeployedStatefulServiceReplicaInfo.
        :type address: str
        """

        self._address = address

    @property
    def code_package_name(self):
        """Gets the code_package_name of this DeployedStatefulServiceReplicaInfo.

        The name of the code package defined in the service manifest.

        :return: The code_package_name of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this DeployedStatefulServiceReplicaInfo.

        The name of the code package defined in the service manifest.

        :param code_package_name: The code_package_name of this DeployedStatefulServiceReplicaInfo.
        :type code_package_name: str
        """

        self._code_package_name = code_package_name

    @property
    def host_process_id(self):
        """Gets the host_process_id of this DeployedStatefulServiceReplicaInfo.

        Host process id of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process id will be from different kernel.

        :return: The host_process_id of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._host_process_id

    @host_process_id.setter
    def host_process_id(self, host_process_id):
        """Sets the host_process_id of this DeployedStatefulServiceReplicaInfo.

        Host process id of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process id will be from different kernel.

        :param host_process_id: The host_process_id of this DeployedStatefulServiceReplicaInfo.
        :type host_process_id: str
        """

        self._host_process_id = host_process_id

    @property
    def partition_id(self):
        """Gets the partition_id of this DeployedStatefulServiceReplicaInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.

        :return: The partition_id of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this DeployedStatefulServiceReplicaInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.

        :param partition_id: The partition_id of this DeployedStatefulServiceReplicaInfo.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def replica_status(self):
        """Gets the replica_status of this DeployedStatefulServiceReplicaInfo.


        :return: The replica_status of this DeployedStatefulServiceReplicaInfo.
        :rtype: ReplicaStatus
        """
        return self._replica_status

    @replica_status.setter
    def replica_status(self, replica_status):
        """Sets the replica_status of this DeployedStatefulServiceReplicaInfo.


        :param replica_status: The replica_status of this DeployedStatefulServiceReplicaInfo.
        :type replica_status: ReplicaStatus
        """

        self._replica_status = replica_status

    @property
    def service_kind(self):
        """Gets the service_kind of this DeployedStatefulServiceReplicaInfo.


        :return: The service_kind of this DeployedStatefulServiceReplicaInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this DeployedStatefulServiceReplicaInfo.


        :param service_kind: The service_kind of this DeployedStatefulServiceReplicaInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployedStatefulServiceReplicaInfo.

        The name of the service manifest.

        :return: The service_manifest_name of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployedStatefulServiceReplicaInfo.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this DeployedStatefulServiceReplicaInfo.
        :type service_manifest_name: str
        """

        self._service_manifest_name = service_manifest_name

    @property
    def service_name(self):
        """Gets the service_name of this DeployedStatefulServiceReplicaInfo.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DeployedStatefulServiceReplicaInfo.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this DeployedStatefulServiceReplicaInfo.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this DeployedStatefulServiceReplicaInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :return: The service_package_activation_id of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this DeployedStatefulServiceReplicaInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :param service_package_activation_id: The service_package_activation_id of this DeployedStatefulServiceReplicaInfo.
        :type service_package_activation_id: str
        """

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_type_name(self):
        """Gets the service_type_name of this DeployedStatefulServiceReplicaInfo.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this DeployedStatefulServiceReplicaInfo.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this DeployedStatefulServiceReplicaInfo.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name

    @property
    def reconfiguration_information(self):
        """Gets the reconfiguration_information of this DeployedStatefulServiceReplicaInfo.


        :return: The reconfiguration_information of this DeployedStatefulServiceReplicaInfo.
        :rtype: ReconfigurationInformation
        """
        return self._reconfiguration_information

    @reconfiguration_information.setter
    def reconfiguration_information(self, reconfiguration_information):
        """Sets the reconfiguration_information of this DeployedStatefulServiceReplicaInfo.


        :param reconfiguration_information: The reconfiguration_information of this DeployedStatefulServiceReplicaInfo.
        :type reconfiguration_information: ReconfigurationInformation
        """

        self._reconfiguration_information = reconfiguration_information

    @property
    def replica_id(self):
        """Gets the replica_id of this DeployedStatefulServiceReplicaInfo.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :return: The replica_id of this DeployedStatefulServiceReplicaInfo.
        :rtype: str
        """
        return self._replica_id

    @replica_id.setter
    def replica_id(self, replica_id):
        """Sets the replica_id of this DeployedStatefulServiceReplicaInfo.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :param replica_id: The replica_id of this DeployedStatefulServiceReplicaInfo.
        :type replica_id: str
        """

        self._replica_id = replica_id

    @property
    def replica_role(self):
        """Gets the replica_role of this DeployedStatefulServiceReplicaInfo.


        :return: The replica_role of this DeployedStatefulServiceReplicaInfo.
        :rtype: ReplicaRole
        """
        return self._replica_role

    @replica_role.setter
    def replica_role(self, replica_role):
        """Sets the replica_role of this DeployedStatefulServiceReplicaInfo.


        :param replica_role: The replica_role of this DeployedStatefulServiceReplicaInfo.
        :type replica_role: ReplicaRole
        """

        self._replica_role = replica_role
