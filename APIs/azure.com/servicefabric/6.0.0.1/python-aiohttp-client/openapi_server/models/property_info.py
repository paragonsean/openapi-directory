# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_metadata import PropertyMetadata
from openapi_server.models.property_value import PropertyValue
from openapi_server import util


class PropertyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: PropertyMetadata=None, name: str=None, value: PropertyValue=None):
        """PropertyInfo - a model defined in OpenAPI

        :param metadata: The metadata of this PropertyInfo.
        :param name: The name of this PropertyInfo.
        :param value: The value of this PropertyInfo.
        """
        self.openapi_types = {
            'metadata': PropertyMetadata,
            'name': str,
            'value': PropertyValue
        }

        self.attribute_map = {
            'metadata': 'Metadata',
            'name': 'Name',
            'value': 'Value'
        }

        self._metadata = metadata
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyInfo of this PropertyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this PropertyInfo.


        :return: The metadata of this PropertyInfo.
        :rtype: PropertyMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PropertyInfo.


        :param metadata: The metadata of this PropertyInfo.
        :type metadata: PropertyMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PropertyInfo.

        The name of the Service Fabric property.

        :return: The name of this PropertyInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyInfo.

        The name of the Service Fabric property.

        :param name: The name of this PropertyInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this PropertyInfo.


        :return: The value of this PropertyInfo.
        :rtype: PropertyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyInfo.


        :param value: The value of this PropertyInfo.
        :type value: PropertyValue
        """

        self._value = value
