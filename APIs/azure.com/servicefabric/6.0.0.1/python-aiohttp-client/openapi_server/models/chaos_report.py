# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chaos_event_wrapper import ChaosEventWrapper
from openapi_server.models.chaos_parameters import ChaosParameters
from openapi_server import util


class ChaosReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chaos_parameters: ChaosParameters=None, continuation_token: str=None, history: List[ChaosEventWrapper]=None, status: str=None):
        """ChaosReport - a model defined in OpenAPI

        :param chaos_parameters: The chaos_parameters of this ChaosReport.
        :param continuation_token: The continuation_token of this ChaosReport.
        :param history: The history of this ChaosReport.
        :param status: The status of this ChaosReport.
        """
        self.openapi_types = {
            'chaos_parameters': ChaosParameters,
            'continuation_token': str,
            'history': List[ChaosEventWrapper],
            'status': str
        }

        self.attribute_map = {
            'chaos_parameters': 'ChaosParameters',
            'continuation_token': 'ContinuationToken',
            'history': 'History',
            'status': 'Status'
        }

        self._chaos_parameters = chaos_parameters
        self._continuation_token = continuation_token
        self._history = history
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosReport of this ChaosReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chaos_parameters(self):
        """Gets the chaos_parameters of this ChaosReport.


        :return: The chaos_parameters of this ChaosReport.
        :rtype: ChaosParameters
        """
        return self._chaos_parameters

    @chaos_parameters.setter
    def chaos_parameters(self, chaos_parameters):
        """Sets the chaos_parameters of this ChaosReport.


        :param chaos_parameters: The chaos_parameters of this ChaosReport.
        :type chaos_parameters: ChaosParameters
        """

        self._chaos_parameters = chaos_parameters

    @property
    def continuation_token(self):
        """Gets the continuation_token of this ChaosReport.

        The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token is not included in the response.

        :return: The continuation_token of this ChaosReport.
        :rtype: str
        """
        return self._continuation_token

    @continuation_token.setter
    def continuation_token(self, continuation_token):
        """Sets the continuation_token of this ChaosReport.

        The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token is not included in the response.

        :param continuation_token: The continuation_token of this ChaosReport.
        :type continuation_token: str
        """

        self._continuation_token = continuation_token

    @property
    def history(self):
        """Gets the history of this ChaosReport.


        :return: The history of this ChaosReport.
        :rtype: List[ChaosEventWrapper]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this ChaosReport.


        :param history: The history of this ChaosReport.
        :type history: List[ChaosEventWrapper]
        """

        self._history = history

    @property
    def status(self):
        """Gets the status of this ChaosReport.

        Current status of the Chaos run.  - Invalid - Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type.   The valus is zero. - Running - Indicates that Chaos is not stopped. - Stopped - Indicates that Chaos is not scheduling futher faults.

        :return: The status of this ChaosReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChaosReport.

        Current status of the Chaos run.  - Invalid - Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type.   The valus is zero. - Running - Indicates that Chaos is not stopped. - Stopped - Indicates that Chaos is not scheduling futher faults.

        :param status: The status of this ChaosReport.
        :type status: str
        """
        allowed_values = ["Invalid", "Running", "Stopped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
