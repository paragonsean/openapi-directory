from typing import List, Dict
from aiohttp import web

from openapi_server.models.fabric_error import FabricError
from openapi_server.models.image_store_content import ImageStoreContent
from openapi_server.models.image_store_copy_description import ImageStoreCopyDescription
from openapi_server import util


async def copy_image_store_content(request: web.Request, api_version, image_store_copy_description, timeout=None) -> web.Response:
    """Copies image store content internally

    Copies the image store content from the source image store relative path to the destination image store relative path.

    :param api_version: The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;.
    :type api_version: str
    :param image_store_copy_description: Describes the copy description for the image store.
    :type image_store_copy_description: dict | bytes
    :param timeout: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
    :type timeout: int

    """
    image_store_copy_description = ImageStoreCopyDescription.from_dict(image_store_copy_description)
    return web.Response(status=200)


async def delete_image_store_content(request: web.Request, api_version, content_path, timeout=None) -> web.Response:
    """Deletes existing image store content.

    Deletes existing image store content being found within the given image store relative path. This can be used to delete uploaded application packages once they are provisioned.

    :param api_version: The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;.
    :type api_version: str
    :param content_path: Relative path to file or folder in the image store from its root.
    :type content_path: str
    :param timeout: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
    :type timeout: int

    """
    return web.Response(status=200)


async def get_image_store_content(request: web.Request, api_version, content_path, timeout=None) -> web.Response:
    """Gets the image store content information.

    Returns the information about the image store content at the specified contentPath relative to the root of the image store.

    :param api_version: The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;.
    :type api_version: str
    :param content_path: Relative path to file or folder in the image store from its root.
    :type content_path: str
    :param timeout: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
    :type timeout: int

    """
    return web.Response(status=200)


async def get_image_store_root_content(request: web.Request, api_version, timeout=None) -> web.Response:
    """Gets the content information at the root of the image store.

    Returns the information about the image store content at the root of the image store.

    :param api_version: The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;.
    :type api_version: str
    :param timeout: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
    :type timeout: int

    """
    return web.Response(status=200)


async def upload_file(request: web.Request, api_version, content_path, timeout=None) -> web.Response:
    """Uploads contents of the file to the image store.

    Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file&#39;s data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named \&quot;_.dir\&quot;. The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn&#39;t aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete. 

    :param api_version: The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;.
    :type api_version: str
    :param content_path: Relative path to file or folder in the image store from its root.
    :type content_path: str
    :param timeout: The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
    :type timeout: int

    """
    return web.Response(status=200)
