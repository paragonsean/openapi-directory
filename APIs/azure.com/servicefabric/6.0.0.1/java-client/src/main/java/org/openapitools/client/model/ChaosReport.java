/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChaosEventWrapper;
import org.openapitools.client.model.ChaosParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains detailed Chaos report. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosReport {
  public static final String SERIALIZED_NAME_CHAOS_PARAMETERS = "ChaosParameters";
  @SerializedName(SERIALIZED_NAME_CHAOS_PARAMETERS)
  private ChaosParameters chaosParameters;

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "ContinuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  private String continuationToken;

  public static final String SERIALIZED_NAME_HISTORY = "History";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<ChaosEventWrapper> history = new ArrayList<>();

  /**
   * Current status of the Chaos run.  - Invalid - Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type.   The valus is zero. - Running - Indicates that Chaos is not stopped. - Stopped - Indicates that Chaos is not scheduling futher faults.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INVALID("Invalid"),
    
    RUNNING("Running"),
    
    STOPPED("Stopped");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ChaosReport() {
  }

  public ChaosReport chaosParameters(ChaosParameters chaosParameters) {
    this.chaosParameters = chaosParameters;
    return this;
  }

  /**
   * Get chaosParameters
   * @return chaosParameters
   */
  @javax.annotation.Nullable
  public ChaosParameters getChaosParameters() {
    return chaosParameters;
  }

  public void setChaosParameters(ChaosParameters chaosParameters) {
    this.chaosParameters = chaosParameters;
  }


  public ChaosReport continuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  /**
   * The continuation token parameter is used to obtain next set of results. The continuation token is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token is not included in the response.
   * @return continuationToken
   */
  @javax.annotation.Nullable
  public String getContinuationToken() {
    return continuationToken;
  }

  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }


  public ChaosReport history(List<ChaosEventWrapper> history) {
    this.history = history;
    return this;
  }

  public ChaosReport addHistoryItem(ChaosEventWrapper historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @javax.annotation.Nullable
  public List<ChaosEventWrapper> getHistory() {
    return history;
  }

  public void setHistory(List<ChaosEventWrapper> history) {
    this.history = history;
  }


  public ChaosReport status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the Chaos run.  - Invalid - Indicates an invalid Chaos status. All Service Fabric enumerations have the invalid type.   The valus is zero. - Running - Indicates that Chaos is not stopped. - Stopped - Indicates that Chaos is not scheduling futher faults.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosReport chaosReport = (ChaosReport) o;
    return Objects.equals(this.chaosParameters, chaosReport.chaosParameters) &&
        Objects.equals(this.continuationToken, chaosReport.continuationToken) &&
        Objects.equals(this.history, chaosReport.history) &&
        Objects.equals(this.status, chaosReport.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaosParameters, continuationToken, history, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosReport {\n");
    sb.append("    chaosParameters: ").append(toIndentedString(chaosParameters)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChaosParameters");
    openapiFields.add("ContinuationToken");
    openapiFields.add("History");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosReport is not found in the empty JSON string", ChaosReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChaosParameters`
      if (jsonObj.get("ChaosParameters") != null && !jsonObj.get("ChaosParameters").isJsonNull()) {
        ChaosParameters.validateJsonElement(jsonObj.get("ChaosParameters"));
      }
      if ((jsonObj.get("ContinuationToken") != null && !jsonObj.get("ContinuationToken").isJsonNull()) && !jsonObj.get("ContinuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContinuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContinuationToken").toString()));
      }
      if (jsonObj.get("History") != null && !jsonObj.get("History").isJsonNull()) {
        JsonArray jsonArrayhistory = jsonObj.getAsJsonArray("History");
        if (jsonArrayhistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("History").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `History` to be an array in the JSON string but got `%s`", jsonObj.get("History").toString()));
          }

          // validate the optional field `History` (array)
          for (int i = 0; i < jsonArrayhistory.size(); i++) {
            ChaosEventWrapper.validateJsonElement(jsonArrayhistory.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosReport>() {
           @Override
           public void write(JsonWriter out, ChaosReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosReport
   * @throws IOException if the JSON string is invalid with respect to ChaosReport
   */
  public static ChaosReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosReport.class);
  }

  /**
   * Convert an instance of ChaosReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

