/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthEvaluation;
import org.openapitools.client.model.HealthEvaluationKind;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents health evaluation for delta nodes, containing health evaluations for each unhealthy node that impacted current aggregated health state. Can be returned during cluster upgrade when the aggregated health state of the cluster is Warning or Error. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeltaNodesCheckHealthEvaluation extends HealthEvaluation {
  public static final String SERIALIZED_NAME_BASELINE_ERROR_COUNT = "BaselineErrorCount";
  @SerializedName(SERIALIZED_NAME_BASELINE_ERROR_COUNT)
  private Long baselineErrorCount;

  public static final String SERIALIZED_NAME_BASELINE_TOTAL_COUNT = "BaselineTotalCount";
  @SerializedName(SERIALIZED_NAME_BASELINE_TOTAL_COUNT)
  private Long baselineTotalCount;

  public static final String SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES = "MaxPercentDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentDeltaUnhealthyNodes;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "TotalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> unhealthyEvaluations = new ArrayList<>();

  public DeltaNodesCheckHealthEvaluation() {
    this.kind = this.getClass().getSimpleName();
  }

  public DeltaNodesCheckHealthEvaluation baselineErrorCount(Long baselineErrorCount) {
    this.baselineErrorCount = baselineErrorCount;
    return this;
  }

  /**
   * Number of nodes with aggregated heath state Error in the health store at the beginning of the cluster upgrade.
   * @return baselineErrorCount
   */
  @javax.annotation.Nullable
  public Long getBaselineErrorCount() {
    return baselineErrorCount;
  }

  public void setBaselineErrorCount(Long baselineErrorCount) {
    this.baselineErrorCount = baselineErrorCount;
  }


  public DeltaNodesCheckHealthEvaluation baselineTotalCount(Long baselineTotalCount) {
    this.baselineTotalCount = baselineTotalCount;
    return this;
  }

  /**
   * Total number of nodes in the health store at the beginning of the cluster upgrade.
   * @return baselineTotalCount
   */
  @javax.annotation.Nullable
  public Long getBaselineTotalCount() {
    return baselineTotalCount;
  }

  public void setBaselineTotalCount(Long baselineTotalCount) {
    this.baselineTotalCount = baselineTotalCount;
  }


  public DeltaNodesCheckHealthEvaluation maxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
    return this;
  }

  /**
   * Maximum allowed percentage of delta unhealthy nodes from the ClusterUpgradeHealthPolicy.
   * @return maxPercentDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentDeltaUnhealthyNodes() {
    return maxPercentDeltaUnhealthyNodes;
  }

  public void setMaxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
  }


  public DeltaNodesCheckHealthEvaluation totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Total number of nodes in the health store.
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public DeltaNodesCheckHealthEvaluation unhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public DeltaNodesCheckHealthEvaluation addUnhealthyEvaluationsItem(HealthEvaluationWrapper unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeltaNodesCheckHealthEvaluation deltaNodesCheckHealthEvaluation = (DeltaNodesCheckHealthEvaluation) o;
    return Objects.equals(this.baselineErrorCount, deltaNodesCheckHealthEvaluation.baselineErrorCount) &&
        Objects.equals(this.baselineTotalCount, deltaNodesCheckHealthEvaluation.baselineTotalCount) &&
        Objects.equals(this.maxPercentDeltaUnhealthyNodes, deltaNodesCheckHealthEvaluation.maxPercentDeltaUnhealthyNodes) &&
        Objects.equals(this.totalCount, deltaNodesCheckHealthEvaluation.totalCount) &&
        Objects.equals(this.unhealthyEvaluations, deltaNodesCheckHealthEvaluation.unhealthyEvaluations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselineErrorCount, baselineTotalCount, maxPercentDeltaUnhealthyNodes, totalCount, unhealthyEvaluations, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeltaNodesCheckHealthEvaluation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baselineErrorCount: ").append(toIndentedString(baselineErrorCount)).append("\n");
    sb.append("    baselineTotalCount: ").append(toIndentedString(baselineTotalCount)).append("\n");
    sb.append("    maxPercentDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentDeltaUnhealthyNodes)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("Description");
    openapiFields.add("Kind");
    openapiFields.add("BaselineErrorCount");
    openapiFields.add("BaselineTotalCount");
    openapiFields.add("MaxPercentDeltaUnhealthyNodes");
    openapiFields.add("TotalCount");
    openapiFields.add("UnhealthyEvaluations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeltaNodesCheckHealthEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeltaNodesCheckHealthEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeltaNodesCheckHealthEvaluation is not found in the empty JSON string", DeltaNodesCheckHealthEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeltaNodesCheckHealthEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeltaNodesCheckHealthEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeltaNodesCheckHealthEvaluation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeltaNodesCheckHealthEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeltaNodesCheckHealthEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeltaNodesCheckHealthEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeltaNodesCheckHealthEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<DeltaNodesCheckHealthEvaluation>() {
           @Override
           public void write(JsonWriter out, DeltaNodesCheckHealthEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeltaNodesCheckHealthEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeltaNodesCheckHealthEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeltaNodesCheckHealthEvaluation
   * @throws IOException if the JSON string is invalid with respect to DeltaNodesCheckHealthEvaluation
   */
  public static DeltaNodesCheckHealthEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeltaNodesCheckHealthEvaluation.class);
  }

  /**
   * Convert an instance of DeltaNodesCheckHealthEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

