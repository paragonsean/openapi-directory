/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationTypeImageStorePath;
import org.openapitools.client.model.ApplicationTypeImageStoreVersion;
import org.openapitools.client.model.ApplicationTypeManifest;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedApplicationTypeInfoList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationTypeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getApplicationManifest
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the node. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationManifestCall(String apiVersion, String applicationTypeName, String applicationTypeVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (applicationTypeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeVersion", applicationTypeVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationManifestValidateBeforeCall(String apiVersion, String applicationTypeName, String applicationTypeVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationManifest(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling getApplicationManifest(Async)");
        }

        // verify the required parameter 'applicationTypeVersion' is set
        if (applicationTypeVersion == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeVersion' when calling getApplicationManifest(Async)");
        }

        return getApplicationManifestCall(apiVersion, applicationTypeName, applicationTypeVersion, timeout, _callback);

    }

    /**
     * Gets the manifest describing an application type.
     * Gets the manifest describing an application type. The response contains the application manifest XML as a string.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApplicationTypeManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the node. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTypeManifest getApplicationManifest(String apiVersion, String applicationTypeName, String applicationTypeVersion, Long timeout) throws ApiException {
        ApiResponse<ApplicationTypeManifest> localVarResp = getApplicationManifestWithHttpInfo(apiVersion, applicationTypeName, applicationTypeVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the manifest describing an application type.
     * Gets the manifest describing an application type. The response contains the application manifest XML as a string.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;ApplicationTypeManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the node. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTypeManifest> getApplicationManifestWithHttpInfo(String apiVersion, String applicationTypeName, String applicationTypeVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getApplicationManifestValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ApplicationTypeManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the manifest describing an application type. (asynchronously)
     * Gets the manifest describing an application type. The response contains the application manifest XML as a string.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the node. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationManifestAsync(String apiVersion, String applicationTypeName, String applicationTypeVersion, Long timeout, final ApiCallback<ApplicationTypeManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationManifestValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTypeManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationTypeInfoList
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind for application type query operations. - Default - Default value, which performs the same function as selecting \&quot;All\&quot;. The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.  (optional, default to 0)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationTypeInfoListCall(String apiVersion, Integer applicationTypeDefinitionKindFilter, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (applicationTypeDefinitionKindFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeDefinitionKindFilter", applicationTypeDefinitionKindFilter));
        }

        if (excludeApplicationParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeApplicationParameters", excludeApplicationParameters));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationTypeInfoListValidateBeforeCall(String apiVersion, Integer applicationTypeDefinitionKindFilter, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationTypeInfoList(Async)");
        }

        return getApplicationTypeInfoListCall(apiVersion, applicationTypeDefinitionKindFilter, excludeApplicationParameters, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the list of application types in the Service Fabric cluster.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind for application type query operations. - Default - Default value, which performs the same function as selecting \&quot;All\&quot;. The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.  (optional, default to 0)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedApplicationTypeInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedApplicationTypeInfoList getApplicationTypeInfoList(String apiVersion, Integer applicationTypeDefinitionKindFilter, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedApplicationTypeInfoList> localVarResp = getApplicationTypeInfoListWithHttpInfo(apiVersion, applicationTypeDefinitionKindFilter, excludeApplicationParameters, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the list of application types in the Service Fabric cluster.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind for application type query operations. - Default - Default value, which performs the same function as selecting \&quot;All\&quot;. The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.  (optional, default to 0)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedApplicationTypeInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedApplicationTypeInfoList> getApplicationTypeInfoListWithHttpInfo(String apiVersion, Integer applicationTypeDefinitionKindFilter, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getApplicationTypeInfoListValidateBeforeCall(apiVersion, applicationTypeDefinitionKindFilter, excludeApplicationParameters, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedApplicationTypeInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of application types in the Service Fabric cluster. (asynchronously)
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeDefinitionKindFilter Used to filter on ApplicationTypeDefinitionKind for application type query operations. - Default - Default value, which performs the same function as selecting \&quot;All\&quot;. The value is 0. - All - Filter that matches input with any ApplicationTypeDefinitionKind value. The value is 65535. - ServiceFabricApplicationPackage - Filter that matches input with ApplicationTypeDefinitionKind value ServiceFabricApplicationPackage. The value is 1. - Compose - Filter that matches input with ApplicationTypeDefinitionKind value Compose. The value is 2.  (optional, default to 0)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationTypeInfoListAsync(String apiVersion, Integer applicationTypeDefinitionKindFilter, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedApplicationTypeInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationTypeInfoListValidateBeforeCall(apiVersion, applicationTypeDefinitionKindFilter, excludeApplicationParameters, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedApplicationTypeInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationTypeInfoListByName
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (optional)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationTypeInfoListByNameCall(String apiVersion, String applicationTypeName, String applicationTypeVersion, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (applicationTypeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeVersion", applicationTypeVersion));
        }

        if (excludeApplicationParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeApplicationParameters", excludeApplicationParameters));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationTypeInfoListByNameValidateBeforeCall(String apiVersion, String applicationTypeName, String applicationTypeVersion, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationTypeInfoListByName(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling getApplicationTypeInfoListByName(Async)");
        }

        return getApplicationTypeInfoListByNameCall(apiVersion, applicationTypeName, applicationTypeVersion, excludeApplicationParameters, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the list of application types in the Service Fabric cluster matching exactly the specified name.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (optional)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedApplicationTypeInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedApplicationTypeInfoList getApplicationTypeInfoListByName(String apiVersion, String applicationTypeName, String applicationTypeVersion, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedApplicationTypeInfoList> localVarResp = getApplicationTypeInfoListByNameWithHttpInfo(apiVersion, applicationTypeName, applicationTypeVersion, excludeApplicationParameters, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the list of application types in the Service Fabric cluster matching exactly the specified name.
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (optional)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedApplicationTypeInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedApplicationTypeInfoList> getApplicationTypeInfoListByNameWithHttpInfo(String apiVersion, String applicationTypeName, String applicationTypeVersion, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getApplicationTypeInfoListByNameValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeVersion, excludeApplicationParameters, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedApplicationTypeInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of application types in the Service Fabric cluster matching exactly the specified name. (asynchronously)
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeVersion The version of the application type. (optional)
     * @param excludeApplicationParameters The flag that specifies whether application parameters will be excluded from the result. (optional, default to false)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of application types in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationTypeInfoListByNameAsync(String apiVersion, String applicationTypeName, String applicationTypeVersion, Boolean excludeApplicationParameters, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedApplicationTypeInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationTypeInfoListByNameValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeVersion, excludeApplicationParameters, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedApplicationTypeInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionApplicationType
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeImageStorePath The relative path for the application package in the image store specified during the prior copy operation. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful provision will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionApplicationTypeCall(String apiVersion, ApplicationTypeImageStorePath applicationTypeImageStorePath, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationTypeImageStorePath;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/$/Provision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionApplicationTypeValidateBeforeCall(String apiVersion, ApplicationTypeImageStorePath applicationTypeImageStorePath, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling provisionApplicationType(Async)");
        }

        // verify the required parameter 'applicationTypeImageStorePath' is set
        if (applicationTypeImageStorePath == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeImageStorePath' when calling provisionApplicationType(Async)");
        }

        return provisionApplicationTypeCall(apiVersion, applicationTypeImageStorePath, timeout, _callback);

    }

    /**
     * Provisions or registers a Service Fabric application type with the cluster.
     * Provisions or registers a Service Fabric application type with the cluster. This is required before any new applications can be instantiated.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeImageStorePath The relative path for the application package in the image store specified during the prior copy operation. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful provision will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void provisionApplicationType(String apiVersion, ApplicationTypeImageStorePath applicationTypeImageStorePath, Long timeout) throws ApiException {
        provisionApplicationTypeWithHttpInfo(apiVersion, applicationTypeImageStorePath, timeout);
    }

    /**
     * Provisions or registers a Service Fabric application type with the cluster.
     * Provisions or registers a Service Fabric application type with the cluster. This is required before any new applications can be instantiated.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeImageStorePath The relative path for the application package in the image store specified during the prior copy operation. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful provision will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> provisionApplicationTypeWithHttpInfo(String apiVersion, ApplicationTypeImageStorePath applicationTypeImageStorePath, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = provisionApplicationTypeValidateBeforeCall(apiVersion, applicationTypeImageStorePath, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provisions or registers a Service Fabric application type with the cluster. (asynchronously)
     * Provisions or registers a Service Fabric application type with the cluster. This is required before any new applications can be instantiated.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeImageStorePath The relative path for the application package in the image store specified during the prior copy operation. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful provision will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionApplicationTypeAsync(String apiVersion, ApplicationTypeImageStorePath applicationTypeImageStorePath, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionApplicationTypeValidateBeforeCall(apiVersion, applicationTypeImageStorePath, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unprovisionApplicationType
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeImageStoreVersion The version of the application type in the image store. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation was accepted. A successful unprovision will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprovisionApplicationTypeCall(String apiVersion, String applicationTypeName, ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationTypeImageStoreVersion;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/Unprovision"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unprovisionApplicationTypeValidateBeforeCall(String apiVersion, String applicationTypeName, ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling unprovisionApplicationType(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling unprovisionApplicationType(Async)");
        }

        // verify the required parameter 'applicationTypeImageStoreVersion' is set
        if (applicationTypeImageStoreVersion == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeImageStoreVersion' when calling unprovisionApplicationType(Async)");
        }

        return unprovisionApplicationTypeCall(apiVersion, applicationTypeName, applicationTypeImageStoreVersion, timeout, _callback);

    }

    /**
     * Removes or unregisters a Service Fabric application type from the cluster.
     * Removes or unregisters a Service Fabric application type from the cluster. This operation can only be performed if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeImageStoreVersion The version of the application type in the image store. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation was accepted. A successful unprovision will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void unprovisionApplicationType(String apiVersion, String applicationTypeName, ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion, Long timeout) throws ApiException {
        unprovisionApplicationTypeWithHttpInfo(apiVersion, applicationTypeName, applicationTypeImageStoreVersion, timeout);
    }

    /**
     * Removes or unregisters a Service Fabric application type from the cluster.
     * Removes or unregisters a Service Fabric application type from the cluster. This operation can only be performed if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeImageStoreVersion The version of the application type in the image store. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation was accepted. A successful unprovision will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unprovisionApplicationTypeWithHttpInfo(String apiVersion, String applicationTypeName, ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = unprovisionApplicationTypeValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeImageStoreVersion, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes or unregisters a Service Fabric application type from the cluster. (asynchronously)
     * Removes or unregisters a Service Fabric application type from the cluster. This operation can only be performed if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.
     * @param apiVersion The version of the API. This is a required parameter and it&#39;s value must be \&quot;6.0\&quot;. (required)
     * @param applicationTypeName The name of the application type. (required)
     * @param applicationTypeImageStoreVersion The version of the application type in the image store. (required)
     * @param timeout The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A 202 status code indicates the operation was accepted. A successful unprovision will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprovisionApplicationTypeAsync(String apiVersion, String applicationTypeName, ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unprovisionApplicationTypeValidateBeforeCall(apiVersion, applicationTypeName, applicationTypeImageStoreVersion, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
