/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides various statistics of the queue used in the service fabric replicator. Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc. Depending on the role of the replicator, the properties in this type imply different meanings. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicatorQueueStatus {
  public static final String SERIALIZED_NAME_COMMITTED_SEQUENCE_NUMBER = "CommittedSequenceNumber";
  @SerializedName(SERIALIZED_NAME_COMMITTED_SEQUENCE_NUMBER)
  private String committedSequenceNumber;

  public static final String SERIALIZED_NAME_COMPLETED_SEQUENCE_NUMBER = "CompletedSequenceNumber";
  @SerializedName(SERIALIZED_NAME_COMPLETED_SEQUENCE_NUMBER)
  private String completedSequenceNumber;

  public static final String SERIALIZED_NAME_FIRST_SEQUENCE_NUMBER = "FirstSequenceNumber";
  @SerializedName(SERIALIZED_NAME_FIRST_SEQUENCE_NUMBER)
  private String firstSequenceNumber;

  public static final String SERIALIZED_NAME_LAST_SEQUENCE_NUMBER = "LastSequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_SEQUENCE_NUMBER)
  private String lastSequenceNumber;

  public static final String SERIALIZED_NAME_QUEUE_MEMORY_SIZE = "QueueMemorySize";
  @SerializedName(SERIALIZED_NAME_QUEUE_MEMORY_SIZE)
  private String queueMemorySize;

  public static final String SERIALIZED_NAME_QUEUE_UTILIZATION_PERCENTAGE = "QueueUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_QUEUE_UTILIZATION_PERCENTAGE)
  private Integer queueUtilizationPercentage;

  public ReplicatorQueueStatus() {
  }

  public ReplicatorQueueStatus committedSequenceNumber(String committedSequenceNumber) {
    this.committedSequenceNumber = committedSequenceNumber;
    return this;
  }

  /**
   * On a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary. 
   * @return committedSequenceNumber
   */
  @javax.annotation.Nullable
  public String getCommittedSequenceNumber() {
    return committedSequenceNumber;
  }

  public void setCommittedSequenceNumber(String committedSequenceNumber) {
    this.committedSequenceNumber = committedSequenceNumber;
  }


  public ReplicatorQueueStatus completedSequenceNumber(String completedSequenceNumber) {
    this.completedSequenceNumber = completedSequenceNumber;
    return this;
  }

  /**
   * On a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state. 
   * @return completedSequenceNumber
   */
  @javax.annotation.Nullable
  public String getCompletedSequenceNumber() {
    return completedSequenceNumber;
  }

  public void setCompletedSequenceNumber(String completedSequenceNumber) {
    this.completedSequenceNumber = completedSequenceNumber;
  }


  public ReplicatorQueueStatus firstSequenceNumber(String firstSequenceNumber) {
    this.firstSequenceNumber = firstSequenceNumber;
    return this;
  }

  /**
   * On a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue. 
   * @return firstSequenceNumber
   */
  @javax.annotation.Nullable
  public String getFirstSequenceNumber() {
    return firstSequenceNumber;
  }

  public void setFirstSequenceNumber(String firstSequenceNumber) {
    this.firstSequenceNumber = firstSequenceNumber;
  }


  public ReplicatorQueueStatus lastSequenceNumber(String lastSequenceNumber) {
    this.lastSequenceNumber = lastSequenceNumber;
    return this;
  }

  /**
   * Represents the latest sequence number of the operation that is available in the queue.
   * @return lastSequenceNumber
   */
  @javax.annotation.Nullable
  public String getLastSequenceNumber() {
    return lastSequenceNumber;
  }

  public void setLastSequenceNumber(String lastSequenceNumber) {
    this.lastSequenceNumber = lastSequenceNumber;
  }


  public ReplicatorQueueStatus queueMemorySize(String queueMemorySize) {
    this.queueMemorySize = queueMemorySize;
    return this;
  }

  /**
   * Represents the virtual memory consumed by the queue in bytes.
   * @return queueMemorySize
   */
  @javax.annotation.Nullable
  public String getQueueMemorySize() {
    return queueMemorySize;
  }

  public void setQueueMemorySize(String queueMemorySize) {
    this.queueMemorySize = queueMemorySize;
  }


  public ReplicatorQueueStatus queueUtilizationPercentage(Integer queueUtilizationPercentage) {
    this.queueUtilizationPercentage = queueUtilizationPercentage;
    return this;
  }

  /**
   * Represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.
   * @return queueUtilizationPercentage
   */
  @javax.annotation.Nullable
  public Integer getQueueUtilizationPercentage() {
    return queueUtilizationPercentage;
  }

  public void setQueueUtilizationPercentage(Integer queueUtilizationPercentage) {
    this.queueUtilizationPercentage = queueUtilizationPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicatorQueueStatus replicatorQueueStatus = (ReplicatorQueueStatus) o;
    return Objects.equals(this.committedSequenceNumber, replicatorQueueStatus.committedSequenceNumber) &&
        Objects.equals(this.completedSequenceNumber, replicatorQueueStatus.completedSequenceNumber) &&
        Objects.equals(this.firstSequenceNumber, replicatorQueueStatus.firstSequenceNumber) &&
        Objects.equals(this.lastSequenceNumber, replicatorQueueStatus.lastSequenceNumber) &&
        Objects.equals(this.queueMemorySize, replicatorQueueStatus.queueMemorySize) &&
        Objects.equals(this.queueUtilizationPercentage, replicatorQueueStatus.queueUtilizationPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(committedSequenceNumber, completedSequenceNumber, firstSequenceNumber, lastSequenceNumber, queueMemorySize, queueUtilizationPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicatorQueueStatus {\n");
    sb.append("    committedSequenceNumber: ").append(toIndentedString(committedSequenceNumber)).append("\n");
    sb.append("    completedSequenceNumber: ").append(toIndentedString(completedSequenceNumber)).append("\n");
    sb.append("    firstSequenceNumber: ").append(toIndentedString(firstSequenceNumber)).append("\n");
    sb.append("    lastSequenceNumber: ").append(toIndentedString(lastSequenceNumber)).append("\n");
    sb.append("    queueMemorySize: ").append(toIndentedString(queueMemorySize)).append("\n");
    sb.append("    queueUtilizationPercentage: ").append(toIndentedString(queueUtilizationPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CommittedSequenceNumber");
    openapiFields.add("CompletedSequenceNumber");
    openapiFields.add("FirstSequenceNumber");
    openapiFields.add("LastSequenceNumber");
    openapiFields.add("QueueMemorySize");
    openapiFields.add("QueueUtilizationPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicatorQueueStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicatorQueueStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicatorQueueStatus is not found in the empty JSON string", ReplicatorQueueStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicatorQueueStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicatorQueueStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CommittedSequenceNumber") != null && !jsonObj.get("CommittedSequenceNumber").isJsonNull()) && !jsonObj.get("CommittedSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommittedSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommittedSequenceNumber").toString()));
      }
      if ((jsonObj.get("CompletedSequenceNumber") != null && !jsonObj.get("CompletedSequenceNumber").isJsonNull()) && !jsonObj.get("CompletedSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompletedSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompletedSequenceNumber").toString()));
      }
      if ((jsonObj.get("FirstSequenceNumber") != null && !jsonObj.get("FirstSequenceNumber").isJsonNull()) && !jsonObj.get("FirstSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstSequenceNumber").toString()));
      }
      if ((jsonObj.get("LastSequenceNumber") != null && !jsonObj.get("LastSequenceNumber").isJsonNull()) && !jsonObj.get("LastSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastSequenceNumber").toString()));
      }
      if ((jsonObj.get("QueueMemorySize") != null && !jsonObj.get("QueueMemorySize").isJsonNull()) && !jsonObj.get("QueueMemorySize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueueMemorySize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueueMemorySize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicatorQueueStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicatorQueueStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicatorQueueStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicatorQueueStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicatorQueueStatus>() {
           @Override
           public void write(JsonWriter out, ReplicatorQueueStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicatorQueueStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicatorQueueStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicatorQueueStatus
   * @throws IOException if the JSON string is invalid with respect to ReplicatorQueueStatus
   */
  public static ReplicatorQueueStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicatorQueueStatus.class);
  }

  /**
   * Convert an instance of ReplicatorQueueStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

