/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServicePlacementPolicyDescription;
import org.openapitools.client.model.ServicePlacementPolicyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the policy to be used for placement of a Service Fabric service where the service&#39;s Primary replicas should optimally be placed in a particular domain.  This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a service&#39;s primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicePlacementPreferPrimaryDomainPolicyDescription extends ServicePlacementPolicyDescription {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public ServicePlacementPreferPrimaryDomainPolicyDescription() {
    this.type = this.getClass().getSimpleName();
  }

  public ServicePlacementPreferPrimaryDomainPolicyDescription domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The name of the domain that should used for placement as per this policy.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePlacementPreferPrimaryDomainPolicyDescription servicePlacementPreferPrimaryDomainPolicyDescription = (ServicePlacementPreferPrimaryDomainPolicyDescription) o;
    return Objects.equals(this.domainName, servicePlacementPreferPrimaryDomainPolicyDescription.domainName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePlacementPreferPrimaryDomainPolicyDescription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("DomainName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicePlacementPreferPrimaryDomainPolicyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicePlacementPreferPrimaryDomainPolicyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicePlacementPreferPrimaryDomainPolicyDescription is not found in the empty JSON string", ServicePlacementPreferPrimaryDomainPolicyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicePlacementPreferPrimaryDomainPolicyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicePlacementPreferPrimaryDomainPolicyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServicePlacementPreferPrimaryDomainPolicyDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicePlacementPreferPrimaryDomainPolicyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicePlacementPreferPrimaryDomainPolicyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicePlacementPreferPrimaryDomainPolicyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicePlacementPreferPrimaryDomainPolicyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicePlacementPreferPrimaryDomainPolicyDescription>() {
           @Override
           public void write(JsonWriter out, ServicePlacementPreferPrimaryDomainPolicyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicePlacementPreferPrimaryDomainPolicyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicePlacementPreferPrimaryDomainPolicyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicePlacementPreferPrimaryDomainPolicyDescription
   * @throws IOException if the JSON string is invalid with respect to ServicePlacementPreferPrimaryDomainPolicyDescription
   */
  public static ServicePlacementPreferPrimaryDomainPolicyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicePlacementPreferPrimaryDomainPolicyDescription.class);
  }

  /**
   * Convert an instance of ServicePlacementPreferPrimaryDomainPolicyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

