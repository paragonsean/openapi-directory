/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The kind of Chaos event.  - Invalid - Indicates an invalid Chaos event kind. All Service Fabric enumerations have the invalid type. The valus is zero. - Started - Indicates a Chaos event that gets generated when Chaos is started. - ExecutingFaults - Indicates a Chaos event that gets generated when Chaos has decided on the faults for an iteration. This Chaos event contains the details of the faults as a list of strings. - Waiting - Indicatges a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for example, Chaos may be waiting for the on-going upgrade to finish. - ValidationFailed - Indicates a Chaos event that gets generated when the cluster entities do not become stable and healthy within ChaosParameters.MaxClusterStabilizationTimeoutInSeconds. - TestError - Indicates a Chaos event that gets generated when an unexpected event has occurred in the Chaos engine, for example, due to the cluster snapshot being inconsistent, while faulting a faultable entity Chaos found that the entity was alreay faulted. - Stopped - Indicates a Chaos event that gets generated when Chaos stops because either the user issued a stop or the time to run was up. 
 */
@JsonAdapter(ChaosEventKind.Adapter.class)
public enum ChaosEventKind {
  
  INVALID("Invalid"),
  
  STARTED("Started"),
  
  EXECUTING_FAULTS("ExecutingFaults"),
  
  WAITING("Waiting"),
  
  VALIDATION_FAILED("ValidationFailed"),
  
  TEST_ERROR("TestError"),
  
  STOPPED("Stopped");

  private String value;

  ChaosEventKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ChaosEventKind fromValue(String value) {
    for (ChaosEventKind b : ChaosEventKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ChaosEventKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final ChaosEventKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ChaosEventKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ChaosEventKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ChaosEventKind.fromValue(value);
  }
}

