/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The entity type of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc.    - Invalid - Indicates an invalid entity kind. All Service Fabric enumerations have the invalid type. The value is zero.   - Node - Indicates the entity is a Service Fabric node. The value is 1.   - Partition - Indicates the entity is a Service Fabric partition. The value is 2.   - Service - Indicates the entity is a Service Fabric service. The value is 3.   - Application - Indicates the entity is a Service Fabric application. The value is 4.   - Replica - Indicates the entity is a Service Fabric replica. The value is 5.   - DeployedApplication - Indicates the entity is a Service Fabric deployed application. The value is 6.   - DeployedServicePackage - Indicates the entity is a Service Fabric deployed service package. The value is 7.   - Cluster - Indicates the entity is a Service Fabric cluster. The value is 8. 
 */
@JsonAdapter(EntityKind.Adapter.class)
public enum EntityKind {
  
  INVALID("Invalid"),
  
  NODE("Node"),
  
  PARTITION("Partition"),
  
  SERVICE("Service"),
  
  APPLICATION("Application"),
  
  REPLICA("Replica"),
  
  DEPLOYED_APPLICATION("DeployedApplication"),
  
  DEPLOYED_SERVICE_PACKAGE("DeployedServicePackage"),
  
  CLUSTER("Cluster");

  private String value;

  EntityKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EntityKind fromValue(String value) {
    for (EntityKind b : EntityKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EntityKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final EntityKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EntityKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EntityKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EntityKind.fromValue(value);
  }
}

