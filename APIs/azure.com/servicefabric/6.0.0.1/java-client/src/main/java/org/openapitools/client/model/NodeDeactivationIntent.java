/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The intent or the reason for deactivating the node. Following are the possible values for it.    - Invalid - Indicates the node deactivation intent is invalid. All Service Fabric enumerations have the invalid type. The value is zero. This value is not used.   - Pause - Indicates that the node should be paused. The value is 1.   - Restart - Indicates that the intent is for the node to be restarted after a short period of time. Service Fabric does not restart the node, this action is done outside of Service Fabric. The value is 2.   - RemoveData - Indicates that the intent is to reimage the node. Service Fabric does not reimage the node, this action is done outside of Service Fabric. The value is 3.   - RemoveNode - Indicates that the node is being decommissioned and is not expected to return. Service Fabric does not decommission the node, this action is done outside of Service Fabric. The value is 4. 
 */
@JsonAdapter(NodeDeactivationIntent.Adapter.class)
public enum NodeDeactivationIntent {
  
  INVALID("Invalid"),
  
  PAUSE("Pause"),
  
  RESTART("Restart"),
  
  REMOVE_DATA("RemoveData"),
  
  REMOVE_NODE("RemoveNode");

  private String value;

  NodeDeactivationIntent(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NodeDeactivationIntent fromValue(String value) {
    for (NodeDeactivationIntent b : NodeDeactivationIntent.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NodeDeactivationIntent> {
    @Override
    public void write(final JsonWriter jsonWriter, final NodeDeactivationIntent enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NodeDeactivationIntent read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NodeDeactivationIntent.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NodeDeactivationIntent.fromValue(value);
  }
}

