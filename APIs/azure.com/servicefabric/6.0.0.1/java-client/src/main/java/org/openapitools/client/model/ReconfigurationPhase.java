/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The reconfiguration phase of a replica of a stateful service. Possible values are following.   - Unknown - Indicates the invalid reconfiguration phase.   - None - Specifies that there is no reconfiguration in progress.   - Phase0 - Refers to the phase where the reconfiguration is transferring data from the previous primary to the new primary.   - Phase1 - Refers to the phase where the reconfiguration is querying the replica set for the progress.   - Phase2 - Refers to the phase where the reconfiguration is ensuring that data from the current primary is present in a majority of the replica set.   - Phase3 - This phase is for internal use only.   - Phase4 - This phase is for internal use only.   - AbortPhaseZero - This phase is for internal use only. 
 */
@JsonAdapter(ReconfigurationPhase.Adapter.class)
public enum ReconfigurationPhase {
  
  UNKNOWN("Unknown"),
  
  NONE("None"),
  
  PHASE0("Phase0"),
  
  PHASE1("Phase1"),
  
  PHASE2("Phase2"),
  
  PHASE3("Phase3"),
  
  PHASE4("Phase4"),
  
  ABORT_PHASE_ZERO("AbortPhaseZero");

  private String value;

  ReconfigurationPhase(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ReconfigurationPhase fromValue(String value) {
    for (ReconfigurationPhase b : ReconfigurationPhase.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ReconfigurationPhase> {
    @Override
    public void write(final JsonWriter jsonWriter, final ReconfigurationPhase enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ReconfigurationPhase read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ReconfigurationPhase.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ReconfigurationPhase.fromValue(value);
  }
}

