/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a replica should be included as a child of a partition in the cluster health chunk. The replicas are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent partition, service and application must be included in the cluster health chunk. One filter can match zero, one or multiple replicas, depending on its properties. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaHealthStateFilter {
  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_REPLICA_OR_INSTANCE_ID_FILTER = "ReplicaOrInstanceIdFilter";
  @SerializedName(SERIALIZED_NAME_REPLICA_OR_INSTANCE_ID_FILTER)
  private String replicaOrInstanceIdFilter;

  public ReplicaHealthStateFilter() {
  }

  public ReplicaHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the replicas. It allows selecting replicas if they match the desired health states. The possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state. If not specified, default value is None, unless the replica id is specified. If the filter has default value and replica id is specified, the matching replica is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public ReplicaHealthStateFilter replicaOrInstanceIdFilter(String replicaOrInstanceIdFilter) {
    this.replicaOrInstanceIdFilter = replicaOrInstanceIdFilter;
    return this;
  }

  /**
   * Id of the stateful service replica or stateles service instance that matches the filter. The filter is applied only to the specified replica, if it exists. If the replica doesn&#39;t exist, no replica is returned in the cluster health chunk based on this filter. If the replica exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter. 
   * @return replicaOrInstanceIdFilter
   */
  @javax.annotation.Nullable
  public String getReplicaOrInstanceIdFilter() {
    return replicaOrInstanceIdFilter;
  }

  public void setReplicaOrInstanceIdFilter(String replicaOrInstanceIdFilter) {
    this.replicaOrInstanceIdFilter = replicaOrInstanceIdFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaHealthStateFilter replicaHealthStateFilter = (ReplicaHealthStateFilter) o;
    return Objects.equals(this.healthStateFilter, replicaHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.replicaOrInstanceIdFilter, replicaHealthStateFilter.replicaOrInstanceIdFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStateFilter, replicaOrInstanceIdFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaHealthStateFilter {\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    replicaOrInstanceIdFilter: ").append(toIndentedString(replicaOrInstanceIdFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthStateFilter");
    openapiFields.add("ReplicaOrInstanceIdFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaHealthStateFilter is not found in the empty JSON string", ReplicaHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ReplicaOrInstanceIdFilter") != null && !jsonObj.get("ReplicaOrInstanceIdFilter").isJsonNull()) && !jsonObj.get("ReplicaOrInstanceIdFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaOrInstanceIdFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaOrInstanceIdFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, ReplicaHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to ReplicaHealthStateFilter
   */
  public static ReplicaHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaHealthStateFilter.class);
  }

  /**
   * Convert an instance of ReplicaHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

