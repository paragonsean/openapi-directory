/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of the node. Possible values are following.    - Invalid - Indicates the node status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.   - Up - Indicates the node is up. The value is 1.   - Down - Indicates the node is down. The value is 2.   - Enabling - Indicates the node is in process of being enabled. The value is 3.   - Disabling - Indicates the node is in the process of being disabled. The value is 4.   - Disabled - Indicates the node is disabled. The value is 5.   - Unknown - Indicates the node is unknown. A node would be in Unknown state if Service Fabric does not have authoritative information about that node. This can happen if the system learns about a node at runtime.The value is 6.   - Removed - Indicates the node is removed. A node would be in Removed state if NodeStateRemoved API has been called for this node. In other words, Service Fabric has been informed that the persisted state on the node has been permanently lost. The value is 7. 
 */
@JsonAdapter(NodeStatus.Adapter.class)
public enum NodeStatus {
  
  INVALID("Invalid"),
  
  UP("Up"),
  
  DOWN("Down"),
  
  ENABLING("Enabling"),
  
  DISABLING("Disabling"),
  
  DISABLED("Disabled"),
  
  UNKNOWN("Unknown"),
  
  REMOVED("Removed");

  private String value;

  NodeStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NodeStatus fromValue(String value) {
    for (NodeStatus b : NodeStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NodeStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final NodeStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NodeStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NodeStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NodeStatus.fromValue(value);
  }
}

