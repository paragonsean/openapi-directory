/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of the application type. Possible values are following.    - Invalid - Indicates the application type status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.   - Provisioning - Indicates that the application type is being provisioned in the cluster. The value is 1.   - Available - Indicates that the application type is fully provisioned and is available for use. An application of this type and version can be created. The value is 2.   - Unprovisioning - Indicates that the application type is in process of being unprovisioned from the cluster. The value is 3.   - Failed - Indicates that the application type provisioning failed and it is unavailable for use. The failure details can be obtained from the application type information query. The failed application type information remains in the cluster until it is unprovisioned or reprovisioned successfully. The value is 4. 
 */
@JsonAdapter(ApplicationTypeStatus.Adapter.class)
public enum ApplicationTypeStatus {
  
  INVALID("Invalid"),
  
  PROVISIONING("Provisioning"),
  
  AVAILABLE("Available"),
  
  UNPROVISIONING("Unprovisioning"),
  
  FAILED("Failed");

  private String value;

  ApplicationTypeStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ApplicationTypeStatus fromValue(String value) {
    for (ApplicationTypeStatus b : ApplicationTypeStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ApplicationTypeStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final ApplicationTypeStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ApplicationTypeStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ApplicationTypeStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ApplicationTypeStatus.fromValue(value);
  }
}

