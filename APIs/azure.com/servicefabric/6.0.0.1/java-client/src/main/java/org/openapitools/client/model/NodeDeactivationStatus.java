/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of node deactivation operation. Following are the possible values.    - None - No status is associated with the task. The value is zero.   - SafetyCheckInProgress - When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure avaiablity of the service and reliability of the state. This value indicates that one or more safety checks are in progress. The value is 1.   - SafetyCheckComplete - When a node is deactivated Service Fabric performs checks to ensure that the operation is safe to proceed to ensure avaiablity of the service and reliability of the state. This value indicates that all safety checks have been completed. The value is 2.   - Completed - The task is completed. The value is 3. 
 */
@JsonAdapter(NodeDeactivationStatus.Adapter.class)
public enum NodeDeactivationStatus {
  
  NONE("None"),
  
  SAFETY_CHECK_IN_PROGRESS("SafetyCheckInProgress"),
  
  SAFETY_CHECK_COMPLETE("SafetyCheckComplete"),
  
  COMPLETED("Completed");

  private String value;

  NodeDeactivationStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NodeDeactivationStatus fromValue(String value) {
    for (NodeDeactivationStatus b : NodeDeactivationStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<NodeDeactivationStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final NodeDeactivationStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public NodeDeactivationStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return NodeDeactivationStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    NodeDeactivationStatus.fromValue(value);
  }
}

