/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityKindHealthStateCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The health statistics of an entity, returned as part of the health query result when the query description is configured to include statistics. The statistics include health state counts for all children types of the current entity. For example, for cluster, the health statistics include health state counts for nodes, applications, services, partitions, replicas, deployed applications and deployed service packages. For partition, the health statistics include health counts for replicas. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthStatistics {
  public static final String SERIALIZED_NAME_HEALTH_STATE_COUNT_LIST = "HealthStateCountList";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_COUNT_LIST)
  private List<EntityKindHealthStateCount> healthStateCountList = new ArrayList<>();

  public HealthStatistics() {
  }

  public HealthStatistics healthStateCountList(List<EntityKindHealthStateCount> healthStateCountList) {
    this.healthStateCountList = healthStateCountList;
    return this;
  }

  public HealthStatistics addHealthStateCountListItem(EntityKindHealthStateCount healthStateCountListItem) {
    if (this.healthStateCountList == null) {
      this.healthStateCountList = new ArrayList<>();
    }
    this.healthStateCountList.add(healthStateCountListItem);
    return this;
  }

  /**
   * List of health state counts per entity kind, which keeps track of how many children of the queried entity are in Ok, Warning and Error state. 
   * @return healthStateCountList
   */
  @javax.annotation.Nullable
  public List<EntityKindHealthStateCount> getHealthStateCountList() {
    return healthStateCountList;
  }

  public void setHealthStateCountList(List<EntityKindHealthStateCount> healthStateCountList) {
    this.healthStateCountList = healthStateCountList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthStatistics healthStatistics = (HealthStatistics) o;
    return Objects.equals(this.healthStateCountList, healthStatistics.healthStateCountList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStateCountList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthStatistics {\n");
    sb.append("    healthStateCountList: ").append(toIndentedString(healthStateCountList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthStateCountList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthStatistics is not found in the empty JSON string", HealthStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("HealthStateCountList") != null && !jsonObj.get("HealthStateCountList").isJsonNull()) {
        JsonArray jsonArrayhealthStateCountList = jsonObj.getAsJsonArray("HealthStateCountList");
        if (jsonArrayhealthStateCountList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HealthStateCountList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HealthStateCountList` to be an array in the JSON string but got `%s`", jsonObj.get("HealthStateCountList").toString()));
          }

          // validate the optional field `HealthStateCountList` (array)
          for (int i = 0; i < jsonArrayhealthStateCountList.size(); i++) {
            EntityKindHealthStateCount.validateJsonElement(jsonArrayhealthStateCountList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthStatistics>() {
           @Override
           public void write(JsonWriter out, HealthStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthStatistics
   * @throws IOException if the JSON string is invalid with respect to HealthStatistics
   */
  public static HealthStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthStatistics.class);
  }

  /**
   * Convert an instance of HealthStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

