/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the health state chunk of a deployed service package, which contains the service manifest name and the service package aggregated health state. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedServicePackageHealthStateChunk {
  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID = "ServicePackageActivationId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID)
  private String servicePackageActivationId;

  public DeployedServicePackageHealthStateChunk() {
  }

  public DeployedServicePackageHealthStateChunk healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public DeployedServicePackageHealthStateChunk serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * The name of the service manifest.
   * @return serviceManifestName
   */
  @javax.annotation.Nullable
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public DeployedServicePackageHealthStateChunk servicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
    return this;
  }

  /**
   * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is &#39;SharedProcess&#39; (or if it is not specified, in which case it defaults to &#39;SharedProcess&#39;), then value of ServicePackageActivationId is always an empty string. 
   * @return servicePackageActivationId
   */
  @javax.annotation.Nullable
  public String getServicePackageActivationId() {
    return servicePackageActivationId;
  }

  public void setServicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedServicePackageHealthStateChunk deployedServicePackageHealthStateChunk = (DeployedServicePackageHealthStateChunk) o;
    return Objects.equals(this.healthState, deployedServicePackageHealthStateChunk.healthState) &&
        Objects.equals(this.serviceManifestName, deployedServicePackageHealthStateChunk.serviceManifestName) &&
        Objects.equals(this.servicePackageActivationId, deployedServicePackageHealthStateChunk.servicePackageActivationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthState, serviceManifestName, servicePackageActivationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedServicePackageHealthStateChunk {\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    servicePackageActivationId: ").append(toIndentedString(servicePackageActivationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthState");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServicePackageActivationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedServicePackageHealthStateChunk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedServicePackageHealthStateChunk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedServicePackageHealthStateChunk is not found in the empty JSON string", DeployedServicePackageHealthStateChunk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedServicePackageHealthStateChunk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedServicePackageHealthStateChunk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("ServiceManifestName") != null && !jsonObj.get("ServiceManifestName").isJsonNull()) && !jsonObj.get("ServiceManifestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestName").toString()));
      }
      if ((jsonObj.get("ServicePackageActivationId") != null && !jsonObj.get("ServicePackageActivationId").isJsonNull()) && !jsonObj.get("ServicePackageActivationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServicePackageActivationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServicePackageActivationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedServicePackageHealthStateChunk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedServicePackageHealthStateChunk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedServicePackageHealthStateChunk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedServicePackageHealthStateChunk.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedServicePackageHealthStateChunk>() {
           @Override
           public void write(JsonWriter out, DeployedServicePackageHealthStateChunk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedServicePackageHealthStateChunk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedServicePackageHealthStateChunk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedServicePackageHealthStateChunk
   * @throws IOException if the JSON string is invalid with respect to DeployedServicePackageHealthStateChunk
   */
  public static DeployedServicePackageHealthStateChunk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedServicePackageHealthStateChunk.class);
  }

  /**
   * Convert an instance of DeployedServicePackageHealthStateChunk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

