/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailureAction;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for updating a rolling upgrade of application or cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollingUpgradeUpdateDescription {
  public static final String SERIALIZED_NAME_FAILURE_ACTION = "FailureAction";
  @SerializedName(SERIALIZED_NAME_FAILURE_ACTION)
  private FailureAction failureAction;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart = false;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT_IN_MILLISECONDS = "HealthCheckRetryTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT_IN_MILLISECONDS)
  private String healthCheckRetryTimeoutInMilliseconds = "PT0H10M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_MILLISECONDS = "HealthCheckStableDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_MILLISECONDS)
  private String healthCheckStableDurationInMilliseconds = "PT0H2M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_MILLISECONDS = "HealthCheckWaitDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_MILLISECONDS)
  private String healthCheckWaitDurationInMilliseconds = "0";

  public static final String SERIALIZED_NAME_REPLICA_SET_CHECK_TIMEOUT_IN_MILLISECONDS = "ReplicaSetCheckTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_REPLICA_SET_CHECK_TIMEOUT_IN_MILLISECONDS)
  private Long replicaSetCheckTimeoutInMilliseconds;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private UpgradeMode rollingUpgradeMode = UpgradeMode.UNMONITORED_AUTO;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_MILLISECONDS = "UpgradeDomainTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_MILLISECONDS)
  private String upgradeDomainTimeoutInMilliseconds = "P10675199DT02H48M05.4775807S";

  public static final String SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_MILLISECONDS = "UpgradeTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_MILLISECONDS)
  private String upgradeTimeoutInMilliseconds = "P10675199DT02H48M05.4775807S";

  public RollingUpgradeUpdateDescription() {
  }

  public RollingUpgradeUpdateDescription failureAction(FailureAction failureAction) {
    this.failureAction = failureAction;
    return this;
  }

  /**
   * Get failureAction
   * @return failureAction
   */
  @javax.annotation.Nullable
  public FailureAction getFailureAction() {
    return failureAction;
  }

  public void setFailureAction(FailureAction failureAction) {
    this.failureAction = failureAction;
  }


  public RollingUpgradeUpdateDescription forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public RollingUpgradeUpdateDescription healthCheckRetryTimeoutInMilliseconds(String healthCheckRetryTimeoutInMilliseconds) {
    this.healthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
    return this;
  }

  /**
   * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckRetryTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckRetryTimeoutInMilliseconds() {
    return healthCheckRetryTimeoutInMilliseconds;
  }

  public void setHealthCheckRetryTimeoutInMilliseconds(String healthCheckRetryTimeoutInMilliseconds) {
    this.healthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
  }


  public RollingUpgradeUpdateDescription healthCheckStableDurationInMilliseconds(String healthCheckStableDurationInMilliseconds) {
    this.healthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
    return this;
  }

  /**
   * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckStableDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckStableDurationInMilliseconds() {
    return healthCheckStableDurationInMilliseconds;
  }

  public void setHealthCheckStableDurationInMilliseconds(String healthCheckStableDurationInMilliseconds) {
    this.healthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
  }


  public RollingUpgradeUpdateDescription healthCheckWaitDurationInMilliseconds(String healthCheckWaitDurationInMilliseconds) {
    this.healthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
    return this;
  }

  /**
   * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckWaitDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckWaitDurationInMilliseconds() {
    return healthCheckWaitDurationInMilliseconds;
  }

  public void setHealthCheckWaitDurationInMilliseconds(String healthCheckWaitDurationInMilliseconds) {
    this.healthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
  }


  public RollingUpgradeUpdateDescription replicaSetCheckTimeoutInMilliseconds(Long replicaSetCheckTimeoutInMilliseconds) {
    this.replicaSetCheckTimeoutInMilliseconds = replicaSetCheckTimeoutInMilliseconds;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   * @return replicaSetCheckTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public Long getReplicaSetCheckTimeoutInMilliseconds() {
    return replicaSetCheckTimeoutInMilliseconds;
  }

  public void setReplicaSetCheckTimeoutInMilliseconds(Long replicaSetCheckTimeoutInMilliseconds) {
    this.replicaSetCheckTimeoutInMilliseconds = replicaSetCheckTimeoutInMilliseconds;
  }


  public RollingUpgradeUpdateDescription rollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nonnull
  public UpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public RollingUpgradeUpdateDescription upgradeDomainTimeoutInMilliseconds(String upgradeDomainTimeoutInMilliseconds) {
    this.upgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
    return this;
  }

  /**
   * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeDomainTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainTimeoutInMilliseconds() {
    return upgradeDomainTimeoutInMilliseconds;
  }

  public void setUpgradeDomainTimeoutInMilliseconds(String upgradeDomainTimeoutInMilliseconds) {
    this.upgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
  }


  public RollingUpgradeUpdateDescription upgradeTimeoutInMilliseconds(String upgradeTimeoutInMilliseconds) {
    this.upgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
    return this;
  }

  /**
   * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeTimeoutInMilliseconds() {
    return upgradeTimeoutInMilliseconds;
  }

  public void setUpgradeTimeoutInMilliseconds(String upgradeTimeoutInMilliseconds) {
    this.upgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollingUpgradeUpdateDescription rollingUpgradeUpdateDescription = (RollingUpgradeUpdateDescription) o;
    return Objects.equals(this.failureAction, rollingUpgradeUpdateDescription.failureAction) &&
        Objects.equals(this.forceRestart, rollingUpgradeUpdateDescription.forceRestart) &&
        Objects.equals(this.healthCheckRetryTimeoutInMilliseconds, rollingUpgradeUpdateDescription.healthCheckRetryTimeoutInMilliseconds) &&
        Objects.equals(this.healthCheckStableDurationInMilliseconds, rollingUpgradeUpdateDescription.healthCheckStableDurationInMilliseconds) &&
        Objects.equals(this.healthCheckWaitDurationInMilliseconds, rollingUpgradeUpdateDescription.healthCheckWaitDurationInMilliseconds) &&
        Objects.equals(this.replicaSetCheckTimeoutInMilliseconds, rollingUpgradeUpdateDescription.replicaSetCheckTimeoutInMilliseconds) &&
        Objects.equals(this.rollingUpgradeMode, rollingUpgradeUpdateDescription.rollingUpgradeMode) &&
        Objects.equals(this.upgradeDomainTimeoutInMilliseconds, rollingUpgradeUpdateDescription.upgradeDomainTimeoutInMilliseconds) &&
        Objects.equals(this.upgradeTimeoutInMilliseconds, rollingUpgradeUpdateDescription.upgradeTimeoutInMilliseconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureAction, forceRestart, healthCheckRetryTimeoutInMilliseconds, healthCheckStableDurationInMilliseconds, healthCheckWaitDurationInMilliseconds, replicaSetCheckTimeoutInMilliseconds, rollingUpgradeMode, upgradeDomainTimeoutInMilliseconds, upgradeTimeoutInMilliseconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollingUpgradeUpdateDescription {\n");
    sb.append("    failureAction: ").append(toIndentedString(failureAction)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    healthCheckRetryTimeoutInMilliseconds: ").append(toIndentedString(healthCheckRetryTimeoutInMilliseconds)).append("\n");
    sb.append("    healthCheckStableDurationInMilliseconds: ").append(toIndentedString(healthCheckStableDurationInMilliseconds)).append("\n");
    sb.append("    healthCheckWaitDurationInMilliseconds: ").append(toIndentedString(healthCheckWaitDurationInMilliseconds)).append("\n");
    sb.append("    replicaSetCheckTimeoutInMilliseconds: ").append(toIndentedString(replicaSetCheckTimeoutInMilliseconds)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    upgradeDomainTimeoutInMilliseconds: ").append(toIndentedString(upgradeDomainTimeoutInMilliseconds)).append("\n");
    sb.append("    upgradeTimeoutInMilliseconds: ").append(toIndentedString(upgradeTimeoutInMilliseconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FailureAction");
    openapiFields.add("ForceRestart");
    openapiFields.add("HealthCheckRetryTimeoutInMilliseconds");
    openapiFields.add("HealthCheckStableDurationInMilliseconds");
    openapiFields.add("HealthCheckWaitDurationInMilliseconds");
    openapiFields.add("ReplicaSetCheckTimeoutInMilliseconds");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("UpgradeDomainTimeoutInMilliseconds");
    openapiFields.add("UpgradeTimeoutInMilliseconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RollingUpgradeMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollingUpgradeUpdateDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollingUpgradeUpdateDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollingUpgradeUpdateDescription is not found in the empty JSON string", RollingUpgradeUpdateDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollingUpgradeUpdateDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollingUpgradeUpdateDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RollingUpgradeUpdateDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FailureAction`
      if (jsonObj.get("FailureAction") != null && !jsonObj.get("FailureAction").isJsonNull()) {
        FailureAction.validateJsonElement(jsonObj.get("FailureAction"));
      }
      if ((jsonObj.get("HealthCheckRetryTimeoutInMilliseconds") != null && !jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckRetryTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").toString()));
      }
      if ((jsonObj.get("HealthCheckStableDurationInMilliseconds") != null && !jsonObj.get("HealthCheckStableDurationInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckStableDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckStableDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckStableDurationInMilliseconds").toString()));
      }
      if ((jsonObj.get("HealthCheckWaitDurationInMilliseconds") != null && !jsonObj.get("HealthCheckWaitDurationInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckWaitDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckWaitDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckWaitDurationInMilliseconds").toString()));
      }
      // validate the required field `RollingUpgradeMode`
      UpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      if ((jsonObj.get("UpgradeDomainTimeoutInMilliseconds") != null && !jsonObj.get("UpgradeDomainTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDomainTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomainTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomainTimeoutInMilliseconds").toString()));
      }
      if ((jsonObj.get("UpgradeTimeoutInMilliseconds") != null && !jsonObj.get("UpgradeTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeTimeoutInMilliseconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollingUpgradeUpdateDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollingUpgradeUpdateDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollingUpgradeUpdateDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollingUpgradeUpdateDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<RollingUpgradeUpdateDescription>() {
           @Override
           public void write(JsonWriter out, RollingUpgradeUpdateDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollingUpgradeUpdateDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollingUpgradeUpdateDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollingUpgradeUpdateDescription
   * @throws IOException if the JSON string is invalid with respect to RollingUpgradeUpdateDescription
   */
  public static RollingUpgradeUpdateDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollingUpgradeUpdateDescription.class);
  }

  /**
   * Convert an instance of RollingUpgradeUpdateDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

