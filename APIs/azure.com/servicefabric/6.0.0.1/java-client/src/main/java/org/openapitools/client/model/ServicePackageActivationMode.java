/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The activation mode of service package to be used for a Service Fabric service. This is specified at the time of creating the Service. Possible values are following.    - SharedProcess - This is the default activation mode. With this activation mode, replicas or instances from different partition(s) of service, on a given node, will share same activation of service package on a node. The value is zero.   - ExclusiveProcess - With this activation mode, each replica or instance of service, on a given node, will have its own dedicated activation of service package on a node. The value is 1. 
 */
@JsonAdapter(ServicePackageActivationMode.Adapter.class)
public enum ServicePackageActivationMode {
  
  SHARED_PROCESS("SharedProcess"),
  
  EXCLUSIVE_PROCESS("ExclusiveProcess");

  private String value;

  ServicePackageActivationMode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ServicePackageActivationMode fromValue(String value) {
    for (ServicePackageActivationMode b : ServicePackageActivationMode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ServicePackageActivationMode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ServicePackageActivationMode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ServicePackageActivationMode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ServicePackageActivationMode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ServicePackageActivationMode.fromValue(value);
  }
}

