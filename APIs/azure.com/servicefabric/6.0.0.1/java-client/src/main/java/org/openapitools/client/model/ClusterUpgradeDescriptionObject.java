/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationHealthPolicyMapItem;
import org.openapitools.client.model.ClusterHealthPolicy;
import org.openapitools.client.model.ClusterUpgradeHealthPolicyObject;
import org.openapitools.client.model.MonitoringPolicyDescription;
import org.openapitools.client.model.UpgradeKind;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a ServiceFabric cluster upgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:33.392772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeDescriptionObject {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP = "ApplicationHealthPolicyMap";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP)
  private List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_HEALTH_POLICY = "ClusterHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HEALTH_POLICY)
  private ClusterHealthPolicy clusterHealthPolicy;

  public static final String SERIALIZED_NAME_CLUSTER_UPGRADE_HEALTH_POLICY = "ClusterUpgradeHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UPGRADE_HEALTH_POLICY)
  private ClusterUpgradeHealthPolicyObject clusterUpgradeHealthPolicy;

  public static final String SERIALIZED_NAME_CODE_VERSION = "CodeVersion";
  @SerializedName(SERIALIZED_NAME_CODE_VERSION)
  private String codeVersion;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "ConfigVersion";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private String configVersion;

  public static final String SERIALIZED_NAME_ENABLE_DELTA_HEALTH_EVALUATION = "EnableDeltaHealthEvaluation";
  @SerializedName(SERIALIZED_NAME_ENABLE_DELTA_HEALTH_EVALUATION)
  private Boolean enableDeltaHealthEvaluation;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart = false;

  public static final String SERIALIZED_NAME_MONITORING_POLICY = "MonitoringPolicy";
  @SerializedName(SERIALIZED_NAME_MONITORING_POLICY)
  private MonitoringPolicyDescription monitoringPolicy;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private UpgradeMode rollingUpgradeMode = UpgradeMode.UNMONITORED_AUTO;

  public static final String SERIALIZED_NAME_UPGRADE_KIND = "UpgradeKind";
  @SerializedName(SERIALIZED_NAME_UPGRADE_KIND)
  private UpgradeKind upgradeKind = UpgradeKind.ROLLING;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Long upgradeReplicaSetCheckTimeoutInSeconds;

  public ClusterUpgradeDescriptionObject() {
  }

  public ClusterUpgradeDescriptionObject applicationHealthPolicyMap(List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
    return this;
  }

  public ClusterUpgradeDescriptionObject addApplicationHealthPolicyMapItem(ApplicationHealthPolicyMapItem applicationHealthPolicyMapItem) {
    if (this.applicationHealthPolicyMap == null) {
      this.applicationHealthPolicyMap = new ArrayList<>();
    }
    this.applicationHealthPolicyMap.add(applicationHealthPolicyMapItem);
    return this;
  }

  /**
   * Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. If an application is not specified in the map, the application health evaluation uses the ApplicationHealthPolicy found in its application manifest or the default application health policy (if no health policy is defined in the manifest). The map is empty by default. 
   * @return applicationHealthPolicyMap
   */
  @javax.annotation.Nullable
  public List<ApplicationHealthPolicyMapItem> getApplicationHealthPolicyMap() {
    return applicationHealthPolicyMap;
  }

  public void setApplicationHealthPolicyMap(List<ApplicationHealthPolicyMapItem> applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
  }


  public ClusterUpgradeDescriptionObject clusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
    return this;
  }

  /**
   * Get clusterHealthPolicy
   * @return clusterHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterHealthPolicy getClusterHealthPolicy() {
    return clusterHealthPolicy;
  }

  public void setClusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
  }


  public ClusterUpgradeDescriptionObject clusterUpgradeHealthPolicy(ClusterUpgradeHealthPolicyObject clusterUpgradeHealthPolicy) {
    this.clusterUpgradeHealthPolicy = clusterUpgradeHealthPolicy;
    return this;
  }

  /**
   * Get clusterUpgradeHealthPolicy
   * @return clusterUpgradeHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterUpgradeHealthPolicyObject getClusterUpgradeHealthPolicy() {
    return clusterUpgradeHealthPolicy;
  }

  public void setClusterUpgradeHealthPolicy(ClusterUpgradeHealthPolicyObject clusterUpgradeHealthPolicy) {
    this.clusterUpgradeHealthPolicy = clusterUpgradeHealthPolicy;
  }


  public ClusterUpgradeDescriptionObject codeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
    return this;
  }

  /**
   * The ServiceFabric code version of the cluster.
   * @return codeVersion
   */
  @javax.annotation.Nullable
  public String getCodeVersion() {
    return codeVersion;
  }

  public void setCodeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
  }


  public ClusterUpgradeDescriptionObject configVersion(String configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * The cluster configuration version (specified in the cluster manifest).
   * @return configVersion
   */
  @javax.annotation.Nullable
  public String getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(String configVersion) {
    this.configVersion = configVersion;
  }


  public ClusterUpgradeDescriptionObject enableDeltaHealthEvaluation(Boolean enableDeltaHealthEvaluation) {
    this.enableDeltaHealthEvaluation = enableDeltaHealthEvaluation;
    return this;
  }

  /**
   * When true, enables delta health evaluation rather than absolute health evaluation after completion of each upgrade domain.
   * @return enableDeltaHealthEvaluation
   */
  @javax.annotation.Nullable
  public Boolean getEnableDeltaHealthEvaluation() {
    return enableDeltaHealthEvaluation;
  }

  public void setEnableDeltaHealthEvaluation(Boolean enableDeltaHealthEvaluation) {
    this.enableDeltaHealthEvaluation = enableDeltaHealthEvaluation;
  }


  public ClusterUpgradeDescriptionObject forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public ClusterUpgradeDescriptionObject monitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
    return this;
  }

  /**
   * Get monitoringPolicy
   * @return monitoringPolicy
   */
  @javax.annotation.Nullable
  public MonitoringPolicyDescription getMonitoringPolicy() {
    return monitoringPolicy;
  }

  public void setMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
  }


  public ClusterUpgradeDescriptionObject rollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ClusterUpgradeDescriptionObject upgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
    return this;
  }

  /**
   * Get upgradeKind
   * @return upgradeKind
   */
  @javax.annotation.Nullable
  public UpgradeKind getUpgradeKind() {
    return upgradeKind;
  }

  public void setUpgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
  }


  public ClusterUpgradeDescriptionObject upgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeDescriptionObject clusterUpgradeDescriptionObject = (ClusterUpgradeDescriptionObject) o;
    return Objects.equals(this.applicationHealthPolicyMap, clusterUpgradeDescriptionObject.applicationHealthPolicyMap) &&
        Objects.equals(this.clusterHealthPolicy, clusterUpgradeDescriptionObject.clusterHealthPolicy) &&
        Objects.equals(this.clusterUpgradeHealthPolicy, clusterUpgradeDescriptionObject.clusterUpgradeHealthPolicy) &&
        Objects.equals(this.codeVersion, clusterUpgradeDescriptionObject.codeVersion) &&
        Objects.equals(this.configVersion, clusterUpgradeDescriptionObject.configVersion) &&
        Objects.equals(this.enableDeltaHealthEvaluation, clusterUpgradeDescriptionObject.enableDeltaHealthEvaluation) &&
        Objects.equals(this.forceRestart, clusterUpgradeDescriptionObject.forceRestart) &&
        Objects.equals(this.monitoringPolicy, clusterUpgradeDescriptionObject.monitoringPolicy) &&
        Objects.equals(this.rollingUpgradeMode, clusterUpgradeDescriptionObject.rollingUpgradeMode) &&
        Objects.equals(this.upgradeKind, clusterUpgradeDescriptionObject.upgradeKind) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, clusterUpgradeDescriptionObject.upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicyMap, clusterHealthPolicy, clusterUpgradeHealthPolicy, codeVersion, configVersion, enableDeltaHealthEvaluation, forceRestart, monitoringPolicy, rollingUpgradeMode, upgradeKind, upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeDescriptionObject {\n");
    sb.append("    applicationHealthPolicyMap: ").append(toIndentedString(applicationHealthPolicyMap)).append("\n");
    sb.append("    clusterHealthPolicy: ").append(toIndentedString(clusterHealthPolicy)).append("\n");
    sb.append("    clusterUpgradeHealthPolicy: ").append(toIndentedString(clusterUpgradeHealthPolicy)).append("\n");
    sb.append("    codeVersion: ").append(toIndentedString(codeVersion)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    enableDeltaHealthEvaluation: ").append(toIndentedString(enableDeltaHealthEvaluation)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    monitoringPolicy: ").append(toIndentedString(monitoringPolicy)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    upgradeKind: ").append(toIndentedString(upgradeKind)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicyMap");
    openapiFields.add("ClusterHealthPolicy");
    openapiFields.add("ClusterUpgradeHealthPolicy");
    openapiFields.add("CodeVersion");
    openapiFields.add("ConfigVersion");
    openapiFields.add("EnableDeltaHealthEvaluation");
    openapiFields.add("ForceRestart");
    openapiFields.add("MonitoringPolicy");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("UpgradeKind");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeDescriptionObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeDescriptionObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeDescriptionObject is not found in the empty JSON string", ClusterUpgradeDescriptionObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeDescriptionObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeDescriptionObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ApplicationHealthPolicyMap") != null && !jsonObj.get("ApplicationHealthPolicyMap").isJsonNull()) {
        JsonArray jsonArrayapplicationHealthPolicyMap = jsonObj.getAsJsonArray("ApplicationHealthPolicyMap");
        if (jsonArrayapplicationHealthPolicyMap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ApplicationHealthPolicyMap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ApplicationHealthPolicyMap` to be an array in the JSON string but got `%s`", jsonObj.get("ApplicationHealthPolicyMap").toString()));
          }

          // validate the optional field `ApplicationHealthPolicyMap` (array)
          for (int i = 0; i < jsonArrayapplicationHealthPolicyMap.size(); i++) {
            ApplicationHealthPolicyMapItem.validateJsonElement(jsonArrayapplicationHealthPolicyMap.get(i));
          };
        }
      }
      // validate the optional field `ClusterHealthPolicy`
      if (jsonObj.get("ClusterHealthPolicy") != null && !jsonObj.get("ClusterHealthPolicy").isJsonNull()) {
        ClusterHealthPolicy.validateJsonElement(jsonObj.get("ClusterHealthPolicy"));
      }
      // validate the optional field `ClusterUpgradeHealthPolicy`
      if (jsonObj.get("ClusterUpgradeHealthPolicy") != null && !jsonObj.get("ClusterUpgradeHealthPolicy").isJsonNull()) {
        ClusterUpgradeHealthPolicyObject.validateJsonElement(jsonObj.get("ClusterUpgradeHealthPolicy"));
      }
      if ((jsonObj.get("CodeVersion") != null && !jsonObj.get("CodeVersion").isJsonNull()) && !jsonObj.get("CodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeVersion").toString()));
      }
      if ((jsonObj.get("ConfigVersion") != null && !jsonObj.get("ConfigVersion").isJsonNull()) && !jsonObj.get("ConfigVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigVersion").toString()));
      }
      // validate the optional field `MonitoringPolicy`
      if (jsonObj.get("MonitoringPolicy") != null && !jsonObj.get("MonitoringPolicy").isJsonNull()) {
        MonitoringPolicyDescription.validateJsonElement(jsonObj.get("MonitoringPolicy"));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        UpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      // validate the optional field `UpgradeKind`
      if (jsonObj.get("UpgradeKind") != null && !jsonObj.get("UpgradeKind").isJsonNull()) {
        UpgradeKind.validateJsonElement(jsonObj.get("UpgradeKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeDescriptionObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeDescriptionObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeDescriptionObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeDescriptionObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeDescriptionObject>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeDescriptionObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeDescriptionObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeDescriptionObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeDescriptionObject
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeDescriptionObject
   */
  public static ClusterUpgradeDescriptionObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeDescriptionObject.class);
  }

  /**
   * Convert an instance of ClusterUpgradeDescriptionObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

