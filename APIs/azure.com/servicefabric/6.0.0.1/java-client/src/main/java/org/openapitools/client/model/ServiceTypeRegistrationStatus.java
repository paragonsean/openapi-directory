/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of the service type registration on the node. Possible values are following.    - Invalid - Indicates the registration status is invalid. All Service Fabric enumerations have the invalid type. The value is zero.   - Disabled - Indicates that the service type is disabled on this node. A type gets disabled when there are too many failures of the code package hosting the service type. If the service type is disabled, new replicas of that service type will not be placed on the node until it is enabled again. The service type is enabled again after the process hosting it comes up and re-registers the type or a preconfigured time interval has passed. The value is 1.   - Enabled - Indicates that the service type is enabled on this node. Replicas of this service type can be placed on this node when the code package registeres the service type. The value is 2.   - Registered - Indicates that the sevice type is enabled and registered on the node by a code package. Replicas of this service type can now be olaced on this node. The value is 3. 
 */
@JsonAdapter(ServiceTypeRegistrationStatus.Adapter.class)
public enum ServiceTypeRegistrationStatus {
  
  INVALID("Invalid"),
  
  DISABLED("Disabled"),
  
  ENABLED("Enabled"),
  
  REGISTERED("Registered");

  private String value;

  ServiceTypeRegistrationStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ServiceTypeRegistrationStatus fromValue(String value) {
    for (ServiceTypeRegistrationStatus b : ServiceTypeRegistrationStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ServiceTypeRegistrationStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final ServiceTypeRegistrationStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ServiceTypeRegistrationStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ServiceTypeRegistrationStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ServiceTypeRegistrationStatus.fromValue(value);
  }
}

