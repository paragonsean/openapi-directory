/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the status of the code package entry point deployed on a Service Fabric node. Possible values are following.    - Invalid - Indicates status of entry point is not known or invalid. The value is 0.   - Pending - Indicates the entry point is scheduled to be started. The value is 1.   - Starting - Indicates the entry point is being started. The value is 2.   - Started - Indicates the entry point was started successfully and is running. The value is 3.   - Stopping - Indicates the entry point is being stoppped. The value is 4.   - Stopped - Indicates the entry point is not running. The value is 5. 
 */
@JsonAdapter(EntryPointStatus.Adapter.class)
public enum EntryPointStatus {
  
  INVALID("Invalid"),
  
  PENDING("Pending"),
  
  STARTING("Starting"),
  
  STARTED("Started"),
  
  STOPPING("Stopping"),
  
  STOPPED("Stopped");

  private String value;

  EntryPointStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EntryPointStatus fromValue(String value) {
    for (EntryPointStatus b : EntryPointStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EntryPointStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final EntryPointStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EntryPointStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EntryPointStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EntryPointStatus.fromValue(value);
  }
}

