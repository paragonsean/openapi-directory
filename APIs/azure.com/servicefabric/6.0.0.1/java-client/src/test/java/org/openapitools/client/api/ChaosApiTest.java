/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChaosParameters;
import org.openapitools.client.model.ChaosReport;
import org.openapitools.client.model.FabricError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChaosApi
 */
@Disabled
public class ChaosApiTest {

    private final ChaosApi api = new ChaosApi();

    /**
     * Gets the next segment of the Chaos report based on the passed-in continuation token or the passed-in time-range.
     *
     * You can either specify the ContinuationToken to get the next segment of the Chaos report or you can specify the time-range through StartTimeUtc and EndTimeUtc, but you cannot specify both the ContinuationToken and the time-range in the same call. When there are more than 100 Chaos events, the Chaos report is returned in segments where a segment contains no more than 100 Chaos events. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChaosReportTest() throws ApiException {
        String apiVersion = null;
        String continuationToken = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        ChaosReport response = api.getChaosReport(apiVersion, continuationToken, startTimeUtc, endTimeUtc, timeout);
        // TODO: test validations
    }

    /**
     * Starts Chaos in the cluster.
     *
     * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos parameters. If Chaos is already running when this call is made, the call fails with the error code FABRIC_E_CHAOS_ALREADY_RUNNING. Please refer to the article [Induce controlled Chaos in Service Fabric clusters](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-controlled-chaos) for more details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChaosTest() throws ApiException {
        String apiVersion = null;
        ChaosParameters chaosParameters = null;
        Long timeout = null;
        api.startChaos(apiVersion, chaosParameters, timeout);
        // TODO: test validations
    }

    /**
     * Stops Chaos in the cluster if it is already running, otherwise it does nothing.
     *
     * Stops Chaos from scheduling further faults; but, the in-flight faults are not affected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopChaosTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        api.stopChaos(apiVersion, timeout);
        // TODO: test validations
    }

}
