/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.ImageStoreContent;
import org.openapitools.client.model.ImageStoreCopyDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImageStoreApi
 */
@Disabled
public class ImageStoreApiTest {

    private final ImageStoreApi api = new ImageStoreApi();

    /**
     * Copies image store content internally
     *
     * Copies the image store content from the source image store relative path to the destination image store relative path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyImageStoreContentTest() throws ApiException {
        String apiVersion = null;
        ImageStoreCopyDescription imageStoreCopyDescription = null;
        Long timeout = null;
        api.copyImageStoreContent(apiVersion, imageStoreCopyDescription, timeout);
        // TODO: test validations
    }

    /**
     * Deletes existing image store content.
     *
     * Deletes existing image store content being found within the given image store relative path. This can be used to delete uploaded application packages once they are provisioned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageStoreContentTest() throws ApiException {
        String apiVersion = null;
        String contentPath = null;
        Long timeout = null;
        api.deleteImageStoreContent(apiVersion, contentPath, timeout);
        // TODO: test validations
    }

    /**
     * Gets the image store content information.
     *
     * Returns the information about the image store content at the specified contentPath relative to the root of the image store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageStoreContentTest() throws ApiException {
        String apiVersion = null;
        String contentPath = null;
        Long timeout = null;
        ImageStoreContent response = api.getImageStoreContent(apiVersion, contentPath, timeout);
        // TODO: test validations
    }

    /**
     * Gets the content information at the root of the image store.
     *
     * Returns the information about the image store content at the root of the image store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageStoreRootContentTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ImageStoreContent response = api.getImageStoreRootContent(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Uploads contents of the file to the image store.
     *
     * Uploads contents of the file to the image store. Use this API if the file is small enough to upload again if the connection fails. The file&#39;s data needs to be added to the request body. The contents will be uploaded to the specified path. Image store service uses a mark file to indicate the availability of the folder. The mark file is an empty file named \&quot;_.dir\&quot;. The mark file is generated by the image store service when all files in a folder are uploaded. When using File-by-File approach to upload application package in REST, the image store service isn&#39;t aware of the file hierarchy of the application package; you need to create a mark file per folder and upload it last, to let the image store service know that the folder is complete. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String apiVersion = null;
        String contentPath = null;
        Long timeout = null;
        api.uploadFile(apiVersion, contentPath, timeout);
        // TODO: test validations
    }

}
