/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.PagedServicePartitionInfoList;
import org.openapitools.client.model.PartitionHealth;
import org.openapitools.client.model.PartitionLoadInformation;
import org.openapitools.client.model.ServiceNameInfo;
import org.openapitools.client.model.ServicePartitionInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartitionApi
 */
@Disabled
public class PartitionApiTest {

    private final PartitionApi api = new PartitionApi();

    /**
     * Gets the health of the specified Service Fabric partition.
     *
     * Gets the health information of the specified partition. Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. If you specify a partition that does not exist in the health store, this cmdlet returns an error. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionHealthTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        Integer eventsHealthStateFilter = null;
        Integer replicasHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        PartitionHealth response = api.getPartitionHealth(apiVersion, partitionId, eventsHealthStateFilter, replicasHealthStateFilter, excludeHealthStatistics, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of the specified Service Fabric partition, by using the specified health policy.
     *
     * Gets the health information of the specified partition. If the application health policy is specified, the health evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the partition based on the health state. Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to evaluate the health. If you specify a partition that does not exist in the health store, this cmdlet returns an error. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        Integer eventsHealthStateFilter = null;
        Integer replicasHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        PartitionHealth response = api.getPartitionHealthUsingPolicy(apiVersion, partitionId, eventsHealthStateFilter, replicasHealthStateFilter, excludeHealthStatistics, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the information about a Service Fabric partition.
     *
     * The Partitions endpoint returns information about the specified partition. The response include the partition id, partitioning scheme information, keys supported by the partition, status, health and other details about the partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionInfoTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        Long timeout = null;
        ServicePartitionInfo response = api.getPartitionInfo(apiVersion, partitionId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of partitions of a Service Fabric service.
     *
     * Gets the list of partitions of a Service Fabric service. The response include the partition id, partitioning scheme information, keys supported by the partition, status, health and other details about the partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionInfoListTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        String continuationToken = null;
        Long timeout = null;
        PagedServicePartitionInfoList response = api.getPartitionInfoList(apiVersion, serviceId, continuationToken, timeout);
        // TODO: test validations
    }

    /**
     * Gets the load of the specified Service Fabric partition.
     *
     * Returns information about the specified partition. The response includes a list of load information. Each information includes load metric name, value and last reported time in UTC. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionLoadInformationTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        Long timeout = null;
        PartitionLoadInformation response = api.getPartitionLoadInformation(apiVersion, partitionId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the name of the Service Fabric service for a partition.
     *
     * The GetServiceName endpoint returns the name of the service for the specified partition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceNameInfoTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        Long timeout = null;
        ServiceNameInfo response = api.getServiceNameInfo(apiVersion, partitionId, timeout);
        // TODO: test validations
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.
     *
     * Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverAllPartitionsTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        api.recoverAllPartitions(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss.
     *
     * Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverPartitionTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        api.recoverPartition(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss.
     *
     * Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverServicePartitionsTest() throws ApiException {
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        api.recoverServicePartitions(serviceId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.
     *
     * Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss. This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverSystemPartitionsTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        api.recoverSystemPartitions(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric partition.
     *
     * Reports health state of the specified Service Fabric partition. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Partition, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetPartitionHealth and check that the report appears in the HealthEvents section. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportPartitionHealthTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportPartitionHealth(apiVersion, partitionId, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Resets the current load of a Service Fabric partition.
     *
     * Resets the current load of a Service Fabric partition to the default load for the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPartitionLoadTest() throws ApiException {
        UUID partitionId = null;
        String apiVersion = null;
        Long timeout = null;
        api.resetPartitionLoad(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

}
