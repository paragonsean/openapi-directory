/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.NodeTransitionProgress;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PartitionDataLossProgress;
import org.openapitools.client.model.PartitionQuorumLossProgress;
import org.openapitools.client.model.PartitionRestartProgress;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FaultsApi
 */
@Disabled
public class FaultsApiTest {

    private final FaultsApi api = new FaultsApi();

    /**
     * Cancels a user-induced fault operation.
     *
     * The following is a list of APIs that start fault operations that may be cancelled using CancelOperation - - StartDataLoss - StartQuorumLoss - StartPartitionRestart - StartNodeTransition  If force is false, then the specified user-induced operation will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state may be left behind.  Specifying force as true should be used with care.  Calling this API with force set to true is not allowed until this API has already been called on the same test command with force set to false first, or unless the test command already has an OperationState of OperationState.RollingBack. Clarification: OperationState.RollingBack means that the system will/is be cleaning up internal system state caused by executing the command.  It will not restore data if the test command was to cause data loss.  For example, if you call StartDataLoss then call this API, the system will only clean up internal state from running the command. It will not restore the target partition&#39;s data, if the command progressed far enough to cause data loss.  Important note:  if this API is invoked with force&#x3D;&#x3D;true, internal state may be left behind. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOperationTest() throws ApiException {
        String apiVersion = null;
        UUID operationId = null;
        Boolean force = null;
        Long timeout = null;
        api.cancelOperation(apiVersion, operationId, force, timeout);
        // TODO: test validations
    }

    /**
     * Gets the progress of a partition data loss operation started using the StartDataLoss API.
     *
     * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataLossProgressTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        Long timeout = null;
        PartitionDataLossProgress response = api.getDataLossProgress(apiVersion, serviceId, partitionId, operationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets a list of user-induced fault operations filtered by provided input.
     *
     * Gets the a list of user-induced fault operations filtered by provided input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFaultOperationListTest() throws ApiException {
        String apiVersion = null;
        Integer typeFilter = null;
        Integer stateFilter = null;
        Long timeout = null;
        List<OperationStatus> response = api.getFaultOperationList(apiVersion, typeFilter, stateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Gets the progress of an operation started using StartNodeTransition.
     *
     * Gets the progress of an operation started with StartNodeTransition using the provided OperationId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeTransitionProgressTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID operationId = null;
        Long timeout = null;
        NodeTransitionProgress response = api.getNodeTransitionProgress(apiVersion, nodeName, operationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the progress of a PartitionRestart operation started using StartPartitionRestart.
     *
     * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided OperationId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionRestartProgressTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        Long timeout = null;
        PartitionRestartProgress response = api.getPartitionRestartProgress(apiVersion, serviceId, partitionId, operationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the progress of a quorum loss operation on a partition started using the StartQuorumLoss API.
     *
     * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided OperationId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuorumLossProgressTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        Long timeout = null;
        PartitionQuorumLossProgress response = api.getQuorumLossProgress(apiVersion, serviceId, partitionId, operationId, timeout);
        // TODO: test validations
    }

    /**
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLossAsync API of the partition.
     *
     * This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition. Actual data loss will depend on the specified DataLossMode PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on the presence of in-flight replication. FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.  This API should only be called with a stateful service as the target.  Calling this API with a system service as the target is not advised.  Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only stop execution and clean up internal system state. It will not restore data if the command has progressed far enough to cause data loss.  Call the GetDataLossProgress API with the same OperationId to return information on the operation started with this API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataLossTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        String dataLossMode = null;
        Long timeout = null;
        api.startDataLoss(apiVersion, serviceId, partitionId, operationId, dataLossMode, timeout);
        // TODO: test validations
    }

    /**
     * Starts or stops a cluster node.
     *
     * Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in \&quot;Start\&quot; for the NodeTransitionType parameter. To stop a node, pass in \&quot;Stop\&quot; for the NodeTransitionType parameter.  This API starts the operation - when the API returns the node may not have finished transitioning yet. Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startNodeTransitionTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID operationId = null;
        String nodeTransitionType = null;
        String nodeInstanceId = null;
        Integer stopDurationInSeconds = null;
        Long timeout = null;
        api.startNodeTransition(apiVersion, nodeName, operationId, nodeTransitionType, nodeInstanceId, stopDurationInSeconds, timeout);
        // TODO: test validations
    }

    /**
     * This API will restart some or all replicas or instances of the specified partition.
     *
     * This API is useful for testing failover.  If used to target a stateless service partition, RestartPartitionMode must be AllReplicasOrInstances.  Call the GetPartitionRestartProgress API using the same OperationId to get the progress. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPartitionRestartTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        String restartPartitionMode = null;
        Long timeout = null;
        api.startPartitionRestart(apiVersion, serviceId, partitionId, operationId, restartPartitionMode, timeout);
        // TODO: test validations
    }

    /**
     * Induces quorum loss for a given stateful service partition.
     *
     * Induces quorum loss for a given stateful service partition.  This API is useful for a temporary quorum loss situation on your service.  Call the GetQuorumLossProgress API with the same OperationId to return information on the operation started with this API.  This can only be called on stateful persisted (HasPersistedState&#x3D;&#x3D;true) services.  Do not use this API on stateless services or stateful in-memory only services. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startQuorumLossTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        UUID partitionId = null;
        UUID operationId = null;
        String quorumLossMode = null;
        Integer quorumLossDuration = null;
        Long timeout = null;
        api.startQuorumLoss(apiVersion, serviceId, partitionId, operationId, quorumLossMode, quorumLossDuration, timeout);
        // TODO: test validations
    }

}
