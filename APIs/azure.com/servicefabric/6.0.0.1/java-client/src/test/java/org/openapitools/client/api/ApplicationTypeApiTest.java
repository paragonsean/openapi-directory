/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationTypeImageStorePath;
import org.openapitools.client.model.ApplicationTypeImageStoreVersion;
import org.openapitools.client.model.ApplicationTypeManifest;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedApplicationTypeInfoList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationTypeApi
 */
@Disabled
public class ApplicationTypeApiTest {

    private final ApplicationTypeApi api = new ApplicationTypeApi();

    /**
     * Gets the manifest describing an application type.
     *
     * Gets the manifest describing an application type. The response contains the application manifest XML as a string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationManifestTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        Long timeout = null;
        ApplicationTypeManifest response = api.getApplicationManifest(apiVersion, applicationTypeName, applicationTypeVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of application types in the Service Fabric cluster.
     *
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. Each version of an application type is returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTypeInfoListTest() throws ApiException {
        String apiVersion = null;
        Integer applicationTypeDefinitionKindFilter = null;
        Boolean excludeApplicationParameters = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedApplicationTypeInfoList response = api.getApplicationTypeInfoList(apiVersion, applicationTypeDefinitionKindFilter, excludeApplicationParameters, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of application types in the Service Fabric cluster matching exactly the specified name.
     *
     * Returns the information about the application types that are provisioned or in the process of being provisioned in the Service Fabric cluster. These results are of application types whose name match exactly the one specified as the parameter, and which comply with the given query parameters. All versions of the application type matching the application type name are returned, with each version returned as one application type. The response includes the name, version, status and other details about the application type. This is a paged query, meaning that if not all of the application types fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. For example, if there are 10 application types but a page only fits the first 3 application types, or if max results is set to 3, then 3 is returned. To access the rest of the results, retrieve subsequent pages by using the returned continuation token in the next query. An empty continuation token is returned if there are no subsequent pages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTypeInfoListByNameTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        Boolean excludeApplicationParameters = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedApplicationTypeInfoList response = api.getApplicationTypeInfoListByName(apiVersion, applicationTypeName, applicationTypeVersion, excludeApplicationParameters, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Provisions or registers a Service Fabric application type with the cluster.
     *
     * Provisions or registers a Service Fabric application type with the cluster. This is required before any new applications can be instantiated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionApplicationTypeTest() throws ApiException {
        String apiVersion = null;
        ApplicationTypeImageStorePath applicationTypeImageStorePath = null;
        Long timeout = null;
        api.provisionApplicationType(apiVersion, applicationTypeImageStorePath, timeout);
        // TODO: test validations
    }

    /**
     * Removes or unregisters a Service Fabric application type from the cluster.
     *
     * Removes or unregisters a Service Fabric application type from the cluster. This operation can only be performed if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unprovisionApplicationTypeTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        ApplicationTypeImageStoreVersion applicationTypeImageStoreVersion = null;
        Long timeout = null;
        api.unprovisionApplicationType(apiVersion, applicationTypeName, applicationTypeImageStoreVersion, timeout);
        // TODO: test validations
    }

}
