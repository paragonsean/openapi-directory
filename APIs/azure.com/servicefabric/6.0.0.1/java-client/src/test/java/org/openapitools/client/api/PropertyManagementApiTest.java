/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.FailedPropertyBatchInfo;
import org.openapitools.client.model.NameDescription;
import org.openapitools.client.model.PagedPropertyInfoList;
import org.openapitools.client.model.PagedSubNameInfoList;
import org.openapitools.client.model.PropertyBatchDescriptionList;
import org.openapitools.client.model.PropertyDescription;
import org.openapitools.client.model.PropertyInfo;
import org.openapitools.client.model.SuccessfulPropertyBatchInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertyManagementApi
 */
@Disabled
public class PropertyManagementApiTest {

    private final PropertyManagementApi api = new PropertyManagementApi();

    /**
     * Creates a Service Fabric name.
     *
     * Creates the specified Service Fabric name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNameTest() throws ApiException {
        String apiVersion = null;
        NameDescription nameDescription = null;
        Long timeout = null;
        api.createName(apiVersion, nameDescription, timeout);
        // TODO: test validations
    }

    /**
     * Deletes a Service Fabric name.
     *
     * Deletes the specified Service Fabric name. A name must be created before it can be deleted. Deleting a name with child properties will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNameTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        Long timeout = null;
        api.deleteName(apiVersion, nameId, timeout);
        // TODO: test validations
    }

    /**
     * Deletes the specified Service Fabric property.
     *
     * Deletes the specified Service Fabric property under a given name. A property must be created before it can be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        String propertyName = null;
        Long timeout = null;
        api.deleteProperty(apiVersion, nameId, propertyName, timeout);
        // TODO: test validations
    }

    /**
     * Returns whether the Service Fabric name exists.
     *
     * Returns whether the specified Service Fabric name exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNameExistsInfoTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        Long timeout = null;
        api.getNameExistsInfo(apiVersion, nameId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the specified Service Fabric property.
     *
     * Gets the specified Service Fabric property under a given name. This will always return both value and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPropertyInfoTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        String propertyName = null;
        Long timeout = null;
        PropertyInfo response = api.getPropertyInfo(apiVersion, nameId, propertyName, timeout);
        // TODO: test validations
    }

    /**
     * Gets information on all Service Fabric properties under a given name.
     *
     * Gets information on all Service Fabric properties under a given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPropertyInfoListTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        Boolean includeValues = null;
        String continuationToken = null;
        Long timeout = null;
        PagedPropertyInfoList response = api.getPropertyInfoList(apiVersion, nameId, includeValues, continuationToken, timeout);
        // TODO: test validations
    }

    /**
     * Enumerates all the Service Fabric names under a given name.
     *
     * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page. Querying a name that doesn&#39;t exist will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubNameInfoListTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        Boolean recursive = null;
        String continuationToken = null;
        Long timeout = null;
        PagedSubNameInfoList response = api.getSubNameInfoList(apiVersion, nameId, recursive, continuationToken, timeout);
        // TODO: test validations
    }

    /**
     * Creates or updates a Service Fabric property.
     *
     * Creates or updates the specified Service Fabric property under a given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPropertyTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        PropertyDescription propertyDescription = null;
        Long timeout = null;
        api.putProperty(apiVersion, nameId, propertyDescription, timeout);
        // TODO: test validations
    }

    /**
     * Submits a property batch.
     *
     * Submits a batch of property operations. Either all or none of the operations will be committed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitPropertyBatchTest() throws ApiException {
        String apiVersion = null;
        String nameId = null;
        PropertyBatchDescriptionList propertyBatchDescriptionList = null;
        Long timeout = null;
        SuccessfulPropertyBatchInfo response = api.submitPropertyBatch(apiVersion, nameId, propertyBatchDescriptionList, timeout);
        // TODO: test validations
    }

}
