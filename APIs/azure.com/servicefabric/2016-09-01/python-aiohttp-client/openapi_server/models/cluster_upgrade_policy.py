# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_health_policy import ClusterHealthPolicy
from openapi_server.models.cluster_upgrade_delta_health_policy import ClusterUpgradeDeltaHealthPolicy
from openapi_server import util


class ClusterUpgradePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delta_health_policy: ClusterUpgradeDeltaHealthPolicy=None, force_restart: bool=None, health_check_retry_timeout: str=None, health_check_stable_duration: str=None, health_check_wait_duration: str=None, health_policy: ClusterHealthPolicy=None, override_user_upgrade_policy: bool=None, upgrade_domain_timeout: str=None, upgrade_replica_set_check_timeout: str=None, upgrade_timeout: str=None):
        """ClusterUpgradePolicy - a model defined in OpenAPI

        :param delta_health_policy: The delta_health_policy of this ClusterUpgradePolicy.
        :param force_restart: The force_restart of this ClusterUpgradePolicy.
        :param health_check_retry_timeout: The health_check_retry_timeout of this ClusterUpgradePolicy.
        :param health_check_stable_duration: The health_check_stable_duration of this ClusterUpgradePolicy.
        :param health_check_wait_duration: The health_check_wait_duration of this ClusterUpgradePolicy.
        :param health_policy: The health_policy of this ClusterUpgradePolicy.
        :param override_user_upgrade_policy: The override_user_upgrade_policy of this ClusterUpgradePolicy.
        :param upgrade_domain_timeout: The upgrade_domain_timeout of this ClusterUpgradePolicy.
        :param upgrade_replica_set_check_timeout: The upgrade_replica_set_check_timeout of this ClusterUpgradePolicy.
        :param upgrade_timeout: The upgrade_timeout of this ClusterUpgradePolicy.
        """
        self.openapi_types = {
            'delta_health_policy': ClusterUpgradeDeltaHealthPolicy,
            'force_restart': bool,
            'health_check_retry_timeout': str,
            'health_check_stable_duration': str,
            'health_check_wait_duration': str,
            'health_policy': ClusterHealthPolicy,
            'override_user_upgrade_policy': bool,
            'upgrade_domain_timeout': str,
            'upgrade_replica_set_check_timeout': str,
            'upgrade_timeout': str
        }

        self.attribute_map = {
            'delta_health_policy': 'deltaHealthPolicy',
            'force_restart': 'forceRestart',
            'health_check_retry_timeout': 'healthCheckRetryTimeout',
            'health_check_stable_duration': 'healthCheckStableDuration',
            'health_check_wait_duration': 'healthCheckWaitDuration',
            'health_policy': 'healthPolicy',
            'override_user_upgrade_policy': 'overrideUserUpgradePolicy',
            'upgrade_domain_timeout': 'upgradeDomainTimeout',
            'upgrade_replica_set_check_timeout': 'upgradeReplicaSetCheckTimeout',
            'upgrade_timeout': 'upgradeTimeout'
        }

        self._delta_health_policy = delta_health_policy
        self._force_restart = force_restart
        self._health_check_retry_timeout = health_check_retry_timeout
        self._health_check_stable_duration = health_check_stable_duration
        self._health_check_wait_duration = health_check_wait_duration
        self._health_policy = health_policy
        self._override_user_upgrade_policy = override_user_upgrade_policy
        self._upgrade_domain_timeout = upgrade_domain_timeout
        self._upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout
        self._upgrade_timeout = upgrade_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradePolicy of this ClusterUpgradePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delta_health_policy(self):
        """Gets the delta_health_policy of this ClusterUpgradePolicy.


        :return: The delta_health_policy of this ClusterUpgradePolicy.
        :rtype: ClusterUpgradeDeltaHealthPolicy
        """
        return self._delta_health_policy

    @delta_health_policy.setter
    def delta_health_policy(self, delta_health_policy):
        """Sets the delta_health_policy of this ClusterUpgradePolicy.


        :param delta_health_policy: The delta_health_policy of this ClusterUpgradePolicy.
        :type delta_health_policy: ClusterUpgradeDeltaHealthPolicy
        """

        self._delta_health_policy = delta_health_policy

    @property
    def force_restart(self):
        """Gets the force_restart of this ClusterUpgradePolicy.

        Force node to restart or not

        :return: The force_restart of this ClusterUpgradePolicy.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this ClusterUpgradePolicy.

        Force node to restart or not

        :param force_restart: The force_restart of this ClusterUpgradePolicy.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def health_check_retry_timeout(self):
        """Gets the health_check_retry_timeout of this ClusterUpgradePolicy.

        The length of time that health checks can fail continuously,it represents .Net TimeSpan

        :return: The health_check_retry_timeout of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._health_check_retry_timeout

    @health_check_retry_timeout.setter
    def health_check_retry_timeout(self, health_check_retry_timeout):
        """Sets the health_check_retry_timeout of this ClusterUpgradePolicy.

        The length of time that health checks can fail continuously,it represents .Net TimeSpan

        :param health_check_retry_timeout: The health_check_retry_timeout of this ClusterUpgradePolicy.
        :type health_check_retry_timeout: str
        """
        if health_check_retry_timeout is None:
            raise ValueError("Invalid value for `health_check_retry_timeout`, must not be `None`")

        self._health_check_retry_timeout = health_check_retry_timeout

    @property
    def health_check_stable_duration(self):
        """Gets the health_check_stable_duration of this ClusterUpgradePolicy.

        The length of time that health checks must pass continuously,it represents .Net TimeSpan

        :return: The health_check_stable_duration of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._health_check_stable_duration

    @health_check_stable_duration.setter
    def health_check_stable_duration(self, health_check_stable_duration):
        """Sets the health_check_stable_duration of this ClusterUpgradePolicy.

        The length of time that health checks must pass continuously,it represents .Net TimeSpan

        :param health_check_stable_duration: The health_check_stable_duration of this ClusterUpgradePolicy.
        :type health_check_stable_duration: str
        """
        if health_check_stable_duration is None:
            raise ValueError("Invalid value for `health_check_stable_duration`, must not be `None`")

        self._health_check_stable_duration = health_check_stable_duration

    @property
    def health_check_wait_duration(self):
        """Gets the health_check_wait_duration of this ClusterUpgradePolicy.

        The length of time to wait after completing an upgrade domain before performing health checks, it represents .Net TimeSpan

        :return: The health_check_wait_duration of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._health_check_wait_duration

    @health_check_wait_duration.setter
    def health_check_wait_duration(self, health_check_wait_duration):
        """Sets the health_check_wait_duration of this ClusterUpgradePolicy.

        The length of time to wait after completing an upgrade domain before performing health checks, it represents .Net TimeSpan

        :param health_check_wait_duration: The health_check_wait_duration of this ClusterUpgradePolicy.
        :type health_check_wait_duration: str
        """
        if health_check_wait_duration is None:
            raise ValueError("Invalid value for `health_check_wait_duration`, must not be `None`")

        self._health_check_wait_duration = health_check_wait_duration

    @property
    def health_policy(self):
        """Gets the health_policy of this ClusterUpgradePolicy.


        :return: The health_policy of this ClusterUpgradePolicy.
        :rtype: ClusterHealthPolicy
        """
        return self._health_policy

    @health_policy.setter
    def health_policy(self, health_policy):
        """Sets the health_policy of this ClusterUpgradePolicy.


        :param health_policy: The health_policy of this ClusterUpgradePolicy.
        :type health_policy: ClusterHealthPolicy
        """
        if health_policy is None:
            raise ValueError("Invalid value for `health_policy`, must not be `None`")

        self._health_policy = health_policy

    @property
    def override_user_upgrade_policy(self):
        """Gets the override_user_upgrade_policy of this ClusterUpgradePolicy.

        Use the user defined upgrade policy or not

        :return: The override_user_upgrade_policy of this ClusterUpgradePolicy.
        :rtype: bool
        """
        return self._override_user_upgrade_policy

    @override_user_upgrade_policy.setter
    def override_user_upgrade_policy(self, override_user_upgrade_policy):
        """Sets the override_user_upgrade_policy of this ClusterUpgradePolicy.

        Use the user defined upgrade policy or not

        :param override_user_upgrade_policy: The override_user_upgrade_policy of this ClusterUpgradePolicy.
        :type override_user_upgrade_policy: bool
        """

        self._override_user_upgrade_policy = override_user_upgrade_policy

    @property
    def upgrade_domain_timeout(self):
        """Gets the upgrade_domain_timeout of this ClusterUpgradePolicy.

        The timeout for any upgrade domain,it represents .Net TimeSpan

        :return: The upgrade_domain_timeout of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._upgrade_domain_timeout

    @upgrade_domain_timeout.setter
    def upgrade_domain_timeout(self, upgrade_domain_timeout):
        """Sets the upgrade_domain_timeout of this ClusterUpgradePolicy.

        The timeout for any upgrade domain,it represents .Net TimeSpan

        :param upgrade_domain_timeout: The upgrade_domain_timeout of this ClusterUpgradePolicy.
        :type upgrade_domain_timeout: str
        """
        if upgrade_domain_timeout is None:
            raise ValueError("Invalid value for `upgrade_domain_timeout`, must not be `None`")

        self._upgrade_domain_timeout = upgrade_domain_timeout

    @property
    def upgrade_replica_set_check_timeout(self):
        """Gets the upgrade_replica_set_check_timeout of this ClusterUpgradePolicy.

        Timeout for replica set upgrade to complete,it represents .Net TimeSpan

        :return: The upgrade_replica_set_check_timeout of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._upgrade_replica_set_check_timeout

    @upgrade_replica_set_check_timeout.setter
    def upgrade_replica_set_check_timeout(self, upgrade_replica_set_check_timeout):
        """Sets the upgrade_replica_set_check_timeout of this ClusterUpgradePolicy.

        Timeout for replica set upgrade to complete,it represents .Net TimeSpan

        :param upgrade_replica_set_check_timeout: The upgrade_replica_set_check_timeout of this ClusterUpgradePolicy.
        :type upgrade_replica_set_check_timeout: str
        """
        if upgrade_replica_set_check_timeout is None:
            raise ValueError("Invalid value for `upgrade_replica_set_check_timeout`, must not be `None`")

        self._upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout

    @property
    def upgrade_timeout(self):
        """Gets the upgrade_timeout of this ClusterUpgradePolicy.

        The upgrade timeout,it represents .Net TimeSpan

        :return: The upgrade_timeout of this ClusterUpgradePolicy.
        :rtype: str
        """
        return self._upgrade_timeout

    @upgrade_timeout.setter
    def upgrade_timeout(self, upgrade_timeout):
        """Sets the upgrade_timeout of this ClusterUpgradePolicy.

        The upgrade timeout,it represents .Net TimeSpan

        :param upgrade_timeout: The upgrade_timeout of this ClusterUpgradePolicy.
        :type upgrade_timeout: str
        """
        if upgrade_timeout is None:
            raise ValueError("Invalid value for `upgrade_timeout`, must not be `None`")

        self._upgrade_timeout = upgrade_timeout
