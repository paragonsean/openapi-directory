# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_range_description import EndpointRangeDescription
from openapi_server import util


class NodeTypeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_ports: EndpointRangeDescription=None, capacities: Dict[str, str]=None, client_connection_endpoint_port: int=None, durability_level: str=None, ephemeral_ports: EndpointRangeDescription=None, http_gateway_endpoint_port: int=None, is_primary: bool=None, name: str=None, placement_properties: Dict[str, str]=None, reverse_proxy_endpoint_port: int=None, vm_instance_count: int=None):
        """NodeTypeDescription - a model defined in OpenAPI

        :param application_ports: The application_ports of this NodeTypeDescription.
        :param capacities: The capacities of this NodeTypeDescription.
        :param client_connection_endpoint_port: The client_connection_endpoint_port of this NodeTypeDescription.
        :param durability_level: The durability_level of this NodeTypeDescription.
        :param ephemeral_ports: The ephemeral_ports of this NodeTypeDescription.
        :param http_gateway_endpoint_port: The http_gateway_endpoint_port of this NodeTypeDescription.
        :param is_primary: The is_primary of this NodeTypeDescription.
        :param name: The name of this NodeTypeDescription.
        :param placement_properties: The placement_properties of this NodeTypeDescription.
        :param reverse_proxy_endpoint_port: The reverse_proxy_endpoint_port of this NodeTypeDescription.
        :param vm_instance_count: The vm_instance_count of this NodeTypeDescription.
        """
        self.openapi_types = {
            'application_ports': EndpointRangeDescription,
            'capacities': Dict[str, str],
            'client_connection_endpoint_port': int,
            'durability_level': str,
            'ephemeral_ports': EndpointRangeDescription,
            'http_gateway_endpoint_port': int,
            'is_primary': bool,
            'name': str,
            'placement_properties': Dict[str, str],
            'reverse_proxy_endpoint_port': int,
            'vm_instance_count': int
        }

        self.attribute_map = {
            'application_ports': 'applicationPorts',
            'capacities': 'capacities',
            'client_connection_endpoint_port': 'clientConnectionEndpointPort',
            'durability_level': 'durabilityLevel',
            'ephemeral_ports': 'ephemeralPorts',
            'http_gateway_endpoint_port': 'httpGatewayEndpointPort',
            'is_primary': 'isPrimary',
            'name': 'name',
            'placement_properties': 'placementProperties',
            'reverse_proxy_endpoint_port': 'reverseProxyEndpointPort',
            'vm_instance_count': 'vmInstanceCount'
        }

        self._application_ports = application_ports
        self._capacities = capacities
        self._client_connection_endpoint_port = client_connection_endpoint_port
        self._durability_level = durability_level
        self._ephemeral_ports = ephemeral_ports
        self._http_gateway_endpoint_port = http_gateway_endpoint_port
        self._is_primary = is_primary
        self._name = name
        self._placement_properties = placement_properties
        self._reverse_proxy_endpoint_port = reverse_proxy_endpoint_port
        self._vm_instance_count = vm_instance_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeTypeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeTypeDescription of this NodeTypeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_ports(self):
        """Gets the application_ports of this NodeTypeDescription.


        :return: The application_ports of this NodeTypeDescription.
        :rtype: EndpointRangeDescription
        """
        return self._application_ports

    @application_ports.setter
    def application_ports(self, application_ports):
        """Sets the application_ports of this NodeTypeDescription.


        :param application_ports: The application_ports of this NodeTypeDescription.
        :type application_ports: EndpointRangeDescription
        """

        self._application_ports = application_ports

    @property
    def capacities(self):
        """Gets the capacities of this NodeTypeDescription.

        The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much of a resource a node has

        :return: The capacities of this NodeTypeDescription.
        :rtype: Dict[str, str]
        """
        return self._capacities

    @capacities.setter
    def capacities(self, capacities):
        """Sets the capacities of this NodeTypeDescription.

        The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much of a resource a node has

        :param capacities: The capacities of this NodeTypeDescription.
        :type capacities: Dict[str, str]
        """

        self._capacities = capacities

    @property
    def client_connection_endpoint_port(self):
        """Gets the client_connection_endpoint_port of this NodeTypeDescription.

        The TCP cluster management endpoint port

        :return: The client_connection_endpoint_port of this NodeTypeDescription.
        :rtype: int
        """
        return self._client_connection_endpoint_port

    @client_connection_endpoint_port.setter
    def client_connection_endpoint_port(self, client_connection_endpoint_port):
        """Sets the client_connection_endpoint_port of this NodeTypeDescription.

        The TCP cluster management endpoint port

        :param client_connection_endpoint_port: The client_connection_endpoint_port of this NodeTypeDescription.
        :type client_connection_endpoint_port: int
        """
        if client_connection_endpoint_port is None:
            raise ValueError("Invalid value for `client_connection_endpoint_port`, must not be `None`")

        self._client_connection_endpoint_port = client_connection_endpoint_port

    @property
    def durability_level(self):
        """Gets the durability_level of this NodeTypeDescription.

        Node type durability Level

        :return: The durability_level of this NodeTypeDescription.
        :rtype: str
        """
        return self._durability_level

    @durability_level.setter
    def durability_level(self, durability_level):
        """Sets the durability_level of this NodeTypeDescription.

        Node type durability Level

        :param durability_level: The durability_level of this NodeTypeDescription.
        :type durability_level: str
        """
        allowed_values = ["Bronze", "Silver", "Gold"]  # noqa: E501
        if durability_level not in allowed_values:
            raise ValueError(
                "Invalid value for `durability_level` ({0}), must be one of {1}"
                .format(durability_level, allowed_values)
            )

        self._durability_level = durability_level

    @property
    def ephemeral_ports(self):
        """Gets the ephemeral_ports of this NodeTypeDescription.


        :return: The ephemeral_ports of this NodeTypeDescription.
        :rtype: EndpointRangeDescription
        """
        return self._ephemeral_ports

    @ephemeral_ports.setter
    def ephemeral_ports(self, ephemeral_ports):
        """Sets the ephemeral_ports of this NodeTypeDescription.


        :param ephemeral_ports: The ephemeral_ports of this NodeTypeDescription.
        :type ephemeral_ports: EndpointRangeDescription
        """

        self._ephemeral_ports = ephemeral_ports

    @property
    def http_gateway_endpoint_port(self):
        """Gets the http_gateway_endpoint_port of this NodeTypeDescription.

        The HTTP cluster management endpoint port

        :return: The http_gateway_endpoint_port of this NodeTypeDescription.
        :rtype: int
        """
        return self._http_gateway_endpoint_port

    @http_gateway_endpoint_port.setter
    def http_gateway_endpoint_port(self, http_gateway_endpoint_port):
        """Sets the http_gateway_endpoint_port of this NodeTypeDescription.

        The HTTP cluster management endpoint port

        :param http_gateway_endpoint_port: The http_gateway_endpoint_port of this NodeTypeDescription.
        :type http_gateway_endpoint_port: int
        """
        if http_gateway_endpoint_port is None:
            raise ValueError("Invalid value for `http_gateway_endpoint_port`, must not be `None`")

        self._http_gateway_endpoint_port = http_gateway_endpoint_port

    @property
    def is_primary(self):
        """Gets the is_primary of this NodeTypeDescription.

        Mark this as the primary node type

        :return: The is_primary of this NodeTypeDescription.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this NodeTypeDescription.

        Mark this as the primary node type

        :param is_primary: The is_primary of this NodeTypeDescription.
        :type is_primary: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")

        self._is_primary = is_primary

    @property
    def name(self):
        """Gets the name of this NodeTypeDescription.

        Name of the node type

        :return: The name of this NodeTypeDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeTypeDescription.

        Name of the node type

        :param name: The name of this NodeTypeDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def placement_properties(self):
        """Gets the placement_properties of this NodeTypeDescription.

        The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run

        :return: The placement_properties of this NodeTypeDescription.
        :rtype: Dict[str, str]
        """
        return self._placement_properties

    @placement_properties.setter
    def placement_properties(self, placement_properties):
        """Sets the placement_properties of this NodeTypeDescription.

        The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run

        :param placement_properties: The placement_properties of this NodeTypeDescription.
        :type placement_properties: Dict[str, str]
        """

        self._placement_properties = placement_properties

    @property
    def reverse_proxy_endpoint_port(self):
        """Gets the reverse_proxy_endpoint_port of this NodeTypeDescription.

        Endpoint used by reverse proxy

        :return: The reverse_proxy_endpoint_port of this NodeTypeDescription.
        :rtype: int
        """
        return self._reverse_proxy_endpoint_port

    @reverse_proxy_endpoint_port.setter
    def reverse_proxy_endpoint_port(self, reverse_proxy_endpoint_port):
        """Sets the reverse_proxy_endpoint_port of this NodeTypeDescription.

        Endpoint used by reverse proxy

        :param reverse_proxy_endpoint_port: The reverse_proxy_endpoint_port of this NodeTypeDescription.
        :type reverse_proxy_endpoint_port: int
        """

        self._reverse_proxy_endpoint_port = reverse_proxy_endpoint_port

    @property
    def vm_instance_count(self):
        """Gets the vm_instance_count of this NodeTypeDescription.

        The number of node instances in the node type

        :return: The vm_instance_count of this NodeTypeDescription.
        :rtype: int
        """
        return self._vm_instance_count

    @vm_instance_count.setter
    def vm_instance_count(self, vm_instance_count):
        """Sets the vm_instance_count of this NodeTypeDescription.

        The number of node instances in the node type

        :param vm_instance_count: The vm_instance_count of this NodeTypeDescription.
        :type vm_instance_count: int
        """
        if vm_instance_count is None:
            raise ValueError("Invalid value for `vm_instance_count`, must not be `None`")
        if vm_instance_count is not None and vm_instance_count > 2147483647:
            raise ValueError("Invalid value for `vm_instance_count`, must be a value less than or equal to `2147483647`")
        if vm_instance_count is not None and vm_instance_count < 1:
            raise ValueError("Invalid value for `vm_instance_count`, must be a value greater than or equal to `1`")

        self._vm_instance_count = vm_instance_count
