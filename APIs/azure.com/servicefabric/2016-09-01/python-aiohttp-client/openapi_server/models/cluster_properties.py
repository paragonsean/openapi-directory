# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_active_directory import AzureActiveDirectory
from openapi_server.models.certificate_description import CertificateDescription
from openapi_server.models.client_certificate_common_name import ClientCertificateCommonName
from openapi_server.models.client_certificate_thumbprint import ClientCertificateThumbprint
from openapi_server.models.cluster_upgrade_policy import ClusterUpgradePolicy
from openapi_server.models.cluster_version_details import ClusterVersionDetails
from openapi_server.models.diagnostics_storage_account_config import DiagnosticsStorageAccountConfig
from openapi_server.models.node_type_description import NodeTypeDescription
from openapi_server.models.settings_section_description import SettingsSectionDescription
from openapi_server import util


class ClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_cluster_versions: List[ClusterVersionDetails]=None, azure_active_directory: AzureActiveDirectory=None, certificate: CertificateDescription=None, client_certificate_common_names: List[ClientCertificateCommonName]=None, client_certificate_thumbprints: List[ClientCertificateThumbprint]=None, cluster_code_version: str=None, cluster_endpoint: str=None, cluster_id: str=None, cluster_state: str=None, diagnostics_storage_account_config: DiagnosticsStorageAccountConfig=None, fabric_settings: List[SettingsSectionDescription]=None, management_endpoint: str=None, node_types: List[NodeTypeDescription]=None, provisioning_state: str=None, reliability_level: str=None, reverse_proxy_certificate: CertificateDescription=None, upgrade_description: ClusterUpgradePolicy=None, upgrade_mode: str=None, vm_image: str=None):
        """ClusterProperties - a model defined in OpenAPI

        :param available_cluster_versions: The available_cluster_versions of this ClusterProperties.
        :param azure_active_directory: The azure_active_directory of this ClusterProperties.
        :param certificate: The certificate of this ClusterProperties.
        :param client_certificate_common_names: The client_certificate_common_names of this ClusterProperties.
        :param client_certificate_thumbprints: The client_certificate_thumbprints of this ClusterProperties.
        :param cluster_code_version: The cluster_code_version of this ClusterProperties.
        :param cluster_endpoint: The cluster_endpoint of this ClusterProperties.
        :param cluster_id: The cluster_id of this ClusterProperties.
        :param cluster_state: The cluster_state of this ClusterProperties.
        :param diagnostics_storage_account_config: The diagnostics_storage_account_config of this ClusterProperties.
        :param fabric_settings: The fabric_settings of this ClusterProperties.
        :param management_endpoint: The management_endpoint of this ClusterProperties.
        :param node_types: The node_types of this ClusterProperties.
        :param provisioning_state: The provisioning_state of this ClusterProperties.
        :param reliability_level: The reliability_level of this ClusterProperties.
        :param reverse_proxy_certificate: The reverse_proxy_certificate of this ClusterProperties.
        :param upgrade_description: The upgrade_description of this ClusterProperties.
        :param upgrade_mode: The upgrade_mode of this ClusterProperties.
        :param vm_image: The vm_image of this ClusterProperties.
        """
        self.openapi_types = {
            'available_cluster_versions': List[ClusterVersionDetails],
            'azure_active_directory': AzureActiveDirectory,
            'certificate': CertificateDescription,
            'client_certificate_common_names': List[ClientCertificateCommonName],
            'client_certificate_thumbprints': List[ClientCertificateThumbprint],
            'cluster_code_version': str,
            'cluster_endpoint': str,
            'cluster_id': str,
            'cluster_state': str,
            'diagnostics_storage_account_config': DiagnosticsStorageAccountConfig,
            'fabric_settings': List[SettingsSectionDescription],
            'management_endpoint': str,
            'node_types': List[NodeTypeDescription],
            'provisioning_state': str,
            'reliability_level': str,
            'reverse_proxy_certificate': CertificateDescription,
            'upgrade_description': ClusterUpgradePolicy,
            'upgrade_mode': str,
            'vm_image': str
        }

        self.attribute_map = {
            'available_cluster_versions': 'availableClusterVersions',
            'azure_active_directory': 'azureActiveDirectory',
            'certificate': 'certificate',
            'client_certificate_common_names': 'clientCertificateCommonNames',
            'client_certificate_thumbprints': 'clientCertificateThumbprints',
            'cluster_code_version': 'clusterCodeVersion',
            'cluster_endpoint': 'clusterEndpoint',
            'cluster_id': 'clusterId',
            'cluster_state': 'clusterState',
            'diagnostics_storage_account_config': 'diagnosticsStorageAccountConfig',
            'fabric_settings': 'fabricSettings',
            'management_endpoint': 'managementEndpoint',
            'node_types': 'nodeTypes',
            'provisioning_state': 'provisioningState',
            'reliability_level': 'reliabilityLevel',
            'reverse_proxy_certificate': 'reverseProxyCertificate',
            'upgrade_description': 'upgradeDescription',
            'upgrade_mode': 'upgradeMode',
            'vm_image': 'vmImage'
        }

        self._available_cluster_versions = available_cluster_versions
        self._azure_active_directory = azure_active_directory
        self._certificate = certificate
        self._client_certificate_common_names = client_certificate_common_names
        self._client_certificate_thumbprints = client_certificate_thumbprints
        self._cluster_code_version = cluster_code_version
        self._cluster_endpoint = cluster_endpoint
        self._cluster_id = cluster_id
        self._cluster_state = cluster_state
        self._diagnostics_storage_account_config = diagnostics_storage_account_config
        self._fabric_settings = fabric_settings
        self._management_endpoint = management_endpoint
        self._node_types = node_types
        self._provisioning_state = provisioning_state
        self._reliability_level = reliability_level
        self._reverse_proxy_certificate = reverse_proxy_certificate
        self._upgrade_description = upgrade_description
        self._upgrade_mode = upgrade_mode
        self._vm_image = vm_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterProperties of this ClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_cluster_versions(self):
        """Gets the available_cluster_versions of this ClusterProperties.

        The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to

        :return: The available_cluster_versions of this ClusterProperties.
        :rtype: List[ClusterVersionDetails]
        """
        return self._available_cluster_versions

    @available_cluster_versions.setter
    def available_cluster_versions(self, available_cluster_versions):
        """Sets the available_cluster_versions of this ClusterProperties.

        The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to

        :param available_cluster_versions: The available_cluster_versions of this ClusterProperties.
        :type available_cluster_versions: List[ClusterVersionDetails]
        """

        self._available_cluster_versions = available_cluster_versions

    @property
    def azure_active_directory(self):
        """Gets the azure_active_directory of this ClusterProperties.


        :return: The azure_active_directory of this ClusterProperties.
        :rtype: AzureActiveDirectory
        """
        return self._azure_active_directory

    @azure_active_directory.setter
    def azure_active_directory(self, azure_active_directory):
        """Sets the azure_active_directory of this ClusterProperties.


        :param azure_active_directory: The azure_active_directory of this ClusterProperties.
        :type azure_active_directory: AzureActiveDirectory
        """

        self._azure_active_directory = azure_active_directory

    @property
    def certificate(self):
        """Gets the certificate of this ClusterProperties.


        :return: The certificate of this ClusterProperties.
        :rtype: CertificateDescription
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ClusterProperties.


        :param certificate: The certificate of this ClusterProperties.
        :type certificate: CertificateDescription
        """

        self._certificate = certificate

    @property
    def client_certificate_common_names(self):
        """Gets the client_certificate_common_names of this ClusterProperties.

         List of client certificates to whitelist based on common names

        :return: The client_certificate_common_names of this ClusterProperties.
        :rtype: List[ClientCertificateCommonName]
        """
        return self._client_certificate_common_names

    @client_certificate_common_names.setter
    def client_certificate_common_names(self, client_certificate_common_names):
        """Sets the client_certificate_common_names of this ClusterProperties.

         List of client certificates to whitelist based on common names

        :param client_certificate_common_names: The client_certificate_common_names of this ClusterProperties.
        :type client_certificate_common_names: List[ClientCertificateCommonName]
        """

        self._client_certificate_common_names = client_certificate_common_names

    @property
    def client_certificate_thumbprints(self):
        """Gets the client_certificate_thumbprints of this ClusterProperties.

        The client thumbprint details ,it is used for client access for cluster operation

        :return: The client_certificate_thumbprints of this ClusterProperties.
        :rtype: List[ClientCertificateThumbprint]
        """
        return self._client_certificate_thumbprints

    @client_certificate_thumbprints.setter
    def client_certificate_thumbprints(self, client_certificate_thumbprints):
        """Sets the client_certificate_thumbprints of this ClusterProperties.

        The client thumbprint details ,it is used for client access for cluster operation

        :param client_certificate_thumbprints: The client_certificate_thumbprints of this ClusterProperties.
        :type client_certificate_thumbprints: List[ClientCertificateThumbprint]
        """

        self._client_certificate_thumbprints = client_certificate_thumbprints

    @property
    def cluster_code_version(self):
        """Gets the cluster_code_version of this ClusterProperties.

        The ServiceFabric code version running in your cluster

        :return: The cluster_code_version of this ClusterProperties.
        :rtype: str
        """
        return self._cluster_code_version

    @cluster_code_version.setter
    def cluster_code_version(self, cluster_code_version):
        """Sets the cluster_code_version of this ClusterProperties.

        The ServiceFabric code version running in your cluster

        :param cluster_code_version: The cluster_code_version of this ClusterProperties.
        :type cluster_code_version: str
        """

        self._cluster_code_version = cluster_code_version

    @property
    def cluster_endpoint(self):
        """Gets the cluster_endpoint of this ClusterProperties.

        The endpoint for the cluster connecting to servicefabric resource provider

        :return: The cluster_endpoint of this ClusterProperties.
        :rtype: str
        """
        return self._cluster_endpoint

    @cluster_endpoint.setter
    def cluster_endpoint(self, cluster_endpoint):
        """Sets the cluster_endpoint of this ClusterProperties.

        The endpoint for the cluster connecting to servicefabric resource provider

        :param cluster_endpoint: The cluster_endpoint of this ClusterProperties.
        :type cluster_endpoint: str
        """

        self._cluster_endpoint = cluster_endpoint

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterProperties.

        The unique identifier for the cluster resource

        :return: The cluster_id of this ClusterProperties.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterProperties.

        The unique identifier for the cluster resource

        :param cluster_id: The cluster_id of this ClusterProperties.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_state(self):
        """Gets the cluster_state of this ClusterProperties.

        The state for the cluster

        :return: The cluster_state of this ClusterProperties.
        :rtype: str
        """
        return self._cluster_state

    @cluster_state.setter
    def cluster_state(self, cluster_state):
        """Sets the cluster_state of this ClusterProperties.

        The state for the cluster

        :param cluster_state: The cluster_state of this ClusterProperties.
        :type cluster_state: str
        """
        allowed_values = ["WaitingForNodes", "Deploying", "BaselineUpgrade", "UpdatingUserConfiguration", "UpdatingUserCertificate", "UpdatingInfrastructure", "EnforcingClusterVersion", "UpgradeServiceUnreachable", "AutoScale", "Ready"]  # noqa: E501
        if cluster_state not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_state` ({0}), must be one of {1}"
                .format(cluster_state, allowed_values)
            )

        self._cluster_state = cluster_state

    @property
    def diagnostics_storage_account_config(self):
        """Gets the diagnostics_storage_account_config of this ClusterProperties.


        :return: The diagnostics_storage_account_config of this ClusterProperties.
        :rtype: DiagnosticsStorageAccountConfig
        """
        return self._diagnostics_storage_account_config

    @diagnostics_storage_account_config.setter
    def diagnostics_storage_account_config(self, diagnostics_storage_account_config):
        """Sets the diagnostics_storage_account_config of this ClusterProperties.


        :param diagnostics_storage_account_config: The diagnostics_storage_account_config of this ClusterProperties.
        :type diagnostics_storage_account_config: DiagnosticsStorageAccountConfig
        """

        self._diagnostics_storage_account_config = diagnostics_storage_account_config

    @property
    def fabric_settings(self):
        """Gets the fabric_settings of this ClusterProperties.

        List of custom fabric settings to configure the cluster.

        :return: The fabric_settings of this ClusterProperties.
        :rtype: List[SettingsSectionDescription]
        """
        return self._fabric_settings

    @fabric_settings.setter
    def fabric_settings(self, fabric_settings):
        """Sets the fabric_settings of this ClusterProperties.

        List of custom fabric settings to configure the cluster.

        :param fabric_settings: The fabric_settings of this ClusterProperties.
        :type fabric_settings: List[SettingsSectionDescription]
        """

        self._fabric_settings = fabric_settings

    @property
    def management_endpoint(self):
        """Gets the management_endpoint of this ClusterProperties.

        The http management endpoint of the cluster

        :return: The management_endpoint of this ClusterProperties.
        :rtype: str
        """
        return self._management_endpoint

    @management_endpoint.setter
    def management_endpoint(self, management_endpoint):
        """Sets the management_endpoint of this ClusterProperties.

        The http management endpoint of the cluster

        :param management_endpoint: The management_endpoint of this ClusterProperties.
        :type management_endpoint: str
        """
        if management_endpoint is None:
            raise ValueError("Invalid value for `management_endpoint`, must not be `None`")

        self._management_endpoint = management_endpoint

    @property
    def node_types(self):
        """Gets the node_types of this ClusterProperties.

        The list of node types that make up the cluster

        :return: The node_types of this ClusterProperties.
        :rtype: List[NodeTypeDescription]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this ClusterProperties.

        The list of node types that make up the cluster

        :param node_types: The node_types of this ClusterProperties.
        :type node_types: List[NodeTypeDescription]
        """
        if node_types is None:
            raise ValueError("Invalid value for `node_types`, must not be `None`")

        self._node_types = node_types

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ClusterProperties.

        The provisioning state of the cluster resource

        :return: The provisioning_state of this ClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ClusterProperties.

        The provisioning state of the cluster resource

        :param provisioning_state: The provisioning_state of this ClusterProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Updating", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def reliability_level(self):
        """Gets the reliability_level of this ClusterProperties.

        Cluster reliability level indicates replica set size of system service

        :return: The reliability_level of this ClusterProperties.
        :rtype: str
        """
        return self._reliability_level

    @reliability_level.setter
    def reliability_level(self, reliability_level):
        """Sets the reliability_level of this ClusterProperties.

        Cluster reliability level indicates replica set size of system service

        :param reliability_level: The reliability_level of this ClusterProperties.
        :type reliability_level: str
        """
        allowed_values = ["Bronze", "Silver", "Gold", "Platinum"]  # noqa: E501
        if reliability_level not in allowed_values:
            raise ValueError(
                "Invalid value for `reliability_level` ({0}), must be one of {1}"
                .format(reliability_level, allowed_values)
            )

        self._reliability_level = reliability_level

    @property
    def reverse_proxy_certificate(self):
        """Gets the reverse_proxy_certificate of this ClusterProperties.


        :return: The reverse_proxy_certificate of this ClusterProperties.
        :rtype: CertificateDescription
        """
        return self._reverse_proxy_certificate

    @reverse_proxy_certificate.setter
    def reverse_proxy_certificate(self, reverse_proxy_certificate):
        """Sets the reverse_proxy_certificate of this ClusterProperties.


        :param reverse_proxy_certificate: The reverse_proxy_certificate of this ClusterProperties.
        :type reverse_proxy_certificate: CertificateDescription
        """

        self._reverse_proxy_certificate = reverse_proxy_certificate

    @property
    def upgrade_description(self):
        """Gets the upgrade_description of this ClusterProperties.


        :return: The upgrade_description of this ClusterProperties.
        :rtype: ClusterUpgradePolicy
        """
        return self._upgrade_description

    @upgrade_description.setter
    def upgrade_description(self, upgrade_description):
        """Sets the upgrade_description of this ClusterProperties.


        :param upgrade_description: The upgrade_description of this ClusterProperties.
        :type upgrade_description: ClusterUpgradePolicy
        """

        self._upgrade_description = upgrade_description

    @property
    def upgrade_mode(self):
        """Gets the upgrade_mode of this ClusterProperties.

        Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not

        :return: The upgrade_mode of this ClusterProperties.
        :rtype: str
        """
        return self._upgrade_mode

    @upgrade_mode.setter
    def upgrade_mode(self, upgrade_mode):
        """Sets the upgrade_mode of this ClusterProperties.

        Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not

        :param upgrade_mode: The upgrade_mode of this ClusterProperties.
        :type upgrade_mode: str
        """
        allowed_values = ["Automatic", "Manual"]  # noqa: E501
        if upgrade_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_mode` ({0}), must be one of {1}"
                .format(upgrade_mode, allowed_values)
            )

        self._upgrade_mode = upgrade_mode

    @property
    def vm_image(self):
        """Gets the vm_image of this ClusterProperties.

        The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.

        :return: The vm_image of this ClusterProperties.
        :rtype: str
        """
        return self._vm_image

    @vm_image.setter
    def vm_image(self, vm_image):
        """Sets the vm_image of this ClusterProperties.

        The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.

        :param vm_image: The vm_image of this ClusterProperties.
        :type vm_image: str
        """

        self._vm_image = vm_image
