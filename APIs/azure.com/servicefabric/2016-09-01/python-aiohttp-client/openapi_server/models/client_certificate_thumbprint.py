# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientCertificateThumbprint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_thumbprint: str=None, is_admin: bool=None):
        """ClientCertificateThumbprint - a model defined in OpenAPI

        :param certificate_thumbprint: The certificate_thumbprint of this ClientCertificateThumbprint.
        :param is_admin: The is_admin of this ClientCertificateThumbprint.
        """
        self.openapi_types = {
            'certificate_thumbprint': str,
            'is_admin': bool
        }

        self.attribute_map = {
            'certificate_thumbprint': 'certificateThumbprint',
            'is_admin': 'isAdmin'
        }

        self._certificate_thumbprint = certificate_thumbprint
        self._is_admin = is_admin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientCertificateThumbprint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientCertificateThumbprint of this ClientCertificateThumbprint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_thumbprint(self):
        """Gets the certificate_thumbprint of this ClientCertificateThumbprint.

        Certificate thumbprint

        :return: The certificate_thumbprint of this ClientCertificateThumbprint.
        :rtype: str
        """
        return self._certificate_thumbprint

    @certificate_thumbprint.setter
    def certificate_thumbprint(self, certificate_thumbprint):
        """Sets the certificate_thumbprint of this ClientCertificateThumbprint.

        Certificate thumbprint

        :param certificate_thumbprint: The certificate_thumbprint of this ClientCertificateThumbprint.
        :type certificate_thumbprint: str
        """
        if certificate_thumbprint is None:
            raise ValueError("Invalid value for `certificate_thumbprint`, must not be `None`")

        self._certificate_thumbprint = certificate_thumbprint

    @property
    def is_admin(self):
        """Gets the is_admin of this ClientCertificateThumbprint.

        Is this certificate used for admin access from the client, if false, it is used or query only access

        :return: The is_admin of this ClientCertificateThumbprint.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ClientCertificateThumbprint.

        Is this certificate used for admin access from the client, if false, it is used or query only access

        :param is_admin: The is_admin of this ClientCertificateThumbprint.
        :type is_admin: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")

        self._is_admin = is_admin
