/*
 * ServiceFabricManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClusterCodeVersionsListResult;
import org.openapitools.client.model.ClusterCodeVersionsResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClusterVersionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClusterVersionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterVersionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clusterVersionsGet
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param clusterVersion The cluster code version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Get cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsGetCall(String location, String environment, String apiVersion, String subscriptionId, String clusterVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/clusterVersions/{clusterVersion}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "environment" + "}", localVarApiClient.escapeString(environment.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "clusterVersion" + "}", localVarApiClient.escapeString(clusterVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterVersionsGetValidateBeforeCall(String location, String environment, String apiVersion, String subscriptionId, String clusterVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling clusterVersionsGet(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling clusterVersionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterVersionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling clusterVersionsGet(Async)");
        }

        // verify the required parameter 'clusterVersion' is set
        if (clusterVersion == null) {
            throw new ApiException("Missing the required parameter 'clusterVersion' when calling clusterVersionsGet(Async)");
        }

        return clusterVersionsGetCall(location, environment, apiVersion, subscriptionId, clusterVersion, _callback);

    }

    /**
     * 
     * Get cluster code versions by environment and version
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param clusterVersion The cluster code version (required)
     * @return ClusterCodeVersionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Get cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ClusterCodeVersionsResult clusterVersionsGet(String location, String environment, String apiVersion, String subscriptionId, String clusterVersion) throws ApiException {
        ApiResponse<ClusterCodeVersionsResult> localVarResp = clusterVersionsGetWithHttpInfo(location, environment, apiVersion, subscriptionId, clusterVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cluster code versions by environment and version
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param clusterVersion The cluster code version (required)
     * @return ApiResponse&lt;ClusterCodeVersionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Get cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterCodeVersionsResult> clusterVersionsGetWithHttpInfo(String location, String environment, String apiVersion, String subscriptionId, String clusterVersion) throws ApiException {
        okhttp3.Call localVarCall = clusterVersionsGetValidateBeforeCall(location, environment, apiVersion, subscriptionId, clusterVersion, null);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cluster code versions by environment and version
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param clusterVersion The cluster code version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Get cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsGetAsync(String location, String environment, String apiVersion, String subscriptionId, String clusterVersion, final ApiCallback<ClusterCodeVersionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterVersionsGetValidateBeforeCall(location, environment, apiVersion, subscriptionId, clusterVersion, _callback);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterVersionsList
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsListCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/clusterVersions"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterVersionsListValidateBeforeCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling clusterVersionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterVersionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling clusterVersionsList(Async)");
        }

        return clusterVersionsListCall(location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List cluster code versions by location
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @return ClusterCodeVersionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ClusterCodeVersionsListResult clusterVersionsList(String location, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ClusterCodeVersionsListResult> localVarResp = clusterVersionsListWithHttpInfo(location, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List cluster code versions by location
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @return ApiResponse&lt;ClusterCodeVersionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterCodeVersionsListResult> clusterVersionsListWithHttpInfo(String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = clusterVersionsListValidateBeforeCall(location, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List cluster code versions by location
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsListAsync(String location, String apiVersion, String subscriptionId, final ApiCallback<ClusterCodeVersionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterVersionsListValidateBeforeCall(location, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterVersionsListByEnvironment
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsListByEnvironmentCall(String location, String environment, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/locations/{location}/environments/{environment}/clusterVersions"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "environment" + "}", localVarApiClient.escapeString(environment.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterVersionsListByEnvironmentValidateBeforeCall(String location, String environment, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling clusterVersionsListByEnvironment(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling clusterVersionsListByEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterVersionsListByEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling clusterVersionsListByEnvironment(Async)");
        }

        return clusterVersionsListByEnvironmentCall(location, environment, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List cluster code versions by environment
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @return ClusterCodeVersionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ClusterCodeVersionsListResult clusterVersionsListByEnvironment(String location, String environment, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ClusterCodeVersionsListResult> localVarResp = clusterVersionsListByEnvironmentWithHttpInfo(location, environment, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List cluster code versions by environment
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @return ApiResponse&lt;ClusterCodeVersionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterCodeVersionsListResult> clusterVersionsListByEnvironmentWithHttpInfo(String location, String environment, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = clusterVersionsListByEnvironmentValidateBeforeCall(location, environment, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List cluster code versions by environment
     * @param location The location for the cluster code versions, this is different from cluster location (required)
     * @param environment Cluster operating system, the default means all (required)
     * @param apiVersion The version of the ServiceFabric resource provider api (required)
     * @param subscriptionId The customer subscription identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - List cluster code versions successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterVersionsListByEnvironmentAsync(String location, String environment, String apiVersion, String subscriptionId, final ApiCallback<ClusterCodeVersionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterVersionsListByEnvironmentValidateBeforeCall(location, environment, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ClusterCodeVersionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
