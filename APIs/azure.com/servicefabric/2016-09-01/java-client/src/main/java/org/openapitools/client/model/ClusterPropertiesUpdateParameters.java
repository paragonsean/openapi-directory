/*
 * ServiceFabricManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.ClientCertificateCommonName;
import org.openapitools.client.model.ClientCertificateThumbprint;
import org.openapitools.client.model.ClusterUpgradePolicy;
import org.openapitools.client.model.NodeTypeDescription;
import org.openapitools.client.model.SettingsSectionDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cluster resource properties can be updated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:57.566007-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterPropertiesUpdateParameters {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private CertificateDescription certificate;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES = "clientCertificateCommonNames";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES)
  private List<ClientCertificateCommonName> clientCertificateCommonNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS = "clientCertificateThumbprints";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS)
  private List<ClientCertificateThumbprint> clientCertificateThumbprints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_CODE_VERSION = "clusterCodeVersion";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CODE_VERSION)
  private String clusterCodeVersion;

  public static final String SERIALIZED_NAME_FABRIC_SETTINGS = "fabricSettings";
  @SerializedName(SERIALIZED_NAME_FABRIC_SETTINGS)
  private List<SettingsSectionDescription> fabricSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_TYPES = "nodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<NodeTypeDescription> nodeTypes = new ArrayList<>();

  /**
   * This level is used to set the number of replicas of the system services
   */
  @JsonAdapter(ReliabilityLevelEnum.Adapter.class)
  public enum ReliabilityLevelEnum {
    BRONZE("Bronze"),
    
    SILVER("Silver"),
    
    GOLD("Gold");

    private String value;

    ReliabilityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReliabilityLevelEnum fromValue(String value) {
      for (ReliabilityLevelEnum b : ReliabilityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReliabilityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReliabilityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReliabilityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReliabilityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReliabilityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELIABILITY_LEVEL = "reliabilityLevel";
  @SerializedName(SERIALIZED_NAME_RELIABILITY_LEVEL)
  private ReliabilityLevelEnum reliabilityLevel;

  public static final String SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE = "reverseProxyCertificate";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE)
  private CertificateDescription reverseProxyCertificate;

  public static final String SERIALIZED_NAME_UPGRADE_DESCRIPTION = "upgradeDescription";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DESCRIPTION)
  private ClusterUpgradePolicy upgradeDescription;

  /**
   * Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
   */
  @JsonAdapter(UpgradeModeEnum.Adapter.class)
  public enum UpgradeModeEnum {
    AUTOMATIC("Automatic"),
    
    MANUAL("Manual");

    private String value;

    UpgradeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpgradeModeEnum fromValue(String value) {
      for (UpgradeModeEnum b : UpgradeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpgradeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpgradeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpgradeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpgradeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpgradeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPGRADE_MODE = "upgradeMode";
  @SerializedName(SERIALIZED_NAME_UPGRADE_MODE)
  private UpgradeModeEnum upgradeMode;

  public ClusterPropertiesUpdateParameters() {
  }

  public ClusterPropertiesUpdateParameters certificate(CertificateDescription certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getCertificate() {
    return certificate;
  }

  public void setCertificate(CertificateDescription certificate) {
    this.certificate = certificate;
  }


  public ClusterPropertiesUpdateParameters clientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
    return this;
  }

  public ClusterPropertiesUpdateParameters addClientCertificateCommonNamesItem(ClientCertificateCommonName clientCertificateCommonNamesItem) {
    if (this.clientCertificateCommonNames == null) {
      this.clientCertificateCommonNames = new ArrayList<>();
    }
    this.clientCertificateCommonNames.add(clientCertificateCommonNamesItem);
    return this;
  }

  /**
   * List of client certificates to whitelist based on common names.
   * @return clientCertificateCommonNames
   */
  @javax.annotation.Nullable
  public List<ClientCertificateCommonName> getClientCertificateCommonNames() {
    return clientCertificateCommonNames;
  }

  public void setClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
  }


  public ClusterPropertiesUpdateParameters clientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
    return this;
  }

  public ClusterPropertiesUpdateParameters addClientCertificateThumbprintsItem(ClientCertificateThumbprint clientCertificateThumbprintsItem) {
    if (this.clientCertificateThumbprints == null) {
      this.clientCertificateThumbprints = new ArrayList<>();
    }
    this.clientCertificateThumbprints.add(clientCertificateThumbprintsItem);
    return this;
  }

  /**
   * The client thumbprint details, it is used for client access for cluster operation, it will override existing collection
   * @return clientCertificateThumbprints
   */
  @javax.annotation.Nullable
  public List<ClientCertificateThumbprint> getClientCertificateThumbprints() {
    return clientCertificateThumbprints;
  }

  public void setClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
  }


  public ClusterPropertiesUpdateParameters clusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
    return this;
  }

  /**
   * The ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail, if you are using PUT new cluster, you can get the version by using ClusterVersions_List, if you are updating existing cluster, you can get the availableClusterVersions from Clusters_Get
   * @return clusterCodeVersion
   */
  @javax.annotation.Nullable
  public String getClusterCodeVersion() {
    return clusterCodeVersion;
  }

  public void setClusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
  }


  public ClusterPropertiesUpdateParameters fabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
    return this;
  }

  public ClusterPropertiesUpdateParameters addFabricSettingsItem(SettingsSectionDescription fabricSettingsItem) {
    if (this.fabricSettings == null) {
      this.fabricSettings = new ArrayList<>();
    }
    this.fabricSettings.add(fabricSettingsItem);
    return this;
  }

  /**
   * List of custom fabric settings to configure the cluster, Note, it will overwrite existing collection
   * @return fabricSettings
   */
  @javax.annotation.Nullable
  public List<SettingsSectionDescription> getFabricSettings() {
    return fabricSettings;
  }

  public void setFabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
  }


  public ClusterPropertiesUpdateParameters nodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public ClusterPropertiesUpdateParameters addNodeTypesItem(NodeTypeDescription nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * The list of node types that make up the cluster, it will override
   * @return nodeTypes
   */
  @javax.annotation.Nullable
  public List<NodeTypeDescription> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  public ClusterPropertiesUpdateParameters reliabilityLevel(ReliabilityLevelEnum reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
    return this;
  }

  /**
   * This level is used to set the number of replicas of the system services
   * @return reliabilityLevel
   */
  @javax.annotation.Nullable
  public ReliabilityLevelEnum getReliabilityLevel() {
    return reliabilityLevel;
  }

  public void setReliabilityLevel(ReliabilityLevelEnum reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
  }


  public ClusterPropertiesUpdateParameters reverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
    return this;
  }

  /**
   * Get reverseProxyCertificate
   * @return reverseProxyCertificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getReverseProxyCertificate() {
    return reverseProxyCertificate;
  }

  public void setReverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
  }


  public ClusterPropertiesUpdateParameters upgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
    return this;
  }

  /**
   * Get upgradeDescription
   * @return upgradeDescription
   */
  @javax.annotation.Nullable
  public ClusterUpgradePolicy getUpgradeDescription() {
    return upgradeDescription;
  }

  public void setUpgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
  }


  public ClusterPropertiesUpdateParameters upgradeMode(UpgradeModeEnum upgradeMode) {
    this.upgradeMode = upgradeMode;
    return this;
  }

  /**
   * Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
   * @return upgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeModeEnum getUpgradeMode() {
    return upgradeMode;
  }

  public void setUpgradeMode(UpgradeModeEnum upgradeMode) {
    this.upgradeMode = upgradeMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterPropertiesUpdateParameters clusterPropertiesUpdateParameters = (ClusterPropertiesUpdateParameters) o;
    return Objects.equals(this.certificate, clusterPropertiesUpdateParameters.certificate) &&
        Objects.equals(this.clientCertificateCommonNames, clusterPropertiesUpdateParameters.clientCertificateCommonNames) &&
        Objects.equals(this.clientCertificateThumbprints, clusterPropertiesUpdateParameters.clientCertificateThumbprints) &&
        Objects.equals(this.clusterCodeVersion, clusterPropertiesUpdateParameters.clusterCodeVersion) &&
        Objects.equals(this.fabricSettings, clusterPropertiesUpdateParameters.fabricSettings) &&
        Objects.equals(this.nodeTypes, clusterPropertiesUpdateParameters.nodeTypes) &&
        Objects.equals(this.reliabilityLevel, clusterPropertiesUpdateParameters.reliabilityLevel) &&
        Objects.equals(this.reverseProxyCertificate, clusterPropertiesUpdateParameters.reverseProxyCertificate) &&
        Objects.equals(this.upgradeDescription, clusterPropertiesUpdateParameters.upgradeDescription) &&
        Objects.equals(this.upgradeMode, clusterPropertiesUpdateParameters.upgradeMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, clientCertificateCommonNames, clientCertificateThumbprints, clusterCodeVersion, fabricSettings, nodeTypes, reliabilityLevel, reverseProxyCertificate, upgradeDescription, upgradeMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterPropertiesUpdateParameters {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    clientCertificateCommonNames: ").append(toIndentedString(clientCertificateCommonNames)).append("\n");
    sb.append("    clientCertificateThumbprints: ").append(toIndentedString(clientCertificateThumbprints)).append("\n");
    sb.append("    clusterCodeVersion: ").append(toIndentedString(clusterCodeVersion)).append("\n");
    sb.append("    fabricSettings: ").append(toIndentedString(fabricSettings)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    reliabilityLevel: ").append(toIndentedString(reliabilityLevel)).append("\n");
    sb.append("    reverseProxyCertificate: ").append(toIndentedString(reverseProxyCertificate)).append("\n");
    sb.append("    upgradeDescription: ").append(toIndentedString(upgradeDescription)).append("\n");
    sb.append("    upgradeMode: ").append(toIndentedString(upgradeMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("clientCertificateCommonNames");
    openapiFields.add("clientCertificateThumbprints");
    openapiFields.add("clusterCodeVersion");
    openapiFields.add("fabricSettings");
    openapiFields.add("nodeTypes");
    openapiFields.add("reliabilityLevel");
    openapiFields.add("reverseProxyCertificate");
    openapiFields.add("upgradeDescription");
    openapiFields.add("upgradeMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterPropertiesUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterPropertiesUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterPropertiesUpdateParameters is not found in the empty JSON string", ClusterPropertiesUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterPropertiesUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterPropertiesUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("certificate"));
      }
      if (jsonObj.get("clientCertificateCommonNames") != null && !jsonObj.get("clientCertificateCommonNames").isJsonNull()) {
        JsonArray jsonArrayclientCertificateCommonNames = jsonObj.getAsJsonArray("clientCertificateCommonNames");
        if (jsonArrayclientCertificateCommonNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateCommonNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateCommonNames` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateCommonNames").toString()));
          }

          // validate the optional field `clientCertificateCommonNames` (array)
          for (int i = 0; i < jsonArrayclientCertificateCommonNames.size(); i++) {
            ClientCertificateCommonName.validateJsonElement(jsonArrayclientCertificateCommonNames.get(i));
          };
        }
      }
      if (jsonObj.get("clientCertificateThumbprints") != null && !jsonObj.get("clientCertificateThumbprints").isJsonNull()) {
        JsonArray jsonArrayclientCertificateThumbprints = jsonObj.getAsJsonArray("clientCertificateThumbprints");
        if (jsonArrayclientCertificateThumbprints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateThumbprints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateThumbprints` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateThumbprints").toString()));
          }

          // validate the optional field `clientCertificateThumbprints` (array)
          for (int i = 0; i < jsonArrayclientCertificateThumbprints.size(); i++) {
            ClientCertificateThumbprint.validateJsonElement(jsonArrayclientCertificateThumbprints.get(i));
          };
        }
      }
      if ((jsonObj.get("clusterCodeVersion") != null && !jsonObj.get("clusterCodeVersion").isJsonNull()) && !jsonObj.get("clusterCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterCodeVersion").toString()));
      }
      if (jsonObj.get("fabricSettings") != null && !jsonObj.get("fabricSettings").isJsonNull()) {
        JsonArray jsonArrayfabricSettings = jsonObj.getAsJsonArray("fabricSettings");
        if (jsonArrayfabricSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fabricSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fabricSettings` to be an array in the JSON string but got `%s`", jsonObj.get("fabricSettings").toString()));
          }

          // validate the optional field `fabricSettings` (array)
          for (int i = 0; i < jsonArrayfabricSettings.size(); i++) {
            SettingsSectionDescription.validateJsonElement(jsonArrayfabricSettings.get(i));
          };
        }
      }
      if (jsonObj.get("nodeTypes") != null && !jsonObj.get("nodeTypes").isJsonNull()) {
        JsonArray jsonArraynodeTypes = jsonObj.getAsJsonArray("nodeTypes");
        if (jsonArraynodeTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodeTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeTypes").toString()));
          }

          // validate the optional field `nodeTypes` (array)
          for (int i = 0; i < jsonArraynodeTypes.size(); i++) {
            NodeTypeDescription.validateJsonElement(jsonArraynodeTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("reliabilityLevel") != null && !jsonObj.get("reliabilityLevel").isJsonNull()) && !jsonObj.get("reliabilityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reliabilityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reliabilityLevel").toString()));
      }
      // validate the optional field `reliabilityLevel`
      if (jsonObj.get("reliabilityLevel") != null && !jsonObj.get("reliabilityLevel").isJsonNull()) {
        ReliabilityLevelEnum.validateJsonElement(jsonObj.get("reliabilityLevel"));
      }
      // validate the optional field `reverseProxyCertificate`
      if (jsonObj.get("reverseProxyCertificate") != null && !jsonObj.get("reverseProxyCertificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("reverseProxyCertificate"));
      }
      // validate the optional field `upgradeDescription`
      if (jsonObj.get("upgradeDescription") != null && !jsonObj.get("upgradeDescription").isJsonNull()) {
        ClusterUpgradePolicy.validateJsonElement(jsonObj.get("upgradeDescription"));
      }
      if ((jsonObj.get("upgradeMode") != null && !jsonObj.get("upgradeMode").isJsonNull()) && !jsonObj.get("upgradeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeMode").toString()));
      }
      // validate the optional field `upgradeMode`
      if (jsonObj.get("upgradeMode") != null && !jsonObj.get("upgradeMode").isJsonNull()) {
        UpgradeModeEnum.validateJsonElement(jsonObj.get("upgradeMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterPropertiesUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterPropertiesUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterPropertiesUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterPropertiesUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterPropertiesUpdateParameters>() {
           @Override
           public void write(JsonWriter out, ClusterPropertiesUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterPropertiesUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterPropertiesUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterPropertiesUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to ClusterPropertiesUpdateParameters
   */
  public static ClusterPropertiesUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterPropertiesUpdateParameters.class);
  }

  /**
   * Convert an instance of ClusterPropertiesUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

