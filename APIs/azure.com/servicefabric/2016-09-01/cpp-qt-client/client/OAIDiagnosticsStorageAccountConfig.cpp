/**
 * ServiceFabricManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticsStorageAccountConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticsStorageAccountConfig::OAIDiagnosticsStorageAccountConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticsStorageAccountConfig::OAIDiagnosticsStorageAccountConfig() {
    this->initializeModel();
}

OAIDiagnosticsStorageAccountConfig::~OAIDiagnosticsStorageAccountConfig() {}

void OAIDiagnosticsStorageAccountConfig::initializeModel() {

    m_blob_endpoint_isSet = false;
    m_blob_endpoint_isValid = false;

    m_protected_account_key_name_isSet = false;
    m_protected_account_key_name_isValid = false;

    m_queue_endpoint_isSet = false;
    m_queue_endpoint_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_table_endpoint_isSet = false;
    m_table_endpoint_isValid = false;
}

void OAIDiagnosticsStorageAccountConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticsStorageAccountConfig::fromJsonObject(QJsonObject json) {

    m_blob_endpoint_isValid = ::OpenAPI::fromJsonValue(m_blob_endpoint, json[QString("blobEndpoint")]);
    m_blob_endpoint_isSet = !json[QString("blobEndpoint")].isNull() && m_blob_endpoint_isValid;

    m_protected_account_key_name_isValid = ::OpenAPI::fromJsonValue(m_protected_account_key_name, json[QString("protectedAccountKeyName")]);
    m_protected_account_key_name_isSet = !json[QString("protectedAccountKeyName")].isNull() && m_protected_account_key_name_isValid;

    m_queue_endpoint_isValid = ::OpenAPI::fromJsonValue(m_queue_endpoint, json[QString("queueEndpoint")]);
    m_queue_endpoint_isSet = !json[QString("queueEndpoint")].isNull() && m_queue_endpoint_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_table_endpoint_isValid = ::OpenAPI::fromJsonValue(m_table_endpoint, json[QString("tableEndpoint")]);
    m_table_endpoint_isSet = !json[QString("tableEndpoint")].isNull() && m_table_endpoint_isValid;
}

QString OAIDiagnosticsStorageAccountConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticsStorageAccountConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_endpoint_isSet) {
        obj.insert(QString("blobEndpoint"), ::OpenAPI::toJsonValue(m_blob_endpoint));
    }
    if (m_protected_account_key_name_isSet) {
        obj.insert(QString("protectedAccountKeyName"), ::OpenAPI::toJsonValue(m_protected_account_key_name));
    }
    if (m_queue_endpoint_isSet) {
        obj.insert(QString("queueEndpoint"), ::OpenAPI::toJsonValue(m_queue_endpoint));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_table_endpoint_isSet) {
        obj.insert(QString("tableEndpoint"), ::OpenAPI::toJsonValue(m_table_endpoint));
    }
    return obj;
}

QString OAIDiagnosticsStorageAccountConfig::getBlobEndpoint() const {
    return m_blob_endpoint;
}
void OAIDiagnosticsStorageAccountConfig::setBlobEndpoint(const QString &blob_endpoint) {
    m_blob_endpoint = blob_endpoint;
    m_blob_endpoint_isSet = true;
}

bool OAIDiagnosticsStorageAccountConfig::is_blob_endpoint_Set() const{
    return m_blob_endpoint_isSet;
}

bool OAIDiagnosticsStorageAccountConfig::is_blob_endpoint_Valid() const{
    return m_blob_endpoint_isValid;
}

QString OAIDiagnosticsStorageAccountConfig::getProtectedAccountKeyName() const {
    return m_protected_account_key_name;
}
void OAIDiagnosticsStorageAccountConfig::setProtectedAccountKeyName(const QString &protected_account_key_name) {
    m_protected_account_key_name = protected_account_key_name;
    m_protected_account_key_name_isSet = true;
}

bool OAIDiagnosticsStorageAccountConfig::is_protected_account_key_name_Set() const{
    return m_protected_account_key_name_isSet;
}

bool OAIDiagnosticsStorageAccountConfig::is_protected_account_key_name_Valid() const{
    return m_protected_account_key_name_isValid;
}

QString OAIDiagnosticsStorageAccountConfig::getQueueEndpoint() const {
    return m_queue_endpoint;
}
void OAIDiagnosticsStorageAccountConfig::setQueueEndpoint(const QString &queue_endpoint) {
    m_queue_endpoint = queue_endpoint;
    m_queue_endpoint_isSet = true;
}

bool OAIDiagnosticsStorageAccountConfig::is_queue_endpoint_Set() const{
    return m_queue_endpoint_isSet;
}

bool OAIDiagnosticsStorageAccountConfig::is_queue_endpoint_Valid() const{
    return m_queue_endpoint_isValid;
}

QString OAIDiagnosticsStorageAccountConfig::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIDiagnosticsStorageAccountConfig::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIDiagnosticsStorageAccountConfig::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIDiagnosticsStorageAccountConfig::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

QString OAIDiagnosticsStorageAccountConfig::getTableEndpoint() const {
    return m_table_endpoint;
}
void OAIDiagnosticsStorageAccountConfig::setTableEndpoint(const QString &table_endpoint) {
    m_table_endpoint = table_endpoint;
    m_table_endpoint_isSet = true;
}

bool OAIDiagnosticsStorageAccountConfig::is_table_endpoint_Set() const{
    return m_table_endpoint_isSet;
}

bool OAIDiagnosticsStorageAccountConfig::is_table_endpoint_Valid() const{
    return m_table_endpoint_isValid;
}

bool OAIDiagnosticsStorageAccountConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_account_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticsStorageAccountConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blob_endpoint_isValid && m_protected_account_key_name_isValid && m_queue_endpoint_isValid && m_storage_account_name_isValid && m_table_endpoint_isValid && true;
}

} // namespace OpenAPI
