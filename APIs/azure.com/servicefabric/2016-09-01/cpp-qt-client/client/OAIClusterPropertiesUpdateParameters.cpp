/**
 * ServiceFabricManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterPropertiesUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterPropertiesUpdateParameters::OAIClusterPropertiesUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterPropertiesUpdateParameters::OAIClusterPropertiesUpdateParameters() {
    this->initializeModel();
}

OAIClusterPropertiesUpdateParameters::~OAIClusterPropertiesUpdateParameters() {}

void OAIClusterPropertiesUpdateParameters::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_client_certificate_common_names_isSet = false;
    m_client_certificate_common_names_isValid = false;

    m_client_certificate_thumbprints_isSet = false;
    m_client_certificate_thumbprints_isValid = false;

    m_cluster_code_version_isSet = false;
    m_cluster_code_version_isValid = false;

    m_fabric_settings_isSet = false;
    m_fabric_settings_isValid = false;

    m_node_types_isSet = false;
    m_node_types_isValid = false;

    m_reliability_level_isSet = false;
    m_reliability_level_isValid = false;

    m_reverse_proxy_certificate_isSet = false;
    m_reverse_proxy_certificate_isValid = false;

    m_upgrade_description_isSet = false;
    m_upgrade_description_isValid = false;

    m_upgrade_mode_isSet = false;
    m_upgrade_mode_isValid = false;
}

void OAIClusterPropertiesUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterPropertiesUpdateParameters::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_client_certificate_common_names_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_common_names, json[QString("clientCertificateCommonNames")]);
    m_client_certificate_common_names_isSet = !json[QString("clientCertificateCommonNames")].isNull() && m_client_certificate_common_names_isValid;

    m_client_certificate_thumbprints_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_thumbprints, json[QString("clientCertificateThumbprints")]);
    m_client_certificate_thumbprints_isSet = !json[QString("clientCertificateThumbprints")].isNull() && m_client_certificate_thumbprints_isValid;

    m_cluster_code_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_code_version, json[QString("clusterCodeVersion")]);
    m_cluster_code_version_isSet = !json[QString("clusterCodeVersion")].isNull() && m_cluster_code_version_isValid;

    m_fabric_settings_isValid = ::OpenAPI::fromJsonValue(m_fabric_settings, json[QString("fabricSettings")]);
    m_fabric_settings_isSet = !json[QString("fabricSettings")].isNull() && m_fabric_settings_isValid;

    m_node_types_isValid = ::OpenAPI::fromJsonValue(m_node_types, json[QString("nodeTypes")]);
    m_node_types_isSet = !json[QString("nodeTypes")].isNull() && m_node_types_isValid;

    m_reliability_level_isValid = ::OpenAPI::fromJsonValue(m_reliability_level, json[QString("reliabilityLevel")]);
    m_reliability_level_isSet = !json[QString("reliabilityLevel")].isNull() && m_reliability_level_isValid;

    m_reverse_proxy_certificate_isValid = ::OpenAPI::fromJsonValue(m_reverse_proxy_certificate, json[QString("reverseProxyCertificate")]);
    m_reverse_proxy_certificate_isSet = !json[QString("reverseProxyCertificate")].isNull() && m_reverse_proxy_certificate_isValid;

    m_upgrade_description_isValid = ::OpenAPI::fromJsonValue(m_upgrade_description, json[QString("upgradeDescription")]);
    m_upgrade_description_isSet = !json[QString("upgradeDescription")].isNull() && m_upgrade_description_isValid;

    m_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_upgrade_mode, json[QString("upgradeMode")]);
    m_upgrade_mode_isSet = !json[QString("upgradeMode")].isNull() && m_upgrade_mode_isValid;
}

QString OAIClusterPropertiesUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterPropertiesUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_client_certificate_common_names.size() > 0) {
        obj.insert(QString("clientCertificateCommonNames"), ::OpenAPI::toJsonValue(m_client_certificate_common_names));
    }
    if (m_client_certificate_thumbprints.size() > 0) {
        obj.insert(QString("clientCertificateThumbprints"), ::OpenAPI::toJsonValue(m_client_certificate_thumbprints));
    }
    if (m_cluster_code_version_isSet) {
        obj.insert(QString("clusterCodeVersion"), ::OpenAPI::toJsonValue(m_cluster_code_version));
    }
    if (m_fabric_settings.size() > 0) {
        obj.insert(QString("fabricSettings"), ::OpenAPI::toJsonValue(m_fabric_settings));
    }
    if (m_node_types.size() > 0) {
        obj.insert(QString("nodeTypes"), ::OpenAPI::toJsonValue(m_node_types));
    }
    if (m_reliability_level_isSet) {
        obj.insert(QString("reliabilityLevel"), ::OpenAPI::toJsonValue(m_reliability_level));
    }
    if (m_reverse_proxy_certificate.isSet()) {
        obj.insert(QString("reverseProxyCertificate"), ::OpenAPI::toJsonValue(m_reverse_proxy_certificate));
    }
    if (m_upgrade_description.isSet()) {
        obj.insert(QString("upgradeDescription"), ::OpenAPI::toJsonValue(m_upgrade_description));
    }
    if (m_upgrade_mode_isSet) {
        obj.insert(QString("upgradeMode"), ::OpenAPI::toJsonValue(m_upgrade_mode));
    }
    return obj;
}

OAICertificateDescription OAIClusterPropertiesUpdateParameters::getCertificate() const {
    return m_certificate;
}
void OAIClusterPropertiesUpdateParameters::setCertificate(const OAICertificateDescription &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QList<OAIClientCertificateCommonName> OAIClusterPropertiesUpdateParameters::getClientCertificateCommonNames() const {
    return m_client_certificate_common_names;
}
void OAIClusterPropertiesUpdateParameters::setClientCertificateCommonNames(const QList<OAIClientCertificateCommonName> &client_certificate_common_names) {
    m_client_certificate_common_names = client_certificate_common_names;
    m_client_certificate_common_names_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_client_certificate_common_names_Set() const{
    return m_client_certificate_common_names_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_client_certificate_common_names_Valid() const{
    return m_client_certificate_common_names_isValid;
}

QList<OAIClientCertificateThumbprint> OAIClusterPropertiesUpdateParameters::getClientCertificateThumbprints() const {
    return m_client_certificate_thumbprints;
}
void OAIClusterPropertiesUpdateParameters::setClientCertificateThumbprints(const QList<OAIClientCertificateThumbprint> &client_certificate_thumbprints) {
    m_client_certificate_thumbprints = client_certificate_thumbprints;
    m_client_certificate_thumbprints_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_client_certificate_thumbprints_Set() const{
    return m_client_certificate_thumbprints_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_client_certificate_thumbprints_Valid() const{
    return m_client_certificate_thumbprints_isValid;
}

QString OAIClusterPropertiesUpdateParameters::getClusterCodeVersion() const {
    return m_cluster_code_version;
}
void OAIClusterPropertiesUpdateParameters::setClusterCodeVersion(const QString &cluster_code_version) {
    m_cluster_code_version = cluster_code_version;
    m_cluster_code_version_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_cluster_code_version_Set() const{
    return m_cluster_code_version_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_cluster_code_version_Valid() const{
    return m_cluster_code_version_isValid;
}

QList<OAISettingsSectionDescription> OAIClusterPropertiesUpdateParameters::getFabricSettings() const {
    return m_fabric_settings;
}
void OAIClusterPropertiesUpdateParameters::setFabricSettings(const QList<OAISettingsSectionDescription> &fabric_settings) {
    m_fabric_settings = fabric_settings;
    m_fabric_settings_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_fabric_settings_Set() const{
    return m_fabric_settings_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_fabric_settings_Valid() const{
    return m_fabric_settings_isValid;
}

QList<OAINodeTypeDescription> OAIClusterPropertiesUpdateParameters::getNodeTypes() const {
    return m_node_types;
}
void OAIClusterPropertiesUpdateParameters::setNodeTypes(const QList<OAINodeTypeDescription> &node_types) {
    m_node_types = node_types;
    m_node_types_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_node_types_Set() const{
    return m_node_types_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_node_types_Valid() const{
    return m_node_types_isValid;
}

QString OAIClusterPropertiesUpdateParameters::getReliabilityLevel() const {
    return m_reliability_level;
}
void OAIClusterPropertiesUpdateParameters::setReliabilityLevel(const QString &reliability_level) {
    m_reliability_level = reliability_level;
    m_reliability_level_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_reliability_level_Set() const{
    return m_reliability_level_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_reliability_level_Valid() const{
    return m_reliability_level_isValid;
}

OAICertificateDescription OAIClusterPropertiesUpdateParameters::getReverseProxyCertificate() const {
    return m_reverse_proxy_certificate;
}
void OAIClusterPropertiesUpdateParameters::setReverseProxyCertificate(const OAICertificateDescription &reverse_proxy_certificate) {
    m_reverse_proxy_certificate = reverse_proxy_certificate;
    m_reverse_proxy_certificate_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_reverse_proxy_certificate_Set() const{
    return m_reverse_proxy_certificate_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_reverse_proxy_certificate_Valid() const{
    return m_reverse_proxy_certificate_isValid;
}

OAIClusterUpgradePolicy OAIClusterPropertiesUpdateParameters::getUpgradeDescription() const {
    return m_upgrade_description;
}
void OAIClusterPropertiesUpdateParameters::setUpgradeDescription(const OAIClusterUpgradePolicy &upgrade_description) {
    m_upgrade_description = upgrade_description;
    m_upgrade_description_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_upgrade_description_Set() const{
    return m_upgrade_description_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_upgrade_description_Valid() const{
    return m_upgrade_description_isValid;
}

QString OAIClusterPropertiesUpdateParameters::getUpgradeMode() const {
    return m_upgrade_mode;
}
void OAIClusterPropertiesUpdateParameters::setUpgradeMode(const QString &upgrade_mode) {
    m_upgrade_mode = upgrade_mode;
    m_upgrade_mode_isSet = true;
}

bool OAIClusterPropertiesUpdateParameters::is_upgrade_mode_Set() const{
    return m_upgrade_mode_isSet;
}

bool OAIClusterPropertiesUpdateParameters::is_upgrade_mode_Valid() const{
    return m_upgrade_mode_isValid;
}

bool OAIClusterPropertiesUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_common_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_thumbprints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reliability_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_proxy_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterPropertiesUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
