/**
 * ServiceFabricManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClientCertificateCommonName model module.
 * @module model/ClientCertificateCommonName
 * @version 2016-09-01
 */
class ClientCertificateCommonName {
    /**
     * Constructs a new <code>ClientCertificateCommonName</code>.
     * Client certificate details using common name
     * @alias module:model/ClientCertificateCommonName
     * @param certificateCommonName {String} Certificate common name to be granted access; be careful using wild card common names
     * @param certificateIssuerThumbprint {String} Certificate issuer thumbprint
     * @param isAdmin {Boolean} Is this certificate used for admin access from the client, if false , it is used or query only access
     */
    constructor(certificateCommonName, certificateIssuerThumbprint, isAdmin) { 
        
        ClientCertificateCommonName.initialize(this, certificateCommonName, certificateIssuerThumbprint, isAdmin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateCommonName, certificateIssuerThumbprint, isAdmin) { 
        obj['certificateCommonName'] = certificateCommonName;
        obj['certificateIssuerThumbprint'] = certificateIssuerThumbprint;
        obj['isAdmin'] = isAdmin;
    }

    /**
     * Constructs a <code>ClientCertificateCommonName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientCertificateCommonName} obj Optional instance to populate.
     * @return {module:model/ClientCertificateCommonName} The populated <code>ClientCertificateCommonName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientCertificateCommonName();

            if (data.hasOwnProperty('certificateCommonName')) {
                obj['certificateCommonName'] = ApiClient.convertToType(data['certificateCommonName'], 'String');
            }
            if (data.hasOwnProperty('certificateIssuerThumbprint')) {
                obj['certificateIssuerThumbprint'] = ApiClient.convertToType(data['certificateIssuerThumbprint'], 'String');
            }
            if (data.hasOwnProperty('isAdmin')) {
                obj['isAdmin'] = ApiClient.convertToType(data['isAdmin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientCertificateCommonName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientCertificateCommonName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientCertificateCommonName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateCommonName'] && !(typeof data['certificateCommonName'] === 'string' || data['certificateCommonName'] instanceof String)) {
            throw new Error("Expected the field `certificateCommonName` to be a primitive type in the JSON string but got " + data['certificateCommonName']);
        }
        // ensure the json data is a string
        if (data['certificateIssuerThumbprint'] && !(typeof data['certificateIssuerThumbprint'] === 'string' || data['certificateIssuerThumbprint'] instanceof String)) {
            throw new Error("Expected the field `certificateIssuerThumbprint` to be a primitive type in the JSON string but got " + data['certificateIssuerThumbprint']);
        }

        return true;
    }


}

ClientCertificateCommonName.RequiredProperties = ["certificateCommonName", "certificateIssuerThumbprint", "isAdmin"];

/**
 * Certificate common name to be granted access; be careful using wild card common names
 * @member {String} certificateCommonName
 */
ClientCertificateCommonName.prototype['certificateCommonName'] = undefined;

/**
 * Certificate issuer thumbprint
 * @member {String} certificateIssuerThumbprint
 */
ClientCertificateCommonName.prototype['certificateIssuerThumbprint'] = undefined;

/**
 * Is this certificate used for admin access from the client, if false , it is used or query only access
 * @member {Boolean} isAdmin
 */
ClientCertificateCommonName.prototype['isAdmin'] = undefined;






export default ClientCertificateCommonName;

