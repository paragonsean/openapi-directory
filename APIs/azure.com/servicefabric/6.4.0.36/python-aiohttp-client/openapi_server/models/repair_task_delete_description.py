# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepairTaskDeleteDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id: str=None, version: str=None):
        """RepairTaskDeleteDescription - a model defined in OpenAPI

        :param task_id: The task_id of this RepairTaskDeleteDescription.
        :param version: The version of this RepairTaskDeleteDescription.
        """
        self.openapi_types = {
            'task_id': str,
            'version': str
        }

        self.attribute_map = {
            'task_id': 'TaskId',
            'version': 'Version'
        }

        self._task_id = task_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepairTaskDeleteDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepairTaskDeleteDescription of this RepairTaskDeleteDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this RepairTaskDeleteDescription.

        The ID of the completed repair task to be deleted.

        :return: The task_id of this RepairTaskDeleteDescription.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this RepairTaskDeleteDescription.

        The ID of the completed repair task to be deleted.

        :param task_id: The task_id of this RepairTaskDeleteDescription.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def version(self):
        """Gets the version of this RepairTaskDeleteDescription.

        The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed.

        :return: The version of this RepairTaskDeleteDescription.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RepairTaskDeleteDescription.

        The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current version of the repair task. If zero, then no version check is performed.

        :param version: The version of this RepairTaskDeleteDescription.
        :type version: str
        """

        self._version = version
