# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.partition_event import PartitionEvent
from openapi_server import util


class PartitionReconfiguredEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cc_epoch_config_version: int=None, cc_epoch_data_loss_version: int=None, node_instance_id: str=None, node_name: str=None, phase0_duration_ms: float=None, phase1_duration_ms: float=None, phase2_duration_ms: float=None, phase3_duration_ms: float=None, phase4_duration_ms: float=None, reconfig_type: str=None, result: str=None, service_type: str=None, total_duration_ms: float=None, partition_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """PartitionReconfiguredEvent - a model defined in OpenAPI

        :param cc_epoch_config_version: The cc_epoch_config_version of this PartitionReconfiguredEvent.
        :param cc_epoch_data_loss_version: The cc_epoch_data_loss_version of this PartitionReconfiguredEvent.
        :param node_instance_id: The node_instance_id of this PartitionReconfiguredEvent.
        :param node_name: The node_name of this PartitionReconfiguredEvent.
        :param phase0_duration_ms: The phase0_duration_ms of this PartitionReconfiguredEvent.
        :param phase1_duration_ms: The phase1_duration_ms of this PartitionReconfiguredEvent.
        :param phase2_duration_ms: The phase2_duration_ms of this PartitionReconfiguredEvent.
        :param phase3_duration_ms: The phase3_duration_ms of this PartitionReconfiguredEvent.
        :param phase4_duration_ms: The phase4_duration_ms of this PartitionReconfiguredEvent.
        :param reconfig_type: The reconfig_type of this PartitionReconfiguredEvent.
        :param result: The result of this PartitionReconfiguredEvent.
        :param service_type: The service_type of this PartitionReconfiguredEvent.
        :param total_duration_ms: The total_duration_ms of this PartitionReconfiguredEvent.
        :param partition_id: The partition_id of this PartitionReconfiguredEvent.
        :param category: The category of this PartitionReconfiguredEvent.
        :param event_instance_id: The event_instance_id of this PartitionReconfiguredEvent.
        :param has_correlated_events: The has_correlated_events of this PartitionReconfiguredEvent.
        :param kind: The kind of this PartitionReconfiguredEvent.
        :param time_stamp: The time_stamp of this PartitionReconfiguredEvent.
        """
        self.openapi_types = {
            'cc_epoch_config_version': int,
            'cc_epoch_data_loss_version': int,
            'node_instance_id': str,
            'node_name': str,
            'phase0_duration_ms': float,
            'phase1_duration_ms': float,
            'phase2_duration_ms': float,
            'phase3_duration_ms': float,
            'phase4_duration_ms': float,
            'reconfig_type': str,
            'result': str,
            'service_type': str,
            'total_duration_ms': float,
            'partition_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'cc_epoch_config_version': 'CcEpochConfigVersion',
            'cc_epoch_data_loss_version': 'CcEpochDataLossVersion',
            'node_instance_id': 'NodeInstanceId',
            'node_name': 'NodeName',
            'phase0_duration_ms': 'Phase0DurationMs',
            'phase1_duration_ms': 'Phase1DurationMs',
            'phase2_duration_ms': 'Phase2DurationMs',
            'phase3_duration_ms': 'Phase3DurationMs',
            'phase4_duration_ms': 'Phase4DurationMs',
            'reconfig_type': 'ReconfigType',
            'result': 'Result',
            'service_type': 'ServiceType',
            'total_duration_ms': 'TotalDurationMs',
            'partition_id': 'PartitionId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._cc_epoch_config_version = cc_epoch_config_version
        self._cc_epoch_data_loss_version = cc_epoch_data_loss_version
        self._node_instance_id = node_instance_id
        self._node_name = node_name
        self._phase0_duration_ms = phase0_duration_ms
        self._phase1_duration_ms = phase1_duration_ms
        self._phase2_duration_ms = phase2_duration_ms
        self._phase3_duration_ms = phase3_duration_ms
        self._phase4_duration_ms = phase4_duration_ms
        self._reconfig_type = reconfig_type
        self._result = result
        self._service_type = service_type
        self._total_duration_ms = total_duration_ms
        self._partition_id = partition_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionReconfiguredEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionReconfiguredEvent of this PartitionReconfiguredEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cc_epoch_config_version(self):
        """Gets the cc_epoch_config_version of this PartitionReconfiguredEvent.

        CcEpochConfig version.

        :return: The cc_epoch_config_version of this PartitionReconfiguredEvent.
        :rtype: int
        """
        return self._cc_epoch_config_version

    @cc_epoch_config_version.setter
    def cc_epoch_config_version(self, cc_epoch_config_version):
        """Sets the cc_epoch_config_version of this PartitionReconfiguredEvent.

        CcEpochConfig version.

        :param cc_epoch_config_version: The cc_epoch_config_version of this PartitionReconfiguredEvent.
        :type cc_epoch_config_version: int
        """
        if cc_epoch_config_version is None:
            raise ValueError("Invalid value for `cc_epoch_config_version`, must not be `None`")

        self._cc_epoch_config_version = cc_epoch_config_version

    @property
    def cc_epoch_data_loss_version(self):
        """Gets the cc_epoch_data_loss_version of this PartitionReconfiguredEvent.

        CcEpochDataLoss version.

        :return: The cc_epoch_data_loss_version of this PartitionReconfiguredEvent.
        :rtype: int
        """
        return self._cc_epoch_data_loss_version

    @cc_epoch_data_loss_version.setter
    def cc_epoch_data_loss_version(self, cc_epoch_data_loss_version):
        """Sets the cc_epoch_data_loss_version of this PartitionReconfiguredEvent.

        CcEpochDataLoss version.

        :param cc_epoch_data_loss_version: The cc_epoch_data_loss_version of this PartitionReconfiguredEvent.
        :type cc_epoch_data_loss_version: int
        """
        if cc_epoch_data_loss_version is None:
            raise ValueError("Invalid value for `cc_epoch_data_loss_version`, must not be `None`")

        self._cc_epoch_data_loss_version = cc_epoch_data_loss_version

    @property
    def node_instance_id(self):
        """Gets the node_instance_id of this PartitionReconfiguredEvent.

        Id of Node instance.

        :return: The node_instance_id of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._node_instance_id

    @node_instance_id.setter
    def node_instance_id(self, node_instance_id):
        """Sets the node_instance_id of this PartitionReconfiguredEvent.

        Id of Node instance.

        :param node_instance_id: The node_instance_id of this PartitionReconfiguredEvent.
        :type node_instance_id: str
        """
        if node_instance_id is None:
            raise ValueError("Invalid value for `node_instance_id`, must not be `None`")

        self._node_instance_id = node_instance_id

    @property
    def node_name(self):
        """Gets the node_name of this PartitionReconfiguredEvent.

        The name of a Service Fabric node.

        :return: The node_name of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this PartitionReconfiguredEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this PartitionReconfiguredEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def phase0_duration_ms(self):
        """Gets the phase0_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase0 in milli-seconds.

        :return: The phase0_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._phase0_duration_ms

    @phase0_duration_ms.setter
    def phase0_duration_ms(self, phase0_duration_ms):
        """Sets the phase0_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase0 in milli-seconds.

        :param phase0_duration_ms: The phase0_duration_ms of this PartitionReconfiguredEvent.
        :type phase0_duration_ms: float
        """
        if phase0_duration_ms is None:
            raise ValueError("Invalid value for `phase0_duration_ms`, must not be `None`")

        self._phase0_duration_ms = phase0_duration_ms

    @property
    def phase1_duration_ms(self):
        """Gets the phase1_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase1 in milli-seconds.

        :return: The phase1_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._phase1_duration_ms

    @phase1_duration_ms.setter
    def phase1_duration_ms(self, phase1_duration_ms):
        """Sets the phase1_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase1 in milli-seconds.

        :param phase1_duration_ms: The phase1_duration_ms of this PartitionReconfiguredEvent.
        :type phase1_duration_ms: float
        """
        if phase1_duration_ms is None:
            raise ValueError("Invalid value for `phase1_duration_ms`, must not be `None`")

        self._phase1_duration_ms = phase1_duration_ms

    @property
    def phase2_duration_ms(self):
        """Gets the phase2_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase2 in milli-seconds.

        :return: The phase2_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._phase2_duration_ms

    @phase2_duration_ms.setter
    def phase2_duration_ms(self, phase2_duration_ms):
        """Sets the phase2_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase2 in milli-seconds.

        :param phase2_duration_ms: The phase2_duration_ms of this PartitionReconfiguredEvent.
        :type phase2_duration_ms: float
        """
        if phase2_duration_ms is None:
            raise ValueError("Invalid value for `phase2_duration_ms`, must not be `None`")

        self._phase2_duration_ms = phase2_duration_ms

    @property
    def phase3_duration_ms(self):
        """Gets the phase3_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase3 in milli-seconds.

        :return: The phase3_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._phase3_duration_ms

    @phase3_duration_ms.setter
    def phase3_duration_ms(self, phase3_duration_ms):
        """Sets the phase3_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase3 in milli-seconds.

        :param phase3_duration_ms: The phase3_duration_ms of this PartitionReconfiguredEvent.
        :type phase3_duration_ms: float
        """
        if phase3_duration_ms is None:
            raise ValueError("Invalid value for `phase3_duration_ms`, must not be `None`")

        self._phase3_duration_ms = phase3_duration_ms

    @property
    def phase4_duration_ms(self):
        """Gets the phase4_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase4 in milli-seconds.

        :return: The phase4_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._phase4_duration_ms

    @phase4_duration_ms.setter
    def phase4_duration_ms(self, phase4_duration_ms):
        """Sets the phase4_duration_ms of this PartitionReconfiguredEvent.

        Duration of Phase4 in milli-seconds.

        :param phase4_duration_ms: The phase4_duration_ms of this PartitionReconfiguredEvent.
        :type phase4_duration_ms: float
        """
        if phase4_duration_ms is None:
            raise ValueError("Invalid value for `phase4_duration_ms`, must not be `None`")

        self._phase4_duration_ms = phase4_duration_ms

    @property
    def reconfig_type(self):
        """Gets the reconfig_type of this PartitionReconfiguredEvent.

        Type of reconfiguration.

        :return: The reconfig_type of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._reconfig_type

    @reconfig_type.setter
    def reconfig_type(self, reconfig_type):
        """Sets the reconfig_type of this PartitionReconfiguredEvent.

        Type of reconfiguration.

        :param reconfig_type: The reconfig_type of this PartitionReconfiguredEvent.
        :type reconfig_type: str
        """
        if reconfig_type is None:
            raise ValueError("Invalid value for `reconfig_type`, must not be `None`")

        self._reconfig_type = reconfig_type

    @property
    def result(self):
        """Gets the result of this PartitionReconfiguredEvent.

        Describes reconfiguration result.

        :return: The result of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PartitionReconfiguredEvent.

        Describes reconfiguration result.

        :param result: The result of this PartitionReconfiguredEvent.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def service_type(self):
        """Gets the service_type of this PartitionReconfiguredEvent.

        Type of Service.

        :return: The service_type of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this PartitionReconfiguredEvent.

        Type of Service.

        :param service_type: The service_type of this PartitionReconfiguredEvent.
        :type service_type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type

    @property
    def total_duration_ms(self):
        """Gets the total_duration_ms of this PartitionReconfiguredEvent.

        Total duration in milli-seconds.

        :return: The total_duration_ms of this PartitionReconfiguredEvent.
        :rtype: float
        """
        return self._total_duration_ms

    @total_duration_ms.setter
    def total_duration_ms(self, total_duration_ms):
        """Sets the total_duration_ms of this PartitionReconfiguredEvent.

        Total duration in milli-seconds.

        :param total_duration_ms: The total_duration_ms of this PartitionReconfiguredEvent.
        :type total_duration_ms: float
        """
        if total_duration_ms is None:
            raise ValueError("Invalid value for `total_duration_ms`, must not be `None`")

        self._total_duration_ms = total_duration_ms

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionReconfiguredEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionReconfiguredEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionReconfiguredEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def category(self):
        """Gets the category of this PartitionReconfiguredEvent.

        The category of event.

        :return: The category of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PartitionReconfiguredEvent.

        The category of event.

        :param category: The category of this PartitionReconfiguredEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this PartitionReconfiguredEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this PartitionReconfiguredEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this PartitionReconfiguredEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this PartitionReconfiguredEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this PartitionReconfiguredEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this PartitionReconfiguredEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this PartitionReconfiguredEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this PartitionReconfiguredEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this PartitionReconfiguredEvent.


        :return: The kind of this PartitionReconfiguredEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PartitionReconfiguredEvent.


        :param kind: The kind of this PartitionReconfiguredEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this PartitionReconfiguredEvent.

        The time event was logged.

        :return: The time_stamp of this PartitionReconfiguredEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this PartitionReconfiguredEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this PartitionReconfiguredEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
