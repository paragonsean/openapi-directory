# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_type_health_policy_map_item import ApplicationTypeHealthPolicyMapItem
from openapi_server import util


class ClusterHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_type_health_policy_map: List[ApplicationTypeHealthPolicyMapItem]=None, consider_warning_as_error: bool=False, max_percent_unhealthy_applications: int=None, max_percent_unhealthy_nodes: int=None):
        """ClusterHealthPolicy - a model defined in OpenAPI

        :param application_type_health_policy_map: The application_type_health_policy_map of this ClusterHealthPolicy.
        :param consider_warning_as_error: The consider_warning_as_error of this ClusterHealthPolicy.
        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        """
        self.openapi_types = {
            'application_type_health_policy_map': List[ApplicationTypeHealthPolicyMapItem],
            'consider_warning_as_error': bool,
            'max_percent_unhealthy_applications': int,
            'max_percent_unhealthy_nodes': int
        }

        self.attribute_map = {
            'application_type_health_policy_map': 'ApplicationTypeHealthPolicyMap',
            'consider_warning_as_error': 'ConsiderWarningAsError',
            'max_percent_unhealthy_applications': 'MaxPercentUnhealthyApplications',
            'max_percent_unhealthy_nodes': 'MaxPercentUnhealthyNodes'
        }

        self._application_type_health_policy_map = application_type_health_policy_map
        self._consider_warning_as_error = consider_warning_as_error
        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications
        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHealthPolicy of this ClusterHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type_health_policy_map(self):
        """Gets the application_type_health_policy_map of this ClusterHealthPolicy.

        Defines a map with max percentage unhealthy applications for specific application types. Each entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.  The application type health policy map can be used during cluster health evaluation to describe special application types. The application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy. The applications of application types specified in the map are not counted against the global pool of applications. For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type and assign it a value of 0% (that is, do not tolerate any failures). All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances. The application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.

        :return: The application_type_health_policy_map of this ClusterHealthPolicy.
        :rtype: List[ApplicationTypeHealthPolicyMapItem]
        """
        return self._application_type_health_policy_map

    @application_type_health_policy_map.setter
    def application_type_health_policy_map(self, application_type_health_policy_map):
        """Sets the application_type_health_policy_map of this ClusterHealthPolicy.

        Defines a map with max percentage unhealthy applications for specific application types. Each entry specifies as key the application type name and as value an integer that represents the MaxPercentUnhealthyApplications percentage used to evaluate the applications of the specified application type.  The application type health policy map can be used during cluster health evaluation to describe special application types. The application types included in the map are evaluated against the percentage specified in the map, and not with the global MaxPercentUnhealthyApplications defined in the cluster health policy. The applications of application types specified in the map are not counted against the global pool of applications. For example, if some applications of a type are critical, the cluster administrator can add an entry to the map for that application type and assign it a value of 0% (that is, do not tolerate any failures). All other applications can be evaluated with MaxPercentUnhealthyApplications set to 20% to tolerate some failures out of the thousands of application instances. The application type health policy map is used only if the cluster manifest enables application type health evaluation using the configuration entry for HealthManager/EnableApplicationTypeHealthEvaluation.

        :param application_type_health_policy_map: The application_type_health_policy_map of this ClusterHealthPolicy.
        :type application_type_health_policy_map: List[ApplicationTypeHealthPolicyMapItem]
        """

        self._application_type_health_policy_map = application_type_health_policy_map

    @property
    def consider_warning_as_error(self):
        """Gets the consider_warning_as_error of this ClusterHealthPolicy.

        Indicates whether warnings are treated with the same severity as errors.

        :return: The consider_warning_as_error of this ClusterHealthPolicy.
        :rtype: bool
        """
        return self._consider_warning_as_error

    @consider_warning_as_error.setter
    def consider_warning_as_error(self, consider_warning_as_error):
        """Sets the consider_warning_as_error of this ClusterHealthPolicy.

        Indicates whether warnings are treated with the same severity as errors.

        :param consider_warning_as_error: The consider_warning_as_error of this ClusterHealthPolicy.
        :type consider_warning_as_error: bool
        """

        self._consider_warning_as_error = consider_warning_as_error

    @property
    def max_percent_unhealthy_applications(self):
        """Gets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.

        :return: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_applications

    @max_percent_unhealthy_applications.setter
    def max_percent_unhealthy_applications(self, max_percent_unhealthy_applications):
        """Sets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.

        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :type max_percent_unhealthy_applications: int
        """

        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications

    @property
    def max_percent_unhealthy_nodes(self):
        """Gets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.

        :return: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_nodes

    @max_percent_unhealthy_nodes.setter
    def max_percent_unhealthy_nodes(self, max_percent_unhealthy_nodes):
        """Sets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.

        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :type max_percent_unhealthy_nodes: int
        """

        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes
