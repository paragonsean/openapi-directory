# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_policy_description import RetentionPolicyDescription
from openapi_server.models.retention_policy_type import RetentionPolicyType
from openapi_server import util


class BasicRetentionPolicyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_number_of_backups: int=None, retention_duration: str=None, retention_policy_type: RetentionPolicyType=None):
        """BasicRetentionPolicyDescription - a model defined in OpenAPI

        :param minimum_number_of_backups: The minimum_number_of_backups of this BasicRetentionPolicyDescription.
        :param retention_duration: The retention_duration of this BasicRetentionPolicyDescription.
        :param retention_policy_type: The retention_policy_type of this BasicRetentionPolicyDescription.
        """
        self.openapi_types = {
            'minimum_number_of_backups': int,
            'retention_duration': str,
            'retention_policy_type': RetentionPolicyType
        }

        self.attribute_map = {
            'minimum_number_of_backups': 'MinimumNumberOfBackups',
            'retention_duration': 'RetentionDuration',
            'retention_policy_type': 'RetentionPolicyType'
        }

        self._minimum_number_of_backups = minimum_number_of_backups
        self._retention_duration = retention_duration
        self._retention_policy_type = retention_policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicRetentionPolicyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicRetentionPolicyDescription of this BasicRetentionPolicyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_number_of_backups(self):
        """Gets the minimum_number_of_backups of this BasicRetentionPolicyDescription.

        It is the minimum number of backups to be retained at any point of time. If specified with a non zero value, backups will not be deleted even if the backups have gone past retention duration and have number of backups less than or equal to it.

        :return: The minimum_number_of_backups of this BasicRetentionPolicyDescription.
        :rtype: int
        """
        return self._minimum_number_of_backups

    @minimum_number_of_backups.setter
    def minimum_number_of_backups(self, minimum_number_of_backups):
        """Sets the minimum_number_of_backups of this BasicRetentionPolicyDescription.

        It is the minimum number of backups to be retained at any point of time. If specified with a non zero value, backups will not be deleted even if the backups have gone past retention duration and have number of backups less than or equal to it.

        :param minimum_number_of_backups: The minimum_number_of_backups of this BasicRetentionPolicyDescription.
        :type minimum_number_of_backups: int
        """
        if minimum_number_of_backups is not None and minimum_number_of_backups < 0:
            raise ValueError("Invalid value for `minimum_number_of_backups`, must be a value greater than or equal to `0`")

        self._minimum_number_of_backups = minimum_number_of_backups

    @property
    def retention_duration(self):
        """Gets the retention_duration of this BasicRetentionPolicyDescription.

        It is the minimum duration for which a backup created, will remain stored in the storage and might get deleted after that span of time. It should be specified in ISO8601 format.

        :return: The retention_duration of this BasicRetentionPolicyDescription.
        :rtype: str
        """
        return self._retention_duration

    @retention_duration.setter
    def retention_duration(self, retention_duration):
        """Sets the retention_duration of this BasicRetentionPolicyDescription.

        It is the minimum duration for which a backup created, will remain stored in the storage and might get deleted after that span of time. It should be specified in ISO8601 format.

        :param retention_duration: The retention_duration of this BasicRetentionPolicyDescription.
        :type retention_duration: str
        """
        if retention_duration is None:
            raise ValueError("Invalid value for `retention_duration`, must not be `None`")

        self._retention_duration = retention_duration

    @property
    def retention_policy_type(self):
        """Gets the retention_policy_type of this BasicRetentionPolicyDescription.


        :return: The retention_policy_type of this BasicRetentionPolicyDescription.
        :rtype: RetentionPolicyType
        """
        return self._retention_policy_type

    @retention_policy_type.setter
    def retention_policy_type(self, retention_policy_type):
        """Sets the retention_policy_type of this BasicRetentionPolicyDescription.


        :param retention_policy_type: The retention_policy_type of this BasicRetentionPolicyDescription.
        :type retention_policy_type: RetentionPolicyType
        """
        if retention_policy_type is None:
            raise ValueError("Invalid value for `retention_policy_type`, must not be `None`")

        self._retention_policy_type = retention_policy_type
