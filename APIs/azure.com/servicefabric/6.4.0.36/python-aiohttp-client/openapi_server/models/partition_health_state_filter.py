# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replica_health_state_filter import ReplicaHealthStateFilter
from openapi_server import util


class PartitionHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state_filter: int=None, partition_id_filter: str=None, replica_filters: List[ReplicaHealthStateFilter]=None):
        """PartitionHealthStateFilter - a model defined in OpenAPI

        :param health_state_filter: The health_state_filter of this PartitionHealthStateFilter.
        :param partition_id_filter: The partition_id_filter of this PartitionHealthStateFilter.
        :param replica_filters: The replica_filters of this PartitionHealthStateFilter.
        """
        self.openapi_types = {
            'health_state_filter': int,
            'partition_id_filter': str,
            'replica_filters': List[ReplicaHealthStateFilter]
        }

        self.attribute_map = {
            'health_state_filter': 'HealthStateFilter',
            'partition_id_filter': 'PartitionIdFilter',
            'replica_filters': 'ReplicaFilters'
        }

        self._health_state_filter = health_state_filter
        self._partition_id_filter = partition_id_filter
        self._replica_filters = replica_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionHealthStateFilter of this PartitionHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this PartitionHealthStateFilter.

        The filter for the health state of the partitions. It allows selecting partitions if they match the desired health states. The possible values are integer value of one of the following health states. Only partitions that match the filter are returned. All partitions are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the partition ID is specified. If the filter has default value and partition ID is specified, the matching partition is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :return: The health_state_filter of this PartitionHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this PartitionHealthStateFilter.

        The filter for the health state of the partitions. It allows selecting partitions if they match the desired health states. The possible values are integer value of one of the following health states. Only partitions that match the filter are returned. All partitions are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the partition ID is specified. If the filter has default value and partition ID is specified, the matching partition is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :param health_state_filter: The health_state_filter of this PartitionHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def partition_id_filter(self):
        """Gets the partition_id_filter of this PartitionHealthStateFilter.

        ID of the partition that matches the filter. The filter is applied only to the specified partition, if it exists. If the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter. If the partition exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :return: The partition_id_filter of this PartitionHealthStateFilter.
        :rtype: str
        """
        return self._partition_id_filter

    @partition_id_filter.setter
    def partition_id_filter(self, partition_id_filter):
        """Sets the partition_id_filter of this PartitionHealthStateFilter.

        ID of the partition that matches the filter. The filter is applied only to the specified partition, if it exists. If the partition doesn't exist, no partition is returned in the cluster health chunk based on this filter. If the partition exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :param partition_id_filter: The partition_id_filter of this PartitionHealthStateFilter.
        :type partition_id_filter: str
        """

        self._partition_id_filter = partition_id_filter

    @property
    def replica_filters(self):
        """Gets the replica_filters of this PartitionHealthStateFilter.

        Defines a list of filters that specify which replicas to be included in the returned cluster health chunk as children of the parent partition. The replicas are returned only if the parent partition matches a filter. If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition aggregated health state, regardless of the input filters. The partition filter may specify multiple replica filters. For example, it can specify a filter to return all replicas with health state Error and another filter to always include a replica identified by its replica id.

        :return: The replica_filters of this PartitionHealthStateFilter.
        :rtype: List[ReplicaHealthStateFilter]
        """
        return self._replica_filters

    @replica_filters.setter
    def replica_filters(self, replica_filters):
        """Sets the replica_filters of this PartitionHealthStateFilter.

        Defines a list of filters that specify which replicas to be included in the returned cluster health chunk as children of the parent partition. The replicas are returned only if the parent partition matches a filter. If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition aggregated health state, regardless of the input filters. The partition filter may specify multiple replica filters. For example, it can specify a filter to return all replicas with health state Error and another filter to always include a replica identified by its replica id.

        :param replica_filters: The replica_filters of this PartitionHealthStateFilter.
        :type replica_filters: List[ReplicaHealthStateFilter]
        """

        self._replica_filters = replica_filters
