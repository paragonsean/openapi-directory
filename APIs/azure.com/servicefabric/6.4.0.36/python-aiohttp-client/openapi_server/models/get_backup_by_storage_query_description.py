# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_entity import BackupEntity
from openapi_server.models.backup_storage_description import BackupStorageDescription
from openapi_server import util


class GetBackupByStorageQueryDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_entity: BackupEntity=None, end_date_time_filter: datetime=None, latest: bool=False, start_date_time_filter: datetime=None, storage: BackupStorageDescription=None):
        """GetBackupByStorageQueryDescription - a model defined in OpenAPI

        :param backup_entity: The backup_entity of this GetBackupByStorageQueryDescription.
        :param end_date_time_filter: The end_date_time_filter of this GetBackupByStorageQueryDescription.
        :param latest: The latest of this GetBackupByStorageQueryDescription.
        :param start_date_time_filter: The start_date_time_filter of this GetBackupByStorageQueryDescription.
        :param storage: The storage of this GetBackupByStorageQueryDescription.
        """
        self.openapi_types = {
            'backup_entity': BackupEntity,
            'end_date_time_filter': datetime,
            'latest': bool,
            'start_date_time_filter': datetime,
            'storage': BackupStorageDescription
        }

        self.attribute_map = {
            'backup_entity': 'BackupEntity',
            'end_date_time_filter': 'EndDateTimeFilter',
            'latest': 'Latest',
            'start_date_time_filter': 'StartDateTimeFilter',
            'storage': 'Storage'
        }

        self._backup_entity = backup_entity
        self._end_date_time_filter = end_date_time_filter
        self._latest = latest
        self._start_date_time_filter = start_date_time_filter
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBackupByStorageQueryDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetBackupByStorageQueryDescription of this GetBackupByStorageQueryDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_entity(self):
        """Gets the backup_entity of this GetBackupByStorageQueryDescription.


        :return: The backup_entity of this GetBackupByStorageQueryDescription.
        :rtype: BackupEntity
        """
        return self._backup_entity

    @backup_entity.setter
    def backup_entity(self, backup_entity):
        """Sets the backup_entity of this GetBackupByStorageQueryDescription.


        :param backup_entity: The backup_entity of this GetBackupByStorageQueryDescription.
        :type backup_entity: BackupEntity
        """
        if backup_entity is None:
            raise ValueError("Invalid value for `backup_entity`, must not be `None`")

        self._backup_entity = backup_entity

    @property
    def end_date_time_filter(self):
        """Gets the end_date_time_filter of this GetBackupByStorageQueryDescription.

        Specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are enumerated till the end.

        :return: The end_date_time_filter of this GetBackupByStorageQueryDescription.
        :rtype: datetime
        """
        return self._end_date_time_filter

    @end_date_time_filter.setter
    def end_date_time_filter(self, end_date_time_filter):
        """Sets the end_date_time_filter of this GetBackupByStorageQueryDescription.

        Specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are enumerated till the end.

        :param end_date_time_filter: The end_date_time_filter of this GetBackupByStorageQueryDescription.
        :type end_date_time_filter: datetime
        """

        self._end_date_time_filter = end_date_time_filter

    @property
    def latest(self):
        """Gets the latest of this GetBackupByStorageQueryDescription.

        If specified as true, gets the most recent backup (within the specified time range) for every partition under the specified backup entity.

        :return: The latest of this GetBackupByStorageQueryDescription.
        :rtype: bool
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this GetBackupByStorageQueryDescription.

        If specified as true, gets the most recent backup (within the specified time range) for every partition under the specified backup entity.

        :param latest: The latest of this GetBackupByStorageQueryDescription.
        :type latest: bool
        """

        self._latest = latest

    @property
    def start_date_time_filter(self):
        """Gets the start_date_time_filter of this GetBackupByStorageQueryDescription.

        Specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are enumerated from the beginning.

        :return: The start_date_time_filter of this GetBackupByStorageQueryDescription.
        :rtype: datetime
        """
        return self._start_date_time_filter

    @start_date_time_filter.setter
    def start_date_time_filter(self, start_date_time_filter):
        """Sets the start_date_time_filter of this GetBackupByStorageQueryDescription.

        Specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are enumerated from the beginning.

        :param start_date_time_filter: The start_date_time_filter of this GetBackupByStorageQueryDescription.
        :type start_date_time_filter: datetime
        """

        self._start_date_time_filter = start_date_time_filter

    @property
    def storage(self):
        """Gets the storage of this GetBackupByStorageQueryDescription.


        :return: The storage of this GetBackupByStorageQueryDescription.
        :rtype: BackupStorageDescription
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this GetBackupByStorageQueryDescription.


        :param storage: The storage of this GetBackupByStorageQueryDescription.
        :type storage: BackupStorageDescription
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")

        self._storage = storage
