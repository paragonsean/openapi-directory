# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.replica_event import ReplicaEvent
from openapi_server import util


class ChaosReplicaRemovalScheduledEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fault_group_id: str=None, fault_id: str=None, service_uri: str=None, partition_id: str=None, replica_id: int=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ChaosReplicaRemovalScheduledEvent - a model defined in OpenAPI

        :param fault_group_id: The fault_group_id of this ChaosReplicaRemovalScheduledEvent.
        :param fault_id: The fault_id of this ChaosReplicaRemovalScheduledEvent.
        :param service_uri: The service_uri of this ChaosReplicaRemovalScheduledEvent.
        :param partition_id: The partition_id of this ChaosReplicaRemovalScheduledEvent.
        :param replica_id: The replica_id of this ChaosReplicaRemovalScheduledEvent.
        :param category: The category of this ChaosReplicaRemovalScheduledEvent.
        :param event_instance_id: The event_instance_id of this ChaosReplicaRemovalScheduledEvent.
        :param has_correlated_events: The has_correlated_events of this ChaosReplicaRemovalScheduledEvent.
        :param kind: The kind of this ChaosReplicaRemovalScheduledEvent.
        :param time_stamp: The time_stamp of this ChaosReplicaRemovalScheduledEvent.
        """
        self.openapi_types = {
            'fault_group_id': str,
            'fault_id': str,
            'service_uri': str,
            'partition_id': str,
            'replica_id': int,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'fault_group_id': 'FaultGroupId',
            'fault_id': 'FaultId',
            'service_uri': 'ServiceUri',
            'partition_id': 'PartitionId',
            'replica_id': 'ReplicaId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._fault_group_id = fault_group_id
        self._fault_id = fault_id
        self._service_uri = service_uri
        self._partition_id = partition_id
        self._replica_id = replica_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosReplicaRemovalScheduledEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosReplicaRemovalScheduledEvent of this ChaosReplicaRemovalScheduledEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fault_group_id(self):
        """Gets the fault_group_id of this ChaosReplicaRemovalScheduledEvent.

        Id of fault group.

        :return: The fault_group_id of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._fault_group_id

    @fault_group_id.setter
    def fault_group_id(self, fault_group_id):
        """Sets the fault_group_id of this ChaosReplicaRemovalScheduledEvent.

        Id of fault group.

        :param fault_group_id: The fault_group_id of this ChaosReplicaRemovalScheduledEvent.
        :type fault_group_id: str
        """
        if fault_group_id is None:
            raise ValueError("Invalid value for `fault_group_id`, must not be `None`")

        self._fault_group_id = fault_group_id

    @property
    def fault_id(self):
        """Gets the fault_id of this ChaosReplicaRemovalScheduledEvent.

        Id of fault.

        :return: The fault_id of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._fault_id

    @fault_id.setter
    def fault_id(self, fault_id):
        """Sets the fault_id of this ChaosReplicaRemovalScheduledEvent.

        Id of fault.

        :param fault_id: The fault_id of this ChaosReplicaRemovalScheduledEvent.
        :type fault_id: str
        """
        if fault_id is None:
            raise ValueError("Invalid value for `fault_id`, must not be `None`")

        self._fault_id = fault_id

    @property
    def service_uri(self):
        """Gets the service_uri of this ChaosReplicaRemovalScheduledEvent.

        Service name.

        :return: The service_uri of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._service_uri

    @service_uri.setter
    def service_uri(self, service_uri):
        """Sets the service_uri of this ChaosReplicaRemovalScheduledEvent.

        Service name.

        :param service_uri: The service_uri of this ChaosReplicaRemovalScheduledEvent.
        :type service_uri: str
        """
        if service_uri is None:
            raise ValueError("Invalid value for `service_uri`, must not be `None`")

        self._service_uri = service_uri

    @property
    def partition_id(self):
        """Gets the partition_id of this ChaosReplicaRemovalScheduledEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ChaosReplicaRemovalScheduledEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this ChaosReplicaRemovalScheduledEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def replica_id(self):
        """Gets the replica_id of this ChaosReplicaRemovalScheduledEvent.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :return: The replica_id of this ChaosReplicaRemovalScheduledEvent.
        :rtype: int
        """
        return self._replica_id

    @replica_id.setter
    def replica_id(self, replica_id):
        """Sets the replica_id of this ChaosReplicaRemovalScheduledEvent.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :param replica_id: The replica_id of this ChaosReplicaRemovalScheduledEvent.
        :type replica_id: int
        """
        if replica_id is None:
            raise ValueError("Invalid value for `replica_id`, must not be `None`")

        self._replica_id = replica_id

    @property
    def category(self):
        """Gets the category of this ChaosReplicaRemovalScheduledEvent.

        The category of event.

        :return: The category of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ChaosReplicaRemovalScheduledEvent.

        The category of event.

        :param category: The category of this ChaosReplicaRemovalScheduledEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ChaosReplicaRemovalScheduledEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ChaosReplicaRemovalScheduledEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ChaosReplicaRemovalScheduledEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ChaosReplicaRemovalScheduledEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ChaosReplicaRemovalScheduledEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ChaosReplicaRemovalScheduledEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ChaosReplicaRemovalScheduledEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ChaosReplicaRemovalScheduledEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ChaosReplicaRemovalScheduledEvent.


        :return: The kind of this ChaosReplicaRemovalScheduledEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChaosReplicaRemovalScheduledEvent.


        :param kind: The kind of this ChaosReplicaRemovalScheduledEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ChaosReplicaRemovalScheduledEvent.

        The time event was logged.

        :return: The time_stamp of this ChaosReplicaRemovalScheduledEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ChaosReplicaRemovalScheduledEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ChaosReplicaRemovalScheduledEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
