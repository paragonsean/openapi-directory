# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_scaling_policy import AutoScalingPolicy
from openapi_server.models.container_code_package_properties import ContainerCodePackageProperties
from openapi_server.models.diagnostics_ref import DiagnosticsRef
from openapi_server.models.health_state import HealthState
from openapi_server.models.network_ref import NetworkRef
from openapi_server.models.operating_system_type import OperatingSystemType
from openapi_server.models.resource_status import ResourceStatus
from openapi_server import util


class ServiceResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_packages: List[ContainerCodePackageProperties]=None, diagnostics: DiagnosticsRef=None, network_refs: List[NetworkRef]=None, os_type: OperatingSystemType=None, auto_scaling_policies: List[AutoScalingPolicy]=None, description: str=None, health_state: HealthState=None, replica_count: int=None, status: ResourceStatus=None, status_details: str=None, unhealthy_evaluation: str=None):
        """ServiceResourceProperties - a model defined in OpenAPI

        :param code_packages: The code_packages of this ServiceResourceProperties.
        :param diagnostics: The diagnostics of this ServiceResourceProperties.
        :param network_refs: The network_refs of this ServiceResourceProperties.
        :param os_type: The os_type of this ServiceResourceProperties.
        :param auto_scaling_policies: The auto_scaling_policies of this ServiceResourceProperties.
        :param description: The description of this ServiceResourceProperties.
        :param health_state: The health_state of this ServiceResourceProperties.
        :param replica_count: The replica_count of this ServiceResourceProperties.
        :param status: The status of this ServiceResourceProperties.
        :param status_details: The status_details of this ServiceResourceProperties.
        :param unhealthy_evaluation: The unhealthy_evaluation of this ServiceResourceProperties.
        """
        self.openapi_types = {
            'code_packages': List[ContainerCodePackageProperties],
            'diagnostics': DiagnosticsRef,
            'network_refs': List[NetworkRef],
            'os_type': OperatingSystemType,
            'auto_scaling_policies': List[AutoScalingPolicy],
            'description': str,
            'health_state': HealthState,
            'replica_count': int,
            'status': ResourceStatus,
            'status_details': str,
            'unhealthy_evaluation': str
        }

        self.attribute_map = {
            'code_packages': 'codePackages',
            'diagnostics': 'diagnostics',
            'network_refs': 'networkRefs',
            'os_type': 'osType',
            'auto_scaling_policies': 'autoScalingPolicies',
            'description': 'description',
            'health_state': 'healthState',
            'replica_count': 'replicaCount',
            'status': 'status',
            'status_details': 'statusDetails',
            'unhealthy_evaluation': 'unhealthyEvaluation'
        }

        self._code_packages = code_packages
        self._diagnostics = diagnostics
        self._network_refs = network_refs
        self._os_type = os_type
        self._auto_scaling_policies = auto_scaling_policies
        self._description = description
        self._health_state = health_state
        self._replica_count = replica_count
        self._status = status
        self._status_details = status_details
        self._unhealthy_evaluation = unhealthy_evaluation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceResourceProperties of this ServiceResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_packages(self):
        """Gets the code_packages of this ServiceResourceProperties.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :return: The code_packages of this ServiceResourceProperties.
        :rtype: List[ContainerCodePackageProperties]
        """
        return self._code_packages

    @code_packages.setter
    def code_packages(self, code_packages):
        """Sets the code_packages of this ServiceResourceProperties.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :param code_packages: The code_packages of this ServiceResourceProperties.
        :type code_packages: List[ContainerCodePackageProperties]
        """
        if code_packages is None:
            raise ValueError("Invalid value for `code_packages`, must not be `None`")

        self._code_packages = code_packages

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ServiceResourceProperties.


        :return: The diagnostics of this ServiceResourceProperties.
        :rtype: DiagnosticsRef
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ServiceResourceProperties.


        :param diagnostics: The diagnostics of this ServiceResourceProperties.
        :type diagnostics: DiagnosticsRef
        """

        self._diagnostics = diagnostics

    @property
    def network_refs(self):
        """Gets the network_refs of this ServiceResourceProperties.

        The names of the private networks that this service needs to be part of.

        :return: The network_refs of this ServiceResourceProperties.
        :rtype: List[NetworkRef]
        """
        return self._network_refs

    @network_refs.setter
    def network_refs(self, network_refs):
        """Sets the network_refs of this ServiceResourceProperties.

        The names of the private networks that this service needs to be part of.

        :param network_refs: The network_refs of this ServiceResourceProperties.
        :type network_refs: List[NetworkRef]
        """

        self._network_refs = network_refs

    @property
    def os_type(self):
        """Gets the os_type of this ServiceResourceProperties.


        :return: The os_type of this ServiceResourceProperties.
        :rtype: OperatingSystemType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ServiceResourceProperties.


        :param os_type: The os_type of this ServiceResourceProperties.
        :type os_type: OperatingSystemType
        """
        if os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")

        self._os_type = os_type

    @property
    def auto_scaling_policies(self):
        """Gets the auto_scaling_policies of this ServiceResourceProperties.

        Auto scaling policies

        :return: The auto_scaling_policies of this ServiceResourceProperties.
        :rtype: List[AutoScalingPolicy]
        """
        return self._auto_scaling_policies

    @auto_scaling_policies.setter
    def auto_scaling_policies(self, auto_scaling_policies):
        """Sets the auto_scaling_policies of this ServiceResourceProperties.

        Auto scaling policies

        :param auto_scaling_policies: The auto_scaling_policies of this ServiceResourceProperties.
        :type auto_scaling_policies: List[AutoScalingPolicy]
        """

        self._auto_scaling_policies = auto_scaling_policies

    @property
    def description(self):
        """Gets the description of this ServiceResourceProperties.

        User readable description of the service.

        :return: The description of this ServiceResourceProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceResourceProperties.

        User readable description of the service.

        :param description: The description of this ServiceResourceProperties.
        :type description: str
        """

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this ServiceResourceProperties.


        :return: The health_state of this ServiceResourceProperties.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ServiceResourceProperties.


        :param health_state: The health_state of this ServiceResourceProperties.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def replica_count(self):
        """Gets the replica_count of this ServiceResourceProperties.

        The number of replicas of the service to create. Defaults to 1 if not specified.

        :return: The replica_count of this ServiceResourceProperties.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this ServiceResourceProperties.

        The number of replicas of the service to create. Defaults to 1 if not specified.

        :param replica_count: The replica_count of this ServiceResourceProperties.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def status(self):
        """Gets the status of this ServiceResourceProperties.


        :return: The status of this ServiceResourceProperties.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceResourceProperties.


        :param status: The status of this ServiceResourceProperties.
        :type status: ResourceStatus
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this ServiceResourceProperties.

        Gives additional information about the current status of the service.

        :return: The status_details of this ServiceResourceProperties.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this ServiceResourceProperties.

        Gives additional information about the current status of the service.

        :param status_details: The status_details of this ServiceResourceProperties.
        :type status_details: str
        """

        self._status_details = status_details

    @property
    def unhealthy_evaluation(self):
        """Gets the unhealthy_evaluation of this ServiceResourceProperties.

        When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.

        :return: The unhealthy_evaluation of this ServiceResourceProperties.
        :rtype: str
        """
        return self._unhealthy_evaluation

    @unhealthy_evaluation.setter
    def unhealthy_evaluation(self, unhealthy_evaluation):
        """Sets the unhealthy_evaluation of this ServiceResourceProperties.

        When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.

        :param unhealthy_evaluation: The unhealthy_evaluation of this ServiceResourceProperties.
        :type unhealthy_evaluation: str
        """

        self._unhealthy_evaluation = unhealthy_evaluation
