# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_event_metadata import AnalysisEventMetadata
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.partition_event import PartitionEvent
from openapi_server import util


class PartitionAnalysisEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: AnalysisEventMetadata=None, partition_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """PartitionAnalysisEvent - a model defined in OpenAPI

        :param metadata: The metadata of this PartitionAnalysisEvent.
        :param partition_id: The partition_id of this PartitionAnalysisEvent.
        :param category: The category of this PartitionAnalysisEvent.
        :param event_instance_id: The event_instance_id of this PartitionAnalysisEvent.
        :param has_correlated_events: The has_correlated_events of this PartitionAnalysisEvent.
        :param kind: The kind of this PartitionAnalysisEvent.
        :param time_stamp: The time_stamp of this PartitionAnalysisEvent.
        """
        self.openapi_types = {
            'metadata': AnalysisEventMetadata,
            'partition_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'metadata': 'Metadata',
            'partition_id': 'PartitionId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._metadata = metadata
        self._partition_id = partition_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionAnalysisEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionAnalysisEvent of this PartitionAnalysisEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this PartitionAnalysisEvent.


        :return: The metadata of this PartitionAnalysisEvent.
        :rtype: AnalysisEventMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PartitionAnalysisEvent.


        :param metadata: The metadata of this PartitionAnalysisEvent.
        :type metadata: AnalysisEventMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionAnalysisEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionAnalysisEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionAnalysisEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionAnalysisEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def category(self):
        """Gets the category of this PartitionAnalysisEvent.

        The category of event.

        :return: The category of this PartitionAnalysisEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PartitionAnalysisEvent.

        The category of event.

        :param category: The category of this PartitionAnalysisEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this PartitionAnalysisEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this PartitionAnalysisEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this PartitionAnalysisEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this PartitionAnalysisEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this PartitionAnalysisEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this PartitionAnalysisEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this PartitionAnalysisEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this PartitionAnalysisEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this PartitionAnalysisEvent.


        :return: The kind of this PartitionAnalysisEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PartitionAnalysisEvent.


        :param kind: The kind of this PartitionAnalysisEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this PartitionAnalysisEvent.

        The time event was logged.

        :return: The time_stamp of this PartitionAnalysisEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this PartitionAnalysisEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this PartitionAnalysisEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
