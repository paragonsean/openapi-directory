# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_entity import BackupEntity
from openapi_server.models.backup_entity_kind import BackupEntityKind
from openapi_server import util


class ServiceBackupEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: str=None, entity_kind: BackupEntityKind=None):
        """ServiceBackupEntity - a model defined in OpenAPI

        :param service_name: The service_name of this ServiceBackupEntity.
        :param entity_kind: The entity_kind of this ServiceBackupEntity.
        """
        self.openapi_types = {
            'service_name': str,
            'entity_kind': BackupEntityKind
        }

        self.attribute_map = {
            'service_name': 'ServiceName',
            'entity_kind': 'EntityKind'
        }

        self._service_name = service_name
        self._entity_kind = entity_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceBackupEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceBackupEntity of this ServiceBackupEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this ServiceBackupEntity.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this ServiceBackupEntity.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceBackupEntity.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this ServiceBackupEntity.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def entity_kind(self):
        """Gets the entity_kind of this ServiceBackupEntity.


        :return: The entity_kind of this ServiceBackupEntity.
        :rtype: BackupEntityKind
        """
        return self._entity_kind

    @entity_kind.setter
    def entity_kind(self, entity_kind):
        """Sets the entity_kind of this ServiceBackupEntity.


        :param entity_kind: The entity_kind of this ServiceBackupEntity.
        :type entity_kind: BackupEntityKind
        """
        if entity_kind is None:
            raise ValueError("Invalid value for `entity_kind`, must not be `None`")

        self._entity_kind = entity_kind
