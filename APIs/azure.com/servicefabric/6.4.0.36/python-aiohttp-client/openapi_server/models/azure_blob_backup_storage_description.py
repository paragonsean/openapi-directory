# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_storage_description import BackupStorageDescription
from openapi_server.models.backup_storage_kind import BackupStorageKind
from openapi_server import util


class AzureBlobBackupStorageDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_string: str=None, container_name: str=None, friendly_name: str=None, storage_kind: BackupStorageKind=None):
        """AzureBlobBackupStorageDescription - a model defined in OpenAPI

        :param connection_string: The connection_string of this AzureBlobBackupStorageDescription.
        :param container_name: The container_name of this AzureBlobBackupStorageDescription.
        :param friendly_name: The friendly_name of this AzureBlobBackupStorageDescription.
        :param storage_kind: The storage_kind of this AzureBlobBackupStorageDescription.
        """
        self.openapi_types = {
            'connection_string': str,
            'container_name': str,
            'friendly_name': str,
            'storage_kind': BackupStorageKind
        }

        self.attribute_map = {
            'connection_string': 'ConnectionString',
            'container_name': 'ContainerName',
            'friendly_name': 'FriendlyName',
            'storage_kind': 'StorageKind'
        }

        self._connection_string = connection_string
        self._container_name = container_name
        self._friendly_name = friendly_name
        self._storage_kind = storage_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureBlobBackupStorageDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureBlobBackupStorageDescription of this AzureBlobBackupStorageDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_string(self):
        """Gets the connection_string of this AzureBlobBackupStorageDescription.

        The connection string to connect to the Azure blob store.

        :return: The connection_string of this AzureBlobBackupStorageDescription.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this AzureBlobBackupStorageDescription.

        The connection string to connect to the Azure blob store.

        :param connection_string: The connection_string of this AzureBlobBackupStorageDescription.
        :type connection_string: str
        """
        if connection_string is None:
            raise ValueError("Invalid value for `connection_string`, must not be `None`")

        self._connection_string = connection_string

    @property
    def container_name(self):
        """Gets the container_name of this AzureBlobBackupStorageDescription.

        The name of the container in the blob store to store and enumerate backups from.

        :return: The container_name of this AzureBlobBackupStorageDescription.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this AzureBlobBackupStorageDescription.

        The name of the container in the blob store to store and enumerate backups from.

        :param container_name: The container_name of this AzureBlobBackupStorageDescription.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AzureBlobBackupStorageDescription.

        Friendly name for this backup storage.

        :return: The friendly_name of this AzureBlobBackupStorageDescription.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AzureBlobBackupStorageDescription.

        Friendly name for this backup storage.

        :param friendly_name: The friendly_name of this AzureBlobBackupStorageDescription.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def storage_kind(self):
        """Gets the storage_kind of this AzureBlobBackupStorageDescription.


        :return: The storage_kind of this AzureBlobBackupStorageDescription.
        :rtype: BackupStorageKind
        """
        return self._storage_kind

    @storage_kind.setter
    def storage_kind(self, storage_kind):
        """Sets the storage_kind of this AzureBlobBackupStorageDescription.


        :param storage_kind: The storage_kind of this AzureBlobBackupStorageDescription.
        :type storage_kind: BackupStorageKind
        """
        if storage_kind is None:
            raise ValueError("Invalid value for `storage_kind`, must not be `None`")

        self._storage_kind = storage_kind
