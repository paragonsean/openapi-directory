# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationNewHealthReportEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_instance_id: int=None, description: str=None, health_state: str=None, _property: str=None, remove_when_expired: bool=None, sequence_number: int=None, source_id: str=None, source_utc_timestamp: datetime=None, time_to_live_ms: int=None, application_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ApplicationNewHealthReportEvent - a model defined in OpenAPI

        :param application_instance_id: The application_instance_id of this ApplicationNewHealthReportEvent.
        :param description: The description of this ApplicationNewHealthReportEvent.
        :param health_state: The health_state of this ApplicationNewHealthReportEvent.
        :param _property: The _property of this ApplicationNewHealthReportEvent.
        :param remove_when_expired: The remove_when_expired of this ApplicationNewHealthReportEvent.
        :param sequence_number: The sequence_number of this ApplicationNewHealthReportEvent.
        :param source_id: The source_id of this ApplicationNewHealthReportEvent.
        :param source_utc_timestamp: The source_utc_timestamp of this ApplicationNewHealthReportEvent.
        :param time_to_live_ms: The time_to_live_ms of this ApplicationNewHealthReportEvent.
        :param application_id: The application_id of this ApplicationNewHealthReportEvent.
        :param category: The category of this ApplicationNewHealthReportEvent.
        :param event_instance_id: The event_instance_id of this ApplicationNewHealthReportEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationNewHealthReportEvent.
        :param kind: The kind of this ApplicationNewHealthReportEvent.
        :param time_stamp: The time_stamp of this ApplicationNewHealthReportEvent.
        """
        self.openapi_types = {
            'application_instance_id': int,
            'description': str,
            'health_state': str,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': int,
            'source_id': str,
            'source_utc_timestamp': datetime,
            'time_to_live_ms': int,
            'application_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'application_instance_id': 'ApplicationInstanceId',
            'description': 'Description',
            'health_state': 'HealthState',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'source_id': 'SourceId',
            'source_utc_timestamp': 'SourceUtcTimestamp',
            'time_to_live_ms': 'TimeToLiveMs',
            'application_id': 'ApplicationId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._application_instance_id = application_instance_id
        self._description = description
        self._health_state = health_state
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._source_id = source_id
        self._source_utc_timestamp = source_utc_timestamp
        self._time_to_live_ms = time_to_live_ms
        self._application_id = application_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationNewHealthReportEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationNewHealthReportEvent of this ApplicationNewHealthReportEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_instance_id(self):
        """Gets the application_instance_id of this ApplicationNewHealthReportEvent.

        Id of Application instance.

        :return: The application_instance_id of this ApplicationNewHealthReportEvent.
        :rtype: int
        """
        return self._application_instance_id

    @application_instance_id.setter
    def application_instance_id(self, application_instance_id):
        """Sets the application_instance_id of this ApplicationNewHealthReportEvent.

        Id of Application instance.

        :param application_instance_id: The application_instance_id of this ApplicationNewHealthReportEvent.
        :type application_instance_id: int
        """
        if application_instance_id is None:
            raise ValueError("Invalid value for `application_instance_id`, must not be `None`")

        self._application_instance_id = application_instance_id

    @property
    def description(self):
        """Gets the description of this ApplicationNewHealthReportEvent.

        Description of report.

        :return: The description of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationNewHealthReportEvent.

        Description of report.

        :param description: The description of this ApplicationNewHealthReportEvent.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this ApplicationNewHealthReportEvent.

        Describes the property health state.

        :return: The health_state of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ApplicationNewHealthReportEvent.

        Describes the property health state.

        :param health_state: The health_state of this ApplicationNewHealthReportEvent.
        :type health_state: str
        """
        if health_state is None:
            raise ValueError("Invalid value for `health_state`, must not be `None`")

        self._health_state = health_state

    @property
    def _property(self):
        """Gets the _property of this ApplicationNewHealthReportEvent.

        Describes the property.

        :return: The _property of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ApplicationNewHealthReportEvent.

        Describes the property.

        :param _property: The _property of this ApplicationNewHealthReportEvent.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this ApplicationNewHealthReportEvent.

        Indicates the removal when it expires.

        :return: The remove_when_expired of this ApplicationNewHealthReportEvent.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this ApplicationNewHealthReportEvent.

        Indicates the removal when it expires.

        :param remove_when_expired: The remove_when_expired of this ApplicationNewHealthReportEvent.
        :type remove_when_expired: bool
        """
        if remove_when_expired is None:
            raise ValueError("Invalid value for `remove_when_expired`, must not be `None`")

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ApplicationNewHealthReportEvent.

        Sequence number of report.

        :return: The sequence_number of this ApplicationNewHealthReportEvent.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ApplicationNewHealthReportEvent.

        Sequence number of report.

        :param sequence_number: The sequence_number of this ApplicationNewHealthReportEvent.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")

        self._sequence_number = sequence_number

    @property
    def source_id(self):
        """Gets the source_id of this ApplicationNewHealthReportEvent.

        Id of report source.

        :return: The source_id of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ApplicationNewHealthReportEvent.

        Id of report source.

        :param source_id: The source_id of this ApplicationNewHealthReportEvent.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_utc_timestamp(self):
        """Gets the source_utc_timestamp of this ApplicationNewHealthReportEvent.

        Source time.

        :return: The source_utc_timestamp of this ApplicationNewHealthReportEvent.
        :rtype: datetime
        """
        return self._source_utc_timestamp

    @source_utc_timestamp.setter
    def source_utc_timestamp(self, source_utc_timestamp):
        """Sets the source_utc_timestamp of this ApplicationNewHealthReportEvent.

        Source time.

        :param source_utc_timestamp: The source_utc_timestamp of this ApplicationNewHealthReportEvent.
        :type source_utc_timestamp: datetime
        """
        if source_utc_timestamp is None:
            raise ValueError("Invalid value for `source_utc_timestamp`, must not be `None`")

        self._source_utc_timestamp = source_utc_timestamp

    @property
    def time_to_live_ms(self):
        """Gets the time_to_live_ms of this ApplicationNewHealthReportEvent.

        Time to live in milli-seconds.

        :return: The time_to_live_ms of this ApplicationNewHealthReportEvent.
        :rtype: int
        """
        return self._time_to_live_ms

    @time_to_live_ms.setter
    def time_to_live_ms(self, time_to_live_ms):
        """Sets the time_to_live_ms of this ApplicationNewHealthReportEvent.

        Time to live in milli-seconds.

        :param time_to_live_ms: The time_to_live_ms of this ApplicationNewHealthReportEvent.
        :type time_to_live_ms: int
        """
        if time_to_live_ms is None:
            raise ValueError("Invalid value for `time_to_live_ms`, must not be `None`")

        self._time_to_live_ms = time_to_live_ms

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationNewHealthReportEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationNewHealthReportEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationNewHealthReportEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def category(self):
        """Gets the category of this ApplicationNewHealthReportEvent.

        The category of event.

        :return: The category of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApplicationNewHealthReportEvent.

        The category of event.

        :param category: The category of this ApplicationNewHealthReportEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationNewHealthReportEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationNewHealthReportEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationNewHealthReportEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationNewHealthReportEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationNewHealthReportEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationNewHealthReportEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationNewHealthReportEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationNewHealthReportEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationNewHealthReportEvent.


        :return: The kind of this ApplicationNewHealthReportEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationNewHealthReportEvent.


        :param kind: The kind of this ApplicationNewHealthReportEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationNewHealthReportEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationNewHealthReportEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationNewHealthReportEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationNewHealthReportEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
