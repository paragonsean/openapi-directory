# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_package_entry_point import CodePackageEntryPoint
from openapi_server.models.deployment_status import DeploymentStatus
from openapi_server.models.host_isolation_mode import HostIsolationMode
from openapi_server.models.host_type import HostType
from openapi_server import util


class DeployedCodePackageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_isolation_mode: HostIsolationMode=None, host_type: HostType=None, main_entry_point: CodePackageEntryPoint=None, name: str=None, run_frequency_interval: str=None, service_manifest_name: str=None, service_package_activation_id: str=None, setup_entry_point: CodePackageEntryPoint=None, status: DeploymentStatus=None, version: str=None):
        """DeployedCodePackageInfo - a model defined in OpenAPI

        :param host_isolation_mode: The host_isolation_mode of this DeployedCodePackageInfo.
        :param host_type: The host_type of this DeployedCodePackageInfo.
        :param main_entry_point: The main_entry_point of this DeployedCodePackageInfo.
        :param name: The name of this DeployedCodePackageInfo.
        :param run_frequency_interval: The run_frequency_interval of this DeployedCodePackageInfo.
        :param service_manifest_name: The service_manifest_name of this DeployedCodePackageInfo.
        :param service_package_activation_id: The service_package_activation_id of this DeployedCodePackageInfo.
        :param setup_entry_point: The setup_entry_point of this DeployedCodePackageInfo.
        :param status: The status of this DeployedCodePackageInfo.
        :param version: The version of this DeployedCodePackageInfo.
        """
        self.openapi_types = {
            'host_isolation_mode': HostIsolationMode,
            'host_type': HostType,
            'main_entry_point': CodePackageEntryPoint,
            'name': str,
            'run_frequency_interval': str,
            'service_manifest_name': str,
            'service_package_activation_id': str,
            'setup_entry_point': CodePackageEntryPoint,
            'status': DeploymentStatus,
            'version': str
        }

        self.attribute_map = {
            'host_isolation_mode': 'HostIsolationMode',
            'host_type': 'HostType',
            'main_entry_point': 'MainEntryPoint',
            'name': 'Name',
            'run_frequency_interval': 'RunFrequencyInterval',
            'service_manifest_name': 'ServiceManifestName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'setup_entry_point': 'SetupEntryPoint',
            'status': 'Status',
            'version': 'Version'
        }

        self._host_isolation_mode = host_isolation_mode
        self._host_type = host_type
        self._main_entry_point = main_entry_point
        self._name = name
        self._run_frequency_interval = run_frequency_interval
        self._service_manifest_name = service_manifest_name
        self._service_package_activation_id = service_package_activation_id
        self._setup_entry_point = setup_entry_point
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedCodePackageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedCodePackageInfo of this DeployedCodePackageInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_isolation_mode(self):
        """Gets the host_isolation_mode of this DeployedCodePackageInfo.


        :return: The host_isolation_mode of this DeployedCodePackageInfo.
        :rtype: HostIsolationMode
        """
        return self._host_isolation_mode

    @host_isolation_mode.setter
    def host_isolation_mode(self, host_isolation_mode):
        """Sets the host_isolation_mode of this DeployedCodePackageInfo.


        :param host_isolation_mode: The host_isolation_mode of this DeployedCodePackageInfo.
        :type host_isolation_mode: HostIsolationMode
        """

        self._host_isolation_mode = host_isolation_mode

    @property
    def host_type(self):
        """Gets the host_type of this DeployedCodePackageInfo.


        :return: The host_type of this DeployedCodePackageInfo.
        :rtype: HostType
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this DeployedCodePackageInfo.


        :param host_type: The host_type of this DeployedCodePackageInfo.
        :type host_type: HostType
        """

        self._host_type = host_type

    @property
    def main_entry_point(self):
        """Gets the main_entry_point of this DeployedCodePackageInfo.


        :return: The main_entry_point of this DeployedCodePackageInfo.
        :rtype: CodePackageEntryPoint
        """
        return self._main_entry_point

    @main_entry_point.setter
    def main_entry_point(self, main_entry_point):
        """Sets the main_entry_point of this DeployedCodePackageInfo.


        :param main_entry_point: The main_entry_point of this DeployedCodePackageInfo.
        :type main_entry_point: CodePackageEntryPoint
        """

        self._main_entry_point = main_entry_point

    @property
    def name(self):
        """Gets the name of this DeployedCodePackageInfo.

        The name of the code package defined in the service manifest.

        :return: The name of this DeployedCodePackageInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeployedCodePackageInfo.

        The name of the code package defined in the service manifest.

        :param name: The name of this DeployedCodePackageInfo.
        :type name: str
        """

        self._name = name

    @property
    def run_frequency_interval(self):
        """Gets the run_frequency_interval of this DeployedCodePackageInfo.

        The interval at which code package is run. This is used for periodic code package.

        :return: The run_frequency_interval of this DeployedCodePackageInfo.
        :rtype: str
        """
        return self._run_frequency_interval

    @run_frequency_interval.setter
    def run_frequency_interval(self, run_frequency_interval):
        """Sets the run_frequency_interval of this DeployedCodePackageInfo.

        The interval at which code package is run. This is used for periodic code package.

        :param run_frequency_interval: The run_frequency_interval of this DeployedCodePackageInfo.
        :type run_frequency_interval: str
        """

        self._run_frequency_interval = run_frequency_interval

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployedCodePackageInfo.

        The name of the service manifest.

        :return: The service_manifest_name of this DeployedCodePackageInfo.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployedCodePackageInfo.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this DeployedCodePackageInfo.
        :type service_manifest_name: str
        """

        self._service_manifest_name = service_manifest_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this DeployedCodePackageInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.

        :return: The service_package_activation_id of this DeployedCodePackageInfo.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this DeployedCodePackageInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.

        :param service_package_activation_id: The service_package_activation_id of this DeployedCodePackageInfo.
        :type service_package_activation_id: str
        """

        self._service_package_activation_id = service_package_activation_id

    @property
    def setup_entry_point(self):
        """Gets the setup_entry_point of this DeployedCodePackageInfo.


        :return: The setup_entry_point of this DeployedCodePackageInfo.
        :rtype: CodePackageEntryPoint
        """
        return self._setup_entry_point

    @setup_entry_point.setter
    def setup_entry_point(self, setup_entry_point):
        """Sets the setup_entry_point of this DeployedCodePackageInfo.


        :param setup_entry_point: The setup_entry_point of this DeployedCodePackageInfo.
        :type setup_entry_point: CodePackageEntryPoint
        """

        self._setup_entry_point = setup_entry_point

    @property
    def status(self):
        """Gets the status of this DeployedCodePackageInfo.


        :return: The status of this DeployedCodePackageInfo.
        :rtype: DeploymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeployedCodePackageInfo.


        :param status: The status of this DeployedCodePackageInfo.
        :type status: DeploymentStatus
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this DeployedCodePackageInfo.

        The version of the code package specified in service manifest.

        :return: The version of this DeployedCodePackageInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeployedCodePackageInfo.

        The version of the code package specified in service manifest.

        :param version: The version of this DeployedCodePackageInfo.
        :type version: str
        """

        self._version = version
