# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_info import FileInfo
from openapi_server.models.folder_info import FolderInfo
from openapi_server import util


class ImageStoreContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, store_files: List[FileInfo]=None, store_folders: List[FolderInfo]=None):
        """ImageStoreContent - a model defined in OpenAPI

        :param store_files: The store_files of this ImageStoreContent.
        :param store_folders: The store_folders of this ImageStoreContent.
        """
        self.openapi_types = {
            'store_files': List[FileInfo],
            'store_folders': List[FolderInfo]
        }

        self.attribute_map = {
            'store_files': 'StoreFiles',
            'store_folders': 'StoreFolders'
        }

        self._store_files = store_files
        self._store_folders = store_folders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageStoreContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageStoreContent of this ImageStoreContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def store_files(self):
        """Gets the store_files of this ImageStoreContent.

        The list of image store file info objects represents files found under the given image store relative path.

        :return: The store_files of this ImageStoreContent.
        :rtype: List[FileInfo]
        """
        return self._store_files

    @store_files.setter
    def store_files(self, store_files):
        """Sets the store_files of this ImageStoreContent.

        The list of image store file info objects represents files found under the given image store relative path.

        :param store_files: The store_files of this ImageStoreContent.
        :type store_files: List[FileInfo]
        """

        self._store_files = store_files

    @property
    def store_folders(self):
        """Gets the store_folders of this ImageStoreContent.

        The list of image store folder info objects represents subfolders found under the given image store relative path.

        :return: The store_folders of this ImageStoreContent.
        :rtype: List[FolderInfo]
        """
        return self._store_folders

    @store_folders.setter
    def store_folders(self, store_folders):
        """Sets the store_folders of this ImageStoreContent.

        The list of image store folder info objects represents subfolders found under the given image store relative path.

        :param store_folders: The store_folders of this ImageStoreContent.
        :type store_folders: List[FolderInfo]
        """

        self._store_folders = store_folders
