# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplicaHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state_filter: int=None, replica_or_instance_id_filter: str=None):
        """ReplicaHealthStateFilter - a model defined in OpenAPI

        :param health_state_filter: The health_state_filter of this ReplicaHealthStateFilter.
        :param replica_or_instance_id_filter: The replica_or_instance_id_filter of this ReplicaHealthStateFilter.
        """
        self.openapi_types = {
            'health_state_filter': int,
            'replica_or_instance_id_filter': str
        }

        self.attribute_map = {
            'health_state_filter': 'HealthStateFilter',
            'replica_or_instance_id_filter': 'ReplicaOrInstanceIdFilter'
        }

        self._health_state_filter = health_state_filter
        self._replica_or_instance_id_filter = replica_or_instance_id_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaHealthStateFilter of this ReplicaHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this ReplicaHealthStateFilter.

        The filter for the health state of the replicas. It allows selecting replicas if they match the desired health states. The possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state. If not specified, default value is None, unless the replica ID is specified. If the filter has default value and replica ID is specified, the matching replica is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :return: The health_state_filter of this ReplicaHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this ReplicaHealthStateFilter.

        The filter for the health state of the replicas. It allows selecting replicas if they match the desired health states. The possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state. If not specified, default value is None, unless the replica ID is specified. If the filter has default value and replica ID is specified, the matching replica is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.

        :param health_state_filter: The health_state_filter of this ReplicaHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def replica_or_instance_id_filter(self):
        """Gets the replica_or_instance_id_filter of this ReplicaHealthStateFilter.

        Id of the stateful service replica or stateless service instance that matches the filter. The filter is applied only to the specified replica, if it exists. If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter. If the replica exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :return: The replica_or_instance_id_filter of this ReplicaHealthStateFilter.
        :rtype: str
        """
        return self._replica_or_instance_id_filter

    @replica_or_instance_id_filter.setter
    def replica_or_instance_id_filter(self, replica_or_instance_id_filter):
        """Sets the replica_or_instance_id_filter of this ReplicaHealthStateFilter.

        Id of the stateful service replica or stateless service instance that matches the filter. The filter is applied only to the specified replica, if it exists. If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter. If the replica exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.

        :param replica_or_instance_id_filter: The replica_or_instance_id_filter of this ReplicaHealthStateFilter.
        :type replica_or_instance_id_filter: str
        """

        self._replica_or_instance_id_filter = replica_or_instance_id_filter
