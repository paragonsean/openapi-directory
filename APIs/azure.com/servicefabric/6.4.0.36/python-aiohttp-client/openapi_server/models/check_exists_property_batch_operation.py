# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_batch_operation import PropertyBatchOperation
from openapi_server.models.property_batch_operation_kind import PropertyBatchOperationKind
from openapi_server import util


class CheckExistsPropertyBatchOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exists: bool=None, kind: PropertyBatchOperationKind=None, property_name: str=None):
        """CheckExistsPropertyBatchOperation - a model defined in OpenAPI

        :param exists: The exists of this CheckExistsPropertyBatchOperation.
        :param kind: The kind of this CheckExistsPropertyBatchOperation.
        :param property_name: The property_name of this CheckExistsPropertyBatchOperation.
        """
        self.openapi_types = {
            'exists': bool,
            'kind': PropertyBatchOperationKind,
            'property_name': str
        }

        self.attribute_map = {
            'exists': 'Exists',
            'kind': 'Kind',
            'property_name': 'PropertyName'
        }

        self._exists = exists
        self._kind = kind
        self._property_name = property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckExistsPropertyBatchOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckExistsPropertyBatchOperation of this CheckExistsPropertyBatchOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exists(self):
        """Gets the exists of this CheckExistsPropertyBatchOperation.

        Whether or not the property should exist for the operation to pass.

        :return: The exists of this CheckExistsPropertyBatchOperation.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this CheckExistsPropertyBatchOperation.

        Whether or not the property should exist for the operation to pass.

        :param exists: The exists of this CheckExistsPropertyBatchOperation.
        :type exists: bool
        """
        if exists is None:
            raise ValueError("Invalid value for `exists`, must not be `None`")

        self._exists = exists

    @property
    def kind(self):
        """Gets the kind of this CheckExistsPropertyBatchOperation.


        :return: The kind of this CheckExistsPropertyBatchOperation.
        :rtype: PropertyBatchOperationKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CheckExistsPropertyBatchOperation.


        :param kind: The kind of this CheckExistsPropertyBatchOperation.
        :type kind: PropertyBatchOperationKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def property_name(self):
        """Gets the property_name of this CheckExistsPropertyBatchOperation.

        The name of the Service Fabric property.

        :return: The property_name of this CheckExistsPropertyBatchOperation.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this CheckExistsPropertyBatchOperation.

        The name of the Service Fabric property.

        :param property_name: The property_name of this CheckExistsPropertyBatchOperation.
        :type property_name: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")

        self._property_name = property_name
