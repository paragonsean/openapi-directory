# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server import util


class ReplicaHealthStateChunk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replica_or_instance_id: str=None, health_state: HealthState=None):
        """ReplicaHealthStateChunk - a model defined in OpenAPI

        :param replica_or_instance_id: The replica_or_instance_id of this ReplicaHealthStateChunk.
        :param health_state: The health_state of this ReplicaHealthStateChunk.
        """
        self.openapi_types = {
            'replica_or_instance_id': str,
            'health_state': HealthState
        }

        self.attribute_map = {
            'replica_or_instance_id': 'ReplicaOrInstanceId',
            'health_state': 'HealthState'
        }

        self._replica_or_instance_id = replica_or_instance_id
        self._health_state = health_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaHealthStateChunk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaHealthStateChunk of this ReplicaHealthStateChunk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replica_or_instance_id(self):
        """Gets the replica_or_instance_id of this ReplicaHealthStateChunk.

        Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.

        :return: The replica_or_instance_id of this ReplicaHealthStateChunk.
        :rtype: str
        """
        return self._replica_or_instance_id

    @replica_or_instance_id.setter
    def replica_or_instance_id(self, replica_or_instance_id):
        """Sets the replica_or_instance_id of this ReplicaHealthStateChunk.

        Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.

        :param replica_or_instance_id: The replica_or_instance_id of this ReplicaHealthStateChunk.
        :type replica_or_instance_id: str
        """

        self._replica_or_instance_id = replica_or_instance_id

    @property
    def health_state(self):
        """Gets the health_state of this ReplicaHealthStateChunk.


        :return: The health_state of this ReplicaHealthStateChunk.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ReplicaHealthStateChunk.


        :param health_state: The health_state of this ReplicaHealthStateChunk.
        :type health_state: HealthState
        """

        self._health_state = health_state
