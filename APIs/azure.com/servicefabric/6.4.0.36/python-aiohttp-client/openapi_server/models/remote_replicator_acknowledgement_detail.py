# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteReplicatorAcknowledgementDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_apply_duration: str=None, average_receive_duration: str=None, not_received_count: str=None, received_and_not_applied_count: str=None):
        """RemoteReplicatorAcknowledgementDetail - a model defined in OpenAPI

        :param average_apply_duration: The average_apply_duration of this RemoteReplicatorAcknowledgementDetail.
        :param average_receive_duration: The average_receive_duration of this RemoteReplicatorAcknowledgementDetail.
        :param not_received_count: The not_received_count of this RemoteReplicatorAcknowledgementDetail.
        :param received_and_not_applied_count: The received_and_not_applied_count of this RemoteReplicatorAcknowledgementDetail.
        """
        self.openapi_types = {
            'average_apply_duration': str,
            'average_receive_duration': str,
            'not_received_count': str,
            'received_and_not_applied_count': str
        }

        self.attribute_map = {
            'average_apply_duration': 'AverageApplyDuration',
            'average_receive_duration': 'AverageReceiveDuration',
            'not_received_count': 'NotReceivedCount',
            'received_and_not_applied_count': 'ReceivedAndNotAppliedCount'
        }

        self._average_apply_duration = average_apply_duration
        self._average_receive_duration = average_receive_duration
        self._not_received_count = not_received_count
        self._received_and_not_applied_count = received_and_not_applied_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteReplicatorAcknowledgementDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteReplicatorAcknowledgementDetail of this RemoteReplicatorAcknowledgementDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_apply_duration(self):
        """Gets the average_apply_duration of this RemoteReplicatorAcknowledgementDetail.

        Represents the average duration it takes for the remote replicator to apply an operation. This usually entails writing the operation to disk.

        :return: The average_apply_duration of this RemoteReplicatorAcknowledgementDetail.
        :rtype: str
        """
        return self._average_apply_duration

    @average_apply_duration.setter
    def average_apply_duration(self, average_apply_duration):
        """Sets the average_apply_duration of this RemoteReplicatorAcknowledgementDetail.

        Represents the average duration it takes for the remote replicator to apply an operation. This usually entails writing the operation to disk.

        :param average_apply_duration: The average_apply_duration of this RemoteReplicatorAcknowledgementDetail.
        :type average_apply_duration: str
        """

        self._average_apply_duration = average_apply_duration

    @property
    def average_receive_duration(self):
        """Gets the average_receive_duration of this RemoteReplicatorAcknowledgementDetail.

        Represents the average duration it takes for the remote replicator to receive an operation.

        :return: The average_receive_duration of this RemoteReplicatorAcknowledgementDetail.
        :rtype: str
        """
        return self._average_receive_duration

    @average_receive_duration.setter
    def average_receive_duration(self, average_receive_duration):
        """Sets the average_receive_duration of this RemoteReplicatorAcknowledgementDetail.

        Represents the average duration it takes for the remote replicator to receive an operation.

        :param average_receive_duration: The average_receive_duration of this RemoteReplicatorAcknowledgementDetail.
        :type average_receive_duration: str
        """

        self._average_receive_duration = average_receive_duration

    @property
    def not_received_count(self):
        """Gets the not_received_count of this RemoteReplicatorAcknowledgementDetail.

        Represents the number of operations not yet received by a remote replicator.

        :return: The not_received_count of this RemoteReplicatorAcknowledgementDetail.
        :rtype: str
        """
        return self._not_received_count

    @not_received_count.setter
    def not_received_count(self, not_received_count):
        """Sets the not_received_count of this RemoteReplicatorAcknowledgementDetail.

        Represents the number of operations not yet received by a remote replicator.

        :param not_received_count: The not_received_count of this RemoteReplicatorAcknowledgementDetail.
        :type not_received_count: str
        """

        self._not_received_count = not_received_count

    @property
    def received_and_not_applied_count(self):
        """Gets the received_and_not_applied_count of this RemoteReplicatorAcknowledgementDetail.

        Represents the number of operations received and not yet applied by a remote replicator.

        :return: The received_and_not_applied_count of this RemoteReplicatorAcknowledgementDetail.
        :rtype: str
        """
        return self._received_and_not_applied_count

    @received_and_not_applied_count.setter
    def received_and_not_applied_count(self, received_and_not_applied_count):
        """Sets the received_and_not_applied_count of this RemoteReplicatorAcknowledgementDetail.

        Represents the number of operations received and not yet applied by a remote replicator.

        :param received_and_not_applied_count: The received_and_not_applied_count of this RemoteReplicatorAcknowledgementDetail.
        :type received_and_not_applied_count: str
        """

        self._received_and_not_applied_count = received_and_not_applied_count
