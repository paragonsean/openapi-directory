# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.service_event import ServiceEvent
from openapi_server import util


class ServiceCreatedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, application_type_name: str=None, is_stateful: bool=None, min_replica_set_size: int=None, partition_count: int=None, partition_id: str=None, service_instance: int=None, service_package_version: str=None, service_type_name: str=None, target_replica_set_size: int=None, service_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ServiceCreatedEvent - a model defined in OpenAPI

        :param application_name: The application_name of this ServiceCreatedEvent.
        :param application_type_name: The application_type_name of this ServiceCreatedEvent.
        :param is_stateful: The is_stateful of this ServiceCreatedEvent.
        :param min_replica_set_size: The min_replica_set_size of this ServiceCreatedEvent.
        :param partition_count: The partition_count of this ServiceCreatedEvent.
        :param partition_id: The partition_id of this ServiceCreatedEvent.
        :param service_instance: The service_instance of this ServiceCreatedEvent.
        :param service_package_version: The service_package_version of this ServiceCreatedEvent.
        :param service_type_name: The service_type_name of this ServiceCreatedEvent.
        :param target_replica_set_size: The target_replica_set_size of this ServiceCreatedEvent.
        :param service_id: The service_id of this ServiceCreatedEvent.
        :param category: The category of this ServiceCreatedEvent.
        :param event_instance_id: The event_instance_id of this ServiceCreatedEvent.
        :param has_correlated_events: The has_correlated_events of this ServiceCreatedEvent.
        :param kind: The kind of this ServiceCreatedEvent.
        :param time_stamp: The time_stamp of this ServiceCreatedEvent.
        """
        self.openapi_types = {
            'application_name': str,
            'application_type_name': str,
            'is_stateful': bool,
            'min_replica_set_size': int,
            'partition_count': int,
            'partition_id': str,
            'service_instance': int,
            'service_package_version': str,
            'service_type_name': str,
            'target_replica_set_size': int,
            'service_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'application_type_name': 'ApplicationTypeName',
            'is_stateful': 'IsStateful',
            'min_replica_set_size': 'MinReplicaSetSize',
            'partition_count': 'PartitionCount',
            'partition_id': 'PartitionId',
            'service_instance': 'ServiceInstance',
            'service_package_version': 'ServicePackageVersion',
            'service_type_name': 'ServiceTypeName',
            'target_replica_set_size': 'TargetReplicaSetSize',
            'service_id': 'ServiceId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._application_name = application_name
        self._application_type_name = application_type_name
        self._is_stateful = is_stateful
        self._min_replica_set_size = min_replica_set_size
        self._partition_count = partition_count
        self._partition_id = partition_id
        self._service_instance = service_instance
        self._service_package_version = service_package_version
        self._service_type_name = service_type_name
        self._target_replica_set_size = target_replica_set_size
        self._service_id = service_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceCreatedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceCreatedEvent of this ServiceCreatedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this ServiceCreatedEvent.

        Application name.

        :return: The application_name of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ServiceCreatedEvent.

        Application name.

        :param application_name: The application_name of this ServiceCreatedEvent.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ServiceCreatedEvent.

        Application type name.

        :return: The application_type_name of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ServiceCreatedEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ServiceCreatedEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def is_stateful(self):
        """Gets the is_stateful of this ServiceCreatedEvent.

        Indicates if Service is stateful.

        :return: The is_stateful of this ServiceCreatedEvent.
        :rtype: bool
        """
        return self._is_stateful

    @is_stateful.setter
    def is_stateful(self, is_stateful):
        """Sets the is_stateful of this ServiceCreatedEvent.

        Indicates if Service is stateful.

        :param is_stateful: The is_stateful of this ServiceCreatedEvent.
        :type is_stateful: bool
        """
        if is_stateful is None:
            raise ValueError("Invalid value for `is_stateful`, must not be `None`")

        self._is_stateful = is_stateful

    @property
    def min_replica_set_size(self):
        """Gets the min_replica_set_size of this ServiceCreatedEvent.

        Minimum size of replicas set.

        :return: The min_replica_set_size of this ServiceCreatedEvent.
        :rtype: int
        """
        return self._min_replica_set_size

    @min_replica_set_size.setter
    def min_replica_set_size(self, min_replica_set_size):
        """Sets the min_replica_set_size of this ServiceCreatedEvent.

        Minimum size of replicas set.

        :param min_replica_set_size: The min_replica_set_size of this ServiceCreatedEvent.
        :type min_replica_set_size: int
        """
        if min_replica_set_size is None:
            raise ValueError("Invalid value for `min_replica_set_size`, must not be `None`")

        self._min_replica_set_size = min_replica_set_size

    @property
    def partition_count(self):
        """Gets the partition_count of this ServiceCreatedEvent.

        Number of partitions.

        :return: The partition_count of this ServiceCreatedEvent.
        :rtype: int
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this ServiceCreatedEvent.

        Number of partitions.

        :param partition_count: The partition_count of this ServiceCreatedEvent.
        :type partition_count: int
        """
        if partition_count is None:
            raise ValueError("Invalid value for `partition_count`, must not be `None`")

        self._partition_count = partition_count

    @property
    def partition_id(self):
        """Gets the partition_id of this ServiceCreatedEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ServiceCreatedEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this ServiceCreatedEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def service_instance(self):
        """Gets the service_instance of this ServiceCreatedEvent.

        Id of Service instance.

        :return: The service_instance of this ServiceCreatedEvent.
        :rtype: int
        """
        return self._service_instance

    @service_instance.setter
    def service_instance(self, service_instance):
        """Sets the service_instance of this ServiceCreatedEvent.

        Id of Service instance.

        :param service_instance: The service_instance of this ServiceCreatedEvent.
        :type service_instance: int
        """
        if service_instance is None:
            raise ValueError("Invalid value for `service_instance`, must not be `None`")

        self._service_instance = service_instance

    @property
    def service_package_version(self):
        """Gets the service_package_version of this ServiceCreatedEvent.

        Version of Service package.

        :return: The service_package_version of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._service_package_version

    @service_package_version.setter
    def service_package_version(self, service_package_version):
        """Sets the service_package_version of this ServiceCreatedEvent.

        Version of Service package.

        :param service_package_version: The service_package_version of this ServiceCreatedEvent.
        :type service_package_version: str
        """
        if service_package_version is None:
            raise ValueError("Invalid value for `service_package_version`, must not be `None`")

        self._service_package_version = service_package_version

    @property
    def service_type_name(self):
        """Gets the service_type_name of this ServiceCreatedEvent.

        Service type name.

        :return: The service_type_name of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this ServiceCreatedEvent.

        Service type name.

        :param service_type_name: The service_type_name of this ServiceCreatedEvent.
        :type service_type_name: str
        """
        if service_type_name is None:
            raise ValueError("Invalid value for `service_type_name`, must not be `None`")

        self._service_type_name = service_type_name

    @property
    def target_replica_set_size(self):
        """Gets the target_replica_set_size of this ServiceCreatedEvent.

        Size of target replicas set.

        :return: The target_replica_set_size of this ServiceCreatedEvent.
        :rtype: int
        """
        return self._target_replica_set_size

    @target_replica_set_size.setter
    def target_replica_set_size(self, target_replica_set_size):
        """Sets the target_replica_set_size of this ServiceCreatedEvent.

        Size of target replicas set.

        :param target_replica_set_size: The target_replica_set_size of this ServiceCreatedEvent.
        :type target_replica_set_size: int
        """
        if target_replica_set_size is None:
            raise ValueError("Invalid value for `target_replica_set_size`, must not be `None`")

        self._target_replica_set_size = target_replica_set_size

    @property
    def service_id(self):
        """Gets the service_id of this ServiceCreatedEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :return: The service_id of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceCreatedEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :param service_id: The service_id of this ServiceCreatedEvent.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def category(self):
        """Gets the category of this ServiceCreatedEvent.

        The category of event.

        :return: The category of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServiceCreatedEvent.

        The category of event.

        :param category: The category of this ServiceCreatedEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ServiceCreatedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ServiceCreatedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ServiceCreatedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ServiceCreatedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ServiceCreatedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ServiceCreatedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ServiceCreatedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ServiceCreatedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ServiceCreatedEvent.


        :return: The kind of this ServiceCreatedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ServiceCreatedEvent.


        :param kind: The kind of this ServiceCreatedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ServiceCreatedEvent.

        The time event was logged.

        :return: The time_stamp of this ServiceCreatedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ServiceCreatedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ServiceCreatedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
