# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_server.models.health_event import HealthEvent
from openapi_server.models.health_state import HealthState
from openapi_server.models.health_statistics import HealthStatistics
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class ReplicaHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_id: str=None, service_kind: ServiceKind=None, aggregated_health_state: HealthState=None, health_events: List[HealthEvent]=None, health_statistics: HealthStatistics=None, unhealthy_evaluations: List[HealthEvaluationWrapper]=None):
        """ReplicaHealth - a model defined in OpenAPI

        :param partition_id: The partition_id of this ReplicaHealth.
        :param service_kind: The service_kind of this ReplicaHealth.
        :param aggregated_health_state: The aggregated_health_state of this ReplicaHealth.
        :param health_events: The health_events of this ReplicaHealth.
        :param health_statistics: The health_statistics of this ReplicaHealth.
        :param unhealthy_evaluations: The unhealthy_evaluations of this ReplicaHealth.
        """
        self.openapi_types = {
            'partition_id': str,
            'service_kind': ServiceKind,
            'aggregated_health_state': HealthState,
            'health_events': List[HealthEvent],
            'health_statistics': HealthStatistics,
            'unhealthy_evaluations': List[HealthEvaluationWrapper]
        }

        self.attribute_map = {
            'partition_id': 'PartitionId',
            'service_kind': 'ServiceKind',
            'aggregated_health_state': 'AggregatedHealthState',
            'health_events': 'HealthEvents',
            'health_statistics': 'HealthStatistics',
            'unhealthy_evaluations': 'UnhealthyEvaluations'
        }

        self._partition_id = partition_id
        self._service_kind = service_kind
        self._aggregated_health_state = aggregated_health_state
        self._health_events = health_events
        self._health_statistics = health_statistics
        self._unhealthy_evaluations = unhealthy_evaluations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaHealth of this ReplicaHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_id(self):
        """Gets the partition_id of this ReplicaHealth.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this ReplicaHealth.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ReplicaHealth.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this ReplicaHealth.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def service_kind(self):
        """Gets the service_kind of this ReplicaHealth.


        :return: The service_kind of this ReplicaHealth.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this ReplicaHealth.


        :param service_kind: The service_kind of this ReplicaHealth.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this ReplicaHealth.


        :return: The aggregated_health_state of this ReplicaHealth.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this ReplicaHealth.


        :param aggregated_health_state: The aggregated_health_state of this ReplicaHealth.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def health_events(self):
        """Gets the health_events of this ReplicaHealth.

        The list of health events reported on the entity.

        :return: The health_events of this ReplicaHealth.
        :rtype: List[HealthEvent]
        """
        return self._health_events

    @health_events.setter
    def health_events(self, health_events):
        """Sets the health_events of this ReplicaHealth.

        The list of health events reported on the entity.

        :param health_events: The health_events of this ReplicaHealth.
        :type health_events: List[HealthEvent]
        """

        self._health_events = health_events

    @property
    def health_statistics(self):
        """Gets the health_statistics of this ReplicaHealth.


        :return: The health_statistics of this ReplicaHealth.
        :rtype: HealthStatistics
        """
        return self._health_statistics

    @health_statistics.setter
    def health_statistics(self, health_statistics):
        """Sets the health_statistics of this ReplicaHealth.


        :param health_statistics: The health_statistics of this ReplicaHealth.
        :type health_statistics: HealthStatistics
        """

        self._health_statistics = health_statistics

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this ReplicaHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :return: The unhealthy_evaluations of this ReplicaHealth.
        :rtype: List[HealthEvaluationWrapper]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this ReplicaHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :param unhealthy_evaluations: The unhealthy_evaluations of this ReplicaHealth.
        :type unhealthy_evaluations: List[HealthEvaluationWrapper]
        """

        self._unhealthy_evaluations = unhealthy_evaluations
