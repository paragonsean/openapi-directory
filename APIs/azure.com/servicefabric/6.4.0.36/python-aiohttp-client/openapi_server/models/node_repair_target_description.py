# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repair_target_description_base import RepairTargetDescriptionBase
from openapi_server.models.repair_target_kind import RepairTargetKind
from openapi_server import util


class NodeRepairTargetDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_names: List[str]=None, kind: RepairTargetKind=None):
        """NodeRepairTargetDescription - a model defined in OpenAPI

        :param node_names: The node_names of this NodeRepairTargetDescription.
        :param kind: The kind of this NodeRepairTargetDescription.
        """
        self.openapi_types = {
            'node_names': List[str],
            'kind': RepairTargetKind
        }

        self.attribute_map = {
            'node_names': 'NodeNames',
            'kind': 'Kind'
        }

        self._node_names = node_names
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeRepairTargetDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeRepairTargetDescription of this NodeRepairTargetDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_names(self):
        """Gets the node_names of this NodeRepairTargetDescription.

        The list of nodes targeted by a repair action.

        :return: The node_names of this NodeRepairTargetDescription.
        :rtype: List[str]
        """
        return self._node_names

    @node_names.setter
    def node_names(self, node_names):
        """Sets the node_names of this NodeRepairTargetDescription.

        The list of nodes targeted by a repair action.

        :param node_names: The node_names of this NodeRepairTargetDescription.
        :type node_names: List[str]
        """

        self._node_names = node_names

    @property
    def kind(self):
        """Gets the kind of this NodeRepairTargetDescription.


        :return: The kind of this NodeRepairTargetDescription.
        :rtype: RepairTargetKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NodeRepairTargetDescription.


        :param kind: The kind of this NodeRepairTargetDescription.
        :type kind: RepairTargetKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
