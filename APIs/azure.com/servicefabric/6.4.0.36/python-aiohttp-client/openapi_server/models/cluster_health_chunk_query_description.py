# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policies import ApplicationHealthPolicies
from openapi_server.models.application_health_state_filter import ApplicationHealthStateFilter
from openapi_server.models.cluster_health_policy import ClusterHealthPolicy
from openapi_server.models.node_health_state_filter import NodeHealthStateFilter
from openapi_server import util


class ClusterHealthChunkQueryDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_filters: List[ApplicationHealthStateFilter]=None, application_health_policies: ApplicationHealthPolicies=None, cluster_health_policy: ClusterHealthPolicy=None, node_filters: List[NodeHealthStateFilter]=None):
        """ClusterHealthChunkQueryDescription - a model defined in OpenAPI

        :param application_filters: The application_filters of this ClusterHealthChunkQueryDescription.
        :param application_health_policies: The application_health_policies of this ClusterHealthChunkQueryDescription.
        :param cluster_health_policy: The cluster_health_policy of this ClusterHealthChunkQueryDescription.
        :param node_filters: The node_filters of this ClusterHealthChunkQueryDescription.
        """
        self.openapi_types = {
            'application_filters': List[ApplicationHealthStateFilter],
            'application_health_policies': ApplicationHealthPolicies,
            'cluster_health_policy': ClusterHealthPolicy,
            'node_filters': List[NodeHealthStateFilter]
        }

        self.attribute_map = {
            'application_filters': 'ApplicationFilters',
            'application_health_policies': 'ApplicationHealthPolicies',
            'cluster_health_policy': 'ClusterHealthPolicy',
            'node_filters': 'NodeFilters'
        }

        self._application_filters = application_filters
        self._application_health_policies = application_health_policies
        self._cluster_health_policy = cluster_health_policy
        self._node_filters = node_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHealthChunkQueryDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHealthChunkQueryDescription of this ClusterHealthChunkQueryDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_filters(self):
        """Gets the application_filters of this ClusterHealthChunkQueryDescription.

        Defines a list of filters that specify which applications to be included in the returned cluster health chunk. If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple application filters. For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.

        :return: The application_filters of this ClusterHealthChunkQueryDescription.
        :rtype: List[ApplicationHealthStateFilter]
        """
        return self._application_filters

    @application_filters.setter
    def application_filters(self, application_filters):
        """Sets the application_filters of this ClusterHealthChunkQueryDescription.

        Defines a list of filters that specify which applications to be included in the returned cluster health chunk. If no filters are specified, no applications are returned. All the applications are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple application filters. For example, it can specify a filter to return all applications with health state Error and another filter to always include applications of a specified application type.

        :param application_filters: The application_filters of this ClusterHealthChunkQueryDescription.
        :type application_filters: List[ApplicationHealthStateFilter]
        """

        self._application_filters = application_filters

    @property
    def application_health_policies(self):
        """Gets the application_health_policies of this ClusterHealthChunkQueryDescription.


        :return: The application_health_policies of this ClusterHealthChunkQueryDescription.
        :rtype: ApplicationHealthPolicies
        """
        return self._application_health_policies

    @application_health_policies.setter
    def application_health_policies(self, application_health_policies):
        """Sets the application_health_policies of this ClusterHealthChunkQueryDescription.


        :param application_health_policies: The application_health_policies of this ClusterHealthChunkQueryDescription.
        :type application_health_policies: ApplicationHealthPolicies
        """

        self._application_health_policies = application_health_policies

    @property
    def cluster_health_policy(self):
        """Gets the cluster_health_policy of this ClusterHealthChunkQueryDescription.


        :return: The cluster_health_policy of this ClusterHealthChunkQueryDescription.
        :rtype: ClusterHealthPolicy
        """
        return self._cluster_health_policy

    @cluster_health_policy.setter
    def cluster_health_policy(self, cluster_health_policy):
        """Sets the cluster_health_policy of this ClusterHealthChunkQueryDescription.


        :param cluster_health_policy: The cluster_health_policy of this ClusterHealthChunkQueryDescription.
        :type cluster_health_policy: ClusterHealthPolicy
        """

        self._cluster_health_policy = cluster_health_policy

    @property
    def node_filters(self):
        """Gets the node_filters of this ClusterHealthChunkQueryDescription.

        Defines a list of filters that specify which nodes to be included in the returned cluster health chunk. If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple node filters. For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.

        :return: The node_filters of this ClusterHealthChunkQueryDescription.
        :rtype: List[NodeHealthStateFilter]
        """
        return self._node_filters

    @node_filters.setter
    def node_filters(self, node_filters):
        """Sets the node_filters of this ClusterHealthChunkQueryDescription.

        Defines a list of filters that specify which nodes to be included in the returned cluster health chunk. If no filters are specified, no nodes are returned. All the nodes are used to evaluate the cluster's aggregated health state, regardless of the input filters. The cluster health chunk query may specify multiple node filters. For example, it can specify a filter to return all nodes with health state Error and another filter to always include a node identified by its NodeName.

        :param node_filters: The node_filters of this ClusterHealthChunkQueryDescription.
        :type node_filters: List[NodeHealthStateFilter]
        """

        self._node_filters = node_filters
