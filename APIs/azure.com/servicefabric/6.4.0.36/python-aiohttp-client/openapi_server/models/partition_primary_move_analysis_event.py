# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_event_metadata import AnalysisEventMetadata
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.partition_analysis_event import PartitionAnalysisEvent
from openapi_server import util


class PartitionPrimaryMoveAnalysisEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_node: str=None, move_reason: str=None, previous_node: str=None, relevant_traces: str=None, when_move_completed: datetime=None, metadata: AnalysisEventMetadata=None, partition_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """PartitionPrimaryMoveAnalysisEvent - a model defined in OpenAPI

        :param current_node: The current_node of this PartitionPrimaryMoveAnalysisEvent.
        :param move_reason: The move_reason of this PartitionPrimaryMoveAnalysisEvent.
        :param previous_node: The previous_node of this PartitionPrimaryMoveAnalysisEvent.
        :param relevant_traces: The relevant_traces of this PartitionPrimaryMoveAnalysisEvent.
        :param when_move_completed: The when_move_completed of this PartitionPrimaryMoveAnalysisEvent.
        :param metadata: The metadata of this PartitionPrimaryMoveAnalysisEvent.
        :param partition_id: The partition_id of this PartitionPrimaryMoveAnalysisEvent.
        :param category: The category of this PartitionPrimaryMoveAnalysisEvent.
        :param event_instance_id: The event_instance_id of this PartitionPrimaryMoveAnalysisEvent.
        :param has_correlated_events: The has_correlated_events of this PartitionPrimaryMoveAnalysisEvent.
        :param kind: The kind of this PartitionPrimaryMoveAnalysisEvent.
        :param time_stamp: The time_stamp of this PartitionPrimaryMoveAnalysisEvent.
        """
        self.openapi_types = {
            'current_node': str,
            'move_reason': str,
            'previous_node': str,
            'relevant_traces': str,
            'when_move_completed': datetime,
            'metadata': AnalysisEventMetadata,
            'partition_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'current_node': 'CurrentNode',
            'move_reason': 'MoveReason',
            'previous_node': 'PreviousNode',
            'relevant_traces': 'RelevantTraces',
            'when_move_completed': 'WhenMoveCompleted',
            'metadata': 'Metadata',
            'partition_id': 'PartitionId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._current_node = current_node
        self._move_reason = move_reason
        self._previous_node = previous_node
        self._relevant_traces = relevant_traces
        self._when_move_completed = when_move_completed
        self._metadata = metadata
        self._partition_id = partition_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionPrimaryMoveAnalysisEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionPrimaryMoveAnalysisEvent of this PartitionPrimaryMoveAnalysisEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_node(self):
        """Gets the current_node of this PartitionPrimaryMoveAnalysisEvent.

        The name of a Service Fabric node.

        :return: The current_node of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._current_node

    @current_node.setter
    def current_node(self, current_node):
        """Sets the current_node of this PartitionPrimaryMoveAnalysisEvent.

        The name of a Service Fabric node.

        :param current_node: The current_node of this PartitionPrimaryMoveAnalysisEvent.
        :type current_node: str
        """
        if current_node is None:
            raise ValueError("Invalid value for `current_node`, must not be `None`")

        self._current_node = current_node

    @property
    def move_reason(self):
        """Gets the move_reason of this PartitionPrimaryMoveAnalysisEvent.

        Move reason.

        :return: The move_reason of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._move_reason

    @move_reason.setter
    def move_reason(self, move_reason):
        """Sets the move_reason of this PartitionPrimaryMoveAnalysisEvent.

        Move reason.

        :param move_reason: The move_reason of this PartitionPrimaryMoveAnalysisEvent.
        :type move_reason: str
        """
        if move_reason is None:
            raise ValueError("Invalid value for `move_reason`, must not be `None`")

        self._move_reason = move_reason

    @property
    def previous_node(self):
        """Gets the previous_node of this PartitionPrimaryMoveAnalysisEvent.

        The name of a Service Fabric node.

        :return: The previous_node of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._previous_node

    @previous_node.setter
    def previous_node(self, previous_node):
        """Sets the previous_node of this PartitionPrimaryMoveAnalysisEvent.

        The name of a Service Fabric node.

        :param previous_node: The previous_node of this PartitionPrimaryMoveAnalysisEvent.
        :type previous_node: str
        """
        if previous_node is None:
            raise ValueError("Invalid value for `previous_node`, must not be `None`")

        self._previous_node = previous_node

    @property
    def relevant_traces(self):
        """Gets the relevant_traces of this PartitionPrimaryMoveAnalysisEvent.

        Relevant traces.

        :return: The relevant_traces of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._relevant_traces

    @relevant_traces.setter
    def relevant_traces(self, relevant_traces):
        """Sets the relevant_traces of this PartitionPrimaryMoveAnalysisEvent.

        Relevant traces.

        :param relevant_traces: The relevant_traces of this PartitionPrimaryMoveAnalysisEvent.
        :type relevant_traces: str
        """
        if relevant_traces is None:
            raise ValueError("Invalid value for `relevant_traces`, must not be `None`")

        self._relevant_traces = relevant_traces

    @property
    def when_move_completed(self):
        """Gets the when_move_completed of this PartitionPrimaryMoveAnalysisEvent.

        Time when the move was completed.

        :return: The when_move_completed of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: datetime
        """
        return self._when_move_completed

    @when_move_completed.setter
    def when_move_completed(self, when_move_completed):
        """Sets the when_move_completed of this PartitionPrimaryMoveAnalysisEvent.

        Time when the move was completed.

        :param when_move_completed: The when_move_completed of this PartitionPrimaryMoveAnalysisEvent.
        :type when_move_completed: datetime
        """
        if when_move_completed is None:
            raise ValueError("Invalid value for `when_move_completed`, must not be `None`")

        self._when_move_completed = when_move_completed

    @property
    def metadata(self):
        """Gets the metadata of this PartitionPrimaryMoveAnalysisEvent.


        :return: The metadata of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: AnalysisEventMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PartitionPrimaryMoveAnalysisEvent.


        :param metadata: The metadata of this PartitionPrimaryMoveAnalysisEvent.
        :type metadata: AnalysisEventMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionPrimaryMoveAnalysisEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionPrimaryMoveAnalysisEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionPrimaryMoveAnalysisEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def category(self):
        """Gets the category of this PartitionPrimaryMoveAnalysisEvent.

        The category of event.

        :return: The category of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PartitionPrimaryMoveAnalysisEvent.

        The category of event.

        :param category: The category of this PartitionPrimaryMoveAnalysisEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this PartitionPrimaryMoveAnalysisEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this PartitionPrimaryMoveAnalysisEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this PartitionPrimaryMoveAnalysisEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this PartitionPrimaryMoveAnalysisEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this PartitionPrimaryMoveAnalysisEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this PartitionPrimaryMoveAnalysisEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this PartitionPrimaryMoveAnalysisEvent.


        :return: The kind of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PartitionPrimaryMoveAnalysisEvent.


        :param kind: The kind of this PartitionPrimaryMoveAnalysisEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this PartitionPrimaryMoveAnalysisEvent.

        The time event was logged.

        :return: The time_stamp of this PartitionPrimaryMoveAnalysisEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this PartitionPrimaryMoveAnalysisEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this PartitionPrimaryMoveAnalysisEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
