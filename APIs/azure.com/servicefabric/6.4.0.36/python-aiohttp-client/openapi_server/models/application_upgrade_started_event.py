# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationUpgradeStartedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_type_name: str=None, application_type_version: str=None, current_application_type_version: str=None, failure_action: str=None, rolling_upgrade_mode: str=None, upgrade_type: str=None, application_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ApplicationUpgradeStartedEvent - a model defined in OpenAPI

        :param application_type_name: The application_type_name of this ApplicationUpgradeStartedEvent.
        :param application_type_version: The application_type_version of this ApplicationUpgradeStartedEvent.
        :param current_application_type_version: The current_application_type_version of this ApplicationUpgradeStartedEvent.
        :param failure_action: The failure_action of this ApplicationUpgradeStartedEvent.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ApplicationUpgradeStartedEvent.
        :param upgrade_type: The upgrade_type of this ApplicationUpgradeStartedEvent.
        :param application_id: The application_id of this ApplicationUpgradeStartedEvent.
        :param category: The category of this ApplicationUpgradeStartedEvent.
        :param event_instance_id: The event_instance_id of this ApplicationUpgradeStartedEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeStartedEvent.
        :param kind: The kind of this ApplicationUpgradeStartedEvent.
        :param time_stamp: The time_stamp of this ApplicationUpgradeStartedEvent.
        """
        self.openapi_types = {
            'application_type_name': str,
            'application_type_version': str,
            'current_application_type_version': str,
            'failure_action': str,
            'rolling_upgrade_mode': str,
            'upgrade_type': str,
            'application_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            'current_application_type_version': 'CurrentApplicationTypeVersion',
            'failure_action': 'FailureAction',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'upgrade_type': 'UpgradeType',
            'application_id': 'ApplicationId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self._current_application_type_version = current_application_type_version
        self._failure_action = failure_action
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._upgrade_type = upgrade_type
        self._application_id = application_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradeStartedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradeStartedEvent of this ApplicationUpgradeStartedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ApplicationUpgradeStartedEvent.

        Application type name.

        :return: The application_type_name of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ApplicationUpgradeStartedEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ApplicationUpgradeStartedEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this ApplicationUpgradeStartedEvent.

        Target Application type version.

        :return: The application_type_version of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this ApplicationUpgradeStartedEvent.

        Target Application type version.

        :param application_type_version: The application_type_version of this ApplicationUpgradeStartedEvent.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def current_application_type_version(self):
        """Gets the current_application_type_version of this ApplicationUpgradeStartedEvent.

        Current Application type version.

        :return: The current_application_type_version of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._current_application_type_version

    @current_application_type_version.setter
    def current_application_type_version(self, current_application_type_version):
        """Sets the current_application_type_version of this ApplicationUpgradeStartedEvent.

        Current Application type version.

        :param current_application_type_version: The current_application_type_version of this ApplicationUpgradeStartedEvent.
        :type current_application_type_version: str
        """
        if current_application_type_version is None:
            raise ValueError("Invalid value for `current_application_type_version`, must not be `None`")

        self._current_application_type_version = current_application_type_version

    @property
    def failure_action(self):
        """Gets the failure_action of this ApplicationUpgradeStartedEvent.

        Action if failed.

        :return: The failure_action of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._failure_action

    @failure_action.setter
    def failure_action(self, failure_action):
        """Sets the failure_action of this ApplicationUpgradeStartedEvent.

        Action if failed.

        :param failure_action: The failure_action of this ApplicationUpgradeStartedEvent.
        :type failure_action: str
        """
        if failure_action is None:
            raise ValueError("Invalid value for `failure_action`, must not be `None`")

        self._failure_action = failure_action

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this ApplicationUpgradeStartedEvent.

        Mode of upgrade.

        :return: The rolling_upgrade_mode of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this ApplicationUpgradeStartedEvent.

        Mode of upgrade.

        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ApplicationUpgradeStartedEvent.
        :type rolling_upgrade_mode: str
        """
        if rolling_upgrade_mode is None:
            raise ValueError("Invalid value for `rolling_upgrade_mode`, must not be `None`")

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def upgrade_type(self):
        """Gets the upgrade_type of this ApplicationUpgradeStartedEvent.

        Type of upgrade.

        :return: The upgrade_type of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._upgrade_type

    @upgrade_type.setter
    def upgrade_type(self, upgrade_type):
        """Sets the upgrade_type of this ApplicationUpgradeStartedEvent.

        Type of upgrade.

        :param upgrade_type: The upgrade_type of this ApplicationUpgradeStartedEvent.
        :type upgrade_type: str
        """
        if upgrade_type is None:
            raise ValueError("Invalid value for `upgrade_type`, must not be `None`")

        self._upgrade_type = upgrade_type

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationUpgradeStartedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationUpgradeStartedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationUpgradeStartedEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def category(self):
        """Gets the category of this ApplicationUpgradeStartedEvent.

        The category of event.

        :return: The category of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApplicationUpgradeStartedEvent.

        The category of event.

        :param category: The category of this ApplicationUpgradeStartedEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationUpgradeStartedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationUpgradeStartedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationUpgradeStartedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationUpgradeStartedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationUpgradeStartedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationUpgradeStartedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationUpgradeStartedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeStartedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationUpgradeStartedEvent.


        :return: The kind of this ApplicationUpgradeStartedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationUpgradeStartedEvent.


        :param kind: The kind of this ApplicationUpgradeStartedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationUpgradeStartedEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationUpgradeStartedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationUpgradeStartedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationUpgradeStartedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
