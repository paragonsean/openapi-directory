# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthStateCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_count: int=None, ok_count: int=None, warning_count: int=None):
        """HealthStateCount - a model defined in OpenAPI

        :param error_count: The error_count of this HealthStateCount.
        :param ok_count: The ok_count of this HealthStateCount.
        :param warning_count: The warning_count of this HealthStateCount.
        """
        self.openapi_types = {
            'error_count': int,
            'ok_count': int,
            'warning_count': int
        }

        self.attribute_map = {
            'error_count': 'ErrorCount',
            'ok_count': 'OkCount',
            'warning_count': 'WarningCount'
        }

        self._error_count = error_count
        self._ok_count = ok_count
        self._warning_count = warning_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthStateCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthStateCount of this HealthStateCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_count(self):
        """Gets the error_count of this HealthStateCount.

        The number of health entities with aggregated health state Error.

        :return: The error_count of this HealthStateCount.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this HealthStateCount.

        The number of health entities with aggregated health state Error.

        :param error_count: The error_count of this HealthStateCount.
        :type error_count: int
        """
        if error_count is not None and error_count < 0:
            raise ValueError("Invalid value for `error_count`, must be a value greater than or equal to `0`")

        self._error_count = error_count

    @property
    def ok_count(self):
        """Gets the ok_count of this HealthStateCount.

        The number of health entities with aggregated health state Ok.

        :return: The ok_count of this HealthStateCount.
        :rtype: int
        """
        return self._ok_count

    @ok_count.setter
    def ok_count(self, ok_count):
        """Sets the ok_count of this HealthStateCount.

        The number of health entities with aggregated health state Ok.

        :param ok_count: The ok_count of this HealthStateCount.
        :type ok_count: int
        """
        if ok_count is not None and ok_count < 0:
            raise ValueError("Invalid value for `ok_count`, must be a value greater than or equal to `0`")

        self._ok_count = ok_count

    @property
    def warning_count(self):
        """Gets the warning_count of this HealthStateCount.

        The number of health entities with aggregated health state Warning.

        :return: The warning_count of this HealthStateCount.
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this HealthStateCount.

        The number of health entities with aggregated health state Warning.

        :param warning_count: The warning_count of this HealthStateCount.
        :type warning_count: int
        """
        if warning_count is not None and warning_count < 0:
            raise ValueError("Invalid value for `warning_count`, must be a value greater than or equal to `0`")

        self._warning_count = warning_count
