# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_api_result import ContainerApiResult
from openapi_server import util


class ContainerApiResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_api_result: ContainerApiResult=None):
        """ContainerApiResponse - a model defined in OpenAPI

        :param container_api_result: The container_api_result of this ContainerApiResponse.
        """
        self.openapi_types = {
            'container_api_result': ContainerApiResult
        }

        self.attribute_map = {
            'container_api_result': 'ContainerApiResult'
        }

        self._container_api_result = container_api_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerApiResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerApiResponse of this ContainerApiResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_api_result(self):
        """Gets the container_api_result of this ContainerApiResponse.


        :return: The container_api_result of this ContainerApiResponse.
        :rtype: ContainerApiResult
        """
        return self._container_api_result

    @container_api_result.setter
    def container_api_result(self, container_api_result):
        """Sets the container_api_result of this ContainerApiResponse.


        :param container_api_result: The container_api_result of this ContainerApiResponse.
        :type container_api_result: ContainerApiResult
        """
        if container_api_result is None:
            raise ValueError("Invalid value for `container_api_result`, must not be `None`")

        self._container_api_result = container_api_result
