# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.node_event import NodeEvent
from openapi_server import util


class NodeOpenSucceededEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fault_domain: str=None, hostname: str=None, ip_address_or_fqdn: str=None, is_seed_node: bool=None, node_id: str=None, node_instance: int=None, node_version: str=None, upgrade_domain: str=None, node_name: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """NodeOpenSucceededEvent - a model defined in OpenAPI

        :param fault_domain: The fault_domain of this NodeOpenSucceededEvent.
        :param hostname: The hostname of this NodeOpenSucceededEvent.
        :param ip_address_or_fqdn: The ip_address_or_fqdn of this NodeOpenSucceededEvent.
        :param is_seed_node: The is_seed_node of this NodeOpenSucceededEvent.
        :param node_id: The node_id of this NodeOpenSucceededEvent.
        :param node_instance: The node_instance of this NodeOpenSucceededEvent.
        :param node_version: The node_version of this NodeOpenSucceededEvent.
        :param upgrade_domain: The upgrade_domain of this NodeOpenSucceededEvent.
        :param node_name: The node_name of this NodeOpenSucceededEvent.
        :param category: The category of this NodeOpenSucceededEvent.
        :param event_instance_id: The event_instance_id of this NodeOpenSucceededEvent.
        :param has_correlated_events: The has_correlated_events of this NodeOpenSucceededEvent.
        :param kind: The kind of this NodeOpenSucceededEvent.
        :param time_stamp: The time_stamp of this NodeOpenSucceededEvent.
        """
        self.openapi_types = {
            'fault_domain': str,
            'hostname': str,
            'ip_address_or_fqdn': str,
            'is_seed_node': bool,
            'node_id': str,
            'node_instance': int,
            'node_version': str,
            'upgrade_domain': str,
            'node_name': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'fault_domain': 'FaultDomain',
            'hostname': 'Hostname',
            'ip_address_or_fqdn': 'IpAddressOrFQDN',
            'is_seed_node': 'IsSeedNode',
            'node_id': 'NodeId',
            'node_instance': 'NodeInstance',
            'node_version': 'NodeVersion',
            'upgrade_domain': 'UpgradeDomain',
            'node_name': 'NodeName',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._fault_domain = fault_domain
        self._hostname = hostname
        self._ip_address_or_fqdn = ip_address_or_fqdn
        self._is_seed_node = is_seed_node
        self._node_id = node_id
        self._node_instance = node_instance
        self._node_version = node_version
        self._upgrade_domain = upgrade_domain
        self._node_name = node_name
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeOpenSucceededEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeOpenSucceededEvent of this NodeOpenSucceededEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fault_domain(self):
        """Gets the fault_domain of this NodeOpenSucceededEvent.

        Fault domain of Node.

        :return: The fault_domain of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._fault_domain

    @fault_domain.setter
    def fault_domain(self, fault_domain):
        """Sets the fault_domain of this NodeOpenSucceededEvent.

        Fault domain of Node.

        :param fault_domain: The fault_domain of this NodeOpenSucceededEvent.
        :type fault_domain: str
        """
        if fault_domain is None:
            raise ValueError("Invalid value for `fault_domain`, must not be `None`")

        self._fault_domain = fault_domain

    @property
    def hostname(self):
        """Gets the hostname of this NodeOpenSucceededEvent.

        Name of Host.

        :return: The hostname of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NodeOpenSucceededEvent.

        Name of Host.

        :param hostname: The hostname of this NodeOpenSucceededEvent.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ip_address_or_fqdn(self):
        """Gets the ip_address_or_fqdn of this NodeOpenSucceededEvent.

        IP address or FQDN.

        :return: The ip_address_or_fqdn of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._ip_address_or_fqdn

    @ip_address_or_fqdn.setter
    def ip_address_or_fqdn(self, ip_address_or_fqdn):
        """Sets the ip_address_or_fqdn of this NodeOpenSucceededEvent.

        IP address or FQDN.

        :param ip_address_or_fqdn: The ip_address_or_fqdn of this NodeOpenSucceededEvent.
        :type ip_address_or_fqdn: str
        """
        if ip_address_or_fqdn is None:
            raise ValueError("Invalid value for `ip_address_or_fqdn`, must not be `None`")

        self._ip_address_or_fqdn = ip_address_or_fqdn

    @property
    def is_seed_node(self):
        """Gets the is_seed_node of this NodeOpenSucceededEvent.

        Indicates if it is seed node.

        :return: The is_seed_node of this NodeOpenSucceededEvent.
        :rtype: bool
        """
        return self._is_seed_node

    @is_seed_node.setter
    def is_seed_node(self, is_seed_node):
        """Sets the is_seed_node of this NodeOpenSucceededEvent.

        Indicates if it is seed node.

        :param is_seed_node: The is_seed_node of this NodeOpenSucceededEvent.
        :type is_seed_node: bool
        """
        if is_seed_node is None:
            raise ValueError("Invalid value for `is_seed_node`, must not be `None`")

        self._is_seed_node = is_seed_node

    @property
    def node_id(self):
        """Gets the node_id of this NodeOpenSucceededEvent.

        Id of Node.

        :return: The node_id of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeOpenSucceededEvent.

        Id of Node.

        :param node_id: The node_id of this NodeOpenSucceededEvent.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def node_instance(self):
        """Gets the node_instance of this NodeOpenSucceededEvent.

        Id of Node instance.

        :return: The node_instance of this NodeOpenSucceededEvent.
        :rtype: int
        """
        return self._node_instance

    @node_instance.setter
    def node_instance(self, node_instance):
        """Sets the node_instance of this NodeOpenSucceededEvent.

        Id of Node instance.

        :param node_instance: The node_instance of this NodeOpenSucceededEvent.
        :type node_instance: int
        """
        if node_instance is None:
            raise ValueError("Invalid value for `node_instance`, must not be `None`")

        self._node_instance = node_instance

    @property
    def node_version(self):
        """Gets the node_version of this NodeOpenSucceededEvent.

        Version of Node.

        :return: The node_version of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version):
        """Sets the node_version of this NodeOpenSucceededEvent.

        Version of Node.

        :param node_version: The node_version of this NodeOpenSucceededEvent.
        :type node_version: str
        """
        if node_version is None:
            raise ValueError("Invalid value for `node_version`, must not be `None`")

        self._node_version = node_version

    @property
    def upgrade_domain(self):
        """Gets the upgrade_domain of this NodeOpenSucceededEvent.

        Upgrade domain of Node.

        :return: The upgrade_domain of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._upgrade_domain

    @upgrade_domain.setter
    def upgrade_domain(self, upgrade_domain):
        """Sets the upgrade_domain of this NodeOpenSucceededEvent.

        Upgrade domain of Node.

        :param upgrade_domain: The upgrade_domain of this NodeOpenSucceededEvent.
        :type upgrade_domain: str
        """
        if upgrade_domain is None:
            raise ValueError("Invalid value for `upgrade_domain`, must not be `None`")

        self._upgrade_domain = upgrade_domain

    @property
    def node_name(self):
        """Gets the node_name of this NodeOpenSucceededEvent.

        The name of a Service Fabric node.

        :return: The node_name of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeOpenSucceededEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this NodeOpenSucceededEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def category(self):
        """Gets the category of this NodeOpenSucceededEvent.

        The category of event.

        :return: The category of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NodeOpenSucceededEvent.

        The category of event.

        :param category: The category of this NodeOpenSucceededEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this NodeOpenSucceededEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this NodeOpenSucceededEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this NodeOpenSucceededEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this NodeOpenSucceededEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this NodeOpenSucceededEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this NodeOpenSucceededEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this NodeOpenSucceededEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this NodeOpenSucceededEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this NodeOpenSucceededEvent.


        :return: The kind of this NodeOpenSucceededEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NodeOpenSucceededEvent.


        :param kind: The kind of this NodeOpenSucceededEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this NodeOpenSucceededEvent.

        The time event was logged.

        :return: The time_stamp of this NodeOpenSucceededEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this NodeOpenSucceededEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this NodeOpenSucceededEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
