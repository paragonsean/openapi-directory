# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation import HealthEvaluation
from openapi_server.models.health_evaluation_kind import HealthEvaluationKind
from openapi_server.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_server.models.health_state import HealthState
from openapi_server import util


class PartitionHealthEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_id: str=None, unhealthy_evaluations: List[HealthEvaluationWrapper]=None, aggregated_health_state: HealthState=None, description: str=None, kind: HealthEvaluationKind=None):
        """PartitionHealthEvaluation - a model defined in OpenAPI

        :param partition_id: The partition_id of this PartitionHealthEvaluation.
        :param unhealthy_evaluations: The unhealthy_evaluations of this PartitionHealthEvaluation.
        :param aggregated_health_state: The aggregated_health_state of this PartitionHealthEvaluation.
        :param description: The description of this PartitionHealthEvaluation.
        :param kind: The kind of this PartitionHealthEvaluation.
        """
        self.openapi_types = {
            'partition_id': str,
            'unhealthy_evaluations': List[HealthEvaluationWrapper],
            'aggregated_health_state': HealthState,
            'description': str,
            'kind': HealthEvaluationKind
        }

        self.attribute_map = {
            'partition_id': 'PartitionId',
            'unhealthy_evaluations': 'UnhealthyEvaluations',
            'aggregated_health_state': 'AggregatedHealthState',
            'description': 'Description',
            'kind': 'Kind'
        }

        self._partition_id = partition_id
        self._unhealthy_evaluations = unhealthy_evaluations
        self._aggregated_health_state = aggregated_health_state
        self._description = description
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionHealthEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionHealthEvaluation of this PartitionHealthEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionHealthEvaluation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionHealthEvaluation.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionHealthEvaluation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionHealthEvaluation.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this PartitionHealthEvaluation.

        List of health evaluations that resulted in the current aggregated health state.

        :return: The unhealthy_evaluations of this PartitionHealthEvaluation.
        :rtype: List[HealthEvaluationWrapper]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this PartitionHealthEvaluation.

        List of health evaluations that resulted in the current aggregated health state.

        :param unhealthy_evaluations: The unhealthy_evaluations of this PartitionHealthEvaluation.
        :type unhealthy_evaluations: List[HealthEvaluationWrapper]
        """

        self._unhealthy_evaluations = unhealthy_evaluations

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this PartitionHealthEvaluation.


        :return: The aggregated_health_state of this PartitionHealthEvaluation.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this PartitionHealthEvaluation.


        :param aggregated_health_state: The aggregated_health_state of this PartitionHealthEvaluation.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def description(self):
        """Gets the description of this PartitionHealthEvaluation.

        Description of the health evaluation, which represents a summary of the evaluation process.

        :return: The description of this PartitionHealthEvaluation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartitionHealthEvaluation.

        Description of the health evaluation, which represents a summary of the evaluation process.

        :param description: The description of this PartitionHealthEvaluation.
        :type description: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this PartitionHealthEvaluation.


        :return: The kind of this PartitionHealthEvaluation.
        :rtype: HealthEvaluationKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PartitionHealthEvaluation.


        :param kind: The kind of this PartitionHealthEvaluation.
        :type kind: HealthEvaluationKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
