# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event import FabricEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ServiceEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_id: str=None, category: str=None, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None):
        """ServiceEvent - a model defined in OpenAPI

        :param service_id: The service_id of this ServiceEvent.
        :param category: The category of this ServiceEvent.
        :param event_instance_id: The event_instance_id of this ServiceEvent.
        :param has_correlated_events: The has_correlated_events of this ServiceEvent.
        :param kind: The kind of this ServiceEvent.
        :param time_stamp: The time_stamp of this ServiceEvent.
        """
        self.openapi_types = {
            'service_id': str,
            'category': str,
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'service_id': 'ServiceId',
            'category': 'Category',
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp'
        }

        self._service_id = service_id
        self._category = category
        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceEvent of this ServiceEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_id(self):
        """Gets the service_id of this ServiceEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :return: The service_id of this ServiceEvent.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :param service_id: The service_id of this ServiceEvent.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def category(self):
        """Gets the category of this ServiceEvent.

        The category of event.

        :return: The category of this ServiceEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServiceEvent.

        The category of event.

        :param category: The category of this ServiceEvent.
        :type category: str
        """

        self._category = category

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ServiceEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ServiceEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ServiceEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ServiceEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ServiceEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ServiceEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ServiceEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ServiceEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ServiceEvent.


        :return: The kind of this ServiceEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ServiceEvent.


        :param kind: The kind of this ServiceEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ServiceEvent.

        The time event was logged.

        :return: The time_stamp of this ServiceEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ServiceEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ServiceEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
