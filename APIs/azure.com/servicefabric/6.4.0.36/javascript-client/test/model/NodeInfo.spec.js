/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.NodeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeInfo', function() {
    it('should create an instance of NodeInfo', function() {
      // uncomment below and update the code to test NodeInfo
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be.a(ServiceFabricClientApis.NodeInfo);
    });

    it('should have the property codeVersion (base name: "CodeVersion")', function() {
      // uncomment below and update the code to test the property codeVersion
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property configVersion (base name: "ConfigVersion")', function() {
      // uncomment below and update the code to test the property configVersion
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property faultDomain (base name: "FaultDomain")', function() {
      // uncomment below and update the code to test the property faultDomain
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property healthState (base name: "HealthState")', function() {
      // uncomment below and update the code to test the property healthState
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property ipAddressOrFQDN (base name: "IpAddressOrFQDN")', function() {
      // uncomment below and update the code to test the property ipAddressOrFQDN
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property isSeedNode (base name: "IsSeedNode")', function() {
      // uncomment below and update the code to test the property isSeedNode
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property isStopped (base name: "IsStopped")', function() {
      // uncomment below and update the code to test the property isStopped
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeDeactivationInfo (base name: "NodeDeactivationInfo")', function() {
      // uncomment below and update the code to test the property nodeDeactivationInfo
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeDownAt (base name: "NodeDownAt")', function() {
      // uncomment below and update the code to test the property nodeDownAt
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeDownTimeInSeconds (base name: "NodeDownTimeInSeconds")', function() {
      // uncomment below and update the code to test the property nodeDownTimeInSeconds
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeStatus (base name: "NodeStatus")', function() {
      // uncomment below and update the code to test the property nodeStatus
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeUpAt (base name: "NodeUpAt")', function() {
      // uncomment below and update the code to test the property nodeUpAt
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property nodeUpTimeInSeconds (base name: "NodeUpTimeInSeconds")', function() {
      // uncomment below and update the code to test the property nodeUpTimeInSeconds
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

    it('should have the property upgradeDomain (base name: "UpgradeDomain")', function() {
      // uncomment below and update the code to test the property upgradeDomain
      //var instance = new ServiceFabricClientApis.NodeInfo();
      //expect(instance).to.be();
    });

  });

}));
