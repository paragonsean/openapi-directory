/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReplicatorQueueStatus model module.
 * @module model/ReplicatorQueueStatus
 * @version 6.4.0.36
 */
class ReplicatorQueueStatus {
    /**
     * Constructs a new <code>ReplicatorQueueStatus</code>.
     * Provides various statistics of the queue used in the service fabric replicator. Contains information about the service fabric replicator like the replication/copy queue utilization, last acknowledgement received timestamp, etc. Depending on the role of the replicator, the properties in this type imply different meanings.
     * @alias module:model/ReplicatorQueueStatus
     */
    constructor() { 
        
        ReplicatorQueueStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicatorQueueStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicatorQueueStatus} obj Optional instance to populate.
     * @return {module:model/ReplicatorQueueStatus} The populated <code>ReplicatorQueueStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicatorQueueStatus();

            if (data.hasOwnProperty('CommittedSequenceNumber')) {
                obj['CommittedSequenceNumber'] = ApiClient.convertToType(data['CommittedSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('CompletedSequenceNumber')) {
                obj['CompletedSequenceNumber'] = ApiClient.convertToType(data['CompletedSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('FirstSequenceNumber')) {
                obj['FirstSequenceNumber'] = ApiClient.convertToType(data['FirstSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('LastSequenceNumber')) {
                obj['LastSequenceNumber'] = ApiClient.convertToType(data['LastSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('QueueMemorySize')) {
                obj['QueueMemorySize'] = ApiClient.convertToType(data['QueueMemorySize'], 'String');
            }
            if (data.hasOwnProperty('QueueUtilizationPercentage')) {
                obj['QueueUtilizationPercentage'] = ApiClient.convertToType(data['QueueUtilizationPercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicatorQueueStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicatorQueueStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CommittedSequenceNumber'] && !(typeof data['CommittedSequenceNumber'] === 'string' || data['CommittedSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `CommittedSequenceNumber` to be a primitive type in the JSON string but got " + data['CommittedSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['CompletedSequenceNumber'] && !(typeof data['CompletedSequenceNumber'] === 'string' || data['CompletedSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `CompletedSequenceNumber` to be a primitive type in the JSON string but got " + data['CompletedSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['FirstSequenceNumber'] && !(typeof data['FirstSequenceNumber'] === 'string' || data['FirstSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `FirstSequenceNumber` to be a primitive type in the JSON string but got " + data['FirstSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['LastSequenceNumber'] && !(typeof data['LastSequenceNumber'] === 'string' || data['LastSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `LastSequenceNumber` to be a primitive type in the JSON string but got " + data['LastSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['QueueMemorySize'] && !(typeof data['QueueMemorySize'] === 'string' || data['QueueMemorySize'] instanceof String)) {
            throw new Error("Expected the field `QueueMemorySize` to be a primitive type in the JSON string but got " + data['QueueMemorySize']);
        }

        return true;
    }


}



/**
 * On a primary replicator, this is semantically the highest sequence number of the operation for which a write quorum of the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number of the in-order operation received from the primary.
 * @member {String} CommittedSequenceNumber
 */
ReplicatorQueueStatus.prototype['CommittedSequenceNumber'] = undefined;

/**
 * On a primary replicator, this is semantically the highest sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is semantically the highest sequence number that has been applied to the persistent state.
 * @member {String} CompletedSequenceNumber
 */
ReplicatorQueueStatus.prototype['CompletedSequenceNumber'] = undefined;

/**
 * On a primary replicator, this is semantically the sequence number of the operation for which all the secondary replicas have sent an acknowledgement. On a secondary replicator, this is the smallest sequence number of the operation that is present in the queue.
 * @member {String} FirstSequenceNumber
 */
ReplicatorQueueStatus.prototype['FirstSequenceNumber'] = undefined;

/**
 * Represents the latest sequence number of the operation that is available in the queue.
 * @member {String} LastSequenceNumber
 */
ReplicatorQueueStatus.prototype['LastSequenceNumber'] = undefined;

/**
 * Represents the virtual memory consumed by the queue in bytes.
 * @member {String} QueueMemorySize
 */
ReplicatorQueueStatus.prototype['QueueMemorySize'] = undefined;

/**
 * Represents the utilization of the queue. A value of 0 indicates that the queue is empty and a value of 100 indicates the queue is full.
 * @member {Number} QueueUtilizationPercentage
 */
ReplicatorQueueStatus.prototype['QueueUtilizationPercentage'] = undefined;






export default ReplicatorQueueStatus;

