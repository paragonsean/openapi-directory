/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationEvent from './ApplicationEvent';
import FabricEventKind from './FabricEventKind';

/**
 * The ApplicationUpgradeDomainCompletedEvent model module.
 * @module model/ApplicationUpgradeDomainCompletedEvent
 * @version 6.4.0.36
 */
class ApplicationUpgradeDomainCompletedEvent {
    /**
     * Constructs a new <code>ApplicationUpgradeDomainCompletedEvent</code>.
     * Application Upgrade Domain Completed event.
     * @alias module:model/ApplicationUpgradeDomainCompletedEvent
     * @extends module:model/ApplicationEvent
     * @implements module:model/ApplicationEvent
     * @param applicationId {String} The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     */
    constructor(applicationId, eventInstanceId, kind, timeStamp) { 
        ApplicationEvent.initialize(this, eventInstanceId, kind, timeStamp);
        ApplicationUpgradeDomainCompletedEvent.initialize(this, applicationId, eventInstanceId, kind, timeStamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationId, eventInstanceId, kind, timeStamp) { 
        obj['ApplicationTypeName'] = applicationTypeName;
        obj['ApplicationTypeVersion'] = applicationTypeVersion;
        obj['CurrentApplicationTypeVersion'] = currentApplicationTypeVersion;
        obj['UpgradeDomainElapsedTimeInMs'] = upgradeDomainElapsedTimeInMs;
        obj['UpgradeDomains'] = upgradeDomains;
        obj['UpgradeState'] = upgradeState;
    }

    /**
     * Constructs a <code>ApplicationUpgradeDomainCompletedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationUpgradeDomainCompletedEvent} obj Optional instance to populate.
     * @return {module:model/ApplicationUpgradeDomainCompletedEvent} The populated <code>ApplicationUpgradeDomainCompletedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationUpgradeDomainCompletedEvent();
            ApplicationEvent.constructFromObject(data, obj);
            ApplicationEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('ApplicationTypeName')) {
                obj['ApplicationTypeName'] = ApiClient.convertToType(data['ApplicationTypeName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeVersion')) {
                obj['ApplicationTypeVersion'] = ApiClient.convertToType(data['ApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('CurrentApplicationTypeVersion')) {
                obj['CurrentApplicationTypeVersion'] = ApiClient.convertToType(data['CurrentApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('UpgradeDomainElapsedTimeInMs')) {
                obj['UpgradeDomainElapsedTimeInMs'] = ApiClient.convertToType(data['UpgradeDomainElapsedTimeInMs'], 'Number');
            }
            if (data.hasOwnProperty('UpgradeDomains')) {
                obj['UpgradeDomains'] = ApiClient.convertToType(data['UpgradeDomains'], 'String');
            }
            if (data.hasOwnProperty('UpgradeState')) {
                obj['UpgradeState'] = ApiClient.convertToType(data['UpgradeState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationUpgradeDomainCompletedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationUpgradeDomainCompletedEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationUpgradeDomainCompletedEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationTypeName'] && !(typeof data['ApplicationTypeName'] === 'string' || data['ApplicationTypeName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeName` to be a primitive type in the JSON string but got " + data['ApplicationTypeName']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeVersion'] && !(typeof data['ApplicationTypeVersion'] === 'string' || data['ApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['ApplicationTypeVersion']);
        }
        // ensure the json data is a string
        if (data['CurrentApplicationTypeVersion'] && !(typeof data['CurrentApplicationTypeVersion'] === 'string' || data['CurrentApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `CurrentApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['CurrentApplicationTypeVersion']);
        }
        // ensure the json data is a string
        if (data['UpgradeDomains'] && !(typeof data['UpgradeDomains'] === 'string' || data['UpgradeDomains'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDomains` to be a primitive type in the JSON string but got " + data['UpgradeDomains']);
        }
        // ensure the json data is a string
        if (data['UpgradeState'] && !(typeof data['UpgradeState'] === 'string' || data['UpgradeState'] instanceof String)) {
            throw new Error("Expected the field `UpgradeState` to be a primitive type in the JSON string but got " + data['UpgradeState']);
        }

        return true;
    }


}

ApplicationUpgradeDomainCompletedEvent.RequiredProperties = ["ApplicationTypeName", "ApplicationTypeVersion", "CurrentApplicationTypeVersion", "UpgradeDomainElapsedTimeInMs", "UpgradeDomains", "UpgradeState", "ApplicationId", "EventInstanceId", "Kind", "TimeStamp"];

/**
 * Application type name.
 * @member {String} ApplicationTypeName
 */
ApplicationUpgradeDomainCompletedEvent.prototype['ApplicationTypeName'] = undefined;

/**
 * Target Application type version.
 * @member {String} ApplicationTypeVersion
 */
ApplicationUpgradeDomainCompletedEvent.prototype['ApplicationTypeVersion'] = undefined;

/**
 * Current Application type version.
 * @member {String} CurrentApplicationTypeVersion
 */
ApplicationUpgradeDomainCompletedEvent.prototype['CurrentApplicationTypeVersion'] = undefined;

/**
 * Upgrade time of domain in milli-seconds.
 * @member {Number} UpgradeDomainElapsedTimeInMs
 */
ApplicationUpgradeDomainCompletedEvent.prototype['UpgradeDomainElapsedTimeInMs'] = undefined;

/**
 * Upgrade domains.
 * @member {String} UpgradeDomains
 */
ApplicationUpgradeDomainCompletedEvent.prototype['UpgradeDomains'] = undefined;

/**
 * State of upgrade.
 * @member {String} UpgradeState
 */
ApplicationUpgradeDomainCompletedEvent.prototype['UpgradeState'] = undefined;


// Implement ApplicationEvent interface:
/**
 * The category of event.
 * @member {String} Category
 */
ApplicationEvent.prototype['Category'] = undefined;
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
ApplicationEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
ApplicationEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
ApplicationEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
ApplicationEvent.prototype['TimeStamp'] = undefined;




export default ApplicationUpgradeDomainCompletedEvent;

