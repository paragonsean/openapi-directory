/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicy from './ApplicationHealthPolicy';
import MonitoringPolicyDescription from './MonitoringPolicyDescription';
import RegistryCredential from './RegistryCredential';
import UpgradeKind from './UpgradeKind';
import UpgradeMode from './UpgradeMode';

/**
 * The ComposeDeploymentUpgradeDescription model module.
 * @module model/ComposeDeploymentUpgradeDescription
 * @version 6.4.0.36
 */
class ComposeDeploymentUpgradeDescription {
    /**
     * Constructs a new <code>ComposeDeploymentUpgradeDescription</code>.
     * Describes the parameters for a compose deployment upgrade.
     * @alias module:model/ComposeDeploymentUpgradeDescription
     * @param composeFileContent {String} The content of the compose file that describes the deployment to create.
     * @param deploymentName {String} The name of the deployment.
     * @param upgradeKind {module:model/UpgradeKind} 
     */
    constructor(composeFileContent, deploymentName, upgradeKind) { 
        
        ComposeDeploymentUpgradeDescription.initialize(this, composeFileContent, deploymentName, upgradeKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, composeFileContent, deploymentName, upgradeKind) { 
        obj['ComposeFileContent'] = composeFileContent;
        obj['DeploymentName'] = deploymentName;
        obj['ForceRestart'] = false;
        obj['UpgradeKind'] = upgradeKind;
    }

    /**
     * Constructs a <code>ComposeDeploymentUpgradeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComposeDeploymentUpgradeDescription} obj Optional instance to populate.
     * @return {module:model/ComposeDeploymentUpgradeDescription} The populated <code>ComposeDeploymentUpgradeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComposeDeploymentUpgradeDescription();

            if (data.hasOwnProperty('ApplicationHealthPolicy')) {
                obj['ApplicationHealthPolicy'] = ApplicationHealthPolicy.constructFromObject(data['ApplicationHealthPolicy']);
            }
            if (data.hasOwnProperty('ComposeFileContent')) {
                obj['ComposeFileContent'] = ApiClient.convertToType(data['ComposeFileContent'], 'String');
            }
            if (data.hasOwnProperty('DeploymentName')) {
                obj['DeploymentName'] = ApiClient.convertToType(data['DeploymentName'], 'String');
            }
            if (data.hasOwnProperty('ForceRestart')) {
                obj['ForceRestart'] = ApiClient.convertToType(data['ForceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('MonitoringPolicy')) {
                obj['MonitoringPolicy'] = MonitoringPolicyDescription.constructFromObject(data['MonitoringPolicy']);
            }
            if (data.hasOwnProperty('RegistryCredential')) {
                obj['RegistryCredential'] = RegistryCredential.constructFromObject(data['RegistryCredential']);
            }
            if (data.hasOwnProperty('RollingUpgradeMode')) {
                obj['RollingUpgradeMode'] = UpgradeMode.constructFromObject(data['RollingUpgradeMode']);
            }
            if (data.hasOwnProperty('UpgradeKind')) {
                obj['UpgradeKind'] = UpgradeKind.constructFromObject(data['UpgradeKind']);
            }
            if (data.hasOwnProperty('UpgradeReplicaSetCheckTimeoutInSeconds')) {
                obj['UpgradeReplicaSetCheckTimeoutInSeconds'] = ApiClient.convertToType(data['UpgradeReplicaSetCheckTimeoutInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComposeDeploymentUpgradeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComposeDeploymentUpgradeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ComposeDeploymentUpgradeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ApplicationHealthPolicy`
        if (data['ApplicationHealthPolicy']) { // data not null
          ApplicationHealthPolicy.validateJSON(data['ApplicationHealthPolicy']);
        }
        // ensure the json data is a string
        if (data['ComposeFileContent'] && !(typeof data['ComposeFileContent'] === 'string' || data['ComposeFileContent'] instanceof String)) {
            throw new Error("Expected the field `ComposeFileContent` to be a primitive type in the JSON string but got " + data['ComposeFileContent']);
        }
        // ensure the json data is a string
        if (data['DeploymentName'] && !(typeof data['DeploymentName'] === 'string' || data['DeploymentName'] instanceof String)) {
            throw new Error("Expected the field `DeploymentName` to be a primitive type in the JSON string but got " + data['DeploymentName']);
        }
        // validate the optional field `MonitoringPolicy`
        if (data['MonitoringPolicy']) { // data not null
          MonitoringPolicyDescription.validateJSON(data['MonitoringPolicy']);
        }
        // validate the optional field `RegistryCredential`
        if (data['RegistryCredential']) { // data not null
          RegistryCredential.validateJSON(data['RegistryCredential']);
        }

        return true;
    }


}

ComposeDeploymentUpgradeDescription.RequiredProperties = ["ComposeFileContent", "DeploymentName", "UpgradeKind"];

/**
 * @member {module:model/ApplicationHealthPolicy} ApplicationHealthPolicy
 */
ComposeDeploymentUpgradeDescription.prototype['ApplicationHealthPolicy'] = undefined;

/**
 * The content of the compose file that describes the deployment to create.
 * @member {String} ComposeFileContent
 */
ComposeDeploymentUpgradeDescription.prototype['ComposeFileContent'] = undefined;

/**
 * The name of the deployment.
 * @member {String} DeploymentName
 */
ComposeDeploymentUpgradeDescription.prototype['DeploymentName'] = undefined;

/**
 * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
 * @member {Boolean} ForceRestart
 * @default false
 */
ComposeDeploymentUpgradeDescription.prototype['ForceRestart'] = false;

/**
 * @member {module:model/MonitoringPolicyDescription} MonitoringPolicy
 */
ComposeDeploymentUpgradeDescription.prototype['MonitoringPolicy'] = undefined;

/**
 * @member {module:model/RegistryCredential} RegistryCredential
 */
ComposeDeploymentUpgradeDescription.prototype['RegistryCredential'] = undefined;

/**
 * @member {module:model/UpgradeMode} RollingUpgradeMode
 */
ComposeDeploymentUpgradeDescription.prototype['RollingUpgradeMode'] = undefined;

/**
 * @member {module:model/UpgradeKind} UpgradeKind
 */
ComposeDeploymentUpgradeDescription.prototype['UpgradeKind'] = undefined;

/**
 * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {Number} UpgradeReplicaSetCheckTimeoutInSeconds
 */
ComposeDeploymentUpgradeDescription.prototype['UpgradeReplicaSetCheckTimeoutInSeconds'] = undefined;






export default ComposeDeploymentUpgradeDescription;

