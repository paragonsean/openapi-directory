/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServicePackageActivationMode from './ServicePackageActivationMode';

/**
 * The ServiceFromTemplateDescription model module.
 * @module model/ServiceFromTemplateDescription
 * @version 6.4.0.36
 */
class ServiceFromTemplateDescription {
    /**
     * Constructs a new <code>ServiceFromTemplateDescription</code>.
     * Defines description for creating a Service Fabric service from a template defined in the application manifest.
     * @alias module:model/ServiceFromTemplateDescription
     * @param applicationName {String} The name of the application, including the 'fabric:' URI scheme.
     * @param serviceName {String} The full name of the service with 'fabric:' URI scheme.
     * @param serviceTypeName {String} Name of the service type as specified in the service manifest.
     */
    constructor(applicationName, serviceName, serviceTypeName) { 
        
        ServiceFromTemplateDescription.initialize(this, applicationName, serviceName, serviceTypeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationName, serviceName, serviceTypeName) { 
        obj['ApplicationName'] = applicationName;
        obj['ServiceName'] = serviceName;
        obj['ServiceTypeName'] = serviceTypeName;
    }

    /**
     * Constructs a <code>ServiceFromTemplateDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceFromTemplateDescription} obj Optional instance to populate.
     * @return {module:model/ServiceFromTemplateDescription} The populated <code>ServiceFromTemplateDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceFromTemplateDescription();

            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('InitializationData')) {
                obj['InitializationData'] = ApiClient.convertToType(data['InitializationData'], ['Number']);
            }
            if (data.hasOwnProperty('ServiceDnsName')) {
                obj['ServiceDnsName'] = ApiClient.convertToType(data['ServiceDnsName'], 'String');
            }
            if (data.hasOwnProperty('ServiceName')) {
                obj['ServiceName'] = ApiClient.convertToType(data['ServiceName'], 'String');
            }
            if (data.hasOwnProperty('ServicePackageActivationMode')) {
                obj['ServicePackageActivationMode'] = ServicePackageActivationMode.constructFromObject(data['ServicePackageActivationMode']);
            }
            if (data.hasOwnProperty('ServiceTypeName')) {
                obj['ServiceTypeName'] = ApiClient.convertToType(data['ServiceTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceFromTemplateDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceFromTemplateDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceFromTemplateDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['InitializationData'])) {
            throw new Error("Expected the field `InitializationData` to be an array in the JSON data but got " + data['InitializationData']);
        }
        // ensure the json data is a string
        if (data['ServiceDnsName'] && !(typeof data['ServiceDnsName'] === 'string' || data['ServiceDnsName'] instanceof String)) {
            throw new Error("Expected the field `ServiceDnsName` to be a primitive type in the JSON string but got " + data['ServiceDnsName']);
        }
        // ensure the json data is a string
        if (data['ServiceName'] && !(typeof data['ServiceName'] === 'string' || data['ServiceName'] instanceof String)) {
            throw new Error("Expected the field `ServiceName` to be a primitive type in the JSON string but got " + data['ServiceName']);
        }
        // ensure the json data is a string
        if (data['ServiceTypeName'] && !(typeof data['ServiceTypeName'] === 'string' || data['ServiceTypeName'] instanceof String)) {
            throw new Error("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got " + data['ServiceTypeName']);
        }

        return true;
    }


}

ServiceFromTemplateDescription.RequiredProperties = ["ApplicationName", "ServiceName", "ServiceTypeName"];

/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
ServiceFromTemplateDescription.prototype['ApplicationName'] = undefined;

/**
 * Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
 * @member {Array.<Number>} InitializationData
 */
ServiceFromTemplateDescription.prototype['InitializationData'] = undefined;

/**
 * The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
 * @member {String} ServiceDnsName
 */
ServiceFromTemplateDescription.prototype['ServiceDnsName'] = undefined;

/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} ServiceName
 */
ServiceFromTemplateDescription.prototype['ServiceName'] = undefined;

/**
 * @member {module:model/ServicePackageActivationMode} ServicePackageActivationMode
 */
ServiceFromTemplateDescription.prototype['ServicePackageActivationMode'] = undefined;

/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
ServiceFromTemplateDescription.prototype['ServiceTypeName'] = undefined;






export default ServiceFromTemplateDescription;

