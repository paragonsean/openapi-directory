/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReliableCollectionsRef model module.
 * @module model/ReliableCollectionsRef
 * @version 6.4.0.36
 */
class ReliableCollectionsRef {
    /**
     * Constructs a new <code>ReliableCollectionsRef</code>.
     * Specifying this parameter adds support for reliable collections
     * @alias module:model/ReliableCollectionsRef
     * @param name {String} Name of ReliableCollection resource. Right now it's not used and you can use any string.
     */
    constructor(name) { 
        
        ReliableCollectionsRef.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ReliableCollectionsRef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReliableCollectionsRef} obj Optional instance to populate.
     * @return {module:model/ReliableCollectionsRef} The populated <code>ReliableCollectionsRef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReliableCollectionsRef();

            if (data.hasOwnProperty('doNotPersistState')) {
                obj['doNotPersistState'] = ApiClient.convertToType(data['doNotPersistState'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReliableCollectionsRef</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReliableCollectionsRef</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReliableCollectionsRef.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ReliableCollectionsRef.RequiredProperties = ["name"];

/**
 * False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
 * @member {Boolean} doNotPersistState
 */
ReliableCollectionsRef.prototype['doNotPersistState'] = undefined;

/**
 * Name of ReliableCollection resource. Right now it's not used and you can use any string.
 * @member {String} name
 */
ReliableCollectionsRef.prototype['name'] = undefined;






export default ReliableCollectionsRef;

