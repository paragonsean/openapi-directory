/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoveCost from './MoveCost';
import PartitionSchemeDescription from './PartitionSchemeDescription';
import ScalingPolicyDescription from './ScalingPolicyDescription';
import ServiceCorrelationDescription from './ServiceCorrelationDescription';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePackageActivationMode from './ServicePackageActivationMode';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';

/**
 * The ServiceDescription model module.
 * @module model/ServiceDescription
 * @version 6.4.0.36
 */
class ServiceDescription {
    /**
     * Constructs a new <code>ServiceDescription</code>.
     * A ServiceDescription contains all of the information necessary to create a service.
     * @alias module:model/ServiceDescription
     * @param partitionDescription {module:model/PartitionSchemeDescription} 
     * @param serviceKind {module:model/ServiceKind} 
     * @param serviceName {String} The full name of the service with 'fabric:' URI scheme.
     * @param serviceTypeName {String} Name of the service type as specified in the service manifest.
     */
    constructor(partitionDescription, serviceKind, serviceName, serviceTypeName) { 
        
        ServiceDescription.initialize(this, partitionDescription, serviceKind, serviceName, serviceTypeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionDescription, serviceKind, serviceName, serviceTypeName) { 
        obj['PartitionDescription'] = partitionDescription;
        obj['ServiceKind'] = serviceKind;
        obj['ServiceName'] = serviceName;
        obj['ServiceTypeName'] = serviceTypeName;
    }

    /**
     * Constructs a <code>ServiceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceDescription} obj Optional instance to populate.
     * @return {module:model/ServiceDescription} The populated <code>ServiceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceDescription();

            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('CorrelationScheme')) {
                obj['CorrelationScheme'] = ApiClient.convertToType(data['CorrelationScheme'], [ServiceCorrelationDescription]);
            }
            if (data.hasOwnProperty('DefaultMoveCost')) {
                obj['DefaultMoveCost'] = MoveCost.constructFromObject(data['DefaultMoveCost']);
            }
            if (data.hasOwnProperty('InitializationData')) {
                obj['InitializationData'] = ApiClient.convertToType(data['InitializationData'], ['Number']);
            }
            if (data.hasOwnProperty('IsDefaultMoveCostSpecified')) {
                obj['IsDefaultMoveCostSpecified'] = ApiClient.convertToType(data['IsDefaultMoveCostSpecified'], 'Boolean');
            }
            if (data.hasOwnProperty('PartitionDescription')) {
                obj['PartitionDescription'] = PartitionSchemeDescription.constructFromObject(data['PartitionDescription']);
            }
            if (data.hasOwnProperty('PlacementConstraints')) {
                obj['PlacementConstraints'] = ApiClient.convertToType(data['PlacementConstraints'], 'String');
            }
            if (data.hasOwnProperty('ScalingPolicies')) {
                obj['ScalingPolicies'] = ApiClient.convertToType(data['ScalingPolicies'], [ScalingPolicyDescription]);
            }
            if (data.hasOwnProperty('ServiceDnsName')) {
                obj['ServiceDnsName'] = ApiClient.convertToType(data['ServiceDnsName'], 'String');
            }
            if (data.hasOwnProperty('ServiceKind')) {
                obj['ServiceKind'] = ServiceKind.constructFromObject(data['ServiceKind']);
            }
            if (data.hasOwnProperty('ServiceLoadMetrics')) {
                obj['ServiceLoadMetrics'] = ApiClient.convertToType(data['ServiceLoadMetrics'], [ServiceLoadMetricDescription]);
            }
            if (data.hasOwnProperty('ServiceName')) {
                obj['ServiceName'] = ApiClient.convertToType(data['ServiceName'], 'String');
            }
            if (data.hasOwnProperty('ServicePackageActivationMode')) {
                obj['ServicePackageActivationMode'] = ServicePackageActivationMode.constructFromObject(data['ServicePackageActivationMode']);
            }
            if (data.hasOwnProperty('ServicePlacementPolicies')) {
                obj['ServicePlacementPolicies'] = ApiClient.convertToType(data['ServicePlacementPolicies'], [ServicePlacementPolicyDescription]);
            }
            if (data.hasOwnProperty('ServiceTypeName')) {
                obj['ServiceTypeName'] = ApiClient.convertToType(data['ServiceTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        if (data['CorrelationScheme']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CorrelationScheme'])) {
                throw new Error("Expected the field `CorrelationScheme` to be an array in the JSON data but got " + data['CorrelationScheme']);
            }
            // validate the optional field `CorrelationScheme` (array)
            for (const item of data['CorrelationScheme']) {
                ServiceCorrelationDescription.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['InitializationData'])) {
            throw new Error("Expected the field `InitializationData` to be an array in the JSON data but got " + data['InitializationData']);
        }
        // validate the optional field `PartitionDescription`
        if (data['PartitionDescription']) { // data not null
          PartitionSchemeDescription.validateJSON(data['PartitionDescription']);
        }
        // ensure the json data is a string
        if (data['PlacementConstraints'] && !(typeof data['PlacementConstraints'] === 'string' || data['PlacementConstraints'] instanceof String)) {
            throw new Error("Expected the field `PlacementConstraints` to be a primitive type in the JSON string but got " + data['PlacementConstraints']);
        }
        if (data['ScalingPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ScalingPolicies'])) {
                throw new Error("Expected the field `ScalingPolicies` to be an array in the JSON data but got " + data['ScalingPolicies']);
            }
            // validate the optional field `ScalingPolicies` (array)
            for (const item of data['ScalingPolicies']) {
                ScalingPolicyDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceDnsName'] && !(typeof data['ServiceDnsName'] === 'string' || data['ServiceDnsName'] instanceof String)) {
            throw new Error("Expected the field `ServiceDnsName` to be a primitive type in the JSON string but got " + data['ServiceDnsName']);
        }
        if (data['ServiceLoadMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ServiceLoadMetrics'])) {
                throw new Error("Expected the field `ServiceLoadMetrics` to be an array in the JSON data but got " + data['ServiceLoadMetrics']);
            }
            // validate the optional field `ServiceLoadMetrics` (array)
            for (const item of data['ServiceLoadMetrics']) {
                ServiceLoadMetricDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceName'] && !(typeof data['ServiceName'] === 'string' || data['ServiceName'] instanceof String)) {
            throw new Error("Expected the field `ServiceName` to be a primitive type in the JSON string but got " + data['ServiceName']);
        }
        if (data['ServicePlacementPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ServicePlacementPolicies'])) {
                throw new Error("Expected the field `ServicePlacementPolicies` to be an array in the JSON data but got " + data['ServicePlacementPolicies']);
            }
            // validate the optional field `ServicePlacementPolicies` (array)
            for (const item of data['ServicePlacementPolicies']) {
                ServicePlacementPolicyDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceTypeName'] && !(typeof data['ServiceTypeName'] === 'string' || data['ServiceTypeName'] instanceof String)) {
            throw new Error("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got " + data['ServiceTypeName']);
        }

        return true;
    }


}

ServiceDescription.RequiredProperties = ["PartitionDescription", "ServiceKind", "ServiceName", "ServiceTypeName"];

/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
ServiceDescription.prototype['ApplicationName'] = undefined;

/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServiceCorrelationDescription>} CorrelationScheme
 */
ServiceDescription.prototype['CorrelationScheme'] = undefined;

/**
 * @member {module:model/MoveCost} DefaultMoveCost
 */
ServiceDescription.prototype['DefaultMoveCost'] = undefined;

/**
 * Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
 * @member {Array.<Number>} InitializationData
 */
ServiceDescription.prototype['InitializationData'] = undefined;

/**
 * Indicates if the DefaultMoveCost property is specified.
 * @member {Boolean} IsDefaultMoveCostSpecified
 */
ServiceDescription.prototype['IsDefaultMoveCostSpecified'] = undefined;

/**
 * @member {module:model/PartitionSchemeDescription} PartitionDescription
 */
ServiceDescription.prototype['PartitionDescription'] = undefined;

/**
 * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".
 * @member {String} PlacementConstraints
 */
ServiceDescription.prototype['PlacementConstraints'] = undefined;

/**
 * A list that describes the scaling policies.
 * @member {Array.<module:model/ScalingPolicyDescription>} ScalingPolicies
 */
ServiceDescription.prototype['ScalingPolicies'] = undefined;

/**
 * The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
 * @member {String} ServiceDnsName
 */
ServiceDescription.prototype['ServiceDnsName'] = undefined;

/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ServiceDescription.prototype['ServiceKind'] = undefined;

/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} ServiceLoadMetrics
 */
ServiceDescription.prototype['ServiceLoadMetrics'] = undefined;

/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} ServiceName
 */
ServiceDescription.prototype['ServiceName'] = undefined;

/**
 * @member {module:model/ServicePackageActivationMode} ServicePackageActivationMode
 */
ServiceDescription.prototype['ServicePackageActivationMode'] = undefined;

/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} ServicePlacementPolicies
 */
ServiceDescription.prototype['ServicePlacementPolicies'] = undefined;

/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
ServiceDescription.prototype['ServiceTypeName'] = undefined;






export default ServiceDescription;

