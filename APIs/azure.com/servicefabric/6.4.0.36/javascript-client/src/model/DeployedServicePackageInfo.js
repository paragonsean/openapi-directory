/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentStatus from './DeploymentStatus';

/**
 * The DeployedServicePackageInfo model module.
 * @module model/DeployedServicePackageInfo
 * @version 6.4.0.36
 */
class DeployedServicePackageInfo {
    /**
     * Constructs a new <code>DeployedServicePackageInfo</code>.
     * Information about service package deployed on a Service Fabric node.
     * @alias module:model/DeployedServicePackageInfo
     */
    constructor() { 
        
        DeployedServicePackageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedServicePackageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedServicePackageInfo} obj Optional instance to populate.
     * @return {module:model/DeployedServicePackageInfo} The populated <code>DeployedServicePackageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedServicePackageInfo();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ServicePackageActivationId')) {
                obj['ServicePackageActivationId'] = ApiClient.convertToType(data['ServicePackageActivationId'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = DeploymentStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedServicePackageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedServicePackageInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ServicePackageActivationId'] && !(typeof data['ServicePackageActivationId'] === 'string' || data['ServicePackageActivationId'] instanceof String)) {
            throw new Error("Expected the field `ServicePackageActivationId` to be a primitive type in the JSON string but got " + data['ServicePackageActivationId']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}



/**
 * The name of the service manifest.
 * @member {String} Name
 */
DeployedServicePackageInfo.prototype['Name'] = undefined;

/**
 * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.
 * @member {String} ServicePackageActivationId
 */
DeployedServicePackageInfo.prototype['ServicePackageActivationId'] = undefined;

/**
 * @member {module:model/DeploymentStatus} Status
 */
DeployedServicePackageInfo.prototype['Status'] = undefined;

/**
 * The version of the service package specified in service manifest.
 * @member {String} Version
 */
DeployedServicePackageInfo.prototype['Version'] = undefined;






export default DeployedServicePackageInfo;

