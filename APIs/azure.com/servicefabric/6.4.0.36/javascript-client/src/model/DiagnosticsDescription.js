/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticsSinkProperties from './DiagnosticsSinkProperties';

/**
 * The DiagnosticsDescription model module.
 * @module model/DiagnosticsDescription
 * @version 6.4.0.36
 */
class DiagnosticsDescription {
    /**
     * Constructs a new <code>DiagnosticsDescription</code>.
     * Describes the diagnostics options available
     * @alias module:model/DiagnosticsDescription
     */
    constructor() { 
        
        DiagnosticsDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticsDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticsDescription} obj Optional instance to populate.
     * @return {module:model/DiagnosticsDescription} The populated <code>DiagnosticsDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticsDescription();

            if (data.hasOwnProperty('defaultSinkRefs')) {
                obj['defaultSinkRefs'] = ApiClient.convertToType(data['defaultSinkRefs'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sinks')) {
                obj['sinks'] = ApiClient.convertToType(data['sinks'], [DiagnosticsSinkProperties]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticsDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticsDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['defaultSinkRefs'])) {
            throw new Error("Expected the field `defaultSinkRefs` to be an array in the JSON data but got " + data['defaultSinkRefs']);
        }
        if (data['sinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sinks'])) {
                throw new Error("Expected the field `sinks` to be an array in the JSON data but got " + data['sinks']);
            }
            // validate the optional field `sinks` (array)
            for (const item of data['sinks']) {
                DiagnosticsSinkProperties.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
 * @member {Array.<String>} defaultSinkRefs
 */
DiagnosticsDescription.prototype['defaultSinkRefs'] = undefined;

/**
 * Status of whether or not sinks are enabled.
 * @member {Boolean} enabled
 */
DiagnosticsDescription.prototype['enabled'] = undefined;

/**
 * List of supported sinks that can be referenced.
 * @member {Array.<module:model/DiagnosticsSinkProperties>} sinks
 */
DiagnosticsDescription.prototype['sinks'] = undefined;






export default DiagnosticsDescription;

