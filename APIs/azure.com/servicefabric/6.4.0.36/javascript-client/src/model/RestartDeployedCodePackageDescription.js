/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RestartDeployedCodePackageDescription model module.
 * @module model/RestartDeployedCodePackageDescription
 * @version 6.4.0.36
 */
class RestartDeployedCodePackageDescription {
    /**
     * Constructs a new <code>RestartDeployedCodePackageDescription</code>.
     * Defines description for restarting a deployed code package on Service Fabric node.
     * @alias module:model/RestartDeployedCodePackageDescription
     * @param codePackageInstanceId {String} The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
     * @param codePackageName {String} The name of the code package defined in the service manifest.
     * @param serviceManifestName {String} The name of the service manifest.
     */
    constructor(codePackageInstanceId, codePackageName, serviceManifestName) { 
        
        RestartDeployedCodePackageDescription.initialize(this, codePackageInstanceId, codePackageName, serviceManifestName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, codePackageInstanceId, codePackageName, serviceManifestName) { 
        obj['CodePackageInstanceId'] = codePackageInstanceId;
        obj['CodePackageName'] = codePackageName;
        obj['ServiceManifestName'] = serviceManifestName;
    }

    /**
     * Constructs a <code>RestartDeployedCodePackageDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestartDeployedCodePackageDescription} obj Optional instance to populate.
     * @return {module:model/RestartDeployedCodePackageDescription} The populated <code>RestartDeployedCodePackageDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestartDeployedCodePackageDescription();

            if (data.hasOwnProperty('CodePackageInstanceId')) {
                obj['CodePackageInstanceId'] = ApiClient.convertToType(data['CodePackageInstanceId'], 'String');
            }
            if (data.hasOwnProperty('CodePackageName')) {
                obj['CodePackageName'] = ApiClient.convertToType(data['CodePackageName'], 'String');
            }
            if (data.hasOwnProperty('ServiceManifestName')) {
                obj['ServiceManifestName'] = ApiClient.convertToType(data['ServiceManifestName'], 'String');
            }
            if (data.hasOwnProperty('ServicePackageActivationId')) {
                obj['ServicePackageActivationId'] = ApiClient.convertToType(data['ServicePackageActivationId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestartDeployedCodePackageDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestartDeployedCodePackageDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RestartDeployedCodePackageDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CodePackageInstanceId'] && !(typeof data['CodePackageInstanceId'] === 'string' || data['CodePackageInstanceId'] instanceof String)) {
            throw new Error("Expected the field `CodePackageInstanceId` to be a primitive type in the JSON string but got " + data['CodePackageInstanceId']);
        }
        // ensure the json data is a string
        if (data['CodePackageName'] && !(typeof data['CodePackageName'] === 'string' || data['CodePackageName'] instanceof String)) {
            throw new Error("Expected the field `CodePackageName` to be a primitive type in the JSON string but got " + data['CodePackageName']);
        }
        // ensure the json data is a string
        if (data['ServiceManifestName'] && !(typeof data['ServiceManifestName'] === 'string' || data['ServiceManifestName'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got " + data['ServiceManifestName']);
        }
        // ensure the json data is a string
        if (data['ServicePackageActivationId'] && !(typeof data['ServicePackageActivationId'] === 'string' || data['ServicePackageActivationId'] instanceof String)) {
            throw new Error("Expected the field `ServicePackageActivationId` to be a primitive type in the JSON string but got " + data['ServicePackageActivationId']);
        }

        return true;
    }


}

RestartDeployedCodePackageDescription.RequiredProperties = ["CodePackageInstanceId", "CodePackageName", "ServiceManifestName"];

/**
 * The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
 * @member {String} CodePackageInstanceId
 */
RestartDeployedCodePackageDescription.prototype['CodePackageInstanceId'] = undefined;

/**
 * The name of the code package defined in the service manifest.
 * @member {String} CodePackageName
 */
RestartDeployedCodePackageDescription.prototype['CodePackageName'] = undefined;

/**
 * The name of the service manifest.
 * @member {String} ServiceManifestName
 */
RestartDeployedCodePackageDescription.prototype['ServiceManifestName'] = undefined;

/**
 * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string.
 * @member {String} ServicePackageActivationId
 */
RestartDeployedCodePackageDescription.prototype['ServicePackageActivationId'] = undefined;






export default RestartDeployedCodePackageDescription;

