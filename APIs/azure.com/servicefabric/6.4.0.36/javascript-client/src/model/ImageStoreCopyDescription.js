/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageStoreCopyDescription model module.
 * @module model/ImageStoreCopyDescription
 * @version 6.4.0.36
 */
class ImageStoreCopyDescription {
    /**
     * Constructs a new <code>ImageStoreCopyDescription</code>.
     * Information about how to copy image store content from one image store relative path to another image store relative path.
     * @alias module:model/ImageStoreCopyDescription
     * @param remoteDestination {String} The relative path of destination image store content to be copied to.
     * @param remoteSource {String} The relative path of source image store content to be copied from.
     */
    constructor(remoteDestination, remoteSource) { 
        
        ImageStoreCopyDescription.initialize(this, remoteDestination, remoteSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, remoteDestination, remoteSource) { 
        obj['RemoteDestination'] = remoteDestination;
        obj['RemoteSource'] = remoteSource;
    }

    /**
     * Constructs a <code>ImageStoreCopyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageStoreCopyDescription} obj Optional instance to populate.
     * @return {module:model/ImageStoreCopyDescription} The populated <code>ImageStoreCopyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageStoreCopyDescription();

            if (data.hasOwnProperty('CheckMarkFile')) {
                obj['CheckMarkFile'] = ApiClient.convertToType(data['CheckMarkFile'], 'Boolean');
            }
            if (data.hasOwnProperty('RemoteDestination')) {
                obj['RemoteDestination'] = ApiClient.convertToType(data['RemoteDestination'], 'String');
            }
            if (data.hasOwnProperty('RemoteSource')) {
                obj['RemoteSource'] = ApiClient.convertToType(data['RemoteSource'], 'String');
            }
            if (data.hasOwnProperty('SkipFiles')) {
                obj['SkipFiles'] = ApiClient.convertToType(data['SkipFiles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageStoreCopyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageStoreCopyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageStoreCopyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['RemoteDestination'] && !(typeof data['RemoteDestination'] === 'string' || data['RemoteDestination'] instanceof String)) {
            throw new Error("Expected the field `RemoteDestination` to be a primitive type in the JSON string but got " + data['RemoteDestination']);
        }
        // ensure the json data is a string
        if (data['RemoteSource'] && !(typeof data['RemoteSource'] === 'string' || data['RemoteSource'] instanceof String)) {
            throw new Error("Expected the field `RemoteSource` to be a primitive type in the JSON string but got " + data['RemoteSource']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SkipFiles'])) {
            throw new Error("Expected the field `SkipFiles` to be an array in the JSON data but got " + data['SkipFiles']);
        }

        return true;
    }


}

ImageStoreCopyDescription.RequiredProperties = ["RemoteDestination", "RemoteSource"];

/**
 * Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped.
 * @member {Boolean} CheckMarkFile
 */
ImageStoreCopyDescription.prototype['CheckMarkFile'] = undefined;

/**
 * The relative path of destination image store content to be copied to.
 * @member {String} RemoteDestination
 */
ImageStoreCopyDescription.prototype['RemoteDestination'] = undefined;

/**
 * The relative path of source image store content to be copied from.
 * @member {String} RemoteSource
 */
ImageStoreCopyDescription.prototype['RemoteSource'] = undefined;

/**
 * The list of the file names to be skipped for copying.
 * @member {Array.<String>} SkipFiles
 */
ImageStoreCopyDescription.prototype['SkipFiles'] = undefined;






export default ImageStoreCopyDescription;

