/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityHealth from './EntityHealth';
import HealthEvaluationWrapper from './HealthEvaluationWrapper';
import HealthEvent from './HealthEvent';
import HealthState from './HealthState';
import HealthStatistics from './HealthStatistics';
import PartitionHealthState from './PartitionHealthState';

/**
 * The ServiceHealth model module.
 * @module model/ServiceHealth
 * @version 6.4.0.36
 */
class ServiceHealth {
    /**
     * Constructs a new <code>ServiceHealth</code>.
     * Information about the health of a Service Fabric service.
     * @alias module:model/ServiceHealth
     * @implements module:model/EntityHealth
     */
    constructor() { 
        EntityHealth.initialize(this);
        ServiceHealth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceHealth} obj Optional instance to populate.
     * @return {module:model/ServiceHealth} The populated <code>ServiceHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceHealth();
            EntityHealth.constructFromObject(data, obj);

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PartitionHealthStates')) {
                obj['PartitionHealthStates'] = ApiClient.convertToType(data['PartitionHealthStates'], [PartitionHealthState]);
            }
            if (data.hasOwnProperty('AggregatedHealthState')) {
                obj['AggregatedHealthState'] = HealthState.constructFromObject(data['AggregatedHealthState']);
            }
            if (data.hasOwnProperty('HealthEvents')) {
                obj['HealthEvents'] = ApiClient.convertToType(data['HealthEvents'], [HealthEvent]);
            }
            if (data.hasOwnProperty('HealthStatistics')) {
                obj['HealthStatistics'] = HealthStatistics.constructFromObject(data['HealthStatistics']);
            }
            if (data.hasOwnProperty('UnhealthyEvaluations')) {
                obj['UnhealthyEvaluations'] = ApiClient.convertToType(data['UnhealthyEvaluations'], [HealthEvaluationWrapper]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceHealth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['PartitionHealthStates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PartitionHealthStates'])) {
                throw new Error("Expected the field `PartitionHealthStates` to be an array in the JSON data but got " + data['PartitionHealthStates']);
            }
            // validate the optional field `PartitionHealthStates` (array)
            for (const item of data['PartitionHealthStates']) {
                PartitionHealthState.validateJSON(item);
            };
        }
        if (data['HealthEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HealthEvents'])) {
                throw new Error("Expected the field `HealthEvents` to be an array in the JSON data but got " + data['HealthEvents']);
            }
            // validate the optional field `HealthEvents` (array)
            for (const item of data['HealthEvents']) {
                HealthEvent.validateJSON(item);
            };
        }
        // validate the optional field `HealthStatistics`
        if (data['HealthStatistics']) { // data not null
          HealthStatistics.validateJSON(data['HealthStatistics']);
        }
        if (data['UnhealthyEvaluations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UnhealthyEvaluations'])) {
                throw new Error("Expected the field `UnhealthyEvaluations` to be an array in the JSON data but got " + data['UnhealthyEvaluations']);
            }
            // validate the optional field `UnhealthyEvaluations` (array)
            for (const item of data['UnhealthyEvaluations']) {
                HealthEvaluationWrapper.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} Name
 */
ServiceHealth.prototype['Name'] = undefined;

/**
 * The list of partition health states associated with the service.
 * @member {Array.<module:model/PartitionHealthState>} PartitionHealthStates
 */
ServiceHealth.prototype['PartitionHealthStates'] = undefined;

/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
ServiceHealth.prototype['AggregatedHealthState'] = undefined;

/**
 * The list of health events reported on the entity.
 * @member {Array.<module:model/HealthEvent>} HealthEvents
 */
ServiceHealth.prototype['HealthEvents'] = undefined;

/**
 * @member {module:model/HealthStatistics} HealthStatistics
 */
ServiceHealth.prototype['HealthStatistics'] = undefined;

/**
 * List of health evaluations that resulted in the current aggregated health state.
 * @member {Array.<module:model/HealthEvaluationWrapper>} UnhealthyEvaluations
 */
ServiceHealth.prototype['UnhealthyEvaluations'] = undefined;


// Implement EntityHealth interface:
/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
EntityHealth.prototype['AggregatedHealthState'] = undefined;
/**
 * The list of health events reported on the entity.
 * @member {Array.<module:model/HealthEvent>} HealthEvents
 */
EntityHealth.prototype['HealthEvents'] = undefined;
/**
 * @member {module:model/HealthStatistics} HealthStatistics
 */
EntityHealth.prototype['HealthStatistics'] = undefined;
/**
 * List of health evaluations that resulted in the current aggregated health state.
 * @member {Array.<module:model/HealthEvaluationWrapper>} UnhealthyEvaluations
 */
EntityHealth.prototype['UnhealthyEvaluations'] = undefined;




export default ServiceHealth;

