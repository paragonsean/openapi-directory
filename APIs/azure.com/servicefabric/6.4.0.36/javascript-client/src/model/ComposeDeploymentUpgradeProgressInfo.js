/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicy from './ApplicationHealthPolicy';
import ComposeDeploymentUpgradeState from './ComposeDeploymentUpgradeState';
import CurrentUpgradeDomainProgressInfo from './CurrentUpgradeDomainProgressInfo';
import FailureReason from './FailureReason';
import FailureUpgradeDomainProgressInfo from './FailureUpgradeDomainProgressInfo';
import HealthEvaluationWrapper from './HealthEvaluationWrapper';
import MonitoringPolicyDescription from './MonitoringPolicyDescription';
import UpgradeKind from './UpgradeKind';
import UpgradeMode from './UpgradeMode';

/**
 * The ComposeDeploymentUpgradeProgressInfo model module.
 * @module model/ComposeDeploymentUpgradeProgressInfo
 * @version 6.4.0.36
 */
class ComposeDeploymentUpgradeProgressInfo {
    /**
     * Constructs a new <code>ComposeDeploymentUpgradeProgressInfo</code>.
     * Describes the parameters for a compose deployment upgrade.
     * @alias module:model/ComposeDeploymentUpgradeProgressInfo
     */
    constructor() { 
        
        ComposeDeploymentUpgradeProgressInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['CurrentUpgradeDomainDuration'] = 'PT0H2M0S';
        obj['ForceRestart'] = false;
        obj['UpgradeDuration'] = 'PT0H2M0S';
    }

    /**
     * Constructs a <code>ComposeDeploymentUpgradeProgressInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComposeDeploymentUpgradeProgressInfo} obj Optional instance to populate.
     * @return {module:model/ComposeDeploymentUpgradeProgressInfo} The populated <code>ComposeDeploymentUpgradeProgressInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComposeDeploymentUpgradeProgressInfo();

            if (data.hasOwnProperty('ApplicationHealthPolicy')) {
                obj['ApplicationHealthPolicy'] = ApplicationHealthPolicy.constructFromObject(data['ApplicationHealthPolicy']);
            }
            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationUnhealthyEvaluations')) {
                obj['ApplicationUnhealthyEvaluations'] = ApiClient.convertToType(data['ApplicationUnhealthyEvaluations'], [HealthEvaluationWrapper]);
            }
            if (data.hasOwnProperty('ApplicationUpgradeStatusDetails')) {
                obj['ApplicationUpgradeStatusDetails'] = ApiClient.convertToType(data['ApplicationUpgradeStatusDetails'], 'String');
            }
            if (data.hasOwnProperty('CurrentUpgradeDomainDuration')) {
                obj['CurrentUpgradeDomainDuration'] = ApiClient.convertToType(data['CurrentUpgradeDomainDuration'], 'String');
            }
            if (data.hasOwnProperty('CurrentUpgradeDomainProgress')) {
                obj['CurrentUpgradeDomainProgress'] = CurrentUpgradeDomainProgressInfo.constructFromObject(data['CurrentUpgradeDomainProgress']);
            }
            if (data.hasOwnProperty('DeploymentName')) {
                obj['DeploymentName'] = ApiClient.convertToType(data['DeploymentName'], 'String');
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = FailureReason.constructFromObject(data['FailureReason']);
            }
            if (data.hasOwnProperty('FailureTimestampUtc')) {
                obj['FailureTimestampUtc'] = ApiClient.convertToType(data['FailureTimestampUtc'], 'String');
            }
            if (data.hasOwnProperty('ForceRestart')) {
                obj['ForceRestart'] = ApiClient.convertToType(data['ForceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('MonitoringPolicy')) {
                obj['MonitoringPolicy'] = MonitoringPolicyDescription.constructFromObject(data['MonitoringPolicy']);
            }
            if (data.hasOwnProperty('RollingUpgradeMode')) {
                obj['RollingUpgradeMode'] = UpgradeMode.constructFromObject(data['RollingUpgradeMode']);
            }
            if (data.hasOwnProperty('StartTimestampUtc')) {
                obj['StartTimestampUtc'] = ApiClient.convertToType(data['StartTimestampUtc'], 'String');
            }
            if (data.hasOwnProperty('TargetApplicationTypeVersion')) {
                obj['TargetApplicationTypeVersion'] = ApiClient.convertToType(data['TargetApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('UpgradeDomainProgressAtFailure')) {
                obj['UpgradeDomainProgressAtFailure'] = FailureUpgradeDomainProgressInfo.constructFromObject(data['UpgradeDomainProgressAtFailure']);
            }
            if (data.hasOwnProperty('UpgradeDuration')) {
                obj['UpgradeDuration'] = ApiClient.convertToType(data['UpgradeDuration'], 'String');
            }
            if (data.hasOwnProperty('UpgradeKind')) {
                obj['UpgradeKind'] = UpgradeKind.constructFromObject(data['UpgradeKind']);
            }
            if (data.hasOwnProperty('UpgradeReplicaSetCheckTimeoutInSeconds')) {
                obj['UpgradeReplicaSetCheckTimeoutInSeconds'] = ApiClient.convertToType(data['UpgradeReplicaSetCheckTimeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('UpgradeState')) {
                obj['UpgradeState'] = ComposeDeploymentUpgradeState.constructFromObject(data['UpgradeState']);
            }
            if (data.hasOwnProperty('UpgradeStatusDetails')) {
                obj['UpgradeStatusDetails'] = ApiClient.convertToType(data['UpgradeStatusDetails'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComposeDeploymentUpgradeProgressInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComposeDeploymentUpgradeProgressInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ApplicationHealthPolicy`
        if (data['ApplicationHealthPolicy']) { // data not null
          ApplicationHealthPolicy.validateJSON(data['ApplicationHealthPolicy']);
        }
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        if (data['ApplicationUnhealthyEvaluations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ApplicationUnhealthyEvaluations'])) {
                throw new Error("Expected the field `ApplicationUnhealthyEvaluations` to be an array in the JSON data but got " + data['ApplicationUnhealthyEvaluations']);
            }
            // validate the optional field `ApplicationUnhealthyEvaluations` (array)
            for (const item of data['ApplicationUnhealthyEvaluations']) {
                HealthEvaluationWrapper.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ApplicationUpgradeStatusDetails'] && !(typeof data['ApplicationUpgradeStatusDetails'] === 'string' || data['ApplicationUpgradeStatusDetails'] instanceof String)) {
            throw new Error("Expected the field `ApplicationUpgradeStatusDetails` to be a primitive type in the JSON string but got " + data['ApplicationUpgradeStatusDetails']);
        }
        // ensure the json data is a string
        if (data['CurrentUpgradeDomainDuration'] && !(typeof data['CurrentUpgradeDomainDuration'] === 'string' || data['CurrentUpgradeDomainDuration'] instanceof String)) {
            throw new Error("Expected the field `CurrentUpgradeDomainDuration` to be a primitive type in the JSON string but got " + data['CurrentUpgradeDomainDuration']);
        }
        // validate the optional field `CurrentUpgradeDomainProgress`
        if (data['CurrentUpgradeDomainProgress']) { // data not null
          CurrentUpgradeDomainProgressInfo.validateJSON(data['CurrentUpgradeDomainProgress']);
        }
        // ensure the json data is a string
        if (data['DeploymentName'] && !(typeof data['DeploymentName'] === 'string' || data['DeploymentName'] instanceof String)) {
            throw new Error("Expected the field `DeploymentName` to be a primitive type in the JSON string but got " + data['DeploymentName']);
        }
        // ensure the json data is a string
        if (data['FailureTimestampUtc'] && !(typeof data['FailureTimestampUtc'] === 'string' || data['FailureTimestampUtc'] instanceof String)) {
            throw new Error("Expected the field `FailureTimestampUtc` to be a primitive type in the JSON string but got " + data['FailureTimestampUtc']);
        }
        // validate the optional field `MonitoringPolicy`
        if (data['MonitoringPolicy']) { // data not null
          MonitoringPolicyDescription.validateJSON(data['MonitoringPolicy']);
        }
        // ensure the json data is a string
        if (data['StartTimestampUtc'] && !(typeof data['StartTimestampUtc'] === 'string' || data['StartTimestampUtc'] instanceof String)) {
            throw new Error("Expected the field `StartTimestampUtc` to be a primitive type in the JSON string but got " + data['StartTimestampUtc']);
        }
        // ensure the json data is a string
        if (data['TargetApplicationTypeVersion'] && !(typeof data['TargetApplicationTypeVersion'] === 'string' || data['TargetApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['TargetApplicationTypeVersion']);
        }
        // validate the optional field `UpgradeDomainProgressAtFailure`
        if (data['UpgradeDomainProgressAtFailure']) { // data not null
          FailureUpgradeDomainProgressInfo.validateJSON(data['UpgradeDomainProgressAtFailure']);
        }
        // ensure the json data is a string
        if (data['UpgradeDuration'] && !(typeof data['UpgradeDuration'] === 'string' || data['UpgradeDuration'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDuration` to be a primitive type in the JSON string but got " + data['UpgradeDuration']);
        }
        // ensure the json data is a string
        if (data['UpgradeStatusDetails'] && !(typeof data['UpgradeStatusDetails'] === 'string' || data['UpgradeStatusDetails'] instanceof String)) {
            throw new Error("Expected the field `UpgradeStatusDetails` to be a primitive type in the JSON string but got " + data['UpgradeStatusDetails']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApplicationHealthPolicy} ApplicationHealthPolicy
 */
ComposeDeploymentUpgradeProgressInfo.prototype['ApplicationHealthPolicy'] = undefined;

/**
 * The name of the target application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
ComposeDeploymentUpgradeProgressInfo.prototype['ApplicationName'] = undefined;

/**
 * List of health evaluations that resulted in the current aggregated health state.
 * @member {Array.<module:model/HealthEvaluationWrapper>} ApplicationUnhealthyEvaluations
 */
ComposeDeploymentUpgradeProgressInfo.prototype['ApplicationUnhealthyEvaluations'] = undefined;

/**
 * Additional details of application upgrade including failure message.
 * @member {String} ApplicationUpgradeStatusDetails
 */
ComposeDeploymentUpgradeProgressInfo.prototype['ApplicationUpgradeStatusDetails'] = undefined;

/**
 * The estimated amount of time spent processing current Upgrade Domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} CurrentUpgradeDomainDuration
 * @default 'PT0H2M0S'
 */
ComposeDeploymentUpgradeProgressInfo.prototype['CurrentUpgradeDomainDuration'] = 'PT0H2M0S';

/**
 * @member {module:model/CurrentUpgradeDomainProgressInfo} CurrentUpgradeDomainProgress
 */
ComposeDeploymentUpgradeProgressInfo.prototype['CurrentUpgradeDomainProgress'] = undefined;

/**
 * The name of the target deployment.
 * @member {String} DeploymentName
 */
ComposeDeploymentUpgradeProgressInfo.prototype['DeploymentName'] = undefined;

/**
 * @member {module:model/FailureReason} FailureReason
 */
ComposeDeploymentUpgradeProgressInfo.prototype['FailureReason'] = undefined;

/**
 * The estimated UTC datetime when the upgrade failed and FailureAction was executed.
 * @member {String} FailureTimestampUtc
 */
ComposeDeploymentUpgradeProgressInfo.prototype['FailureTimestampUtc'] = undefined;

/**
 * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
 * @member {Boolean} ForceRestart
 * @default false
 */
ComposeDeploymentUpgradeProgressInfo.prototype['ForceRestart'] = false;

/**
 * @member {module:model/MonitoringPolicyDescription} MonitoringPolicy
 */
ComposeDeploymentUpgradeProgressInfo.prototype['MonitoringPolicy'] = undefined;

/**
 * @member {module:model/UpgradeMode} RollingUpgradeMode
 */
ComposeDeploymentUpgradeProgressInfo.prototype['RollingUpgradeMode'] = undefined;

/**
 * The estimated UTC datetime when the upgrade started.
 * @member {String} StartTimestampUtc
 */
ComposeDeploymentUpgradeProgressInfo.prototype['StartTimestampUtc'] = undefined;

/**
 * The target application type version (found in the application manifest) for the application upgrade.
 * @member {String} TargetApplicationTypeVersion
 */
ComposeDeploymentUpgradeProgressInfo.prototype['TargetApplicationTypeVersion'] = undefined;

/**
 * @member {module:model/FailureUpgradeDomainProgressInfo} UpgradeDomainProgressAtFailure
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeDomainProgressAtFailure'] = undefined;

/**
 * The estimated amount of time that the overall upgrade elapsed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} UpgradeDuration
 * @default 'PT0H2M0S'
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeDuration'] = 'PT0H2M0S';

/**
 * @member {module:model/UpgradeKind} UpgradeKind
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeKind'] = undefined;

/**
 * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {Number} UpgradeReplicaSetCheckTimeoutInSeconds
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeReplicaSetCheckTimeoutInSeconds'] = undefined;

/**
 * @member {module:model/ComposeDeploymentUpgradeState} UpgradeState
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeState'] = undefined;

/**
 * Additional detailed information about the status of the pending upgrade.
 * @member {String} UpgradeStatusDetails
 */
ComposeDeploymentUpgradeProgressInfo.prototype['UpgradeStatusDetails'] = undefined;






export default ComposeDeploymentUpgradeProgressInfo;

