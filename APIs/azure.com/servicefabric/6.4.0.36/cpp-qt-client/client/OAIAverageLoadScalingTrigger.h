/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAverageLoadScalingTrigger.h
 *
 * Describes the average load trigger used for auto scaling.
 */

#ifndef OAIAverageLoadScalingTrigger_H
#define OAIAverageLoadScalingTrigger_H

#include <QJsonObject>

#include "OAIAutoScalingMetric.h"
#include "OAIAutoScalingTrigger.h"
#include "OAIAutoScalingTriggerKind.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoScalingMetric;

class OAIAverageLoadScalingTrigger : public OAIObject {
public:
    OAIAverageLoadScalingTrigger();
    OAIAverageLoadScalingTrigger(QString json);
    ~OAIAverageLoadScalingTrigger() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getLowerLoadThreshold() const;
    void setLowerLoadThreshold(const double &lower_load_threshold);
    bool is_lower_load_threshold_Set() const;
    bool is_lower_load_threshold_Valid() const;

    OAIAutoScalingMetric getMetric() const;
    void setMetric(const OAIAutoScalingMetric &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    qint32 getScaleIntervalInSeconds() const;
    void setScaleIntervalInSeconds(const qint32 &scale_interval_in_seconds);
    bool is_scale_interval_in_seconds_Set() const;
    bool is_scale_interval_in_seconds_Valid() const;

    double getUpperLoadThreshold() const;
    void setUpperLoadThreshold(const double &upper_load_threshold);
    bool is_upper_load_threshold_Set() const;
    bool is_upper_load_threshold_Valid() const;

    OAIAutoScalingTriggerKind getKind() const;
    void setKind(const OAIAutoScalingTriggerKind &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_lower_load_threshold;
    bool m_lower_load_threshold_isSet;
    bool m_lower_load_threshold_isValid;

    OAIAutoScalingMetric m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    qint32 m_scale_interval_in_seconds;
    bool m_scale_interval_in_seconds_isSet;
    bool m_scale_interval_in_seconds_isValid;

    double m_upper_load_threshold;
    bool m_upper_load_threshold_isSet;
    bool m_upper_load_threshold_isValid;

    OAIAutoScalingTriggerKind m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAverageLoadScalingTrigger)

#endif // OAIAverageLoadScalingTrigger_H
