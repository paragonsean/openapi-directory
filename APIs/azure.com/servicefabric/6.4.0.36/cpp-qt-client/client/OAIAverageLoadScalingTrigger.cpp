/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAverageLoadScalingTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAverageLoadScalingTrigger::OAIAverageLoadScalingTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAverageLoadScalingTrigger::OAIAverageLoadScalingTrigger() {
    this->initializeModel();
}

OAIAverageLoadScalingTrigger::~OAIAverageLoadScalingTrigger() {}

void OAIAverageLoadScalingTrigger::initializeModel() {

    m_lower_load_threshold_isSet = false;
    m_lower_load_threshold_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_scale_interval_in_seconds_isSet = false;
    m_scale_interval_in_seconds_isValid = false;

    m_upper_load_threshold_isSet = false;
    m_upper_load_threshold_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIAverageLoadScalingTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAverageLoadScalingTrigger::fromJsonObject(QJsonObject json) {

    m_lower_load_threshold_isValid = ::OpenAPI::fromJsonValue(m_lower_load_threshold, json[QString("lowerLoadThreshold")]);
    m_lower_load_threshold_isSet = !json[QString("lowerLoadThreshold")].isNull() && m_lower_load_threshold_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_scale_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_scale_interval_in_seconds, json[QString("scaleIntervalInSeconds")]);
    m_scale_interval_in_seconds_isSet = !json[QString("scaleIntervalInSeconds")].isNull() && m_scale_interval_in_seconds_isValid;

    m_upper_load_threshold_isValid = ::OpenAPI::fromJsonValue(m_upper_load_threshold, json[QString("upperLoadThreshold")]);
    m_upper_load_threshold_isSet = !json[QString("upperLoadThreshold")].isNull() && m_upper_load_threshold_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIAverageLoadScalingTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAverageLoadScalingTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_lower_load_threshold_isSet) {
        obj.insert(QString("lowerLoadThreshold"), ::OpenAPI::toJsonValue(m_lower_load_threshold));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_scale_interval_in_seconds_isSet) {
        obj.insert(QString("scaleIntervalInSeconds"), ::OpenAPI::toJsonValue(m_scale_interval_in_seconds));
    }
    if (m_upper_load_threshold_isSet) {
        obj.insert(QString("upperLoadThreshold"), ::OpenAPI::toJsonValue(m_upper_load_threshold));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

double OAIAverageLoadScalingTrigger::getLowerLoadThreshold() const {
    return m_lower_load_threshold;
}
void OAIAverageLoadScalingTrigger::setLowerLoadThreshold(const double &lower_load_threshold) {
    m_lower_load_threshold = lower_load_threshold;
    m_lower_load_threshold_isSet = true;
}

bool OAIAverageLoadScalingTrigger::is_lower_load_threshold_Set() const{
    return m_lower_load_threshold_isSet;
}

bool OAIAverageLoadScalingTrigger::is_lower_load_threshold_Valid() const{
    return m_lower_load_threshold_isValid;
}

OAIAutoScalingMetric OAIAverageLoadScalingTrigger::getMetric() const {
    return m_metric;
}
void OAIAverageLoadScalingTrigger::setMetric(const OAIAutoScalingMetric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIAverageLoadScalingTrigger::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIAverageLoadScalingTrigger::is_metric_Valid() const{
    return m_metric_isValid;
}

qint32 OAIAverageLoadScalingTrigger::getScaleIntervalInSeconds() const {
    return m_scale_interval_in_seconds;
}
void OAIAverageLoadScalingTrigger::setScaleIntervalInSeconds(const qint32 &scale_interval_in_seconds) {
    m_scale_interval_in_seconds = scale_interval_in_seconds;
    m_scale_interval_in_seconds_isSet = true;
}

bool OAIAverageLoadScalingTrigger::is_scale_interval_in_seconds_Set() const{
    return m_scale_interval_in_seconds_isSet;
}

bool OAIAverageLoadScalingTrigger::is_scale_interval_in_seconds_Valid() const{
    return m_scale_interval_in_seconds_isValid;
}

double OAIAverageLoadScalingTrigger::getUpperLoadThreshold() const {
    return m_upper_load_threshold;
}
void OAIAverageLoadScalingTrigger::setUpperLoadThreshold(const double &upper_load_threshold) {
    m_upper_load_threshold = upper_load_threshold;
    m_upper_load_threshold_isSet = true;
}

bool OAIAverageLoadScalingTrigger::is_upper_load_threshold_Set() const{
    return m_upper_load_threshold_isSet;
}

bool OAIAverageLoadScalingTrigger::is_upper_load_threshold_Valid() const{
    return m_upper_load_threshold_isValid;
}

OAIAutoScalingTriggerKind OAIAverageLoadScalingTrigger::getKind() const {
    return m_kind;
}
void OAIAverageLoadScalingTrigger::setKind(const OAIAutoScalingTriggerKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAverageLoadScalingTrigger::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAverageLoadScalingTrigger::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAverageLoadScalingTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lower_load_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_load_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAverageLoadScalingTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lower_load_threshold_isValid && m_metric_isValid && m_scale_interval_in_seconds_isValid && m_upper_load_threshold_isValid && m_kind_isValid && true;
}

} // namespace OpenAPI
