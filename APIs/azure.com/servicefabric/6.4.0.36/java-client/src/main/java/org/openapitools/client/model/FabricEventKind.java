/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The kind of FabricEvent.
 */
@JsonAdapter(FabricEventKind.Adapter.class)
public enum FabricEventKind {
  
  CLUSTER_EVENT("ClusterEvent"),
  
  CONTAINER_INSTANCE_EVENT("ContainerInstanceEvent"),
  
  NODE_EVENT("NodeEvent"),
  
  APPLICATION_EVENT("ApplicationEvent"),
  
  SERVICE_EVENT("ServiceEvent"),
  
  PARTITION_EVENT("PartitionEvent"),
  
  REPLICA_EVENT("ReplicaEvent"),
  
  PARTITION_ANALYSIS_EVENT("PartitionAnalysisEvent"),
  
  APPLICATION_CREATED("ApplicationCreated"),
  
  APPLICATION_DELETED("ApplicationDeleted"),
  
  APPLICATION_NEW_HEALTH_REPORT("ApplicationNewHealthReport"),
  
  APPLICATION_HEALTH_REPORT_EXPIRED("ApplicationHealthReportExpired"),
  
  APPLICATION_UPGRADE_COMPLETED("ApplicationUpgradeCompleted"),
  
  APPLICATION_UPGRADE_DOMAIN_COMPLETED("ApplicationUpgradeDomainCompleted"),
  
  APPLICATION_UPGRADE_ROLLBACK_COMPLETED("ApplicationUpgradeRollbackCompleted"),
  
  APPLICATION_UPGRADE_ROLLBACK_STARTED("ApplicationUpgradeRollbackStarted"),
  
  APPLICATION_UPGRADE_STARTED("ApplicationUpgradeStarted"),
  
  DEPLOYED_APPLICATION_NEW_HEALTH_REPORT("DeployedApplicationNewHealthReport"),
  
  DEPLOYED_APPLICATION_HEALTH_REPORT_EXPIRED("DeployedApplicationHealthReportExpired"),
  
  APPLICATION_PROCESS_EXITED("ApplicationProcessExited"),
  
  APPLICATION_CONTAINER_INSTANCE_EXITED("ApplicationContainerInstanceExited"),
  
  NODE_ABORTED("NodeAborted"),
  
  NODE_ADDED_TO_CLUSTER("NodeAddedToCluster"),
  
  NODE_CLOSED("NodeClosed"),
  
  NODE_DEACTIVATE_COMPLETED("NodeDeactivateCompleted"),
  
  NODE_DEACTIVATE_STARTED("NodeDeactivateStarted"),
  
  NODE_DOWN("NodeDown"),
  
  NODE_NEW_HEALTH_REPORT("NodeNewHealthReport"),
  
  NODE_HEALTH_REPORT_EXPIRED("NodeHealthReportExpired"),
  
  NODE_OPEN_SUCCEEDED("NodeOpenSucceeded"),
  
  NODE_OPEN_FAILED("NodeOpenFailed"),
  
  NODE_REMOVED_FROM_CLUSTER("NodeRemovedFromCluster"),
  
  NODE_UP("NodeUp"),
  
  PARTITION_NEW_HEALTH_REPORT("PartitionNewHealthReport"),
  
  PARTITION_HEALTH_REPORT_EXPIRED("PartitionHealthReportExpired"),
  
  PARTITION_RECONFIGURED("PartitionReconfigured"),
  
  PARTITION_PRIMARY_MOVE_ANALYSIS("PartitionPrimaryMoveAnalysis"),
  
  SERVICE_CREATED("ServiceCreated"),
  
  SERVICE_DELETED("ServiceDeleted"),
  
  SERVICE_NEW_HEALTH_REPORT("ServiceNewHealthReport"),
  
  SERVICE_HEALTH_REPORT_EXPIRED("ServiceHealthReportExpired"),
  
  DEPLOYED_SERVICE_PACKAGE_NEW_HEALTH_REPORT("DeployedServicePackageNewHealthReport"),
  
  DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EXPIRED("DeployedServicePackageHealthReportExpired"),
  
  STATEFUL_REPLICA_NEW_HEALTH_REPORT("StatefulReplicaNewHealthReport"),
  
  STATEFUL_REPLICA_HEALTH_REPORT_EXPIRED("StatefulReplicaHealthReportExpired"),
  
  STATELESS_REPLICA_NEW_HEALTH_REPORT("StatelessReplicaNewHealthReport"),
  
  STATELESS_REPLICA_HEALTH_REPORT_EXPIRED("StatelessReplicaHealthReportExpired"),
  
  CLUSTER_NEW_HEALTH_REPORT("ClusterNewHealthReport"),
  
  CLUSTER_HEALTH_REPORT_EXPIRED("ClusterHealthReportExpired"),
  
  CLUSTER_UPGRADE_COMPLETED("ClusterUpgradeCompleted"),
  
  CLUSTER_UPGRADE_DOMAIN_COMPLETED("ClusterUpgradeDomainCompleted"),
  
  CLUSTER_UPGRADE_ROLLBACK_COMPLETED("ClusterUpgradeRollbackCompleted"),
  
  CLUSTER_UPGRADE_ROLLBACK_STARTED("ClusterUpgradeRollbackStarted"),
  
  CLUSTER_UPGRADE_STARTED("ClusterUpgradeStarted"),
  
  CHAOS_STOPPED("ChaosStopped"),
  
  CHAOS_STARTED("ChaosStarted"),
  
  CHAOS_CODE_PACKAGE_RESTART_SCHEDULED("ChaosCodePackageRestartScheduled"),
  
  CHAOS_REPLICA_REMOVAL_SCHEDULED("ChaosReplicaRemovalScheduled"),
  
  CHAOS_PARTITION_SECONDARY_MOVE_SCHEDULED("ChaosPartitionSecondaryMoveScheduled"),
  
  CHAOS_PARTITION_PRIMARY_MOVE_SCHEDULED("ChaosPartitionPrimaryMoveScheduled"),
  
  CHAOS_REPLICA_RESTART_SCHEDULED("ChaosReplicaRestartScheduled"),
  
  CHAOS_NODE_RESTART_SCHEDULED("ChaosNodeRestartScheduled");

  private String value;

  FabricEventKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FabricEventKind fromValue(String value) {
    for (FabricEventKind b : FabricEventKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FabricEventKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final FabricEventKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FabricEventKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FabricEventKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FabricEventKind.fromValue(value);
  }
}

