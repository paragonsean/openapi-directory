/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpConfig;
import org.openapitools.client.model.NetworkRef;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.TcpConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes properties of a gateway resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GatewayProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_NETWORK = "destinationNetwork";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NETWORK)
  private NetworkRef destinationNetwork;

  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private List<HttpConfig> http = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_SOURCE_NETWORK = "sourceNetwork";
  @SerializedName(SERIALIZED_NAME_SOURCE_NETWORK)
  private NetworkRef sourceNetwork;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ResourceStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public static final String SERIALIZED_NAME_TCP = "tcp";
  @SerializedName(SERIALIZED_NAME_TCP)
  private List<TcpConfig> tcp = new ArrayList<>();

  public GatewayProperties() {
  }

  public GatewayProperties(
     String ipAddress, 
     String statusDetails
  ) {
    this();
    this.ipAddress = ipAddress;
    this.statusDetails = statusDetails;
  }

  public GatewayProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User readable description of the gateway.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GatewayProperties destinationNetwork(NetworkRef destinationNetwork) {
    this.destinationNetwork = destinationNetwork;
    return this;
  }

  /**
   * Get destinationNetwork
   * @return destinationNetwork
   */
  @javax.annotation.Nonnull
  public NetworkRef getDestinationNetwork() {
    return destinationNetwork;
  }

  public void setDestinationNetwork(NetworkRef destinationNetwork) {
    this.destinationNetwork = destinationNetwork;
  }


  public GatewayProperties http(List<HttpConfig> http) {
    this.http = http;
    return this;
  }

  public GatewayProperties addHttpItem(HttpConfig httpItem) {
    if (this.http == null) {
      this.http = new ArrayList<>();
    }
    this.http.add(httpItem);
    return this;
  }

  /**
   * Configuration for http connectivity for this gateway.
   * @return http
   */
  @javax.annotation.Nullable
  public List<HttpConfig> getHttp() {
    return http;
  }

  public void setHttp(List<HttpConfig> http) {
    this.http = http;
  }


  /**
   * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }



  public GatewayProperties sourceNetwork(NetworkRef sourceNetwork) {
    this.sourceNetwork = sourceNetwork;
    return this;
  }

  /**
   * Get sourceNetwork
   * @return sourceNetwork
   */
  @javax.annotation.Nonnull
  public NetworkRef getSourceNetwork() {
    return sourceNetwork;
  }

  public void setSourceNetwork(NetworkRef sourceNetwork) {
    this.sourceNetwork = sourceNetwork;
  }


  public GatewayProperties status(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ResourceStatus getStatus() {
    return status;
  }

  public void setStatus(ResourceStatus status) {
    this.status = status;
  }


  /**
   * Gives additional information about the current status of the gateway.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }



  public GatewayProperties tcp(List<TcpConfig> tcp) {
    this.tcp = tcp;
    return this;
  }

  public GatewayProperties addTcpItem(TcpConfig tcpItem) {
    if (this.tcp == null) {
      this.tcp = new ArrayList<>();
    }
    this.tcp.add(tcpItem);
    return this;
  }

  /**
   * Configuration for tcp connectivity for this gateway.
   * @return tcp
   */
  @javax.annotation.Nullable
  public List<TcpConfig> getTcp() {
    return tcp;
  }

  public void setTcp(List<TcpConfig> tcp) {
    this.tcp = tcp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayProperties gatewayProperties = (GatewayProperties) o;
    return Objects.equals(this.description, gatewayProperties.description) &&
        Objects.equals(this.destinationNetwork, gatewayProperties.destinationNetwork) &&
        Objects.equals(this.http, gatewayProperties.http) &&
        Objects.equals(this.ipAddress, gatewayProperties.ipAddress) &&
        Objects.equals(this.sourceNetwork, gatewayProperties.sourceNetwork) &&
        Objects.equals(this.status, gatewayProperties.status) &&
        Objects.equals(this.statusDetails, gatewayProperties.statusDetails) &&
        Objects.equals(this.tcp, gatewayProperties.tcp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, destinationNetwork, http, ipAddress, sourceNetwork, status, statusDetails, tcp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationNetwork: ").append(toIndentedString(destinationNetwork)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    sourceNetwork: ").append(toIndentedString(sourceNetwork)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    tcp: ").append(toIndentedString(tcp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("destinationNetwork");
    openapiFields.add("http");
    openapiFields.add("ipAddress");
    openapiFields.add("sourceNetwork");
    openapiFields.add("status");
    openapiFields.add("statusDetails");
    openapiFields.add("tcp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationNetwork");
    openapiRequiredFields.add("sourceNetwork");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayProperties is not found in the empty JSON string", GatewayProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `destinationNetwork`
      NetworkRef.validateJsonElement(jsonObj.get("destinationNetwork"));
      if (jsonObj.get("http") != null && !jsonObj.get("http").isJsonNull()) {
        JsonArray jsonArrayhttp = jsonObj.getAsJsonArray("http");
        if (jsonArrayhttp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("http").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `http` to be an array in the JSON string but got `%s`", jsonObj.get("http").toString()));
          }

          // validate the optional field `http` (array)
          for (int i = 0; i < jsonArrayhttp.size(); i++) {
            HttpConfig.validateJsonElement(jsonArrayhttp.get(i));
          };
        }
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the required field `sourceNetwork`
      NetworkRef.validateJsonElement(jsonObj.get("sourceNetwork"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) && !jsonObj.get("statusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDetails").toString()));
      }
      if (jsonObj.get("tcp") != null && !jsonObj.get("tcp").isJsonNull()) {
        JsonArray jsonArraytcp = jsonObj.getAsJsonArray("tcp");
        if (jsonArraytcp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tcp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tcp` to be an array in the JSON string but got `%s`", jsonObj.get("tcp").toString()));
          }

          // validate the optional field `tcp` (array)
          for (int i = 0; i < jsonArraytcp.size(); i++) {
            TcpConfig.validateJsonElement(jsonArraytcp.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayProperties>() {
           @Override
           public void write(JsonWriter out, GatewayProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayProperties
   * @throws IOException if the JSON string is invalid with respect to GatewayProperties
   */
  public static GatewayProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayProperties.class);
  }

  /**
   * Convert an instance of GatewayProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

