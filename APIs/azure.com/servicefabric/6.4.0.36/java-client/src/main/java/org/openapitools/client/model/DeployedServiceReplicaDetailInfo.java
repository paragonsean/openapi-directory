/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.LoadMetricReportInfo;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServiceOperationName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a Service Fabric service replica deployed on a node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedServiceReplicaDetailInfo {
  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OPERATION = "CurrentServiceOperation";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OPERATION)
  private ServiceOperationName currentServiceOperation;

  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OPERATION_START_TIME_UTC = "CurrentServiceOperationStartTimeUtc";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OPERATION_START_TIME_UTC)
  private OffsetDateTime currentServiceOperationStartTimeUtc;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_REPORTED_LOAD = "ReportedLoad";
  @SerializedName(SERIALIZED_NAME_REPORTED_LOAD)
  private List<LoadMetricReportInfo> reportedLoad = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  protected ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public DeployedServiceReplicaDetailInfo() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public DeployedServiceReplicaDetailInfo currentServiceOperation(ServiceOperationName currentServiceOperation) {
    this.currentServiceOperation = currentServiceOperation;
    return this;
  }

  /**
   * Get currentServiceOperation
   * @return currentServiceOperation
   */
  @javax.annotation.Nullable
  public ServiceOperationName getCurrentServiceOperation() {
    return currentServiceOperation;
  }

  public void setCurrentServiceOperation(ServiceOperationName currentServiceOperation) {
    this.currentServiceOperation = currentServiceOperation;
  }


  public DeployedServiceReplicaDetailInfo currentServiceOperationStartTimeUtc(OffsetDateTime currentServiceOperationStartTimeUtc) {
    this.currentServiceOperationStartTimeUtc = currentServiceOperationStartTimeUtc;
    return this;
  }

  /**
   * The start time of the current service operation in UTC format.
   * @return currentServiceOperationStartTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentServiceOperationStartTimeUtc() {
    return currentServiceOperationStartTimeUtc;
  }

  public void setCurrentServiceOperationStartTimeUtc(OffsetDateTime currentServiceOperationStartTimeUtc) {
    this.currentServiceOperationStartTimeUtc = currentServiceOperationStartTimeUtc;
  }


  public DeployedServiceReplicaDetailInfo partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public DeployedServiceReplicaDetailInfo reportedLoad(List<LoadMetricReportInfo> reportedLoad) {
    this.reportedLoad = reportedLoad;
    return this;
  }

  public DeployedServiceReplicaDetailInfo addReportedLoadItem(LoadMetricReportInfo reportedLoadItem) {
    if (this.reportedLoad == null) {
      this.reportedLoad = new ArrayList<>();
    }
    this.reportedLoad.add(reportedLoadItem);
    return this;
  }

  /**
   * List of load reported by replica.
   * @return reportedLoad
   */
  @javax.annotation.Nullable
  public List<LoadMetricReportInfo> getReportedLoad() {
    return reportedLoad;
  }

  public void setReportedLoad(List<LoadMetricReportInfo> reportedLoad) {
    this.reportedLoad = reportedLoad;
  }


  public DeployedServiceReplicaDetailInfo serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nonnull
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public DeployedServiceReplicaDetailInfo serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The full name of the service with &#39;fabric:&#39; URI scheme.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedServiceReplicaDetailInfo deployedServiceReplicaDetailInfo = (DeployedServiceReplicaDetailInfo) o;
    return Objects.equals(this.currentServiceOperation, deployedServiceReplicaDetailInfo.currentServiceOperation) &&
        Objects.equals(this.currentServiceOperationStartTimeUtc, deployedServiceReplicaDetailInfo.currentServiceOperationStartTimeUtc) &&
        Objects.equals(this.partitionId, deployedServiceReplicaDetailInfo.partitionId) &&
        Objects.equals(this.reportedLoad, deployedServiceReplicaDetailInfo.reportedLoad) &&
        Objects.equals(this.serviceKind, deployedServiceReplicaDetailInfo.serviceKind) &&
        Objects.equals(this.serviceName, deployedServiceReplicaDetailInfo.serviceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentServiceOperation, currentServiceOperationStartTimeUtc, partitionId, reportedLoad, serviceKind, serviceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedServiceReplicaDetailInfo {\n");
    sb.append("    currentServiceOperation: ").append(toIndentedString(currentServiceOperation)).append("\n");
    sb.append("    currentServiceOperationStartTimeUtc: ").append(toIndentedString(currentServiceOperationStartTimeUtc)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    reportedLoad: ").append(toIndentedString(reportedLoad)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentServiceOperation");
    openapiFields.add("CurrentServiceOperationStartTimeUtc");
    openapiFields.add("PartitionId");
    openapiFields.add("ReportedLoad");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedServiceReplicaDetailInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedServiceReplicaDetailInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedServiceReplicaDetailInfo is not found in the empty JSON string", DeployedServiceReplicaDetailInfo.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ServiceKind").getAsString();
      switch (discriminatorValue) {
        case "DeployedStatefulServiceReplicaDetailInfo":
          DeployedStatefulServiceReplicaDetailInfo.validateJsonElement(jsonElement);
          break;
        case "DeployedStatelessServiceInstanceDetailInfo":
          DeployedStatelessServiceInstanceDetailInfo.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ServiceKind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of DeployedServiceReplicaDetailInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedServiceReplicaDetailInfo
   * @throws IOException if the JSON string is invalid with respect to DeployedServiceReplicaDetailInfo
   */
  public static DeployedServiceReplicaDetailInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedServiceReplicaDetailInfo.class);
  }

  /**
   * Convert an instance of DeployedServiceReplicaDetailInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

