/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A record of the times when the repair task entered each state.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairTaskHistory {
  public static final String SERIALIZED_NAME_APPROVED_UTC_TIMESTAMP = "ApprovedUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_APPROVED_UTC_TIMESTAMP)
  private OffsetDateTime approvedUtcTimestamp;

  public static final String SERIALIZED_NAME_CLAIMED_UTC_TIMESTAMP = "ClaimedUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_CLAIMED_UTC_TIMESTAMP)
  private OffsetDateTime claimedUtcTimestamp;

  public static final String SERIALIZED_NAME_COMPLETED_UTC_TIMESTAMP = "CompletedUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_COMPLETED_UTC_TIMESTAMP)
  private OffsetDateTime completedUtcTimestamp;

  public static final String SERIALIZED_NAME_CREATED_UTC_TIMESTAMP = "CreatedUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_UTC_TIMESTAMP)
  private OffsetDateTime createdUtcTimestamp;

  public static final String SERIALIZED_NAME_EXECUTING_UTC_TIMESTAMP = "ExecutingUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_EXECUTING_UTC_TIMESTAMP)
  private OffsetDateTime executingUtcTimestamp;

  public static final String SERIALIZED_NAME_PREPARING_HEALTH_CHECK_END_UTC_TIMESTAMP = "PreparingHealthCheckEndUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_PREPARING_HEALTH_CHECK_END_UTC_TIMESTAMP)
  private OffsetDateTime preparingHealthCheckEndUtcTimestamp;

  public static final String SERIALIZED_NAME_PREPARING_HEALTH_CHECK_START_UTC_TIMESTAMP = "PreparingHealthCheckStartUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_PREPARING_HEALTH_CHECK_START_UTC_TIMESTAMP)
  private OffsetDateTime preparingHealthCheckStartUtcTimestamp;

  public static final String SERIALIZED_NAME_PREPARING_UTC_TIMESTAMP = "PreparingUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_PREPARING_UTC_TIMESTAMP)
  private OffsetDateTime preparingUtcTimestamp;

  public static final String SERIALIZED_NAME_RESTORING_HEALTH_CHECK_END_UTC_TIMESTAMP = "RestoringHealthCheckEndUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_RESTORING_HEALTH_CHECK_END_UTC_TIMESTAMP)
  private OffsetDateTime restoringHealthCheckEndUtcTimestamp;

  public static final String SERIALIZED_NAME_RESTORING_HEALTH_CHECK_START_UTC_TIMESTAMP = "RestoringHealthCheckStartUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_RESTORING_HEALTH_CHECK_START_UTC_TIMESTAMP)
  private OffsetDateTime restoringHealthCheckStartUtcTimestamp;

  public static final String SERIALIZED_NAME_RESTORING_UTC_TIMESTAMP = "RestoringUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_RESTORING_UTC_TIMESTAMP)
  private OffsetDateTime restoringUtcTimestamp;

  public RepairTaskHistory() {
  }

  public RepairTaskHistory approvedUtcTimestamp(OffsetDateTime approvedUtcTimestamp) {
    this.approvedUtcTimestamp = approvedUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Approved state
   * @return approvedUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovedUtcTimestamp() {
    return approvedUtcTimestamp;
  }

  public void setApprovedUtcTimestamp(OffsetDateTime approvedUtcTimestamp) {
    this.approvedUtcTimestamp = approvedUtcTimestamp;
  }


  public RepairTaskHistory claimedUtcTimestamp(OffsetDateTime claimedUtcTimestamp) {
    this.claimedUtcTimestamp = claimedUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Claimed state.
   * @return claimedUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClaimedUtcTimestamp() {
    return claimedUtcTimestamp;
  }

  public void setClaimedUtcTimestamp(OffsetDateTime claimedUtcTimestamp) {
    this.claimedUtcTimestamp = claimedUtcTimestamp;
  }


  public RepairTaskHistory completedUtcTimestamp(OffsetDateTime completedUtcTimestamp) {
    this.completedUtcTimestamp = completedUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Completed state
   * @return completedUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedUtcTimestamp() {
    return completedUtcTimestamp;
  }

  public void setCompletedUtcTimestamp(OffsetDateTime completedUtcTimestamp) {
    this.completedUtcTimestamp = completedUtcTimestamp;
  }


  public RepairTaskHistory createdUtcTimestamp(OffsetDateTime createdUtcTimestamp) {
    this.createdUtcTimestamp = createdUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Created state.
   * @return createdUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedUtcTimestamp() {
    return createdUtcTimestamp;
  }

  public void setCreatedUtcTimestamp(OffsetDateTime createdUtcTimestamp) {
    this.createdUtcTimestamp = createdUtcTimestamp;
  }


  public RepairTaskHistory executingUtcTimestamp(OffsetDateTime executingUtcTimestamp) {
    this.executingUtcTimestamp = executingUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Executing state
   * @return executingUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutingUtcTimestamp() {
    return executingUtcTimestamp;
  }

  public void setExecutingUtcTimestamp(OffsetDateTime executingUtcTimestamp) {
    this.executingUtcTimestamp = executingUtcTimestamp;
  }


  public RepairTaskHistory preparingHealthCheckEndUtcTimestamp(OffsetDateTime preparingHealthCheckEndUtcTimestamp) {
    this.preparingHealthCheckEndUtcTimestamp = preparingHealthCheckEndUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task completed the health check in the Preparing state.
   * @return preparingHealthCheckEndUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreparingHealthCheckEndUtcTimestamp() {
    return preparingHealthCheckEndUtcTimestamp;
  }

  public void setPreparingHealthCheckEndUtcTimestamp(OffsetDateTime preparingHealthCheckEndUtcTimestamp) {
    this.preparingHealthCheckEndUtcTimestamp = preparingHealthCheckEndUtcTimestamp;
  }


  public RepairTaskHistory preparingHealthCheckStartUtcTimestamp(OffsetDateTime preparingHealthCheckStartUtcTimestamp) {
    this.preparingHealthCheckStartUtcTimestamp = preparingHealthCheckStartUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task started the health check in the Preparing state.
   * @return preparingHealthCheckStartUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreparingHealthCheckStartUtcTimestamp() {
    return preparingHealthCheckStartUtcTimestamp;
  }

  public void setPreparingHealthCheckStartUtcTimestamp(OffsetDateTime preparingHealthCheckStartUtcTimestamp) {
    this.preparingHealthCheckStartUtcTimestamp = preparingHealthCheckStartUtcTimestamp;
  }


  public RepairTaskHistory preparingUtcTimestamp(OffsetDateTime preparingUtcTimestamp) {
    this.preparingUtcTimestamp = preparingUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Preparing state.
   * @return preparingUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreparingUtcTimestamp() {
    return preparingUtcTimestamp;
  }

  public void setPreparingUtcTimestamp(OffsetDateTime preparingUtcTimestamp) {
    this.preparingUtcTimestamp = preparingUtcTimestamp;
  }


  public RepairTaskHistory restoringHealthCheckEndUtcTimestamp(OffsetDateTime restoringHealthCheckEndUtcTimestamp) {
    this.restoringHealthCheckEndUtcTimestamp = restoringHealthCheckEndUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task completed the health check in the Restoring state.
   * @return restoringHealthCheckEndUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestoringHealthCheckEndUtcTimestamp() {
    return restoringHealthCheckEndUtcTimestamp;
  }

  public void setRestoringHealthCheckEndUtcTimestamp(OffsetDateTime restoringHealthCheckEndUtcTimestamp) {
    this.restoringHealthCheckEndUtcTimestamp = restoringHealthCheckEndUtcTimestamp;
  }


  public RepairTaskHistory restoringHealthCheckStartUtcTimestamp(OffsetDateTime restoringHealthCheckStartUtcTimestamp) {
    this.restoringHealthCheckStartUtcTimestamp = restoringHealthCheckStartUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task started the health check in the Restoring state.
   * @return restoringHealthCheckStartUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestoringHealthCheckStartUtcTimestamp() {
    return restoringHealthCheckStartUtcTimestamp;
  }

  public void setRestoringHealthCheckStartUtcTimestamp(OffsetDateTime restoringHealthCheckStartUtcTimestamp) {
    this.restoringHealthCheckStartUtcTimestamp = restoringHealthCheckStartUtcTimestamp;
  }


  public RepairTaskHistory restoringUtcTimestamp(OffsetDateTime restoringUtcTimestamp) {
    this.restoringUtcTimestamp = restoringUtcTimestamp;
    return this;
  }

  /**
   * The time when the repair task entered the Restoring state
   * @return restoringUtcTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestoringUtcTimestamp() {
    return restoringUtcTimestamp;
  }

  public void setRestoringUtcTimestamp(OffsetDateTime restoringUtcTimestamp) {
    this.restoringUtcTimestamp = restoringUtcTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairTaskHistory repairTaskHistory = (RepairTaskHistory) o;
    return Objects.equals(this.approvedUtcTimestamp, repairTaskHistory.approvedUtcTimestamp) &&
        Objects.equals(this.claimedUtcTimestamp, repairTaskHistory.claimedUtcTimestamp) &&
        Objects.equals(this.completedUtcTimestamp, repairTaskHistory.completedUtcTimestamp) &&
        Objects.equals(this.createdUtcTimestamp, repairTaskHistory.createdUtcTimestamp) &&
        Objects.equals(this.executingUtcTimestamp, repairTaskHistory.executingUtcTimestamp) &&
        Objects.equals(this.preparingHealthCheckEndUtcTimestamp, repairTaskHistory.preparingHealthCheckEndUtcTimestamp) &&
        Objects.equals(this.preparingHealthCheckStartUtcTimestamp, repairTaskHistory.preparingHealthCheckStartUtcTimestamp) &&
        Objects.equals(this.preparingUtcTimestamp, repairTaskHistory.preparingUtcTimestamp) &&
        Objects.equals(this.restoringHealthCheckEndUtcTimestamp, repairTaskHistory.restoringHealthCheckEndUtcTimestamp) &&
        Objects.equals(this.restoringHealthCheckStartUtcTimestamp, repairTaskHistory.restoringHealthCheckStartUtcTimestamp) &&
        Objects.equals(this.restoringUtcTimestamp, repairTaskHistory.restoringUtcTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedUtcTimestamp, claimedUtcTimestamp, completedUtcTimestamp, createdUtcTimestamp, executingUtcTimestamp, preparingHealthCheckEndUtcTimestamp, preparingHealthCheckStartUtcTimestamp, preparingUtcTimestamp, restoringHealthCheckEndUtcTimestamp, restoringHealthCheckStartUtcTimestamp, restoringUtcTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairTaskHistory {\n");
    sb.append("    approvedUtcTimestamp: ").append(toIndentedString(approvedUtcTimestamp)).append("\n");
    sb.append("    claimedUtcTimestamp: ").append(toIndentedString(claimedUtcTimestamp)).append("\n");
    sb.append("    completedUtcTimestamp: ").append(toIndentedString(completedUtcTimestamp)).append("\n");
    sb.append("    createdUtcTimestamp: ").append(toIndentedString(createdUtcTimestamp)).append("\n");
    sb.append("    executingUtcTimestamp: ").append(toIndentedString(executingUtcTimestamp)).append("\n");
    sb.append("    preparingHealthCheckEndUtcTimestamp: ").append(toIndentedString(preparingHealthCheckEndUtcTimestamp)).append("\n");
    sb.append("    preparingHealthCheckStartUtcTimestamp: ").append(toIndentedString(preparingHealthCheckStartUtcTimestamp)).append("\n");
    sb.append("    preparingUtcTimestamp: ").append(toIndentedString(preparingUtcTimestamp)).append("\n");
    sb.append("    restoringHealthCheckEndUtcTimestamp: ").append(toIndentedString(restoringHealthCheckEndUtcTimestamp)).append("\n");
    sb.append("    restoringHealthCheckStartUtcTimestamp: ").append(toIndentedString(restoringHealthCheckStartUtcTimestamp)).append("\n");
    sb.append("    restoringUtcTimestamp: ").append(toIndentedString(restoringUtcTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApprovedUtcTimestamp");
    openapiFields.add("ClaimedUtcTimestamp");
    openapiFields.add("CompletedUtcTimestamp");
    openapiFields.add("CreatedUtcTimestamp");
    openapiFields.add("ExecutingUtcTimestamp");
    openapiFields.add("PreparingHealthCheckEndUtcTimestamp");
    openapiFields.add("PreparingHealthCheckStartUtcTimestamp");
    openapiFields.add("PreparingUtcTimestamp");
    openapiFields.add("RestoringHealthCheckEndUtcTimestamp");
    openapiFields.add("RestoringHealthCheckStartUtcTimestamp");
    openapiFields.add("RestoringUtcTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairTaskHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairTaskHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairTaskHistory is not found in the empty JSON string", RepairTaskHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairTaskHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairTaskHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairTaskHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairTaskHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairTaskHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairTaskHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairTaskHistory>() {
           @Override
           public void write(JsonWriter out, RepairTaskHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairTaskHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairTaskHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairTaskHistory
   * @throws IOException if the JSON string is invalid with respect to RepairTaskHistory
   */
  public static RepairTaskHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairTaskHistory.class);
  }

  /**
   * Convert an instance of RepairTaskHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

