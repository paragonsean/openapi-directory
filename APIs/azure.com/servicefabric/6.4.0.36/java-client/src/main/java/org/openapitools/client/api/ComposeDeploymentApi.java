/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ComposeDeploymentStatusInfo;
import org.openapitools.client.model.ComposeDeploymentUpgradeDescription;
import org.openapitools.client.model.ComposeDeploymentUpgradeProgressInfo;
import org.openapitools.client.model.CreateComposeDeploymentDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedComposeDeploymentStatusInfoList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComposeDeploymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComposeDeploymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComposeDeploymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createComposeDeployment
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createComposeDeploymentCall(String apiVersion, CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComposeDeploymentDescription;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/$/Create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createComposeDeploymentValidateBeforeCall(String apiVersion, CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling createComposeDeployment(Async)");
        }

        // verify the required parameter 'createComposeDeploymentDescription' is set
        if (createComposeDeploymentDescription == null) {
            throw new ApiException("Missing the required parameter 'createComposeDeploymentDescription' when calling createComposeDeployment(Async)");
        }

        return createComposeDeploymentCall(apiVersion, createComposeDeploymentDescription, timeout, _callback);

    }

    /**
     * Creates a Service Fabric compose deployment.
     * Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the &#x60;GetComposeDeploymentStatus&#x60; API.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void createComposeDeployment(String apiVersion, CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout) throws ApiException {
        createComposeDeploymentWithHttpInfo(apiVersion, createComposeDeploymentDescription, timeout);
    }

    /**
     * Creates a Service Fabric compose deployment.
     * Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the &#x60;GetComposeDeploymentStatus&#x60; API.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createComposeDeploymentWithHttpInfo(String apiVersion, CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = createComposeDeploymentValidateBeforeCall(apiVersion, createComposeDeploymentDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a Service Fabric compose deployment. (asynchronously)
     * Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created, its status can be tracked via the &#x60;GetComposeDeploymentStatus&#x60; API.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param createComposeDeploymentDescription Describes the compose deployment that needs to be created. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createComposeDeploymentAsync(String apiVersion, CreateComposeDeploymentDescription createComposeDeploymentDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createComposeDeploymentValidateBeforeCall(apiVersion, createComposeDeploymentDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComposeDeploymentStatus
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the compose deployment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentStatusCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/{deploymentName}"
            .replace("{" + "deploymentName" + "}", localVarApiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComposeDeploymentStatusValidateBeforeCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getComposeDeploymentStatus(Async)");
        }

        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling getComposeDeploymentStatus(Async)");
        }

        return getComposeDeploymentStatusCall(apiVersion, deploymentName, timeout, _callback);

    }

    /**
     * Gets information about a Service Fabric compose deployment.
     * Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ComposeDeploymentStatusInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the compose deployment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ComposeDeploymentStatusInfo getComposeDeploymentStatus(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        ApiResponse<ComposeDeploymentStatusInfo> localVarResp = getComposeDeploymentStatusWithHttpInfo(apiVersion, deploymentName, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets information about a Service Fabric compose deployment.
     * Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;ComposeDeploymentStatusInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the compose deployment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComposeDeploymentStatusInfo> getComposeDeploymentStatusWithHttpInfo(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getComposeDeploymentStatusValidateBeforeCall(apiVersion, deploymentName, timeout, null);
        Type localVarReturnType = new TypeToken<ComposeDeploymentStatusInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a Service Fabric compose deployment. (asynchronously)
     * Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status, and other details about the deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the compose deployment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentStatusAsync(String apiVersion, String deploymentName, Long timeout, final ApiCallback<ComposeDeploymentStatusInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComposeDeploymentStatusValidateBeforeCall(apiVersion, deploymentName, timeout, _callback);
        Type localVarReturnType = new TypeToken<ComposeDeploymentStatusInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComposeDeploymentStatusList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of status of compose deployments in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentStatusListCall(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ComposeDeployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContinuationToken", continuationToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComposeDeploymentStatusListValidateBeforeCall(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getComposeDeploymentStatusList(Async)");
        }

        return getComposeDeploymentStatusListCall(apiVersion, continuationToken, maxResults, timeout, _callback);

    }

    /**
     * Gets the list of compose deployments created in the Service Fabric cluster.
     * Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return PagedComposeDeploymentStatusInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of status of compose deployments in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public PagedComposeDeploymentStatusInfoList getComposeDeploymentStatusList(String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        ApiResponse<PagedComposeDeploymentStatusInfoList> localVarResp = getComposeDeploymentStatusListWithHttpInfo(apiVersion, continuationToken, maxResults, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the list of compose deployments created in the Service Fabric cluster.
     * Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;PagedComposeDeploymentStatusInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of status of compose deployments in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedComposeDeploymentStatusInfoList> getComposeDeploymentStatusListWithHttpInfo(String apiVersion, String continuationToken, Long maxResults, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getComposeDeploymentStatusListValidateBeforeCall(apiVersion, continuationToken, maxResults, timeout, null);
        Type localVarReturnType = new TypeToken<PagedComposeDeploymentStatusInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of compose deployments created in the Service Fabric cluster. (asynchronously)
     * Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status, and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param continuationToken The continuation token parameter is used to obtain next set of results. A continuation token with a non-empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results, then the continuation token does not contain a value. The value of this parameter should not be URL encoded. (optional)
     * @param maxResults The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged query includes as many results as possible that fit in the return message. (optional, default to 0)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of status of compose deployments in the cluster. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentStatusListAsync(String apiVersion, String continuationToken, Long maxResults, Long timeout, final ApiCallback<PagedComposeDeploymentStatusInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComposeDeploymentStatusListValidateBeforeCall(apiVersion, continuationToken, maxResults, timeout, _callback);
        Type localVarReturnType = new TypeToken<PagedComposeDeploymentStatusInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComposeDeploymentUpgradeProgress
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about the compose deployment upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentUpgradeProgressCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress"
            .replace("{" + "deploymentName" + "}", localVarApiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComposeDeploymentUpgradeProgressValidateBeforeCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getComposeDeploymentUpgradeProgress(Async)");
        }

        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling getComposeDeploymentUpgradeProgress(Async)");
        }

        return getComposeDeploymentUpgradeProgressCall(apiVersion, deploymentName, timeout, _callback);

    }

    /**
     * Gets details for the latest upgrade performed on this Service Fabric compose deployment.
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ComposeDeploymentUpgradeProgressInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about the compose deployment upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ComposeDeploymentUpgradeProgressInfo getComposeDeploymentUpgradeProgress(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        ApiResponse<ComposeDeploymentUpgradeProgressInfo> localVarResp = getComposeDeploymentUpgradeProgressWithHttpInfo(apiVersion, deploymentName, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets details for the latest upgrade performed on this Service Fabric compose deployment.
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;ComposeDeploymentUpgradeProgressInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about the compose deployment upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComposeDeploymentUpgradeProgressInfo> getComposeDeploymentUpgradeProgressWithHttpInfo(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getComposeDeploymentUpgradeProgressValidateBeforeCall(apiVersion, deploymentName, timeout, null);
        Type localVarReturnType = new TypeToken<ComposeDeploymentUpgradeProgressInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details for the latest upgrade performed on this Service Fabric compose deployment. (asynchronously)
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details about the compose deployment upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComposeDeploymentUpgradeProgressAsync(String apiVersion, String deploymentName, Long timeout, final ApiCallback<ComposeDeploymentUpgradeProgressInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComposeDeploymentUpgradeProgressValidateBeforeCall(apiVersion, deploymentName, timeout, _callback);
        Type localVarReturnType = new TypeToken<ComposeDeploymentUpgradeProgressInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeComposeDeployment
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeComposeDeploymentCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/{deploymentName}/$/Delete"
            .replace("{" + "deploymentName" + "}", localVarApiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeComposeDeploymentValidateBeforeCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling removeComposeDeployment(Async)");
        }

        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling removeComposeDeployment(Async)");
        }

        return removeComposeDeploymentCall(apiVersion, deploymentName, timeout, _callback);

    }

    /**
     * Deletes an existing Service Fabric compose deployment from cluster.
     * Deletes an existing Service Fabric compose deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void removeComposeDeployment(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        removeComposeDeploymentWithHttpInfo(apiVersion, deploymentName, timeout);
    }

    /**
     * Deletes an existing Service Fabric compose deployment from cluster.
     * Deletes an existing Service Fabric compose deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeComposeDeploymentWithHttpInfo(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = removeComposeDeploymentValidateBeforeCall(apiVersion, deploymentName, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing Service Fabric compose deployment from cluster. (asynchronously)
     * Deletes an existing Service Fabric compose deployment.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful operation will return 202 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeComposeDeploymentAsync(String apiVersion, String deploymentName, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeComposeDeploymentValidateBeforeCall(apiVersion, deploymentName, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for startComposeDeploymentUpgrade
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response means that the upgrade has started. Use GetComposeDeploymentUpgrade operation to get the status of the upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startComposeDeploymentUpgradeCall(String apiVersion, String deploymentName, ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = composeDeploymentUpgradeDescription;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/{deploymentName}/$/Upgrade"
            .replace("{" + "deploymentName" + "}", localVarApiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startComposeDeploymentUpgradeValidateBeforeCall(String apiVersion, String deploymentName, ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling startComposeDeploymentUpgrade(Async)");
        }

        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling startComposeDeploymentUpgrade(Async)");
        }

        // verify the required parameter 'composeDeploymentUpgradeDescription' is set
        if (composeDeploymentUpgradeDescription == null) {
            throw new ApiException("Missing the required parameter 'composeDeploymentUpgradeDescription' when calling startComposeDeploymentUpgrade(Async)");
        }

        return startComposeDeploymentUpgradeCall(apiVersion, deploymentName, composeDeploymentUpgradeDescription, timeout, _callback);

    }

    /**
     * Starts upgrading a compose deployment in the Service Fabric cluster.
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response means that the upgrade has started. Use GetComposeDeploymentUpgrade operation to get the status of the upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void startComposeDeploymentUpgrade(String apiVersion, String deploymentName, ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription, Long timeout) throws ApiException {
        startComposeDeploymentUpgradeWithHttpInfo(apiVersion, deploymentName, composeDeploymentUpgradeDescription, timeout);
    }

    /**
     * Starts upgrading a compose deployment in the Service Fabric cluster.
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response means that the upgrade has started. Use GetComposeDeploymentUpgrade operation to get the status of the upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startComposeDeploymentUpgradeWithHttpInfo(String apiVersion, String deploymentName, ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = startComposeDeploymentUpgradeValidateBeforeCall(apiVersion, deploymentName, composeDeploymentUpgradeDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts upgrading a compose deployment in the Service Fabric cluster. (asynchronously)
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;\&quot;6.0-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response means that the upgrade has started. Use GetComposeDeploymentUpgrade operation to get the status of the upgrade. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startComposeDeploymentUpgradeAsync(String apiVersion, String deploymentName, ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startComposeDeploymentUpgradeValidateBeforeCall(apiVersion, deploymentName, composeDeploymentUpgradeDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for startRollbackComposeDeploymentUpgrade
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response means that the rollback has started. Use GetComposeDeploymentUpgrade operation to get the status of the rollback. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startRollbackComposeDeploymentUpgradeCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ComposeDeployments/{deploymentName}/$/RollbackUpgrade"
            .replace("{" + "deploymentName" + "}", localVarApiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startRollbackComposeDeploymentUpgradeValidateBeforeCall(String apiVersion, String deploymentName, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling startRollbackComposeDeploymentUpgrade(Async)");
        }

        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling startRollbackComposeDeploymentUpgrade(Async)");
        }

        return startRollbackComposeDeploymentUpgradeCall(apiVersion, deploymentName, timeout, _callback);

    }

    /**
     * Starts rolling back a compose deployment upgrade in the Service Fabric cluster.
     * Rollback a service fabric compose deployment upgrade.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response means that the rollback has started. Use GetComposeDeploymentUpgrade operation to get the status of the rollback. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void startRollbackComposeDeploymentUpgrade(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        startRollbackComposeDeploymentUpgradeWithHttpInfo(apiVersion, deploymentName, timeout);
    }

    /**
     * Starts rolling back a compose deployment upgrade in the Service Fabric cluster.
     * Rollback a service fabric compose deployment upgrade.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response means that the rollback has started. Use GetComposeDeploymentUpgrade operation to get the status of the rollback. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startRollbackComposeDeploymentUpgradeWithHttpInfo(String apiVersion, String deploymentName, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = startRollbackComposeDeploymentUpgradeValidateBeforeCall(apiVersion, deploymentName, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts rolling back a compose deployment upgrade in the Service Fabric cluster. (asynchronously)
     * Rollback a service fabric compose deployment upgrade.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param deploymentName The identity of the deployment. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response means that the rollback has started. Use GetComposeDeploymentUpgrade operation to get the status of the rollback. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startRollbackComposeDeploymentUpgradeAsync(String apiVersion, String deploymentName, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startRollbackComposeDeploymentUpgradeValidateBeforeCall(apiVersion, deploymentName, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
