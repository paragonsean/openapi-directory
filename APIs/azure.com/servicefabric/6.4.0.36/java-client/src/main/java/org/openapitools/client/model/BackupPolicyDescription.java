/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackupScheduleDescription;
import org.openapitools.client.model.BackupStorageDescription;
import org.openapitools.client.model.RetentionPolicyDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a backup policy for configuring periodic backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupPolicyDescription {
  public static final String SERIALIZED_NAME_AUTO_RESTORE_ON_DATA_LOSS = "AutoRestoreOnDataLoss";
  @SerializedName(SERIALIZED_NAME_AUTO_RESTORE_ON_DATA_LOSS)
  private Boolean autoRestoreOnDataLoss;

  public static final String SERIALIZED_NAME_MAX_INCREMENTAL_BACKUPS = "MaxIncrementalBackups";
  @SerializedName(SERIALIZED_NAME_MAX_INCREMENTAL_BACKUPS)
  private Integer maxIncrementalBackups;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "RetentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private RetentionPolicyDescription retentionPolicy;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private BackupScheduleDescription schedule;

  public static final String SERIALIZED_NAME_STORAGE = "Storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private BackupStorageDescription storage;

  public BackupPolicyDescription() {
  }

  public BackupPolicyDescription autoRestoreOnDataLoss(Boolean autoRestoreOnDataLoss) {
    this.autoRestoreOnDataLoss = autoRestoreOnDataLoss;
    return this;
  }

  /**
   * Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.
   * @return autoRestoreOnDataLoss
   */
  @javax.annotation.Nonnull
  public Boolean getAutoRestoreOnDataLoss() {
    return autoRestoreOnDataLoss;
  }

  public void setAutoRestoreOnDataLoss(Boolean autoRestoreOnDataLoss) {
    this.autoRestoreOnDataLoss = autoRestoreOnDataLoss;
  }


  public BackupPolicyDescription maxIncrementalBackups(Integer maxIncrementalBackups) {
    this.maxIncrementalBackups = maxIncrementalBackups;
    return this;
  }

  /**
   * Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
   * minimum: 0
   * maximum: 255
   * @return maxIncrementalBackups
   */
  @javax.annotation.Nonnull
  public Integer getMaxIncrementalBackups() {
    return maxIncrementalBackups;
  }

  public void setMaxIncrementalBackups(Integer maxIncrementalBackups) {
    this.maxIncrementalBackups = maxIncrementalBackups;
  }


  public BackupPolicyDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name identifying this backup policy.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BackupPolicyDescription retentionPolicy(RetentionPolicyDescription retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  /**
   * Get retentionPolicy
   * @return retentionPolicy
   */
  @javax.annotation.Nullable
  public RetentionPolicyDescription getRetentionPolicy() {
    return retentionPolicy;
  }

  public void setRetentionPolicy(RetentionPolicyDescription retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
  }


  public BackupPolicyDescription schedule(BackupScheduleDescription schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nonnull
  public BackupScheduleDescription getSchedule() {
    return schedule;
  }

  public void setSchedule(BackupScheduleDescription schedule) {
    this.schedule = schedule;
  }


  public BackupPolicyDescription storage(BackupStorageDescription storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Get storage
   * @return storage
   */
  @javax.annotation.Nonnull
  public BackupStorageDescription getStorage() {
    return storage;
  }

  public void setStorage(BackupStorageDescription storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupPolicyDescription backupPolicyDescription = (BackupPolicyDescription) o;
    return Objects.equals(this.autoRestoreOnDataLoss, backupPolicyDescription.autoRestoreOnDataLoss) &&
        Objects.equals(this.maxIncrementalBackups, backupPolicyDescription.maxIncrementalBackups) &&
        Objects.equals(this.name, backupPolicyDescription.name) &&
        Objects.equals(this.retentionPolicy, backupPolicyDescription.retentionPolicy) &&
        Objects.equals(this.schedule, backupPolicyDescription.schedule) &&
        Objects.equals(this.storage, backupPolicyDescription.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRestoreOnDataLoss, maxIncrementalBackups, name, retentionPolicy, schedule, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupPolicyDescription {\n");
    sb.append("    autoRestoreOnDataLoss: ").append(toIndentedString(autoRestoreOnDataLoss)).append("\n");
    sb.append("    maxIncrementalBackups: ").append(toIndentedString(maxIncrementalBackups)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoRestoreOnDataLoss");
    openapiFields.add("MaxIncrementalBackups");
    openapiFields.add("Name");
    openapiFields.add("RetentionPolicy");
    openapiFields.add("Schedule");
    openapiFields.add("Storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AutoRestoreOnDataLoss");
    openapiRequiredFields.add("MaxIncrementalBackups");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Schedule");
    openapiRequiredFields.add("Storage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupPolicyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupPolicyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupPolicyDescription is not found in the empty JSON string", BackupPolicyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupPolicyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupPolicyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupPolicyDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `RetentionPolicy`
      if (jsonObj.get("RetentionPolicy") != null && !jsonObj.get("RetentionPolicy").isJsonNull()) {
        RetentionPolicyDescription.validateJsonElement(jsonObj.get("RetentionPolicy"));
      }
      // validate the required field `Schedule`
      BackupScheduleDescription.validateJsonElement(jsonObj.get("Schedule"));
      // validate the required field `Storage`
      BackupStorageDescription.validateJsonElement(jsonObj.get("Storage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupPolicyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupPolicyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupPolicyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupPolicyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupPolicyDescription>() {
           @Override
           public void write(JsonWriter out, BackupPolicyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupPolicyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupPolicyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupPolicyDescription
   * @throws IOException if the JSON string is invalid with respect to BackupPolicyDescription
   */
  public static BackupPolicyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupPolicyDescription.class);
  }

  /**
   * Convert an instance of BackupPolicyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

