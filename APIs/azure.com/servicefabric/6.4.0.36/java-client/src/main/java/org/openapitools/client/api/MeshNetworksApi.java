/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.NetworkResourceDescription;
import org.openapitools.client.model.PagedNetworkResourceDescriptionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeshNetworksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeshNetworksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeshNetworksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for meshNetworkCreateOrUpdate
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a Network resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkCreateOrUpdateCall(String apiVersion, String networkResourceName, NetworkResourceDescription networkResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkResourceDescription;

        // create path and map variables
        String localVarPath = "/Resources/Networks/{networkResourceName}"
            .replace("{" + "networkResourceName" + "}", localVarApiClient.escapeString(networkResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshNetworkCreateOrUpdateValidateBeforeCall(String apiVersion, String networkResourceName, NetworkResourceDescription networkResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshNetworkCreateOrUpdate(Async)");
        }

        // verify the required parameter 'networkResourceName' is set
        if (networkResourceName == null) {
            throw new ApiException("Missing the required parameter 'networkResourceName' when calling meshNetworkCreateOrUpdate(Async)");
        }

        // verify the required parameter 'networkResourceDescription' is set
        if (networkResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'networkResourceDescription' when calling meshNetworkCreateOrUpdate(Async)");
        }

        return meshNetworkCreateOrUpdateCall(apiVersion, networkResourceName, networkResourceDescription, _callback);

    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a Network resource. (required)
     * @return NetworkResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescription meshNetworkCreateOrUpdate(String apiVersion, String networkResourceName, NetworkResourceDescription networkResourceDescription) throws ApiException {
        ApiResponse<NetworkResourceDescription> localVarResp = meshNetworkCreateOrUpdateWithHttpInfo(apiVersion, networkResourceName, networkResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a Network resource.
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a Network resource. (required)
     * @return ApiResponse&lt;NetworkResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescription> meshNetworkCreateOrUpdateWithHttpInfo(String apiVersion, String networkResourceName, NetworkResourceDescription networkResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = meshNetworkCreateOrUpdateValidateBeforeCall(apiVersion, networkResourceName, networkResourceDescription, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a Network resource. (asynchronously)
     * Creates a Network resource with the specified name, description and properties. If Network resource with the same name exists, then it is updated with the specified description and properties. Network resource provides connectivity between application services.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param networkResourceDescription Description for creating a Network resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkCreateOrUpdateAsync(String apiVersion, String networkResourceName, NetworkResourceDescription networkResourceDescription, final ApiCallback<NetworkResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshNetworkCreateOrUpdateValidateBeforeCall(apiVersion, networkResourceName, networkResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshNetworkDelete
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkDeleteCall(String apiVersion, String networkResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Networks/{networkResourceName}"
            .replace("{" + "networkResourceName" + "}", localVarApiClient.escapeString(networkResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshNetworkDeleteValidateBeforeCall(String apiVersion, String networkResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshNetworkDelete(Async)");
        }

        // verify the required parameter 'networkResourceName' is set
        if (networkResourceName == null) {
            throw new ApiException("Missing the required parameter 'networkResourceName' when calling meshNetworkDelete(Async)");
        }

        return meshNetworkDeleteCall(apiVersion, networkResourceName, _callback);

    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void meshNetworkDelete(String apiVersion, String networkResourceName) throws ApiException {
        meshNetworkDeleteWithHttpInfo(apiVersion, networkResourceName);
    }

    /**
     * Deletes the Network resource.
     * Deletes the Network resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> meshNetworkDeleteWithHttpInfo(String apiVersion, String networkResourceName) throws ApiException {
        okhttp3.Call localVarCall = meshNetworkDeleteValidateBeforeCall(apiVersion, networkResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the Network resource. (asynchronously)
     * Deletes the Network resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified network was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkDeleteAsync(String apiVersion, String networkResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshNetworkDeleteValidateBeforeCall(apiVersion, networkResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshNetworkGet
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkGetCall(String apiVersion, String networkResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Networks/{networkResourceName}"
            .replace("{" + "networkResourceName" + "}", localVarApiClient.escapeString(networkResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshNetworkGetValidateBeforeCall(String apiVersion, String networkResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshNetworkGet(Async)");
        }

        // verify the required parameter 'networkResourceName' is set
        if (networkResourceName == null) {
            throw new ApiException("Missing the required parameter 'networkResourceName' when calling meshNetworkGet(Async)");
        }

        return meshNetworkGetCall(apiVersion, networkResourceName, _callback);

    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @return NetworkResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResourceDescription meshNetworkGet(String apiVersion, String networkResourceName) throws ApiException {
        ApiResponse<NetworkResourceDescription> localVarResp = meshNetworkGetWithHttpInfo(apiVersion, networkResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the Network resource with the given name.
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @return ApiResponse&lt;NetworkResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResourceDescription> meshNetworkGetWithHttpInfo(String apiVersion, String networkResourceName) throws ApiException {
        okhttp3.Call localVarCall = meshNetworkGetValidateBeforeCall(apiVersion, networkResourceName, null);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Network resource with the given name. (asynchronously)
     * Gets the information about the Network resource with the given name. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param networkResourceName The identity of the network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkGetAsync(String apiVersion, String networkResourceName, final ApiCallback<NetworkResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshNetworkGetValidateBeforeCall(apiVersion, networkResourceName, _callback);
        Type localVarReturnType = new TypeToken<NetworkResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshNetworkList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshNetworkListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshNetworkList(Async)");
        }

        return meshNetworkListCall(apiVersion, _callback);

    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @return PagedNetworkResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PagedNetworkResourceDescriptionList meshNetworkList(String apiVersion) throws ApiException {
        ApiResponse<PagedNetworkResourceDescriptionList> localVarResp = meshNetworkListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all the network resources.
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @return ApiResponse&lt;PagedNetworkResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedNetworkResourceDescriptionList> meshNetworkListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = meshNetworkListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<PagedNetworkResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all the network resources. (asynchronously)
     * Gets the information about all network resources in a given resource group. The information include the description and other properties of the Network.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshNetworkListAsync(String apiVersion, final ApiCallback<PagedNetworkResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshNetworkListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PagedNetworkResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
