/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationScopedVolume;
import org.openapitools.client.model.ContainerInstanceView;
import org.openapitools.client.model.ContainerLabel;
import org.openapitools.client.model.DiagnosticsRef;
import org.openapitools.client.model.EndpointProperties;
import org.openapitools.client.model.EnvironmentVariable;
import org.openapitools.client.model.ImageRegistryCredential;
import org.openapitools.client.model.ReliableCollectionsRef;
import org.openapitools.client.model.ResourceRequirements;
import org.openapitools.client.model.Setting;
import org.openapitools.client.model.VolumeReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a container and its runtime properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerCodePackageProperties {
  public static final String SERIALIZED_NAME_COMMANDS = "commands";
  @SerializedName(SERIALIZED_NAME_COMMANDS)
  private List<String> commands = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private DiagnosticsRef diagnostics;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<EndpointProperties> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRYPOINT = "entrypoint";
  @SerializedName(SERIALIZED_NAME_ENTRYPOINT)
  private String entrypoint;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<EnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_REGISTRY_CREDENTIAL = "imageRegistryCredential";
  @SerializedName(SERIALIZED_NAME_IMAGE_REGISTRY_CREDENTIAL)
  private ImageRegistryCredential imageRegistryCredential;

  public static final String SERIALIZED_NAME_INSTANCE_VIEW = "instanceView";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VIEW)
  private ContainerInstanceView instanceView;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<ContainerLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELIABLE_COLLECTIONS_REFS = "reliableCollectionsRefs";
  @SerializedName(SERIALIZED_NAME_RELIABLE_COLLECTIONS_REFS)
  private List<ReliableCollectionsRef> reliableCollectionsRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private ResourceRequirements resources;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private List<Setting> settings = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOLUME_REFS = "volumeRefs";
  @SerializedName(SERIALIZED_NAME_VOLUME_REFS)
  private List<VolumeReference> volumeRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<ApplicationScopedVolume> volumes = new ArrayList<>();

  public ContainerCodePackageProperties() {
  }

  public ContainerCodePackageProperties commands(List<String> commands) {
    this.commands = commands;
    return this;
  }

  public ContainerCodePackageProperties addCommandsItem(String commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<>();
    }
    this.commands.add(commandsItem);
    return this;
  }

  /**
   * Command array to execute within the container in exec form.
   * @return commands
   */
  @javax.annotation.Nullable
  public List<String> getCommands() {
    return commands;
  }

  public void setCommands(List<String> commands) {
    this.commands = commands;
  }


  public ContainerCodePackageProperties diagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public DiagnosticsRef getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
  }


  public ContainerCodePackageProperties endpoints(List<EndpointProperties> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public ContainerCodePackageProperties addEndpointsItem(EndpointProperties endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * The endpoints exposed by this container.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<EndpointProperties> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<EndpointProperties> endpoints) {
    this.endpoints = endpoints;
  }


  public ContainerCodePackageProperties entrypoint(String entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  /**
   * Override for the default entry point in the container.
   * @return entrypoint
   */
  @javax.annotation.Nullable
  public String getEntrypoint() {
    return entrypoint;
  }

  public void setEntrypoint(String entrypoint) {
    this.entrypoint = entrypoint;
  }


  public ContainerCodePackageProperties environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public ContainerCodePackageProperties addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * The environment variables to set in this container
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public ContainerCodePackageProperties image(String image) {
    this.image = image;
    return this;
  }

  /**
   * The Container image to use.
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainerCodePackageProperties imageRegistryCredential(ImageRegistryCredential imageRegistryCredential) {
    this.imageRegistryCredential = imageRegistryCredential;
    return this;
  }

  /**
   * Get imageRegistryCredential
   * @return imageRegistryCredential
   */
  @javax.annotation.Nullable
  public ImageRegistryCredential getImageRegistryCredential() {
    return imageRegistryCredential;
  }

  public void setImageRegistryCredential(ImageRegistryCredential imageRegistryCredential) {
    this.imageRegistryCredential = imageRegistryCredential;
  }


  public ContainerCodePackageProperties instanceView(ContainerInstanceView instanceView) {
    this.instanceView = instanceView;
    return this;
  }

  /**
   * Get instanceView
   * @return instanceView
   */
  @javax.annotation.Nullable
  public ContainerInstanceView getInstanceView() {
    return instanceView;
  }

  public void setInstanceView(ContainerInstanceView instanceView) {
    this.instanceView = instanceView;
  }


  public ContainerCodePackageProperties labels(List<ContainerLabel> labels) {
    this.labels = labels;
    return this;
  }

  public ContainerCodePackageProperties addLabelsItem(ContainerLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * The labels to set in this container.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<ContainerLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<ContainerLabel> labels) {
    this.labels = labels;
  }


  public ContainerCodePackageProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the code package.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerCodePackageProperties reliableCollectionsRefs(List<ReliableCollectionsRef> reliableCollectionsRefs) {
    this.reliableCollectionsRefs = reliableCollectionsRefs;
    return this;
  }

  public ContainerCodePackageProperties addReliableCollectionsRefsItem(ReliableCollectionsRef reliableCollectionsRefsItem) {
    if (this.reliableCollectionsRefs == null) {
      this.reliableCollectionsRefs = new ArrayList<>();
    }
    this.reliableCollectionsRefs.add(reliableCollectionsRefsItem);
    return this;
  }

  /**
   * A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.
   * @return reliableCollectionsRefs
   */
  @javax.annotation.Nullable
  public List<ReliableCollectionsRef> getReliableCollectionsRefs() {
    return reliableCollectionsRefs;
  }

  public void setReliableCollectionsRefs(List<ReliableCollectionsRef> reliableCollectionsRefs) {
    this.reliableCollectionsRefs = reliableCollectionsRefs;
  }


  public ContainerCodePackageProperties resources(ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nonnull
  public ResourceRequirements getResources() {
    return resources;
  }

  public void setResources(ResourceRequirements resources) {
    this.resources = resources;
  }


  public ContainerCodePackageProperties settings(List<Setting> settings) {
    this.settings = settings;
    return this;
  }

  public ContainerCodePackageProperties addSettingsItem(Setting settingsItem) {
    if (this.settings == null) {
      this.settings = new ArrayList<>();
    }
    this.settings.add(settingsItem);
    return this;
  }

  /**
   * The settings to set in this container. The setting file path can be fetched from environment variable \&quot;Fabric_SettingPath\&quot;. The path for Windows container is \&quot;C:\\\\secrets\&quot;. The path for Linux container is \&quot;/var/secrets\&quot;.
   * @return settings
   */
  @javax.annotation.Nullable
  public List<Setting> getSettings() {
    return settings;
  }

  public void setSettings(List<Setting> settings) {
    this.settings = settings;
  }


  public ContainerCodePackageProperties volumeRefs(List<VolumeReference> volumeRefs) {
    this.volumeRefs = volumeRefs;
    return this;
  }

  public ContainerCodePackageProperties addVolumeRefsItem(VolumeReference volumeRefsItem) {
    if (this.volumeRefs == null) {
      this.volumeRefs = new ArrayList<>();
    }
    this.volumeRefs.add(volumeRefsItem);
    return this;
  }

  /**
   * Volumes to be attached to the container. The lifetime of these volumes is independent of the application&#39;s lifetime.
   * @return volumeRefs
   */
  @javax.annotation.Nullable
  public List<VolumeReference> getVolumeRefs() {
    return volumeRefs;
  }

  public void setVolumeRefs(List<VolumeReference> volumeRefs) {
    this.volumeRefs = volumeRefs;
  }


  public ContainerCodePackageProperties volumes(List<ApplicationScopedVolume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContainerCodePackageProperties addVolumesItem(ApplicationScopedVolume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Volumes to be attached to the container. The lifetime of these volumes is scoped to the application&#39;s lifetime.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<ApplicationScopedVolume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<ApplicationScopedVolume> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerCodePackageProperties containerCodePackageProperties = (ContainerCodePackageProperties) o;
    return Objects.equals(this.commands, containerCodePackageProperties.commands) &&
        Objects.equals(this.diagnostics, containerCodePackageProperties.diagnostics) &&
        Objects.equals(this.endpoints, containerCodePackageProperties.endpoints) &&
        Objects.equals(this.entrypoint, containerCodePackageProperties.entrypoint) &&
        Objects.equals(this.environmentVariables, containerCodePackageProperties.environmentVariables) &&
        Objects.equals(this.image, containerCodePackageProperties.image) &&
        Objects.equals(this.imageRegistryCredential, containerCodePackageProperties.imageRegistryCredential) &&
        Objects.equals(this.instanceView, containerCodePackageProperties.instanceView) &&
        Objects.equals(this.labels, containerCodePackageProperties.labels) &&
        Objects.equals(this.name, containerCodePackageProperties.name) &&
        Objects.equals(this.reliableCollectionsRefs, containerCodePackageProperties.reliableCollectionsRefs) &&
        Objects.equals(this.resources, containerCodePackageProperties.resources) &&
        Objects.equals(this.settings, containerCodePackageProperties.settings) &&
        Objects.equals(this.volumeRefs, containerCodePackageProperties.volumeRefs) &&
        Objects.equals(this.volumes, containerCodePackageProperties.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commands, diagnostics, endpoints, entrypoint, environmentVariables, image, imageRegistryCredential, instanceView, labels, name, reliableCollectionsRefs, resources, settings, volumeRefs, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerCodePackageProperties {\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageRegistryCredential: ").append(toIndentedString(imageRegistryCredential)).append("\n");
    sb.append("    instanceView: ").append(toIndentedString(instanceView)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reliableCollectionsRefs: ").append(toIndentedString(reliableCollectionsRefs)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    volumeRefs: ").append(toIndentedString(volumeRefs)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commands");
    openapiFields.add("diagnostics");
    openapiFields.add("endpoints");
    openapiFields.add("entrypoint");
    openapiFields.add("environmentVariables");
    openapiFields.add("image");
    openapiFields.add("imageRegistryCredential");
    openapiFields.add("instanceView");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("reliableCollectionsRefs");
    openapiFields.add("resources");
    openapiFields.add("settings");
    openapiFields.add("volumeRefs");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("resources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerCodePackageProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerCodePackageProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerCodePackageProperties is not found in the empty JSON string", ContainerCodePackageProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerCodePackageProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerCodePackageProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerCodePackageProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("commands") != null && !jsonObj.get("commands").isJsonNull() && !jsonObj.get("commands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commands` to be an array in the JSON string but got `%s`", jsonObj.get("commands").toString()));
      }
      // validate the optional field `diagnostics`
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        DiagnosticsRef.validateJsonElement(jsonObj.get("diagnostics"));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            EndpointProperties.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("entrypoint") != null && !jsonObj.get("entrypoint").isJsonNull()) && !jsonObj.get("entrypoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrypoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrypoint").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            EnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `imageRegistryCredential`
      if (jsonObj.get("imageRegistryCredential") != null && !jsonObj.get("imageRegistryCredential").isJsonNull()) {
        ImageRegistryCredential.validateJsonElement(jsonObj.get("imageRegistryCredential"));
      }
      // validate the optional field `instanceView`
      if (jsonObj.get("instanceView") != null && !jsonObj.get("instanceView").isJsonNull()) {
        ContainerInstanceView.validateJsonElement(jsonObj.get("instanceView"));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            ContainerLabel.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("reliableCollectionsRefs") != null && !jsonObj.get("reliableCollectionsRefs").isJsonNull()) {
        JsonArray jsonArrayreliableCollectionsRefs = jsonObj.getAsJsonArray("reliableCollectionsRefs");
        if (jsonArrayreliableCollectionsRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reliableCollectionsRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reliableCollectionsRefs` to be an array in the JSON string but got `%s`", jsonObj.get("reliableCollectionsRefs").toString()));
          }

          // validate the optional field `reliableCollectionsRefs` (array)
          for (int i = 0; i < jsonArrayreliableCollectionsRefs.size(); i++) {
            ReliableCollectionsRef.validateJsonElement(jsonArrayreliableCollectionsRefs.get(i));
          };
        }
      }
      // validate the required field `resources`
      ResourceRequirements.validateJsonElement(jsonObj.get("resources"));
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        JsonArray jsonArraysettings = jsonObj.getAsJsonArray("settings");
        if (jsonArraysettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `settings` to be an array in the JSON string but got `%s`", jsonObj.get("settings").toString()));
          }

          // validate the optional field `settings` (array)
          for (int i = 0; i < jsonArraysettings.size(); i++) {
            Setting.validateJsonElement(jsonArraysettings.get(i));
          };
        }
      }
      if (jsonObj.get("volumeRefs") != null && !jsonObj.get("volumeRefs").isJsonNull()) {
        JsonArray jsonArrayvolumeRefs = jsonObj.getAsJsonArray("volumeRefs");
        if (jsonArrayvolumeRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeRefs` to be an array in the JSON string but got `%s`", jsonObj.get("volumeRefs").toString()));
          }

          // validate the optional field `volumeRefs` (array)
          for (int i = 0; i < jsonArrayvolumeRefs.size(); i++) {
            VolumeReference.validateJsonElement(jsonArrayvolumeRefs.get(i));
          };
        }
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            ApplicationScopedVolume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerCodePackageProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerCodePackageProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerCodePackageProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerCodePackageProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerCodePackageProperties>() {
           @Override
           public void write(JsonWriter out, ContainerCodePackageProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerCodePackageProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerCodePackageProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerCodePackageProperties
   * @throws IOException if the JSON string is invalid with respect to ContainerCodePackageProperties
   */
  public static ContainerCodePackageProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerCodePackageProperties.class);
  }

  /**
   * Convert an instance of ContainerCodePackageProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

