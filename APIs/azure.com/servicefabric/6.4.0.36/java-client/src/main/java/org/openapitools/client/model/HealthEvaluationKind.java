/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The health manager in the cluster performs health evaluations in determining the aggregated health state of an entity. This enumeration provides information on the kind of evaluation that was performed. Following are the possible values.
 */
@JsonAdapter(HealthEvaluationKind.Adapter.class)
public enum HealthEvaluationKind {
  
  INVALID("Invalid"),
  
  EVENT("Event"),
  
  REPLICAS("Replicas"),
  
  PARTITIONS("Partitions"),
  
  DEPLOYED_SERVICE_PACKAGES("DeployedServicePackages"),
  
  DEPLOYED_APPLICATIONS("DeployedApplications"),
  
  SERVICES("Services"),
  
  NODES("Nodes"),
  
  APPLICATIONS("Applications"),
  
  SYSTEM_APPLICATION("SystemApplication"),
  
  UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS("UpgradeDomainDeployedApplications"),
  
  UPGRADE_DOMAIN_NODES("UpgradeDomainNodes"),
  
  REPLICA("Replica"),
  
  PARTITION("Partition"),
  
  DEPLOYED_SERVICE_PACKAGE("DeployedServicePackage"),
  
  DEPLOYED_APPLICATION("DeployedApplication"),
  
  SERVICE("Service"),
  
  NODE("Node"),
  
  APPLICATION("Application"),
  
  DELTA_NODES_CHECK("DeltaNodesCheck"),
  
  UPGRADE_DOMAIN_DELTA_NODES_CHECK("UpgradeDomainDeltaNodesCheck"),
  
  APPLICATION_TYPE_APPLICATIONS("ApplicationTypeApplications");

  private String value;

  HealthEvaluationKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static HealthEvaluationKind fromValue(String value) {
    for (HealthEvaluationKind b : HealthEvaluationKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<HealthEvaluationKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final HealthEvaluationKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public HealthEvaluationKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return HealthEvaluationKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    HealthEvaluationKind.fromValue(value);
  }
}

