/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepairImpactDescriptionBase;
import org.openapitools.client.model.RepairTargetDescriptionBase;
import org.openapitools.client.model.RepairTaskHealthCheckState;
import org.openapitools.client.model.RepairTaskHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a repair task, which includes information about what kind of repair was requested, what its progress is, and what its final result was.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairTask {
  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXECUTOR = "Executor";
  @SerializedName(SERIALIZED_NAME_EXECUTOR)
  private String executor;

  public static final String SERIALIZED_NAME_EXECUTOR_DATA = "ExecutorData";
  @SerializedName(SERIALIZED_NAME_EXECUTOR_DATA)
  private String executorData;

  public static final String SERIALIZED_NAME_FLAGS = "Flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private Integer flags;

  public static final String SERIALIZED_NAME_HISTORY = "History";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private RepairTaskHistory history;

  public static final String SERIALIZED_NAME_IMPACT = "Impact";
  @SerializedName(SERIALIZED_NAME_IMPACT)
  private RepairImpactDescriptionBase impact;

  public static final String SERIALIZED_NAME_PERFORM_PREPARING_HEALTH_CHECK = "PerformPreparingHealthCheck";
  @SerializedName(SERIALIZED_NAME_PERFORM_PREPARING_HEALTH_CHECK)
  private Boolean performPreparingHealthCheck;

  public static final String SERIALIZED_NAME_PERFORM_RESTORING_HEALTH_CHECK = "PerformRestoringHealthCheck";
  @SerializedName(SERIALIZED_NAME_PERFORM_RESTORING_HEALTH_CHECK)
  private Boolean performRestoringHealthCheck;

  public static final String SERIALIZED_NAME_PREPARING_HEALTH_CHECK_STATE = "PreparingHealthCheckState";
  @SerializedName(SERIALIZED_NAME_PREPARING_HEALTH_CHECK_STATE)
  private RepairTaskHealthCheckState preparingHealthCheckState;

  public static final String SERIALIZED_NAME_RESTORING_HEALTH_CHECK_STATE = "RestoringHealthCheckState";
  @SerializedName(SERIALIZED_NAME_RESTORING_HEALTH_CHECK_STATE)
  private RepairTaskHealthCheckState restoringHealthCheckState;

  public static final String SERIALIZED_NAME_RESULT_CODE = "ResultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private Integer resultCode;

  public static final String SERIALIZED_NAME_RESULT_DETAILS = "ResultDetails";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS)
  private String resultDetails;

  /**
   * A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.
   */
  @JsonAdapter(ResultStatusEnum.Adapter.class)
  public enum ResultStatusEnum {
    INVALID("Invalid"),
    
    SUCCEEDED("Succeeded"),
    
    CANCELLED("Cancelled"),
    
    INTERRUPTED("Interrupted"),
    
    FAILED("Failed"),
    
    PENDING("Pending");

    private String value;

    ResultStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultStatusEnum fromValue(String value) {
      for (ResultStatusEnum b : ResultStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT_STATUS = "ResultStatus";
  @SerializedName(SERIALIZED_NAME_RESULT_STATUS)
  private ResultStatusEnum resultStatus;

  /**
   * The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INVALID("Invalid"),
    
    CREATED("Created"),
    
    CLAIMED("Claimed"),
    
    PREPARING("Preparing"),
    
    APPROVED("Approved"),
    
    EXECUTING("Executing"),
    
    RESTORING("Restoring"),
    
    COMPLETED("Completed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private RepairTargetDescriptionBase target;

  public static final String SERIALIZED_NAME_TASK_ID = "TaskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public RepairTask() {
  }

  public RepairTask action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The requested repair action. Must be specified when the repair task is created, and is immutable once set.
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public RepairTask description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the purpose of the repair task, or other informational details. May be set when the repair task is created, and is immutable once set.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RepairTask executor(String executor) {
    this.executor = executor;
    return this;
  }

  /**
   * The name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.
   * @return executor
   */
  @javax.annotation.Nullable
  public String getExecutor() {
    return executor;
  }

  public void setExecutor(String executor) {
    this.executor = executor;
  }


  public RepairTask executorData(String executorData) {
    this.executorData = executorData;
    return this;
  }

  /**
   * A data string that the repair executor can use to store its internal state.
   * @return executorData
   */
  @javax.annotation.Nullable
  public String getExecutorData() {
    return executorData;
  }

  public void setExecutorData(String executorData) {
    this.executorData = executorData;
  }


  public RepairTask flags(Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * A bitwise-OR of the following values, which gives additional details about the status of the repair task. - 1 - Cancellation of the repair has been requested - 2 - Abort of the repair has been requested - 4 - Approval of the repair was forced via client request
   * @return flags
   */
  @javax.annotation.Nullable
  public Integer getFlags() {
    return flags;
  }

  public void setFlags(Integer flags) {
    this.flags = flags;
  }


  public RepairTask history(RepairTaskHistory history) {
    this.history = history;
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @javax.annotation.Nullable
  public RepairTaskHistory getHistory() {
    return history;
  }

  public void setHistory(RepairTaskHistory history) {
    this.history = history;
  }


  public RepairTask impact(RepairImpactDescriptionBase impact) {
    this.impact = impact;
    return this;
  }

  /**
   * Get impact
   * @return impact
   */
  @javax.annotation.Nullable
  public RepairImpactDescriptionBase getImpact() {
    return impact;
  }

  public void setImpact(RepairImpactDescriptionBase impact) {
    this.impact = impact;
  }


  public RepairTask performPreparingHealthCheck(Boolean performPreparingHealthCheck) {
    this.performPreparingHealthCheck = performPreparingHealthCheck;
    return this;
  }

  /**
   * A value to determine if health checks will be performed when the repair task enters the Preparing state.
   * @return performPreparingHealthCheck
   */
  @javax.annotation.Nullable
  public Boolean getPerformPreparingHealthCheck() {
    return performPreparingHealthCheck;
  }

  public void setPerformPreparingHealthCheck(Boolean performPreparingHealthCheck) {
    this.performPreparingHealthCheck = performPreparingHealthCheck;
  }


  public RepairTask performRestoringHealthCheck(Boolean performRestoringHealthCheck) {
    this.performRestoringHealthCheck = performRestoringHealthCheck;
    return this;
  }

  /**
   * A value to determine if health checks will be performed when the repair task enters the Restoring state.
   * @return performRestoringHealthCheck
   */
  @javax.annotation.Nullable
  public Boolean getPerformRestoringHealthCheck() {
    return performRestoringHealthCheck;
  }

  public void setPerformRestoringHealthCheck(Boolean performRestoringHealthCheck) {
    this.performRestoringHealthCheck = performRestoringHealthCheck;
  }


  public RepairTask preparingHealthCheckState(RepairTaskHealthCheckState preparingHealthCheckState) {
    this.preparingHealthCheckState = preparingHealthCheckState;
    return this;
  }

  /**
   * Get preparingHealthCheckState
   * @return preparingHealthCheckState
   */
  @javax.annotation.Nullable
  public RepairTaskHealthCheckState getPreparingHealthCheckState() {
    return preparingHealthCheckState;
  }

  public void setPreparingHealthCheckState(RepairTaskHealthCheckState preparingHealthCheckState) {
    this.preparingHealthCheckState = preparingHealthCheckState;
  }


  public RepairTask restoringHealthCheckState(RepairTaskHealthCheckState restoringHealthCheckState) {
    this.restoringHealthCheckState = restoringHealthCheckState;
    return this;
  }

  /**
   * Get restoringHealthCheckState
   * @return restoringHealthCheckState
   */
  @javax.annotation.Nullable
  public RepairTaskHealthCheckState getRestoringHealthCheckState() {
    return restoringHealthCheckState;
  }

  public void setRestoringHealthCheckState(RepairTaskHealthCheckState restoringHealthCheckState) {
    this.restoringHealthCheckState = restoringHealthCheckState;
  }


  public RepairTask resultCode(Integer resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * A numeric value providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set.
   * @return resultCode
   */
  @javax.annotation.Nullable
  public Integer getResultCode() {
    return resultCode;
  }

  public void setResultCode(Integer resultCode) {
    this.resultCode = resultCode;
  }


  public RepairTask resultDetails(String resultDetails) {
    this.resultDetails = resultDetails;
    return this;
  }

  /**
   * A string providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set.
   * @return resultDetails
   */
  @javax.annotation.Nullable
  public String getResultDetails() {
    return resultDetails;
  }

  public void setResultDetails(String resultDetails) {
    this.resultDetails = resultDetails;
  }


  public RepairTask resultStatus(ResultStatusEnum resultStatus) {
    this.resultStatus = resultStatus;
    return this;
  }

  /**
   * A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.
   * @return resultStatus
   */
  @javax.annotation.Nullable
  public ResultStatusEnum getResultStatus() {
    return resultStatus;
  }

  public void setResultStatus(ResultStatusEnum resultStatus) {
    this.resultStatus = resultStatus;
  }


  public RepairTask state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public RepairTask target(RepairTargetDescriptionBase target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public RepairTargetDescriptionBase getTarget() {
    return target;
  }

  public void setTarget(RepairTargetDescriptionBase target) {
    this.target = target;
  }


  public RepairTask taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * The ID of the repair task.
   * @return taskId
   */
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public RepairTask version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the repair task. When creating a new repair task, the version must be set to zero.  When updating a repair task, the version is used for optimistic concurrency checks.  If the version is set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the update will only succeed if the actual current version of the repair task matches this value.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairTask repairTask = (RepairTask) o;
    return Objects.equals(this.action, repairTask.action) &&
        Objects.equals(this.description, repairTask.description) &&
        Objects.equals(this.executor, repairTask.executor) &&
        Objects.equals(this.executorData, repairTask.executorData) &&
        Objects.equals(this.flags, repairTask.flags) &&
        Objects.equals(this.history, repairTask.history) &&
        Objects.equals(this.impact, repairTask.impact) &&
        Objects.equals(this.performPreparingHealthCheck, repairTask.performPreparingHealthCheck) &&
        Objects.equals(this.performRestoringHealthCheck, repairTask.performRestoringHealthCheck) &&
        Objects.equals(this.preparingHealthCheckState, repairTask.preparingHealthCheckState) &&
        Objects.equals(this.restoringHealthCheckState, repairTask.restoringHealthCheckState) &&
        Objects.equals(this.resultCode, repairTask.resultCode) &&
        Objects.equals(this.resultDetails, repairTask.resultDetails) &&
        Objects.equals(this.resultStatus, repairTask.resultStatus) &&
        Objects.equals(this.state, repairTask.state) &&
        Objects.equals(this.target, repairTask.target) &&
        Objects.equals(this.taskId, repairTask.taskId) &&
        Objects.equals(this.version, repairTask.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, description, executor, executorData, flags, history, impact, performPreparingHealthCheck, performRestoringHealthCheck, preparingHealthCheckState, restoringHealthCheckState, resultCode, resultDetails, resultStatus, state, target, taskId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairTask {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executor: ").append(toIndentedString(executor)).append("\n");
    sb.append("    executorData: ").append(toIndentedString(executorData)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    performPreparingHealthCheck: ").append(toIndentedString(performPreparingHealthCheck)).append("\n");
    sb.append("    performRestoringHealthCheck: ").append(toIndentedString(performRestoringHealthCheck)).append("\n");
    sb.append("    preparingHealthCheckState: ").append(toIndentedString(preparingHealthCheckState)).append("\n");
    sb.append("    restoringHealthCheckState: ").append(toIndentedString(restoringHealthCheckState)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultDetails: ").append(toIndentedString(resultDetails)).append("\n");
    sb.append("    resultStatus: ").append(toIndentedString(resultStatus)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Action");
    openapiFields.add("Description");
    openapiFields.add("Executor");
    openapiFields.add("ExecutorData");
    openapiFields.add("Flags");
    openapiFields.add("History");
    openapiFields.add("Impact");
    openapiFields.add("PerformPreparingHealthCheck");
    openapiFields.add("PerformRestoringHealthCheck");
    openapiFields.add("PreparingHealthCheckState");
    openapiFields.add("RestoringHealthCheckState");
    openapiFields.add("ResultCode");
    openapiFields.add("ResultDetails");
    openapiFields.add("ResultStatus");
    openapiFields.add("State");
    openapiFields.add("Target");
    openapiFields.add("TaskId");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Action");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("TaskId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairTask is not found in the empty JSON string", RepairTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepairTask.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Action").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Executor") != null && !jsonObj.get("Executor").isJsonNull()) && !jsonObj.get("Executor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Executor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Executor").toString()));
      }
      if ((jsonObj.get("ExecutorData") != null && !jsonObj.get("ExecutorData").isJsonNull()) && !jsonObj.get("ExecutorData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExecutorData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExecutorData").toString()));
      }
      // validate the optional field `History`
      if (jsonObj.get("History") != null && !jsonObj.get("History").isJsonNull()) {
        RepairTaskHistory.validateJsonElement(jsonObj.get("History"));
      }
      // validate the optional field `Impact`
      if (jsonObj.get("Impact") != null && !jsonObj.get("Impact").isJsonNull()) {
        RepairImpactDescriptionBase.validateJsonElement(jsonObj.get("Impact"));
      }
      // validate the optional field `PreparingHealthCheckState`
      if (jsonObj.get("PreparingHealthCheckState") != null && !jsonObj.get("PreparingHealthCheckState").isJsonNull()) {
        RepairTaskHealthCheckState.validateJsonElement(jsonObj.get("PreparingHealthCheckState"));
      }
      // validate the optional field `RestoringHealthCheckState`
      if (jsonObj.get("RestoringHealthCheckState") != null && !jsonObj.get("RestoringHealthCheckState").isJsonNull()) {
        RepairTaskHealthCheckState.validateJsonElement(jsonObj.get("RestoringHealthCheckState"));
      }
      if ((jsonObj.get("ResultDetails") != null && !jsonObj.get("ResultDetails").isJsonNull()) && !jsonObj.get("ResultDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultDetails").toString()));
      }
      if ((jsonObj.get("ResultStatus") != null && !jsonObj.get("ResultStatus").isJsonNull()) && !jsonObj.get("ResultStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultStatus").toString()));
      }
      // validate the optional field `ResultStatus`
      if (jsonObj.get("ResultStatus") != null && !jsonObj.get("ResultStatus").isJsonNull()) {
        ResultStatusEnum.validateJsonElement(jsonObj.get("ResultStatus"));
      }
      if (!jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the required field `State`
      StateEnum.validateJsonElement(jsonObj.get("State"));
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        RepairTargetDescriptionBase.validateJsonElement(jsonObj.get("Target"));
      }
      if (!jsonObj.get("TaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskId").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairTask.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairTask>() {
           @Override
           public void write(JsonWriter out, RepairTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairTask
   * @throws IOException if the JSON string is invalid with respect to RepairTask
   */
  public static RepairTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairTask.class);
  }

  /**
   * Convert an instance of RepairTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

