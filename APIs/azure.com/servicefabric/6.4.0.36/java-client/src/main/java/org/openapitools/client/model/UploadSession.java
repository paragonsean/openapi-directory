/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UploadSessionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a image store upload session
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadSession {
  public static final String SERIALIZED_NAME_UPLOAD_SESSIONS = "UploadSessions";
  @SerializedName(SERIALIZED_NAME_UPLOAD_SESSIONS)
  private List<UploadSessionInfo> uploadSessions = new ArrayList<>();

  public UploadSession() {
  }

  public UploadSession uploadSessions(List<UploadSessionInfo> uploadSessions) {
    this.uploadSessions = uploadSessions;
    return this;
  }

  public UploadSession addUploadSessionsItem(UploadSessionInfo uploadSessionsItem) {
    if (this.uploadSessions == null) {
      this.uploadSessions = new ArrayList<>();
    }
    this.uploadSessions.add(uploadSessionsItem);
    return this;
  }

  /**
   * When querying upload session by upload session ID, the result contains only one upload session. When querying upload session by image store relative path, the result might contain multiple upload sessions.
   * @return uploadSessions
   */
  @javax.annotation.Nullable
  public List<UploadSessionInfo> getUploadSessions() {
    return uploadSessions;
  }

  public void setUploadSessions(List<UploadSessionInfo> uploadSessions) {
    this.uploadSessions = uploadSessions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadSession uploadSession = (UploadSession) o;
    return Objects.equals(this.uploadSessions, uploadSession.uploadSessions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uploadSessions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadSession {\n");
    sb.append("    uploadSessions: ").append(toIndentedString(uploadSessions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UploadSessions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadSession is not found in the empty JSON string", UploadSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("UploadSessions") != null && !jsonObj.get("UploadSessions").isJsonNull()) {
        JsonArray jsonArrayuploadSessions = jsonObj.getAsJsonArray("UploadSessions");
        if (jsonArrayuploadSessions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UploadSessions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UploadSessions` to be an array in the JSON string but got `%s`", jsonObj.get("UploadSessions").toString()));
          }

          // validate the optional field `UploadSessions` (array)
          for (int i = 0; i < jsonArrayuploadSessions.size(); i++) {
            UploadSessionInfo.validateJsonElement(jsonArrayuploadSessions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadSession.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadSession>() {
           @Override
           public void write(JsonWriter out, UploadSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadSession
   * @throws IOException if the JSON string is invalid with respect to UploadSession
   */
  public static UploadSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadSession.class);
  }

  /**
   * Convert an instance of UploadSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

