/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ReplicaHealthStateFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a partition should be included as a child of a service in the cluster health chunk. The partitions are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent service and application must be included in the cluster health chunk. One filter can match zero, one or multiple partitions, depending on its properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionHealthStateFilter {
  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_PARTITION_ID_FILTER = "PartitionIdFilter";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID_FILTER)
  private UUID partitionIdFilter;

  public static final String SERIALIZED_NAME_REPLICA_FILTERS = "ReplicaFilters";
  @SerializedName(SERIALIZED_NAME_REPLICA_FILTERS)
  private List<ReplicaHealthStateFilter> replicaFilters = new ArrayList<>();

  public PartitionHealthStateFilter() {
  }

  public PartitionHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the partitions. It allows selecting partitions if they match the desired health states. The possible values are integer value of one of the following health states. Only partitions that match the filter are returned. All partitions are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the partition ID is specified. If the filter has default value and partition ID is specified, the matching partition is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches partitions with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public PartitionHealthStateFilter partitionIdFilter(UUID partitionIdFilter) {
    this.partitionIdFilter = partitionIdFilter;
    return this;
  }

  /**
   * ID of the partition that matches the filter. The filter is applied only to the specified partition, if it exists. If the partition doesn&#39;t exist, no partition is returned in the cluster health chunk based on this filter. If the partition exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all partitions that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
   * @return partitionIdFilter
   */
  @javax.annotation.Nullable
  public UUID getPartitionIdFilter() {
    return partitionIdFilter;
  }

  public void setPartitionIdFilter(UUID partitionIdFilter) {
    this.partitionIdFilter = partitionIdFilter;
  }


  public PartitionHealthStateFilter replicaFilters(List<ReplicaHealthStateFilter> replicaFilters) {
    this.replicaFilters = replicaFilters;
    return this;
  }

  public PartitionHealthStateFilter addReplicaFiltersItem(ReplicaHealthStateFilter replicaFiltersItem) {
    if (this.replicaFilters == null) {
      this.replicaFilters = new ArrayList<>();
    }
    this.replicaFilters.add(replicaFiltersItem);
    return this;
  }

  /**
   * Defines a list of filters that specify which replicas to be included in the returned cluster health chunk as children of the parent partition. The replicas are returned only if the parent partition matches a filter. If the list is empty, no replicas are returned. All the replicas are used to evaluate the parent partition aggregated health state, regardless of the input filters. The partition filter may specify multiple replica filters. For example, it can specify a filter to return all replicas with health state Error and another filter to always include a replica identified by its replica id.
   * @return replicaFilters
   */
  @javax.annotation.Nullable
  public List<ReplicaHealthStateFilter> getReplicaFilters() {
    return replicaFilters;
  }

  public void setReplicaFilters(List<ReplicaHealthStateFilter> replicaFilters) {
    this.replicaFilters = replicaFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionHealthStateFilter partitionHealthStateFilter = (PartitionHealthStateFilter) o;
    return Objects.equals(this.healthStateFilter, partitionHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.partitionIdFilter, partitionHealthStateFilter.partitionIdFilter) &&
        Objects.equals(this.replicaFilters, partitionHealthStateFilter.replicaFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStateFilter, partitionIdFilter, replicaFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionHealthStateFilter {\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    partitionIdFilter: ").append(toIndentedString(partitionIdFilter)).append("\n");
    sb.append("    replicaFilters: ").append(toIndentedString(replicaFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthStateFilter");
    openapiFields.add("PartitionIdFilter");
    openapiFields.add("ReplicaFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionHealthStateFilter is not found in the empty JSON string", PartitionHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PartitionIdFilter") != null && !jsonObj.get("PartitionIdFilter").isJsonNull()) && !jsonObj.get("PartitionIdFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionIdFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionIdFilter").toString()));
      }
      if (jsonObj.get("ReplicaFilters") != null && !jsonObj.get("ReplicaFilters").isJsonNull()) {
        JsonArray jsonArrayreplicaFilters = jsonObj.getAsJsonArray("ReplicaFilters");
        if (jsonArrayreplicaFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReplicaFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReplicaFilters` to be an array in the JSON string but got `%s`", jsonObj.get("ReplicaFilters").toString()));
          }

          // validate the optional field `ReplicaFilters` (array)
          for (int i = 0; i < jsonArrayreplicaFilters.size(); i++) {
            ReplicaHealthStateFilter.validateJsonElement(jsonArrayreplicaFilters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, PartitionHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to PartitionHealthStateFilter
   */
  public static PartitionHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionHealthStateFilter.class);
  }

  /**
   * Convert an instance of PartitionHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

