/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationDefinitionKind;
import org.openapitools.client.model.ApplicationParameter;
import org.openapitools.client.model.ApplicationStatus;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a Service Fabric application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInfo {
  public static final String SERIALIZED_NAME_APPLICATION_DEFINITION_KIND = "ApplicationDefinitionKind";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DEFINITION_KIND)
  private ApplicationDefinitionKind applicationDefinitionKind;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ApplicationParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationStatus status;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_TYPE_VERSION = "TypeVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_VERSION)
  private String typeVersion;

  public ApplicationInfo() {
  }

  public ApplicationInfo applicationDefinitionKind(ApplicationDefinitionKind applicationDefinitionKind) {
    this.applicationDefinitionKind = applicationDefinitionKind;
    return this;
  }

  /**
   * Get applicationDefinitionKind
   * @return applicationDefinitionKind
   */
  @javax.annotation.Nullable
  public ApplicationDefinitionKind getApplicationDefinitionKind() {
    return applicationDefinitionKind;
  }

  public void setApplicationDefinitionKind(ApplicationDefinitionKind applicationDefinitionKind) {
    this.applicationDefinitionKind = applicationDefinitionKind;
  }


  public ApplicationInfo healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public ApplicationInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \&quot;\\~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp\\~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApplicationInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application, including the &#39;fabric:&#39; URI scheme.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationInfo parameters(List<ApplicationParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ApplicationInfo addParametersItem(ApplicationParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * List of application parameters with overridden values from their default values specified in the application manifest.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<ApplicationParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<ApplicationParameter> parameters) {
    this.parameters = parameters;
  }


  public ApplicationInfo status(ApplicationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ApplicationStatus getStatus() {
    return status;
  }

  public void setStatus(ApplicationStatus status) {
    this.status = status;
  }


  public ApplicationInfo typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * The application type name as defined in the application manifest.
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ApplicationInfo typeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
    return this;
  }

  /**
   * The version of the application type as defined in the application manifest.
   * @return typeVersion
   */
  @javax.annotation.Nullable
  public String getTypeVersion() {
    return typeVersion;
  }

  public void setTypeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInfo applicationInfo = (ApplicationInfo) o;
    return Objects.equals(this.applicationDefinitionKind, applicationInfo.applicationDefinitionKind) &&
        Objects.equals(this.healthState, applicationInfo.healthState) &&
        Objects.equals(this.id, applicationInfo.id) &&
        Objects.equals(this.name, applicationInfo.name) &&
        Objects.equals(this.parameters, applicationInfo.parameters) &&
        Objects.equals(this.status, applicationInfo.status) &&
        Objects.equals(this.typeName, applicationInfo.typeName) &&
        Objects.equals(this.typeVersion, applicationInfo.typeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationDefinitionKind, healthState, id, name, parameters, status, typeName, typeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInfo {\n");
    sb.append("    applicationDefinitionKind: ").append(toIndentedString(applicationDefinitionKind)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    typeVersion: ").append(toIndentedString(typeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationDefinitionKind");
    openapiFields.add("HealthState");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Parameters");
    openapiFields.add("Status");
    openapiFields.add("TypeName");
    openapiFields.add("TypeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInfo is not found in the empty JSON string", ApplicationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationDefinitionKind`
      if (jsonObj.get("ApplicationDefinitionKind") != null && !jsonObj.get("ApplicationDefinitionKind").isJsonNull()) {
        ApplicationDefinitionKind.validateJsonElement(jsonObj.get("ApplicationDefinitionKind"));
      }
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            ApplicationParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ApplicationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) && !jsonObj.get("TypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeName").toString()));
      }
      if ((jsonObj.get("TypeVersion") != null && !jsonObj.get("TypeVersion").isJsonNull()) && !jsonObj.get("TypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInfo>() {
           @Override
           public void write(JsonWriter out, ApplicationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInfo
   * @throws IOException if the JSON string is invalid with respect to ApplicationInfo
   */
  public static ApplicationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInfo.class);
  }

  /**
   * Convert an instance of ApplicationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

