/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerCodePackageProperties;
import org.openapitools.client.model.DiagnosticsRef;
import org.openapitools.client.model.NetworkRef;
import org.openapitools.client.model.OperatingSystemType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a service replica.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceReplicaProperties {
  public static final String SERIALIZED_NAME_CODE_PACKAGES = "codePackages";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGES)
  private List<ContainerCodePackageProperties> codePackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private DiagnosticsRef diagnostics;

  public static final String SERIALIZED_NAME_NETWORK_REFS = "networkRefs";
  @SerializedName(SERIALIZED_NAME_NETWORK_REFS)
  private List<NetworkRef> networkRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OperatingSystemType osType;

  public ServiceReplicaProperties() {
  }

  public ServiceReplicaProperties codePackages(List<ContainerCodePackageProperties> codePackages) {
    this.codePackages = codePackages;
    return this;
  }

  public ServiceReplicaProperties addCodePackagesItem(ContainerCodePackageProperties codePackagesItem) {
    if (this.codePackages == null) {
      this.codePackages = new ArrayList<>();
    }
    this.codePackages.add(codePackagesItem);
    return this;
  }

  /**
   * Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
   * @return codePackages
   */
  @javax.annotation.Nonnull
  public List<ContainerCodePackageProperties> getCodePackages() {
    return codePackages;
  }

  public void setCodePackages(List<ContainerCodePackageProperties> codePackages) {
    this.codePackages = codePackages;
  }


  public ServiceReplicaProperties diagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public DiagnosticsRef getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(DiagnosticsRef diagnostics) {
    this.diagnostics = diagnostics;
  }


  public ServiceReplicaProperties networkRefs(List<NetworkRef> networkRefs) {
    this.networkRefs = networkRefs;
    return this;
  }

  public ServiceReplicaProperties addNetworkRefsItem(NetworkRef networkRefsItem) {
    if (this.networkRefs == null) {
      this.networkRefs = new ArrayList<>();
    }
    this.networkRefs.add(networkRefsItem);
    return this;
  }

  /**
   * The names of the private networks that this service needs to be part of.
   * @return networkRefs
   */
  @javax.annotation.Nullable
  public List<NetworkRef> getNetworkRefs() {
    return networkRefs;
  }

  public void setNetworkRefs(List<NetworkRef> networkRefs) {
    this.networkRefs = networkRefs;
  }


  public ServiceReplicaProperties osType(OperatingSystemType osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Get osType
   * @return osType
   */
  @javax.annotation.Nonnull
  public OperatingSystemType getOsType() {
    return osType;
  }

  public void setOsType(OperatingSystemType osType) {
    this.osType = osType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceReplicaProperties serviceReplicaProperties = (ServiceReplicaProperties) o;
    return Objects.equals(this.codePackages, serviceReplicaProperties.codePackages) &&
        Objects.equals(this.diagnostics, serviceReplicaProperties.diagnostics) &&
        Objects.equals(this.networkRefs, serviceReplicaProperties.networkRefs) &&
        Objects.equals(this.osType, serviceReplicaProperties.osType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePackages, diagnostics, networkRefs, osType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceReplicaProperties {\n");
    sb.append("    codePackages: ").append(toIndentedString(codePackages)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    networkRefs: ").append(toIndentedString(networkRefs)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codePackages");
    openapiFields.add("diagnostics");
    openapiFields.add("networkRefs");
    openapiFields.add("osType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codePackages");
    openapiRequiredFields.add("osType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceReplicaProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceReplicaProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceReplicaProperties is not found in the empty JSON string", ServiceReplicaProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceReplicaProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceReplicaProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceReplicaProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("codePackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `codePackages` to be an array in the JSON string but got `%s`", jsonObj.get("codePackages").toString()));
      }

      JsonArray jsonArraycodePackages = jsonObj.getAsJsonArray("codePackages");
      // validate the required field `codePackages` (array)
      for (int i = 0; i < jsonArraycodePackages.size(); i++) {
        ContainerCodePackageProperties.validateJsonElement(jsonArraycodePackages.get(i));
      };
      // validate the optional field `diagnostics`
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        DiagnosticsRef.validateJsonElement(jsonObj.get("diagnostics"));
      }
      if (jsonObj.get("networkRefs") != null && !jsonObj.get("networkRefs").isJsonNull()) {
        JsonArray jsonArraynetworkRefs = jsonObj.getAsJsonArray("networkRefs");
        if (jsonArraynetworkRefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkRefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkRefs` to be an array in the JSON string but got `%s`", jsonObj.get("networkRefs").toString()));
          }

          // validate the optional field `networkRefs` (array)
          for (int i = 0; i < jsonArraynetworkRefs.size(); i++) {
            NetworkRef.validateJsonElement(jsonArraynetworkRefs.get(i));
          };
        }
      }
      // validate the required field `osType`
      OperatingSystemType.validateJsonElement(jsonObj.get("osType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceReplicaProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceReplicaProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceReplicaProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceReplicaProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceReplicaProperties>() {
           @Override
           public void write(JsonWriter out, ServiceReplicaProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceReplicaProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceReplicaProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceReplicaProperties
   * @throws IOException if the JSON string is invalid with respect to ServiceReplicaProperties
   */
  public static ServiceReplicaProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceReplicaProperties.class);
  }

  /**
   * Convert an instance of ServiceReplicaProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

