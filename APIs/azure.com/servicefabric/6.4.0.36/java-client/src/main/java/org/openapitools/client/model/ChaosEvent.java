/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChaosEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an event generated during a Chaos run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosEvent {
  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  protected ChaosEventKind kind;

  public static final String SERIALIZED_NAME_TIME_STAMP_UTC = "TimeStampUtc";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP_UTC)
  private OffsetDateTime timeStampUtc;

  public ChaosEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ChaosEvent kind(ChaosEventKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public ChaosEventKind getKind() {
    return kind;
  }

  public void setKind(ChaosEventKind kind) {
    this.kind = kind;
  }


  public ChaosEvent timeStampUtc(OffsetDateTime timeStampUtc) {
    this.timeStampUtc = timeStampUtc;
    return this;
  }

  /**
   * The UTC timestamp when this Chaos event was generated.
   * @return timeStampUtc
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeStampUtc() {
    return timeStampUtc;
  }

  public void setTimeStampUtc(OffsetDateTime timeStampUtc) {
    this.timeStampUtc = timeStampUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosEvent chaosEvent = (ChaosEvent) o;
    return Objects.equals(this.kind, chaosEvent.kind) &&
        Objects.equals(this.timeStampUtc, chaosEvent.timeStampUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, timeStampUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosEvent {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    timeStampUtc: ").append(toIndentedString(timeStampUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Kind");
    openapiFields.add("TimeStampUtc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStampUtc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosEvent is not found in the empty JSON string", ChaosEvent.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "ExecutingFaultsChaosEvent":
          ExecutingFaultsChaosEvent.validateJsonElement(jsonElement);
          break;
        case "StartedChaosEvent":
          StartedChaosEvent.validateJsonElement(jsonElement);
          break;
        case "StoppedChaosEvent":
          StoppedChaosEvent.validateJsonElement(jsonElement);
          break;
        case "TestErrorChaosEvent":
          TestErrorChaosEvent.validateJsonElement(jsonElement);
          break;
        case "ValidationFailedChaosEvent":
          ValidationFailedChaosEvent.validateJsonElement(jsonElement);
          break;
        case "WaitingChaosEvent":
          WaitingChaosEvent.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ChaosEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosEvent
   * @throws IOException if the JSON string is invalid with respect to ChaosEvent
   */
  public static ChaosEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosEvent.class);
  }

  /**
   * Convert an instance of ChaosEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

