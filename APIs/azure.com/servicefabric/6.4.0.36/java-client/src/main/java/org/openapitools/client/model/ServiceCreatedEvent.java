/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;
import org.openapitools.client.model.ServiceEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service Created event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceCreatedEvent extends ServiceEvent {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_NAME = "ApplicationTypeName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_NAME)
  private String applicationTypeName;

  public static final String SERIALIZED_NAME_IS_STATEFUL = "IsStateful";
  @SerializedName(SERIALIZED_NAME_IS_STATEFUL)
  private Boolean isStateful;

  public static final String SERIALIZED_NAME_MIN_REPLICA_SET_SIZE = "MinReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_MIN_REPLICA_SET_SIZE)
  private Integer minReplicaSetSize;

  public static final String SERIALIZED_NAME_PARTITION_COUNT = "PartitionCount";
  @SerializedName(SERIALIZED_NAME_PARTITION_COUNT)
  private Integer partitionCount;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_SERVICE_INSTANCE = "ServiceInstance";
  @SerializedName(SERIALIZED_NAME_SERVICE_INSTANCE)
  private Long serviceInstance;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_VERSION = "ServicePackageVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_VERSION)
  private String servicePackageVersion;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public static final String SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE = "TargetReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE)
  private Integer targetReplicaSetSize;

  public ServiceCreatedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ServiceCreatedEvent applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Application name.
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ServiceCreatedEvent applicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
    return this;
  }

  /**
   * Application type name.
   * @return applicationTypeName
   */
  @javax.annotation.Nonnull
  public String getApplicationTypeName() {
    return applicationTypeName;
  }

  public void setApplicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
  }


  public ServiceCreatedEvent isStateful(Boolean isStateful) {
    this.isStateful = isStateful;
    return this;
  }

  /**
   * Indicates if Service is stateful.
   * @return isStateful
   */
  @javax.annotation.Nonnull
  public Boolean getIsStateful() {
    return isStateful;
  }

  public void setIsStateful(Boolean isStateful) {
    this.isStateful = isStateful;
  }


  public ServiceCreatedEvent minReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
    return this;
  }

  /**
   * Minimum size of replicas set.
   * @return minReplicaSetSize
   */
  @javax.annotation.Nonnull
  public Integer getMinReplicaSetSize() {
    return minReplicaSetSize;
  }

  public void setMinReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
  }


  public ServiceCreatedEvent partitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * Number of partitions.
   * @return partitionCount
   */
  @javax.annotation.Nonnull
  public Integer getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
  }


  public ServiceCreatedEvent partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nonnull
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public ServiceCreatedEvent serviceInstance(Long serviceInstance) {
    this.serviceInstance = serviceInstance;
    return this;
  }

  /**
   * Id of Service instance.
   * @return serviceInstance
   */
  @javax.annotation.Nonnull
  public Long getServiceInstance() {
    return serviceInstance;
  }

  public void setServiceInstance(Long serviceInstance) {
    this.serviceInstance = serviceInstance;
  }


  public ServiceCreatedEvent servicePackageVersion(String servicePackageVersion) {
    this.servicePackageVersion = servicePackageVersion;
    return this;
  }

  /**
   * Version of Service package.
   * @return servicePackageVersion
   */
  @javax.annotation.Nonnull
  public String getServicePackageVersion() {
    return servicePackageVersion;
  }

  public void setServicePackageVersion(String servicePackageVersion) {
    this.servicePackageVersion = servicePackageVersion;
  }


  public ServiceCreatedEvent serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Service type name.
   * @return serviceTypeName
   */
  @javax.annotation.Nonnull
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }


  public ServiceCreatedEvent targetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
    return this;
  }

  /**
   * Size of target replicas set.
   * @return targetReplicaSetSize
   */
  @javax.annotation.Nonnull
  public Integer getTargetReplicaSetSize() {
    return targetReplicaSetSize;
  }

  public void setTargetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceCreatedEvent serviceCreatedEvent = (ServiceCreatedEvent) o;
    return Objects.equals(this.applicationName, serviceCreatedEvent.applicationName) &&
        Objects.equals(this.applicationTypeName, serviceCreatedEvent.applicationTypeName) &&
        Objects.equals(this.isStateful, serviceCreatedEvent.isStateful) &&
        Objects.equals(this.minReplicaSetSize, serviceCreatedEvent.minReplicaSetSize) &&
        Objects.equals(this.partitionCount, serviceCreatedEvent.partitionCount) &&
        Objects.equals(this.partitionId, serviceCreatedEvent.partitionId) &&
        Objects.equals(this.serviceInstance, serviceCreatedEvent.serviceInstance) &&
        Objects.equals(this.servicePackageVersion, serviceCreatedEvent.servicePackageVersion) &&
        Objects.equals(this.serviceTypeName, serviceCreatedEvent.serviceTypeName) &&
        Objects.equals(this.targetReplicaSetSize, serviceCreatedEvent.targetReplicaSetSize) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, applicationTypeName, isStateful, minReplicaSetSize, partitionCount, partitionId, serviceInstance, servicePackageVersion, serviceTypeName, targetReplicaSetSize, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceCreatedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationTypeName: ").append(toIndentedString(applicationTypeName)).append("\n");
    sb.append("    isStateful: ").append(toIndentedString(isStateful)).append("\n");
    sb.append("    minReplicaSetSize: ").append(toIndentedString(minReplicaSetSize)).append("\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    serviceInstance: ").append(toIndentedString(serviceInstance)).append("\n");
    sb.append("    servicePackageVersion: ").append(toIndentedString(servicePackageVersion)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("    targetReplicaSetSize: ").append(toIndentedString(targetReplicaSetSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceId");
    openapiFields.add("Category");
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("ApplicationTypeName");
    openapiRequiredFields.add("IsStateful");
    openapiRequiredFields.add("MinReplicaSetSize");
    openapiRequiredFields.add("PartitionCount");
    openapiRequiredFields.add("PartitionId");
    openapiRequiredFields.add("ServiceInstance");
    openapiRequiredFields.add("ServicePackageVersion");
    openapiRequiredFields.add("ServiceTypeName");
    openapiRequiredFields.add("TargetReplicaSetSize");
    openapiRequiredFields.add("ServiceId");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceCreatedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceCreatedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceCreatedEvent is not found in the empty JSON string", ServiceCreatedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceCreatedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceCreatedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceCreatedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceCreatedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceCreatedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceCreatedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceCreatedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceCreatedEvent>() {
           @Override
           public void write(JsonWriter out, ServiceCreatedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceCreatedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceCreatedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceCreatedEvent
   * @throws IOException if the JSON string is invalid with respect to ServiceCreatedEvent
   */
  public static ServiceCreatedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceCreatedEvent.class);
  }

  /**
   * Convert an instance of ServiceCreatedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

