/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServicePlacementPolicyDescription;
import org.openapitools.client.model.ServicePlacementPolicyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the policy to be used for placement of a Service Fabric service where two replicas from the same partition should never be placed in the same fault or upgrade domain.  While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not desirable then this policy should be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicePlacementRequireDomainDistributionPolicyDescription extends ServicePlacementPolicyDescription {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public ServicePlacementRequireDomainDistributionPolicyDescription() {
    this.type = this.getClass().getSimpleName();
  }

  public ServicePlacementRequireDomainDistributionPolicyDescription domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The name of the domain that should used for placement as per this policy.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePlacementRequireDomainDistributionPolicyDescription servicePlacementRequireDomainDistributionPolicyDescription = (ServicePlacementRequireDomainDistributionPolicyDescription) o;
    return Objects.equals(this.domainName, servicePlacementRequireDomainDistributionPolicyDescription.domainName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePlacementRequireDomainDistributionPolicyDescription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicePlacementRequireDomainDistributionPolicyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicePlacementRequireDomainDistributionPolicyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicePlacementRequireDomainDistributionPolicyDescription is not found in the empty JSON string", ServicePlacementRequireDomainDistributionPolicyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicePlacementRequireDomainDistributionPolicyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicePlacementRequireDomainDistributionPolicyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServicePlacementRequireDomainDistributionPolicyDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicePlacementRequireDomainDistributionPolicyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicePlacementRequireDomainDistributionPolicyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicePlacementRequireDomainDistributionPolicyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicePlacementRequireDomainDistributionPolicyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicePlacementRequireDomainDistributionPolicyDescription>() {
           @Override
           public void write(JsonWriter out, ServicePlacementRequireDomainDistributionPolicyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicePlacementRequireDomainDistributionPolicyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicePlacementRequireDomainDistributionPolicyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicePlacementRequireDomainDistributionPolicyDescription
   * @throws IOException if the JSON string is invalid with respect to ServicePlacementRequireDomainDistributionPolicyDescription
   */
  public static ServicePlacementRequireDomainDistributionPolicyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicePlacementRequireDomainDistributionPolicyDescription.class);
  }

  /**
   * Convert an instance of ServicePlacementRequireDomainDistributionPolicyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

