/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ReplicaStatus;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a Service Fabric service replica deployed on a node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedServiceReplicaInfo {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CODE_PACKAGE_NAME = "CodePackageName";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGE_NAME)
  private String codePackageName;

  public static final String SERIALIZED_NAME_HOST_PROCESS_ID = "HostProcessId";
  @SerializedName(SERIALIZED_NAME_HOST_PROCESS_ID)
  private String hostProcessId;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  private ReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  protected ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID = "ServicePackageActivationId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID)
  private String servicePackageActivationId;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public DeployedServiceReplicaInfo() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public DeployedServiceReplicaInfo address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The last address returned by the replica in Open or ChangeRole.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public DeployedServiceReplicaInfo codePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
    return this;
  }

  /**
   * The name of the code package defined in the service manifest.
   * @return codePackageName
   */
  @javax.annotation.Nullable
  public String getCodePackageName() {
    return codePackageName;
  }

  public void setCodePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
  }


  public DeployedServiceReplicaInfo hostProcessId(String hostProcessId) {
    this.hostProcessId = hostProcessId;
    return this;
  }

  /**
   * Host process ID of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process ID will be from different kernel.
   * @return hostProcessId
   */
  @javax.annotation.Nullable
  public String getHostProcessId() {
    return hostProcessId;
  }

  public void setHostProcessId(String hostProcessId) {
    this.hostProcessId = hostProcessId;
  }


  public DeployedServiceReplicaInfo partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public DeployedServiceReplicaInfo replicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * Get replicaStatus
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public ReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public DeployedServiceReplicaInfo serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nonnull
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public DeployedServiceReplicaInfo serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * The name of the service manifest.
   * @return serviceManifestName
   */
  @javax.annotation.Nullable
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public DeployedServiceReplicaInfo serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The full name of the service with &#39;fabric:&#39; URI scheme.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public DeployedServiceReplicaInfo servicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
    return this;
  }

  /**
   * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is &#39;SharedProcess&#39; (or if it is not specified, in which case it defaults to &#39;SharedProcess&#39;), then value of ServicePackageActivationId is always an empty string.
   * @return servicePackageActivationId
   */
  @javax.annotation.Nullable
  public String getServicePackageActivationId() {
    return servicePackageActivationId;
  }

  public void setServicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
  }


  public DeployedServiceReplicaInfo serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Name of the service type as specified in the service manifest.
   * @return serviceTypeName
   */
  @javax.annotation.Nullable
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedServiceReplicaInfo deployedServiceReplicaInfo = (DeployedServiceReplicaInfo) o;
    return Objects.equals(this.address, deployedServiceReplicaInfo.address) &&
        Objects.equals(this.codePackageName, deployedServiceReplicaInfo.codePackageName) &&
        Objects.equals(this.hostProcessId, deployedServiceReplicaInfo.hostProcessId) &&
        Objects.equals(this.partitionId, deployedServiceReplicaInfo.partitionId) &&
        Objects.equals(this.replicaStatus, deployedServiceReplicaInfo.replicaStatus) &&
        Objects.equals(this.serviceKind, deployedServiceReplicaInfo.serviceKind) &&
        Objects.equals(this.serviceManifestName, deployedServiceReplicaInfo.serviceManifestName) &&
        Objects.equals(this.serviceName, deployedServiceReplicaInfo.serviceName) &&
        Objects.equals(this.servicePackageActivationId, deployedServiceReplicaInfo.servicePackageActivationId) &&
        Objects.equals(this.serviceTypeName, deployedServiceReplicaInfo.serviceTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, codePackageName, hostProcessId, partitionId, replicaStatus, serviceKind, serviceManifestName, serviceName, servicePackageActivationId, serviceTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedServiceReplicaInfo {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    codePackageName: ").append(toIndentedString(codePackageName)).append("\n");
    sb.append("    hostProcessId: ").append(toIndentedString(hostProcessId)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    servicePackageActivationId: ").append(toIndentedString(servicePackageActivationId)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("CodePackageName");
    openapiFields.add("HostProcessId");
    openapiFields.add("PartitionId");
    openapiFields.add("ReplicaStatus");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServiceName");
    openapiFields.add("ServicePackageActivationId");
    openapiFields.add("ServiceTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedServiceReplicaInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedServiceReplicaInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedServiceReplicaInfo is not found in the empty JSON string", DeployedServiceReplicaInfo.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ServiceKind").getAsString();
      switch (discriminatorValue) {
        case "DeployedStatefulServiceReplicaInfo":
          DeployedStatefulServiceReplicaInfo.validateJsonElement(jsonElement);
          break;
        case "DeployedStatelessServiceInstanceInfo":
          DeployedStatelessServiceInstanceInfo.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ServiceKind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of DeployedServiceReplicaInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedServiceReplicaInfo
   * @throws IOException if the JSON string is invalid with respect to DeployedServiceReplicaInfo
   */
  public static DeployedServiceReplicaInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedServiceReplicaInfo.class);
  }

  /**
   * Convert an instance of DeployedServiceReplicaInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

