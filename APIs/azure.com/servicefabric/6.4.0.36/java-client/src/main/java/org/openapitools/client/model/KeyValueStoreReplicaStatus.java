/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReplicaKind;
import org.openapitools.client.model.ReplicaStatusBase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Key value store related information for the replica.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyValueStoreReplicaStatus extends ReplicaStatusBase {
  public static final String SERIALIZED_NAME_COPY_NOTIFICATION_CURRENT_KEY_FILTER = "CopyNotificationCurrentKeyFilter";
  @SerializedName(SERIALIZED_NAME_COPY_NOTIFICATION_CURRENT_KEY_FILTER)
  private String copyNotificationCurrentKeyFilter;

  public static final String SERIALIZED_NAME_COPY_NOTIFICATION_CURRENT_PROGRESS = "CopyNotificationCurrentProgress";
  @SerializedName(SERIALIZED_NAME_COPY_NOTIFICATION_CURRENT_PROGRESS)
  private String copyNotificationCurrentProgress;

  public static final String SERIALIZED_NAME_DATABASE_LOGICAL_SIZE_ESTIMATE = "DatabaseLogicalSizeEstimate";
  @SerializedName(SERIALIZED_NAME_DATABASE_LOGICAL_SIZE_ESTIMATE)
  private String databaseLogicalSizeEstimate;

  public static final String SERIALIZED_NAME_DATABASE_ROW_COUNT_ESTIMATE = "DatabaseRowCountEstimate";
  @SerializedName(SERIALIZED_NAME_DATABASE_ROW_COUNT_ESTIMATE)
  private String databaseRowCountEstimate;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "StatusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public KeyValueStoreReplicaStatus() {
    this.kind = this.getClass().getSimpleName();
  }

  public KeyValueStoreReplicaStatus copyNotificationCurrentKeyFilter(String copyNotificationCurrentKeyFilter) {
    this.copyNotificationCurrentKeyFilter = copyNotificationCurrentKeyFilter;
    return this;
  }

  /**
   * Value indicating the latest key-prefix filter applied to enumeration during the callback. Null if there is no pending callback.
   * @return copyNotificationCurrentKeyFilter
   */
  @javax.annotation.Nullable
  public String getCopyNotificationCurrentKeyFilter() {
    return copyNotificationCurrentKeyFilter;
  }

  public void setCopyNotificationCurrentKeyFilter(String copyNotificationCurrentKeyFilter) {
    this.copyNotificationCurrentKeyFilter = copyNotificationCurrentKeyFilter;
  }


  public KeyValueStoreReplicaStatus copyNotificationCurrentProgress(String copyNotificationCurrentProgress) {
    this.copyNotificationCurrentProgress = copyNotificationCurrentProgress;
    return this;
  }

  /**
   * Value indicating the latest number of keys enumerated during the callback. 0 if there is no pending callback.
   * @return copyNotificationCurrentProgress
   */
  @javax.annotation.Nullable
  public String getCopyNotificationCurrentProgress() {
    return copyNotificationCurrentProgress;
  }

  public void setCopyNotificationCurrentProgress(String copyNotificationCurrentProgress) {
    this.copyNotificationCurrentProgress = copyNotificationCurrentProgress;
  }


  public KeyValueStoreReplicaStatus databaseLogicalSizeEstimate(String databaseLogicalSizeEstimate) {
    this.databaseLogicalSizeEstimate = databaseLogicalSizeEstimate;
    return this;
  }

  /**
   * Value indicating the estimated size of the underlying database.
   * @return databaseLogicalSizeEstimate
   */
  @javax.annotation.Nullable
  public String getDatabaseLogicalSizeEstimate() {
    return databaseLogicalSizeEstimate;
  }

  public void setDatabaseLogicalSizeEstimate(String databaseLogicalSizeEstimate) {
    this.databaseLogicalSizeEstimate = databaseLogicalSizeEstimate;
  }


  public KeyValueStoreReplicaStatus databaseRowCountEstimate(String databaseRowCountEstimate) {
    this.databaseRowCountEstimate = databaseRowCountEstimate;
    return this;
  }

  /**
   * Value indicating the estimated number of rows in the underlying database.
   * @return databaseRowCountEstimate
   */
  @javax.annotation.Nullable
  public String getDatabaseRowCountEstimate() {
    return databaseRowCountEstimate;
  }

  public void setDatabaseRowCountEstimate(String databaseRowCountEstimate) {
    this.databaseRowCountEstimate = databaseRowCountEstimate;
  }


  public KeyValueStoreReplicaStatus statusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Value indicating the current status details of the replica.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyValueStoreReplicaStatus keyValueStoreReplicaStatus = (KeyValueStoreReplicaStatus) o;
    return Objects.equals(this.copyNotificationCurrentKeyFilter, keyValueStoreReplicaStatus.copyNotificationCurrentKeyFilter) &&
        Objects.equals(this.copyNotificationCurrentProgress, keyValueStoreReplicaStatus.copyNotificationCurrentProgress) &&
        Objects.equals(this.databaseLogicalSizeEstimate, keyValueStoreReplicaStatus.databaseLogicalSizeEstimate) &&
        Objects.equals(this.databaseRowCountEstimate, keyValueStoreReplicaStatus.databaseRowCountEstimate) &&
        Objects.equals(this.statusDetails, keyValueStoreReplicaStatus.statusDetails) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyNotificationCurrentKeyFilter, copyNotificationCurrentProgress, databaseLogicalSizeEstimate, databaseRowCountEstimate, statusDetails, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyValueStoreReplicaStatus {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    copyNotificationCurrentKeyFilter: ").append(toIndentedString(copyNotificationCurrentKeyFilter)).append("\n");
    sb.append("    copyNotificationCurrentProgress: ").append(toIndentedString(copyNotificationCurrentProgress)).append("\n");
    sb.append("    databaseLogicalSizeEstimate: ").append(toIndentedString(databaseLogicalSizeEstimate)).append("\n");
    sb.append("    databaseRowCountEstimate: ").append(toIndentedString(databaseRowCountEstimate)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyValueStoreReplicaStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyValueStoreReplicaStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyValueStoreReplicaStatus is not found in the empty JSON string", KeyValueStoreReplicaStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyValueStoreReplicaStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyValueStoreReplicaStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyValueStoreReplicaStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyValueStoreReplicaStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyValueStoreReplicaStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyValueStoreReplicaStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyValueStoreReplicaStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyValueStoreReplicaStatus>() {
           @Override
           public void write(JsonWriter out, KeyValueStoreReplicaStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyValueStoreReplicaStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyValueStoreReplicaStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyValueStoreReplicaStatus
   * @throws IOException if the JSON string is invalid with respect to KeyValueStoreReplicaStatus
   */
  public static KeyValueStoreReplicaStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyValueStoreReplicaStatus.class);
  }

  /**
   * Convert an instance of KeyValueStoreReplicaStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

