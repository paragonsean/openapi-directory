/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChaosParametersDictionaryItem;
import org.openapitools.client.model.ChaosScheduleJob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the schedule used by Chaos.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosSchedule {
  public static final String SERIALIZED_NAME_CHAOS_PARAMETERS_DICTIONARY = "ChaosParametersDictionary";
  @SerializedName(SERIALIZED_NAME_CHAOS_PARAMETERS_DICTIONARY)
  private List<ChaosParametersDictionaryItem> chaosParametersDictionary = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_JOBS = "Jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<ChaosScheduleJob> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public ChaosSchedule() {
  }

  public ChaosSchedule chaosParametersDictionary(List<ChaosParametersDictionaryItem> chaosParametersDictionary) {
    this.chaosParametersDictionary = chaosParametersDictionary;
    return this;
  }

  public ChaosSchedule addChaosParametersDictionaryItem(ChaosParametersDictionaryItem chaosParametersDictionaryItem) {
    if (this.chaosParametersDictionary == null) {
      this.chaosParametersDictionary = new ArrayList<>();
    }
    this.chaosParametersDictionary.add(chaosParametersDictionaryItem);
    return this;
  }

  /**
   * A mapping of string names to Chaos Parameters to be referenced by Chaos Schedule Jobs.
   * @return chaosParametersDictionary
   */
  @javax.annotation.Nullable
  public List<ChaosParametersDictionaryItem> getChaosParametersDictionary() {
    return chaosParametersDictionary;
  }

  public void setChaosParametersDictionary(List<ChaosParametersDictionaryItem> chaosParametersDictionary) {
    this.chaosParametersDictionary = chaosParametersDictionary;
  }


  public ChaosSchedule expiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * The date and time Chaos will continue to use this schedule until.
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public ChaosSchedule jobs(List<ChaosScheduleJob> jobs) {
    this.jobs = jobs;
    return this;
  }

  public ChaosSchedule addJobsItem(ChaosScheduleJob jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * A list of all Chaos Schedule Jobs that will be automated by the schedule.
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<ChaosScheduleJob> getJobs() {
    return jobs;
  }

  public void setJobs(List<ChaosScheduleJob> jobs) {
    this.jobs = jobs;
  }


  public ChaosSchedule startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date and time Chaos will start using this schedule.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosSchedule chaosSchedule = (ChaosSchedule) o;
    return Objects.equals(this.chaosParametersDictionary, chaosSchedule.chaosParametersDictionary) &&
        Objects.equals(this.expiryDate, chaosSchedule.expiryDate) &&
        Objects.equals(this.jobs, chaosSchedule.jobs) &&
        Objects.equals(this.startDate, chaosSchedule.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaosParametersDictionary, expiryDate, jobs, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosSchedule {\n");
    sb.append("    chaosParametersDictionary: ").append(toIndentedString(chaosParametersDictionary)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChaosParametersDictionary");
    openapiFields.add("ExpiryDate");
    openapiFields.add("Jobs");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosSchedule is not found in the empty JSON string", ChaosSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ChaosParametersDictionary") != null && !jsonObj.get("ChaosParametersDictionary").isJsonNull()) {
        JsonArray jsonArraychaosParametersDictionary = jsonObj.getAsJsonArray("ChaosParametersDictionary");
        if (jsonArraychaosParametersDictionary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ChaosParametersDictionary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChaosParametersDictionary` to be an array in the JSON string but got `%s`", jsonObj.get("ChaosParametersDictionary").toString()));
          }

          // validate the optional field `ChaosParametersDictionary` (array)
          for (int i = 0; i < jsonArraychaosParametersDictionary.size(); i++) {
            ChaosParametersDictionaryItem.validateJsonElement(jsonArraychaosParametersDictionary.get(i));
          };
        }
      }
      if (jsonObj.get("Jobs") != null && !jsonObj.get("Jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("Jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Jobs` to be an array in the JSON string but got `%s`", jsonObj.get("Jobs").toString()));
          }

          // validate the optional field `Jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            ChaosScheduleJob.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosSchedule>() {
           @Override
           public void write(JsonWriter out, ChaosSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosSchedule
   * @throws IOException if the JSON string is invalid with respect to ChaosSchedule
   */
  public static ChaosSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosSchedule.class);
  }

  /**
   * Convert an instance of ChaosSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

