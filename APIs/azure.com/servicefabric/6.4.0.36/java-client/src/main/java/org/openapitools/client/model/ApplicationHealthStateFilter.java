/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeployedApplicationHealthStateFilter;
import org.openapitools.client.model.ServiceHealthStateFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a application should be included in the cluster health chunk. One filter can match zero, one or multiple applications, depending on its properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationHealthStateFilter {
  public static final String SERIALIZED_NAME_APPLICATION_NAME_FILTER = "ApplicationNameFilter";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME_FILTER)
  private String applicationNameFilter;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_NAME_FILTER = "ApplicationTypeNameFilter";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_NAME_FILTER)
  private String applicationTypeNameFilter;

  public static final String SERIALIZED_NAME_DEPLOYED_APPLICATION_FILTERS = "DeployedApplicationFilters";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_APPLICATION_FILTERS)
  private List<DeployedApplicationHealthStateFilter> deployedApplicationFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_SERVICE_FILTERS = "ServiceFilters";
  @SerializedName(SERIALIZED_NAME_SERVICE_FILTERS)
  private List<ServiceHealthStateFilter> serviceFilters = new ArrayList<>();

  public ApplicationHealthStateFilter() {
  }

  public ApplicationHealthStateFilter applicationNameFilter(String applicationNameFilter) {
    this.applicationNameFilter = applicationNameFilter;
    return this;
  }

  /**
   * The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists. If the application doesn&#39;t exist, no application is returned in the cluster health chunk based on this filter. If the application exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.
   * @return applicationNameFilter
   */
  @javax.annotation.Nullable
  public String getApplicationNameFilter() {
    return applicationNameFilter;
  }

  public void setApplicationNameFilter(String applicationNameFilter) {
    this.applicationNameFilter = applicationNameFilter;
  }


  public ApplicationHealthStateFilter applicationTypeNameFilter(String applicationTypeNameFilter) {
    this.applicationTypeNameFilter = applicationTypeNameFilter;
    return this;
  }

  /**
   * The name of the application type that matches the filter. If specified, the filter is applied only to applications of the selected application type, if any exists. If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter. Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter.
   * @return applicationTypeNameFilter
   */
  @javax.annotation.Nullable
  public String getApplicationTypeNameFilter() {
    return applicationTypeNameFilter;
  }

  public void setApplicationTypeNameFilter(String applicationTypeNameFilter) {
    this.applicationTypeNameFilter = applicationTypeNameFilter;
  }


  public ApplicationHealthStateFilter deployedApplicationFilters(List<DeployedApplicationHealthStateFilter> deployedApplicationFilters) {
    this.deployedApplicationFilters = deployedApplicationFilters;
    return this;
  }

  public ApplicationHealthStateFilter addDeployedApplicationFiltersItem(DeployedApplicationHealthStateFilter deployedApplicationFiltersItem) {
    if (this.deployedApplicationFilters == null) {
      this.deployedApplicationFilters = new ArrayList<>();
    }
    this.deployedApplicationFilters.add(deployedApplicationFiltersItem);
    return this;
  }

  /**
   * Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter. If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple deployed application filters. For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node.
   * @return deployedApplicationFilters
   */
  @javax.annotation.Nullable
  public List<DeployedApplicationHealthStateFilter> getDeployedApplicationFilters() {
    return deployedApplicationFilters;
  }

  public void setDeployedApplicationFilters(List<DeployedApplicationHealthStateFilter> deployedApplicationFilters) {
    this.deployedApplicationFilters = deployedApplicationFilters;
  }


  public ApplicationHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the applications. It allows selecting applications if they match the desired health states. The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public ApplicationHealthStateFilter serviceFilters(List<ServiceHealthStateFilter> serviceFilters) {
    this.serviceFilters = serviceFilters;
    return this;
  }

  public ApplicationHealthStateFilter addServiceFiltersItem(ServiceHealthStateFilter serviceFiltersItem) {
    if (this.serviceFilters == null) {
      this.serviceFilters = new ArrayList<>();
    }
    this.serviceFilters.add(serviceFiltersItem);
    return this;
  }

  /**
   * Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter. If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple service filters. For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name.
   * @return serviceFilters
   */
  @javax.annotation.Nullable
  public List<ServiceHealthStateFilter> getServiceFilters() {
    return serviceFilters;
  }

  public void setServiceFilters(List<ServiceHealthStateFilter> serviceFilters) {
    this.serviceFilters = serviceFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationHealthStateFilter applicationHealthStateFilter = (ApplicationHealthStateFilter) o;
    return Objects.equals(this.applicationNameFilter, applicationHealthStateFilter.applicationNameFilter) &&
        Objects.equals(this.applicationTypeNameFilter, applicationHealthStateFilter.applicationTypeNameFilter) &&
        Objects.equals(this.deployedApplicationFilters, applicationHealthStateFilter.deployedApplicationFilters) &&
        Objects.equals(this.healthStateFilter, applicationHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.serviceFilters, applicationHealthStateFilter.serviceFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationNameFilter, applicationTypeNameFilter, deployedApplicationFilters, healthStateFilter, serviceFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationHealthStateFilter {\n");
    sb.append("    applicationNameFilter: ").append(toIndentedString(applicationNameFilter)).append("\n");
    sb.append("    applicationTypeNameFilter: ").append(toIndentedString(applicationTypeNameFilter)).append("\n");
    sb.append("    deployedApplicationFilters: ").append(toIndentedString(deployedApplicationFilters)).append("\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    serviceFilters: ").append(toIndentedString(serviceFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationNameFilter");
    openapiFields.add("ApplicationTypeNameFilter");
    openapiFields.add("DeployedApplicationFilters");
    openapiFields.add("HealthStateFilter");
    openapiFields.add("ServiceFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationHealthStateFilter is not found in the empty JSON string", ApplicationHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApplicationNameFilter") != null && !jsonObj.get("ApplicationNameFilter").isJsonNull()) && !jsonObj.get("ApplicationNameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationNameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationNameFilter").toString()));
      }
      if ((jsonObj.get("ApplicationTypeNameFilter") != null && !jsonObj.get("ApplicationTypeNameFilter").isJsonNull()) && !jsonObj.get("ApplicationTypeNameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationTypeNameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationTypeNameFilter").toString()));
      }
      if (jsonObj.get("DeployedApplicationFilters") != null && !jsonObj.get("DeployedApplicationFilters").isJsonNull()) {
        JsonArray jsonArraydeployedApplicationFilters = jsonObj.getAsJsonArray("DeployedApplicationFilters");
        if (jsonArraydeployedApplicationFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeployedApplicationFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeployedApplicationFilters` to be an array in the JSON string but got `%s`", jsonObj.get("DeployedApplicationFilters").toString()));
          }

          // validate the optional field `DeployedApplicationFilters` (array)
          for (int i = 0; i < jsonArraydeployedApplicationFilters.size(); i++) {
            DeployedApplicationHealthStateFilter.validateJsonElement(jsonArraydeployedApplicationFilters.get(i));
          };
        }
      }
      if (jsonObj.get("ServiceFilters") != null && !jsonObj.get("ServiceFilters").isJsonNull()) {
        JsonArray jsonArrayserviceFilters = jsonObj.getAsJsonArray("ServiceFilters");
        if (jsonArrayserviceFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ServiceFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ServiceFilters` to be an array in the JSON string but got `%s`", jsonObj.get("ServiceFilters").toString()));
          }

          // validate the optional field `ServiceFilters` (array)
          for (int i = 0; i < jsonArrayserviceFilters.size(); i++) {
            ServiceHealthStateFilter.validateJsonElement(jsonArrayserviceFilters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, ApplicationHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to ApplicationHealthStateFilter
   */
  public static ApplicationHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationHealthStateFilter.class);
  }

  /**
   * Convert an instance of ApplicationHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

