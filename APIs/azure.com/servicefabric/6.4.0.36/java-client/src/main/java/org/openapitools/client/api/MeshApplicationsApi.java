/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationResourceDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedApplicationResourceDescriptionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeshApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeshApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeshApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for meshApplicationCreateOrUpdate
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating a Application resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationCreateOrUpdateCall(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationResourceDescription;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshApplicationCreateOrUpdateValidateBeforeCall(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshApplicationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling meshApplicationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'applicationResourceDescription' is set
        if (applicationResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceDescription' when calling meshApplicationCreateOrUpdate(Async)");
        }

        return meshApplicationCreateOrUpdateCall(apiVersion, applicationResourceName, applicationResourceDescription, _callback);

    }

    /**
     * Creates or updates a Application resource.
     * Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating a Application resource. (required)
     * @return ApplicationResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescription meshApplicationCreateOrUpdate(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        ApiResponse<ApplicationResourceDescription> localVarResp = meshApplicationCreateOrUpdateWithHttpInfo(apiVersion, applicationResourceName, applicationResourceDescription);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a Application resource.
     * Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating a Application resource. (required)
     * @return ApiResponse&lt;ApplicationResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescription> meshApplicationCreateOrUpdateWithHttpInfo(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = meshApplicationCreateOrUpdateValidateBeforeCall(apiVersion, applicationResourceName, applicationResourceDescription, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a Application resource. (asynchronously)
     * Creates a Application resource with the specified name, description and properties. If Application resource with the same name exists, then it is updated with the specified description and properties.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param applicationResourceDescription Description for creating a Application resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationCreateOrUpdateAsync(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback<ApplicationResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshApplicationCreateOrUpdateValidateBeforeCall(apiVersion, applicationResourceName, applicationResourceDescription, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshApplicationDelete
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationDeleteCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshApplicationDeleteValidateBeforeCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshApplicationDelete(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling meshApplicationDelete(Async)");
        }

        return meshApplicationDeleteCall(apiVersion, applicationResourceName, _callback);

    }

    /**
     * Deletes the Application resource.
     * Deletes the Application resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void meshApplicationDelete(String apiVersion, String applicationResourceName) throws ApiException {
        meshApplicationDeleteWithHttpInfo(apiVersion, applicationResourceName);
    }

    /**
     * Deletes the Application resource.
     * Deletes the Application resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> meshApplicationDeleteWithHttpInfo(String apiVersion, String applicationResourceName) throws ApiException {
        okhttp3.Call localVarCall = meshApplicationDeleteValidateBeforeCall(apiVersion, applicationResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the Application resource. (asynchronously)
     * Deletes the Application resource identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationDeleteAsync(String apiVersion, String applicationResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshApplicationDeleteValidateBeforeCall(apiVersion, applicationResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshApplicationGet
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationGetCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshApplicationGetValidateBeforeCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshApplicationGet(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling meshApplicationGet(Async)");
        }

        return meshApplicationGetCall(apiVersion, applicationResourceName, _callback);

    }

    /**
     * Gets the Application resource with the given name.
     * Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @return ApplicationResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescription meshApplicationGet(String apiVersion, String applicationResourceName) throws ApiException {
        ApiResponse<ApplicationResourceDescription> localVarResp = meshApplicationGetWithHttpInfo(apiVersion, applicationResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the Application resource with the given name.
     * Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @return ApiResponse&lt;ApplicationResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescription> meshApplicationGetWithHttpInfo(String apiVersion, String applicationResourceName) throws ApiException {
        okhttp3.Call localVarCall = meshApplicationGetValidateBeforeCall(apiVersion, applicationResourceName, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Application resource with the given name. (asynchronously)
     * Gets the information about the Application resource with the given name. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param applicationResourceName The identity of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationGetAsync(String apiVersion, String applicationResourceName, final ApiCallback<ApplicationResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshApplicationGetValidateBeforeCall(apiVersion, applicationResourceName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meshApplicationList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meshApplicationListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling meshApplicationList(Async)");
        }

        return meshApplicationListCall(apiVersion, _callback);

    }

    /**
     * Lists all the application resources.
     * Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @return PagedApplicationResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PagedApplicationResourceDescriptionList meshApplicationList(String apiVersion) throws ApiException {
        ApiResponse<PagedApplicationResourceDescriptionList> localVarResp = meshApplicationListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all the application resources.
     * Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @return ApiResponse&lt;PagedApplicationResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedApplicationResourceDescriptionList> meshApplicationListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = meshApplicationListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<PagedApplicationResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all the application resources. (asynchronously)
     * Gets the information about all application resources in a given resource group. The information include the description and other properties of the Application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.4-preview&#39;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meshApplicationListAsync(String apiVersion, final ApiCallback<PagedApplicationResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = meshApplicationListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PagedApplicationResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
