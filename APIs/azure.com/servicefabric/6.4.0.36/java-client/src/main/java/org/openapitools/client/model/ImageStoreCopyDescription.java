/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about how to copy image store content from one image store relative path to another image store relative path.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:11.934327-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageStoreCopyDescription {
  public static final String SERIALIZED_NAME_CHECK_MARK_FILE = "CheckMarkFile";
  @SerializedName(SERIALIZED_NAME_CHECK_MARK_FILE)
  private Boolean checkMarkFile;

  public static final String SERIALIZED_NAME_REMOTE_DESTINATION = "RemoteDestination";
  @SerializedName(SERIALIZED_NAME_REMOTE_DESTINATION)
  private String remoteDestination;

  public static final String SERIALIZED_NAME_REMOTE_SOURCE = "RemoteSource";
  @SerializedName(SERIALIZED_NAME_REMOTE_SOURCE)
  private String remoteSource;

  public static final String SERIALIZED_NAME_SKIP_FILES = "SkipFiles";
  @SerializedName(SERIALIZED_NAME_SKIP_FILES)
  private List<String> skipFiles = new ArrayList<>();

  public ImageStoreCopyDescription() {
  }

  public ImageStoreCopyDescription checkMarkFile(Boolean checkMarkFile) {
    this.checkMarkFile = checkMarkFile;
    return this;
  }

  /**
   * Indicates whether to check mark file during copying. The property is true if checking mark file is required, false otherwise. The mark file is used to check whether the folder is well constructed. If the property is true and mark file does not exist, the copy is skipped.
   * @return checkMarkFile
   */
  @javax.annotation.Nullable
  public Boolean getCheckMarkFile() {
    return checkMarkFile;
  }

  public void setCheckMarkFile(Boolean checkMarkFile) {
    this.checkMarkFile = checkMarkFile;
  }


  public ImageStoreCopyDescription remoteDestination(String remoteDestination) {
    this.remoteDestination = remoteDestination;
    return this;
  }

  /**
   * The relative path of destination image store content to be copied to.
   * @return remoteDestination
   */
  @javax.annotation.Nonnull
  public String getRemoteDestination() {
    return remoteDestination;
  }

  public void setRemoteDestination(String remoteDestination) {
    this.remoteDestination = remoteDestination;
  }


  public ImageStoreCopyDescription remoteSource(String remoteSource) {
    this.remoteSource = remoteSource;
    return this;
  }

  /**
   * The relative path of source image store content to be copied from.
   * @return remoteSource
   */
  @javax.annotation.Nonnull
  public String getRemoteSource() {
    return remoteSource;
  }

  public void setRemoteSource(String remoteSource) {
    this.remoteSource = remoteSource;
  }


  public ImageStoreCopyDescription skipFiles(List<String> skipFiles) {
    this.skipFiles = skipFiles;
    return this;
  }

  public ImageStoreCopyDescription addSkipFilesItem(String skipFilesItem) {
    if (this.skipFiles == null) {
      this.skipFiles = new ArrayList<>();
    }
    this.skipFiles.add(skipFilesItem);
    return this;
  }

  /**
   * The list of the file names to be skipped for copying.
   * @return skipFiles
   */
  @javax.annotation.Nullable
  public List<String> getSkipFiles() {
    return skipFiles;
  }

  public void setSkipFiles(List<String> skipFiles) {
    this.skipFiles = skipFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageStoreCopyDescription imageStoreCopyDescription = (ImageStoreCopyDescription) o;
    return Objects.equals(this.checkMarkFile, imageStoreCopyDescription.checkMarkFile) &&
        Objects.equals(this.remoteDestination, imageStoreCopyDescription.remoteDestination) &&
        Objects.equals(this.remoteSource, imageStoreCopyDescription.remoteSource) &&
        Objects.equals(this.skipFiles, imageStoreCopyDescription.skipFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkMarkFile, remoteDestination, remoteSource, skipFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageStoreCopyDescription {\n");
    sb.append("    checkMarkFile: ").append(toIndentedString(checkMarkFile)).append("\n");
    sb.append("    remoteDestination: ").append(toIndentedString(remoteDestination)).append("\n");
    sb.append("    remoteSource: ").append(toIndentedString(remoteSource)).append("\n");
    sb.append("    skipFiles: ").append(toIndentedString(skipFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CheckMarkFile");
    openapiFields.add("RemoteDestination");
    openapiFields.add("RemoteSource");
    openapiFields.add("SkipFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RemoteDestination");
    openapiRequiredFields.add("RemoteSource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageStoreCopyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageStoreCopyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageStoreCopyDescription is not found in the empty JSON string", ImageStoreCopyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageStoreCopyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageStoreCopyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageStoreCopyDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("RemoteDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemoteDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemoteDestination").toString()));
      }
      if (!jsonObj.get("RemoteSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemoteSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemoteSource").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SkipFiles") != null && !jsonObj.get("SkipFiles").isJsonNull() && !jsonObj.get("SkipFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkipFiles` to be an array in the JSON string but got `%s`", jsonObj.get("SkipFiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageStoreCopyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageStoreCopyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageStoreCopyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageStoreCopyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageStoreCopyDescription>() {
           @Override
           public void write(JsonWriter out, ImageStoreCopyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageStoreCopyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageStoreCopyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageStoreCopyDescription
   * @throws IOException if the JSON string is invalid with respect to ImageStoreCopyDescription
   */
  public static ImageStoreCopyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageStoreCopyDescription.class);
  }

  /**
   * Convert an instance of ImageStoreCopyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

