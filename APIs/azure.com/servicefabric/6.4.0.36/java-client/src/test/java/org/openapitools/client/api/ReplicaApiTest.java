/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.DeployedServiceReplicaDetailInfo;
import org.openapitools.client.model.DeployedServiceReplicaInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.PagedReplicaInfoList;
import org.openapitools.client.model.ReplicaHealth;
import org.openapitools.client.model.ReplicaInfo;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReplicaApi
 */
@Disabled
public class ReplicaApiTest {

    private final ReplicaApi api = new ReplicaApi();

    /**
     * Gets the details of replica deployed on a Service Fabric node.
     *
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServiceReplicaDetailInfoTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID partitionId = null;
        String replicaId = null;
        Long timeout = null;
        DeployedServiceReplicaDetailInfo response = api.getDeployedServiceReplicaDetailInfo(apiVersion, nodeName, partitionId, replicaId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the details of replica deployed on a Service Fabric node.
     *
     * Gets the details of the replica deployed on a Service Fabric node. The information includes service kind, service name, current service operation, current service operation start date time, partition ID, replica/instance ID, reported load, and other information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServiceReplicaDetailInfoByPartitionIdTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID partitionId = null;
        Long timeout = null;
        DeployedServiceReplicaDetailInfo response = api.getDeployedServiceReplicaDetailInfoByPartitionId(apiVersion, nodeName, partitionId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of replicas deployed on a Service Fabric node.
     *
     * Gets the list containing the information about replicas deployed on a Service Fabric node. The information include partition ID, replica ID, status of the replica, name of the service, name of the service type, and other information. Use PartitionId or ServiceManifestName query parameters to return information about the deployed replicas matching the specified values for those parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServiceReplicaInfoListTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        UUID partitionId = null;
        String serviceManifestName = null;
        Long timeout = null;
        List<DeployedServiceReplicaInfo> response = api.getDeployedServiceReplicaInfoList(apiVersion, nodeName, applicationId, partitionId, serviceManifestName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance.
     *
     * Gets the health of a Service Fabric replica. Use EventsHealthStateFilter to filter the collection of health events reported on the replica based on the health state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicaHealthTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String replicaId = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        ReplicaHealth response = api.getReplicaHealth(apiVersion, partitionId, replicaId, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric stateful service replica or stateless service instance using the specified policy.
     *
     * Gets the health of a Service Fabric stateful service replica or stateless service instance. Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses &#39;ConsiderWarningAsError&#39; field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the replica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicaHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String replicaId = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        ReplicaHealth response = api.getReplicaHealthUsingPolicy(apiVersion, partitionId, replicaId, eventsHealthStateFilter, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the information about a replica of a Service Fabric partition.
     *
     * The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicaInfoTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String replicaId = null;
        Long timeout = null;
        ReplicaInfo response = api.getReplicaInfo(apiVersion, partitionId, replicaId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about replicas of a Service Fabric service partition.
     *
     * The GetReplicas endpoint returns information about the replicas of the specified partition. The response includes the ID, role, status, health, node name, uptime, and other details about the replica.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicaInfoListTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String continuationToken = null;
        Long timeout = null;
        PagedReplicaInfoList response = api.getReplicaInfoList(apiVersion, partitionId, continuationToken, timeout);
        // TODO: test validations
    }

    /**
     * Removes a service replica running on a node.
     *
     * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric cluster. The removal closes the replica, transitions the replica to the role None, and then removes all of the state information of the replica from the cluster. This API tests the replica state removal path, and simulates the report fault permanent path through client APIs. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas hosted in the same process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeReplicaTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID partitionId = null;
        String replicaId = null;
        Boolean forceRemove = null;
        Long timeout = null;
        api.removeReplica(apiVersion, nodeName, partitionId, replicaId, forceRemove, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric replica.
     *
     * Reports health state of the specified Service Fabric replica. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Replica, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetReplicaHealth and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportReplicaHealthTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String replicaId = null;
        String replicaHealthReportServiceKind = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportReplicaHealth(apiVersion, partitionId, replicaId, replicaHealthReportServiceKind, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Restarts a service replica of a persisted service running on a node.
     *
     * Restarts a service replica of a persisted service running on a node. Warning - There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restartReplicaTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        UUID partitionId = null;
        String replicaId = null;
        Long timeout = null;
        api.restartReplica(apiVersion, nodeName, partitionId, replicaId, timeout);
        // TODO: test validations
    }

}
