/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.4.0.36
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AadMetadataObject;
import org.openapitools.client.model.ClusterConfiguration;
import org.openapitools.client.model.ClusterConfigurationUpgradeDescription;
import org.openapitools.client.model.ClusterConfigurationUpgradeStatusInfo;
import org.openapitools.client.model.ClusterHealth;
import org.openapitools.client.model.ClusterHealthChunk;
import org.openapitools.client.model.ClusterHealthChunkQueryDescription;
import org.openapitools.client.model.ClusterHealthPolicies;
import org.openapitools.client.model.ClusterManifest;
import org.openapitools.client.model.ClusterUpgradeProgressObject;
import org.openapitools.client.model.ClusterVersion;
import org.openapitools.client.model.FabricCodeVersionInfo;
import org.openapitools.client.model.FabricConfigVersionInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.ProvisionFabricDescription;
import org.openapitools.client.model.ResumeClusterUpgradeDescription;
import org.openapitools.client.model.StartClusterUpgradeDescription;
import org.openapitools.client.model.UnprovisionFabricDescription;
import org.openapitools.client.model.UpdateClusterUpgradeDescription;
import org.openapitools.client.model.UpgradeOrchestrationServiceState;
import org.openapitools.client.model.UpgradeOrchestrationServiceStateSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClusterApi
 */
@Disabled
public class ClusterApiTest {

    private final ClusterApi api = new ClusterApi();

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster.
     *
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAadMetadataTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        AadMetadataObject response = api.getAadMetadata(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get the Service Fabric standalone cluster configuration.
     *
     * The cluster configuration contains properties of the cluster that include different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterConfigurationTest() throws ApiException {
        String apiVersion = null;
        String configurationApiVersion = null;
        Long timeout = null;
        ClusterConfiguration response = api.getClusterConfiguration(apiVersion, configurationApiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get the cluster configuration upgrade status of a Service Fabric standalone cluster.
     *
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterConfigurationUpgradeStatusTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterConfigurationUpgradeStatusInfo response = api.getClusterConfigurationUpgradeStatus(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric cluster.
     *
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterHealthTest() throws ApiException {
        String apiVersion = null;
        Integer nodesHealthStateFilter = null;
        Integer applicationsHealthStateFilter = null;
        Integer eventsHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Boolean includeSystemApplicationHealthStatistics = null;
        Long timeout = null;
        ClusterHealth response = api.getClusterHealth(apiVersion, nodesHealthStateFilter, applicationsHealthStateFilter, eventsHealthStateFilter, excludeHealthStatistics, includeSystemApplicationHealthStatistics, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks.
     *
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterHealthChunkTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterHealthChunk response = api.getClusterHealthChunk(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric cluster using health chunks.
     *
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description. The query description allows users to specify health policies for evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy. The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return only services that are in Error or Warning, and all partitions and replicas for one of these services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterHealthChunkUsingPolicyAndAdvancedFiltersTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterHealthChunkQueryDescription clusterHealthChunkQueryDescription = null;
        ClusterHealthChunk response = api.getClusterHealthChunkUsingPolicyAndAdvancedFilters(apiVersion, timeout, clusterHealthChunkQueryDescription);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric cluster using the specified policy.
     *
     * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        Integer nodesHealthStateFilter = null;
        Integer applicationsHealthStateFilter = null;
        Integer eventsHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Boolean includeSystemApplicationHealthStatistics = null;
        Long timeout = null;
        ClusterHealthPolicies clusterHealthPolicies = null;
        ClusterHealth response = api.getClusterHealthUsingPolicy(apiVersion, nodesHealthStateFilter, applicationsHealthStateFilter, eventsHealthStateFilter, excludeHealthStatistics, includeSystemApplicationHealthStatistics, timeout, clusterHealthPolicies);
        // TODO: test validations
    }

    /**
     * Get the Service Fabric cluster manifest.
     *
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster, security configurations, fault, and upgrade domain topologies, etc.  These properties are specified as part of the ClusterConfig.JSON file while deploying a stand-alone cluster. However, most of the information in the cluster manifest is generated internally by service fabric during cluster deployment in other deployment scenarios (e.g. when using Azure portal).  The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterManifestTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterManifest response = api.getClusterManifest(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the progress of the current cluster upgrade.
     *
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, get the last state of the previous cluster upgrade.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterUpgradeProgressTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterUpgradeProgressObject response = api.getClusterUpgradeProgress(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get the current Service Fabric cluster version.
     *
     * If a cluster upgrade is happening, then this API will return the lowest (older) version of the current and target cluster runtime versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterVersionTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        ClusterVersion response = api.getClusterVersion(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets a list of fabric code versions that are provisioned in a Service Fabric cluster.
     *
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvisionedFabricCodeVersionInfoListTest() throws ApiException {
        String apiVersion = null;
        String codeVersion = null;
        Long timeout = null;
        List<FabricCodeVersionInfo> response = api.getProvisionedFabricCodeVersionInfoList(apiVersion, codeVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets a list of fabric config versions that are provisioned in a Service Fabric cluster.
     *
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvisionedFabricConfigVersionInfoListTest() throws ApiException {
        String apiVersion = null;
        String configVersion = null;
        Long timeout = null;
        List<FabricConfigVersionInfo> response = api.getProvisionedFabricConfigVersionInfoList(apiVersion, configVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service.
     *
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpgradeOrchestrationServiceStateTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        UpgradeOrchestrationServiceState response = api.getUpgradeOrchestrationServiceState(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Provision the code or configuration packages of a Service Fabric cluster.
     *
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionClusterTest() throws ApiException {
        String apiVersion = null;
        ProvisionFabricDescription provisionFabricDescription = null;
        Long timeout = null;
        api.provisionCluster(apiVersion, provisionFabricDescription, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric cluster.
     *
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportClusterHealthTest() throws ApiException {
        String apiVersion = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportClusterHealth(apiVersion, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Make the cluster upgrade move on to the next upgrade domain.
     *
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeClusterUpgradeTest() throws ApiException {
        String apiVersion = null;
        ResumeClusterUpgradeDescription resumeClusterUpgradeDescription = null;
        Long timeout = null;
        api.resumeClusterUpgrade(apiVersion, resumeClusterUpgradeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Roll back the upgrade of a Service Fabric cluster.
     *
     * Roll back the code or configuration upgrade of a Service Fabric cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackClusterUpgradeTest() throws ApiException {
        String apiVersion = null;
        Long timeout = null;
        api.rollbackClusterUpgrade(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service.
     *
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUpgradeOrchestrationServiceStateTest() throws ApiException {
        String apiVersion = null;
        UpgradeOrchestrationServiceState upgradeOrchestrationServiceState = null;
        Long timeout = null;
        UpgradeOrchestrationServiceStateSummary response = api.setUpgradeOrchestrationServiceState(apiVersion, upgradeOrchestrationServiceState, timeout);
        // TODO: test validations
    }

    /**
     * Start upgrading the configuration of a Service Fabric standalone cluster.
     *
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startClusterConfigurationUpgradeTest() throws ApiException {
        String apiVersion = null;
        ClusterConfigurationUpgradeDescription clusterConfigurationUpgradeDescription = null;
        Long timeout = null;
        api.startClusterConfigurationUpgrade(apiVersion, clusterConfigurationUpgradeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Start upgrading the code or configuration version of a Service Fabric cluster.
     *
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startClusterUpgradeTest() throws ApiException {
        String apiVersion = null;
        StartClusterUpgradeDescription startClusterUpgradeDescription = null;
        Long timeout = null;
        api.startClusterUpgrade(apiVersion, startClusterUpgradeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Unprovision the code or configuration packages of a Service Fabric cluster.
     *
     * It is supported to unprovision code and configuration separately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unprovisionClusterTest() throws ApiException {
        String apiVersion = null;
        UnprovisionFabricDescription unprovisionFabricDescription = null;
        Long timeout = null;
        api.unprovisionCluster(apiVersion, unprovisionFabricDescription, timeout);
        // TODO: test validations
    }

    /**
     * Update the upgrade parameters of a Service Fabric cluster upgrade.
     *
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClusterUpgradeTest() throws ApiException {
        String apiVersion = null;
        UpdateClusterUpgradeDescription updateClusterUpgradeDescription = null;
        Long timeout = null;
        api.updateClusterUpgrade(apiVersion, updateClusterUpgradeDescription, timeout);
        // TODO: test validations
    }

}
