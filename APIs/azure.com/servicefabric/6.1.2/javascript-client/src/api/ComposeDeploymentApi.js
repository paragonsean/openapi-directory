/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComposeDeploymentStatusInfo from '../model/ComposeDeploymentStatusInfo';
import ComposeDeploymentUpgradeDescription from '../model/ComposeDeploymentUpgradeDescription';
import ComposeDeploymentUpgradeProgressInfo from '../model/ComposeDeploymentUpgradeProgressInfo';
import CreateComposeDeploymentDescription from '../model/CreateComposeDeploymentDescription';
import FabricError from '../model/FabricError';
import PagedComposeDeploymentStatusInfoList from '../model/PagedComposeDeploymentStatusInfoList';

/**
* ComposeDeployment service.
* @module api/ComposeDeploymentApi
* @version 6.1.2
*/
export default class ComposeDeploymentApi {

    /**
    * Constructs a new ComposeDeploymentApi. 
    * @alias module:api/ComposeDeploymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComposeDeployment operation.
     * @callback module:api/ComposeDeploymentApi~createComposeDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Service Fabric compose deployment.
     * Compose is a file format that describes multi-container applications. This API allows deploying container based applications defined in compose format in a Service Fabric cluster. Once the deployment is created it's status can be tracked via `GetComposeDeploymentStatus` API.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {module:model/CreateComposeDeploymentDescription} createComposeDeploymentDescription Describes the compose deployment that needs to be created.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~createComposeDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createComposeDeployment(apiVersion, createComposeDeploymentDescription, opts, callback) {
      opts = opts || {};
      let postBody = createComposeDeploymentDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling createComposeDeployment");
      }
      // verify the required parameter 'createComposeDeploymentDescription' is set
      if (createComposeDeploymentDescription === undefined || createComposeDeploymentDescription === null) {
        throw new Error("Missing the required parameter 'createComposeDeploymentDescription' when calling createComposeDeployment");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ComposeDeployments/$/Create', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComposeDeploymentStatus operation.
     * @callback module:api/ComposeDeploymentApi~getComposeDeploymentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComposeDeploymentStatusInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a Service Fabric compose deployment.
     * Returns the status of the compose deployment that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, status and other details about the deployment.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {String} deploymentName The identity of the deployment.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~getComposeDeploymentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComposeDeploymentStatusInfo}
     */
    getComposeDeploymentStatus(apiVersion, deploymentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getComposeDeploymentStatus");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling getComposeDeploymentStatus");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComposeDeploymentStatusInfo;
      return this.apiClient.callApi(
        '/ComposeDeployments/{deploymentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComposeDeploymentStatusList operation.
     * @callback module:api/ComposeDeploymentApi~getComposeDeploymentStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedComposeDeploymentStatusInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of compose deployments created in the Service Fabric cluster.
     * Gets the status about the compose deployments that were created or in the process of being created in the Service Fabric cluster. The response includes the name, status and other details about the compose deployments. If the list of deployments do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {Object} opts Optional parameters
     * @param {String} [continuationToken] The continuation token parameter is used to obtain next set of results. A continuation token with a non empty value is included in the response of the API when the results from the system do not fit in a single response. When this value is passed to the next API call, the API returns next set of results. If there are no further results then the continuation token does not contain a value. The value of this parameter should not be URL encoded.
     * @param {Number} [maxResults = 0)] The maximum number of results to be returned as part of the paged queries. This parameter defines the upper bound on the number of results returned. The results returned can be less than the specified maximum results if they do not fit in the message as per the max message size restrictions defined in the configuration. If this parameter is zero or not specified, the paged queries includes as much results as possible that fit in the return message.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~getComposeDeploymentStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedComposeDeploymentStatusInfoList}
     */
    getComposeDeploymentStatusList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getComposeDeploymentStatusList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'ContinuationToken': opts['continuationToken'],
        'MaxResults': opts['maxResults'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedComposeDeploymentStatusInfoList;
      return this.apiClient.callApi(
        '/ComposeDeployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComposeDeploymentUpgradeProgress operation.
     * @callback module:api/ComposeDeploymentApi~getComposeDeploymentUpgradeProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComposeDeploymentUpgradeProgressInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details for the latest upgrade performed on this Service Fabric compose deployment.
     * Returns the information about the state of the compose deployment upgrade along with details to aid debugging application health issues.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {String} deploymentName The identity of the deployment.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~getComposeDeploymentUpgradeProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComposeDeploymentUpgradeProgressInfo}
     */
    getComposeDeploymentUpgradeProgress(apiVersion, deploymentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getComposeDeploymentUpgradeProgress");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling getComposeDeploymentUpgradeProgress");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComposeDeploymentUpgradeProgressInfo;
      return this.apiClient.callApi(
        '/ComposeDeployments/{deploymentName}/$/GetUpgradeProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeComposeDeployment operation.
     * @callback module:api/ComposeDeploymentApi~removeComposeDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Service Fabric compose deployment from cluster.
     * Deletes an existing Service Fabric compose deployment.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {String} deploymentName The identity of the deployment.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~removeComposeDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeComposeDeployment(apiVersion, deploymentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling removeComposeDeployment");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling removeComposeDeployment");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ComposeDeployments/{deploymentName}/$/Delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startComposeDeploymentUpgrade operation.
     * @callback module:api/ComposeDeploymentApi~startComposeDeploymentUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts upgrading a compose deployment in the Service Fabric cluster.
     * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters are valid.
     * @param {module:model/String} apiVersion The version of the API. This is a required parameter and its value must be \"6.0-preview\".
     * @param {String} deploymentName The identity of the deployment.
     * @param {module:model/ComposeDeploymentUpgradeDescription} composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ComposeDeploymentApi~startComposeDeploymentUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startComposeDeploymentUpgrade(apiVersion, deploymentName, composeDeploymentUpgradeDescription, opts, callback) {
      opts = opts || {};
      let postBody = composeDeploymentUpgradeDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startComposeDeploymentUpgrade");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling startComposeDeploymentUpgrade");
      }
      // verify the required parameter 'composeDeploymentUpgradeDescription' is set
      if (composeDeploymentUpgradeDescription === undefined || composeDeploymentUpgradeDescription === null) {
        throw new Error("Missing the required parameter 'composeDeploymentUpgradeDescription' when calling startComposeDeploymentUpgrade");
      }

      let pathParams = {
        'deploymentName': deploymentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ComposeDeployments/{deploymentName}/$/Upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
