/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AadMetadataObject from '../model/AadMetadataObject';
import ClusterConfiguration from '../model/ClusterConfiguration';
import ClusterConfigurationUpgradeDescription from '../model/ClusterConfigurationUpgradeDescription';
import ClusterConfigurationUpgradeStatusInfo from '../model/ClusterConfigurationUpgradeStatusInfo';
import ClusterHealth from '../model/ClusterHealth';
import ClusterHealthChunk from '../model/ClusterHealthChunk';
import ClusterHealthChunkQueryDescription from '../model/ClusterHealthChunkQueryDescription';
import ClusterHealthPolicies from '../model/ClusterHealthPolicies';
import ClusterManifest from '../model/ClusterManifest';
import ClusterUpgradeProgressObject from '../model/ClusterUpgradeProgressObject';
import FabricCodeVersionInfo from '../model/FabricCodeVersionInfo';
import FabricConfigVersionInfo from '../model/FabricConfigVersionInfo';
import FabricError from '../model/FabricError';
import HealthInformation from '../model/HealthInformation';
import ProvisionFabricDescription from '../model/ProvisionFabricDescription';
import ResumeClusterUpgradeDescription from '../model/ResumeClusterUpgradeDescription';
import StartClusterUpgradeDescription from '../model/StartClusterUpgradeDescription';
import UnprovisionFabricDescription from '../model/UnprovisionFabricDescription';
import UpdateClusterUpgradeDescription from '../model/UpdateClusterUpgradeDescription';
import UpgradeOrchestrationServiceState from '../model/UpgradeOrchestrationServiceState';
import UpgradeOrchestrationServiceStateSummary from '../model/UpgradeOrchestrationServiceStateSummary';

/**
* Cluster service.
* @module api/ClusterApi
* @version 6.1.2
*/
export default class ClusterApi {

    /**
    * Constructs a new ClusterApi. 
    * @alias module:api/ClusterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAadMetadata operation.
     * @callback module:api/ClusterApi~getAadMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AadMetadataObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Azure Active Directory metadata used for secured connection to cluster.
     * Gets the Azure Active Directory metadata used for secured connection to cluster. This API is not supposed to be called separately. It provides information needed to set up an Azure Active Directory secured connection with a Service Fabric cluster. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getAadMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AadMetadataObject}
     */
    getAadMetadata(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getAadMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AadMetadataObject;
      return this.apiClient.callApi(
        '/$/GetAadMetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterConfiguration operation.
     * @callback module:api/ClusterApi~getClusterConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Service Fabric standalone cluster configuration.
     * Get the Service Fabric standalone cluster configuration. The cluster configuration contains properties of the cluster that include different node types on the cluster, security configurations, fault and upgrade domain topologies etc. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {String} configurationApiVersion The API version of the Standalone cluster json configuration.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterConfiguration}
     */
    getClusterConfiguration(apiVersion, configurationApiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterConfiguration");
      }
      // verify the required parameter 'configurationApiVersion' is set
      if (configurationApiVersion === undefined || configurationApiVersion === null) {
        throw new Error("Missing the required parameter 'configurationApiVersion' when calling getClusterConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'ConfigurationApiVersion': configurationApiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterConfiguration;
      return this.apiClient.callApi(
        '/$/GetClusterConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterConfigurationUpgradeStatus operation.
     * @callback module:api/ClusterApi~getClusterConfigurationUpgradeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterConfigurationUpgradeStatusInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the cluster configuration upgrade status of a Service Fabric standalone cluster.
     * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterConfigurationUpgradeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterConfigurationUpgradeStatusInfo}
     */
    getClusterConfigurationUpgradeStatus(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterConfigurationUpgradeStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterConfigurationUpgradeStatusInfo;
      return this.apiClient.callApi(
        '/$/GetClusterConfigurationUpgradeStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHealth operation.
     * @callback module:api/ClusterApi~getClusterHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the health of a Service Fabric cluster.
     * Gets the health of a Service Fabric cluster. Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [nodesHealthStateFilter = 0)] Allows filtering of the node health state objects returned in the result of cluster health query based on their health state. The possible values for this parameter include integer value of one of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Number} [applicationsHealthStateFilter = 0)] Allows filtering of the application health state objects returned in the result of cluster health query based on their health state. The possible values for this parameter include integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only applications that match the filter are returned. All applications are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Number} [eventsHealthStateFilter = 0)] Allows filtering the collection of HealthEvent objects returned based on health state. The possible values for this parameter include integer value of one of the following health states. Only events that match the filter are returned. All events are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these value obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Boolean} [excludeHealthStatistics = false)] Indicates whether the health statistics should be returned as part of the query result. False by default. The statistics show the number of children entities in health state Ok, Warning, and Error. 
     * @param {Boolean} [includeSystemApplicationHealthStatistics = false)] Indicates whether the health statistics should include the fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application. Otherwise, the query result includes health statistics only for user applications. The health statistics must be included in the query result for this parameter to be applied. 
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterHealth}
     */
    getClusterHealth(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterHealth");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'NodesHealthStateFilter': opts['nodesHealthStateFilter'],
        'ApplicationsHealthStateFilter': opts['applicationsHealthStateFilter'],
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'ExcludeHealthStatistics': opts['excludeHealthStatistics'],
        'IncludeSystemApplicationHealthStatistics': opts['includeSystemApplicationHealthStatistics'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterHealth;
      return this.apiClient.callApi(
        '/$/GetClusterHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHealthChunk operation.
     * @callback module:api/ClusterApi~getClusterHealthChunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterHealthChunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the health of a Service Fabric cluster using health chunks.
     * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health state of the cluster, but none of the cluster entities. To expand the cluster health and get the health state of all or some of the entities, use the POST URI and specify the cluster health chunk query description. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterHealthChunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterHealthChunk}
     */
    getClusterHealthChunk(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterHealthChunk");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterHealthChunk;
      return this.apiClient.callApi(
        '/$/GetClusterHealthChunk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHealthChunkUsingPolicyAndAdvancedFilters operation.
     * @callback module:api/ClusterApi~getClusterHealthChunkUsingPolicyAndAdvancedFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterHealthChunk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the health of a Service Fabric cluster using health chunks.
     * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done based on the input cluster health chunk query description. The query description allows users to specify health policies for evaluating the cluster and its children. Users can specify very flexible filters to select which cluster entities to return. The selection can be done based on the entities health state and based on the hierarchy. The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return only services that are in Error or Warning, and all partitions and replicas for one of these services. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:model/ClusterHealthChunkQueryDescription} [clusterHealthChunkQueryDescription] Describes the cluster and application health policies used to evaluate the cluster health and the filters to select which cluster entities to be returned. If the cluster health policy is present, it is used to evaluate the cluster events and the cluster nodes. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy. By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest. If the application health policy map is specified, and it has an entry for an application, the specified application health policy is used to evaluate the application health. Users can specify very flexible filters to select which cluster entities to include in response. The selection can be done based on the entities health state and based on the hierarchy. The query can return multi-level children of the entities based on the specified filters. For example, it can return one application with a specified name, and for this application, return only services that are in Error or Warning, and all partitions and replicas for one of these services. 
     * @param {module:api/ClusterApi~getClusterHealthChunkUsingPolicyAndAdvancedFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterHealthChunk}
     */
    getClusterHealthChunkUsingPolicyAndAdvancedFilters(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterHealthChunkQueryDescription'];
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterHealthChunkUsingPolicyAndAdvancedFilters");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterHealthChunk;
      return this.apiClient.callApi(
        '/$/GetClusterHealthChunk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterHealthUsingPolicy operation.
     * @callback module:api/ClusterApi~getClusterHealthUsingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the health of a Service Fabric cluster using the specified policy.
     * Gets the health of a Service Fabric cluster. Use EventsHealthStateFilter to filter the collection of health events reported on the cluster based on the health state. Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection of nodes and applications returned based on their aggregated health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [nodesHealthStateFilter = 0)] Allows filtering of the node health state objects returned in the result of cluster health query based on their health state. The possible values for this parameter include integer value of one of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of nodes with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Number} [applicationsHealthStateFilter = 0)] Allows filtering of the application health state objects returned in the result of cluster health query based on their health state. The possible values for this parameter include integer value obtained from members or bitwise operations on members of HealthStateFilter enumeration. Only applications that match the filter are returned. All applications are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6 then health state of applications with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Number} [eventsHealthStateFilter = 0)] Allows filtering the collection of HealthEvent objects returned based on health state. The possible values for this parameter include integer value of one of the following health states. Only events that match the filter are returned. All events are used to evaluate the aggregated health state. If not specified, all entries are returned. The state values are flag based enumeration, so the value could be a combination of these value obtained using bitwise 'OR' operator. For example, If the provided value is 6 then all of the events with HealthState value of OK (2) and Warning (4) are returned.  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
     * @param {Boolean} [excludeHealthStatistics = false)] Indicates whether the health statistics should be returned as part of the query result. False by default. The statistics show the number of children entities in health state Ok, Warning, and Error. 
     * @param {Boolean} [includeSystemApplicationHealthStatistics = false)] Indicates whether the health statistics should include the fabric:/System application health statistics. False by default. If IncludeSystemApplicationHealthStatistics is set to true, the health statistics include the entities that belong to the fabric:/System application. Otherwise, the query result includes health statistics only for user applications. The health statistics must be included in the query result for this parameter to be applied. 
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:model/ClusterHealthPolicies} [clusterHealthPolicies] Describes the health policies used to evaluate the cluster health. If not present, the health evaluation uses the cluster health policy defined in the cluster manifest or the default cluster health policy. By default, each application is evaluated using its specific application health policy, defined in the application manifest, or the default health policy, if no policy is defined in manifest. If the application health policy map is specified, and it has an entry for an application, the specified application health policy is used to evaluate the application health. 
     * @param {module:api/ClusterApi~getClusterHealthUsingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterHealth}
     */
    getClusterHealthUsingPolicy(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterHealthPolicies'];
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterHealthUsingPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'NodesHealthStateFilter': opts['nodesHealthStateFilter'],
        'ApplicationsHealthStateFilter': opts['applicationsHealthStateFilter'],
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'ExcludeHealthStatistics': opts['excludeHealthStatistics'],
        'IncludeSystemApplicationHealthStatistics': opts['includeSystemApplicationHealthStatistics'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterHealth;
      return this.apiClient.callApi(
        '/$/GetClusterHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterManifest operation.
     * @callback module:api/ClusterApi~getClusterManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Service Fabric cluster manifest.
     * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster that include different node types on the cluster, security configurations, fault and upgrade domain topologies etc.  These properties are specified as part of the ClusterConfig.JSON file while deploying a stand alone cluster. However, most of the information in the cluster manifest is generated internally by service fabric during cluster deployment in other deployment scenarios (for e.g when using azure portal).  The contents of the cluster manifest are for informational purposes only and users are not expected to take a dependency on the format of the file contents or its interpretation. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterManifest}
     */
    getClusterManifest(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterManifest");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterManifest;
      return this.apiClient.callApi(
        '/$/GetClusterManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterUpgradeProgress operation.
     * @callback module:api/ClusterApi~getClusterUpgradeProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterUpgradeProgressObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the progress of the current cluster upgrade.
     * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in progress, gets the last state of the previous cluster upgrade.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getClusterUpgradeProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterUpgradeProgressObject}
     */
    getClusterUpgradeProgress(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getClusterUpgradeProgress");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterUpgradeProgressObject;
      return this.apiClient.callApi(
        '/$/GetUpgradeProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvisionedFabricCodeVersionInfoList operation.
     * @callback module:api/ClusterApi~getProvisionedFabricCodeVersionInfoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FabricCodeVersionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of fabric code versions that are provisioned in a Service Fabric cluster.
     * Gets a list of information about fabric code versions that are provisioned in the cluster. The parameter CodeVersion can be used to optionally filter the output to only that particular version.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {String} [codeVersion] The product version of Service Fabric.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getProvisionedFabricCodeVersionInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FabricCodeVersionInfo>}
     */
    getProvisionedFabricCodeVersionInfoList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getProvisionedFabricCodeVersionInfoList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'CodeVersion': opts['codeVersion'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FabricCodeVersionInfo];
      return this.apiClient.callApi(
        '/$/GetProvisionedCodeVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvisionedFabricConfigVersionInfoList operation.
     * @callback module:api/ClusterApi~getProvisionedFabricConfigVersionInfoListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FabricConfigVersionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of fabric config versions that are provisioned in a Service Fabric cluster.
     * Gets a list of information about fabric config versions that are provisioned in the cluster. The parameter ConfigVersion can be used to optionally filter the output to only that particular version.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {String} [configVersion] The config version of Service Fabric.
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getProvisionedFabricConfigVersionInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FabricConfigVersionInfo>}
     */
    getProvisionedFabricConfigVersionInfoList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getProvisionedFabricConfigVersionInfoList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'ConfigVersion': opts['configVersion'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FabricConfigVersionInfo];
      return this.apiClient.callApi(
        '/$/GetProvisionedConfigVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeOrchestrationServiceState operation.
     * @callback module:api/ClusterApi~getUpgradeOrchestrationServiceStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpgradeOrchestrationServiceState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the service state of Service Fabric Upgrade Orchestration Service.
     * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~getUpgradeOrchestrationServiceStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpgradeOrchestrationServiceState}
     */
    getUpgradeOrchestrationServiceState(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getUpgradeOrchestrationServiceState");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpgradeOrchestrationServiceState;
      return this.apiClient.callApi(
        '/$/GetUpgradeOrchestrationServiceState', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionCluster operation.
     * @callback module:api/ClusterApi~provisionClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provision the code or configuration packages of a Service Fabric cluster.
     * Validate and provision the code or configuration packages of a Service Fabric cluster.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/ProvisionFabricDescription} provisionFabricDescription Describes the parameters for provisioning a cluster.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~provisionClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    provisionCluster(apiVersion, provisionFabricDescription, opts, callback) {
      opts = opts || {};
      let postBody = provisionFabricDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling provisionCluster");
      }
      // verify the required parameter 'provisionFabricDescription' is set
      if (provisionFabricDescription === undefined || provisionFabricDescription === null) {
        throw new Error("Missing the required parameter 'provisionFabricDescription' when calling provisionCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/Provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportClusterHealth operation.
     * @callback module:api/ClusterApi~reportClusterHealthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a health report on the Service Fabric cluster.
     * Sends a health report on a Service Fabric cluster. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetClusterHealth and check that the report appears in the HealthEvents section. 
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/HealthInformation} healthInformation Describes the health information for the health report. This information needs to be present in all of the health reports sent to the health manager.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [immediate = false)] A flag which indicates whether the report should be sent immediately. A health report is sent to a Service Fabric gateway Application, which forwards to the health store. If Immediate is set to true, the report is sent immediately from Http Gateway to the health store, regardless of the fabric client settings that the Http Gateway Application is using. This is useful for critical reports that should be sent as soon as possible. Depending on timing and other conditions, sending the report may still fail, for example if the Http Gateway is closed or the message doesn't reach the Gateway. If Immediate is set to false, the report is sent based on the health client settings from the Http Gateway. Therefore, it will be batched according to the HealthReportSendInterval configuration. This is the recommended setting because it allows the health client to optimize health reporting messages to health store as well as health report processing. By default, reports are not sent immediately. 
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~reportClusterHealthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reportClusterHealth(apiVersion, healthInformation, opts, callback) {
      opts = opts || {};
      let postBody = healthInformation;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling reportClusterHealth");
      }
      // verify the required parameter 'healthInformation' is set
      if (healthInformation === undefined || healthInformation === null) {
        throw new Error("Missing the required parameter 'healthInformation' when calling reportClusterHealth");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'Immediate': opts['immediate'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/ReportClusterHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeClusterUpgrade operation.
     * @callback module:api/ClusterApi~resumeClusterUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make the cluster upgrade move on to the next upgrade domain.
     * Make the cluster code or configuration upgrade move on to the next upgrade domain if appropriate.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/ResumeClusterUpgradeDescription} resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~resumeClusterUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resumeClusterUpgrade(apiVersion, resumeClusterUpgradeDescription, opts, callback) {
      opts = opts || {};
      let postBody = resumeClusterUpgradeDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resumeClusterUpgrade");
      }
      // verify the required parameter 'resumeClusterUpgradeDescription' is set
      if (resumeClusterUpgradeDescription === undefined || resumeClusterUpgradeDescription === null) {
        throw new Error("Missing the required parameter 'resumeClusterUpgradeDescription' when calling resumeClusterUpgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/MoveToNextUpgradeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbackClusterUpgrade operation.
     * @callback module:api/ClusterApi~rollbackClusterUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback the upgrade of a Service Fabric cluster.
     * Rollback the code or configuration upgrade of a Service Fabric cluster.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~rollbackClusterUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rollbackClusterUpgrade(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling rollbackClusterUpgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/RollbackUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUpgradeOrchestrationServiceState operation.
     * @callback module:api/ClusterApi~setUpgradeOrchestrationServiceStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpgradeOrchestrationServiceStateSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the service state of Service Fabric Upgrade Orchestration Service.
     * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally used for support purposes.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/UpgradeOrchestrationServiceState} upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration Service.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~setUpgradeOrchestrationServiceStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpgradeOrchestrationServiceStateSummary}
     */
    setUpgradeOrchestrationServiceState(apiVersion, upgradeOrchestrationServiceState, opts, callback) {
      opts = opts || {};
      let postBody = upgradeOrchestrationServiceState;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling setUpgradeOrchestrationServiceState");
      }
      // verify the required parameter 'upgradeOrchestrationServiceState' is set
      if (upgradeOrchestrationServiceState === undefined || upgradeOrchestrationServiceState === null) {
        throw new Error("Missing the required parameter 'upgradeOrchestrationServiceState' when calling setUpgradeOrchestrationServiceState");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpgradeOrchestrationServiceStateSummary;
      return this.apiClient.callApi(
        '/$/SetUpgradeOrchestrationServiceState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startClusterConfigurationUpgrade operation.
     * @callback module:api/ClusterApi~startClusterConfigurationUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start upgrading the configuration of a Service Fabric standalone cluster.
     * Validate the supplied configuration upgrade parameters and start upgrading the cluster configuration if the parameters are valid.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/ClusterConfigurationUpgradeDescription} clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration upgrade.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~startClusterConfigurationUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startClusterConfigurationUpgrade(apiVersion, clusterConfigurationUpgradeDescription, opts, callback) {
      opts = opts || {};
      let postBody = clusterConfigurationUpgradeDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startClusterConfigurationUpgrade");
      }
      // verify the required parameter 'clusterConfigurationUpgradeDescription' is set
      if (clusterConfigurationUpgradeDescription === undefined || clusterConfigurationUpgradeDescription === null) {
        throw new Error("Missing the required parameter 'clusterConfigurationUpgradeDescription' when calling startClusterConfigurationUpgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/StartClusterConfigurationUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startClusterUpgrade operation.
     * @callback module:api/ClusterApi~startClusterUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start upgrading the code or configuration version of a Service Fabric cluster.
     * Validate the supplied upgrade parameters and start upgrading the code or configuration version of a Service Fabric cluster if the parameters are valid.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/StartClusterUpgradeDescription} startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~startClusterUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startClusterUpgrade(apiVersion, startClusterUpgradeDescription, opts, callback) {
      opts = opts || {};
      let postBody = startClusterUpgradeDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling startClusterUpgrade");
      }
      // verify the required parameter 'startClusterUpgradeDescription' is set
      if (startClusterUpgradeDescription === undefined || startClusterUpgradeDescription === null) {
        throw new Error("Missing the required parameter 'startClusterUpgradeDescription' when calling startClusterUpgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/Upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unprovisionCluster operation.
     * @callback module:api/ClusterApi~unprovisionClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unprovision the code or configuration packages of a Service Fabric cluster.
     * Unprovision the code or configuration packages of a Service Fabric cluster. It is supported to unprovision code and configuration separately.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/UnprovisionFabricDescription} unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~unprovisionClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unprovisionCluster(apiVersion, unprovisionFabricDescription, opts, callback) {
      opts = opts || {};
      let postBody = unprovisionFabricDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling unprovisionCluster");
      }
      // verify the required parameter 'unprovisionFabricDescription' is set
      if (unprovisionFabricDescription === undefined || unprovisionFabricDescription === null) {
        throw new Error("Missing the required parameter 'unprovisionFabricDescription' when calling unprovisionCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/Unprovision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClusterUpgrade operation.
     * @callback module:api/ClusterApi~updateClusterUpgradeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the upgrade parameters of a Service Fabric cluster upgrade.
     * Update the upgrade parameters used during a Service Fabric cluster upgrade.
     * @param {module:model/String} apiVersion The version of this API. This is a required parameter and its value must be \"6.0\".  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. 
     * @param {module:model/UpdateClusterUpgradeDescription} updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 60)] The server timeout for performing the operation in seconds. This specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds.
     * @param {module:api/ClusterApi~updateClusterUpgradeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClusterUpgrade(apiVersion, updateClusterUpgradeDescription, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterUpgradeDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateClusterUpgrade");
      }
      // verify the required parameter 'updateClusterUpgradeDescription' is set
      if (updateClusterUpgradeDescription === undefined || updateClusterUpgradeDescription === null) {
        throw new Error("Missing the required parameter 'updateClusterUpgradeDescription' when calling updateClusterUpgrade");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/$/UpdateUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
