/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistryCredential model module.
 * @module model/RegistryCredential
 * @version 6.1.2
 */
class RegistryCredential {
    /**
     * Constructs a new <code>RegistryCredential</code>.
     * Credential information to connect to container registry.
     * @alias module:model/RegistryCredential
     */
    constructor() { 
        
        RegistryCredential.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegistryCredential</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistryCredential} obj Optional instance to populate.
     * @return {module:model/RegistryCredential} The populated <code>RegistryCredential</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistryCredential();

            if (data.hasOwnProperty('PasswordEncrypted')) {
                obj['PasswordEncrypted'] = ApiClient.convertToType(data['PasswordEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('RegistryPassword')) {
                obj['RegistryPassword'] = ApiClient.convertToType(data['RegistryPassword'], 'String');
            }
            if (data.hasOwnProperty('RegistryUserName')) {
                obj['RegistryUserName'] = ApiClient.convertToType(data['RegistryUserName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistryCredential</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistryCredential</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['RegistryPassword'] && !(typeof data['RegistryPassword'] === 'string' || data['RegistryPassword'] instanceof String)) {
            throw new Error("Expected the field `RegistryPassword` to be a primitive type in the JSON string but got " + data['RegistryPassword']);
        }
        // ensure the json data is a string
        if (data['RegistryUserName'] && !(typeof data['RegistryUserName'] === 'string' || data['RegistryUserName'] instanceof String)) {
            throw new Error("Expected the field `RegistryUserName` to be a primitive type in the JSON string but got " + data['RegistryUserName']);
        }

        return true;
    }


}



/**
 * Indicates that supplied container registry password is encrypted.
 * @member {Boolean} PasswordEncrypted
 */
RegistryCredential.prototype['PasswordEncrypted'] = undefined;

/**
 * The password for supplied username to connect to container registry.
 * @member {String} RegistryPassword
 */
RegistryCredential.prototype['RegistryPassword'] = undefined;

/**
 * The user name to connect to container registry.
 * @member {String} RegistryUserName
 */
RegistryCredential.prototype['RegistryUserName'] = undefined;






export default RegistryCredential;

