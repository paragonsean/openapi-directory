/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileVersion model module.
 * @module model/FileVersion
 * @version 6.1.2
 */
class FileVersion {
    /**
     * Constructs a new <code>FileVersion</code>.
     * Information about the version of image store file.
     * @alias module:model/FileVersion
     */
    constructor() { 
        
        FileVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileVersion} obj Optional instance to populate.
     * @return {module:model/FileVersion} The populated <code>FileVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileVersion();

            if (data.hasOwnProperty('EpochConfigurationNumber')) {
                obj['EpochConfigurationNumber'] = ApiClient.convertToType(data['EpochConfigurationNumber'], 'String');
            }
            if (data.hasOwnProperty('EpochDataLossNumber')) {
                obj['EpochDataLossNumber'] = ApiClient.convertToType(data['EpochDataLossNumber'], 'String');
            }
            if (data.hasOwnProperty('VersionNumber')) {
                obj['VersionNumber'] = ApiClient.convertToType(data['VersionNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EpochConfigurationNumber'] && !(typeof data['EpochConfigurationNumber'] === 'string' || data['EpochConfigurationNumber'] instanceof String)) {
            throw new Error("Expected the field `EpochConfigurationNumber` to be a primitive type in the JSON string but got " + data['EpochConfigurationNumber']);
        }
        // ensure the json data is a string
        if (data['EpochDataLossNumber'] && !(typeof data['EpochDataLossNumber'] === 'string' || data['EpochDataLossNumber'] instanceof String)) {
            throw new Error("Expected the field `EpochDataLossNumber` to be a primitive type in the JSON string but got " + data['EpochDataLossNumber']);
        }
        // ensure the json data is a string
        if (data['VersionNumber'] && !(typeof data['VersionNumber'] === 'string' || data['VersionNumber'] instanceof String)) {
            throw new Error("Expected the field `VersionNumber` to be a primitive type in the JSON string but got " + data['VersionNumber']);
        }

        return true;
    }


}



/**
 * The epoch configuration version number of the image store replica when this file entry was created or updated.
 * @member {String} EpochConfigurationNumber
 */
FileVersion.prototype['EpochConfigurationNumber'] = undefined;

/**
 * The epoch data loss number of image store replica when this file entry was updated or created.
 * @member {String} EpochDataLossNumber
 */
FileVersion.prototype['EpochDataLossNumber'] = undefined;

/**
 * The current image store version number for the file is used in image store for checking whether it need to be updated.
 * @member {String} VersionNumber
 */
FileVersion.prototype['VersionNumber'] = undefined;






export default FileVersion;

