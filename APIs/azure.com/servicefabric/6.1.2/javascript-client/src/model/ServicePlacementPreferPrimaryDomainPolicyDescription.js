/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServicePlacementPolicyType from './ServicePlacementPolicyType';

/**
 * The ServicePlacementPreferPrimaryDomainPolicyDescription model module.
 * @module model/ServicePlacementPreferPrimaryDomainPolicyDescription
 * @version 6.1.2
 */
class ServicePlacementPreferPrimaryDomainPolicyDescription {
    /**
     * Constructs a new <code>ServicePlacementPreferPrimaryDomainPolicyDescription</code>.
     * Describes the policy to be used for placement of a Service Fabric service where the service&#39;s Primary replicas should optimally be placed in a particular domain.  This placement policy is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to indicate that a serviceï¿½s primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this domain due to failures, capacity limits, or other constraints. 
     * @alias module:model/ServicePlacementPreferPrimaryDomainPolicyDescription
     * @extends module:model/ServicePlacementPolicyDescription
     * @implements module:model/ServicePlacementPolicyDescription
     * @param type {module:model/ServicePlacementPolicyType} 
     */
    constructor(type) { 
        ServicePlacementPolicyDescription.initialize(this, type);
        ServicePlacementPreferPrimaryDomainPolicyDescription.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ServicePlacementPreferPrimaryDomainPolicyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePlacementPreferPrimaryDomainPolicyDescription} obj Optional instance to populate.
     * @return {module:model/ServicePlacementPreferPrimaryDomainPolicyDescription} The populated <code>ServicePlacementPreferPrimaryDomainPolicyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePlacementPreferPrimaryDomainPolicyDescription();
            ServicePlacementPolicyDescription.constructFromObject(data, obj);
            ServicePlacementPolicyDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePlacementPreferPrimaryDomainPolicyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePlacementPreferPrimaryDomainPolicyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServicePlacementPreferPrimaryDomainPolicyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DomainName'] && !(typeof data['DomainName'] === 'string' || data['DomainName'] instanceof String)) {
            throw new Error("Expected the field `DomainName` to be a primitive type in the JSON string but got " + data['DomainName']);
        }

        return true;
    }


}

ServicePlacementPreferPrimaryDomainPolicyDescription.RequiredProperties = ["Type"];

/**
 * The name of the domain that should used for placement as per this policy.
 * @member {String} DomainName
 */
ServicePlacementPreferPrimaryDomainPolicyDescription.prototype['DomainName'] = undefined;


// Implement ServicePlacementPolicyDescription interface:
/**
 * @member {module:model/ServicePlacementPolicyType} Type
 */
ServicePlacementPolicyDescription.prototype['Type'] = undefined;




export default ServicePlacementPreferPrimaryDomainPolicyDescription;

