/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthEvaluation from './HealthEvaluation';
import HealthEvaluationKind from './HealthEvaluationKind';
import HealthEvaluationWrapper from './HealthEvaluationWrapper';
import HealthState from './HealthState';

/**
 * The DeployedApplicationHealthEvaluation model module.
 * @module model/DeployedApplicationHealthEvaluation
 * @version 6.1.2
 */
class DeployedApplicationHealthEvaluation {
    /**
     * Constructs a new <code>DeployedApplicationHealthEvaluation</code>.
     * Represents health evaluation for a deployed application, containing information about the data and the algorithm used by the health store to evaluate health. 
     * @alias module:model/DeployedApplicationHealthEvaluation
     * @extends module:model/HealthEvaluation
     * @implements module:model/HealthEvaluation
     * @param kind {module:model/HealthEvaluationKind} 
     */
    constructor(kind) { 
        HealthEvaluation.initialize(this, kind);
        DeployedApplicationHealthEvaluation.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
    }

    /**
     * Constructs a <code>DeployedApplicationHealthEvaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedApplicationHealthEvaluation} obj Optional instance to populate.
     * @return {module:model/DeployedApplicationHealthEvaluation} The populated <code>DeployedApplicationHealthEvaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedApplicationHealthEvaluation();
            HealthEvaluation.constructFromObject(data, obj);
            HealthEvaluation.constructFromObject(data, obj);

            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('UnhealthyEvaluations')) {
                obj['UnhealthyEvaluations'] = ApiClient.convertToType(data['UnhealthyEvaluations'], [HealthEvaluationWrapper]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedApplicationHealthEvaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedApplicationHealthEvaluation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeployedApplicationHealthEvaluation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }
        if (data['UnhealthyEvaluations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UnhealthyEvaluations'])) {
                throw new Error("Expected the field `UnhealthyEvaluations` to be an array in the JSON data but got " + data['UnhealthyEvaluations']);
            }
            // validate the optional field `UnhealthyEvaluations` (array)
            for (const item of data['UnhealthyEvaluations']) {
                HealthEvaluationWrapper.validateJSON(item);
            };
        }

        return true;
    }


}

DeployedApplicationHealthEvaluation.RequiredProperties = ["Kind"];

/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
DeployedApplicationHealthEvaluation.prototype['ApplicationName'] = undefined;

/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
DeployedApplicationHealthEvaluation.prototype['NodeName'] = undefined;

/**
 * List of health evaluations that resulted in the current aggregated health state.
 * @member {Array.<module:model/HealthEvaluationWrapper>} UnhealthyEvaluations
 */
DeployedApplicationHealthEvaluation.prototype['UnhealthyEvaluations'] = undefined;


// Implement HealthEvaluation interface:
/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
HealthEvaluation.prototype['AggregatedHealthState'] = undefined;
/**
 * Description of the health evaluation, which represents a summary of the evaluation process.
 * @member {String} Description
 */
HealthEvaluation.prototype['Description'] = undefined;
/**
 * @member {module:model/HealthEvaluationKind} Kind
 */
HealthEvaluation.prototype['Kind'] = undefined;




export default DeployedApplicationHealthEvaluation;

