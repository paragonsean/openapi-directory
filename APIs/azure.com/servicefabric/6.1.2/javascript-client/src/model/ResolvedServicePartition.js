/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionInformation from './PartitionInformation';
import ResolvedServiceEndpoint from './ResolvedServiceEndpoint';

/**
 * The ResolvedServicePartition model module.
 * @module model/ResolvedServicePartition
 * @version 6.1.2
 */
class ResolvedServicePartition {
    /**
     * Constructs a new <code>ResolvedServicePartition</code>.
     * Information about a service partition and its associated endpoints.
     * @alias module:model/ResolvedServicePartition
     * @param endpoints {Array.<module:model/ResolvedServiceEndpoint>} List of resolved service endpoints of a service partition.
     * @param name {String} The full name of the service with 'fabric:' URI scheme.
     * @param partitionInformation {module:model/PartitionInformation} 
     * @param version {String} The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter.
     */
    constructor(endpoints, name, partitionInformation, version) { 
        
        ResolvedServicePartition.initialize(this, endpoints, name, partitionInformation, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpoints, name, partitionInformation, version) { 
        obj['Endpoints'] = endpoints;
        obj['Name'] = name;
        obj['PartitionInformation'] = partitionInformation;
        obj['Version'] = version;
    }

    /**
     * Constructs a <code>ResolvedServicePartition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResolvedServicePartition} obj Optional instance to populate.
     * @return {module:model/ResolvedServicePartition} The populated <code>ResolvedServicePartition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResolvedServicePartition();

            if (data.hasOwnProperty('Endpoints')) {
                obj['Endpoints'] = ApiClient.convertToType(data['Endpoints'], [ResolvedServiceEndpoint]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PartitionInformation')) {
                obj['PartitionInformation'] = PartitionInformation.constructFromObject(data['PartitionInformation']);
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResolvedServicePartition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResolvedServicePartition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResolvedServicePartition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Endpoints'])) {
                throw new Error("Expected the field `Endpoints` to be an array in the JSON data but got " + data['Endpoints']);
            }
            // validate the optional field `Endpoints` (array)
            for (const item of data['Endpoints']) {
                ResolvedServiceEndpoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `PartitionInformation`
        if (data['PartitionInformation']) { // data not null
          PartitionInformation.validateJSON(data['PartitionInformation']);
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }

        return true;
    }


}

ResolvedServicePartition.RequiredProperties = ["Endpoints", "Name", "PartitionInformation", "Version"];

/**
 * List of resolved service endpoints of a service partition.
 * @member {Array.<module:model/ResolvedServiceEndpoint>} Endpoints
 */
ResolvedServicePartition.prototype['Endpoints'] = undefined;

/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} Name
 */
ResolvedServicePartition.prototype['Name'] = undefined;

/**
 * @member {module:model/PartitionInformation} PartitionInformation
 */
ResolvedServicePartition.prototype['PartitionInformation'] = undefined;

/**
 * The version of this resolved service partition result. This version should be passed in the next time the ResolveService call is made via the PreviousRspVersion query parameter.
 * @member {String} Version
 */
ResolvedServicePartition.prototype['Version'] = undefined;






export default ResolvedServicePartition;

