/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceTypeHealthPolicy model module.
 * @module model/ServiceTypeHealthPolicy
 * @version 6.1.2
 */
class ServiceTypeHealthPolicy {
    /**
     * Constructs a new <code>ServiceTypeHealthPolicy</code>.
     * Represents the health policy used to evaluate the health of services belonging to a service type. 
     * @alias module:model/ServiceTypeHealthPolicy
     */
    constructor() { 
        
        ServiceTypeHealthPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceTypeHealthPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceTypeHealthPolicy} obj Optional instance to populate.
     * @return {module:model/ServiceTypeHealthPolicy} The populated <code>ServiceTypeHealthPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceTypeHealthPolicy();

            if (data.hasOwnProperty('MaxPercentUnhealthyPartitionsPerService')) {
                obj['MaxPercentUnhealthyPartitionsPerService'] = ApiClient.convertToType(data['MaxPercentUnhealthyPartitionsPerService'], 'Number');
            }
            if (data.hasOwnProperty('MaxPercentUnhealthyReplicasPerPartition')) {
                obj['MaxPercentUnhealthyReplicasPerPartition'] = ApiClient.convertToType(data['MaxPercentUnhealthyReplicasPerPartition'], 'Number');
            }
            if (data.hasOwnProperty('MaxPercentUnhealthyServices')) {
                obj['MaxPercentUnhealthyServices'] = ApiClient.convertToType(data['MaxPercentUnhealthyServices'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceTypeHealthPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceTypeHealthPolicy</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100  The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error. If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service. The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero. 
 * @member {Number} MaxPercentUnhealthyPartitionsPerService
 */
ServiceTypeHealthPolicy.prototype['MaxPercentUnhealthyPartitionsPerService'] = undefined;

/**
 * The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error. If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition. The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero. 
 * @member {Number} MaxPercentUnhealthyReplicasPerPartition
 */
ServiceTypeHealthPolicy.prototype['MaxPercentUnhealthyReplicasPerPartition'] = undefined;

/**
 * The maximum maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error. If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type. The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero. 
 * @member {Number} MaxPercentUnhealthyServices
 */
ServiceTypeHealthPolicy.prototype['MaxPercentUnhealthyServices'] = undefined;






export default ServiceTypeHealthPolicy;

