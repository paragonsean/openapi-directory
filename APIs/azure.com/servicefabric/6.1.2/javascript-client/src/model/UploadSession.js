/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadSessionInfo from './UploadSessionInfo';

/**
 * The UploadSession model module.
 * @module model/UploadSession
 * @version 6.1.2
 */
class UploadSession {
    /**
     * Constructs a new <code>UploadSession</code>.
     * Information about a image store upload session
     * @alias module:model/UploadSession
     */
    constructor() { 
        
        UploadSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadSession} obj Optional instance to populate.
     * @return {module:model/UploadSession} The populated <code>UploadSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadSession();

            if (data.hasOwnProperty('UploadSessions')) {
                obj['UploadSessions'] = ApiClient.convertToType(data['UploadSessions'], [UploadSessionInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadSession</code>.
     */
    static validateJSON(data) {
        if (data['UploadSessions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UploadSessions'])) {
                throw new Error("Expected the field `UploadSessions` to be an array in the JSON data but got " + data['UploadSessions']);
            }
            // validate the optional field `UploadSessions` (array)
            for (const item of data['UploadSessions']) {
                UploadSessionInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * When querying upload session by upload session ID, the result contains only one upload session. When querying upload session by image store relative path, the result might contain multiple upload sessions.
 * @member {Array.<module:model/UploadSessionInfo>} UploadSessions
 */
UploadSession.prototype['UploadSessions'] = undefined;






export default UploadSession;

