/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeLoadMetricInformation model module.
 * @module model/NodeLoadMetricInformation
 * @version 6.1.2
 */
class NodeLoadMetricInformation {
    /**
     * Constructs a new <code>NodeLoadMetricInformation</code>.
     * Represents data structure that contains load information for a certain metric on a node.
     * @alias module:model/NodeLoadMetricInformation
     */
    constructor() { 
        
        NodeLoadMetricInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeLoadMetricInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeLoadMetricInformation} obj Optional instance to populate.
     * @return {module:model/NodeLoadMetricInformation} The populated <code>NodeLoadMetricInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeLoadMetricInformation();

            if (data.hasOwnProperty('IsCapacityViolation')) {
                obj['IsCapacityViolation'] = ApiClient.convertToType(data['IsCapacityViolation'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NodeBufferedCapacity')) {
                obj['NodeBufferedCapacity'] = ApiClient.convertToType(data['NodeBufferedCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeCapacity')) {
                obj['NodeCapacity'] = ApiClient.convertToType(data['NodeCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeLoad')) {
                obj['NodeLoad'] = ApiClient.convertToType(data['NodeLoad'], 'String');
            }
            if (data.hasOwnProperty('NodeRemainingBufferedCapacity')) {
                obj['NodeRemainingBufferedCapacity'] = ApiClient.convertToType(data['NodeRemainingBufferedCapacity'], 'String');
            }
            if (data.hasOwnProperty('NodeRemainingCapacity')) {
                obj['NodeRemainingCapacity'] = ApiClient.convertToType(data['NodeRemainingCapacity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeLoadMetricInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeLoadMetricInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NodeBufferedCapacity'] && !(typeof data['NodeBufferedCapacity'] === 'string' || data['NodeBufferedCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeBufferedCapacity` to be a primitive type in the JSON string but got " + data['NodeBufferedCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeCapacity'] && !(typeof data['NodeCapacity'] === 'string' || data['NodeCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeCapacity` to be a primitive type in the JSON string but got " + data['NodeCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeLoad'] && !(typeof data['NodeLoad'] === 'string' || data['NodeLoad'] instanceof String)) {
            throw new Error("Expected the field `NodeLoad` to be a primitive type in the JSON string but got " + data['NodeLoad']);
        }
        // ensure the json data is a string
        if (data['NodeRemainingBufferedCapacity'] && !(typeof data['NodeRemainingBufferedCapacity'] === 'string' || data['NodeRemainingBufferedCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeRemainingBufferedCapacity` to be a primitive type in the JSON string but got " + data['NodeRemainingBufferedCapacity']);
        }
        // ensure the json data is a string
        if (data['NodeRemainingCapacity'] && !(typeof data['NodeRemainingCapacity'] === 'string' || data['NodeRemainingCapacity'] instanceof String)) {
            throw new Error("Expected the field `NodeRemainingCapacity` to be a primitive type in the JSON string but got " + data['NodeRemainingCapacity']);
        }

        return true;
    }


}



/**
 * Indicates if there is a capacity violation for this metric on the node.
 * @member {Boolean} IsCapacityViolation
 */
NodeLoadMetricInformation.prototype['IsCapacityViolation'] = undefined;

/**
 * Name of the metric for which this load information is provided.
 * @member {String} Name
 */
NodeLoadMetricInformation.prototype['Name'] = undefined;

/**
 * The value that indicates the reserved capacity for this metric on the node.
 * @member {String} NodeBufferedCapacity
 */
NodeLoadMetricInformation.prototype['NodeBufferedCapacity'] = undefined;

/**
 * Total capacity on the node for this metric.
 * @member {String} NodeCapacity
 */
NodeLoadMetricInformation.prototype['NodeCapacity'] = undefined;

/**
 * Current load on the node for this metric.
 * @member {String} NodeLoad
 */
NodeLoadMetricInformation.prototype['NodeLoad'] = undefined;

/**
 * The remaining reserved capacity for this metric on the node.
 * @member {String} NodeRemainingBufferedCapacity
 */
NodeLoadMetricInformation.prototype['NodeRemainingBufferedCapacity'] = undefined;

/**
 * The remaining capacity on the node for this metric.
 * @member {String} NodeRemainingCapacity
 */
NodeLoadMetricInformation.prototype['NodeRemainingCapacity'] = undefined;






export default NodeLoadMetricInformation;

