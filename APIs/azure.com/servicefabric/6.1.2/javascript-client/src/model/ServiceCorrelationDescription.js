/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceCorrelationScheme from './ServiceCorrelationScheme';

/**
 * The ServiceCorrelationDescription model module.
 * @module model/ServiceCorrelationDescription
 * @version 6.1.2
 */
class ServiceCorrelationDescription {
    /**
     * Constructs a new <code>ServiceCorrelationDescription</code>.
     * Creates a particular correlation between services.
     * @alias module:model/ServiceCorrelationDescription
     * @param scheme {module:model/ServiceCorrelationScheme} 
     * @param serviceName {String} The full name of the service with 'fabric:' URI scheme.
     */
    constructor(scheme, serviceName) { 
        
        ServiceCorrelationDescription.initialize(this, scheme, serviceName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scheme, serviceName) { 
        obj['Scheme'] = scheme;
        obj['ServiceName'] = serviceName;
    }

    /**
     * Constructs a <code>ServiceCorrelationDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceCorrelationDescription} obj Optional instance to populate.
     * @return {module:model/ServiceCorrelationDescription} The populated <code>ServiceCorrelationDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceCorrelationDescription();

            if (data.hasOwnProperty('Scheme')) {
                obj['Scheme'] = ServiceCorrelationScheme.constructFromObject(data['Scheme']);
            }
            if (data.hasOwnProperty('ServiceName')) {
                obj['ServiceName'] = ApiClient.convertToType(data['ServiceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceCorrelationDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceCorrelationDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceCorrelationDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ServiceName'] && !(typeof data['ServiceName'] === 'string' || data['ServiceName'] instanceof String)) {
            throw new Error("Expected the field `ServiceName` to be a primitive type in the JSON string but got " + data['ServiceName']);
        }

        return true;
    }


}

ServiceCorrelationDescription.RequiredProperties = ["Scheme", "ServiceName"];

/**
 * @member {module:model/ServiceCorrelationScheme} Scheme
 */
ServiceCorrelationDescription.prototype['Scheme'] = undefined;

/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} ServiceName
 */
ServiceCorrelationDescription.prototype['ServiceName'] = undefined;






export default ServiceCorrelationDescription;

