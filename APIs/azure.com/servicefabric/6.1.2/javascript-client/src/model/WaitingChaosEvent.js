/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChaosEvent from './ChaosEvent';
import ChaosEventKind from './ChaosEventKind';

/**
 * The WaitingChaosEvent model module.
 * @module model/WaitingChaosEvent
 * @version 6.1.2
 */
class WaitingChaosEvent {
    /**
     * Constructs a new <code>WaitingChaosEvent</code>.
     * Describes a Chaos event that gets generated when Chaos is waiting for the cluster to become ready for faulting, for example, Chaos may be waiting for the on-going upgrade to finish.
     * @alias module:model/WaitingChaosEvent
     * @extends module:model/ChaosEvent
     * @implements module:model/ChaosEvent
     * @param kind {module:model/ChaosEventKind} 
     * @param timeStampUtc {Date} The UTC timestamp when this Chaos event was generated.
     */
    constructor(kind, timeStampUtc) { 
        ChaosEvent.initialize(this, kind, timeStampUtc);
        WaitingChaosEvent.initialize(this, kind, timeStampUtc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, timeStampUtc) { 
    }

    /**
     * Constructs a <code>WaitingChaosEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WaitingChaosEvent} obj Optional instance to populate.
     * @return {module:model/WaitingChaosEvent} The populated <code>WaitingChaosEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WaitingChaosEvent();
            ChaosEvent.constructFromObject(data, obj);
            ChaosEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WaitingChaosEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WaitingChaosEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WaitingChaosEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Reason'] && !(typeof data['Reason'] === 'string' || data['Reason'] instanceof String)) {
            throw new Error("Expected the field `Reason` to be a primitive type in the JSON string but got " + data['Reason']);
        }

        return true;
    }


}

WaitingChaosEvent.RequiredProperties = ["Kind", "TimeStampUtc"];

/**
 * Describes why the WaitingChaosEvent was generated, for example, due to a cluster upgrade.
 * @member {String} Reason
 */
WaitingChaosEvent.prototype['Reason'] = undefined;


// Implement ChaosEvent interface:
/**
 * @member {module:model/ChaosEventKind} Kind
 */
ChaosEvent.prototype['Kind'] = undefined;
/**
 * The UTC timestamp when this Chaos event was generated.
 * @member {Date} TimeStampUtc
 */
ChaosEvent.prototype['TimeStampUtc'] = undefined;




export default WaitingChaosEvent;

