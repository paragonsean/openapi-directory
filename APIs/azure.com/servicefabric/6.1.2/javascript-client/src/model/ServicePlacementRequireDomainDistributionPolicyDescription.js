/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServicePlacementPolicyType from './ServicePlacementPolicyType';

/**
 * The ServicePlacementRequireDomainDistributionPolicyDescription model module.
 * @module model/ServicePlacementRequireDomainDistributionPolicyDescription
 * @version 6.1.2
 */
class ServicePlacementRequireDomainDistributionPolicyDescription {
    /**
     * Constructs a new <code>ServicePlacementRequireDomainDistributionPolicyDescription</code>.
     * Describes the policy to be used for placement of a Service Fabric service where two replicas from the same partition should never be placed in the same fault or upgrade domain.  While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not desirable then this policy should be set. 
     * @alias module:model/ServicePlacementRequireDomainDistributionPolicyDescription
     * @extends module:model/ServicePlacementPolicyDescription
     * @implements module:model/ServicePlacementPolicyDescription
     * @param type {module:model/ServicePlacementPolicyType} 
     */
    constructor(type) { 
        ServicePlacementPolicyDescription.initialize(this, type);
        ServicePlacementRequireDomainDistributionPolicyDescription.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ServicePlacementRequireDomainDistributionPolicyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePlacementRequireDomainDistributionPolicyDescription} obj Optional instance to populate.
     * @return {module:model/ServicePlacementRequireDomainDistributionPolicyDescription} The populated <code>ServicePlacementRequireDomainDistributionPolicyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePlacementRequireDomainDistributionPolicyDescription();
            ServicePlacementPolicyDescription.constructFromObject(data, obj);
            ServicePlacementPolicyDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePlacementRequireDomainDistributionPolicyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePlacementRequireDomainDistributionPolicyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServicePlacementRequireDomainDistributionPolicyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DomainName'] && !(typeof data['DomainName'] === 'string' || data['DomainName'] instanceof String)) {
            throw new Error("Expected the field `DomainName` to be a primitive type in the JSON string but got " + data['DomainName']);
        }

        return true;
    }


}

ServicePlacementRequireDomainDistributionPolicyDescription.RequiredProperties = ["Type"];

/**
 * The name of the domain that should used for placement as per this policy.
 * @member {String} DomainName
 */
ServicePlacementRequireDomainDistributionPolicyDescription.prototype['DomainName'] = undefined;


// Implement ServicePlacementPolicyDescription interface:
/**
 * @member {module:model/ServicePlacementPolicyType} Type
 */
ServicePlacementPolicyDescription.prototype['Type'] = undefined;




export default ServicePlacementRequireDomainDistributionPolicyDescription;

