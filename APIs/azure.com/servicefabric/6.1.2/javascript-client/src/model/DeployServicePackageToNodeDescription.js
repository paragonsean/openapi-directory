/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PackageSharingPolicyInfo from './PackageSharingPolicyInfo';

/**
 * The DeployServicePackageToNodeDescription model module.
 * @module model/DeployServicePackageToNodeDescription
 * @version 6.1.2
 */
class DeployServicePackageToNodeDescription {
    /**
     * Constructs a new <code>DeployServicePackageToNodeDescription</code>.
     * Defines description for downloading packages associated with a service manifest to image cache on a Service Fabric node. 
     * @alias module:model/DeployServicePackageToNodeDescription
     * @param applicationTypeName {String} The application type name as defined in the application manifest.
     * @param applicationTypeVersion {String} The version of the application type as defined in the application manifest.
     * @param nodeName {String} The name of a Service Fabric node.
     * @param serviceManifestName {String} The name of the service manifest.
     */
    constructor(applicationTypeName, applicationTypeVersion, nodeName, serviceManifestName) { 
        
        DeployServicePackageToNodeDescription.initialize(this, applicationTypeName, applicationTypeVersion, nodeName, serviceManifestName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationTypeName, applicationTypeVersion, nodeName, serviceManifestName) { 
        obj['ApplicationTypeName'] = applicationTypeName;
        obj['ApplicationTypeVersion'] = applicationTypeVersion;
        obj['NodeName'] = nodeName;
        obj['ServiceManifestName'] = serviceManifestName;
    }

    /**
     * Constructs a <code>DeployServicePackageToNodeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployServicePackageToNodeDescription} obj Optional instance to populate.
     * @return {module:model/DeployServicePackageToNodeDescription} The populated <code>DeployServicePackageToNodeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployServicePackageToNodeDescription();

            if (data.hasOwnProperty('ApplicationTypeName')) {
                obj['ApplicationTypeName'] = ApiClient.convertToType(data['ApplicationTypeName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeVersion')) {
                obj['ApplicationTypeVersion'] = ApiClient.convertToType(data['ApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('PackageSharingPolicy')) {
                obj['PackageSharingPolicy'] = ApiClient.convertToType(data['PackageSharingPolicy'], [PackageSharingPolicyInfo]);
            }
            if (data.hasOwnProperty('ServiceManifestName')) {
                obj['ServiceManifestName'] = ApiClient.convertToType(data['ServiceManifestName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployServicePackageToNodeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployServicePackageToNodeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeployServicePackageToNodeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationTypeName'] && !(typeof data['ApplicationTypeName'] === 'string' || data['ApplicationTypeName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeName` to be a primitive type in the JSON string but got " + data['ApplicationTypeName']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeVersion'] && !(typeof data['ApplicationTypeVersion'] === 'string' || data['ApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['ApplicationTypeVersion']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }
        if (data['PackageSharingPolicy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PackageSharingPolicy'])) {
                throw new Error("Expected the field `PackageSharingPolicy` to be an array in the JSON data but got " + data['PackageSharingPolicy']);
            }
            // validate the optional field `PackageSharingPolicy` (array)
            for (const item of data['PackageSharingPolicy']) {
                PackageSharingPolicyInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceManifestName'] && !(typeof data['ServiceManifestName'] === 'string' || data['ServiceManifestName'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got " + data['ServiceManifestName']);
        }

        return true;
    }


}

DeployServicePackageToNodeDescription.RequiredProperties = ["ApplicationTypeName", "ApplicationTypeVersion", "NodeName", "ServiceManifestName"];

/**
 * The application type name as defined in the application manifest.
 * @member {String} ApplicationTypeName
 */
DeployServicePackageToNodeDescription.prototype['ApplicationTypeName'] = undefined;

/**
 * The version of the application type as defined in the application manifest.
 * @member {String} ApplicationTypeVersion
 */
DeployServicePackageToNodeDescription.prototype['ApplicationTypeVersion'] = undefined;

/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
DeployServicePackageToNodeDescription.prototype['NodeName'] = undefined;

/**
 * List of package sharing policy information.
 * @member {Array.<module:model/PackageSharingPolicyInfo>} PackageSharingPolicy
 */
DeployServicePackageToNodeDescription.prototype['PackageSharingPolicy'] = undefined;

/**
 * The name of the service manifest.
 * @member {String} ServiceManifestName
 */
DeployServicePackageToNodeDescription.prototype['ServiceManifestName'] = undefined;






export default DeployServicePackageToNodeDescription;

