/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PartitionHealthStateFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a service should be included as a child of an application in the cluster health chunk. The services are only returned if the parent application matches a filter specified in the cluster health chunk query description. One filter can match zero, one or multiple services, depending on its properties. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceHealthStateFilter {
  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_PARTITION_FILTERS = "PartitionFilters";
  @SerializedName(SERIALIZED_NAME_PARTITION_FILTERS)
  private List<PartitionHealthStateFilter> partitionFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_NAME_FILTER = "ServiceNameFilter";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME_FILTER)
  private String serviceNameFilter;

  public ServiceHealthStateFilter() {
  }

  public ServiceHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the services. It allows selecting services if they match the desired health states. The possible values are integer value of one of the following health states. Only services that match the filter are returned. All services are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the service name is specified. If the filter has default value and service name is specified, the matching service is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches services with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public ServiceHealthStateFilter partitionFilters(List<PartitionHealthStateFilter> partitionFilters) {
    this.partitionFilters = partitionFilters;
    return this;
  }

  public ServiceHealthStateFilter addPartitionFiltersItem(PartitionHealthStateFilter partitionFiltersItem) {
    if (this.partitionFilters == null) {
      this.partitionFilters = new ArrayList<>();
    }
    this.partitionFilters.add(partitionFiltersItem);
    return this;
  }

  /**
   * Defines a list of filters that specify which partitions to be included in the returned cluster health chunk as children of the service. The partitions are returned only if the parent service matches a filter. If the list is empty, no partitions are returned. All the partitions are used to evaluate the parent service aggregated health state, regardless of the input filters. The service filter may specify multiple partition filters. For example, it can specify a filter to return all partitions with health state Error and another filter to always include a partition identified by its partition id. 
   * @return partitionFilters
   */
  @javax.annotation.Nullable
  public List<PartitionHealthStateFilter> getPartitionFilters() {
    return partitionFilters;
  }

  public void setPartitionFilters(List<PartitionHealthStateFilter> partitionFilters) {
    this.partitionFilters = partitionFilters;
  }


  public ServiceHealthStateFilter serviceNameFilter(String serviceNameFilter) {
    this.serviceNameFilter = serviceNameFilter;
    return this;
  }

  /**
   * The name of the service that matches the filter. The filter is applied only to the specified service, if it exists. If the service doesn&#39;t exist, no service is returned in the cluster health chunk based on this filter. If the service exists, it is included as the application&#39;s child if the health state matches the other filter properties. If not specified, all services that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter. 
   * @return serviceNameFilter
   */
  @javax.annotation.Nullable
  public String getServiceNameFilter() {
    return serviceNameFilter;
  }

  public void setServiceNameFilter(String serviceNameFilter) {
    this.serviceNameFilter = serviceNameFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceHealthStateFilter serviceHealthStateFilter = (ServiceHealthStateFilter) o;
    return Objects.equals(this.healthStateFilter, serviceHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.partitionFilters, serviceHealthStateFilter.partitionFilters) &&
        Objects.equals(this.serviceNameFilter, serviceHealthStateFilter.serviceNameFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStateFilter, partitionFilters, serviceNameFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceHealthStateFilter {\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    partitionFilters: ").append(toIndentedString(partitionFilters)).append("\n");
    sb.append("    serviceNameFilter: ").append(toIndentedString(serviceNameFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthStateFilter");
    openapiFields.add("PartitionFilters");
    openapiFields.add("ServiceNameFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceHealthStateFilter is not found in the empty JSON string", ServiceHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("PartitionFilters") != null && !jsonObj.get("PartitionFilters").isJsonNull()) {
        JsonArray jsonArraypartitionFilters = jsonObj.getAsJsonArray("PartitionFilters");
        if (jsonArraypartitionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PartitionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PartitionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("PartitionFilters").toString()));
          }

          // validate the optional field `PartitionFilters` (array)
          for (int i = 0; i < jsonArraypartitionFilters.size(); i++) {
            PartitionHealthStateFilter.validateJsonElement(jsonArraypartitionFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("ServiceNameFilter") != null && !jsonObj.get("ServiceNameFilter").isJsonNull()) && !jsonObj.get("ServiceNameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceNameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceNameFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, ServiceHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to ServiceHealthStateFilter
   */
  public static ServiceHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceHealthStateFilter.class);
  }

  /**
   * Convert an instance of ServiceHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

