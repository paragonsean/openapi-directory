/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServicePlacementPolicyDescription;
import org.openapitools.client.model.ServiceTypeExtensionDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a service type defined in the service manifest of a provisioned application type. The properties the the ones defined in the service manifest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceTypeDescription {
  public static final String SERIALIZED_NAME_EXTENSIONS = "Extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<ServiceTypeExtensionDescription> extensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_STATEFUL = "IsStateful";
  @SerializedName(SERIALIZED_NAME_IS_STATEFUL)
  private Boolean isStateful;

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  protected ServiceKind kind;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "PlacementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private String placementConstraints;

  public static final String SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES = "ServicePlacementPolicies";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES)
  private List<ServicePlacementPolicyDescription> servicePlacementPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public ServiceTypeDescription() {
    this.kind = this.getClass().getSimpleName();
  }

  public ServiceTypeDescription extensions(List<ServiceTypeExtensionDescription> extensions) {
    this.extensions = extensions;
    return this;
  }

  public ServiceTypeDescription addExtensionsItem(ServiceTypeExtensionDescription extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * List of service type extensions.
   * @return extensions
   */
  @javax.annotation.Nullable
  public List<ServiceTypeExtensionDescription> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<ServiceTypeExtensionDescription> extensions) {
    this.extensions = extensions;
  }


  public ServiceTypeDescription isStateful(Boolean isStateful) {
    this.isStateful = isStateful;
    return this;
  }

  /**
   * Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.
   * @return isStateful
   */
  @javax.annotation.Nullable
  public Boolean getIsStateful() {
    return isStateful;
  }

  public void setIsStateful(Boolean isStateful) {
    this.isStateful = isStateful;
  }


  public ServiceTypeDescription kind(ServiceKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public ServiceKind getKind() {
    return kind;
  }

  public void setKind(ServiceKind kind) {
    this.kind = kind;
  }


  public ServiceTypeDescription placementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * The placement constraint to be used when instantiating this service in a Service Fabric cluster.
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public String getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public ServiceTypeDescription servicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
    return this;
  }

  public ServiceTypeDescription addServicePlacementPoliciesItem(ServicePlacementPolicyDescription servicePlacementPoliciesItem) {
    if (this.servicePlacementPolicies == null) {
      this.servicePlacementPolicies = new ArrayList<>();
    }
    this.servicePlacementPolicies.add(servicePlacementPoliciesItem);
    return this;
  }

  /**
   * List of service placement policy descriptions.
   * @return servicePlacementPolicies
   */
  @javax.annotation.Nullable
  public List<ServicePlacementPolicyDescription> getServicePlacementPolicies() {
    return servicePlacementPolicies;
  }

  public void setServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
  }


  public ServiceTypeDescription serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Name of the service type as specified in the service manifest.
   * @return serviceTypeName
   */
  @javax.annotation.Nullable
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTypeDescription serviceTypeDescription = (ServiceTypeDescription) o;
    return Objects.equals(this.extensions, serviceTypeDescription.extensions) &&
        Objects.equals(this.isStateful, serviceTypeDescription.isStateful) &&
        Objects.equals(this.kind, serviceTypeDescription.kind) &&
        Objects.equals(this.placementConstraints, serviceTypeDescription.placementConstraints) &&
        Objects.equals(this.servicePlacementPolicies, serviceTypeDescription.servicePlacementPolicies) &&
        Objects.equals(this.serviceTypeName, serviceTypeDescription.serviceTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensions, isStateful, kind, placementConstraints, servicePlacementPolicies, serviceTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTypeDescription {\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    isStateful: ").append(toIndentedString(isStateful)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    servicePlacementPolicies: ").append(toIndentedString(servicePlacementPolicies)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Extensions");
    openapiFields.add("IsStateful");
    openapiFields.add("Kind");
    openapiFields.add("PlacementConstraints");
    openapiFields.add("ServicePlacementPolicies");
    openapiFields.add("ServiceTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceTypeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceTypeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTypeDescription is not found in the empty JSON string", ServiceTypeDescription.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "StatefulServiceTypeDescription":
          StatefulServiceTypeDescription.validateJsonElement(jsonElement);
          break;
        case "StatelessServiceTypeDescription":
          StatelessServiceTypeDescription.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ServiceTypeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceTypeDescription
   * @throws IOException if the JSON string is invalid with respect to ServiceTypeDescription
   */
  public static ServiceTypeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTypeDescription.class);
  }

  /**
   * Convert an instance of ServiceTypeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

