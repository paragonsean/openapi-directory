/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Epoch;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.PartitionInformation;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServicePartitionInfo;
import org.openapitools.client.model.ServicePartitionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a partition of a stateful Service Fabric service..
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatefulServicePartitionInfo extends ServicePartitionInfo {
  public static final String SERIALIZED_NAME_CURRENT_CONFIGURATION_EPOCH = "CurrentConfigurationEpoch";
  @SerializedName(SERIALIZED_NAME_CURRENT_CONFIGURATION_EPOCH)
  private Epoch currentConfigurationEpoch;

  public static final String SERIALIZED_NAME_LAST_QUORUM_LOSS_DURATION = "LastQuorumLossDuration";
  @SerializedName(SERIALIZED_NAME_LAST_QUORUM_LOSS_DURATION)
  private String lastQuorumLossDuration;

  public static final String SERIALIZED_NAME_MIN_REPLICA_SET_SIZE = "MinReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_MIN_REPLICA_SET_SIZE)
  private Long minReplicaSetSize;

  public static final String SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE = "TargetReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE)
  private Long targetReplicaSetSize;

  public StatefulServicePartitionInfo() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public StatefulServicePartitionInfo currentConfigurationEpoch(Epoch currentConfigurationEpoch) {
    this.currentConfigurationEpoch = currentConfigurationEpoch;
    return this;
  }

  /**
   * Get currentConfigurationEpoch
   * @return currentConfigurationEpoch
   */
  @javax.annotation.Nullable
  public Epoch getCurrentConfigurationEpoch() {
    return currentConfigurationEpoch;
  }

  public void setCurrentConfigurationEpoch(Epoch currentConfigurationEpoch) {
    this.currentConfigurationEpoch = currentConfigurationEpoch;
  }


  public StatefulServicePartitionInfo lastQuorumLossDuration(String lastQuorumLossDuration) {
    this.lastQuorumLossDuration = lastQuorumLossDuration;
    return this;
  }

  /**
   * The duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601 format for specifying the duration.
   * @return lastQuorumLossDuration
   */
  @javax.annotation.Nullable
  public String getLastQuorumLossDuration() {
    return lastQuorumLossDuration;
  }

  public void setLastQuorumLossDuration(String lastQuorumLossDuration) {
    this.lastQuorumLossDuration = lastQuorumLossDuration;
  }


  public StatefulServicePartitionInfo minReplicaSetSize(Long minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
    return this;
  }

  /**
   * The minimum replica set size as a number.
   * @return minReplicaSetSize
   */
  @javax.annotation.Nullable
  public Long getMinReplicaSetSize() {
    return minReplicaSetSize;
  }

  public void setMinReplicaSetSize(Long minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
  }


  public StatefulServicePartitionInfo targetReplicaSetSize(Long targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
    return this;
  }

  /**
   * The target replica set size as a number.
   * @return targetReplicaSetSize
   */
  @javax.annotation.Nullable
  public Long getTargetReplicaSetSize() {
    return targetReplicaSetSize;
  }

  public void setTargetReplicaSetSize(Long targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatefulServicePartitionInfo statefulServicePartitionInfo = (StatefulServicePartitionInfo) o;
    return Objects.equals(this.currentConfigurationEpoch, statefulServicePartitionInfo.currentConfigurationEpoch) &&
        Objects.equals(this.lastQuorumLossDuration, statefulServicePartitionInfo.lastQuorumLossDuration) &&
        Objects.equals(this.minReplicaSetSize, statefulServicePartitionInfo.minReplicaSetSize) &&
        Objects.equals(this.targetReplicaSetSize, statefulServicePartitionInfo.targetReplicaSetSize) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentConfigurationEpoch, lastQuorumLossDuration, minReplicaSetSize, targetReplicaSetSize, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatefulServicePartitionInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currentConfigurationEpoch: ").append(toIndentedString(currentConfigurationEpoch)).append("\n");
    sb.append("    lastQuorumLossDuration: ").append(toIndentedString(lastQuorumLossDuration)).append("\n");
    sb.append("    minReplicaSetSize: ").append(toIndentedString(minReplicaSetSize)).append("\n");
    sb.append("    targetReplicaSetSize: ").append(toIndentedString(targetReplicaSetSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthState");
    openapiFields.add("PartitionInformation");
    openapiFields.add("PartitionStatus");
    openapiFields.add("ServiceKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatefulServicePartitionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatefulServicePartitionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatefulServicePartitionInfo is not found in the empty JSON string", StatefulServicePartitionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatefulServicePartitionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatefulServicePartitionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatefulServicePartitionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatefulServicePartitionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatefulServicePartitionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatefulServicePartitionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatefulServicePartitionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StatefulServicePartitionInfo>() {
           @Override
           public void write(JsonWriter out, StatefulServicePartitionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatefulServicePartitionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatefulServicePartitionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatefulServicePartitionInfo
   * @throws IOException if the JSON string is invalid with respect to StatefulServicePartitionInfo
   */
  public static StatefulServicePartitionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatefulServicePartitionInfo.class);
  }

  /**
   * Convert an instance of StatefulServicePartitionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

