/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReplicaRole;
import org.openapitools.client.model.ReplicatorQueueStatus;
import org.openapitools.client.model.ReplicatorStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides statistics about the Service Fabric Replicator, when it is functioning in a ActiveSecondary role.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecondaryReplicatorStatus extends ReplicatorStatus {
  public static final String SERIALIZED_NAME_COPY_QUEUE_STATUS = "CopyQueueStatus";
  @SerializedName(SERIALIZED_NAME_COPY_QUEUE_STATUS)
  private ReplicatorQueueStatus copyQueueStatus;

  public static final String SERIALIZED_NAME_IS_IN_BUILD = "IsInBuild";
  @SerializedName(SERIALIZED_NAME_IS_IN_BUILD)
  private Boolean isInBuild;

  public static final String SERIALIZED_NAME_LAST_ACKNOWLEDGEMENT_SENT_TIME_UTC = "LastAcknowledgementSentTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_ACKNOWLEDGEMENT_SENT_TIME_UTC)
  private OffsetDateTime lastAcknowledgementSentTimeUtc;

  public static final String SERIALIZED_NAME_LAST_COPY_OPERATION_RECEIVED_TIME_UTC = "LastCopyOperationReceivedTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_COPY_OPERATION_RECEIVED_TIME_UTC)
  private OffsetDateTime lastCopyOperationReceivedTimeUtc;

  public static final String SERIALIZED_NAME_LAST_REPLICATION_OPERATION_RECEIVED_TIME_UTC = "LastReplicationOperationReceivedTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_REPLICATION_OPERATION_RECEIVED_TIME_UTC)
  private OffsetDateTime lastReplicationOperationReceivedTimeUtc;

  public static final String SERIALIZED_NAME_REPLICATION_QUEUE_STATUS = "ReplicationQueueStatus";
  @SerializedName(SERIALIZED_NAME_REPLICATION_QUEUE_STATUS)
  private ReplicatorQueueStatus replicationQueueStatus;

  public SecondaryReplicatorStatus() {
    this.kind = this.getClass().getSimpleName();
  }

  public SecondaryReplicatorStatus copyQueueStatus(ReplicatorQueueStatus copyQueueStatus) {
    this.copyQueueStatus = copyQueueStatus;
    return this;
  }

  /**
   * Get copyQueueStatus
   * @return copyQueueStatus
   */
  @javax.annotation.Nullable
  public ReplicatorQueueStatus getCopyQueueStatus() {
    return copyQueueStatus;
  }

  public void setCopyQueueStatus(ReplicatorQueueStatus copyQueueStatus) {
    this.copyQueueStatus = copyQueueStatus;
  }


  public SecondaryReplicatorStatus isInBuild(Boolean isInBuild) {
    this.isInBuild = isInBuild;
    return this;
  }

  /**
   * Value that indicates whether the replica is currently being built.
   * @return isInBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsInBuild() {
    return isInBuild;
  }

  public void setIsInBuild(Boolean isInBuild) {
    this.isInBuild = isInBuild;
  }


  public SecondaryReplicatorStatus lastAcknowledgementSentTimeUtc(OffsetDateTime lastAcknowledgementSentTimeUtc) {
    this.lastAcknowledgementSentTimeUtc = lastAcknowledgementSentTimeUtc;
    return this;
  }

  /**
   * The last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator. UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent. 
   * @return lastAcknowledgementSentTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAcknowledgementSentTimeUtc() {
    return lastAcknowledgementSentTimeUtc;
  }

  public void setLastAcknowledgementSentTimeUtc(OffsetDateTime lastAcknowledgementSentTimeUtc) {
    this.lastAcknowledgementSentTimeUtc = lastAcknowledgementSentTimeUtc;
  }


  public SecondaryReplicatorStatus lastCopyOperationReceivedTimeUtc(OffsetDateTime lastCopyOperationReceivedTimeUtc) {
    this.lastCopyOperationReceivedTimeUtc = lastCopyOperationReceivedTimeUtc;
    return this;
  }

  /**
   * The last time-stamp (UTC) at which a copy operation was received from the primary. UTC 0 represents an invalid value, indicating that a copy operation message was never received. 
   * @return lastCopyOperationReceivedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCopyOperationReceivedTimeUtc() {
    return lastCopyOperationReceivedTimeUtc;
  }

  public void setLastCopyOperationReceivedTimeUtc(OffsetDateTime lastCopyOperationReceivedTimeUtc) {
    this.lastCopyOperationReceivedTimeUtc = lastCopyOperationReceivedTimeUtc;
  }


  public SecondaryReplicatorStatus lastReplicationOperationReceivedTimeUtc(OffsetDateTime lastReplicationOperationReceivedTimeUtc) {
    this.lastReplicationOperationReceivedTimeUtc = lastReplicationOperationReceivedTimeUtc;
    return this;
  }

  /**
   * The last time-stamp (UTC) at which a replication operation was received from the primary. UTC 0 represents an invalid value, indicating that a replication operation message was never received. 
   * @return lastReplicationOperationReceivedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReplicationOperationReceivedTimeUtc() {
    return lastReplicationOperationReceivedTimeUtc;
  }

  public void setLastReplicationOperationReceivedTimeUtc(OffsetDateTime lastReplicationOperationReceivedTimeUtc) {
    this.lastReplicationOperationReceivedTimeUtc = lastReplicationOperationReceivedTimeUtc;
  }


  public SecondaryReplicatorStatus replicationQueueStatus(ReplicatorQueueStatus replicationQueueStatus) {
    this.replicationQueueStatus = replicationQueueStatus;
    return this;
  }

  /**
   * Get replicationQueueStatus
   * @return replicationQueueStatus
   */
  @javax.annotation.Nullable
  public ReplicatorQueueStatus getReplicationQueueStatus() {
    return replicationQueueStatus;
  }

  public void setReplicationQueueStatus(ReplicatorQueueStatus replicationQueueStatus) {
    this.replicationQueueStatus = replicationQueueStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecondaryReplicatorStatus secondaryReplicatorStatus = (SecondaryReplicatorStatus) o;
    return Objects.equals(this.copyQueueStatus, secondaryReplicatorStatus.copyQueueStatus) &&
        Objects.equals(this.isInBuild, secondaryReplicatorStatus.isInBuild) &&
        Objects.equals(this.lastAcknowledgementSentTimeUtc, secondaryReplicatorStatus.lastAcknowledgementSentTimeUtc) &&
        Objects.equals(this.lastCopyOperationReceivedTimeUtc, secondaryReplicatorStatus.lastCopyOperationReceivedTimeUtc) &&
        Objects.equals(this.lastReplicationOperationReceivedTimeUtc, secondaryReplicatorStatus.lastReplicationOperationReceivedTimeUtc) &&
        Objects.equals(this.replicationQueueStatus, secondaryReplicatorStatus.replicationQueueStatus) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyQueueStatus, isInBuild, lastAcknowledgementSentTimeUtc, lastCopyOperationReceivedTimeUtc, lastReplicationOperationReceivedTimeUtc, replicationQueueStatus, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecondaryReplicatorStatus {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    copyQueueStatus: ").append(toIndentedString(copyQueueStatus)).append("\n");
    sb.append("    isInBuild: ").append(toIndentedString(isInBuild)).append("\n");
    sb.append("    lastAcknowledgementSentTimeUtc: ").append(toIndentedString(lastAcknowledgementSentTimeUtc)).append("\n");
    sb.append("    lastCopyOperationReceivedTimeUtc: ").append(toIndentedString(lastCopyOperationReceivedTimeUtc)).append("\n");
    sb.append("    lastReplicationOperationReceivedTimeUtc: ").append(toIndentedString(lastReplicationOperationReceivedTimeUtc)).append("\n");
    sb.append("    replicationQueueStatus: ").append(toIndentedString(replicationQueueStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Kind");
    openapiFields.add("CopyQueueStatus");
    openapiFields.add("IsInBuild");
    openapiFields.add("LastAcknowledgementSentTimeUtc");
    openapiFields.add("LastCopyOperationReceivedTimeUtc");
    openapiFields.add("LastReplicationOperationReceivedTimeUtc");
    openapiFields.add("ReplicationQueueStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecondaryReplicatorStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecondaryReplicatorStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecondaryReplicatorStatus is not found in the empty JSON string", SecondaryReplicatorStatus.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "SecondaryActiveReplicatorStatus":
          SecondaryActiveReplicatorStatus.validateJsonElement(jsonElement);
          break;
        case "SecondaryIdleReplicatorStatus":
          SecondaryIdleReplicatorStatus.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of SecondaryReplicatorStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecondaryReplicatorStatus
   * @throws IOException if the JSON string is invalid with respect to SecondaryReplicatorStatus
   */
  public static SecondaryReplicatorStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecondaryReplicatorStatus.class);
  }

  /**
   * Convert an instance of SecondaryReplicatorStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

