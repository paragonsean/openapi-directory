/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodePackageEntryPoint;
import org.openapitools.client.model.DeploymentStatus;
import org.openapitools.client.model.HostIsolationMode;
import org.openapitools.client.model.HostType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about code package deployed on a Service Fabric node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedCodePackageInfo {
  public static final String SERIALIZED_NAME_HOST_ISOLATION_MODE = "HostIsolationMode";
  @SerializedName(SERIALIZED_NAME_HOST_ISOLATION_MODE)
  private HostIsolationMode hostIsolationMode;

  public static final String SERIALIZED_NAME_HOST_TYPE = "HostType";
  @SerializedName(SERIALIZED_NAME_HOST_TYPE)
  private HostType hostType;

  public static final String SERIALIZED_NAME_MAIN_ENTRY_POINT = "MainEntryPoint";
  @SerializedName(SERIALIZED_NAME_MAIN_ENTRY_POINT)
  private CodePackageEntryPoint mainEntryPoint;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUN_FREQUENCY_INTERVAL = "RunFrequencyInterval";
  @SerializedName(SERIALIZED_NAME_RUN_FREQUENCY_INTERVAL)
  private String runFrequencyInterval;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID = "ServicePackageActivationId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID)
  private String servicePackageActivationId;

  public static final String SERIALIZED_NAME_SETUP_ENTRY_POINT = "SetupEntryPoint";
  @SerializedName(SERIALIZED_NAME_SETUP_ENTRY_POINT)
  private CodePackageEntryPoint setupEntryPoint;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DeploymentStatus status;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public DeployedCodePackageInfo() {
  }

  public DeployedCodePackageInfo hostIsolationMode(HostIsolationMode hostIsolationMode) {
    this.hostIsolationMode = hostIsolationMode;
    return this;
  }

  /**
   * Get hostIsolationMode
   * @return hostIsolationMode
   */
  @javax.annotation.Nullable
  public HostIsolationMode getHostIsolationMode() {
    return hostIsolationMode;
  }

  public void setHostIsolationMode(HostIsolationMode hostIsolationMode) {
    this.hostIsolationMode = hostIsolationMode;
  }


  public DeployedCodePackageInfo hostType(HostType hostType) {
    this.hostType = hostType;
    return this;
  }

  /**
   * Get hostType
   * @return hostType
   */
  @javax.annotation.Nullable
  public HostType getHostType() {
    return hostType;
  }

  public void setHostType(HostType hostType) {
    this.hostType = hostType;
  }


  public DeployedCodePackageInfo mainEntryPoint(CodePackageEntryPoint mainEntryPoint) {
    this.mainEntryPoint = mainEntryPoint;
    return this;
  }

  /**
   * Get mainEntryPoint
   * @return mainEntryPoint
   */
  @javax.annotation.Nullable
  public CodePackageEntryPoint getMainEntryPoint() {
    return mainEntryPoint;
  }

  public void setMainEntryPoint(CodePackageEntryPoint mainEntryPoint) {
    this.mainEntryPoint = mainEntryPoint;
  }


  public DeployedCodePackageInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the code package defined in the service manifest.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeployedCodePackageInfo runFrequencyInterval(String runFrequencyInterval) {
    this.runFrequencyInterval = runFrequencyInterval;
    return this;
  }

  /**
   * The interval at which code package is run. This is used for periodic code package.
   * @return runFrequencyInterval
   */
  @javax.annotation.Nullable
  public String getRunFrequencyInterval() {
    return runFrequencyInterval;
  }

  public void setRunFrequencyInterval(String runFrequencyInterval) {
    this.runFrequencyInterval = runFrequencyInterval;
  }


  public DeployedCodePackageInfo serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * The name of the service manifest.
   * @return serviceManifestName
   */
  @javax.annotation.Nullable
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public DeployedCodePackageInfo servicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
    return this;
  }

  /**
   * The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is &#39;SharedProcess&#39; (or if it is not specified, in which case it defaults to &#39;SharedProcess&#39;), then value of ServicePackageActivationId is always an empty string. 
   * @return servicePackageActivationId
   */
  @javax.annotation.Nullable
  public String getServicePackageActivationId() {
    return servicePackageActivationId;
  }

  public void setServicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
  }


  public DeployedCodePackageInfo setupEntryPoint(CodePackageEntryPoint setupEntryPoint) {
    this.setupEntryPoint = setupEntryPoint;
    return this;
  }

  /**
   * Get setupEntryPoint
   * @return setupEntryPoint
   */
  @javax.annotation.Nullable
  public CodePackageEntryPoint getSetupEntryPoint() {
    return setupEntryPoint;
  }

  public void setSetupEntryPoint(CodePackageEntryPoint setupEntryPoint) {
    this.setupEntryPoint = setupEntryPoint;
  }


  public DeployedCodePackageInfo status(DeploymentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DeploymentStatus getStatus() {
    return status;
  }

  public void setStatus(DeploymentStatus status) {
    this.status = status;
  }


  public DeployedCodePackageInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the code package specified in service manifest.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedCodePackageInfo deployedCodePackageInfo = (DeployedCodePackageInfo) o;
    return Objects.equals(this.hostIsolationMode, deployedCodePackageInfo.hostIsolationMode) &&
        Objects.equals(this.hostType, deployedCodePackageInfo.hostType) &&
        Objects.equals(this.mainEntryPoint, deployedCodePackageInfo.mainEntryPoint) &&
        Objects.equals(this.name, deployedCodePackageInfo.name) &&
        Objects.equals(this.runFrequencyInterval, deployedCodePackageInfo.runFrequencyInterval) &&
        Objects.equals(this.serviceManifestName, deployedCodePackageInfo.serviceManifestName) &&
        Objects.equals(this.servicePackageActivationId, deployedCodePackageInfo.servicePackageActivationId) &&
        Objects.equals(this.setupEntryPoint, deployedCodePackageInfo.setupEntryPoint) &&
        Objects.equals(this.status, deployedCodePackageInfo.status) &&
        Objects.equals(this.version, deployedCodePackageInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostIsolationMode, hostType, mainEntryPoint, name, runFrequencyInterval, serviceManifestName, servicePackageActivationId, setupEntryPoint, status, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedCodePackageInfo {\n");
    sb.append("    hostIsolationMode: ").append(toIndentedString(hostIsolationMode)).append("\n");
    sb.append("    hostType: ").append(toIndentedString(hostType)).append("\n");
    sb.append("    mainEntryPoint: ").append(toIndentedString(mainEntryPoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runFrequencyInterval: ").append(toIndentedString(runFrequencyInterval)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    servicePackageActivationId: ").append(toIndentedString(servicePackageActivationId)).append("\n");
    sb.append("    setupEntryPoint: ").append(toIndentedString(setupEntryPoint)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostIsolationMode");
    openapiFields.add("HostType");
    openapiFields.add("MainEntryPoint");
    openapiFields.add("Name");
    openapiFields.add("RunFrequencyInterval");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServicePackageActivationId");
    openapiFields.add("SetupEntryPoint");
    openapiFields.add("Status");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedCodePackageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedCodePackageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedCodePackageInfo is not found in the empty JSON string", DeployedCodePackageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedCodePackageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedCodePackageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HostIsolationMode`
      if (jsonObj.get("HostIsolationMode") != null && !jsonObj.get("HostIsolationMode").isJsonNull()) {
        HostIsolationMode.validateJsonElement(jsonObj.get("HostIsolationMode"));
      }
      // validate the optional field `HostType`
      if (jsonObj.get("HostType") != null && !jsonObj.get("HostType").isJsonNull()) {
        HostType.validateJsonElement(jsonObj.get("HostType"));
      }
      // validate the optional field `MainEntryPoint`
      if (jsonObj.get("MainEntryPoint") != null && !jsonObj.get("MainEntryPoint").isJsonNull()) {
        CodePackageEntryPoint.validateJsonElement(jsonObj.get("MainEntryPoint"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RunFrequencyInterval") != null && !jsonObj.get("RunFrequencyInterval").isJsonNull()) && !jsonObj.get("RunFrequencyInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RunFrequencyInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RunFrequencyInterval").toString()));
      }
      if ((jsonObj.get("ServiceManifestName") != null && !jsonObj.get("ServiceManifestName").isJsonNull()) && !jsonObj.get("ServiceManifestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestName").toString()));
      }
      if ((jsonObj.get("ServicePackageActivationId") != null && !jsonObj.get("ServicePackageActivationId").isJsonNull()) && !jsonObj.get("ServicePackageActivationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServicePackageActivationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServicePackageActivationId").toString()));
      }
      // validate the optional field `SetupEntryPoint`
      if (jsonObj.get("SetupEntryPoint") != null && !jsonObj.get("SetupEntryPoint").isJsonNull()) {
        CodePackageEntryPoint.validateJsonElement(jsonObj.get("SetupEntryPoint"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DeploymentStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedCodePackageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedCodePackageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedCodePackageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedCodePackageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedCodePackageInfo>() {
           @Override
           public void write(JsonWriter out, DeployedCodePackageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedCodePackageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedCodePackageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedCodePackageInfo
   * @throws IOException if the JSON string is invalid with respect to DeployedCodePackageInfo
   */
  public static DeployedCodePackageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedCodePackageInfo.class);
  }

  /**
   * Convert an instance of DeployedCodePackageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

