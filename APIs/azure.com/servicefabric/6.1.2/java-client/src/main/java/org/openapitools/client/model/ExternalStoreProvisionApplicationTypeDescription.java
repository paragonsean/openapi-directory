/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProvisionApplicationTypeDescriptionBase;
import org.openapitools.client.model.ProvisionApplicationTypeKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the operation to register or provision an application type using an application package from an external store instead of a package uploaded to the Service Fabric image store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalStoreProvisionApplicationTypeDescription extends ProvisionApplicationTypeDescriptionBase {
  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_DOWNLOAD_URI = "ApplicationPackageDownloadUri";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_DOWNLOAD_URI)
  private String applicationPackageDownloadUri;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_NAME = "ApplicationTypeName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_NAME)
  private String applicationTypeName;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_VERSION = "ApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_VERSION)
  private String applicationTypeVersion;

  public ExternalStoreProvisionApplicationTypeDescription() {
    this.kind = this.getClass().getSimpleName();
  }

  public ExternalStoreProvisionApplicationTypeDescription applicationPackageDownloadUri(String applicationPackageDownloadUri) {
    this.applicationPackageDownloadUri = applicationPackageDownloadUri;
    return this;
  }

  /**
   * The path to the &#39;.sfpkg&#39; application package from where the application package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.
   * @return applicationPackageDownloadUri
   */
  @javax.annotation.Nullable
  public String getApplicationPackageDownloadUri() {
    return applicationPackageDownloadUri;
  }

  public void setApplicationPackageDownloadUri(String applicationPackageDownloadUri) {
    this.applicationPackageDownloadUri = applicationPackageDownloadUri;
  }


  public ExternalStoreProvisionApplicationTypeDescription applicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
    return this;
  }

  /**
   * The application type name represents the name of the application type found in the application manifest.
   * @return applicationTypeName
   */
  @javax.annotation.Nullable
  public String getApplicationTypeName() {
    return applicationTypeName;
  }

  public void setApplicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
  }


  public ExternalStoreProvisionApplicationTypeDescription applicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
    return this;
  }

  /**
   * The application type version represents the version of the application type found in the application manifest.
   * @return applicationTypeVersion
   */
  @javax.annotation.Nullable
  public String getApplicationTypeVersion() {
    return applicationTypeVersion;
  }

  public void setApplicationTypeVersion(String applicationTypeVersion) {
    this.applicationTypeVersion = applicationTypeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalStoreProvisionApplicationTypeDescription externalStoreProvisionApplicationTypeDescription = (ExternalStoreProvisionApplicationTypeDescription) o;
    return Objects.equals(this.applicationPackageDownloadUri, externalStoreProvisionApplicationTypeDescription.applicationPackageDownloadUri) &&
        Objects.equals(this.applicationTypeName, externalStoreProvisionApplicationTypeDescription.applicationTypeName) &&
        Objects.equals(this.applicationTypeVersion, externalStoreProvisionApplicationTypeDescription.applicationTypeVersion) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPackageDownloadUri, applicationTypeName, applicationTypeVersion, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalStoreProvisionApplicationTypeDescription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    applicationPackageDownloadUri: ").append(toIndentedString(applicationPackageDownloadUri)).append("\n");
    sb.append("    applicationTypeName: ").append(toIndentedString(applicationTypeName)).append("\n");
    sb.append("    applicationTypeVersion: ").append(toIndentedString(applicationTypeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Async");
    openapiFields.add("Kind");
    openapiFields.add("ApplicationPackageDownloadUri");
    openapiFields.add("ApplicationTypeName");
    openapiFields.add("ApplicationTypeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Async");
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalStoreProvisionApplicationTypeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalStoreProvisionApplicationTypeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalStoreProvisionApplicationTypeDescription is not found in the empty JSON string", ExternalStoreProvisionApplicationTypeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalStoreProvisionApplicationTypeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalStoreProvisionApplicationTypeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExternalStoreProvisionApplicationTypeDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalStoreProvisionApplicationTypeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalStoreProvisionApplicationTypeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalStoreProvisionApplicationTypeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalStoreProvisionApplicationTypeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalStoreProvisionApplicationTypeDescription>() {
           @Override
           public void write(JsonWriter out, ExternalStoreProvisionApplicationTypeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalStoreProvisionApplicationTypeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalStoreProvisionApplicationTypeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalStoreProvisionApplicationTypeDescription
   * @throws IOException if the JSON string is invalid with respect to ExternalStoreProvisionApplicationTypeDescription
   */
  public static ExternalStoreProvisionApplicationTypeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalStoreProvisionApplicationTypeDescription.class);
  }

  /**
   * Convert an instance of ExternalStoreProvisionApplicationTypeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

