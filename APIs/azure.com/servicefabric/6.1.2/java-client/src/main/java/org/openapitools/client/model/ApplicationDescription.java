/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationCapacityDescription;
import org.openapitools.client.model.ApplicationParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Service Fabric application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationDescription {
  public static final String SERIALIZED_NAME_APPLICATION_CAPACITY = "ApplicationCapacity";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CAPACITY)
  private ApplicationCapacityDescription applicationCapacity;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETER_LIST = "ParameterList";
  @SerializedName(SERIALIZED_NAME_PARAMETER_LIST)
  private List<ApplicationParameter> parameterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_TYPE_VERSION = "TypeVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_VERSION)
  private String typeVersion;

  public ApplicationDescription() {
  }

  public ApplicationDescription applicationCapacity(ApplicationCapacityDescription applicationCapacity) {
    this.applicationCapacity = applicationCapacity;
    return this;
  }

  /**
   * Get applicationCapacity
   * @return applicationCapacity
   */
  @javax.annotation.Nullable
  public ApplicationCapacityDescription getApplicationCapacity() {
    return applicationCapacity;
  }

  public void setApplicationCapacity(ApplicationCapacityDescription applicationCapacity) {
    this.applicationCapacity = applicationCapacity;
  }


  public ApplicationDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application, including the &#39;fabric:&#39; URI scheme.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationDescription parameterList(List<ApplicationParameter> parameterList) {
    this.parameterList = parameterList;
    return this;
  }

  public ApplicationDescription addParameterListItem(ApplicationParameter parameterListItem) {
    if (this.parameterList == null) {
      this.parameterList = new ArrayList<>();
    }
    this.parameterList.add(parameterListItem);
    return this;
  }

  /**
   * List of application parameters with overridden values from their default values specified in the application manifest.
   * @return parameterList
   */
  @javax.annotation.Nullable
  public List<ApplicationParameter> getParameterList() {
    return parameterList;
  }

  public void setParameterList(List<ApplicationParameter> parameterList) {
    this.parameterList = parameterList;
  }


  public ApplicationDescription typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * The application type name as defined in the application manifest.
   * @return typeName
   */
  @javax.annotation.Nonnull
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ApplicationDescription typeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
    return this;
  }

  /**
   * The version of the application type as defined in the application manifest.
   * @return typeVersion
   */
  @javax.annotation.Nonnull
  public String getTypeVersion() {
    return typeVersion;
  }

  public void setTypeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDescription applicationDescription = (ApplicationDescription) o;
    return Objects.equals(this.applicationCapacity, applicationDescription.applicationCapacity) &&
        Objects.equals(this.name, applicationDescription.name) &&
        Objects.equals(this.parameterList, applicationDescription.parameterList) &&
        Objects.equals(this.typeName, applicationDescription.typeName) &&
        Objects.equals(this.typeVersion, applicationDescription.typeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationCapacity, name, parameterList, typeName, typeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDescription {\n");
    sb.append("    applicationCapacity: ").append(toIndentedString(applicationCapacity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameterList: ").append(toIndentedString(parameterList)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    typeVersion: ").append(toIndentedString(typeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationCapacity");
    openapiFields.add("Name");
    openapiFields.add("ParameterList");
    openapiFields.add("TypeName");
    openapiFields.add("TypeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TypeName");
    openapiRequiredFields.add("TypeVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDescription is not found in the empty JSON string", ApplicationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationCapacity`
      if (jsonObj.get("ApplicationCapacity") != null && !jsonObj.get("ApplicationCapacity").isJsonNull()) {
        ApplicationCapacityDescription.validateJsonElement(jsonObj.get("ApplicationCapacity"));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("ParameterList") != null && !jsonObj.get("ParameterList").isJsonNull()) {
        JsonArray jsonArrayparameterList = jsonObj.getAsJsonArray("ParameterList");
        if (jsonArrayparameterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ParameterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ParameterList` to be an array in the JSON string but got `%s`", jsonObj.get("ParameterList").toString()));
          }

          // validate the optional field `ParameterList` (array)
          for (int i = 0; i < jsonArrayparameterList.size(); i++) {
            ApplicationParameter.validateJsonElement(jsonArrayparameterList.get(i));
          };
        }
      }
      if (!jsonObj.get("TypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeName").toString()));
      }
      if (!jsonObj.get("TypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationDescription
   */
  public static ApplicationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDescription.class);
  }

  /**
   * Convert an instance of ApplicationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

