/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ServicePartitionKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the partition identity, partitioning scheme and keys supported by it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionInformation {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_SERVICE_PARTITION_KIND = "ServicePartitionKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_PARTITION_KIND)
  protected ServicePartitionKind servicePartitionKind;

  public PartitionInformation() {
    this.servicePartitionKind = this.getClass().getSimpleName();
  }

  public PartitionInformation id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public PartitionInformation servicePartitionKind(ServicePartitionKind servicePartitionKind) {
    this.servicePartitionKind = servicePartitionKind;
    return this;
  }

  /**
   * Get servicePartitionKind
   * @return servicePartitionKind
   */
  @javax.annotation.Nonnull
  public ServicePartitionKind getServicePartitionKind() {
    return servicePartitionKind;
  }

  public void setServicePartitionKind(ServicePartitionKind servicePartitionKind) {
    this.servicePartitionKind = servicePartitionKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionInformation partitionInformation = (PartitionInformation) o;
    return Objects.equals(this.id, partitionInformation.id) &&
        Objects.equals(this.servicePartitionKind, partitionInformation.servicePartitionKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, servicePartitionKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionInformation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    servicePartitionKind: ").append(toIndentedString(servicePartitionKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ServicePartitionKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServicePartitionKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionInformation is not found in the empty JSON string", PartitionInformation.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ServicePartitionKind").getAsString();
      switch (discriminatorValue) {
        case "Int64RangePartitionInformation":
          Int64RangePartitionInformation.validateJsonElement(jsonElement);
          break;
        case "NamedPartitionInformation":
          NamedPartitionInformation.validateJsonElement(jsonElement);
          break;
        case "SingletonPartitionInformation":
          SingletonPartitionInformation.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ServicePartitionKind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of PartitionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionInformation
   * @throws IOException if the JSON string is invalid with respect to PartitionInformation
   */
  public static PartitionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionInformation.class);
  }

  /**
   * Convert an instance of PartitionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

