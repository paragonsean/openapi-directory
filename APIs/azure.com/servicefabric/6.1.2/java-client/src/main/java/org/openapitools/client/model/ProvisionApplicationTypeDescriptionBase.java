/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProvisionApplicationTypeKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the type of registration or provision requested, and if the operation needs to be asynchronous or not. Supported types of provision operations are from either image store or external store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisionApplicationTypeDescriptionBase {
  public static final String SERIALIZED_NAME_ASYNC = "Async";
  @SerializedName(SERIALIZED_NAME_ASYNC)
  private Boolean async;

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  protected ProvisionApplicationTypeKind kind;

  public ProvisionApplicationTypeDescriptionBase() {
    this.kind = this.getClass().getSimpleName();
  }

  public ProvisionApplicationTypeDescriptionBase async(Boolean async) {
    this.async = async;
    return this;
  }

  /**
   * Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.
   * @return async
   */
  @javax.annotation.Nonnull
  public Boolean getAsync() {
    return async;
  }

  public void setAsync(Boolean async) {
    this.async = async;
  }


  public ProvisionApplicationTypeDescriptionBase kind(ProvisionApplicationTypeKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public ProvisionApplicationTypeKind getKind() {
    return kind;
  }

  public void setKind(ProvisionApplicationTypeKind kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionApplicationTypeDescriptionBase provisionApplicationTypeDescriptionBase = (ProvisionApplicationTypeDescriptionBase) o;
    return Objects.equals(this.async, provisionApplicationTypeDescriptionBase.async) &&
        Objects.equals(this.kind, provisionApplicationTypeDescriptionBase.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(async, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionApplicationTypeDescriptionBase {\n");
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Async");
    openapiFields.add("Kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Async");
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisionApplicationTypeDescriptionBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionApplicationTypeDescriptionBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionApplicationTypeDescriptionBase is not found in the empty JSON string", ProvisionApplicationTypeDescriptionBase.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "ExternalStoreProvisionApplicationTypeDescription":
          ExternalStoreProvisionApplicationTypeDescription.validateJsonElement(jsonElement);
          break;
        case "ProvisionApplicationTypeDescription":
          ProvisionApplicationTypeDescription.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ProvisionApplicationTypeDescriptionBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisionApplicationTypeDescriptionBase
   * @throws IOException if the JSON string is invalid with respect to ProvisionApplicationTypeDescriptionBase
   */
  public static ProvisionApplicationTypeDescriptionBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionApplicationTypeDescriptionBase.class);
  }

  /**
   * Convert an instance of ProvisionApplicationTypeDescriptionBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

