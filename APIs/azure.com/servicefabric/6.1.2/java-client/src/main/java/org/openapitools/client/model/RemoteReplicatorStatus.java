/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RemoteReplicatorAcknowledgementStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the state of the secondary replicator from the primary replicatorâ€™s point of view. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteReplicatorStatus {
  public static final String SERIALIZED_NAME_IS_IN_BUILD = "IsInBuild";
  @SerializedName(SERIALIZED_NAME_IS_IN_BUILD)
  private Boolean isInBuild;

  public static final String SERIALIZED_NAME_LAST_ACKNOWLEDGEMENT_PROCESSED_TIME_UTC = "LastAcknowledgementProcessedTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_ACKNOWLEDGEMENT_PROCESSED_TIME_UTC)
  private OffsetDateTime lastAcknowledgementProcessedTimeUtc;

  public static final String SERIALIZED_NAME_LAST_APPLIED_COPY_SEQUENCE_NUMBER = "LastAppliedCopySequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_APPLIED_COPY_SEQUENCE_NUMBER)
  private String lastAppliedCopySequenceNumber;

  public static final String SERIALIZED_NAME_LAST_APPLIED_REPLICATION_SEQUENCE_NUMBER = "LastAppliedReplicationSequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_APPLIED_REPLICATION_SEQUENCE_NUMBER)
  private String lastAppliedReplicationSequenceNumber;

  public static final String SERIALIZED_NAME_LAST_RECEIVED_COPY_SEQUENCE_NUMBER = "LastReceivedCopySequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_RECEIVED_COPY_SEQUENCE_NUMBER)
  private String lastReceivedCopySequenceNumber;

  public static final String SERIALIZED_NAME_LAST_RECEIVED_REPLICATION_SEQUENCE_NUMBER = "LastReceivedReplicationSequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_RECEIVED_REPLICATION_SEQUENCE_NUMBER)
  private String lastReceivedReplicationSequenceNumber;

  public static final String SERIALIZED_NAME_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS = "RemoteReplicatorAcknowledgementStatus";
  @SerializedName(SERIALIZED_NAME_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS)
  private RemoteReplicatorAcknowledgementStatus remoteReplicatorAcknowledgementStatus;

  public static final String SERIALIZED_NAME_REPLICA_ID = "ReplicaId";
  @SerializedName(SERIALIZED_NAME_REPLICA_ID)
  private String replicaId;

  public RemoteReplicatorStatus() {
  }

  public RemoteReplicatorStatus isInBuild(Boolean isInBuild) {
    this.isInBuild = isInBuild;
    return this;
  }

  /**
   * A value that indicates whether the secondary replica is in the process of being built.
   * @return isInBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsInBuild() {
    return isInBuild;
  }

  public void setIsInBuild(Boolean isInBuild) {
    this.isInBuild = isInBuild;
  }


  public RemoteReplicatorStatus lastAcknowledgementProcessedTimeUtc(OffsetDateTime lastAcknowledgementProcessedTimeUtc) {
    this.lastAcknowledgementProcessedTimeUtc = lastAcknowledgementProcessedTimeUtc;
    return this;
  }

  /**
   * The last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the primary. UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed. 
   * @return lastAcknowledgementProcessedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAcknowledgementProcessedTimeUtc() {
    return lastAcknowledgementProcessedTimeUtc;
  }

  public void setLastAcknowledgementProcessedTimeUtc(OffsetDateTime lastAcknowledgementProcessedTimeUtc) {
    this.lastAcknowledgementProcessedTimeUtc = lastAcknowledgementProcessedTimeUtc;
  }


  public RemoteReplicatorStatus lastAppliedCopySequenceNumber(String lastAppliedCopySequenceNumber) {
    this.lastAppliedCopySequenceNumber = lastAppliedCopySequenceNumber;
    return this;
  }

  /**
   * The highest copy operation sequence number that the secondary has applied to its state. A value of -1 implies that the secondary has applied all copy operations and the copy process is complete. 
   * @return lastAppliedCopySequenceNumber
   */
  @javax.annotation.Nullable
  public String getLastAppliedCopySequenceNumber() {
    return lastAppliedCopySequenceNumber;
  }

  public void setLastAppliedCopySequenceNumber(String lastAppliedCopySequenceNumber) {
    this.lastAppliedCopySequenceNumber = lastAppliedCopySequenceNumber;
  }


  public RemoteReplicatorStatus lastAppliedReplicationSequenceNumber(String lastAppliedReplicationSequenceNumber) {
    this.lastAppliedReplicationSequenceNumber = lastAppliedReplicationSequenceNumber;
    return this;
  }

  /**
   * The highest replication operation sequence number that the secondary has applied to its state.
   * @return lastAppliedReplicationSequenceNumber
   */
  @javax.annotation.Nullable
  public String getLastAppliedReplicationSequenceNumber() {
    return lastAppliedReplicationSequenceNumber;
  }

  public void setLastAppliedReplicationSequenceNumber(String lastAppliedReplicationSequenceNumber) {
    this.lastAppliedReplicationSequenceNumber = lastAppliedReplicationSequenceNumber;
  }


  public RemoteReplicatorStatus lastReceivedCopySequenceNumber(String lastReceivedCopySequenceNumber) {
    this.lastReceivedCopySequenceNumber = lastReceivedCopySequenceNumber;
    return this;
  }

  /**
   * The highest copy operation sequence number that the secondary has received from the primary. A value of -1 implies that the secondary has received all copy operations. 
   * @return lastReceivedCopySequenceNumber
   */
  @javax.annotation.Nullable
  public String getLastReceivedCopySequenceNumber() {
    return lastReceivedCopySequenceNumber;
  }

  public void setLastReceivedCopySequenceNumber(String lastReceivedCopySequenceNumber) {
    this.lastReceivedCopySequenceNumber = lastReceivedCopySequenceNumber;
  }


  public RemoteReplicatorStatus lastReceivedReplicationSequenceNumber(String lastReceivedReplicationSequenceNumber) {
    this.lastReceivedReplicationSequenceNumber = lastReceivedReplicationSequenceNumber;
    return this;
  }

  /**
   * The highest replication operation sequence number that the secondary has received from the primary.
   * @return lastReceivedReplicationSequenceNumber
   */
  @javax.annotation.Nullable
  public String getLastReceivedReplicationSequenceNumber() {
    return lastReceivedReplicationSequenceNumber;
  }

  public void setLastReceivedReplicationSequenceNumber(String lastReceivedReplicationSequenceNumber) {
    this.lastReceivedReplicationSequenceNumber = lastReceivedReplicationSequenceNumber;
  }


  public RemoteReplicatorStatus remoteReplicatorAcknowledgementStatus(RemoteReplicatorAcknowledgementStatus remoteReplicatorAcknowledgementStatus) {
    this.remoteReplicatorAcknowledgementStatus = remoteReplicatorAcknowledgementStatus;
    return this;
  }

  /**
   * Get remoteReplicatorAcknowledgementStatus
   * @return remoteReplicatorAcknowledgementStatus
   */
  @javax.annotation.Nullable
  public RemoteReplicatorAcknowledgementStatus getRemoteReplicatorAcknowledgementStatus() {
    return remoteReplicatorAcknowledgementStatus;
  }

  public void setRemoteReplicatorAcknowledgementStatus(RemoteReplicatorAcknowledgementStatus remoteReplicatorAcknowledgementStatus) {
    this.remoteReplicatorAcknowledgementStatus = remoteReplicatorAcknowledgementStatus;
  }


  public RemoteReplicatorStatus replicaId(String replicaId) {
    this.replicaId = replicaId;
    return this;
  }

  /**
   * Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
   * @return replicaId
   */
  @javax.annotation.Nullable
  public String getReplicaId() {
    return replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteReplicatorStatus remoteReplicatorStatus = (RemoteReplicatorStatus) o;
    return Objects.equals(this.isInBuild, remoteReplicatorStatus.isInBuild) &&
        Objects.equals(this.lastAcknowledgementProcessedTimeUtc, remoteReplicatorStatus.lastAcknowledgementProcessedTimeUtc) &&
        Objects.equals(this.lastAppliedCopySequenceNumber, remoteReplicatorStatus.lastAppliedCopySequenceNumber) &&
        Objects.equals(this.lastAppliedReplicationSequenceNumber, remoteReplicatorStatus.lastAppliedReplicationSequenceNumber) &&
        Objects.equals(this.lastReceivedCopySequenceNumber, remoteReplicatorStatus.lastReceivedCopySequenceNumber) &&
        Objects.equals(this.lastReceivedReplicationSequenceNumber, remoteReplicatorStatus.lastReceivedReplicationSequenceNumber) &&
        Objects.equals(this.remoteReplicatorAcknowledgementStatus, remoteReplicatorStatus.remoteReplicatorAcknowledgementStatus) &&
        Objects.equals(this.replicaId, remoteReplicatorStatus.replicaId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isInBuild, lastAcknowledgementProcessedTimeUtc, lastAppliedCopySequenceNumber, lastAppliedReplicationSequenceNumber, lastReceivedCopySequenceNumber, lastReceivedReplicationSequenceNumber, remoteReplicatorAcknowledgementStatus, replicaId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteReplicatorStatus {\n");
    sb.append("    isInBuild: ").append(toIndentedString(isInBuild)).append("\n");
    sb.append("    lastAcknowledgementProcessedTimeUtc: ").append(toIndentedString(lastAcknowledgementProcessedTimeUtc)).append("\n");
    sb.append("    lastAppliedCopySequenceNumber: ").append(toIndentedString(lastAppliedCopySequenceNumber)).append("\n");
    sb.append("    lastAppliedReplicationSequenceNumber: ").append(toIndentedString(lastAppliedReplicationSequenceNumber)).append("\n");
    sb.append("    lastReceivedCopySequenceNumber: ").append(toIndentedString(lastReceivedCopySequenceNumber)).append("\n");
    sb.append("    lastReceivedReplicationSequenceNumber: ").append(toIndentedString(lastReceivedReplicationSequenceNumber)).append("\n");
    sb.append("    remoteReplicatorAcknowledgementStatus: ").append(toIndentedString(remoteReplicatorAcknowledgementStatus)).append("\n");
    sb.append("    replicaId: ").append(toIndentedString(replicaId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsInBuild");
    openapiFields.add("LastAcknowledgementProcessedTimeUtc");
    openapiFields.add("LastAppliedCopySequenceNumber");
    openapiFields.add("LastAppliedReplicationSequenceNumber");
    openapiFields.add("LastReceivedCopySequenceNumber");
    openapiFields.add("LastReceivedReplicationSequenceNumber");
    openapiFields.add("RemoteReplicatorAcknowledgementStatus");
    openapiFields.add("ReplicaId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteReplicatorStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteReplicatorStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteReplicatorStatus is not found in the empty JSON string", RemoteReplicatorStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteReplicatorStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteReplicatorStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LastAppliedCopySequenceNumber") != null && !jsonObj.get("LastAppliedCopySequenceNumber").isJsonNull()) && !jsonObj.get("LastAppliedCopySequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastAppliedCopySequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastAppliedCopySequenceNumber").toString()));
      }
      if ((jsonObj.get("LastAppliedReplicationSequenceNumber") != null && !jsonObj.get("LastAppliedReplicationSequenceNumber").isJsonNull()) && !jsonObj.get("LastAppliedReplicationSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastAppliedReplicationSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastAppliedReplicationSequenceNumber").toString()));
      }
      if ((jsonObj.get("LastReceivedCopySequenceNumber") != null && !jsonObj.get("LastReceivedCopySequenceNumber").isJsonNull()) && !jsonObj.get("LastReceivedCopySequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastReceivedCopySequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastReceivedCopySequenceNumber").toString()));
      }
      if ((jsonObj.get("LastReceivedReplicationSequenceNumber") != null && !jsonObj.get("LastReceivedReplicationSequenceNumber").isJsonNull()) && !jsonObj.get("LastReceivedReplicationSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastReceivedReplicationSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastReceivedReplicationSequenceNumber").toString()));
      }
      // validate the optional field `RemoteReplicatorAcknowledgementStatus`
      if (jsonObj.get("RemoteReplicatorAcknowledgementStatus") != null && !jsonObj.get("RemoteReplicatorAcknowledgementStatus").isJsonNull()) {
        RemoteReplicatorAcknowledgementStatus.validateJsonElement(jsonObj.get("RemoteReplicatorAcknowledgementStatus"));
      }
      if ((jsonObj.get("ReplicaId") != null && !jsonObj.get("ReplicaId").isJsonNull()) && !jsonObj.get("ReplicaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteReplicatorStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteReplicatorStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteReplicatorStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteReplicatorStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteReplicatorStatus>() {
           @Override
           public void write(JsonWriter out, RemoteReplicatorStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteReplicatorStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteReplicatorStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteReplicatorStatus
   * @throws IOException if the JSON string is invalid with respect to RemoteReplicatorStatus
   */
  public static RemoteReplicatorStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteReplicatorStatus.class);
  }

  /**
   * Convert an instance of RemoteReplicatorStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

