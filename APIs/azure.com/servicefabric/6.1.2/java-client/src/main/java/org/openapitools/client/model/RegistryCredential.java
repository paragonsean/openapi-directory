/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Credential information to connect to container registry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:08.089721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistryCredential {
  public static final String SERIALIZED_NAME_PASSWORD_ENCRYPTED = "PasswordEncrypted";
  @SerializedName(SERIALIZED_NAME_PASSWORD_ENCRYPTED)
  private Boolean passwordEncrypted;

  public static final String SERIALIZED_NAME_REGISTRY_PASSWORD = "RegistryPassword";
  @SerializedName(SERIALIZED_NAME_REGISTRY_PASSWORD)
  private String registryPassword;

  public static final String SERIALIZED_NAME_REGISTRY_USER_NAME = "RegistryUserName";
  @SerializedName(SERIALIZED_NAME_REGISTRY_USER_NAME)
  private String registryUserName;

  public RegistryCredential() {
  }

  public RegistryCredential passwordEncrypted(Boolean passwordEncrypted) {
    this.passwordEncrypted = passwordEncrypted;
    return this;
  }

  /**
   * Indicates that supplied container registry password is encrypted.
   * @return passwordEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getPasswordEncrypted() {
    return passwordEncrypted;
  }

  public void setPasswordEncrypted(Boolean passwordEncrypted) {
    this.passwordEncrypted = passwordEncrypted;
  }


  public RegistryCredential registryPassword(String registryPassword) {
    this.registryPassword = registryPassword;
    return this;
  }

  /**
   * The password for supplied username to connect to container registry.
   * @return registryPassword
   */
  @javax.annotation.Nullable
  public String getRegistryPassword() {
    return registryPassword;
  }

  public void setRegistryPassword(String registryPassword) {
    this.registryPassword = registryPassword;
  }


  public RegistryCredential registryUserName(String registryUserName) {
    this.registryUserName = registryUserName;
    return this;
  }

  /**
   * The user name to connect to container registry.
   * @return registryUserName
   */
  @javax.annotation.Nullable
  public String getRegistryUserName() {
    return registryUserName;
  }

  public void setRegistryUserName(String registryUserName) {
    this.registryUserName = registryUserName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryCredential registryCredential = (RegistryCredential) o;
    return Objects.equals(this.passwordEncrypted, registryCredential.passwordEncrypted) &&
        Objects.equals(this.registryPassword, registryCredential.registryPassword) &&
        Objects.equals(this.registryUserName, registryCredential.registryUserName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passwordEncrypted, registryPassword, registryUserName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryCredential {\n");
    sb.append("    passwordEncrypted: ").append(toIndentedString(passwordEncrypted)).append("\n");
    sb.append("    registryPassword: ").append(toIndentedString(registryPassword)).append("\n");
    sb.append("    registryUserName: ").append(toIndentedString(registryUserName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PasswordEncrypted");
    openapiFields.add("RegistryPassword");
    openapiFields.add("RegistryUserName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistryCredential
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistryCredential.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryCredential is not found in the empty JSON string", RegistryCredential.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistryCredential.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryCredential` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RegistryPassword") != null && !jsonObj.get("RegistryPassword").isJsonNull()) && !jsonObj.get("RegistryPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryPassword").toString()));
      }
      if ((jsonObj.get("RegistryUserName") != null && !jsonObj.get("RegistryUserName").isJsonNull()) && !jsonObj.get("RegistryUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistryUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistryUserName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryCredential.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryCredential' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryCredential> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryCredential.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryCredential>() {
           @Override
           public void write(JsonWriter out, RegistryCredential value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryCredential read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistryCredential given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistryCredential
   * @throws IOException if the JSON string is invalid with respect to RegistryCredential
   */
  public static RegistryCredential fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryCredential.class);
  }

  /**
   * Convert an instance of RegistryCredential to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

