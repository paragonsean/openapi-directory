# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replica_status import ReplicaStatus
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class DeployedServiceReplicaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, code_package_name: str=None, host_process_id: str=None, partition_id: str=None, replica_status: ReplicaStatus=None, service_kind: ServiceKind=None, service_manifest_name: str=None, service_name: str=None, service_package_activation_id: str=None, service_type_name: str=None):
        """DeployedServiceReplicaInfo - a model defined in OpenAPI

        :param address: The address of this DeployedServiceReplicaInfo.
        :param code_package_name: The code_package_name of this DeployedServiceReplicaInfo.
        :param host_process_id: The host_process_id of this DeployedServiceReplicaInfo.
        :param partition_id: The partition_id of this DeployedServiceReplicaInfo.
        :param replica_status: The replica_status of this DeployedServiceReplicaInfo.
        :param service_kind: The service_kind of this DeployedServiceReplicaInfo.
        :param service_manifest_name: The service_manifest_name of this DeployedServiceReplicaInfo.
        :param service_name: The service_name of this DeployedServiceReplicaInfo.
        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceReplicaInfo.
        :param service_type_name: The service_type_name of this DeployedServiceReplicaInfo.
        """
        self.openapi_types = {
            'address': str,
            'code_package_name': str,
            'host_process_id': str,
            'partition_id': str,
            'replica_status': ReplicaStatus,
            'service_kind': ServiceKind,
            'service_manifest_name': str,
            'service_name': str,
            'service_package_activation_id': str,
            'service_type_name': str
        }

        self.attribute_map = {
            'address': 'Address',
            'code_package_name': 'CodePackageName',
            'host_process_id': 'HostProcessId',
            'partition_id': 'PartitionId',
            'replica_status': 'ReplicaStatus',
            'service_kind': 'ServiceKind',
            'service_manifest_name': 'ServiceManifestName',
            'service_name': 'ServiceName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_type_name': 'ServiceTypeName'
        }

        self._address = address
        self._code_package_name = code_package_name
        self._host_process_id = host_process_id
        self._partition_id = partition_id
        self._replica_status = replica_status
        self._service_kind = service_kind
        self._service_manifest_name = service_manifest_name
        self._service_name = service_name
        self._service_package_activation_id = service_package_activation_id
        self._service_type_name = service_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedServiceReplicaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedServiceReplicaInfo of this DeployedServiceReplicaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this DeployedServiceReplicaInfo.

        The last address returned by the replica in Open or ChangeRole.

        :return: The address of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeployedServiceReplicaInfo.

        The last address returned by the replica in Open or ChangeRole.

        :param address: The address of this DeployedServiceReplicaInfo.
        :type address: str
        """

        self._address = address

    @property
    def code_package_name(self):
        """Gets the code_package_name of this DeployedServiceReplicaInfo.

        The name of the code package defined in the service manifest.

        :return: The code_package_name of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this DeployedServiceReplicaInfo.

        The name of the code package defined in the service manifest.

        :param code_package_name: The code_package_name of this DeployedServiceReplicaInfo.
        :type code_package_name: str
        """

        self._code_package_name = code_package_name

    @property
    def host_process_id(self):
        """Gets the host_process_id of this DeployedServiceReplicaInfo.

        Host process id of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process id will be from different kernel.

        :return: The host_process_id of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._host_process_id

    @host_process_id.setter
    def host_process_id(self, host_process_id):
        """Sets the host_process_id of this DeployedServiceReplicaInfo.

        Host process id of the process that is hosting the replica. This will be zero if the replica is down. In hyper-v containers this host process id will be from different kernel.

        :param host_process_id: The host_process_id of this DeployedServiceReplicaInfo.
        :type host_process_id: str
        """

        self._host_process_id = host_process_id

    @property
    def partition_id(self):
        """Gets the partition_id of this DeployedServiceReplicaInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.

        :return: The partition_id of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this DeployedServiceReplicaInfo.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition id is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the ids of its partitions would be different.

        :param partition_id: The partition_id of this DeployedServiceReplicaInfo.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def replica_status(self):
        """Gets the replica_status of this DeployedServiceReplicaInfo.


        :return: The replica_status of this DeployedServiceReplicaInfo.
        :rtype: ReplicaStatus
        """
        return self._replica_status

    @replica_status.setter
    def replica_status(self, replica_status):
        """Sets the replica_status of this DeployedServiceReplicaInfo.


        :param replica_status: The replica_status of this DeployedServiceReplicaInfo.
        :type replica_status: ReplicaStatus
        """

        self._replica_status = replica_status

    @property
    def service_kind(self):
        """Gets the service_kind of this DeployedServiceReplicaInfo.


        :return: The service_kind of this DeployedServiceReplicaInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this DeployedServiceReplicaInfo.


        :param service_kind: The service_kind of this DeployedServiceReplicaInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployedServiceReplicaInfo.

        The name of the service manifest.

        :return: The service_manifest_name of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployedServiceReplicaInfo.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this DeployedServiceReplicaInfo.
        :type service_manifest_name: str
        """

        self._service_manifest_name = service_manifest_name

    @property
    def service_name(self):
        """Gets the service_name of this DeployedServiceReplicaInfo.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DeployedServiceReplicaInfo.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this DeployedServiceReplicaInfo.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this DeployedServiceReplicaInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :return: The service_package_activation_id of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this DeployedServiceReplicaInfo.

        The ActivationId of a deployed service package. If ServicePackageActivationMode specified at the time of creating the service is 'SharedProcess' (or if it is not specified, in which case it defaults to 'SharedProcess'), then value of ServicePackageActivationId is always an empty string. 

        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceReplicaInfo.
        :type service_package_activation_id: str
        """

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_type_name(self):
        """Gets the service_type_name of this DeployedServiceReplicaInfo.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this DeployedServiceReplicaInfo.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this DeployedServiceReplicaInfo.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this DeployedServiceReplicaInfo.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name
