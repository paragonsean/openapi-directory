# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repair_impact_description_base import RepairImpactDescriptionBase
from openapi_server.models.repair_target_description_base import RepairTargetDescriptionBase
from openapi_server.models.repair_task_health_check_state import RepairTaskHealthCheckState
from openapi_server.models.repair_task_history import RepairTaskHistory
from openapi_server import util


class RepairTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, description: str=None, executor: str=None, executor_data: str=None, flags: int=None, history: RepairTaskHistory=None, impact: RepairImpactDescriptionBase=None, perform_preparing_health_check: bool=None, perform_restoring_health_check: bool=None, preparing_health_check_state: RepairTaskHealthCheckState=None, restoring_health_check_state: RepairTaskHealthCheckState=None, result_code: int=None, result_details: str=None, result_status: str=None, state: str=None, target: RepairTargetDescriptionBase=None, task_id: str=None, version: str=None):
        """RepairTask - a model defined in OpenAPI

        :param action: The action of this RepairTask.
        :param description: The description of this RepairTask.
        :param executor: The executor of this RepairTask.
        :param executor_data: The executor_data of this RepairTask.
        :param flags: The flags of this RepairTask.
        :param history: The history of this RepairTask.
        :param impact: The impact of this RepairTask.
        :param perform_preparing_health_check: The perform_preparing_health_check of this RepairTask.
        :param perform_restoring_health_check: The perform_restoring_health_check of this RepairTask.
        :param preparing_health_check_state: The preparing_health_check_state of this RepairTask.
        :param restoring_health_check_state: The restoring_health_check_state of this RepairTask.
        :param result_code: The result_code of this RepairTask.
        :param result_details: The result_details of this RepairTask.
        :param result_status: The result_status of this RepairTask.
        :param state: The state of this RepairTask.
        :param target: The target of this RepairTask.
        :param task_id: The task_id of this RepairTask.
        :param version: The version of this RepairTask.
        """
        self.openapi_types = {
            'action': str,
            'description': str,
            'executor': str,
            'executor_data': str,
            'flags': int,
            'history': RepairTaskHistory,
            'impact': RepairImpactDescriptionBase,
            'perform_preparing_health_check': bool,
            'perform_restoring_health_check': bool,
            'preparing_health_check_state': RepairTaskHealthCheckState,
            'restoring_health_check_state': RepairTaskHealthCheckState,
            'result_code': int,
            'result_details': str,
            'result_status': str,
            'state': str,
            'target': RepairTargetDescriptionBase,
            'task_id': str,
            'version': str
        }

        self.attribute_map = {
            'action': 'Action',
            'description': 'Description',
            'executor': 'Executor',
            'executor_data': 'ExecutorData',
            'flags': 'Flags',
            'history': 'History',
            'impact': 'Impact',
            'perform_preparing_health_check': 'PerformPreparingHealthCheck',
            'perform_restoring_health_check': 'PerformRestoringHealthCheck',
            'preparing_health_check_state': 'PreparingHealthCheckState',
            'restoring_health_check_state': 'RestoringHealthCheckState',
            'result_code': 'ResultCode',
            'result_details': 'ResultDetails',
            'result_status': 'ResultStatus',
            'state': 'State',
            'target': 'Target',
            'task_id': 'TaskId',
            'version': 'Version'
        }

        self._action = action
        self._description = description
        self._executor = executor
        self._executor_data = executor_data
        self._flags = flags
        self._history = history
        self._impact = impact
        self._perform_preparing_health_check = perform_preparing_health_check
        self._perform_restoring_health_check = perform_restoring_health_check
        self._preparing_health_check_state = preparing_health_check_state
        self._restoring_health_check_state = restoring_health_check_state
        self._result_code = result_code
        self._result_details = result_details
        self._result_status = result_status
        self._state = state
        self._target = target
        self._task_id = task_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepairTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepairTask of this RepairTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RepairTask.

        The requested repair action. Must be specified when the repair task is created, and is immutable once set. 

        :return: The action of this RepairTask.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RepairTask.

        The requested repair action. Must be specified when the repair task is created, and is immutable once set. 

        :param action: The action of this RepairTask.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def description(self):
        """Gets the description of this RepairTask.

        A description of the purpose of the repair task, or other informational details. May be set when the repair task is created, and is immutable once set. 

        :return: The description of this RepairTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepairTask.

        A description of the purpose of the repair task, or other informational details. May be set when the repair task is created, and is immutable once set. 

        :param description: The description of this RepairTask.
        :type description: str
        """

        self._description = description

    @property
    def executor(self):
        """Gets the executor of this RepairTask.

        The name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.

        :return: The executor of this RepairTask.
        :rtype: str
        """
        return self._executor

    @executor.setter
    def executor(self, executor):
        """Sets the executor of this RepairTask.

        The name of the repair executor. Must be specified in Claimed and later states, and is immutable once set.

        :param executor: The executor of this RepairTask.
        :type executor: str
        """

        self._executor = executor

    @property
    def executor_data(self):
        """Gets the executor_data of this RepairTask.

        A data string that the repair executor can use to store its internal state.

        :return: The executor_data of this RepairTask.
        :rtype: str
        """
        return self._executor_data

    @executor_data.setter
    def executor_data(self, executor_data):
        """Sets the executor_data of this RepairTask.

        A data string that the repair executor can use to store its internal state.

        :param executor_data: The executor_data of this RepairTask.
        :type executor_data: str
        """

        self._executor_data = executor_data

    @property
    def flags(self):
        """Gets the flags of this RepairTask.

        A bitwise-OR of the following values, which gives additional details about the status of the repair task. - 1 - Cancellation of the repair has been requested - 2 - Abort of the repair has been requested - 4 - Approval of the repair was forced via client request 

        :return: The flags of this RepairTask.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this RepairTask.

        A bitwise-OR of the following values, which gives additional details about the status of the repair task. - 1 - Cancellation of the repair has been requested - 2 - Abort of the repair has been requested - 4 - Approval of the repair was forced via client request 

        :param flags: The flags of this RepairTask.
        :type flags: int
        """

        self._flags = flags

    @property
    def history(self):
        """Gets the history of this RepairTask.


        :return: The history of this RepairTask.
        :rtype: RepairTaskHistory
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this RepairTask.


        :param history: The history of this RepairTask.
        :type history: RepairTaskHistory
        """

        self._history = history

    @property
    def impact(self):
        """Gets the impact of this RepairTask.


        :return: The impact of this RepairTask.
        :rtype: RepairImpactDescriptionBase
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this RepairTask.


        :param impact: The impact of this RepairTask.
        :type impact: RepairImpactDescriptionBase
        """

        self._impact = impact

    @property
    def perform_preparing_health_check(self):
        """Gets the perform_preparing_health_check of this RepairTask.

        A value to determine if health checks will be performed when the repair task enters the Preparing state.

        :return: The perform_preparing_health_check of this RepairTask.
        :rtype: bool
        """
        return self._perform_preparing_health_check

    @perform_preparing_health_check.setter
    def perform_preparing_health_check(self, perform_preparing_health_check):
        """Sets the perform_preparing_health_check of this RepairTask.

        A value to determine if health checks will be performed when the repair task enters the Preparing state.

        :param perform_preparing_health_check: The perform_preparing_health_check of this RepairTask.
        :type perform_preparing_health_check: bool
        """

        self._perform_preparing_health_check = perform_preparing_health_check

    @property
    def perform_restoring_health_check(self):
        """Gets the perform_restoring_health_check of this RepairTask.

        A value to determine if health checks will be performed when the repair task enters the Restoring state.

        :return: The perform_restoring_health_check of this RepairTask.
        :rtype: bool
        """
        return self._perform_restoring_health_check

    @perform_restoring_health_check.setter
    def perform_restoring_health_check(self, perform_restoring_health_check):
        """Sets the perform_restoring_health_check of this RepairTask.

        A value to determine if health checks will be performed when the repair task enters the Restoring state.

        :param perform_restoring_health_check: The perform_restoring_health_check of this RepairTask.
        :type perform_restoring_health_check: bool
        """

        self._perform_restoring_health_check = perform_restoring_health_check

    @property
    def preparing_health_check_state(self):
        """Gets the preparing_health_check_state of this RepairTask.


        :return: The preparing_health_check_state of this RepairTask.
        :rtype: RepairTaskHealthCheckState
        """
        return self._preparing_health_check_state

    @preparing_health_check_state.setter
    def preparing_health_check_state(self, preparing_health_check_state):
        """Sets the preparing_health_check_state of this RepairTask.


        :param preparing_health_check_state: The preparing_health_check_state of this RepairTask.
        :type preparing_health_check_state: RepairTaskHealthCheckState
        """

        self._preparing_health_check_state = preparing_health_check_state

    @property
    def restoring_health_check_state(self):
        """Gets the restoring_health_check_state of this RepairTask.


        :return: The restoring_health_check_state of this RepairTask.
        :rtype: RepairTaskHealthCheckState
        """
        return self._restoring_health_check_state

    @restoring_health_check_state.setter
    def restoring_health_check_state(self, restoring_health_check_state):
        """Sets the restoring_health_check_state of this RepairTask.


        :param restoring_health_check_state: The restoring_health_check_state of this RepairTask.
        :type restoring_health_check_state: RepairTaskHealthCheckState
        """

        self._restoring_health_check_state = restoring_health_check_state

    @property
    def result_code(self):
        """Gets the result_code of this RepairTask.

        A numeric value providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set. 

        :return: The result_code of this RepairTask.
        :rtype: int
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this RepairTask.

        A numeric value providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set. 

        :param result_code: The result_code of this RepairTask.
        :type result_code: int
        """

        self._result_code = result_code

    @property
    def result_details(self):
        """Gets the result_details of this RepairTask.

        A string providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set. 

        :return: The result_details of this RepairTask.
        :rtype: str
        """
        return self._result_details

    @result_details.setter
    def result_details(self, result_details):
        """Sets the result_details of this RepairTask.

        A string providing additional details about the result of the repair task execution. May be specified in the Restoring and later states, and is immutable once set. 

        :param result_details: The result_details of this RepairTask.
        :type result_details: str
        """

        self._result_details = result_details

    @property
    def result_status(self):
        """Gets the result_status of this RepairTask.

        A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.

        :return: The result_status of this RepairTask.
        :rtype: str
        """
        return self._result_status

    @result_status.setter
    def result_status(self, result_status):
        """Sets the result_status of this RepairTask.

        A value describing the overall result of the repair task execution. Must be specified in the Restoring and later states, and is immutable once set.

        :param result_status: The result_status of this RepairTask.
        :type result_status: str
        """
        allowed_values = ["Invalid", "Succeeded", "Cancelled", "Interrupted", "Failed", "Pending"]  # noqa: E501
        if result_status not in allowed_values:
            raise ValueError(
                "Invalid value for `result_status` ({0}), must be one of {1}"
                .format(result_status, allowed_values)
            )

        self._result_status = result_status

    @property
    def state(self):
        """Gets the state of this RepairTask.

        The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.

        :return: The state of this RepairTask.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RepairTask.

        The workflow state of the repair task. Valid initial states are Created, Claimed, and Preparing.

        :param state: The state of this RepairTask.
        :type state: str
        """
        allowed_values = ["Invalid", "Created", "Claimed", "Preparing", "Approved", "Executing", "Restoring", "Completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target(self):
        """Gets the target of this RepairTask.


        :return: The target of this RepairTask.
        :rtype: RepairTargetDescriptionBase
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this RepairTask.


        :param target: The target of this RepairTask.
        :type target: RepairTargetDescriptionBase
        """

        self._target = target

    @property
    def task_id(self):
        """Gets the task_id of this RepairTask.

        The ID of the repair task.

        :return: The task_id of this RepairTask.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this RepairTask.

        The ID of the repair task.

        :param task_id: The task_id of this RepairTask.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def version(self):
        """Gets the version of this RepairTask.

        The version of the repair task. When creating a new repair task, the version must be set to zero.  When updating a repair task, the version is used for optimistic concurrency checks.  If the version is set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the update will only succeed if the actual current version of the repair task matches this value. 

        :return: The version of this RepairTask.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RepairTask.

        The version of the repair task. When creating a new repair task, the version must be set to zero.  When updating a repair task, the version is used for optimistic concurrency checks.  If the version is set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the update will only succeed if the actual current version of the repair task matches this value. 

        :param version: The version of this RepairTask.
        :type version: str
        """

        self._version = version
