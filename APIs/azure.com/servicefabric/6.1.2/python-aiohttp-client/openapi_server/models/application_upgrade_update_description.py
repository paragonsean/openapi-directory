# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server.models.rolling_upgrade_update_description import RollingUpgradeUpdateDescription
from openapi_server.models.upgrade_kind import UpgradeKind
from openapi_server import util


class ApplicationUpgradeUpdateDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy: ApplicationHealthPolicy=None, name: str=None, update_description: RollingUpgradeUpdateDescription=None, upgrade_kind: UpgradeKind=UpgradeKind.ROLLING):
        """ApplicationUpgradeUpdateDescription - a model defined in OpenAPI

        :param application_health_policy: The application_health_policy of this ApplicationUpgradeUpdateDescription.
        :param name: The name of this ApplicationUpgradeUpdateDescription.
        :param update_description: The update_description of this ApplicationUpgradeUpdateDescription.
        :param upgrade_kind: The upgrade_kind of this ApplicationUpgradeUpdateDescription.
        """
        self.openapi_types = {
            'application_health_policy': ApplicationHealthPolicy,
            'name': str,
            'update_description': RollingUpgradeUpdateDescription,
            'upgrade_kind': UpgradeKind
        }

        self.attribute_map = {
            'application_health_policy': 'ApplicationHealthPolicy',
            'name': 'Name',
            'update_description': 'UpdateDescription',
            'upgrade_kind': 'UpgradeKind'
        }

        self._application_health_policy = application_health_policy
        self._name = name
        self._update_description = update_description
        self._upgrade_kind = upgrade_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradeUpdateDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradeUpdateDescription of this ApplicationUpgradeUpdateDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy(self):
        """Gets the application_health_policy of this ApplicationUpgradeUpdateDescription.


        :return: The application_health_policy of this ApplicationUpgradeUpdateDescription.
        :rtype: ApplicationHealthPolicy
        """
        return self._application_health_policy

    @application_health_policy.setter
    def application_health_policy(self, application_health_policy):
        """Sets the application_health_policy of this ApplicationUpgradeUpdateDescription.


        :param application_health_policy: The application_health_policy of this ApplicationUpgradeUpdateDescription.
        :type application_health_policy: ApplicationHealthPolicy
        """

        self._application_health_policy = application_health_policy

    @property
    def name(self):
        """Gets the name of this ApplicationUpgradeUpdateDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The name of this ApplicationUpgradeUpdateDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationUpgradeUpdateDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :param name: The name of this ApplicationUpgradeUpdateDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def update_description(self):
        """Gets the update_description of this ApplicationUpgradeUpdateDescription.


        :return: The update_description of this ApplicationUpgradeUpdateDescription.
        :rtype: RollingUpgradeUpdateDescription
        """
        return self._update_description

    @update_description.setter
    def update_description(self, update_description):
        """Sets the update_description of this ApplicationUpgradeUpdateDescription.


        :param update_description: The update_description of this ApplicationUpgradeUpdateDescription.
        :type update_description: RollingUpgradeUpdateDescription
        """

        self._update_description = update_description

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this ApplicationUpgradeUpdateDescription.


        :return: The upgrade_kind of this ApplicationUpgradeUpdateDescription.
        :rtype: UpgradeKind
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this ApplicationUpgradeUpdateDescription.


        :param upgrade_kind: The upgrade_kind of this ApplicationUpgradeUpdateDescription.
        :type upgrade_kind: UpgradeKind
        """
        if upgrade_kind is None:
            raise ValueError("Invalid value for `upgrade_kind`, must not be `None`")

        self._upgrade_kind = upgrade_kind
