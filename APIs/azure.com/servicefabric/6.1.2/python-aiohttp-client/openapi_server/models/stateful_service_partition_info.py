# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.epoch import Epoch
from openapi_server.models.health_state import HealthState
from openapi_server.models.partition_information import PartitionInformation
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_partition_info import ServicePartitionInfo
from openapi_server.models.service_partition_status import ServicePartitionStatus
from openapi_server import util


class StatefulServicePartitionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_configuration_epoch: Epoch=None, last_quorum_loss_duration: str=None, min_replica_set_size: int=None, target_replica_set_size: int=None, health_state: HealthState=None, partition_information: PartitionInformation=None, partition_status: ServicePartitionStatus=None, service_kind: ServiceKind=None):
        """StatefulServicePartitionInfo - a model defined in OpenAPI

        :param current_configuration_epoch: The current_configuration_epoch of this StatefulServicePartitionInfo.
        :param last_quorum_loss_duration: The last_quorum_loss_duration of this StatefulServicePartitionInfo.
        :param min_replica_set_size: The min_replica_set_size of this StatefulServicePartitionInfo.
        :param target_replica_set_size: The target_replica_set_size of this StatefulServicePartitionInfo.
        :param health_state: The health_state of this StatefulServicePartitionInfo.
        :param partition_information: The partition_information of this StatefulServicePartitionInfo.
        :param partition_status: The partition_status of this StatefulServicePartitionInfo.
        :param service_kind: The service_kind of this StatefulServicePartitionInfo.
        """
        self.openapi_types = {
            'current_configuration_epoch': Epoch,
            'last_quorum_loss_duration': str,
            'min_replica_set_size': int,
            'target_replica_set_size': int,
            'health_state': HealthState,
            'partition_information': PartitionInformation,
            'partition_status': ServicePartitionStatus,
            'service_kind': ServiceKind
        }

        self.attribute_map = {
            'current_configuration_epoch': 'CurrentConfigurationEpoch',
            'last_quorum_loss_duration': 'LastQuorumLossDuration',
            'min_replica_set_size': 'MinReplicaSetSize',
            'target_replica_set_size': 'TargetReplicaSetSize',
            'health_state': 'HealthState',
            'partition_information': 'PartitionInformation',
            'partition_status': 'PartitionStatus',
            'service_kind': 'ServiceKind'
        }

        self._current_configuration_epoch = current_configuration_epoch
        self._last_quorum_loss_duration = last_quorum_loss_duration
        self._min_replica_set_size = min_replica_set_size
        self._target_replica_set_size = target_replica_set_size
        self._health_state = health_state
        self._partition_information = partition_information
        self._partition_status = partition_status
        self._service_kind = service_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulServicePartitionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulServicePartitionInfo of this StatefulServicePartitionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_configuration_epoch(self):
        """Gets the current_configuration_epoch of this StatefulServicePartitionInfo.


        :return: The current_configuration_epoch of this StatefulServicePartitionInfo.
        :rtype: Epoch
        """
        return self._current_configuration_epoch

    @current_configuration_epoch.setter
    def current_configuration_epoch(self, current_configuration_epoch):
        """Sets the current_configuration_epoch of this StatefulServicePartitionInfo.


        :param current_configuration_epoch: The current_configuration_epoch of this StatefulServicePartitionInfo.
        :type current_configuration_epoch: Epoch
        """

        self._current_configuration_epoch = current_configuration_epoch

    @property
    def last_quorum_loss_duration(self):
        """Gets the last_quorum_loss_duration of this StatefulServicePartitionInfo.

        The duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601 format for specifying the duration.

        :return: The last_quorum_loss_duration of this StatefulServicePartitionInfo.
        :rtype: str
        """
        return self._last_quorum_loss_duration

    @last_quorum_loss_duration.setter
    def last_quorum_loss_duration(self, last_quorum_loss_duration):
        """Sets the last_quorum_loss_duration of this StatefulServicePartitionInfo.

        The duration for which this partition was in quorum loss. If the partition is currently in quorum loss, it returns the duration since it has been in that state. This field is using ISO8601 format for specifying the duration.

        :param last_quorum_loss_duration: The last_quorum_loss_duration of this StatefulServicePartitionInfo.
        :type last_quorum_loss_duration: str
        """

        self._last_quorum_loss_duration = last_quorum_loss_duration

    @property
    def min_replica_set_size(self):
        """Gets the min_replica_set_size of this StatefulServicePartitionInfo.

        The minimum replica set size as a number.

        :return: The min_replica_set_size of this StatefulServicePartitionInfo.
        :rtype: int
        """
        return self._min_replica_set_size

    @min_replica_set_size.setter
    def min_replica_set_size(self, min_replica_set_size):
        """Sets the min_replica_set_size of this StatefulServicePartitionInfo.

        The minimum replica set size as a number.

        :param min_replica_set_size: The min_replica_set_size of this StatefulServicePartitionInfo.
        :type min_replica_set_size: int
        """

        self._min_replica_set_size = min_replica_set_size

    @property
    def target_replica_set_size(self):
        """Gets the target_replica_set_size of this StatefulServicePartitionInfo.

        The target replica set size as a number.

        :return: The target_replica_set_size of this StatefulServicePartitionInfo.
        :rtype: int
        """
        return self._target_replica_set_size

    @target_replica_set_size.setter
    def target_replica_set_size(self, target_replica_set_size):
        """Sets the target_replica_set_size of this StatefulServicePartitionInfo.

        The target replica set size as a number.

        :param target_replica_set_size: The target_replica_set_size of this StatefulServicePartitionInfo.
        :type target_replica_set_size: int
        """

        self._target_replica_set_size = target_replica_set_size

    @property
    def health_state(self):
        """Gets the health_state of this StatefulServicePartitionInfo.


        :return: The health_state of this StatefulServicePartitionInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this StatefulServicePartitionInfo.


        :param health_state: The health_state of this StatefulServicePartitionInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def partition_information(self):
        """Gets the partition_information of this StatefulServicePartitionInfo.


        :return: The partition_information of this StatefulServicePartitionInfo.
        :rtype: PartitionInformation
        """
        return self._partition_information

    @partition_information.setter
    def partition_information(self, partition_information):
        """Sets the partition_information of this StatefulServicePartitionInfo.


        :param partition_information: The partition_information of this StatefulServicePartitionInfo.
        :type partition_information: PartitionInformation
        """

        self._partition_information = partition_information

    @property
    def partition_status(self):
        """Gets the partition_status of this StatefulServicePartitionInfo.


        :return: The partition_status of this StatefulServicePartitionInfo.
        :rtype: ServicePartitionStatus
        """
        return self._partition_status

    @partition_status.setter
    def partition_status(self, partition_status):
        """Sets the partition_status of this StatefulServicePartitionInfo.


        :param partition_status: The partition_status of this StatefulServicePartitionInfo.
        :type partition_status: ServicePartitionStatus
        """

        self._partition_status = partition_status

    @property
    def service_kind(self):
        """Gets the service_kind of this StatefulServicePartitionInfo.


        :return: The service_kind of this StatefulServicePartitionInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatefulServicePartitionInfo.


        :param service_kind: The service_kind of this StatefulServicePartitionInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind
