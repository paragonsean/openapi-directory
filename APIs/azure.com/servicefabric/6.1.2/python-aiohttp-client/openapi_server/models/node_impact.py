# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeImpact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, impact_level: str=None, node_name: str=None):
        """NodeImpact - a model defined in OpenAPI

        :param impact_level: The impact_level of this NodeImpact.
        :param node_name: The node_name of this NodeImpact.
        """
        self.openapi_types = {
            'impact_level': str,
            'node_name': str
        }

        self.attribute_map = {
            'impact_level': 'ImpactLevel',
            'node_name': 'NodeName'
        }

        self._impact_level = impact_level
        self._node_name = node_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeImpact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeImpact of this NodeImpact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def impact_level(self):
        """Gets the impact_level of this NodeImpact.

        The level of impact expected.

        :return: The impact_level of this NodeImpact.
        :rtype: str
        """
        return self._impact_level

    @impact_level.setter
    def impact_level(self, impact_level):
        """Sets the impact_level of this NodeImpact.

        The level of impact expected.

        :param impact_level: The impact_level of this NodeImpact.
        :type impact_level: str
        """
        allowed_values = ["Invalid", "None", "Restart", "RemoveData", "RemoveNode"]  # noqa: E501
        if impact_level not in allowed_values:
            raise ValueError(
                "Invalid value for `impact_level` ({0}), must be one of {1}"
                .format(impact_level, allowed_values)
            )

        self._impact_level = impact_level

    @property
    def node_name(self):
        """Gets the node_name of this NodeImpact.

        The name of the impacted node.

        :return: The node_name of this NodeImpact.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeImpact.

        The name of the impacted node.

        :param node_name: The node_name of this NodeImpact.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name
