# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployed_application_health_state_filter import DeployedApplicationHealthStateFilter
from openapi_server.models.service_health_state_filter import ServiceHealthStateFilter
from openapi_server import util


class ApplicationHealthStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name_filter: str=None, application_type_name_filter: str=None, deployed_application_filters: List[DeployedApplicationHealthStateFilter]=None, health_state_filter: int=None, service_filters: List[ServiceHealthStateFilter]=None):
        """ApplicationHealthStateFilter - a model defined in OpenAPI

        :param application_name_filter: The application_name_filter of this ApplicationHealthStateFilter.
        :param application_type_name_filter: The application_type_name_filter of this ApplicationHealthStateFilter.
        :param deployed_application_filters: The deployed_application_filters of this ApplicationHealthStateFilter.
        :param health_state_filter: The health_state_filter of this ApplicationHealthStateFilter.
        :param service_filters: The service_filters of this ApplicationHealthStateFilter.
        """
        self.openapi_types = {
            'application_name_filter': str,
            'application_type_name_filter': str,
            'deployed_application_filters': List[DeployedApplicationHealthStateFilter],
            'health_state_filter': int,
            'service_filters': List[ServiceHealthStateFilter]
        }

        self.attribute_map = {
            'application_name_filter': 'ApplicationNameFilter',
            'application_type_name_filter': 'ApplicationTypeNameFilter',
            'deployed_application_filters': 'DeployedApplicationFilters',
            'health_state_filter': 'HealthStateFilter',
            'service_filters': 'ServiceFilters'
        }

        self._application_name_filter = application_name_filter
        self._application_type_name_filter = application_type_name_filter
        self._deployed_application_filters = deployed_application_filters
        self._health_state_filter = health_state_filter
        self._service_filters = service_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationHealthStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationHealthStateFilter of this ApplicationHealthStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name_filter(self):
        """Gets the application_name_filter of this ApplicationHealthStateFilter.

        The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists. If the application doesn't exist, no application is returned in the cluster health chunk based on this filter. If the application exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter. 

        :return: The application_name_filter of this ApplicationHealthStateFilter.
        :rtype: str
        """
        return self._application_name_filter

    @application_name_filter.setter
    def application_name_filter(self, application_name_filter):
        """Sets the application_name_filter of this ApplicationHealthStateFilter.

        The name of the application that matches the filter, as a fabric uri. The filter is applied only to the specified application, if it exists. If the application doesn't exist, no application is returned in the cluster health chunk based on this filter. If the application exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter. 

        :param application_name_filter: The application_name_filter of this ApplicationHealthStateFilter.
        :type application_name_filter: str
        """

        self._application_name_filter = application_name_filter

    @property
    def application_type_name_filter(self):
        """Gets the application_type_name_filter of this ApplicationHealthStateFilter.

        The name of the application type that matches the filter. If specified, the filter is applied only to applications of the selected application type, if any exists. If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter. Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter. 

        :return: The application_type_name_filter of this ApplicationHealthStateFilter.
        :rtype: str
        """
        return self._application_type_name_filter

    @application_type_name_filter.setter
    def application_type_name_filter(self, application_type_name_filter):
        """Sets the application_type_name_filter of this ApplicationHealthStateFilter.

        The name of the application type that matches the filter. If specified, the filter is applied only to applications of the selected application type, if any exists. If no applications of the specified application type exists, no application is returned in the cluster health chunk based on this filter. Each application of the specified application type is included in the cluster health chunk if it respects the other filter properties. If not specified, all applications are matched against the other filter members, like health state filter. 

        :param application_type_name_filter: The application_type_name_filter of this ApplicationHealthStateFilter.
        :type application_type_name_filter: str
        """

        self._application_type_name_filter = application_type_name_filter

    @property
    def deployed_application_filters(self):
        """Gets the deployed_application_filters of this ApplicationHealthStateFilter.

        Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter. If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple deployed application filters. For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node. 

        :return: The deployed_application_filters of this ApplicationHealthStateFilter.
        :rtype: List[DeployedApplicationHealthStateFilter]
        """
        return self._deployed_application_filters

    @deployed_application_filters.setter
    def deployed_application_filters(self, deployed_application_filters):
        """Sets the deployed_application_filters of this ApplicationHealthStateFilter.

        Defines a list of filters that specify which deployed applications to be included in the returned cluster health chunk as children of the application. The deployed applications are returned only if the parent application matches a filter. If the list is empty, no deployed applications are returned. All the deployed applications are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple deployed application filters. For example, it can specify a filter to return all deployed applications with health state Error and another filter to always include a deployed application on a specified node. 

        :param deployed_application_filters: The deployed_application_filters of this ApplicationHealthStateFilter.
        :type deployed_application_filters: List[DeployedApplicationHealthStateFilter]
        """

        self._deployed_application_filters = deployed_application_filters

    @property
    def health_state_filter(self):
        """Gets the health_state_filter of this ApplicationHealthStateFilter.

        The filter for the health state of the applications. It allows selecting applications if they match the desired health states. The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 

        :return: The health_state_filter of this ApplicationHealthStateFilter.
        :rtype: int
        """
        return self._health_state_filter

    @health_state_filter.setter
    def health_state_filter(self, health_state_filter):
        """Sets the health_state_filter of this ApplicationHealthStateFilter.

        The filter for the health state of the applications. It allows selecting applications if they match the desired health states. The possible values are integer value of one of the following health states. Only applications that match the filter are returned. All applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the application name or the application type name are specified. If the filter has default value and application name is specified, the matching application is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535. 

        :param health_state_filter: The health_state_filter of this ApplicationHealthStateFilter.
        :type health_state_filter: int
        """

        self._health_state_filter = health_state_filter

    @property
    def service_filters(self):
        """Gets the service_filters of this ApplicationHealthStateFilter.

        Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter. If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple service filters. For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name. 

        :return: The service_filters of this ApplicationHealthStateFilter.
        :rtype: List[ServiceHealthStateFilter]
        """
        return self._service_filters

    @service_filters.setter
    def service_filters(self, service_filters):
        """Sets the service_filters of this ApplicationHealthStateFilter.

        Defines a list of filters that specify which services to be included in the returned cluster health chunk as children of the application. The services are returned only if the parent application matches a filter. If the list is empty, no services are returned. All the services are used to evaluate the parent application aggregated health state, regardless of the input filters. The application filter may specify multiple service filters. For example, it can specify a filter to return all services with health state Error and another filter to always include a service identified by its service name. 

        :param service_filters: The service_filters of this ApplicationHealthStateFilter.
        :type service_filters: List[ServiceHealthStateFilter]
        """

        self._service_filters = service_filters
