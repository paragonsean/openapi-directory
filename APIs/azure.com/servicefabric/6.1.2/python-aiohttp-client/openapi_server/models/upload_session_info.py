# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_chunk_range import UploadChunkRange
from openapi_server import util


class UploadSessionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_ranges: List[UploadChunkRange]=None, file_size: str=None, modified_date: datetime=None, session_id: str=None, store_relative_path: str=None):
        """UploadSessionInfo - a model defined in OpenAPI

        :param expected_ranges: The expected_ranges of this UploadSessionInfo.
        :param file_size: The file_size of this UploadSessionInfo.
        :param modified_date: The modified_date of this UploadSessionInfo.
        :param session_id: The session_id of this UploadSessionInfo.
        :param store_relative_path: The store_relative_path of this UploadSessionInfo.
        """
        self.openapi_types = {
            'expected_ranges': List[UploadChunkRange],
            'file_size': str,
            'modified_date': datetime,
            'session_id': str,
            'store_relative_path': str
        }

        self.attribute_map = {
            'expected_ranges': 'ExpectedRanges',
            'file_size': 'FileSize',
            'modified_date': 'ModifiedDate',
            'session_id': 'SessionId',
            'store_relative_path': 'StoreRelativePath'
        }

        self._expected_ranges = expected_ranges
        self._file_size = file_size
        self._modified_date = modified_date
        self._session_id = session_id
        self._store_relative_path = store_relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadSessionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadSessionInfo of this UploadSessionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_ranges(self):
        """Gets the expected_ranges of this UploadSessionInfo.

        List of chunk ranges that image store has not received yet.

        :return: The expected_ranges of this UploadSessionInfo.
        :rtype: List[UploadChunkRange]
        """
        return self._expected_ranges

    @expected_ranges.setter
    def expected_ranges(self, expected_ranges):
        """Sets the expected_ranges of this UploadSessionInfo.

        List of chunk ranges that image store has not received yet.

        :param expected_ranges: The expected_ranges of this UploadSessionInfo.
        :type expected_ranges: List[UploadChunkRange]
        """

        self._expected_ranges = expected_ranges

    @property
    def file_size(self):
        """Gets the file_size of this UploadSessionInfo.

        The size in bytes of the uploading file.

        :return: The file_size of this UploadSessionInfo.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this UploadSessionInfo.

        The size in bytes of the uploading file.

        :param file_size: The file_size of this UploadSessionInfo.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def modified_date(self):
        """Gets the modified_date of this UploadSessionInfo.

        The date and time when the upload session was last modified.

        :return: The modified_date of this UploadSessionInfo.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this UploadSessionInfo.

        The date and time when the upload session was last modified.

        :param modified_date: The modified_date of this UploadSessionInfo.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def session_id(self):
        """Gets the session_id of this UploadSessionInfo.

        A unique ID of the upload session. A session ID can be reused only if the session was committed or removed.

        :return: The session_id of this UploadSessionInfo.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this UploadSessionInfo.

        A unique ID of the upload session. A session ID can be reused only if the session was committed or removed.

        :param session_id: The session_id of this UploadSessionInfo.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def store_relative_path(self):
        """Gets the store_relative_path of this UploadSessionInfo.

        The remote location within image store. This path is relative to the image store root.

        :return: The store_relative_path of this UploadSessionInfo.
        :rtype: str
        """
        return self._store_relative_path

    @store_relative_path.setter
    def store_relative_path(self, store_relative_path):
        """Sets the store_relative_path of this UploadSessionInfo.

        The remote location within image store. This path is relative to the image store root.

        :param store_relative_path: The store_relative_path of this UploadSessionInfo.
        :type store_relative_path: str
        """

        self._store_relative_path = store_relative_path
