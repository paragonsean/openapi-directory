# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChaosTargetFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_inclusion_list: List[str]=None, node_type_inclusion_list: List[str]=None):
        """ChaosTargetFilter - a model defined in OpenAPI

        :param application_inclusion_list: The application_inclusion_list of this ChaosTargetFilter.
        :param node_type_inclusion_list: The node_type_inclusion_list of this ChaosTargetFilter.
        """
        self.openapi_types = {
            'application_inclusion_list': List[str],
            'node_type_inclusion_list': List[str]
        }

        self.attribute_map = {
            'application_inclusion_list': 'ApplicationInclusionList',
            'node_type_inclusion_list': 'NodeTypeInclusionList'
        }

        self._application_inclusion_list = application_inclusion_list
        self._node_type_inclusion_list = node_type_inclusion_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosTargetFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosTargetFilter of this ChaosTargetFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_inclusion_list(self):
        """Gets the application_inclusion_list of this ChaosTargetFilter.

        A list of application URI's to include in Chaos faults. All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove replica, move primary, and move secondary) by Chaos. Chaos may restart a code package only if the code package hosts replicas of these applications only. If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is included in NodeTypeInclusionList. However if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted. At most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration. 

        :return: The application_inclusion_list of this ChaosTargetFilter.
        :rtype: List[str]
        """
        return self._application_inclusion_list

    @application_inclusion_list.setter
    def application_inclusion_list(self, application_inclusion_list):
        """Sets the application_inclusion_list of this ChaosTargetFilter.

        A list of application URI's to include in Chaos faults. All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove replica, move primary, and move secondary) by Chaos. Chaos may restart a code package only if the code package hosts replicas of these applications only. If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is included in NodeTypeInclusionList. However if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted. At most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration. 

        :param application_inclusion_list: The application_inclusion_list of this ChaosTargetFilter.
        :type application_inclusion_list: List[str]
        """

        self._application_inclusion_list = application_inclusion_list

    @property
    def node_type_inclusion_list(self):
        """Gets the node_type_inclusion_list of this ChaosTargetFilter.

        A list of node types to include in Chaos faults. All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types. If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList. happens to reside on a node of NodeTypeX. At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration. 

        :return: The node_type_inclusion_list of this ChaosTargetFilter.
        :rtype: List[str]
        """
        return self._node_type_inclusion_list

    @node_type_inclusion_list.setter
    def node_type_inclusion_list(self, node_type_inclusion_list):
        """Sets the node_type_inclusion_list of this ChaosTargetFilter.

        A list of node types to include in Chaos faults. All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types. If a nodetype (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList. happens to reside on a node of NodeTypeX. At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration. 

        :param node_type_inclusion_list: The node_type_inclusion_list of this ChaosTargetFilter.
        :type node_type_inclusion_list: List[str]
        """

        self._node_type_inclusion_list = node_type_inclusion_list
