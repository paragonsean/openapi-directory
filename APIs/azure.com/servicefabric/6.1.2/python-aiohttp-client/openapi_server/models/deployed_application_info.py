# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployed_application_status import DeployedApplicationStatus
from openapi_server.models.health_state import HealthState
from openapi_server import util


class DeployedApplicationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state: HealthState=None, id: str=None, log_directory: str=None, name: str=None, status: DeployedApplicationStatus=None, temp_directory: str=None, type_name: str=None, work_directory: str=None):
        """DeployedApplicationInfo - a model defined in OpenAPI

        :param health_state: The health_state of this DeployedApplicationInfo.
        :param id: The id of this DeployedApplicationInfo.
        :param log_directory: The log_directory of this DeployedApplicationInfo.
        :param name: The name of this DeployedApplicationInfo.
        :param status: The status of this DeployedApplicationInfo.
        :param temp_directory: The temp_directory of this DeployedApplicationInfo.
        :param type_name: The type_name of this DeployedApplicationInfo.
        :param work_directory: The work_directory of this DeployedApplicationInfo.
        """
        self.openapi_types = {
            'health_state': HealthState,
            'id': str,
            'log_directory': str,
            'name': str,
            'status': DeployedApplicationStatus,
            'temp_directory': str,
            'type_name': str,
            'work_directory': str
        }

        self.attribute_map = {
            'health_state': 'HealthState',
            'id': 'Id',
            'log_directory': 'LogDirectory',
            'name': 'Name',
            'status': 'Status',
            'temp_directory': 'TempDirectory',
            'type_name': 'TypeName',
            'work_directory': 'WorkDirectory'
        }

        self._health_state = health_state
        self._id = id
        self._log_directory = log_directory
        self._name = name
        self._status = status
        self._temp_directory = temp_directory
        self._type_name = type_name
        self._work_directory = work_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedApplicationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedApplicationInfo of this DeployedApplicationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state(self):
        """Gets the health_state of this DeployedApplicationInfo.


        :return: The health_state of this DeployedApplicationInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this DeployedApplicationInfo.


        :param health_state: The health_state of this DeployedApplicationInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this DeployedApplicationInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions. 

        :return: The id of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeployedApplicationInfo.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions. 

        :param id: The id of this DeployedApplicationInfo.
        :type id: str
        """

        self._id = id

    @property
    def log_directory(self):
        """Gets the log_directory of this DeployedApplicationInfo.

        The log directory of the application on the node. The log directory can be used to store application logs.

        :return: The log_directory of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._log_directory

    @log_directory.setter
    def log_directory(self, log_directory):
        """Sets the log_directory of this DeployedApplicationInfo.

        The log directory of the application on the node. The log directory can be used to store application logs.

        :param log_directory: The log_directory of this DeployedApplicationInfo.
        :type log_directory: str
        """

        self._log_directory = log_directory

    @property
    def name(self):
        """Gets the name of this DeployedApplicationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The name of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeployedApplicationInfo.

        The name of the application, including the 'fabric:' URI scheme.

        :param name: The name of this DeployedApplicationInfo.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DeployedApplicationInfo.


        :return: The status of this DeployedApplicationInfo.
        :rtype: DeployedApplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeployedApplicationInfo.


        :param status: The status of this DeployedApplicationInfo.
        :type status: DeployedApplicationStatus
        """

        self._status = status

    @property
    def temp_directory(self):
        """Gets the temp_directory of this DeployedApplicationInfo.

        The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory.

        :return: The temp_directory of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._temp_directory

    @temp_directory.setter
    def temp_directory(self, temp_directory):
        """Sets the temp_directory of this DeployedApplicationInfo.

        The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory.

        :param temp_directory: The temp_directory of this DeployedApplicationInfo.
        :type temp_directory: str
        """

        self._temp_directory = temp_directory

    @property
    def type_name(self):
        """Gets the type_name of this DeployedApplicationInfo.

        The application type name as defined in the application manifest.

        :return: The type_name of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this DeployedApplicationInfo.

        The application type name as defined in the application manifest.

        :param type_name: The type_name of this DeployedApplicationInfo.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def work_directory(self):
        """Gets the work_directory of this DeployedApplicationInfo.

        The work directory of the application on the node. The work directory can be used to store application data.

        :return: The work_directory of this DeployedApplicationInfo.
        :rtype: str
        """
        return self._work_directory

    @work_directory.setter
    def work_directory(self, work_directory):
        """Sets the work_directory of this DeployedApplicationInfo.

        The work directory of the application on the node. The work directory can be used to store application data.

        :param work_directory: The work_directory of this DeployedApplicationInfo.
        :type work_directory: str
        """

        self._work_directory = work_directory
