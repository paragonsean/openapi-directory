# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_cost import MoveCost
from openapi_server.models.partition_scheme_description import PartitionSchemeDescription
from openapi_server.models.service_correlation_description import ServiceCorrelationDescription
from openapi_server.models.service_description import ServiceDescription
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_server.models.service_package_activation_mode import ServicePackageActivationMode
from openapi_server.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_server import util


class StatefulServiceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flags: int=None, has_persisted_state: bool=None, min_replica_set_size: int=None, quorum_loss_wait_duration_seconds: int=None, replica_restart_wait_duration_seconds: int=None, stand_by_replica_keep_duration_seconds: int=None, target_replica_set_size: int=None, application_name: str=None, correlation_scheme: List[ServiceCorrelationDescription]=None, default_move_cost: MoveCost=None, initialization_data: List[int]=None, is_default_move_cost_specified: bool=None, partition_description: PartitionSchemeDescription=None, placement_constraints: str=None, service_dns_name: str=None, service_kind: ServiceKind=None, service_load_metrics: List[ServiceLoadMetricDescription]=None, service_name: str=None, service_package_activation_mode: ServicePackageActivationMode=None, service_placement_policies: List[ServicePlacementPolicyDescription]=None, service_type_name: str=None):
        """StatefulServiceDescription - a model defined in OpenAPI

        :param flags: The flags of this StatefulServiceDescription.
        :param has_persisted_state: The has_persisted_state of this StatefulServiceDescription.
        :param min_replica_set_size: The min_replica_set_size of this StatefulServiceDescription.
        :param quorum_loss_wait_duration_seconds: The quorum_loss_wait_duration_seconds of this StatefulServiceDescription.
        :param replica_restart_wait_duration_seconds: The replica_restart_wait_duration_seconds of this StatefulServiceDescription.
        :param stand_by_replica_keep_duration_seconds: The stand_by_replica_keep_duration_seconds of this StatefulServiceDescription.
        :param target_replica_set_size: The target_replica_set_size of this StatefulServiceDescription.
        :param application_name: The application_name of this StatefulServiceDescription.
        :param correlation_scheme: The correlation_scheme of this StatefulServiceDescription.
        :param default_move_cost: The default_move_cost of this StatefulServiceDescription.
        :param initialization_data: The initialization_data of this StatefulServiceDescription.
        :param is_default_move_cost_specified: The is_default_move_cost_specified of this StatefulServiceDescription.
        :param partition_description: The partition_description of this StatefulServiceDescription.
        :param placement_constraints: The placement_constraints of this StatefulServiceDescription.
        :param service_dns_name: The service_dns_name of this StatefulServiceDescription.
        :param service_kind: The service_kind of this StatefulServiceDescription.
        :param service_load_metrics: The service_load_metrics of this StatefulServiceDescription.
        :param service_name: The service_name of this StatefulServiceDescription.
        :param service_package_activation_mode: The service_package_activation_mode of this StatefulServiceDescription.
        :param service_placement_policies: The service_placement_policies of this StatefulServiceDescription.
        :param service_type_name: The service_type_name of this StatefulServiceDescription.
        """
        self.openapi_types = {
            'flags': int,
            'has_persisted_state': bool,
            'min_replica_set_size': int,
            'quorum_loss_wait_duration_seconds': int,
            'replica_restart_wait_duration_seconds': int,
            'stand_by_replica_keep_duration_seconds': int,
            'target_replica_set_size': int,
            'application_name': str,
            'correlation_scheme': List[ServiceCorrelationDescription],
            'default_move_cost': MoveCost,
            'initialization_data': List[int],
            'is_default_move_cost_specified': bool,
            'partition_description': PartitionSchemeDescription,
            'placement_constraints': str,
            'service_dns_name': str,
            'service_kind': ServiceKind,
            'service_load_metrics': List[ServiceLoadMetricDescription],
            'service_name': str,
            'service_package_activation_mode': ServicePackageActivationMode,
            'service_placement_policies': List[ServicePlacementPolicyDescription],
            'service_type_name': str
        }

        self.attribute_map = {
            'flags': 'Flags',
            'has_persisted_state': 'HasPersistedState',
            'min_replica_set_size': 'MinReplicaSetSize',
            'quorum_loss_wait_duration_seconds': 'QuorumLossWaitDurationSeconds',
            'replica_restart_wait_duration_seconds': 'ReplicaRestartWaitDurationSeconds',
            'stand_by_replica_keep_duration_seconds': 'StandByReplicaKeepDurationSeconds',
            'target_replica_set_size': 'TargetReplicaSetSize',
            'application_name': 'ApplicationName',
            'correlation_scheme': 'CorrelationScheme',
            'default_move_cost': 'DefaultMoveCost',
            'initialization_data': 'InitializationData',
            'is_default_move_cost_specified': 'IsDefaultMoveCostSpecified',
            'partition_description': 'PartitionDescription',
            'placement_constraints': 'PlacementConstraints',
            'service_dns_name': 'ServiceDnsName',
            'service_kind': 'ServiceKind',
            'service_load_metrics': 'ServiceLoadMetrics',
            'service_name': 'ServiceName',
            'service_package_activation_mode': 'ServicePackageActivationMode',
            'service_placement_policies': 'ServicePlacementPolicies',
            'service_type_name': 'ServiceTypeName'
        }

        self._flags = flags
        self._has_persisted_state = has_persisted_state
        self._min_replica_set_size = min_replica_set_size
        self._quorum_loss_wait_duration_seconds = quorum_loss_wait_duration_seconds
        self._replica_restart_wait_duration_seconds = replica_restart_wait_duration_seconds
        self._stand_by_replica_keep_duration_seconds = stand_by_replica_keep_duration_seconds
        self._target_replica_set_size = target_replica_set_size
        self._application_name = application_name
        self._correlation_scheme = correlation_scheme
        self._default_move_cost = default_move_cost
        self._initialization_data = initialization_data
        self._is_default_move_cost_specified = is_default_move_cost_specified
        self._partition_description = partition_description
        self._placement_constraints = placement_constraints
        self._service_dns_name = service_dns_name
        self._service_kind = service_kind
        self._service_load_metrics = service_load_metrics
        self._service_name = service_name
        self._service_package_activation_mode = service_package_activation_mode
        self._service_placement_policies = service_placement_policies
        self._service_type_name = service_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulServiceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulServiceDescription of this StatefulServiceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flags(self):
        """Gets the flags of this StatefulServiceDescription.

        Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.  - None - Does not indicate any other properties are set. The value is zero. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4. 

        :return: The flags of this StatefulServiceDescription.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this StatefulServiceDescription.

        Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for QuorumLossWaitDuration (2) and StandByReplicaKeepDuration(4) are set.  - None - Does not indicate any other properties are set. The value is zero. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is 1. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 2. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 4. 

        :param flags: The flags of this StatefulServiceDescription.
        :type flags: int
        """

        self._flags = flags

    @property
    def has_persisted_state(self):
        """Gets the has_persisted_state of this StatefulServiceDescription.

        A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.

        :return: The has_persisted_state of this StatefulServiceDescription.
        :rtype: bool
        """
        return self._has_persisted_state

    @has_persisted_state.setter
    def has_persisted_state(self, has_persisted_state):
        """Sets the has_persisted_state of this StatefulServiceDescription.

        A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.

        :param has_persisted_state: The has_persisted_state of this StatefulServiceDescription.
        :type has_persisted_state: bool
        """
        if has_persisted_state is None:
            raise ValueError("Invalid value for `has_persisted_state`, must not be `None`")

        self._has_persisted_state = has_persisted_state

    @property
    def min_replica_set_size(self):
        """Gets the min_replica_set_size of this StatefulServiceDescription.

        The minimum replica set size as a number.

        :return: The min_replica_set_size of this StatefulServiceDescription.
        :rtype: int
        """
        return self._min_replica_set_size

    @min_replica_set_size.setter
    def min_replica_set_size(self, min_replica_set_size):
        """Sets the min_replica_set_size of this StatefulServiceDescription.

        The minimum replica set size as a number.

        :param min_replica_set_size: The min_replica_set_size of this StatefulServiceDescription.
        :type min_replica_set_size: int
        """
        if min_replica_set_size is None:
            raise ValueError("Invalid value for `min_replica_set_size`, must not be `None`")
        if min_replica_set_size is not None and min_replica_set_size < 1:
            raise ValueError("Invalid value for `min_replica_set_size`, must be a value greater than or equal to `1`")

        self._min_replica_set_size = min_replica_set_size

    @property
    def quorum_loss_wait_duration_seconds(self):
        """Gets the quorum_loss_wait_duration_seconds of this StatefulServiceDescription.

        The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.

        :return: The quorum_loss_wait_duration_seconds of this StatefulServiceDescription.
        :rtype: int
        """
        return self._quorum_loss_wait_duration_seconds

    @quorum_loss_wait_duration_seconds.setter
    def quorum_loss_wait_duration_seconds(self, quorum_loss_wait_duration_seconds):
        """Sets the quorum_loss_wait_duration_seconds of this StatefulServiceDescription.

        The maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.

        :param quorum_loss_wait_duration_seconds: The quorum_loss_wait_duration_seconds of this StatefulServiceDescription.
        :type quorum_loss_wait_duration_seconds: int
        """
        if quorum_loss_wait_duration_seconds is not None and quorum_loss_wait_duration_seconds > 4294967295:
            raise ValueError("Invalid value for `quorum_loss_wait_duration_seconds`, must be a value less than or equal to `4294967295`")
        if quorum_loss_wait_duration_seconds is not None and quorum_loss_wait_duration_seconds < 0:
            raise ValueError("Invalid value for `quorum_loss_wait_duration_seconds`, must be a value greater than or equal to `0`")

        self._quorum_loss_wait_duration_seconds = quorum_loss_wait_duration_seconds

    @property
    def replica_restart_wait_duration_seconds(self):
        """Gets the replica_restart_wait_duration_seconds of this StatefulServiceDescription.

        The duration, in seconds, between when a replica goes down and when a new replica is created.

        :return: The replica_restart_wait_duration_seconds of this StatefulServiceDescription.
        :rtype: int
        """
        return self._replica_restart_wait_duration_seconds

    @replica_restart_wait_duration_seconds.setter
    def replica_restart_wait_duration_seconds(self, replica_restart_wait_duration_seconds):
        """Sets the replica_restart_wait_duration_seconds of this StatefulServiceDescription.

        The duration, in seconds, between when a replica goes down and when a new replica is created.

        :param replica_restart_wait_duration_seconds: The replica_restart_wait_duration_seconds of this StatefulServiceDescription.
        :type replica_restart_wait_duration_seconds: int
        """
        if replica_restart_wait_duration_seconds is not None and replica_restart_wait_duration_seconds > 4294967295:
            raise ValueError("Invalid value for `replica_restart_wait_duration_seconds`, must be a value less than or equal to `4294967295`")
        if replica_restart_wait_duration_seconds is not None and replica_restart_wait_duration_seconds < 0:
            raise ValueError("Invalid value for `replica_restart_wait_duration_seconds`, must be a value greater than or equal to `0`")

        self._replica_restart_wait_duration_seconds = replica_restart_wait_duration_seconds

    @property
    def stand_by_replica_keep_duration_seconds(self):
        """Gets the stand_by_replica_keep_duration_seconds of this StatefulServiceDescription.

        The definition on how long StandBy replicas should be maintained before being removed.

        :return: The stand_by_replica_keep_duration_seconds of this StatefulServiceDescription.
        :rtype: int
        """
        return self._stand_by_replica_keep_duration_seconds

    @stand_by_replica_keep_duration_seconds.setter
    def stand_by_replica_keep_duration_seconds(self, stand_by_replica_keep_duration_seconds):
        """Sets the stand_by_replica_keep_duration_seconds of this StatefulServiceDescription.

        The definition on how long StandBy replicas should be maintained before being removed.

        :param stand_by_replica_keep_duration_seconds: The stand_by_replica_keep_duration_seconds of this StatefulServiceDescription.
        :type stand_by_replica_keep_duration_seconds: int
        """
        if stand_by_replica_keep_duration_seconds is not None and stand_by_replica_keep_duration_seconds > 4294967295:
            raise ValueError("Invalid value for `stand_by_replica_keep_duration_seconds`, must be a value less than or equal to `4294967295`")
        if stand_by_replica_keep_duration_seconds is not None and stand_by_replica_keep_duration_seconds < 0:
            raise ValueError("Invalid value for `stand_by_replica_keep_duration_seconds`, must be a value greater than or equal to `0`")

        self._stand_by_replica_keep_duration_seconds = stand_by_replica_keep_duration_seconds

    @property
    def target_replica_set_size(self):
        """Gets the target_replica_set_size of this StatefulServiceDescription.

        The target replica set size as a number.

        :return: The target_replica_set_size of this StatefulServiceDescription.
        :rtype: int
        """
        return self._target_replica_set_size

    @target_replica_set_size.setter
    def target_replica_set_size(self, target_replica_set_size):
        """Sets the target_replica_set_size of this StatefulServiceDescription.

        The target replica set size as a number.

        :param target_replica_set_size: The target_replica_set_size of this StatefulServiceDescription.
        :type target_replica_set_size: int
        """
        if target_replica_set_size is None:
            raise ValueError("Invalid value for `target_replica_set_size`, must not be `None`")
        if target_replica_set_size is not None and target_replica_set_size < 1:
            raise ValueError("Invalid value for `target_replica_set_size`, must be a value greater than or equal to `1`")

        self._target_replica_set_size = target_replica_set_size

    @property
    def application_name(self):
        """Gets the application_name of this StatefulServiceDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The application_name of this StatefulServiceDescription.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this StatefulServiceDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :param application_name: The application_name of this StatefulServiceDescription.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def correlation_scheme(self):
        """Gets the correlation_scheme of this StatefulServiceDescription.

        A list that describes the correlation of the service with other services.

        :return: The correlation_scheme of this StatefulServiceDescription.
        :rtype: List[ServiceCorrelationDescription]
        """
        return self._correlation_scheme

    @correlation_scheme.setter
    def correlation_scheme(self, correlation_scheme):
        """Sets the correlation_scheme of this StatefulServiceDescription.

        A list that describes the correlation of the service with other services.

        :param correlation_scheme: The correlation_scheme of this StatefulServiceDescription.
        :type correlation_scheme: List[ServiceCorrelationDescription]
        """

        self._correlation_scheme = correlation_scheme

    @property
    def default_move_cost(self):
        """Gets the default_move_cost of this StatefulServiceDescription.


        :return: The default_move_cost of this StatefulServiceDescription.
        :rtype: MoveCost
        """
        return self._default_move_cost

    @default_move_cost.setter
    def default_move_cost(self, default_move_cost):
        """Sets the default_move_cost of this StatefulServiceDescription.


        :param default_move_cost: The default_move_cost of this StatefulServiceDescription.
        :type default_move_cost: MoveCost
        """

        self._default_move_cost = default_move_cost

    @property
    def initialization_data(self):
        """Gets the initialization_data of this StatefulServiceDescription.

        Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.

        :return: The initialization_data of this StatefulServiceDescription.
        :rtype: List[int]
        """
        return self._initialization_data

    @initialization_data.setter
    def initialization_data(self, initialization_data):
        """Sets the initialization_data of this StatefulServiceDescription.

        Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.

        :param initialization_data: The initialization_data of this StatefulServiceDescription.
        :type initialization_data: List[int]
        """

        self._initialization_data = initialization_data

    @property
    def is_default_move_cost_specified(self):
        """Gets the is_default_move_cost_specified of this StatefulServiceDescription.

        Indicates if the DefaultMoveCost property is specified.

        :return: The is_default_move_cost_specified of this StatefulServiceDescription.
        :rtype: bool
        """
        return self._is_default_move_cost_specified

    @is_default_move_cost_specified.setter
    def is_default_move_cost_specified(self, is_default_move_cost_specified):
        """Sets the is_default_move_cost_specified of this StatefulServiceDescription.

        Indicates if the DefaultMoveCost property is specified.

        :param is_default_move_cost_specified: The is_default_move_cost_specified of this StatefulServiceDescription.
        :type is_default_move_cost_specified: bool
        """

        self._is_default_move_cost_specified = is_default_move_cost_specified

    @property
    def partition_description(self):
        """Gets the partition_description of this StatefulServiceDescription.


        :return: The partition_description of this StatefulServiceDescription.
        :rtype: PartitionSchemeDescription
        """
        return self._partition_description

    @partition_description.setter
    def partition_description(self, partition_description):
        """Sets the partition_description of this StatefulServiceDescription.


        :param partition_description: The partition_description of this StatefulServiceDescription.
        :type partition_description: PartitionSchemeDescription
        """
        if partition_description is None:
            raise ValueError("Invalid value for `partition_description`, must not be `None`")

        self._partition_description = partition_description

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this StatefulServiceDescription.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :return: The placement_constraints of this StatefulServiceDescription.
        :rtype: str
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this StatefulServiceDescription.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :param placement_constraints: The placement_constraints of this StatefulServiceDescription.
        :type placement_constraints: str
        """

        self._placement_constraints = placement_constraints

    @property
    def service_dns_name(self):
        """Gets the service_dns_name of this StatefulServiceDescription.

        The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.

        :return: The service_dns_name of this StatefulServiceDescription.
        :rtype: str
        """
        return self._service_dns_name

    @service_dns_name.setter
    def service_dns_name(self, service_dns_name):
        """Sets the service_dns_name of this StatefulServiceDescription.

        The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.

        :param service_dns_name: The service_dns_name of this StatefulServiceDescription.
        :type service_dns_name: str
        """

        self._service_dns_name = service_dns_name

    @property
    def service_kind(self):
        """Gets the service_kind of this StatefulServiceDescription.


        :return: The service_kind of this StatefulServiceDescription.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatefulServiceDescription.


        :param service_kind: The service_kind of this StatefulServiceDescription.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def service_load_metrics(self):
        """Gets the service_load_metrics of this StatefulServiceDescription.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :return: The service_load_metrics of this StatefulServiceDescription.
        :rtype: List[ServiceLoadMetricDescription]
        """
        return self._service_load_metrics

    @service_load_metrics.setter
    def service_load_metrics(self, service_load_metrics):
        """Sets the service_load_metrics of this StatefulServiceDescription.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :param service_load_metrics: The service_load_metrics of this StatefulServiceDescription.
        :type service_load_metrics: List[ServiceLoadMetricDescription]
        """

        self._service_load_metrics = service_load_metrics

    @property
    def service_name(self):
        """Gets the service_name of this StatefulServiceDescription.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this StatefulServiceDescription.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this StatefulServiceDescription.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this StatefulServiceDescription.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_package_activation_mode(self):
        """Gets the service_package_activation_mode of this StatefulServiceDescription.


        :return: The service_package_activation_mode of this StatefulServiceDescription.
        :rtype: ServicePackageActivationMode
        """
        return self._service_package_activation_mode

    @service_package_activation_mode.setter
    def service_package_activation_mode(self, service_package_activation_mode):
        """Sets the service_package_activation_mode of this StatefulServiceDescription.


        :param service_package_activation_mode: The service_package_activation_mode of this StatefulServiceDescription.
        :type service_package_activation_mode: ServicePackageActivationMode
        """

        self._service_package_activation_mode = service_package_activation_mode

    @property
    def service_placement_policies(self):
        """Gets the service_placement_policies of this StatefulServiceDescription.

        A list that describes the correlation of the service with other services.

        :return: The service_placement_policies of this StatefulServiceDescription.
        :rtype: List[ServicePlacementPolicyDescription]
        """
        return self._service_placement_policies

    @service_placement_policies.setter
    def service_placement_policies(self, service_placement_policies):
        """Sets the service_placement_policies of this StatefulServiceDescription.

        A list that describes the correlation of the service with other services.

        :param service_placement_policies: The service_placement_policies of this StatefulServiceDescription.
        :type service_placement_policies: List[ServicePlacementPolicyDescription]
        """

        self._service_placement_policies = service_placement_policies

    @property
    def service_type_name(self):
        """Gets the service_type_name of this StatefulServiceDescription.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this StatefulServiceDescription.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this StatefulServiceDescription.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this StatefulServiceDescription.
        :type service_type_name: str
        """
        if service_type_name is None:
            raise ValueError("Invalid value for `service_type_name`, must not be `None`")

        self._service_type_name = service_type_name
