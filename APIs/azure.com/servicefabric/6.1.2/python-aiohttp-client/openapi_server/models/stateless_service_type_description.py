# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_server.models.service_type_description import ServiceTypeDescription
from openapi_server.models.service_type_extension_description import ServiceTypeExtensionDescription
from openapi_server import util


class StatelessServiceTypeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, use_implicit_host: bool=None, extensions: List[ServiceTypeExtensionDescription]=None, is_stateful: bool=None, kind: ServiceKind=None, placement_constraints: str=None, service_placement_policies: List[ServicePlacementPolicyDescription]=None, service_type_name: str=None):
        """StatelessServiceTypeDescription - a model defined in OpenAPI

        :param use_implicit_host: The use_implicit_host of this StatelessServiceTypeDescription.
        :param extensions: The extensions of this StatelessServiceTypeDescription.
        :param is_stateful: The is_stateful of this StatelessServiceTypeDescription.
        :param kind: The kind of this StatelessServiceTypeDescription.
        :param placement_constraints: The placement_constraints of this StatelessServiceTypeDescription.
        :param service_placement_policies: The service_placement_policies of this StatelessServiceTypeDescription.
        :param service_type_name: The service_type_name of this StatelessServiceTypeDescription.
        """
        self.openapi_types = {
            'use_implicit_host': bool,
            'extensions': List[ServiceTypeExtensionDescription],
            'is_stateful': bool,
            'kind': ServiceKind,
            'placement_constraints': str,
            'service_placement_policies': List[ServicePlacementPolicyDescription],
            'service_type_name': str
        }

        self.attribute_map = {
            'use_implicit_host': 'UseImplicitHost',
            'extensions': 'Extensions',
            'is_stateful': 'IsStateful',
            'kind': 'Kind',
            'placement_constraints': 'PlacementConstraints',
            'service_placement_policies': 'ServicePlacementPolicies',
            'service_type_name': 'ServiceTypeName'
        }

        self._use_implicit_host = use_implicit_host
        self._extensions = extensions
        self._is_stateful = is_stateful
        self._kind = kind
        self._placement_constraints = placement_constraints
        self._service_placement_policies = service_placement_policies
        self._service_type_name = service_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatelessServiceTypeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatelessServiceTypeDescription of this StatelessServiceTypeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def use_implicit_host(self):
        """Gets the use_implicit_host of this StatelessServiceTypeDescription.

        A flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise.

        :return: The use_implicit_host of this StatelessServiceTypeDescription.
        :rtype: bool
        """
        return self._use_implicit_host

    @use_implicit_host.setter
    def use_implicit_host(self, use_implicit_host):
        """Sets the use_implicit_host of this StatelessServiceTypeDescription.

        A flag indicating if this type is not implemented and hosted by a user service process, but is implicitly hosted by a system created process. This value is true for services using the guest executable services, false otherwise.

        :param use_implicit_host: The use_implicit_host of this StatelessServiceTypeDescription.
        :type use_implicit_host: bool
        """

        self._use_implicit_host = use_implicit_host

    @property
    def extensions(self):
        """Gets the extensions of this StatelessServiceTypeDescription.

        List of service type extensions.

        :return: The extensions of this StatelessServiceTypeDescription.
        :rtype: List[ServiceTypeExtensionDescription]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this StatelessServiceTypeDescription.

        List of service type extensions.

        :param extensions: The extensions of this StatelessServiceTypeDescription.
        :type extensions: List[ServiceTypeExtensionDescription]
        """

        self._extensions = extensions

    @property
    def is_stateful(self):
        """Gets the is_stateful of this StatelessServiceTypeDescription.

        Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.

        :return: The is_stateful of this StatelessServiceTypeDescription.
        :rtype: bool
        """
        return self._is_stateful

    @is_stateful.setter
    def is_stateful(self, is_stateful):
        """Sets the is_stateful of this StatelessServiceTypeDescription.

        Indicates whether the service type is a stateful service type or a stateless service type. This property is true if the service type is a stateful service type, false otherwise.

        :param is_stateful: The is_stateful of this StatelessServiceTypeDescription.
        :type is_stateful: bool
        """

        self._is_stateful = is_stateful

    @property
    def kind(self):
        """Gets the kind of this StatelessServiceTypeDescription.


        :return: The kind of this StatelessServiceTypeDescription.
        :rtype: ServiceKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this StatelessServiceTypeDescription.


        :param kind: The kind of this StatelessServiceTypeDescription.
        :type kind: ServiceKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this StatelessServiceTypeDescription.

        The placement constraint to be used when instantiating this service in a Service Fabric cluster.

        :return: The placement_constraints of this StatelessServiceTypeDescription.
        :rtype: str
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this StatelessServiceTypeDescription.

        The placement constraint to be used when instantiating this service in a Service Fabric cluster.

        :param placement_constraints: The placement_constraints of this StatelessServiceTypeDescription.
        :type placement_constraints: str
        """

        self._placement_constraints = placement_constraints

    @property
    def service_placement_policies(self):
        """Gets the service_placement_policies of this StatelessServiceTypeDescription.

        List of service placement policy descriptions.

        :return: The service_placement_policies of this StatelessServiceTypeDescription.
        :rtype: List[ServicePlacementPolicyDescription]
        """
        return self._service_placement_policies

    @service_placement_policies.setter
    def service_placement_policies(self, service_placement_policies):
        """Sets the service_placement_policies of this StatelessServiceTypeDescription.

        List of service placement policy descriptions.

        :param service_placement_policies: The service_placement_policies of this StatelessServiceTypeDescription.
        :type service_placement_policies: List[ServicePlacementPolicyDescription]
        """

        self._service_placement_policies = service_placement_policies

    @property
    def service_type_name(self):
        """Gets the service_type_name of this StatelessServiceTypeDescription.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this StatelessServiceTypeDescription.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this StatelessServiceTypeDescription.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this StatelessServiceTypeDescription.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name
