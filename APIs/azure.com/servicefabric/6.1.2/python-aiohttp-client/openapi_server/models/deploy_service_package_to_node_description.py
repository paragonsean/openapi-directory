# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.package_sharing_policy_info import PackageSharingPolicyInfo
from openapi_server import util


class DeployServicePackageToNodeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_type_name: str=None, application_type_version: str=None, node_name: str=None, package_sharing_policy: List[PackageSharingPolicyInfo]=None, service_manifest_name: str=None):
        """DeployServicePackageToNodeDescription - a model defined in OpenAPI

        :param application_type_name: The application_type_name of this DeployServicePackageToNodeDescription.
        :param application_type_version: The application_type_version of this DeployServicePackageToNodeDescription.
        :param node_name: The node_name of this DeployServicePackageToNodeDescription.
        :param package_sharing_policy: The package_sharing_policy of this DeployServicePackageToNodeDescription.
        :param service_manifest_name: The service_manifest_name of this DeployServicePackageToNodeDescription.
        """
        self.openapi_types = {
            'application_type_name': str,
            'application_type_version': str,
            'node_name': str,
            'package_sharing_policy': List[PackageSharingPolicyInfo],
            'service_manifest_name': str
        }

        self.attribute_map = {
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            'node_name': 'NodeName',
            'package_sharing_policy': 'PackageSharingPolicy',
            'service_manifest_name': 'ServiceManifestName'
        }

        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self._node_name = node_name
        self._package_sharing_policy = package_sharing_policy
        self._service_manifest_name = service_manifest_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployServicePackageToNodeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployServicePackageToNodeDescription of this DeployServicePackageToNodeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type_name(self):
        """Gets the application_type_name of this DeployServicePackageToNodeDescription.

        The application type name as defined in the application manifest.

        :return: The application_type_name of this DeployServicePackageToNodeDescription.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this DeployServicePackageToNodeDescription.

        The application type name as defined in the application manifest.

        :param application_type_name: The application_type_name of this DeployServicePackageToNodeDescription.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this DeployServicePackageToNodeDescription.

        The version of the application type as defined in the application manifest.

        :return: The application_type_version of this DeployServicePackageToNodeDescription.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this DeployServicePackageToNodeDescription.

        The version of the application type as defined in the application manifest.

        :param application_type_version: The application_type_version of this DeployServicePackageToNodeDescription.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def node_name(self):
        """Gets the node_name of this DeployServicePackageToNodeDescription.

        The name of a Service Fabric node.

        :return: The node_name of this DeployServicePackageToNodeDescription.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this DeployServicePackageToNodeDescription.

        The name of a Service Fabric node.

        :param node_name: The node_name of this DeployServicePackageToNodeDescription.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def package_sharing_policy(self):
        """Gets the package_sharing_policy of this DeployServicePackageToNodeDescription.

        List of package sharing policy information.

        :return: The package_sharing_policy of this DeployServicePackageToNodeDescription.
        :rtype: List[PackageSharingPolicyInfo]
        """
        return self._package_sharing_policy

    @package_sharing_policy.setter
    def package_sharing_policy(self, package_sharing_policy):
        """Sets the package_sharing_policy of this DeployServicePackageToNodeDescription.

        List of package sharing policy information.

        :param package_sharing_policy: The package_sharing_policy of this DeployServicePackageToNodeDescription.
        :type package_sharing_policy: List[PackageSharingPolicyInfo]
        """

        self._package_sharing_policy = package_sharing_policy

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployServicePackageToNodeDescription.

        The name of the service manifest.

        :return: The service_manifest_name of this DeployServicePackageToNodeDescription.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployServicePackageToNodeDescription.

        The name of the service manifest.

        :param service_manifest_name: The service_manifest_name of this DeployServicePackageToNodeDescription.
        :type service_manifest_name: str
        """
        if service_manifest_name is None:
            raise ValueError("Invalid value for `service_manifest_name`, must not be `None`")

        self._service_manifest_name = service_manifest_name
