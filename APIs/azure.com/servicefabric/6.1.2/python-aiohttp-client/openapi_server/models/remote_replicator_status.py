# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remote_replicator_acknowledgement_status import RemoteReplicatorAcknowledgementStatus
from openapi_server import util


class RemoteReplicatorStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_in_build: bool=None, last_acknowledgement_processed_time_utc: datetime=None, last_applied_copy_sequence_number: str=None, last_applied_replication_sequence_number: str=None, last_received_copy_sequence_number: str=None, last_received_replication_sequence_number: str=None, remote_replicator_acknowledgement_status: RemoteReplicatorAcknowledgementStatus=None, replica_id: str=None):
        """RemoteReplicatorStatus - a model defined in OpenAPI

        :param is_in_build: The is_in_build of this RemoteReplicatorStatus.
        :param last_acknowledgement_processed_time_utc: The last_acknowledgement_processed_time_utc of this RemoteReplicatorStatus.
        :param last_applied_copy_sequence_number: The last_applied_copy_sequence_number of this RemoteReplicatorStatus.
        :param last_applied_replication_sequence_number: The last_applied_replication_sequence_number of this RemoteReplicatorStatus.
        :param last_received_copy_sequence_number: The last_received_copy_sequence_number of this RemoteReplicatorStatus.
        :param last_received_replication_sequence_number: The last_received_replication_sequence_number of this RemoteReplicatorStatus.
        :param remote_replicator_acknowledgement_status: The remote_replicator_acknowledgement_status of this RemoteReplicatorStatus.
        :param replica_id: The replica_id of this RemoteReplicatorStatus.
        """
        self.openapi_types = {
            'is_in_build': bool,
            'last_acknowledgement_processed_time_utc': datetime,
            'last_applied_copy_sequence_number': str,
            'last_applied_replication_sequence_number': str,
            'last_received_copy_sequence_number': str,
            'last_received_replication_sequence_number': str,
            'remote_replicator_acknowledgement_status': RemoteReplicatorAcknowledgementStatus,
            'replica_id': str
        }

        self.attribute_map = {
            'is_in_build': 'IsInBuild',
            'last_acknowledgement_processed_time_utc': 'LastAcknowledgementProcessedTimeUtc',
            'last_applied_copy_sequence_number': 'LastAppliedCopySequenceNumber',
            'last_applied_replication_sequence_number': 'LastAppliedReplicationSequenceNumber',
            'last_received_copy_sequence_number': 'LastReceivedCopySequenceNumber',
            'last_received_replication_sequence_number': 'LastReceivedReplicationSequenceNumber',
            'remote_replicator_acknowledgement_status': 'RemoteReplicatorAcknowledgementStatus',
            'replica_id': 'ReplicaId'
        }

        self._is_in_build = is_in_build
        self._last_acknowledgement_processed_time_utc = last_acknowledgement_processed_time_utc
        self._last_applied_copy_sequence_number = last_applied_copy_sequence_number
        self._last_applied_replication_sequence_number = last_applied_replication_sequence_number
        self._last_received_copy_sequence_number = last_received_copy_sequence_number
        self._last_received_replication_sequence_number = last_received_replication_sequence_number
        self._remote_replicator_acknowledgement_status = remote_replicator_acknowledgement_status
        self._replica_id = replica_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteReplicatorStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteReplicatorStatus of this RemoteReplicatorStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_in_build(self):
        """Gets the is_in_build of this RemoteReplicatorStatus.

        A value that indicates whether the secondary replica is in the process of being built.

        :return: The is_in_build of this RemoteReplicatorStatus.
        :rtype: bool
        """
        return self._is_in_build

    @is_in_build.setter
    def is_in_build(self, is_in_build):
        """Sets the is_in_build of this RemoteReplicatorStatus.

        A value that indicates whether the secondary replica is in the process of being built.

        :param is_in_build: The is_in_build of this RemoteReplicatorStatus.
        :type is_in_build: bool
        """

        self._is_in_build = is_in_build

    @property
    def last_acknowledgement_processed_time_utc(self):
        """Gets the last_acknowledgement_processed_time_utc of this RemoteReplicatorStatus.

        The last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the primary. UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed. 

        :return: The last_acknowledgement_processed_time_utc of this RemoteReplicatorStatus.
        :rtype: datetime
        """
        return self._last_acknowledgement_processed_time_utc

    @last_acknowledgement_processed_time_utc.setter
    def last_acknowledgement_processed_time_utc(self, last_acknowledgement_processed_time_utc):
        """Sets the last_acknowledgement_processed_time_utc of this RemoteReplicatorStatus.

        The last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed on the primary. UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed. 

        :param last_acknowledgement_processed_time_utc: The last_acknowledgement_processed_time_utc of this RemoteReplicatorStatus.
        :type last_acknowledgement_processed_time_utc: datetime
        """

        self._last_acknowledgement_processed_time_utc = last_acknowledgement_processed_time_utc

    @property
    def last_applied_copy_sequence_number(self):
        """Gets the last_applied_copy_sequence_number of this RemoteReplicatorStatus.

        The highest copy operation sequence number that the secondary has applied to its state. A value of -1 implies that the secondary has applied all copy operations and the copy process is complete. 

        :return: The last_applied_copy_sequence_number of this RemoteReplicatorStatus.
        :rtype: str
        """
        return self._last_applied_copy_sequence_number

    @last_applied_copy_sequence_number.setter
    def last_applied_copy_sequence_number(self, last_applied_copy_sequence_number):
        """Sets the last_applied_copy_sequence_number of this RemoteReplicatorStatus.

        The highest copy operation sequence number that the secondary has applied to its state. A value of -1 implies that the secondary has applied all copy operations and the copy process is complete. 

        :param last_applied_copy_sequence_number: The last_applied_copy_sequence_number of this RemoteReplicatorStatus.
        :type last_applied_copy_sequence_number: str
        """

        self._last_applied_copy_sequence_number = last_applied_copy_sequence_number

    @property
    def last_applied_replication_sequence_number(self):
        """Gets the last_applied_replication_sequence_number of this RemoteReplicatorStatus.

        The highest replication operation sequence number that the secondary has applied to its state.

        :return: The last_applied_replication_sequence_number of this RemoteReplicatorStatus.
        :rtype: str
        """
        return self._last_applied_replication_sequence_number

    @last_applied_replication_sequence_number.setter
    def last_applied_replication_sequence_number(self, last_applied_replication_sequence_number):
        """Sets the last_applied_replication_sequence_number of this RemoteReplicatorStatus.

        The highest replication operation sequence number that the secondary has applied to its state.

        :param last_applied_replication_sequence_number: The last_applied_replication_sequence_number of this RemoteReplicatorStatus.
        :type last_applied_replication_sequence_number: str
        """

        self._last_applied_replication_sequence_number = last_applied_replication_sequence_number

    @property
    def last_received_copy_sequence_number(self):
        """Gets the last_received_copy_sequence_number of this RemoteReplicatorStatus.

        The highest copy operation sequence number that the secondary has received from the primary. A value of -1 implies that the secondary has received all copy operations. 

        :return: The last_received_copy_sequence_number of this RemoteReplicatorStatus.
        :rtype: str
        """
        return self._last_received_copy_sequence_number

    @last_received_copy_sequence_number.setter
    def last_received_copy_sequence_number(self, last_received_copy_sequence_number):
        """Sets the last_received_copy_sequence_number of this RemoteReplicatorStatus.

        The highest copy operation sequence number that the secondary has received from the primary. A value of -1 implies that the secondary has received all copy operations. 

        :param last_received_copy_sequence_number: The last_received_copy_sequence_number of this RemoteReplicatorStatus.
        :type last_received_copy_sequence_number: str
        """

        self._last_received_copy_sequence_number = last_received_copy_sequence_number

    @property
    def last_received_replication_sequence_number(self):
        """Gets the last_received_replication_sequence_number of this RemoteReplicatorStatus.

        The highest replication operation sequence number that the secondary has received from the primary.

        :return: The last_received_replication_sequence_number of this RemoteReplicatorStatus.
        :rtype: str
        """
        return self._last_received_replication_sequence_number

    @last_received_replication_sequence_number.setter
    def last_received_replication_sequence_number(self, last_received_replication_sequence_number):
        """Sets the last_received_replication_sequence_number of this RemoteReplicatorStatus.

        The highest replication operation sequence number that the secondary has received from the primary.

        :param last_received_replication_sequence_number: The last_received_replication_sequence_number of this RemoteReplicatorStatus.
        :type last_received_replication_sequence_number: str
        """

        self._last_received_replication_sequence_number = last_received_replication_sequence_number

    @property
    def remote_replicator_acknowledgement_status(self):
        """Gets the remote_replicator_acknowledgement_status of this RemoteReplicatorStatus.


        :return: The remote_replicator_acknowledgement_status of this RemoteReplicatorStatus.
        :rtype: RemoteReplicatorAcknowledgementStatus
        """
        return self._remote_replicator_acknowledgement_status

    @remote_replicator_acknowledgement_status.setter
    def remote_replicator_acknowledgement_status(self, remote_replicator_acknowledgement_status):
        """Sets the remote_replicator_acknowledgement_status of this RemoteReplicatorStatus.


        :param remote_replicator_acknowledgement_status: The remote_replicator_acknowledgement_status of this RemoteReplicatorStatus.
        :type remote_replicator_acknowledgement_status: RemoteReplicatorAcknowledgementStatus
        """

        self._remote_replicator_acknowledgement_status = remote_replicator_acknowledgement_status

    @property
    def replica_id(self):
        """Gets the replica_id of this RemoteReplicatorStatus.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :return: The replica_id of this RemoteReplicatorStatus.
        :rtype: str
        """
        return self._replica_id

    @replica_id.setter
    def replica_id(self, replica_id):
        """Sets the replica_id of this RemoteReplicatorStatus.

        Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.

        :param replica_id: The replica_id of this RemoteReplicatorStatus.
        :type replica_id: str
        """

        self._replica_id = replica_id
