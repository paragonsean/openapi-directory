/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatefulServiceDescription.h
 *
 * Describes a stateful service.
 */

#ifndef OAIStatefulServiceDescription_H
#define OAIStatefulServiceDescription_H

#include <QJsonObject>

#include "OAIMoveCost.h"
#include "OAIPartitionSchemeDescription.h"
#include "OAIServiceCorrelationDescription.h"
#include "OAIServiceDescription.h"
#include "OAIServiceKind.h"
#include "OAIServiceLoadMetricDescription.h"
#include "OAIServicePackageActivationMode.h"
#include "OAIServicePlacementPolicyDescription.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServiceCorrelationDescription;
class OAIPartitionSchemeDescription;
class OAIServiceLoadMetricDescription;
class OAIServicePlacementPolicyDescription;

class OAIStatefulServiceDescription : public OAIObject {
public:
    OAIStatefulServiceDescription();
    OAIStatefulServiceDescription(QString json);
    ~OAIStatefulServiceDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFlags() const;
    void setFlags(const qint32 &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    bool isHasPersistedState() const;
    void setHasPersistedState(const bool &has_persisted_state);
    bool is_has_persisted_state_Set() const;
    bool is_has_persisted_state_Valid() const;

    qint32 getMinReplicaSetSize() const;
    void setMinReplicaSetSize(const qint32 &min_replica_set_size);
    bool is_min_replica_set_size_Set() const;
    bool is_min_replica_set_size_Valid() const;

    qint64 getQuorumLossWaitDurationSeconds() const;
    void setQuorumLossWaitDurationSeconds(const qint64 &quorum_loss_wait_duration_seconds);
    bool is_quorum_loss_wait_duration_seconds_Set() const;
    bool is_quorum_loss_wait_duration_seconds_Valid() const;

    qint64 getReplicaRestartWaitDurationSeconds() const;
    void setReplicaRestartWaitDurationSeconds(const qint64 &replica_restart_wait_duration_seconds);
    bool is_replica_restart_wait_duration_seconds_Set() const;
    bool is_replica_restart_wait_duration_seconds_Valid() const;

    qint64 getStandByReplicaKeepDurationSeconds() const;
    void setStandByReplicaKeepDurationSeconds(const qint64 &stand_by_replica_keep_duration_seconds);
    bool is_stand_by_replica_keep_duration_seconds_Set() const;
    bool is_stand_by_replica_keep_duration_seconds_Valid() const;

    qint32 getTargetReplicaSetSize() const;
    void setTargetReplicaSetSize(const qint32 &target_replica_set_size);
    bool is_target_replica_set_size_Set() const;
    bool is_target_replica_set_size_Valid() const;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    QList<OAIServiceCorrelationDescription> getCorrelationScheme() const;
    void setCorrelationScheme(const QList<OAIServiceCorrelationDescription> &correlation_scheme);
    bool is_correlation_scheme_Set() const;
    bool is_correlation_scheme_Valid() const;

    OAIMoveCost getDefaultMoveCost() const;
    void setDefaultMoveCost(const OAIMoveCost &default_move_cost);
    bool is_default_move_cost_Set() const;
    bool is_default_move_cost_Valid() const;

    QList<qint32> getInitializationData() const;
    void setInitializationData(const QList<qint32> &initialization_data);
    bool is_initialization_data_Set() const;
    bool is_initialization_data_Valid() const;

    bool isIsDefaultMoveCostSpecified() const;
    void setIsDefaultMoveCostSpecified(const bool &is_default_move_cost_specified);
    bool is_is_default_move_cost_specified_Set() const;
    bool is_is_default_move_cost_specified_Valid() const;

    OAIPartitionSchemeDescription getPartitionDescription() const;
    void setPartitionDescription(const OAIPartitionSchemeDescription &partition_description);
    bool is_partition_description_Set() const;
    bool is_partition_description_Valid() const;

    QString getPlacementConstraints() const;
    void setPlacementConstraints(const QString &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QString getServiceDnsName() const;
    void setServiceDnsName(const QString &service_dns_name);
    bool is_service_dns_name_Set() const;
    bool is_service_dns_name_Valid() const;

    OAIServiceKind getServiceKind() const;
    void setServiceKind(const OAIServiceKind &service_kind);
    bool is_service_kind_Set() const;
    bool is_service_kind_Valid() const;

    QList<OAIServiceLoadMetricDescription> getServiceLoadMetrics() const;
    void setServiceLoadMetrics(const QList<OAIServiceLoadMetricDescription> &service_load_metrics);
    bool is_service_load_metrics_Set() const;
    bool is_service_load_metrics_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    OAIServicePackageActivationMode getServicePackageActivationMode() const;
    void setServicePackageActivationMode(const OAIServicePackageActivationMode &service_package_activation_mode);
    bool is_service_package_activation_mode_Set() const;
    bool is_service_package_activation_mode_Valid() const;

    QList<OAIServicePlacementPolicyDescription> getServicePlacementPolicies() const;
    void setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies);
    bool is_service_placement_policies_Set() const;
    bool is_service_placement_policies_Valid() const;

    QString getServiceTypeName() const;
    void setServiceTypeName(const QString &service_type_name);
    bool is_service_type_name_Set() const;
    bool is_service_type_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    bool m_has_persisted_state;
    bool m_has_persisted_state_isSet;
    bool m_has_persisted_state_isValid;

    qint32 m_min_replica_set_size;
    bool m_min_replica_set_size_isSet;
    bool m_min_replica_set_size_isValid;

    qint64 m_quorum_loss_wait_duration_seconds;
    bool m_quorum_loss_wait_duration_seconds_isSet;
    bool m_quorum_loss_wait_duration_seconds_isValid;

    qint64 m_replica_restart_wait_duration_seconds;
    bool m_replica_restart_wait_duration_seconds_isSet;
    bool m_replica_restart_wait_duration_seconds_isValid;

    qint64 m_stand_by_replica_keep_duration_seconds;
    bool m_stand_by_replica_keep_duration_seconds_isSet;
    bool m_stand_by_replica_keep_duration_seconds_isValid;

    qint32 m_target_replica_set_size;
    bool m_target_replica_set_size_isSet;
    bool m_target_replica_set_size_isValid;

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    QList<OAIServiceCorrelationDescription> m_correlation_scheme;
    bool m_correlation_scheme_isSet;
    bool m_correlation_scheme_isValid;

    OAIMoveCost m_default_move_cost;
    bool m_default_move_cost_isSet;
    bool m_default_move_cost_isValid;

    QList<qint32> m_initialization_data;
    bool m_initialization_data_isSet;
    bool m_initialization_data_isValid;

    bool m_is_default_move_cost_specified;
    bool m_is_default_move_cost_specified_isSet;
    bool m_is_default_move_cost_specified_isValid;

    OAIPartitionSchemeDescription m_partition_description;
    bool m_partition_description_isSet;
    bool m_partition_description_isValid;

    QString m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QString m_service_dns_name;
    bool m_service_dns_name_isSet;
    bool m_service_dns_name_isValid;

    OAIServiceKind m_service_kind;
    bool m_service_kind_isSet;
    bool m_service_kind_isValid;

    QList<OAIServiceLoadMetricDescription> m_service_load_metrics;
    bool m_service_load_metrics_isSet;
    bool m_service_load_metrics_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    OAIServicePackageActivationMode m_service_package_activation_mode;
    bool m_service_package_activation_mode_isSet;
    bool m_service_package_activation_mode_isValid;

    QList<OAIServicePlacementPolicyDescription> m_service_placement_policies;
    bool m_service_placement_policies_isSet;
    bool m_service_placement_policies_isValid;

    QString m_service_type_name;
    bool m_service_type_name_isSet;
    bool m_service_type_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatefulServiceDescription)

#endif // OAIStatefulServiceDescription_H
