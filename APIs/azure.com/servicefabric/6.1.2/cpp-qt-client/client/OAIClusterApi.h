/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClusterApi_H
#define OAI_OAIClusterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAadMetadataObject.h"
#include "OAIClusterConfiguration.h"
#include "OAIClusterConfigurationUpgradeDescription.h"
#include "OAIClusterConfigurationUpgradeStatusInfo.h"
#include "OAIClusterHealth.h"
#include "OAIClusterHealthChunk.h"
#include "OAIClusterHealthChunkQueryDescription.h"
#include "OAIClusterHealthPolicies.h"
#include "OAIClusterManifest.h"
#include "OAIClusterUpgradeProgressObject.h"
#include "OAIFabricCodeVersionInfo.h"
#include "OAIFabricConfigVersionInfo.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAIProvisionFabricDescription.h"
#include "OAIResumeClusterUpgradeDescription.h"
#include "OAIStartClusterUpgradeDescription.h"
#include "OAIUnprovisionFabricDescription.h"
#include "OAIUpdateClusterUpgradeDescription.h"
#include "OAIUpgradeOrchestrationServiceState.h"
#include "OAIUpgradeOrchestrationServiceStateSummary.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClusterApi : public QObject {
    Q_OBJECT

public:
    OAIClusterApi(const int timeOut = 0);
    ~OAIClusterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getAadMetadata(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  configuration_api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterConfiguration(const QString &api_version, const QString &configuration_api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterConfigurationUpgradeStatus(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  nodes_health_state_filter qint32 [optional]
    * @param[in]  applications_health_state_filter qint32 [optional]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  include_system_application_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterHealth(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &nodes_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &applications_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_system_application_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterHealthChunk(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  cluster_health_chunk_query_description OAIClusterHealthChunkQueryDescription [optional]
    */
    virtual void getClusterHealthChunkUsingPolicyAndAdvancedFilters(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIClusterHealthChunkQueryDescription> &cluster_health_chunk_query_description = ::OpenAPI::OptionalParam<OAIClusterHealthChunkQueryDescription>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  nodes_health_state_filter qint32 [optional]
    * @param[in]  applications_health_state_filter qint32 [optional]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  include_system_application_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  cluster_health_policies OAIClusterHealthPolicies [optional]
    */
    virtual void getClusterHealthUsingPolicy(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &nodes_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &applications_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_system_application_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIClusterHealthPolicies> &cluster_health_policies = ::OpenAPI::OptionalParam<OAIClusterHealthPolicies>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterManifest(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getClusterUpgradeProgress(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  code_version QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getProvisionedFabricCodeVersionInfoList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &code_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  config_version QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getProvisionedFabricConfigVersionInfoList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &config_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getUpgradeOrchestrationServiceState(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  provision_fabric_description OAIProvisionFabricDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void provisionCluster(const QString &api_version, const OAIProvisionFabricDescription &provision_fabric_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportClusterHealth(const QString &api_version, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resume_cluster_upgrade_description OAIResumeClusterUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resumeClusterUpgrade(const QString &api_version, const OAIResumeClusterUpgradeDescription &resume_cluster_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void rollbackClusterUpgrade(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  upgrade_orchestration_service_state OAIUpgradeOrchestrationServiceState [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void setUpgradeOrchestrationServiceState(const QString &api_version, const OAIUpgradeOrchestrationServiceState &upgrade_orchestration_service_state, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  cluster_configuration_upgrade_description OAIClusterConfigurationUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startClusterConfigurationUpgrade(const QString &api_version, const OAIClusterConfigurationUpgradeDescription &cluster_configuration_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_cluster_upgrade_description OAIStartClusterUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startClusterUpgrade(const QString &api_version, const OAIStartClusterUpgradeDescription &start_cluster_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  unprovision_fabric_description OAIUnprovisionFabricDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void unprovisionCluster(const QString &api_version, const OAIUnprovisionFabricDescription &unprovision_fabric_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  update_cluster_upgrade_description OAIUpdateClusterUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void updateClusterUpgrade(const QString &api_version, const OAIUpdateClusterUpgradeDescription &update_cluster_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAadMetadataCallback(OAIHttpRequestWorker *worker);
    void getClusterConfigurationCallback(OAIHttpRequestWorker *worker);
    void getClusterConfigurationUpgradeStatusCallback(OAIHttpRequestWorker *worker);
    void getClusterHealthCallback(OAIHttpRequestWorker *worker);
    void getClusterHealthChunkCallback(OAIHttpRequestWorker *worker);
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersCallback(OAIHttpRequestWorker *worker);
    void getClusterHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getClusterManifestCallback(OAIHttpRequestWorker *worker);
    void getClusterUpgradeProgressCallback(OAIHttpRequestWorker *worker);
    void getProvisionedFabricCodeVersionInfoListCallback(OAIHttpRequestWorker *worker);
    void getProvisionedFabricConfigVersionInfoListCallback(OAIHttpRequestWorker *worker);
    void getUpgradeOrchestrationServiceStateCallback(OAIHttpRequestWorker *worker);
    void provisionClusterCallback(OAIHttpRequestWorker *worker);
    void reportClusterHealthCallback(OAIHttpRequestWorker *worker);
    void resumeClusterUpgradeCallback(OAIHttpRequestWorker *worker);
    void rollbackClusterUpgradeCallback(OAIHttpRequestWorker *worker);
    void setUpgradeOrchestrationServiceStateCallback(OAIHttpRequestWorker *worker);
    void startClusterConfigurationUpgradeCallback(OAIHttpRequestWorker *worker);
    void startClusterUpgradeCallback(OAIHttpRequestWorker *worker);
    void unprovisionClusterCallback(OAIHttpRequestWorker *worker);
    void updateClusterUpgradeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAadMetadataSignal(OAIAadMetadataObject summary);
    void getClusterConfigurationSignal(OAIClusterConfiguration summary);
    void getClusterConfigurationUpgradeStatusSignal(OAIClusterConfigurationUpgradeStatusInfo summary);
    void getClusterHealthSignal(OAIClusterHealth summary);
    void getClusterHealthChunkSignal(OAIClusterHealthChunk summary);
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignal(OAIClusterHealthChunk summary);
    void getClusterHealthUsingPolicySignal(OAIClusterHealth summary);
    void getClusterManifestSignal(OAIClusterManifest summary);
    void getClusterUpgradeProgressSignal(OAIClusterUpgradeProgressObject summary);
    void getProvisionedFabricCodeVersionInfoListSignal(QList<OAIFabricCodeVersionInfo> summary);
    void getProvisionedFabricConfigVersionInfoListSignal(QList<OAIFabricConfigVersionInfo> summary);
    void getUpgradeOrchestrationServiceStateSignal(OAIUpgradeOrchestrationServiceState summary);
    void provisionClusterSignal();
    void reportClusterHealthSignal();
    void resumeClusterUpgradeSignal();
    void rollbackClusterUpgradeSignal();
    void setUpgradeOrchestrationServiceStateSignal(OAIUpgradeOrchestrationServiceStateSummary summary);
    void startClusterConfigurationUpgradeSignal();
    void startClusterUpgradeSignal();
    void unprovisionClusterSignal();
    void updateClusterUpgradeSignal();


    void getAadMetadataSignalFull(OAIHttpRequestWorker *worker, OAIAadMetadataObject summary);
    void getClusterConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIClusterConfiguration summary);
    void getClusterConfigurationUpgradeStatusSignalFull(OAIHttpRequestWorker *worker, OAIClusterConfigurationUpgradeStatusInfo summary);
    void getClusterHealthSignalFull(OAIHttpRequestWorker *worker, OAIClusterHealth summary);
    void getClusterHealthChunkSignalFull(OAIHttpRequestWorker *worker, OAIClusterHealthChunk summary);
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalFull(OAIHttpRequestWorker *worker, OAIClusterHealthChunk summary);
    void getClusterHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIClusterHealth summary);
    void getClusterManifestSignalFull(OAIHttpRequestWorker *worker, OAIClusterManifest summary);
    void getClusterUpgradeProgressSignalFull(OAIHttpRequestWorker *worker, OAIClusterUpgradeProgressObject summary);
    void getProvisionedFabricCodeVersionInfoListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFabricCodeVersionInfo> summary);
    void getProvisionedFabricConfigVersionInfoListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFabricConfigVersionInfo> summary);
    void getUpgradeOrchestrationServiceStateSignalFull(OAIHttpRequestWorker *worker, OAIUpgradeOrchestrationServiceState summary);
    void provisionClusterSignalFull(OAIHttpRequestWorker *worker);
    void reportClusterHealthSignalFull(OAIHttpRequestWorker *worker);
    void resumeClusterUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void rollbackClusterUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void setUpgradeOrchestrationServiceStateSignalFull(OAIHttpRequestWorker *worker, OAIUpgradeOrchestrationServiceStateSummary summary);
    void startClusterConfigurationUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void startClusterUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void unprovisionClusterSignalFull(OAIHttpRequestWorker *worker);
    void updateClusterUpgradeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAadMetadataSignalError() instead")
    void getAadMetadataSignalE(OAIAadMetadataObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAadMetadataSignalError(OAIAadMetadataObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterConfigurationSignalError() instead")
    void getClusterConfigurationSignalE(OAIClusterConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterConfigurationSignalError(OAIClusterConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterConfigurationUpgradeStatusSignalError() instead")
    void getClusterConfigurationUpgradeStatusSignalE(OAIClusterConfigurationUpgradeStatusInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterConfigurationUpgradeStatusSignalError(OAIClusterConfigurationUpgradeStatusInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthSignalError() instead")
    void getClusterHealthSignalE(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthSignalError(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthChunkSignalError() instead")
    void getClusterHealthChunkSignalE(OAIClusterHealthChunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthChunkSignalError(OAIClusterHealthChunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalError() instead")
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalE(OAIClusterHealthChunk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalError(OAIClusterHealthChunk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthUsingPolicySignalError() instead")
    void getClusterHealthUsingPolicySignalE(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthUsingPolicySignalError(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterManifestSignalError() instead")
    void getClusterManifestSignalE(OAIClusterManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterManifestSignalError(OAIClusterManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterUpgradeProgressSignalError() instead")
    void getClusterUpgradeProgressSignalE(OAIClusterUpgradeProgressObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterUpgradeProgressSignalError(OAIClusterUpgradeProgressObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedFabricCodeVersionInfoListSignalError() instead")
    void getProvisionedFabricCodeVersionInfoListSignalE(QList<OAIFabricCodeVersionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedFabricCodeVersionInfoListSignalError(QList<OAIFabricCodeVersionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedFabricConfigVersionInfoListSignalError() instead")
    void getProvisionedFabricConfigVersionInfoListSignalE(QList<OAIFabricConfigVersionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedFabricConfigVersionInfoListSignalError(QList<OAIFabricConfigVersionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeOrchestrationServiceStateSignalError() instead")
    void getUpgradeOrchestrationServiceStateSignalE(OAIUpgradeOrchestrationServiceState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeOrchestrationServiceStateSignalError(OAIUpgradeOrchestrationServiceState summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionClusterSignalError() instead")
    void provisionClusterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void provisionClusterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportClusterHealthSignalError() instead")
    void reportClusterHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportClusterHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeClusterUpgradeSignalError() instead")
    void resumeClusterUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumeClusterUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackClusterUpgradeSignalError() instead")
    void rollbackClusterUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackClusterUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUpgradeOrchestrationServiceStateSignalError() instead")
    void setUpgradeOrchestrationServiceStateSignalE(OAIUpgradeOrchestrationServiceStateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setUpgradeOrchestrationServiceStateSignalError(OAIUpgradeOrchestrationServiceStateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startClusterConfigurationUpgradeSignalError() instead")
    void startClusterConfigurationUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startClusterConfigurationUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startClusterUpgradeSignalError() instead")
    void startClusterUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startClusterUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unprovisionClusterSignalError() instead")
    void unprovisionClusterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unprovisionClusterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClusterUpgradeSignalError() instead")
    void updateClusterUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClusterUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAadMetadataSignalErrorFull() instead")
    void getAadMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAadMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterConfigurationSignalErrorFull() instead")
    void getClusterConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterConfigurationUpgradeStatusSignalErrorFull() instead")
    void getClusterConfigurationUpgradeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterConfigurationUpgradeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthSignalErrorFull() instead")
    void getClusterHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthChunkSignalErrorFull() instead")
    void getClusterHealthChunkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthChunkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalErrorFull() instead")
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthChunkUsingPolicyAndAdvancedFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterHealthUsingPolicySignalErrorFull() instead")
    void getClusterHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterManifestSignalErrorFull() instead")
    void getClusterManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterUpgradeProgressSignalErrorFull() instead")
    void getClusterUpgradeProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterUpgradeProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedFabricCodeVersionInfoListSignalErrorFull() instead")
    void getProvisionedFabricCodeVersionInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedFabricCodeVersionInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvisionedFabricConfigVersionInfoListSignalErrorFull() instead")
    void getProvisionedFabricConfigVersionInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvisionedFabricConfigVersionInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpgradeOrchestrationServiceStateSignalErrorFull() instead")
    void getUpgradeOrchestrationServiceStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpgradeOrchestrationServiceStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionClusterSignalErrorFull() instead")
    void provisionClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportClusterHealthSignalErrorFull() instead")
    void reportClusterHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportClusterHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeClusterUpgradeSignalErrorFull() instead")
    void resumeClusterUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeClusterUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackClusterUpgradeSignalErrorFull() instead")
    void rollbackClusterUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackClusterUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUpgradeOrchestrationServiceStateSignalErrorFull() instead")
    void setUpgradeOrchestrationServiceStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUpgradeOrchestrationServiceStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startClusterConfigurationUpgradeSignalErrorFull() instead")
    void startClusterConfigurationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startClusterConfigurationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startClusterUpgradeSignalErrorFull() instead")
    void startClusterUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startClusterUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unprovisionClusterSignalErrorFull() instead")
    void unprovisionClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unprovisionClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClusterUpgradeSignalErrorFull() instead")
    void updateClusterUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClusterUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
