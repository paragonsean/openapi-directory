/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeDeactivationInfo.h
 *
 * Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.
 */

#ifndef OAINodeDeactivationInfo_H
#define OAINodeDeactivationInfo_H

#include <QJsonObject>

#include "OAINodeDeactivationIntent.h"
#include "OAINodeDeactivationStatus.h"
#include "OAINodeDeactivationTask.h"
#include "OAISafetyCheckWrapper.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodeDeactivationTask;
class OAISafetyCheckWrapper;

class OAINodeDeactivationInfo : public OAIObject {
public:
    OAINodeDeactivationInfo();
    OAINodeDeactivationInfo(QString json);
    ~OAINodeDeactivationInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINodeDeactivationIntent getNodeDeactivationIntent() const;
    void setNodeDeactivationIntent(const OAINodeDeactivationIntent &node_deactivation_intent);
    bool is_node_deactivation_intent_Set() const;
    bool is_node_deactivation_intent_Valid() const;

    OAINodeDeactivationStatus getNodeDeactivationStatus() const;
    void setNodeDeactivationStatus(const OAINodeDeactivationStatus &node_deactivation_status);
    bool is_node_deactivation_status_Set() const;
    bool is_node_deactivation_status_Valid() const;

    QList<OAINodeDeactivationTask> getNodeDeactivationTask() const;
    void setNodeDeactivationTask(const QList<OAINodeDeactivationTask> &node_deactivation_task);
    bool is_node_deactivation_task_Set() const;
    bool is_node_deactivation_task_Valid() const;

    QList<OAISafetyCheckWrapper> getPendingSafetyChecks() const;
    void setPendingSafetyChecks(const QList<OAISafetyCheckWrapper> &pending_safety_checks);
    bool is_pending_safety_checks_Set() const;
    bool is_pending_safety_checks_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINodeDeactivationIntent m_node_deactivation_intent;
    bool m_node_deactivation_intent_isSet;
    bool m_node_deactivation_intent_isValid;

    OAINodeDeactivationStatus m_node_deactivation_status;
    bool m_node_deactivation_status_isSet;
    bool m_node_deactivation_status_isValid;

    QList<OAINodeDeactivationTask> m_node_deactivation_task;
    bool m_node_deactivation_task_isSet;
    bool m_node_deactivation_task_isValid;

    QList<OAISafetyCheckWrapper> m_pending_safety_checks;
    bool m_pending_safety_checks_isSet;
    bool m_pending_safety_checks_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeDeactivationInfo)

#endif // OAINodeDeactivationInfo_H
