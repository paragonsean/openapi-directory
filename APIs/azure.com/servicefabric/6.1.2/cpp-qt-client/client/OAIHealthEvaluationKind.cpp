/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthEvaluationKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthEvaluationKind::OAIHealthEvaluationKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthEvaluationKind::OAIHealthEvaluationKind() {
    this->initializeModel();
}

OAIHealthEvaluationKind::~OAIHealthEvaluationKind() {}

void OAIHealthEvaluationKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHealthEvaluationKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHealthEvaluationKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Event", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::EVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Replicas", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::REPLICAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Partitions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::PARTITIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServicePackages", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::DEPLOYEDSERVICEPACKAGES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplications", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::DEPLOYEDAPPLICATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Services", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::SERVICES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Nodes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::NODES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Applications", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::APPLICATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SystemApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::SYSTEMAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpgradeDomainDeployedApplications", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::UPGRADEDOMAINDEPLOYEDAPPLICATIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpgradeDomainNodes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::UPGRADEDOMAINNODES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Replica", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::REPLICA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Partition", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::PARTITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedServicePackage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::DEPLOYEDSERVICEPACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployedApplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::DEPLOYEDAPPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Service", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Node", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::NODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Application", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::APPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeltaNodesCheck", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::DELTANODESCHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpgradeDomainDeltaNodesCheck", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::UPGRADEDOMAINDELTANODESCHECK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApplicationTypeApplications", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthEvaluationKind::APPLICATIONTYPEAPPLICATIONS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHealthEvaluationKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHealthEvaluationKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHealthEvaluationKind::INVALID:
            val = "Invalid";
            break;
        case eOAIHealthEvaluationKind::EVENT:
            val = "Event";
            break;
        case eOAIHealthEvaluationKind::REPLICAS:
            val = "Replicas";
            break;
        case eOAIHealthEvaluationKind::PARTITIONS:
            val = "Partitions";
            break;
        case eOAIHealthEvaluationKind::DEPLOYEDSERVICEPACKAGES:
            val = "DeployedServicePackages";
            break;
        case eOAIHealthEvaluationKind::DEPLOYEDAPPLICATIONS:
            val = "DeployedApplications";
            break;
        case eOAIHealthEvaluationKind::SERVICES:
            val = "Services";
            break;
        case eOAIHealthEvaluationKind::NODES:
            val = "Nodes";
            break;
        case eOAIHealthEvaluationKind::APPLICATIONS:
            val = "Applications";
            break;
        case eOAIHealthEvaluationKind::SYSTEMAPPLICATION:
            val = "SystemApplication";
            break;
        case eOAIHealthEvaluationKind::UPGRADEDOMAINDEPLOYEDAPPLICATIONS:
            val = "UpgradeDomainDeployedApplications";
            break;
        case eOAIHealthEvaluationKind::UPGRADEDOMAINNODES:
            val = "UpgradeDomainNodes";
            break;
        case eOAIHealthEvaluationKind::REPLICA:
            val = "Replica";
            break;
        case eOAIHealthEvaluationKind::PARTITION:
            val = "Partition";
            break;
        case eOAIHealthEvaluationKind::DEPLOYEDSERVICEPACKAGE:
            val = "DeployedServicePackage";
            break;
        case eOAIHealthEvaluationKind::DEPLOYEDAPPLICATION:
            val = "DeployedApplication";
            break;
        case eOAIHealthEvaluationKind::SERVICE:
            val = "Service";
            break;
        case eOAIHealthEvaluationKind::NODE:
            val = "Node";
            break;
        case eOAIHealthEvaluationKind::APPLICATION:
            val = "Application";
            break;
        case eOAIHealthEvaluationKind::DELTANODESCHECK:
            val = "DeltaNodesCheck";
            break;
        case eOAIHealthEvaluationKind::UPGRADEDOMAINDELTANODESCHECK:
            val = "UpgradeDomainDeltaNodesCheck";
            break;
        case eOAIHealthEvaluationKind::APPLICATIONTYPEAPPLICATIONS:
            val = "ApplicationTypeApplications";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHealthEvaluationKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHealthEvaluationKind::eOAIHealthEvaluationKind OAIHealthEvaluationKind::getValue() const {
    return m_value;
}

void OAIHealthEvaluationKind::setValue(const OAIHealthEvaluationKind::eOAIHealthEvaluationKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHealthEvaluationKind::isSet() const {
    
    return m_value_isSet;
}

bool OAIHealthEvaluationKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
