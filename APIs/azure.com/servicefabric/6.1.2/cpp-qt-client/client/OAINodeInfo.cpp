/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInfo::OAINodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInfo::OAINodeInfo() {
    this->initializeModel();
}

OAINodeInfo::~OAINodeInfo() {}

void OAINodeInfo::initializeModel() {

    m_code_version_isSet = false;
    m_code_version_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_fault_domain_isSet = false;
    m_fault_domain_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_ip_address_or_fqdn_isSet = false;
    m_ip_address_or_fqdn_isValid = false;

    m_is_seed_node_isSet = false;
    m_is_seed_node_isValid = false;

    m_is_stopped_isSet = false;
    m_is_stopped_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_deactivation_info_isSet = false;
    m_node_deactivation_info_isValid = false;

    m_node_down_at_isSet = false;
    m_node_down_at_isValid = false;

    m_node_down_time_in_seconds_isSet = false;
    m_node_down_time_in_seconds_isValid = false;

    m_node_status_isSet = false;
    m_node_status_isValid = false;

    m_node_up_at_isSet = false;
    m_node_up_at_isValid = false;

    m_node_up_time_in_seconds_isSet = false;
    m_node_up_time_in_seconds_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_upgrade_domain_isSet = false;
    m_upgrade_domain_isValid = false;
}

void OAINodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInfo::fromJsonObject(QJsonObject json) {

    m_code_version_isValid = ::OpenAPI::fromJsonValue(m_code_version, json[QString("CodeVersion")]);
    m_code_version_isSet = !json[QString("CodeVersion")].isNull() && m_code_version_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("ConfigVersion")]);
    m_config_version_isSet = !json[QString("ConfigVersion")].isNull() && m_config_version_isValid;

    m_fault_domain_isValid = ::OpenAPI::fromJsonValue(m_fault_domain, json[QString("FaultDomain")]);
    m_fault_domain_isSet = !json[QString("FaultDomain")].isNull() && m_fault_domain_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_ip_address_or_fqdn_isValid = ::OpenAPI::fromJsonValue(m_ip_address_or_fqdn, json[QString("IpAddressOrFQDN")]);
    m_ip_address_or_fqdn_isSet = !json[QString("IpAddressOrFQDN")].isNull() && m_ip_address_or_fqdn_isValid;

    m_is_seed_node_isValid = ::OpenAPI::fromJsonValue(m_is_seed_node, json[QString("IsSeedNode")]);
    m_is_seed_node_isSet = !json[QString("IsSeedNode")].isNull() && m_is_seed_node_isValid;

    m_is_stopped_isValid = ::OpenAPI::fromJsonValue(m_is_stopped, json[QString("IsStopped")]);
    m_is_stopped_isSet = !json[QString("IsStopped")].isNull() && m_is_stopped_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_node_deactivation_info_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_info, json[QString("NodeDeactivationInfo")]);
    m_node_deactivation_info_isSet = !json[QString("NodeDeactivationInfo")].isNull() && m_node_deactivation_info_isValid;

    m_node_down_at_isValid = ::OpenAPI::fromJsonValue(m_node_down_at, json[QString("NodeDownAt")]);
    m_node_down_at_isSet = !json[QString("NodeDownAt")].isNull() && m_node_down_at_isValid;

    m_node_down_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_node_down_time_in_seconds, json[QString("NodeDownTimeInSeconds")]);
    m_node_down_time_in_seconds_isSet = !json[QString("NodeDownTimeInSeconds")].isNull() && m_node_down_time_in_seconds_isValid;

    m_node_status_isValid = ::OpenAPI::fromJsonValue(m_node_status, json[QString("NodeStatus")]);
    m_node_status_isSet = !json[QString("NodeStatus")].isNull() && m_node_status_isValid;

    m_node_up_at_isValid = ::OpenAPI::fromJsonValue(m_node_up_at, json[QString("NodeUpAt")]);
    m_node_up_at_isSet = !json[QString("NodeUpAt")].isNull() && m_node_up_at_isValid;

    m_node_up_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_node_up_time_in_seconds, json[QString("NodeUpTimeInSeconds")]);
    m_node_up_time_in_seconds_isSet = !json[QString("NodeUpTimeInSeconds")].isNull() && m_node_up_time_in_seconds_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_upgrade_domain_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain, json[QString("UpgradeDomain")]);
    m_upgrade_domain_isSet = !json[QString("UpgradeDomain")].isNull() && m_upgrade_domain_isValid;
}

QString OAINodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_code_version_isSet) {
        obj.insert(QString("CodeVersion"), ::OpenAPI::toJsonValue(m_code_version));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("ConfigVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_fault_domain_isSet) {
        obj.insert(QString("FaultDomain"), ::OpenAPI::toJsonValue(m_fault_domain));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_id.isSet()) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_ip_address_or_fqdn_isSet) {
        obj.insert(QString("IpAddressOrFQDN"), ::OpenAPI::toJsonValue(m_ip_address_or_fqdn));
    }
    if (m_is_seed_node_isSet) {
        obj.insert(QString("IsSeedNode"), ::OpenAPI::toJsonValue(m_is_seed_node));
    }
    if (m_is_stopped_isSet) {
        obj.insert(QString("IsStopped"), ::OpenAPI::toJsonValue(m_is_stopped));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_deactivation_info.isSet()) {
        obj.insert(QString("NodeDeactivationInfo"), ::OpenAPI::toJsonValue(m_node_deactivation_info));
    }
    if (m_node_down_at_isSet) {
        obj.insert(QString("NodeDownAt"), ::OpenAPI::toJsonValue(m_node_down_at));
    }
    if (m_node_down_time_in_seconds_isSet) {
        obj.insert(QString("NodeDownTimeInSeconds"), ::OpenAPI::toJsonValue(m_node_down_time_in_seconds));
    }
    if (m_node_status.isSet()) {
        obj.insert(QString("NodeStatus"), ::OpenAPI::toJsonValue(m_node_status));
    }
    if (m_node_up_at_isSet) {
        obj.insert(QString("NodeUpAt"), ::OpenAPI::toJsonValue(m_node_up_at));
    }
    if (m_node_up_time_in_seconds_isSet) {
        obj.insert(QString("NodeUpTimeInSeconds"), ::OpenAPI::toJsonValue(m_node_up_time_in_seconds));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_upgrade_domain_isSet) {
        obj.insert(QString("UpgradeDomain"), ::OpenAPI::toJsonValue(m_upgrade_domain));
    }
    return obj;
}

QString OAINodeInfo::getCodeVersion() const {
    return m_code_version;
}
void OAINodeInfo::setCodeVersion(const QString &code_version) {
    m_code_version = code_version;
    m_code_version_isSet = true;
}

bool OAINodeInfo::is_code_version_Set() const{
    return m_code_version_isSet;
}

bool OAINodeInfo::is_code_version_Valid() const{
    return m_code_version_isValid;
}

QString OAINodeInfo::getConfigVersion() const {
    return m_config_version;
}
void OAINodeInfo::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAINodeInfo::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAINodeInfo::is_config_version_Valid() const{
    return m_config_version_isValid;
}

QString OAINodeInfo::getFaultDomain() const {
    return m_fault_domain;
}
void OAINodeInfo::setFaultDomain(const QString &fault_domain) {
    m_fault_domain = fault_domain;
    m_fault_domain_isSet = true;
}

bool OAINodeInfo::is_fault_domain_Set() const{
    return m_fault_domain_isSet;
}

bool OAINodeInfo::is_fault_domain_Valid() const{
    return m_fault_domain_isValid;
}

OAIHealthState OAINodeInfo::getHealthState() const {
    return m_health_state;
}
void OAINodeInfo::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAINodeInfo::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAINodeInfo::is_health_state_Valid() const{
    return m_health_state_isValid;
}

OAINodeId OAINodeInfo::getId() const {
    return m_id;
}
void OAINodeInfo::setId(const OAINodeId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINodeInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAINodeInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINodeInfo::getInstanceId() const {
    return m_instance_id;
}
void OAINodeInfo::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAINodeInfo::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAINodeInfo::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAINodeInfo::getIpAddressOrFqdn() const {
    return m_ip_address_or_fqdn;
}
void OAINodeInfo::setIpAddressOrFqdn(const QString &ip_address_or_fqdn) {
    m_ip_address_or_fqdn = ip_address_or_fqdn;
    m_ip_address_or_fqdn_isSet = true;
}

bool OAINodeInfo::is_ip_address_or_fqdn_Set() const{
    return m_ip_address_or_fqdn_isSet;
}

bool OAINodeInfo::is_ip_address_or_fqdn_Valid() const{
    return m_ip_address_or_fqdn_isValid;
}

bool OAINodeInfo::isIsSeedNode() const {
    return m_is_seed_node;
}
void OAINodeInfo::setIsSeedNode(const bool &is_seed_node) {
    m_is_seed_node = is_seed_node;
    m_is_seed_node_isSet = true;
}

bool OAINodeInfo::is_is_seed_node_Set() const{
    return m_is_seed_node_isSet;
}

bool OAINodeInfo::is_is_seed_node_Valid() const{
    return m_is_seed_node_isValid;
}

bool OAINodeInfo::isIsStopped() const {
    return m_is_stopped;
}
void OAINodeInfo::setIsStopped(const bool &is_stopped) {
    m_is_stopped = is_stopped;
    m_is_stopped_isSet = true;
}

bool OAINodeInfo::is_is_stopped_Set() const{
    return m_is_stopped_isSet;
}

bool OAINodeInfo::is_is_stopped_Valid() const{
    return m_is_stopped_isValid;
}

QString OAINodeInfo::getName() const {
    return m_name;
}
void OAINodeInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodeInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodeInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAINodeDeactivationInfo OAINodeInfo::getNodeDeactivationInfo() const {
    return m_node_deactivation_info;
}
void OAINodeInfo::setNodeDeactivationInfo(const OAINodeDeactivationInfo &node_deactivation_info) {
    m_node_deactivation_info = node_deactivation_info;
    m_node_deactivation_info_isSet = true;
}

bool OAINodeInfo::is_node_deactivation_info_Set() const{
    return m_node_deactivation_info_isSet;
}

bool OAINodeInfo::is_node_deactivation_info_Valid() const{
    return m_node_deactivation_info_isValid;
}

QDateTime OAINodeInfo::getNodeDownAt() const {
    return m_node_down_at;
}
void OAINodeInfo::setNodeDownAt(const QDateTime &node_down_at) {
    m_node_down_at = node_down_at;
    m_node_down_at_isSet = true;
}

bool OAINodeInfo::is_node_down_at_Set() const{
    return m_node_down_at_isSet;
}

bool OAINodeInfo::is_node_down_at_Valid() const{
    return m_node_down_at_isValid;
}

QString OAINodeInfo::getNodeDownTimeInSeconds() const {
    return m_node_down_time_in_seconds;
}
void OAINodeInfo::setNodeDownTimeInSeconds(const QString &node_down_time_in_seconds) {
    m_node_down_time_in_seconds = node_down_time_in_seconds;
    m_node_down_time_in_seconds_isSet = true;
}

bool OAINodeInfo::is_node_down_time_in_seconds_Set() const{
    return m_node_down_time_in_seconds_isSet;
}

bool OAINodeInfo::is_node_down_time_in_seconds_Valid() const{
    return m_node_down_time_in_seconds_isValid;
}

OAINodeStatus OAINodeInfo::getNodeStatus() const {
    return m_node_status;
}
void OAINodeInfo::setNodeStatus(const OAINodeStatus &node_status) {
    m_node_status = node_status;
    m_node_status_isSet = true;
}

bool OAINodeInfo::is_node_status_Set() const{
    return m_node_status_isSet;
}

bool OAINodeInfo::is_node_status_Valid() const{
    return m_node_status_isValid;
}

QDateTime OAINodeInfo::getNodeUpAt() const {
    return m_node_up_at;
}
void OAINodeInfo::setNodeUpAt(const QDateTime &node_up_at) {
    m_node_up_at = node_up_at;
    m_node_up_at_isSet = true;
}

bool OAINodeInfo::is_node_up_at_Set() const{
    return m_node_up_at_isSet;
}

bool OAINodeInfo::is_node_up_at_Valid() const{
    return m_node_up_at_isValid;
}

QString OAINodeInfo::getNodeUpTimeInSeconds() const {
    return m_node_up_time_in_seconds;
}
void OAINodeInfo::setNodeUpTimeInSeconds(const QString &node_up_time_in_seconds) {
    m_node_up_time_in_seconds = node_up_time_in_seconds;
    m_node_up_time_in_seconds_isSet = true;
}

bool OAINodeInfo::is_node_up_time_in_seconds_Set() const{
    return m_node_up_time_in_seconds_isSet;
}

bool OAINodeInfo::is_node_up_time_in_seconds_Valid() const{
    return m_node_up_time_in_seconds_isValid;
}

QString OAINodeInfo::getType() const {
    return m_type;
}
void OAINodeInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINodeInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAINodeInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINodeInfo::getUpgradeDomain() const {
    return m_upgrade_domain;
}
void OAINodeInfo::setUpgradeDomain(const QString &upgrade_domain) {
    m_upgrade_domain = upgrade_domain;
    m_upgrade_domain_isSet = true;
}

bool OAINodeInfo::is_upgrade_domain_Set() const{
    return m_upgrade_domain_isSet;
}

bool OAINodeInfo::is_upgrade_domain_Valid() const{
    return m_upgrade_domain_isValid;
}

bool OAINodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_or_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_seed_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_deactivation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_down_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_down_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_up_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_up_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
