/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeDeactivationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeDeactivationInfo::OAINodeDeactivationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeDeactivationInfo::OAINodeDeactivationInfo() {
    this->initializeModel();
}

OAINodeDeactivationInfo::~OAINodeDeactivationInfo() {}

void OAINodeDeactivationInfo::initializeModel() {

    m_node_deactivation_intent_isSet = false;
    m_node_deactivation_intent_isValid = false;

    m_node_deactivation_status_isSet = false;
    m_node_deactivation_status_isValid = false;

    m_node_deactivation_task_isSet = false;
    m_node_deactivation_task_isValid = false;

    m_pending_safety_checks_isSet = false;
    m_pending_safety_checks_isValid = false;
}

void OAINodeDeactivationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeDeactivationInfo::fromJsonObject(QJsonObject json) {

    m_node_deactivation_intent_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_intent, json[QString("NodeDeactivationIntent")]);
    m_node_deactivation_intent_isSet = !json[QString("NodeDeactivationIntent")].isNull() && m_node_deactivation_intent_isValid;

    m_node_deactivation_status_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_status, json[QString("NodeDeactivationStatus")]);
    m_node_deactivation_status_isSet = !json[QString("NodeDeactivationStatus")].isNull() && m_node_deactivation_status_isValid;

    m_node_deactivation_task_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_task, json[QString("NodeDeactivationTask")]);
    m_node_deactivation_task_isSet = !json[QString("NodeDeactivationTask")].isNull() && m_node_deactivation_task_isValid;

    m_pending_safety_checks_isValid = ::OpenAPI::fromJsonValue(m_pending_safety_checks, json[QString("PendingSafetyChecks")]);
    m_pending_safety_checks_isSet = !json[QString("PendingSafetyChecks")].isNull() && m_pending_safety_checks_isValid;
}

QString OAINodeDeactivationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeDeactivationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_node_deactivation_intent.isSet()) {
        obj.insert(QString("NodeDeactivationIntent"), ::OpenAPI::toJsonValue(m_node_deactivation_intent));
    }
    if (m_node_deactivation_status.isSet()) {
        obj.insert(QString("NodeDeactivationStatus"), ::OpenAPI::toJsonValue(m_node_deactivation_status));
    }
    if (m_node_deactivation_task.size() > 0) {
        obj.insert(QString("NodeDeactivationTask"), ::OpenAPI::toJsonValue(m_node_deactivation_task));
    }
    if (m_pending_safety_checks.size() > 0) {
        obj.insert(QString("PendingSafetyChecks"), ::OpenAPI::toJsonValue(m_pending_safety_checks));
    }
    return obj;
}

OAINodeDeactivationIntent OAINodeDeactivationInfo::getNodeDeactivationIntent() const {
    return m_node_deactivation_intent;
}
void OAINodeDeactivationInfo::setNodeDeactivationIntent(const OAINodeDeactivationIntent &node_deactivation_intent) {
    m_node_deactivation_intent = node_deactivation_intent;
    m_node_deactivation_intent_isSet = true;
}

bool OAINodeDeactivationInfo::is_node_deactivation_intent_Set() const{
    return m_node_deactivation_intent_isSet;
}

bool OAINodeDeactivationInfo::is_node_deactivation_intent_Valid() const{
    return m_node_deactivation_intent_isValid;
}

OAINodeDeactivationStatus OAINodeDeactivationInfo::getNodeDeactivationStatus() const {
    return m_node_deactivation_status;
}
void OAINodeDeactivationInfo::setNodeDeactivationStatus(const OAINodeDeactivationStatus &node_deactivation_status) {
    m_node_deactivation_status = node_deactivation_status;
    m_node_deactivation_status_isSet = true;
}

bool OAINodeDeactivationInfo::is_node_deactivation_status_Set() const{
    return m_node_deactivation_status_isSet;
}

bool OAINodeDeactivationInfo::is_node_deactivation_status_Valid() const{
    return m_node_deactivation_status_isValid;
}

QList<OAINodeDeactivationTask> OAINodeDeactivationInfo::getNodeDeactivationTask() const {
    return m_node_deactivation_task;
}
void OAINodeDeactivationInfo::setNodeDeactivationTask(const QList<OAINodeDeactivationTask> &node_deactivation_task) {
    m_node_deactivation_task = node_deactivation_task;
    m_node_deactivation_task_isSet = true;
}

bool OAINodeDeactivationInfo::is_node_deactivation_task_Set() const{
    return m_node_deactivation_task_isSet;
}

bool OAINodeDeactivationInfo::is_node_deactivation_task_Valid() const{
    return m_node_deactivation_task_isValid;
}

QList<OAISafetyCheckWrapper> OAINodeDeactivationInfo::getPendingSafetyChecks() const {
    return m_pending_safety_checks;
}
void OAINodeDeactivationInfo::setPendingSafetyChecks(const QList<OAISafetyCheckWrapper> &pending_safety_checks) {
    m_pending_safety_checks = pending_safety_checks;
    m_pending_safety_checks_isSet = true;
}

bool OAINodeDeactivationInfo::is_pending_safety_checks_Set() const{
    return m_pending_safety_checks_isSet;
}

bool OAINodeDeactivationInfo::is_pending_safety_checks_Valid() const{
    return m_pending_safety_checks_isValid;
}

bool OAINodeDeactivationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_deactivation_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_deactivation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_deactivation_task.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_safety_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeDeactivationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
