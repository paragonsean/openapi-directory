/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeUpgradeProgressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeUpgradeProgressInfo::OAINodeUpgradeProgressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeUpgradeProgressInfo::OAINodeUpgradeProgressInfo() {
    this->initializeModel();
}

OAINodeUpgradeProgressInfo::~OAINodeUpgradeProgressInfo() {}

void OAINodeUpgradeProgressInfo::initializeModel() {

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_pending_safety_checks_isSet = false;
    m_pending_safety_checks_isValid = false;

    m_upgrade_phase_isSet = false;
    m_upgrade_phase_isValid = false;
}

void OAINodeUpgradeProgressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeUpgradeProgressInfo::fromJsonObject(QJsonObject json) {

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_pending_safety_checks_isValid = ::OpenAPI::fromJsonValue(m_pending_safety_checks, json[QString("PendingSafetyChecks")]);
    m_pending_safety_checks_isSet = !json[QString("PendingSafetyChecks")].isNull() && m_pending_safety_checks_isValid;

    m_upgrade_phase_isValid = ::OpenAPI::fromJsonValue(m_upgrade_phase, json[QString("UpgradePhase")]);
    m_upgrade_phase_isSet = !json[QString("UpgradePhase")].isNull() && m_upgrade_phase_isValid;
}

QString OAINodeUpgradeProgressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeUpgradeProgressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_pending_safety_checks.size() > 0) {
        obj.insert(QString("PendingSafetyChecks"), ::OpenAPI::toJsonValue(m_pending_safety_checks));
    }
    if (m_upgrade_phase.isSet()) {
        obj.insert(QString("UpgradePhase"), ::OpenAPI::toJsonValue(m_upgrade_phase));
    }
    return obj;
}

QString OAINodeUpgradeProgressInfo::getNodeName() const {
    return m_node_name;
}
void OAINodeUpgradeProgressInfo::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAINodeUpgradeProgressInfo::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAINodeUpgradeProgressInfo::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QList<OAISafetyCheckWrapper> OAINodeUpgradeProgressInfo::getPendingSafetyChecks() const {
    return m_pending_safety_checks;
}
void OAINodeUpgradeProgressInfo::setPendingSafetyChecks(const QList<OAISafetyCheckWrapper> &pending_safety_checks) {
    m_pending_safety_checks = pending_safety_checks;
    m_pending_safety_checks_isSet = true;
}

bool OAINodeUpgradeProgressInfo::is_pending_safety_checks_Set() const{
    return m_pending_safety_checks_isSet;
}

bool OAINodeUpgradeProgressInfo::is_pending_safety_checks_Valid() const{
    return m_pending_safety_checks_isValid;
}

OAINodeUpgradePhase OAINodeUpgradeProgressInfo::getUpgradePhase() const {
    return m_upgrade_phase;
}
void OAINodeUpgradeProgressInfo::setUpgradePhase(const OAINodeUpgradePhase &upgrade_phase) {
    m_upgrade_phase = upgrade_phase;
    m_upgrade_phase_isSet = true;
}

bool OAINodeUpgradeProgressInfo::is_upgrade_phase_Set() const{
    return m_upgrade_phase_isSet;
}

bool OAINodeUpgradeProgressInfo::is_upgrade_phase_Valid() const{
    return m_upgrade_phase_isValid;
}

bool OAINodeUpgradeProgressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_safety_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeUpgradeProgressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
