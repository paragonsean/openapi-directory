/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceInfo::OAIServiceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceInfo::OAIServiceInfo() {
    this->initializeModel();
}

OAIServiceInfo::~OAIServiceInfo() {}

void OAIServiceInfo::initializeModel() {

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_service_group_isSet = false;
    m_is_service_group_isValid = false;

    m_manifest_version_isSet = false;
    m_manifest_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_status_isSet = false;
    m_service_status_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIServiceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceInfo::fromJsonObject(QJsonObject json) {

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_service_group_isValid = ::OpenAPI::fromJsonValue(m_is_service_group, json[QString("IsServiceGroup")]);
    m_is_service_group_isSet = !json[QString("IsServiceGroup")].isNull() && m_is_service_group_isValid;

    m_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_manifest_version, json[QString("ManifestVersion")]);
    m_manifest_version_isSet = !json[QString("ManifestVersion")].isNull() && m_manifest_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_status_isValid = ::OpenAPI::fromJsonValue(m_service_status, json[QString("ServiceStatus")]);
    m_service_status_isSet = !json[QString("ServiceStatus")].isNull() && m_service_status_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;
}

QString OAIServiceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_service_group_isSet) {
        obj.insert(QString("IsServiceGroup"), ::OpenAPI::toJsonValue(m_is_service_group));
    }
    if (m_manifest_version_isSet) {
        obj.insert(QString("ManifestVersion"), ::OpenAPI::toJsonValue(m_manifest_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_status.isSet()) {
        obj.insert(QString("ServiceStatus"), ::OpenAPI::toJsonValue(m_service_status));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

OAIHealthState OAIServiceInfo::getHealthState() const {
    return m_health_state;
}
void OAIServiceInfo::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIServiceInfo::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIServiceInfo::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIServiceInfo::getId() const {
    return m_id;
}
void OAIServiceInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIServiceInfo::isIsServiceGroup() const {
    return m_is_service_group;
}
void OAIServiceInfo::setIsServiceGroup(const bool &is_service_group) {
    m_is_service_group = is_service_group;
    m_is_service_group_isSet = true;
}

bool OAIServiceInfo::is_is_service_group_Set() const{
    return m_is_service_group_isSet;
}

bool OAIServiceInfo::is_is_service_group_Valid() const{
    return m_is_service_group_isValid;
}

QString OAIServiceInfo::getManifestVersion() const {
    return m_manifest_version;
}
void OAIServiceInfo::setManifestVersion(const QString &manifest_version) {
    m_manifest_version = manifest_version;
    m_manifest_version_isSet = true;
}

bool OAIServiceInfo::is_manifest_version_Set() const{
    return m_manifest_version_isSet;
}

bool OAIServiceInfo::is_manifest_version_Valid() const{
    return m_manifest_version_isValid;
}

QString OAIServiceInfo::getName() const {
    return m_name;
}
void OAIServiceInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceKind OAIServiceInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIServiceInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIServiceInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIServiceInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

OAIServiceStatus OAIServiceInfo::getServiceStatus() const {
    return m_service_status;
}
void OAIServiceInfo::setServiceStatus(const OAIServiceStatus &service_status) {
    m_service_status = service_status;
    m_service_status_isSet = true;
}

bool OAIServiceInfo::is_service_status_Set() const{
    return m_service_status_isSet;
}

bool OAIServiceInfo::is_service_status_Valid() const{
    return m_service_status_isValid;
}

QString OAIServiceInfo::getTypeName() const {
    return m_type_name;
}
void OAIServiceInfo::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIServiceInfo::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIServiceInfo::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIServiceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_service_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
