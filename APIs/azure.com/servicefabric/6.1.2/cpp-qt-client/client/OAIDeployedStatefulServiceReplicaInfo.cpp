/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedStatefulServiceReplicaInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedStatefulServiceReplicaInfo::OAIDeployedStatefulServiceReplicaInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedStatefulServiceReplicaInfo::OAIDeployedStatefulServiceReplicaInfo() {
    this->initializeModel();
}

OAIDeployedStatefulServiceReplicaInfo::~OAIDeployedStatefulServiceReplicaInfo() {}

void OAIDeployedStatefulServiceReplicaInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_code_package_name_isSet = false;
    m_code_package_name_isValid = false;

    m_host_process_id_isSet = false;
    m_host_process_id_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_status_isSet = false;
    m_replica_status_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_package_activation_id_isSet = false;
    m_service_package_activation_id_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;

    m_reconfiguration_information_isSet = false;
    m_reconfiguration_information_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_replica_role_isSet = false;
    m_replica_role_isValid = false;
}

void OAIDeployedStatefulServiceReplicaInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedStatefulServiceReplicaInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_code_package_name_isValid = ::OpenAPI::fromJsonValue(m_code_package_name, json[QString("CodePackageName")]);
    m_code_package_name_isSet = !json[QString("CodePackageName")].isNull() && m_code_package_name_isValid;

    m_host_process_id_isValid = ::OpenAPI::fromJsonValue(m_host_process_id, json[QString("HostProcessId")]);
    m_host_process_id_isSet = !json[QString("HostProcessId")].isNull() && m_host_process_id_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_status_isValid = ::OpenAPI::fromJsonValue(m_replica_status, json[QString("ReplicaStatus")]);
    m_replica_status_isSet = !json[QString("ReplicaStatus")].isNull() && m_replica_status_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_package_activation_id_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_id, json[QString("ServicePackageActivationId")]);
    m_service_package_activation_id_isSet = !json[QString("ServicePackageActivationId")].isNull() && m_service_package_activation_id_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;

    m_reconfiguration_information_isValid = ::OpenAPI::fromJsonValue(m_reconfiguration_information, json[QString("ReconfigurationInformation")]);
    m_reconfiguration_information_isSet = !json[QString("ReconfigurationInformation")].isNull() && m_reconfiguration_information_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;

    m_replica_role_isValid = ::OpenAPI::fromJsonValue(m_replica_role, json[QString("ReplicaRole")]);
    m_replica_role_isSet = !json[QString("ReplicaRole")].isNull() && m_replica_role_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedStatefulServiceReplicaInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_code_package_name_isSet) {
        obj.insert(QString("CodePackageName"), ::OpenAPI::toJsonValue(m_code_package_name));
    }
    if (m_host_process_id_isSet) {
        obj.insert(QString("HostProcessId"), ::OpenAPI::toJsonValue(m_host_process_id));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_status.isSet()) {
        obj.insert(QString("ReplicaStatus"), ::OpenAPI::toJsonValue(m_replica_status));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_package_activation_id_isSet) {
        obj.insert(QString("ServicePackageActivationId"), ::OpenAPI::toJsonValue(m_service_package_activation_id));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    if (m_reconfiguration_information.isSet()) {
        obj.insert(QString("ReconfigurationInformation"), ::OpenAPI::toJsonValue(m_reconfiguration_information));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_replica_role.isSet()) {
        obj.insert(QString("ReplicaRole"), ::OpenAPI::toJsonValue(m_replica_role));
    }
    return obj;
}

QString OAIDeployedStatefulServiceReplicaInfo::getAddress() const {
    return m_address;
}
void OAIDeployedStatefulServiceReplicaInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getCodePackageName() const {
    return m_code_package_name;
}
void OAIDeployedStatefulServiceReplicaInfo::setCodePackageName(const QString &code_package_name) {
    m_code_package_name = code_package_name;
    m_code_package_name_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_code_package_name_Set() const{
    return m_code_package_name_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_code_package_name_Valid() const{
    return m_code_package_name_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getHostProcessId() const {
    return m_host_process_id;
}
void OAIDeployedStatefulServiceReplicaInfo::setHostProcessId(const QString &host_process_id) {
    m_host_process_id = host_process_id;
    m_host_process_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_host_process_id_Set() const{
    return m_host_process_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_host_process_id_Valid() const{
    return m_host_process_id_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getPartitionId() const {
    return m_partition_id;
}
void OAIDeployedStatefulServiceReplicaInfo::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

OAIReplicaStatus OAIDeployedStatefulServiceReplicaInfo::getReplicaStatus() const {
    return m_replica_status;
}
void OAIDeployedStatefulServiceReplicaInfo::setReplicaStatus(const OAIReplicaStatus &replica_status) {
    m_replica_status = replica_status;
    m_replica_status_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_status_Set() const{
    return m_replica_status_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_status_Valid() const{
    return m_replica_status_isValid;
}

OAIServiceKind OAIDeployedStatefulServiceReplicaInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIDeployedStatefulServiceReplicaInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIDeployedStatefulServiceReplicaInfo::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getServiceName() const {
    return m_service_name;
}
void OAIDeployedStatefulServiceReplicaInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getServicePackageActivationId() const {
    return m_service_package_activation_id;
}
void OAIDeployedStatefulServiceReplicaInfo::setServicePackageActivationId(const QString &service_package_activation_id) {
    m_service_package_activation_id = service_package_activation_id;
    m_service_package_activation_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_package_activation_id_Set() const{
    return m_service_package_activation_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_package_activation_id_Valid() const{
    return m_service_package_activation_id_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIDeployedStatefulServiceReplicaInfo::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

OAIReconfigurationInformation OAIDeployedStatefulServiceReplicaInfo::getReconfigurationInformation() const {
    return m_reconfiguration_information;
}
void OAIDeployedStatefulServiceReplicaInfo::setReconfigurationInformation(const OAIReconfigurationInformation &reconfiguration_information) {
    m_reconfiguration_information = reconfiguration_information;
    m_reconfiguration_information_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_reconfiguration_information_Set() const{
    return m_reconfiguration_information_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_reconfiguration_information_Valid() const{
    return m_reconfiguration_information_isValid;
}

QString OAIDeployedStatefulServiceReplicaInfo::getReplicaId() const {
    return m_replica_id;
}
void OAIDeployedStatefulServiceReplicaInfo::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

OAIReplicaRole OAIDeployedStatefulServiceReplicaInfo::getReplicaRole() const {
    return m_replica_role;
}
void OAIDeployedStatefulServiceReplicaInfo::setReplicaRole(const OAIReplicaRole &replica_role) {
    m_replica_role = replica_role;
    m_replica_role_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_role_Set() const{
    return m_replica_role_isSet;
}

bool OAIDeployedStatefulServiceReplicaInfo::is_replica_role_Valid() const{
    return m_replica_role_isValid;
}

bool OAIDeployedStatefulServiceReplicaInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_process_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconfiguration_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_role.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedStatefulServiceReplicaInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
