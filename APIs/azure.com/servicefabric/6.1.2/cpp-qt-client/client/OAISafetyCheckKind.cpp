/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISafetyCheckKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISafetyCheckKind::OAISafetyCheckKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISafetyCheckKind::OAISafetyCheckKind() {
    this->initializeModel();
}

OAISafetyCheckKind::~OAISafetyCheckKind() {}

void OAISafetyCheckKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISafetyCheckKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISafetyCheckKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnsureSeedNodeQuorum", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::ENSURESEEDNODEQUORUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnsurePartitionQuorum", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::ENSUREPARTITIONQUORUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitForPrimaryPlacement", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::WAITFORPRIMARYPLACEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitForPrimarySwap", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::WAITFORPRIMARYSWAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitForReconfiguration", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::WAITFORRECONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WaitForInbuildReplica", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::WAITFORINBUILDREPLICA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnsureAvailability", Qt::CaseInsensitive) == 0) {
        m_value = eOAISafetyCheckKind::ENSUREAVAILABILITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISafetyCheckKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISafetyCheckKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISafetyCheckKind::INVALID:
            val = "Invalid";
            break;
        case eOAISafetyCheckKind::ENSURESEEDNODEQUORUM:
            val = "EnsureSeedNodeQuorum";
            break;
        case eOAISafetyCheckKind::ENSUREPARTITIONQUORUM:
            val = "EnsurePartitionQuorum";
            break;
        case eOAISafetyCheckKind::WAITFORPRIMARYPLACEMENT:
            val = "WaitForPrimaryPlacement";
            break;
        case eOAISafetyCheckKind::WAITFORPRIMARYSWAP:
            val = "WaitForPrimarySwap";
            break;
        case eOAISafetyCheckKind::WAITFORRECONFIGURATION:
            val = "WaitForReconfiguration";
            break;
        case eOAISafetyCheckKind::WAITFORINBUILDREPLICA:
            val = "WaitForInbuildReplica";
            break;
        case eOAISafetyCheckKind::ENSUREAVAILABILITY:
            val = "EnsureAvailability";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISafetyCheckKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISafetyCheckKind::eOAISafetyCheckKind OAISafetyCheckKind::getValue() const {
    return m_value;
}

void OAISafetyCheckKind::setValue(const OAISafetyCheckKind::eOAISafetyCheckKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISafetyCheckKind::isSet() const {
    
    return m_value_isSet;
}

bool OAISafetyCheckKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
