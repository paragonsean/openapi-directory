/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteReplicatorStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteReplicatorStatus::OAIRemoteReplicatorStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteReplicatorStatus::OAIRemoteReplicatorStatus() {
    this->initializeModel();
}

OAIRemoteReplicatorStatus::~OAIRemoteReplicatorStatus() {}

void OAIRemoteReplicatorStatus::initializeModel() {

    m_is_in_build_isSet = false;
    m_is_in_build_isValid = false;

    m_last_acknowledgement_processed_time_utc_isSet = false;
    m_last_acknowledgement_processed_time_utc_isValid = false;

    m_last_applied_copy_sequence_number_isSet = false;
    m_last_applied_copy_sequence_number_isValid = false;

    m_last_applied_replication_sequence_number_isSet = false;
    m_last_applied_replication_sequence_number_isValid = false;

    m_last_received_copy_sequence_number_isSet = false;
    m_last_received_copy_sequence_number_isValid = false;

    m_last_received_replication_sequence_number_isSet = false;
    m_last_received_replication_sequence_number_isValid = false;

    m_remote_replicator_acknowledgement_status_isSet = false;
    m_remote_replicator_acknowledgement_status_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;
}

void OAIRemoteReplicatorStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteReplicatorStatus::fromJsonObject(QJsonObject json) {

    m_is_in_build_isValid = ::OpenAPI::fromJsonValue(m_is_in_build, json[QString("IsInBuild")]);
    m_is_in_build_isSet = !json[QString("IsInBuild")].isNull() && m_is_in_build_isValid;

    m_last_acknowledgement_processed_time_utc_isValid = ::OpenAPI::fromJsonValue(m_last_acknowledgement_processed_time_utc, json[QString("LastAcknowledgementProcessedTimeUtc")]);
    m_last_acknowledgement_processed_time_utc_isSet = !json[QString("LastAcknowledgementProcessedTimeUtc")].isNull() && m_last_acknowledgement_processed_time_utc_isValid;

    m_last_applied_copy_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_last_applied_copy_sequence_number, json[QString("LastAppliedCopySequenceNumber")]);
    m_last_applied_copy_sequence_number_isSet = !json[QString("LastAppliedCopySequenceNumber")].isNull() && m_last_applied_copy_sequence_number_isValid;

    m_last_applied_replication_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_last_applied_replication_sequence_number, json[QString("LastAppliedReplicationSequenceNumber")]);
    m_last_applied_replication_sequence_number_isSet = !json[QString("LastAppliedReplicationSequenceNumber")].isNull() && m_last_applied_replication_sequence_number_isValid;

    m_last_received_copy_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_last_received_copy_sequence_number, json[QString("LastReceivedCopySequenceNumber")]);
    m_last_received_copy_sequence_number_isSet = !json[QString("LastReceivedCopySequenceNumber")].isNull() && m_last_received_copy_sequence_number_isValid;

    m_last_received_replication_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_last_received_replication_sequence_number, json[QString("LastReceivedReplicationSequenceNumber")]);
    m_last_received_replication_sequence_number_isSet = !json[QString("LastReceivedReplicationSequenceNumber")].isNull() && m_last_received_replication_sequence_number_isValid;

    m_remote_replicator_acknowledgement_status_isValid = ::OpenAPI::fromJsonValue(m_remote_replicator_acknowledgement_status, json[QString("RemoteReplicatorAcknowledgementStatus")]);
    m_remote_replicator_acknowledgement_status_isSet = !json[QString("RemoteReplicatorAcknowledgementStatus")].isNull() && m_remote_replicator_acknowledgement_status_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;
}

QString OAIRemoteReplicatorStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteReplicatorStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_is_in_build_isSet) {
        obj.insert(QString("IsInBuild"), ::OpenAPI::toJsonValue(m_is_in_build));
    }
    if (m_last_acknowledgement_processed_time_utc_isSet) {
        obj.insert(QString("LastAcknowledgementProcessedTimeUtc"), ::OpenAPI::toJsonValue(m_last_acknowledgement_processed_time_utc));
    }
    if (m_last_applied_copy_sequence_number_isSet) {
        obj.insert(QString("LastAppliedCopySequenceNumber"), ::OpenAPI::toJsonValue(m_last_applied_copy_sequence_number));
    }
    if (m_last_applied_replication_sequence_number_isSet) {
        obj.insert(QString("LastAppliedReplicationSequenceNumber"), ::OpenAPI::toJsonValue(m_last_applied_replication_sequence_number));
    }
    if (m_last_received_copy_sequence_number_isSet) {
        obj.insert(QString("LastReceivedCopySequenceNumber"), ::OpenAPI::toJsonValue(m_last_received_copy_sequence_number));
    }
    if (m_last_received_replication_sequence_number_isSet) {
        obj.insert(QString("LastReceivedReplicationSequenceNumber"), ::OpenAPI::toJsonValue(m_last_received_replication_sequence_number));
    }
    if (m_remote_replicator_acknowledgement_status.isSet()) {
        obj.insert(QString("RemoteReplicatorAcknowledgementStatus"), ::OpenAPI::toJsonValue(m_remote_replicator_acknowledgement_status));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    return obj;
}

bool OAIRemoteReplicatorStatus::isIsInBuild() const {
    return m_is_in_build;
}
void OAIRemoteReplicatorStatus::setIsInBuild(const bool &is_in_build) {
    m_is_in_build = is_in_build;
    m_is_in_build_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_is_in_build_Set() const{
    return m_is_in_build_isSet;
}

bool OAIRemoteReplicatorStatus::is_is_in_build_Valid() const{
    return m_is_in_build_isValid;
}

QDateTime OAIRemoteReplicatorStatus::getLastAcknowledgementProcessedTimeUtc() const {
    return m_last_acknowledgement_processed_time_utc;
}
void OAIRemoteReplicatorStatus::setLastAcknowledgementProcessedTimeUtc(const QDateTime &last_acknowledgement_processed_time_utc) {
    m_last_acknowledgement_processed_time_utc = last_acknowledgement_processed_time_utc;
    m_last_acknowledgement_processed_time_utc_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_last_acknowledgement_processed_time_utc_Set() const{
    return m_last_acknowledgement_processed_time_utc_isSet;
}

bool OAIRemoteReplicatorStatus::is_last_acknowledgement_processed_time_utc_Valid() const{
    return m_last_acknowledgement_processed_time_utc_isValid;
}

QString OAIRemoteReplicatorStatus::getLastAppliedCopySequenceNumber() const {
    return m_last_applied_copy_sequence_number;
}
void OAIRemoteReplicatorStatus::setLastAppliedCopySequenceNumber(const QString &last_applied_copy_sequence_number) {
    m_last_applied_copy_sequence_number = last_applied_copy_sequence_number;
    m_last_applied_copy_sequence_number_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_last_applied_copy_sequence_number_Set() const{
    return m_last_applied_copy_sequence_number_isSet;
}

bool OAIRemoteReplicatorStatus::is_last_applied_copy_sequence_number_Valid() const{
    return m_last_applied_copy_sequence_number_isValid;
}

QString OAIRemoteReplicatorStatus::getLastAppliedReplicationSequenceNumber() const {
    return m_last_applied_replication_sequence_number;
}
void OAIRemoteReplicatorStatus::setLastAppliedReplicationSequenceNumber(const QString &last_applied_replication_sequence_number) {
    m_last_applied_replication_sequence_number = last_applied_replication_sequence_number;
    m_last_applied_replication_sequence_number_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_last_applied_replication_sequence_number_Set() const{
    return m_last_applied_replication_sequence_number_isSet;
}

bool OAIRemoteReplicatorStatus::is_last_applied_replication_sequence_number_Valid() const{
    return m_last_applied_replication_sequence_number_isValid;
}

QString OAIRemoteReplicatorStatus::getLastReceivedCopySequenceNumber() const {
    return m_last_received_copy_sequence_number;
}
void OAIRemoteReplicatorStatus::setLastReceivedCopySequenceNumber(const QString &last_received_copy_sequence_number) {
    m_last_received_copy_sequence_number = last_received_copy_sequence_number;
    m_last_received_copy_sequence_number_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_last_received_copy_sequence_number_Set() const{
    return m_last_received_copy_sequence_number_isSet;
}

bool OAIRemoteReplicatorStatus::is_last_received_copy_sequence_number_Valid() const{
    return m_last_received_copy_sequence_number_isValid;
}

QString OAIRemoteReplicatorStatus::getLastReceivedReplicationSequenceNumber() const {
    return m_last_received_replication_sequence_number;
}
void OAIRemoteReplicatorStatus::setLastReceivedReplicationSequenceNumber(const QString &last_received_replication_sequence_number) {
    m_last_received_replication_sequence_number = last_received_replication_sequence_number;
    m_last_received_replication_sequence_number_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_last_received_replication_sequence_number_Set() const{
    return m_last_received_replication_sequence_number_isSet;
}

bool OAIRemoteReplicatorStatus::is_last_received_replication_sequence_number_Valid() const{
    return m_last_received_replication_sequence_number_isValid;
}

OAIRemoteReplicatorAcknowledgementStatus OAIRemoteReplicatorStatus::getRemoteReplicatorAcknowledgementStatus() const {
    return m_remote_replicator_acknowledgement_status;
}
void OAIRemoteReplicatorStatus::setRemoteReplicatorAcknowledgementStatus(const OAIRemoteReplicatorAcknowledgementStatus &remote_replicator_acknowledgement_status) {
    m_remote_replicator_acknowledgement_status = remote_replicator_acknowledgement_status;
    m_remote_replicator_acknowledgement_status_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_remote_replicator_acknowledgement_status_Set() const{
    return m_remote_replicator_acknowledgement_status_isSet;
}

bool OAIRemoteReplicatorStatus::is_remote_replicator_acknowledgement_status_Valid() const{
    return m_remote_replicator_acknowledgement_status_isValid;
}

QString OAIRemoteReplicatorStatus::getReplicaId() const {
    return m_replica_id;
}
void OAIRemoteReplicatorStatus::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIRemoteReplicatorStatus::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIRemoteReplicatorStatus::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

bool OAIRemoteReplicatorStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_in_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_acknowledgement_processed_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_applied_copy_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_applied_replication_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_received_copy_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_received_replication_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_replicator_acknowledgement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteReplicatorStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
