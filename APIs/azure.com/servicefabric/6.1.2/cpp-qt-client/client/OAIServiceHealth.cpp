/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceHealth::OAIServiceHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceHealth::OAIServiceHealth() {
    this->initializeModel();
}

OAIServiceHealth::~OAIServiceHealth() {}

void OAIServiceHealth::initializeModel() {

    m_aggregated_health_state_isSet = false;
    m_aggregated_health_state_isValid = false;

    m_health_events_isSet = false;
    m_health_events_isValid = false;

    m_health_statistics_isSet = false;
    m_health_statistics_isValid = false;

    m_unhealthy_evaluations_isSet = false;
    m_unhealthy_evaluations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partition_health_states_isSet = false;
    m_partition_health_states_isValid = false;
}

void OAIServiceHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceHealth::fromJsonObject(QJsonObject json) {

    m_aggregated_health_state_isValid = ::OpenAPI::fromJsonValue(m_aggregated_health_state, json[QString("AggregatedHealthState")]);
    m_aggregated_health_state_isSet = !json[QString("AggregatedHealthState")].isNull() && m_aggregated_health_state_isValid;

    m_health_events_isValid = ::OpenAPI::fromJsonValue(m_health_events, json[QString("HealthEvents")]);
    m_health_events_isSet = !json[QString("HealthEvents")].isNull() && m_health_events_isValid;

    m_health_statistics_isValid = ::OpenAPI::fromJsonValue(m_health_statistics, json[QString("HealthStatistics")]);
    m_health_statistics_isSet = !json[QString("HealthStatistics")].isNull() && m_health_statistics_isValid;

    m_unhealthy_evaluations_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluations, json[QString("UnhealthyEvaluations")]);
    m_unhealthy_evaluations_isSet = !json[QString("UnhealthyEvaluations")].isNull() && m_unhealthy_evaluations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_partition_health_states_isValid = ::OpenAPI::fromJsonValue(m_partition_health_states, json[QString("PartitionHealthStates")]);
    m_partition_health_states_isSet = !json[QString("PartitionHealthStates")].isNull() && m_partition_health_states_isValid;
}

QString OAIServiceHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_health_state.isSet()) {
        obj.insert(QString("AggregatedHealthState"), ::OpenAPI::toJsonValue(m_aggregated_health_state));
    }
    if (m_health_events.size() > 0) {
        obj.insert(QString("HealthEvents"), ::OpenAPI::toJsonValue(m_health_events));
    }
    if (m_health_statistics.isSet()) {
        obj.insert(QString("HealthStatistics"), ::OpenAPI::toJsonValue(m_health_statistics));
    }
    if (m_unhealthy_evaluations.size() > 0) {
        obj.insert(QString("UnhealthyEvaluations"), ::OpenAPI::toJsonValue(m_unhealthy_evaluations));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partition_health_states.size() > 0) {
        obj.insert(QString("PartitionHealthStates"), ::OpenAPI::toJsonValue(m_partition_health_states));
    }
    return obj;
}

OAIHealthState OAIServiceHealth::getAggregatedHealthState() const {
    return m_aggregated_health_state;
}
void OAIServiceHealth::setAggregatedHealthState(const OAIHealthState &aggregated_health_state) {
    m_aggregated_health_state = aggregated_health_state;
    m_aggregated_health_state_isSet = true;
}

bool OAIServiceHealth::is_aggregated_health_state_Set() const{
    return m_aggregated_health_state_isSet;
}

bool OAIServiceHealth::is_aggregated_health_state_Valid() const{
    return m_aggregated_health_state_isValid;
}

QList<OAIHealthEvent> OAIServiceHealth::getHealthEvents() const {
    return m_health_events;
}
void OAIServiceHealth::setHealthEvents(const QList<OAIHealthEvent> &health_events) {
    m_health_events = health_events;
    m_health_events_isSet = true;
}

bool OAIServiceHealth::is_health_events_Set() const{
    return m_health_events_isSet;
}

bool OAIServiceHealth::is_health_events_Valid() const{
    return m_health_events_isValid;
}

OAIHealthStatistics OAIServiceHealth::getHealthStatistics() const {
    return m_health_statistics;
}
void OAIServiceHealth::setHealthStatistics(const OAIHealthStatistics &health_statistics) {
    m_health_statistics = health_statistics;
    m_health_statistics_isSet = true;
}

bool OAIServiceHealth::is_health_statistics_Set() const{
    return m_health_statistics_isSet;
}

bool OAIServiceHealth::is_health_statistics_Valid() const{
    return m_health_statistics_isValid;
}

QList<OAIHealthEvaluationWrapper> OAIServiceHealth::getUnhealthyEvaluations() const {
    return m_unhealthy_evaluations;
}
void OAIServiceHealth::setUnhealthyEvaluations(const QList<OAIHealthEvaluationWrapper> &unhealthy_evaluations) {
    m_unhealthy_evaluations = unhealthy_evaluations;
    m_unhealthy_evaluations_isSet = true;
}

bool OAIServiceHealth::is_unhealthy_evaluations_Set() const{
    return m_unhealthy_evaluations_isSet;
}

bool OAIServiceHealth::is_unhealthy_evaluations_Valid() const{
    return m_unhealthy_evaluations_isValid;
}

QString OAIServiceHealth::getName() const {
    return m_name;
}
void OAIServiceHealth::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceHealth::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceHealth::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPartitionHealthState> OAIServiceHealth::getPartitionHealthStates() const {
    return m_partition_health_states;
}
void OAIServiceHealth::setPartitionHealthStates(const QList<OAIPartitionHealthState> &partition_health_states) {
    m_partition_health_states = partition_health_states;
    m_partition_health_states_isSet = true;
}

bool OAIServiceHealth::is_partition_health_states_Set() const{
    return m_partition_health_states_isSet;
}

bool OAIServiceHealth::is_partition_health_states_Valid() const{
    return m_partition_health_states_isValid;
}

bool OAIServiceHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_health_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
