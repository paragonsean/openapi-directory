/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalStoreProvisionApplicationTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalStoreProvisionApplicationTypeDescription::OAIExternalStoreProvisionApplicationTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalStoreProvisionApplicationTypeDescription::OAIExternalStoreProvisionApplicationTypeDescription() {
    this->initializeModel();
}

OAIExternalStoreProvisionApplicationTypeDescription::~OAIExternalStoreProvisionApplicationTypeDescription() {}

void OAIExternalStoreProvisionApplicationTypeDescription::initializeModel() {

    m_async_isSet = false;
    m_async_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_application_package_download_uri_isSet = false;
    m_application_package_download_uri_isValid = false;

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_application_type_version_isSet = false;
    m_application_type_version_isValid = false;
}

void OAIExternalStoreProvisionApplicationTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalStoreProvisionApplicationTypeDescription::fromJsonObject(QJsonObject json) {

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("Async")]);
    m_async_isSet = !json[QString("Async")].isNull() && m_async_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_application_package_download_uri_isValid = ::OpenAPI::fromJsonValue(m_application_package_download_uri, json[QString("ApplicationPackageDownloadUri")]);
    m_application_package_download_uri_isSet = !json[QString("ApplicationPackageDownloadUri")].isNull() && m_application_package_download_uri_isValid;

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_application_type_version, json[QString("ApplicationTypeVersion")]);
    m_application_type_version_isSet = !json[QString("ApplicationTypeVersion")].isNull() && m_application_type_version_isValid;
}

QString OAIExternalStoreProvisionApplicationTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalStoreProvisionApplicationTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_async_isSet) {
        obj.insert(QString("Async"), ::OpenAPI::toJsonValue(m_async));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_application_package_download_uri_isSet) {
        obj.insert(QString("ApplicationPackageDownloadUri"), ::OpenAPI::toJsonValue(m_application_package_download_uri));
    }
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_application_type_version_isSet) {
        obj.insert(QString("ApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_application_type_version));
    }
    return obj;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::isAsync() const {
    return m_async;
}
void OAIExternalStoreProvisionApplicationTypeDescription::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_async_Set() const{
    return m_async_isSet;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_async_Valid() const{
    return m_async_isValid;
}

OAIProvisionApplicationTypeKind OAIExternalStoreProvisionApplicationTypeDescription::getKind() const {
    return m_kind;
}
void OAIExternalStoreProvisionApplicationTypeDescription::setKind(const OAIProvisionApplicationTypeKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIExternalStoreProvisionApplicationTypeDescription::getApplicationPackageDownloadUri() const {
    return m_application_package_download_uri;
}
void OAIExternalStoreProvisionApplicationTypeDescription::setApplicationPackageDownloadUri(const QString &application_package_download_uri) {
    m_application_package_download_uri = application_package_download_uri;
    m_application_package_download_uri_isSet = true;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_package_download_uri_Set() const{
    return m_application_package_download_uri_isSet;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_package_download_uri_Valid() const{
    return m_application_package_download_uri_isValid;
}

QString OAIExternalStoreProvisionApplicationTypeDescription::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIExternalStoreProvisionApplicationTypeDescription::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

QString OAIExternalStoreProvisionApplicationTypeDescription::getApplicationTypeVersion() const {
    return m_application_type_version;
}
void OAIExternalStoreProvisionApplicationTypeDescription::setApplicationTypeVersion(const QString &application_type_version) {
    m_application_type_version = application_type_version;
    m_application_type_version_isSet = true;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_type_version_Set() const{
    return m_application_type_version_isSet;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::is_application_type_version_Valid() const{
    return m_application_type_version_isValid;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_package_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalStoreProvisionApplicationTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_async_isValid && m_kind_isValid && true;
}

} // namespace OpenAPI
