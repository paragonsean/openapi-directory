/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionHealthStateChunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionHealthStateChunk::OAIPartitionHealthStateChunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionHealthStateChunk::OAIPartitionHealthStateChunk() {
    this->initializeModel();
}

OAIPartitionHealthStateChunk::~OAIPartitionHealthStateChunk() {}

void OAIPartitionHealthStateChunk::initializeModel() {

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_health_state_chunks_isSet = false;
    m_replica_health_state_chunks_isValid = false;
}

void OAIPartitionHealthStateChunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionHealthStateChunk::fromJsonObject(QJsonObject json) {

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_health_state_chunks_isValid = ::OpenAPI::fromJsonValue(m_replica_health_state_chunks, json[QString("ReplicaHealthStateChunks")]);
    m_replica_health_state_chunks_isSet = !json[QString("ReplicaHealthStateChunks")].isNull() && m_replica_health_state_chunks_isValid;
}

QString OAIPartitionHealthStateChunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionHealthStateChunk::asJsonObject() const {
    QJsonObject obj;
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_health_state_chunks.isSet()) {
        obj.insert(QString("ReplicaHealthStateChunks"), ::OpenAPI::toJsonValue(m_replica_health_state_chunks));
    }
    return obj;
}

OAIHealthState OAIPartitionHealthStateChunk::getHealthState() const {
    return m_health_state;
}
void OAIPartitionHealthStateChunk::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIPartitionHealthStateChunk::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIPartitionHealthStateChunk::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIPartitionHealthStateChunk::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionHealthStateChunk::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionHealthStateChunk::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionHealthStateChunk::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

OAIReplicaHealthStateChunkList OAIPartitionHealthStateChunk::getReplicaHealthStateChunks() const {
    return m_replica_health_state_chunks;
}
void OAIPartitionHealthStateChunk::setReplicaHealthStateChunks(const OAIReplicaHealthStateChunkList &replica_health_state_chunks) {
    m_replica_health_state_chunks = replica_health_state_chunks;
    m_replica_health_state_chunks_isSet = true;
}

bool OAIPartitionHealthStateChunk::is_replica_health_state_chunks_Set() const{
    return m_replica_health_state_chunks_isSet;
}

bool OAIPartitionHealthStateChunk::is_replica_health_state_chunks_Valid() const{
    return m_replica_health_state_chunks_isValid;
}

bool OAIPartitionHealthStateChunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_health_state_chunks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionHealthStateChunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
