/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICodePackageApi_H
#define OAI_OAICodePackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainerLogs.h"
#include "OAIDeployedCodePackageInfo.h"
#include "OAIFabricError.h"
#include "OAIRestartDeployedCodePackageDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICodePackageApi : public QObject {
    Q_OBJECT

public:
    OAICodePackageApi(const int timeOut = 0);
    ~OAICodePackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_manifest_name QString [required]
    * @param[in]  code_package_name QString [required]
    * @param[in]  tail QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getContainerLogsDeployedOnNode(const QString &api_version, const QString &node_name, const QString &application_id, const QString &service_manifest_name, const QString &code_package_name, const ::OpenAPI::OptionalParam<QString> &tail = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_manifest_name QString [optional]
    * @param[in]  code_package_name QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedCodePackageInfoList(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<QString> &service_manifest_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &code_package_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  restart_deployed_code_package_description OAIRestartDeployedCodePackageDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void restartDeployedCodePackage(const QString &api_version, const QString &node_name, const QString &application_id, const OAIRestartDeployedCodePackageDescription &restart_deployed_code_package_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getContainerLogsDeployedOnNodeCallback(OAIHttpRequestWorker *worker);
    void getDeployedCodePackageInfoListCallback(OAIHttpRequestWorker *worker);
    void restartDeployedCodePackageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getContainerLogsDeployedOnNodeSignal(OAIContainerLogs summary);
    void getDeployedCodePackageInfoListSignal(QList<OAIDeployedCodePackageInfo> summary);
    void restartDeployedCodePackageSignal();


    void getContainerLogsDeployedOnNodeSignalFull(OAIHttpRequestWorker *worker, OAIContainerLogs summary);
    void getDeployedCodePackageInfoListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedCodePackageInfo> summary);
    void restartDeployedCodePackageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getContainerLogsDeployedOnNodeSignalError() instead")
    void getContainerLogsDeployedOnNodeSignalE(OAIContainerLogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContainerLogsDeployedOnNodeSignalError(OAIContainerLogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedCodePackageInfoListSignalError() instead")
    void getDeployedCodePackageInfoListSignalE(QList<OAIDeployedCodePackageInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedCodePackageInfoListSignalError(QList<OAIDeployedCodePackageInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartDeployedCodePackageSignalError() instead")
    void restartDeployedCodePackageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restartDeployedCodePackageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getContainerLogsDeployedOnNodeSignalErrorFull() instead")
    void getContainerLogsDeployedOnNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContainerLogsDeployedOnNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedCodePackageInfoListSignalErrorFull() instead")
    void getDeployedCodePackageInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedCodePackageInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartDeployedCodePackageSignalErrorFull() instead")
    void restartDeployedCodePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restartDeployedCodePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
