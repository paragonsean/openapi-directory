/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceApi_H
#define OAI_OAIServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationHealthPolicy.h"
#include "OAIApplicationNameInfo.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAIPagedServiceInfoList.h"
#include "OAIResolvedServicePartition.h"
#include "OAIServiceDescription.h"
#include "OAIServiceFromTemplateDescription.h"
#include "OAIServiceHealth.h"
#include "OAIServiceInfo.h"
#include "OAIServiceUpdateDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceApi : public QObject {
    Q_OBJECT

public:
    OAIServiceApi(const int timeOut = 0);
    ~OAIServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_description OAIServiceDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createService(const QString &api_version, const QString &application_id, const OAIServiceDescription &service_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_from_template_description OAIServiceFromTemplateDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createServiceFromTemplate(const QString &api_version, const QString &application_id, const OAIServiceFromTemplateDescription &service_from_template_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  force_remove bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteService(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<bool> &force_remove = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationNameInfo(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceDescription(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  partitions_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceHealth(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &partitions_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  partitions_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getServiceHealthUsingPolicy(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &partitions_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceInfo(const QString &application_id, const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_type_name QString [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceInfoList(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &service_type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportServiceHealth(const QString &api_version, const QString &service_id, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  partition_key_type qint32 [optional]
    * @param[in]  partition_key_value QString [optional]
    * @param[in]  previous_rsp_version QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resolveService(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<qint32> &partition_key_type = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition_key_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous_rsp_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  service_update_description OAIServiceUpdateDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void updateService(const QString &api_version, const QString &service_id, const OAIServiceUpdateDescription &service_update_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createServiceCallback(OAIHttpRequestWorker *worker);
    void createServiceFromTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteServiceCallback(OAIHttpRequestWorker *worker);
    void getApplicationNameInfoCallback(OAIHttpRequestWorker *worker);
    void getServiceDescriptionCallback(OAIHttpRequestWorker *worker);
    void getServiceHealthCallback(OAIHttpRequestWorker *worker);
    void getServiceHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getServiceInfoCallback(OAIHttpRequestWorker *worker);
    void getServiceInfoListCallback(OAIHttpRequestWorker *worker);
    void reportServiceHealthCallback(OAIHttpRequestWorker *worker);
    void resolveServiceCallback(OAIHttpRequestWorker *worker);
    void updateServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createServiceSignal();
    void createServiceFromTemplateSignal();
    void deleteServiceSignal();
    void getApplicationNameInfoSignal(OAIApplicationNameInfo summary);
    void getServiceDescriptionSignal(OAIServiceDescription summary);
    void getServiceHealthSignal(OAIServiceHealth summary);
    void getServiceHealthUsingPolicySignal(OAIServiceHealth summary);
    void getServiceInfoSignal(OAIServiceInfo summary);
    void getServiceInfoListSignal(OAIPagedServiceInfoList summary);
    void reportServiceHealthSignal();
    void resolveServiceSignal(OAIResolvedServicePartition summary);
    void updateServiceSignal();


    void createServiceSignalFull(OAIHttpRequestWorker *worker);
    void createServiceFromTemplateSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceSignalFull(OAIHttpRequestWorker *worker);
    void getApplicationNameInfoSignalFull(OAIHttpRequestWorker *worker, OAIApplicationNameInfo summary);
    void getServiceDescriptionSignalFull(OAIHttpRequestWorker *worker, OAIServiceDescription summary);
    void getServiceHealthSignalFull(OAIHttpRequestWorker *worker, OAIServiceHealth summary);
    void getServiceHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIServiceHealth summary);
    void getServiceInfoSignalFull(OAIHttpRequestWorker *worker, OAIServiceInfo summary);
    void getServiceInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedServiceInfoList summary);
    void reportServiceHealthSignalFull(OAIHttpRequestWorker *worker);
    void resolveServiceSignalFull(OAIHttpRequestWorker *worker, OAIResolvedServicePartition summary);
    void updateServiceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createServiceSignalError() instead")
    void createServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceFromTemplateSignalError() instead")
    void createServiceFromTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceFromTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalError() instead")
    void deleteServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationNameInfoSignalError() instead")
    void getApplicationNameInfoSignalE(OAIApplicationNameInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationNameInfoSignalError(OAIApplicationNameInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceDescriptionSignalError() instead")
    void getServiceDescriptionSignalE(OAIServiceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceDescriptionSignalError(OAIServiceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceHealthSignalError() instead")
    void getServiceHealthSignalE(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceHealthSignalError(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceHealthUsingPolicySignalError() instead")
    void getServiceHealthUsingPolicySignalE(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceHealthUsingPolicySignalError(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceInfoSignalError() instead")
    void getServiceInfoSignalE(OAIServiceInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceInfoSignalError(OAIServiceInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceInfoListSignalError() instead")
    void getServiceInfoListSignalE(OAIPagedServiceInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceInfoListSignalError(OAIPagedServiceInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportServiceHealthSignalError() instead")
    void reportServiceHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportServiceHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveServiceSignalError() instead")
    void resolveServiceSignalE(OAIResolvedServicePartition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveServiceSignalError(OAIResolvedServicePartition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalError() instead")
    void updateServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createServiceSignalErrorFull() instead")
    void createServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createServiceFromTemplateSignalErrorFull() instead")
    void createServiceFromTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceFromTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalErrorFull() instead")
    void deleteServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationNameInfoSignalErrorFull() instead")
    void getApplicationNameInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationNameInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceDescriptionSignalErrorFull() instead")
    void getServiceDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceHealthSignalErrorFull() instead")
    void getServiceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceHealthUsingPolicySignalErrorFull() instead")
    void getServiceHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceInfoSignalErrorFull() instead")
    void getServiceInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceInfoListSignalErrorFull() instead")
    void getServiceInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportServiceHealthSignalErrorFull() instead")
    void reportServiceHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportServiceHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveServiceSignalErrorFull() instead")
    void resolveServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceSignalErrorFull() instead")
    void updateServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
