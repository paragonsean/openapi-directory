/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationHealthStateFilter.h
 *
 * Defines matching criteria to determine whether a application should be included in the cluster health chunk. One filter can match zero, one or multiple applications, depending on its properties. 
 */

#ifndef OAIApplicationHealthStateFilter_H
#define OAIApplicationHealthStateFilter_H

#include <QJsonObject>

#include "OAIDeployedApplicationHealthStateFilter.h"
#include "OAIServiceHealthStateFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeployedApplicationHealthStateFilter;
class OAIServiceHealthStateFilter;

class OAIApplicationHealthStateFilter : public OAIObject {
public:
    OAIApplicationHealthStateFilter();
    OAIApplicationHealthStateFilter(QString json);
    ~OAIApplicationHealthStateFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationNameFilter() const;
    void setApplicationNameFilter(const QString &application_name_filter);
    bool is_application_name_filter_Set() const;
    bool is_application_name_filter_Valid() const;

    QString getApplicationTypeNameFilter() const;
    void setApplicationTypeNameFilter(const QString &application_type_name_filter);
    bool is_application_type_name_filter_Set() const;
    bool is_application_type_name_filter_Valid() const;

    QList<OAIDeployedApplicationHealthStateFilter> getDeployedApplicationFilters() const;
    void setDeployedApplicationFilters(const QList<OAIDeployedApplicationHealthStateFilter> &deployed_application_filters);
    bool is_deployed_application_filters_Set() const;
    bool is_deployed_application_filters_Valid() const;

    qint32 getHealthStateFilter() const;
    void setHealthStateFilter(const qint32 &health_state_filter);
    bool is_health_state_filter_Set() const;
    bool is_health_state_filter_Valid() const;

    QList<OAIServiceHealthStateFilter> getServiceFilters() const;
    void setServiceFilters(const QList<OAIServiceHealthStateFilter> &service_filters);
    bool is_service_filters_Set() const;
    bool is_service_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name_filter;
    bool m_application_name_filter_isSet;
    bool m_application_name_filter_isValid;

    QString m_application_type_name_filter;
    bool m_application_type_name_filter_isSet;
    bool m_application_type_name_filter_isValid;

    QList<OAIDeployedApplicationHealthStateFilter> m_deployed_application_filters;
    bool m_deployed_application_filters_isSet;
    bool m_deployed_application_filters_isValid;

    qint32 m_health_state_filter;
    bool m_health_state_filter_isSet;
    bool m_health_state_filter_isValid;

    QList<OAIServiceHealthStateFilter> m_service_filters;
    bool m_service_filters_isSet;
    bool m_service_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationHealthStateFilter)

#endif // OAIApplicationHealthStateFilter_H
