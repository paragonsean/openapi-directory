/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageStoreCopyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageStoreCopyDescription::OAIImageStoreCopyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageStoreCopyDescription::OAIImageStoreCopyDescription() {
    this->initializeModel();
}

OAIImageStoreCopyDescription::~OAIImageStoreCopyDescription() {}

void OAIImageStoreCopyDescription::initializeModel() {

    m_check_mark_file_isSet = false;
    m_check_mark_file_isValid = false;

    m_remote_destination_isSet = false;
    m_remote_destination_isValid = false;

    m_remote_source_isSet = false;
    m_remote_source_isValid = false;

    m_skip_files_isSet = false;
    m_skip_files_isValid = false;
}

void OAIImageStoreCopyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageStoreCopyDescription::fromJsonObject(QJsonObject json) {

    m_check_mark_file_isValid = ::OpenAPI::fromJsonValue(m_check_mark_file, json[QString("CheckMarkFile")]);
    m_check_mark_file_isSet = !json[QString("CheckMarkFile")].isNull() && m_check_mark_file_isValid;

    m_remote_destination_isValid = ::OpenAPI::fromJsonValue(m_remote_destination, json[QString("RemoteDestination")]);
    m_remote_destination_isSet = !json[QString("RemoteDestination")].isNull() && m_remote_destination_isValid;

    m_remote_source_isValid = ::OpenAPI::fromJsonValue(m_remote_source, json[QString("RemoteSource")]);
    m_remote_source_isSet = !json[QString("RemoteSource")].isNull() && m_remote_source_isValid;

    m_skip_files_isValid = ::OpenAPI::fromJsonValue(m_skip_files, json[QString("SkipFiles")]);
    m_skip_files_isSet = !json[QString("SkipFiles")].isNull() && m_skip_files_isValid;
}

QString OAIImageStoreCopyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageStoreCopyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_check_mark_file_isSet) {
        obj.insert(QString("CheckMarkFile"), ::OpenAPI::toJsonValue(m_check_mark_file));
    }
    if (m_remote_destination_isSet) {
        obj.insert(QString("RemoteDestination"), ::OpenAPI::toJsonValue(m_remote_destination));
    }
    if (m_remote_source_isSet) {
        obj.insert(QString("RemoteSource"), ::OpenAPI::toJsonValue(m_remote_source));
    }
    if (m_skip_files.size() > 0) {
        obj.insert(QString("SkipFiles"), ::OpenAPI::toJsonValue(m_skip_files));
    }
    return obj;
}

bool OAIImageStoreCopyDescription::isCheckMarkFile() const {
    return m_check_mark_file;
}
void OAIImageStoreCopyDescription::setCheckMarkFile(const bool &check_mark_file) {
    m_check_mark_file = check_mark_file;
    m_check_mark_file_isSet = true;
}

bool OAIImageStoreCopyDescription::is_check_mark_file_Set() const{
    return m_check_mark_file_isSet;
}

bool OAIImageStoreCopyDescription::is_check_mark_file_Valid() const{
    return m_check_mark_file_isValid;
}

QString OAIImageStoreCopyDescription::getRemoteDestination() const {
    return m_remote_destination;
}
void OAIImageStoreCopyDescription::setRemoteDestination(const QString &remote_destination) {
    m_remote_destination = remote_destination;
    m_remote_destination_isSet = true;
}

bool OAIImageStoreCopyDescription::is_remote_destination_Set() const{
    return m_remote_destination_isSet;
}

bool OAIImageStoreCopyDescription::is_remote_destination_Valid() const{
    return m_remote_destination_isValid;
}

QString OAIImageStoreCopyDescription::getRemoteSource() const {
    return m_remote_source;
}
void OAIImageStoreCopyDescription::setRemoteSource(const QString &remote_source) {
    m_remote_source = remote_source;
    m_remote_source_isSet = true;
}

bool OAIImageStoreCopyDescription::is_remote_source_Set() const{
    return m_remote_source_isSet;
}

bool OAIImageStoreCopyDescription::is_remote_source_Valid() const{
    return m_remote_source_isValid;
}

QList<QString> OAIImageStoreCopyDescription::getSkipFiles() const {
    return m_skip_files;
}
void OAIImageStoreCopyDescription::setSkipFiles(const QList<QString> &skip_files) {
    m_skip_files = skip_files;
    m_skip_files_isSet = true;
}

bool OAIImageStoreCopyDescription::is_skip_files_Set() const{
    return m_skip_files_isSet;
}

bool OAIImageStoreCopyDescription::is_skip_files_Valid() const{
    return m_skip_files_isValid;
}

bool OAIImageStoreCopyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_mark_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageStoreCopyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_remote_destination_isValid && m_remote_source_isValid && true;
}

} // namespace OpenAPI
