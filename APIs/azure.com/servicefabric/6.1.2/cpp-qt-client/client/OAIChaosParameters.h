/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChaosParameters.h
 *
 * Defines all the parameters to configure a Chaos run. 
 */

#ifndef OAIChaosParameters_H
#define OAIChaosParameters_H

#include <QJsonObject>

#include "OAIChaosContext.h"
#include "OAIChaosTargetFilter.h"
#include "OAIClusterHealthPolicy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChaosTargetFilter;
class OAIClusterHealthPolicy;
class OAIChaosContext;

class OAIChaosParameters : public OAIObject {
public:
    OAIChaosParameters();
    OAIChaosParameters(QString json);
    ~OAIChaosParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChaosTargetFilter getChaosTargetFilter() const;
    void setChaosTargetFilter(const OAIChaosTargetFilter &chaos_target_filter);
    bool is_chaos_target_filter_Set() const;
    bool is_chaos_target_filter_Valid() const;

    OAIClusterHealthPolicy getClusterHealthPolicy() const;
    void setClusterHealthPolicy(const OAIClusterHealthPolicy &cluster_health_policy);
    bool is_cluster_health_policy_Set() const;
    bool is_cluster_health_policy_Valid() const;

    OAIChaosContext getContext() const;
    void setContext(const OAIChaosContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    bool isEnableMoveReplicaFaults() const;
    void setEnableMoveReplicaFaults(const bool &enable_move_replica_faults);
    bool is_enable_move_replica_faults_Set() const;
    bool is_enable_move_replica_faults_Valid() const;

    qint64 getMaxClusterStabilizationTimeoutInSeconds() const;
    void setMaxClusterStabilizationTimeoutInSeconds(const qint64 &max_cluster_stabilization_timeout_in_seconds);
    bool is_max_cluster_stabilization_timeout_in_seconds_Set() const;
    bool is_max_cluster_stabilization_timeout_in_seconds_Valid() const;

    qint64 getMaxConcurrentFaults() const;
    void setMaxConcurrentFaults(const qint64 &max_concurrent_faults);
    bool is_max_concurrent_faults_Set() const;
    bool is_max_concurrent_faults_Valid() const;

    QString getTimeToRunInSeconds() const;
    void setTimeToRunInSeconds(const QString &time_to_run_in_seconds);
    bool is_time_to_run_in_seconds_Set() const;
    bool is_time_to_run_in_seconds_Valid() const;

    qint64 getWaitTimeBetweenFaultsInSeconds() const;
    void setWaitTimeBetweenFaultsInSeconds(const qint64 &wait_time_between_faults_in_seconds);
    bool is_wait_time_between_faults_in_seconds_Set() const;
    bool is_wait_time_between_faults_in_seconds_Valid() const;

    qint64 getWaitTimeBetweenIterationsInSeconds() const;
    void setWaitTimeBetweenIterationsInSeconds(const qint64 &wait_time_between_iterations_in_seconds);
    bool is_wait_time_between_iterations_in_seconds_Set() const;
    bool is_wait_time_between_iterations_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChaosTargetFilter m_chaos_target_filter;
    bool m_chaos_target_filter_isSet;
    bool m_chaos_target_filter_isValid;

    OAIClusterHealthPolicy m_cluster_health_policy;
    bool m_cluster_health_policy_isSet;
    bool m_cluster_health_policy_isValid;

    OAIChaosContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    bool m_enable_move_replica_faults;
    bool m_enable_move_replica_faults_isSet;
    bool m_enable_move_replica_faults_isValid;

    qint64 m_max_cluster_stabilization_timeout_in_seconds;
    bool m_max_cluster_stabilization_timeout_in_seconds_isSet;
    bool m_max_cluster_stabilization_timeout_in_seconds_isValid;

    qint64 m_max_concurrent_faults;
    bool m_max_concurrent_faults_isSet;
    bool m_max_concurrent_faults_isValid;

    QString m_time_to_run_in_seconds;
    bool m_time_to_run_in_seconds_isSet;
    bool m_time_to_run_in_seconds_isValid;

    qint64 m_wait_time_between_faults_in_seconds;
    bool m_wait_time_between_faults_in_seconds_isSet;
    bool m_wait_time_between_faults_in_seconds_isValid;

    qint64 m_wait_time_between_iterations_in_seconds;
    bool m_wait_time_between_iterations_in_seconds_isSet;
    bool m_wait_time_between_iterations_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChaosParameters)

#endif // OAIChaosParameters_H
