/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCapacityDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCapacityDescription::OAIApplicationCapacityDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCapacityDescription::OAIApplicationCapacityDescription() {
    this->initializeModel();
}

OAIApplicationCapacityDescription::~OAIApplicationCapacityDescription() {}

void OAIApplicationCapacityDescription::initializeModel() {

    m_application_metrics_isSet = false;
    m_application_metrics_isValid = false;

    m_maximum_nodes_isSet = false;
    m_maximum_nodes_isValid = false;

    m_minimum_nodes_isSet = false;
    m_minimum_nodes_isValid = false;
}

void OAIApplicationCapacityDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCapacityDescription::fromJsonObject(QJsonObject json) {

    m_application_metrics_isValid = ::OpenAPI::fromJsonValue(m_application_metrics, json[QString("ApplicationMetrics")]);
    m_application_metrics_isSet = !json[QString("ApplicationMetrics")].isNull() && m_application_metrics_isValid;

    m_maximum_nodes_isValid = ::OpenAPI::fromJsonValue(m_maximum_nodes, json[QString("MaximumNodes")]);
    m_maximum_nodes_isSet = !json[QString("MaximumNodes")].isNull() && m_maximum_nodes_isValid;

    m_minimum_nodes_isValid = ::OpenAPI::fromJsonValue(m_minimum_nodes, json[QString("MinimumNodes")]);
    m_minimum_nodes_isSet = !json[QString("MinimumNodes")].isNull() && m_minimum_nodes_isValid;
}

QString OAIApplicationCapacityDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCapacityDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_metrics.size() > 0) {
        obj.insert(QString("ApplicationMetrics"), ::OpenAPI::toJsonValue(m_application_metrics));
    }
    if (m_maximum_nodes_isSet) {
        obj.insert(QString("MaximumNodes"), ::OpenAPI::toJsonValue(m_maximum_nodes));
    }
    if (m_minimum_nodes_isSet) {
        obj.insert(QString("MinimumNodes"), ::OpenAPI::toJsonValue(m_minimum_nodes));
    }
    return obj;
}

QList<OAIApplicationMetricDescription> OAIApplicationCapacityDescription::getApplicationMetrics() const {
    return m_application_metrics;
}
void OAIApplicationCapacityDescription::setApplicationMetrics(const QList<OAIApplicationMetricDescription> &application_metrics) {
    m_application_metrics = application_metrics;
    m_application_metrics_isSet = true;
}

bool OAIApplicationCapacityDescription::is_application_metrics_Set() const{
    return m_application_metrics_isSet;
}

bool OAIApplicationCapacityDescription::is_application_metrics_Valid() const{
    return m_application_metrics_isValid;
}

qint64 OAIApplicationCapacityDescription::getMaximumNodes() const {
    return m_maximum_nodes;
}
void OAIApplicationCapacityDescription::setMaximumNodes(const qint64 &maximum_nodes) {
    m_maximum_nodes = maximum_nodes;
    m_maximum_nodes_isSet = true;
}

bool OAIApplicationCapacityDescription::is_maximum_nodes_Set() const{
    return m_maximum_nodes_isSet;
}

bool OAIApplicationCapacityDescription::is_maximum_nodes_Valid() const{
    return m_maximum_nodes_isValid;
}

qint64 OAIApplicationCapacityDescription::getMinimumNodes() const {
    return m_minimum_nodes;
}
void OAIApplicationCapacityDescription::setMinimumNodes(const qint64 &minimum_nodes) {
    m_minimum_nodes = minimum_nodes;
    m_minimum_nodes_isSet = true;
}

bool OAIApplicationCapacityDescription::is_minimum_nodes_Set() const{
    return m_minimum_nodes_isSet;
}

bool OAIApplicationCapacityDescription::is_minimum_nodes_Valid() const{
    return m_minimum_nodes_isValid;
}

bool OAIApplicationCapacityDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCapacityDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
