/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnprovisionFabricDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnprovisionFabricDescription::OAIUnprovisionFabricDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnprovisionFabricDescription::OAIUnprovisionFabricDescription() {
    this->initializeModel();
}

OAIUnprovisionFabricDescription::~OAIUnprovisionFabricDescription() {}

void OAIUnprovisionFabricDescription::initializeModel() {

    m_code_version_isSet = false;
    m_code_version_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;
}

void OAIUnprovisionFabricDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnprovisionFabricDescription::fromJsonObject(QJsonObject json) {

    m_code_version_isValid = ::OpenAPI::fromJsonValue(m_code_version, json[QString("CodeVersion")]);
    m_code_version_isSet = !json[QString("CodeVersion")].isNull() && m_code_version_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("ConfigVersion")]);
    m_config_version_isSet = !json[QString("ConfigVersion")].isNull() && m_config_version_isValid;
}

QString OAIUnprovisionFabricDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnprovisionFabricDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_code_version_isSet) {
        obj.insert(QString("CodeVersion"), ::OpenAPI::toJsonValue(m_code_version));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("ConfigVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    return obj;
}

QString OAIUnprovisionFabricDescription::getCodeVersion() const {
    return m_code_version;
}
void OAIUnprovisionFabricDescription::setCodeVersion(const QString &code_version) {
    m_code_version = code_version;
    m_code_version_isSet = true;
}

bool OAIUnprovisionFabricDescription::is_code_version_Set() const{
    return m_code_version_isSet;
}

bool OAIUnprovisionFabricDescription::is_code_version_Valid() const{
    return m_code_version_isValid;
}

QString OAIUnprovisionFabricDescription::getConfigVersion() const {
    return m_config_version;
}
void OAIUnprovisionFabricDescription::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIUnprovisionFabricDescription::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIUnprovisionFabricDescription::is_config_version_Valid() const{
    return m_config_version_isValid;
}

bool OAIUnprovisionFabricDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnprovisionFabricDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
