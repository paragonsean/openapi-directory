/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatefulServicePartitionInfo.h
 *
 * Information about a partition of a stateful Service Fabric service..
 */

#ifndef OAIStatefulServicePartitionInfo_H
#define OAIStatefulServicePartitionInfo_H

#include <QJsonObject>

#include "OAIEpoch.h"
#include "OAIHealthState.h"
#include "OAIPartitionInformation.h"
#include "OAIServiceKind.h"
#include "OAIServicePartitionInfo.h"
#include "OAIServicePartitionStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEpoch;
class OAIPartitionInformation;

class OAIStatefulServicePartitionInfo : public OAIObject {
public:
    OAIStatefulServicePartitionInfo();
    OAIStatefulServicePartitionInfo(QString json);
    ~OAIStatefulServicePartitionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEpoch getCurrentConfigurationEpoch() const;
    void setCurrentConfigurationEpoch(const OAIEpoch &current_configuration_epoch);
    bool is_current_configuration_epoch_Set() const;
    bool is_current_configuration_epoch_Valid() const;

    QString getLastQuorumLossDuration() const;
    void setLastQuorumLossDuration(const QString &last_quorum_loss_duration);
    bool is_last_quorum_loss_duration_Set() const;
    bool is_last_quorum_loss_duration_Valid() const;

    qint64 getMinReplicaSetSize() const;
    void setMinReplicaSetSize(const qint64 &min_replica_set_size);
    bool is_min_replica_set_size_Set() const;
    bool is_min_replica_set_size_Valid() const;

    qint64 getTargetReplicaSetSize() const;
    void setTargetReplicaSetSize(const qint64 &target_replica_set_size);
    bool is_target_replica_set_size_Set() const;
    bool is_target_replica_set_size_Valid() const;

    OAIHealthState getHealthState() const;
    void setHealthState(const OAIHealthState &health_state);
    bool is_health_state_Set() const;
    bool is_health_state_Valid() const;

    OAIPartitionInformation getPartitionInformation() const;
    void setPartitionInformation(const OAIPartitionInformation &partition_information);
    bool is_partition_information_Set() const;
    bool is_partition_information_Valid() const;

    OAIServicePartitionStatus getPartitionStatus() const;
    void setPartitionStatus(const OAIServicePartitionStatus &partition_status);
    bool is_partition_status_Set() const;
    bool is_partition_status_Valid() const;

    OAIServiceKind getServiceKind() const;
    void setServiceKind(const OAIServiceKind &service_kind);
    bool is_service_kind_Set() const;
    bool is_service_kind_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEpoch m_current_configuration_epoch;
    bool m_current_configuration_epoch_isSet;
    bool m_current_configuration_epoch_isValid;

    QString m_last_quorum_loss_duration;
    bool m_last_quorum_loss_duration_isSet;
    bool m_last_quorum_loss_duration_isValid;

    qint64 m_min_replica_set_size;
    bool m_min_replica_set_size_isSet;
    bool m_min_replica_set_size_isValid;

    qint64 m_target_replica_set_size;
    bool m_target_replica_set_size_isSet;
    bool m_target_replica_set_size_isValid;

    OAIHealthState m_health_state;
    bool m_health_state_isSet;
    bool m_health_state_isValid;

    OAIPartitionInformation m_partition_information;
    bool m_partition_information_isSet;
    bool m_partition_information_isValid;

    OAIServicePartitionStatus m_partition_status;
    bool m_partition_status_isSet;
    bool m_partition_status_isValid;

    OAIServiceKind m_service_kind;
    bool m_service_kind_isSet;
    bool m_service_kind_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatefulServicePartitionInfo)

#endif // OAIStatefulServicePartitionInfo_H
