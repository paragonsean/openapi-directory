/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.ApplicationNameInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.PagedServiceInfoList;
import org.openapitools.client.model.ResolvedServicePartition;
import org.openapitools.client.model.ServiceDescription;
import org.openapitools.client.model.ServiceFromTemplateDescription;
import org.openapitools.client.model.ServiceHealth;
import org.openapitools.client.model.ServiceInfo;
import org.openapitools.client.model.ServiceUpdateDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceApi
 */
@Disabled
public class ServiceApiTest {

    private final ServiceApi api = new ServiceApi();

    /**
     * Creates the specified Service Fabric service.
     *
     * This api allows creating a new Service Fabric stateless or stateful service under a specified Service Fabric application. The description for creating the service includes partitioning information and optional properties for placement and load balancing. Some of the properties can later be modified using &#x60;UpdateService&#x60; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        ServiceDescription serviceDescription = null;
        Long timeout = null;
        api.createService(apiVersion, applicationId, serviceDescription, timeout);
        // TODO: test validations
    }

    /**
     * Creates a Service Fabric service from the service template.
     *
     * Creates a Service Fabric service from the service template defined in the application manifest. A service template contains the properties that will be same for the service instance of the same type. The API allows overriding the properties that are usually different for different services of the same service type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceFromTemplateTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        ServiceFromTemplateDescription serviceFromTemplateDescription = null;
        Long timeout = null;
        api.createServiceFromTemplate(apiVersion, applicationId, serviceFromTemplateDescription, timeout);
        // TODO: test validations
    }

    /**
     * Deletes an existing Service Fabric service.
     *
     * Deletes an existing Service Fabric service. A service must be created before it can be deleted. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if the service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Boolean forceRemove = null;
        Long timeout = null;
        api.deleteService(apiVersion, serviceId, forceRemove, timeout);
        // TODO: test validations
    }

    /**
     * Gets the name of the Service Fabric application for a service.
     *
     * Gets the name of the application for the specified service. A 404 FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationNameInfoTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Long timeout = null;
        ApplicationNameInfo response = api.getApplicationNameInfo(apiVersion, serviceId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the description of an existing Service Fabric service.
     *
     * Gets the description of an existing Service Fabric service. A service must be created before its description can be obtained.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceDescriptionTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Long timeout = null;
        ServiceDescription response = api.getServiceDescription(apiVersion, serviceId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of the specified Service Fabric service.
     *
     * Gets the health information of the specified service. Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceHealthTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Integer eventsHealthStateFilter = null;
        Integer partitionsHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ServiceHealth response = api.getServiceHealth(apiVersion, serviceId, eventsHealthStateFilter, partitionsHealthStateFilter, excludeHealthStatistics, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of the specified Service Fabric service, by using the specified health policy.
     *
     * Gets the health information of the specified service. If the application health policy is specified, the health evaluation uses it to get the aggregated health state. If the policy is not specified, the health evaluation uses the application health policy defined in the application manifest, or the default health policy, if no policy is defined in the manifest. Use EventsHealthStateFilter to filter the collection of health events reported on the service based on the health state. Use PartitionsHealthStateFilter to filter the collection of partitions returned. If you specify a service that does not exist in the health store, this request returns an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Integer eventsHealthStateFilter = null;
        Integer partitionsHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        ServiceHealth response = api.getServiceHealthUsingPolicy(apiVersion, serviceId, eventsHealthStateFilter, partitionsHealthStateFilter, excludeHealthStatistics, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the information about the specific service belonging to the Service Fabric application.
     *
     * Returns the information about the specified service belonging to the specified Service Fabric application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceInfoTest() throws ApiException {
        String applicationId = null;
        String serviceId = null;
        String apiVersion = null;
        Long timeout = null;
        ServiceInfo response = api.getServiceInfo(applicationId, serviceId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about all services belonging to the application specified by the application id.
     *
     * Returns the information about all services belonging to the application specified by the application id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceInfoListTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        String serviceTypeName = null;
        String continuationToken = null;
        Long timeout = null;
        PagedServiceInfoList response = api.getServiceInfoList(applicationId, apiVersion, serviceTypeName, continuationToken, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric service.
     *
     * Reports health state of the specified Service Fabric service. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetServiceHealth and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportServiceHealthTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportServiceHealth(apiVersion, serviceId, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Resolve a Service Fabric partition.
     *
     * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveServiceTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        Integer partitionKeyType = null;
        String partitionKeyValue = null;
        String previousRspVersion = null;
        Long timeout = null;
        ResolvedServicePartition response = api.resolveService(apiVersion, serviceId, partitionKeyType, partitionKeyValue, previousRspVersion, timeout);
        // TODO: test validations
    }

    /**
     * Updates a Service Fabric service using the specified update description.
     *
     * This API allows updating properties of a running Service Fabric service. The set of properties that can be updated are a subset of the properties that were specified at the time of creating the service. The current set of properties can be obtained using &#x60;GetServiceDescription&#x60; API. Please note that updating the properties of a running service is different than upgrading your application using &#x60;StartApplicationUpgrade&#x60; API. The upgrade is a long running background operation that involves moving the application from one version to another, one upgrade domain at a time, whereas update applies the new properties immediately to the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        ServiceUpdateDescription serviceUpdateDescription = null;
        Long timeout = null;
        api.updateService(apiVersion, serviceId, serviceUpdateDescription, timeout);
        // TODO: test validations
    }

}
