/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContainerApiRequestBody;
import org.openapitools.client.model.ContainerApiResponse;
import org.openapitools.client.model.ContainerLogs;
import org.openapitools.client.model.DeployedCodePackageInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.RestartDeployedCodePackageDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CodePackageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CodePackageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodePackageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getContainerLogsDeployedOnNode
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param tail Number of lines to show from the end of the logs. Default is 100. &#39;all&#39; to show the complete logs. (optional)
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance. (optional, default to false)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the container logs for container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContainerLogsDeployedOnNodeCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String tail, Boolean previous, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (serviceManifestName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceManifestName", serviceManifestName));
        }

        if (codePackageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CodePackageName", codePackageName));
        }

        if (tail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tail", tail));
        }

        if (previous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Previous", previous));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContainerLogsDeployedOnNodeValidateBeforeCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String tail, Boolean previous, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getContainerLogsDeployedOnNode(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling getContainerLogsDeployedOnNode(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getContainerLogsDeployedOnNode(Async)");
        }

        // verify the required parameter 'serviceManifestName' is set
        if (serviceManifestName == null) {
            throw new ApiException("Missing the required parameter 'serviceManifestName' when calling getContainerLogsDeployedOnNode(Async)");
        }

        // verify the required parameter 'codePackageName' is set
        if (codePackageName == null) {
            throw new ApiException("Missing the required parameter 'codePackageName' when calling getContainerLogsDeployedOnNode(Async)");
        }

        return getContainerLogsDeployedOnNodeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, tail, previous, timeout, _callback);

    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node.
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param tail Number of lines to show from the end of the logs. Default is 100. &#39;all&#39; to show the complete logs. (optional)
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance. (optional, default to false)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ContainerLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the container logs for container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerLogs getContainerLogsDeployedOnNode(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String tail, Boolean previous, Long timeout) throws ApiException {
        ApiResponse<ContainerLogs> localVarResp = getContainerLogsDeployedOnNodeWithHttpInfo(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, tail, previous, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node.
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param tail Number of lines to show from the end of the logs. Default is 100. &#39;all&#39; to show the complete logs. (optional)
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance. (optional, default to false)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;ContainerLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the container logs for container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerLogs> getContainerLogsDeployedOnNodeWithHttpInfo(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String tail, Boolean previous, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getContainerLogsDeployedOnNodeValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, tail, previous, timeout, null);
        Type localVarReturnType = new TypeToken<ContainerLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the container logs for container deployed on a Service Fabric node. (asynchronously)
     * Gets the container logs for container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param tail Number of lines to show from the end of the logs. Default is 100. &#39;all&#39; to show the complete logs. (optional)
     * @param previous Specifies whether to get container logs from exited/dead containers of the code package instance. (optional, default to false)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the container logs for container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContainerLogsDeployedOnNodeAsync(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String tail, Boolean previous, Long timeout, final ApiCallback<ContainerLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContainerLogsDeployedOnNodeValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, tail, previous, timeout, _callback);
        Type localVarReturnType = new TypeToken<ContainerLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeployedCodePackageInfoList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the list of deployed code packages information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeployedCodePackageInfoListCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (serviceManifestName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceManifestName", serviceManifestName));
        }

        if (codePackageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CodePackageName", codePackageName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeployedCodePackageInfoListValidateBeforeCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDeployedCodePackageInfoList(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling getDeployedCodePackageInfoList(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getDeployedCodePackageInfoList(Async)");
        }

        return getDeployedCodePackageInfoListCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, timeout, _callback);

    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node.
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return List&lt;DeployedCodePackageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the list of deployed code packages information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedCodePackageInfo> getDeployedCodePackageInfoList(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout) throws ApiException {
        ApiResponse<List<DeployedCodePackageInfo>> localVarResp = getDeployedCodePackageInfoListWithHttpInfo(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node.
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;List&lt;DeployedCodePackageInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the list of deployed code packages information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedCodePackageInfo>> getDeployedCodePackageInfoListWithHttpInfo(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getDeployedCodePackageInfoListValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedCodePackageInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of code packages deployed on a Service Fabric node. (asynchronously)
     * Gets the list of code packages deployed on a Service Fabric node for the given application.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (optional)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and the list of deployed code packages information. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeployedCodePackageInfoListAsync(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, Long timeout, final ApiCallback<List<DeployedCodePackageInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeployedCodePackageInfoListValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedCodePackageInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invokeContainerApi
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric node. (required)
     * @param containerApiRequestBody Parameters for making container API call (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and container API response for a container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContainerApiCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String codePackageInstanceId, ContainerApiRequestBody containerApiRequestBody, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerApiRequestBody;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (serviceManifestName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceManifestName", serviceManifestName));
        }

        if (codePackageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CodePackageName", codePackageName));
        }

        if (codePackageInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CodePackageInstanceId", codePackageInstanceId));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeContainerApiValidateBeforeCall(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String codePackageInstanceId, ContainerApiRequestBody containerApiRequestBody, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'serviceManifestName' is set
        if (serviceManifestName == null) {
            throw new ApiException("Missing the required parameter 'serviceManifestName' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'codePackageName' is set
        if (codePackageName == null) {
            throw new ApiException("Missing the required parameter 'codePackageName' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'codePackageInstanceId' is set
        if (codePackageInstanceId == null) {
            throw new ApiException("Missing the required parameter 'codePackageInstanceId' when calling invokeContainerApi(Async)");
        }

        // verify the required parameter 'containerApiRequestBody' is set
        if (containerApiRequestBody == null) {
            throw new ApiException("Missing the required parameter 'containerApiRequestBody' when calling invokeContainerApi(Async)");
        }

        return invokeContainerApiCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, codePackageInstanceId, containerApiRequestBody, timeout, _callback);

    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node.
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric node. (required)
     * @param containerApiRequestBody Parameters for making container API call (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ContainerApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and container API response for a container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerApiResponse invokeContainerApi(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String codePackageInstanceId, ContainerApiRequestBody containerApiRequestBody, Long timeout) throws ApiException {
        ApiResponse<ContainerApiResponse> localVarResp = invokeContainerApiWithHttpInfo(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, codePackageInstanceId, containerApiRequestBody, timeout);
        return localVarResp.getData();
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node.
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric node. (required)
     * @param containerApiRequestBody Parameters for making container API call (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;ContainerApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and container API response for a container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerApiResponse> invokeContainerApiWithHttpInfo(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String codePackageInstanceId, ContainerApiRequestBody containerApiRequestBody, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = invokeContainerApiValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, codePackageInstanceId, containerApiRequestBody, timeout, null);
        Type localVarReturnType = new TypeToken<ContainerApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoke container API on a container deployed on a Service Fabric node. (asynchronously)
     * Invoke container API on a container deployed on a Service Fabric node for the given code package.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This version is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accepts any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0 and the runtime is 6.1, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param serviceManifestName The name of a service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageName The name of code package specified in service manifest registered as part of an application type in a Service Fabric cluster. (required)
     * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a service fabric node. (required)
     * @param containerApiRequestBody Parameters for making container API call (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code and container API response for a container deployed on a Service Fabric node for the given code package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContainerApiAsync(String apiVersion, String nodeName, String applicationId, String serviceManifestName, String codePackageName, String codePackageInstanceId, ContainerApiRequestBody containerApiRequestBody, Long timeout, final ApiCallback<ContainerApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeContainerApiValidateBeforeCall(apiVersion, nodeName, applicationId, serviceManifestName, codePackageName, codePackageInstanceId, containerApiRequestBody, timeout, _callback);
        Type localVarReturnType = new TypeToken<ContainerApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restartDeployedCodePackage
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to restart. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartDeployedCodePackageCall(String apiVersion, String nodeName, String applicationId, RestartDeployedCodePackageDescription restartDeployedCodePackageDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restartDeployedCodePackageDescription;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartDeployedCodePackageValidateBeforeCall(String apiVersion, String nodeName, String applicationId, RestartDeployedCodePackageDescription restartDeployedCodePackageDescription, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling restartDeployedCodePackage(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling restartDeployedCodePackage(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling restartDeployedCodePackage(Async)");
        }

        // verify the required parameter 'restartDeployedCodePackageDescription' is set
        if (restartDeployedCodePackageDescription == null) {
            throw new ApiException("Missing the required parameter 'restartDeployedCodePackageDescription' when calling restartDeployedCodePackage(Async)");
        }

        return restartDeployedCodePackageCall(apiVersion, nodeName, applicationId, restartDeployedCodePackageDescription, timeout, _callback);

    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster.
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to restart. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void restartDeployedCodePackage(String apiVersion, String nodeName, String applicationId, RestartDeployedCodePackageDescription restartDeployedCodePackageDescription, Long timeout) throws ApiException {
        restartDeployedCodePackageWithHttpInfo(apiVersion, nodeName, applicationId, restartDeployedCodePackageDescription, timeout);
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster.
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to restart. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> restartDeployedCodePackageWithHttpInfo(String apiVersion, String nodeName, String applicationId, RestartDeployedCodePackageDescription restartDeployedCodePackageDescription, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = restartDeployedCodePackageValidateBeforeCall(apiVersion, nodeName, applicationId, restartDeployedCodePackageDescription, timeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restarts a code package deployed on a Service Fabric node in a cluster. (asynchronously)
     * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code package process, which will restart all the user service replicas hosted in that process.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.0&#39;.  Service Fabric REST API version is based on the runtime version in which the API was introduced or was changed. Service Fabric runtime supports more than one version of the API. This is the latest supported version of the API. If a lower API version is passed, the returned response may be different from the one documented in this specification.  Additionally the runtime accept any version that is higher than the latest supported version up to the current version of the runtime. So if the latest API version is 6.0, but if the runtime is 6.1, in order to make it easier to write the clients, the runtime will accept version 6.1 for that API. However the behavior of the API will be as per the documented 6.0 version. (required)
     * @param nodeName The name of the node. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param restartDeployedCodePackageDescription Describes the deployed code package on Service Fabric node to restart. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful operation will return 200 status code. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restartDeployedCodePackageAsync(String apiVersion, String nodeName, String applicationId, RestartDeployedCodePackageDescription restartDeployedCodePackageDescription, Long timeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartDeployedCodePackageValidateBeforeCall(apiVersion, nodeName, applicationId, restartDeployedCodePackageDescription, timeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
