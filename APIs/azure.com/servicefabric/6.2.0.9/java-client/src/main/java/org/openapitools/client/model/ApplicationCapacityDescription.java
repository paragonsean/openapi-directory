/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationMetricDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes capacity information for services of this application. This description can be used for describing the following. - Reserving the capacity for the services on the nodes - Limiting the total number of nodes that services of this application can run on - Limiting the custom capacity metrics to limit the total consumption of this metric by the services of this application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationCapacityDescription {
  public static final String SERIALIZED_NAME_APPLICATION_METRICS = "ApplicationMetrics";
  @SerializedName(SERIALIZED_NAME_APPLICATION_METRICS)
  private List<ApplicationMetricDescription> applicationMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_NODES = "MaximumNodes";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NODES)
  private Long maximumNodes = 0l;

  public static final String SERIALIZED_NAME_MINIMUM_NODES = "MinimumNodes";
  @SerializedName(SERIALIZED_NAME_MINIMUM_NODES)
  private Long minimumNodes;

  public ApplicationCapacityDescription() {
  }

  public ApplicationCapacityDescription applicationMetrics(List<ApplicationMetricDescription> applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
    return this;
  }

  public ApplicationCapacityDescription addApplicationMetricsItem(ApplicationMetricDescription applicationMetricsItem) {
    if (this.applicationMetrics == null) {
      this.applicationMetrics = new ArrayList<>();
    }
    this.applicationMetrics.add(applicationMetricsItem);
    return this;
  }

  /**
   * List of application capacity metric description.
   * @return applicationMetrics
   */
  @javax.annotation.Nullable
  public List<ApplicationMetricDescription> getApplicationMetrics() {
    return applicationMetrics;
  }

  public void setApplicationMetrics(List<ApplicationMetricDescription> applicationMetrics) {
    this.applicationMetrics = applicationMetrics;
  }


  public ApplicationCapacityDescription maximumNodes(Long maximumNodes) {
    this.maximumNodes = maximumNodes;
    return this;
  }

  /**
   * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
   * minimum: 0
   * @return maximumNodes
   */
  @javax.annotation.Nullable
  public Long getMaximumNodes() {
    return maximumNodes;
  }

  public void setMaximumNodes(Long maximumNodes) {
    this.maximumNodes = maximumNodes;
  }


  public ApplicationCapacityDescription minimumNodes(Long minimumNodes) {
    this.minimumNodes = minimumNodes;
    return this;
  }

  /**
   * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
   * minimum: 0
   * @return minimumNodes
   */
  @javax.annotation.Nullable
  public Long getMinimumNodes() {
    return minimumNodes;
  }

  public void setMinimumNodes(Long minimumNodes) {
    this.minimumNodes = minimumNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationCapacityDescription applicationCapacityDescription = (ApplicationCapacityDescription) o;
    return Objects.equals(this.applicationMetrics, applicationCapacityDescription.applicationMetrics) &&
        Objects.equals(this.maximumNodes, applicationCapacityDescription.maximumNodes) &&
        Objects.equals(this.minimumNodes, applicationCapacityDescription.minimumNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationMetrics, maximumNodes, minimumNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationCapacityDescription {\n");
    sb.append("    applicationMetrics: ").append(toIndentedString(applicationMetrics)).append("\n");
    sb.append("    maximumNodes: ").append(toIndentedString(maximumNodes)).append("\n");
    sb.append("    minimumNodes: ").append(toIndentedString(minimumNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationMetrics");
    openapiFields.add("MaximumNodes");
    openapiFields.add("MinimumNodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationCapacityDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationCapacityDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationCapacityDescription is not found in the empty JSON string", ApplicationCapacityDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationCapacityDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationCapacityDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ApplicationMetrics") != null && !jsonObj.get("ApplicationMetrics").isJsonNull()) {
        JsonArray jsonArrayapplicationMetrics = jsonObj.getAsJsonArray("ApplicationMetrics");
        if (jsonArrayapplicationMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ApplicationMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ApplicationMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("ApplicationMetrics").toString()));
          }

          // validate the optional field `ApplicationMetrics` (array)
          for (int i = 0; i < jsonArrayapplicationMetrics.size(); i++) {
            ApplicationMetricDescription.validateJsonElement(jsonArrayapplicationMetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationCapacityDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationCapacityDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationCapacityDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationCapacityDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationCapacityDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationCapacityDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationCapacityDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationCapacityDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationCapacityDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationCapacityDescription
   */
  public static ApplicationCapacityDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationCapacityDescription.class);
  }

  /**
   * Convert an instance of ApplicationCapacityDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

