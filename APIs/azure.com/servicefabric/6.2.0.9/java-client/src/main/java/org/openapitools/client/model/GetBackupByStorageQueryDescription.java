/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BackupEntity;
import org.openapitools.client.model.BackupStorageDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes additional filters to be applied, while listing backups, and backup storage details from where to fetch the backups.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBackupByStorageQueryDescription {
  public static final String SERIALIZED_NAME_BACKUP_ENTITY = "BackupEntity";
  @SerializedName(SERIALIZED_NAME_BACKUP_ENTITY)
  private BackupEntity backupEntity;

  public static final String SERIALIZED_NAME_END_DATE_TIME_FILTER = "EndDateTimeFilter";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME_FILTER)
  private OffsetDateTime endDateTimeFilter;

  public static final String SERIALIZED_NAME_LATEST = "Latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private Boolean latest = false;

  public static final String SERIALIZED_NAME_START_DATE_TIME_FILTER = "StartDateTimeFilter";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME_FILTER)
  private OffsetDateTime startDateTimeFilter;

  public static final String SERIALIZED_NAME_STORAGE = "Storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private BackupStorageDescription storage;

  public GetBackupByStorageQueryDescription() {
  }

  public GetBackupByStorageQueryDescription backupEntity(BackupEntity backupEntity) {
    this.backupEntity = backupEntity;
    return this;
  }

  /**
   * Get backupEntity
   * @return backupEntity
   */
  @javax.annotation.Nonnull
  public BackupEntity getBackupEntity() {
    return backupEntity;
  }

  public void setBackupEntity(BackupEntity backupEntity) {
    this.backupEntity = backupEntity;
  }


  public GetBackupByStorageQueryDescription endDateTimeFilter(OffsetDateTime endDateTimeFilter) {
    this.endDateTimeFilter = endDateTimeFilter;
    return this;
  }

  /**
   * Specifies the end date time in ISO8601 till which to enumerate backups. If not specified, backups are enumerated till the end.
   * @return endDateTimeFilter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateTimeFilter() {
    return endDateTimeFilter;
  }

  public void setEndDateTimeFilter(OffsetDateTime endDateTimeFilter) {
    this.endDateTimeFilter = endDateTimeFilter;
  }


  public GetBackupByStorageQueryDescription latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

  /**
   * If specified as true, gets the most recent backup (within the specified time range) for every partition under the specified backup entity.
   * @return latest
   */
  @javax.annotation.Nullable
  public Boolean getLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  public GetBackupByStorageQueryDescription startDateTimeFilter(OffsetDateTime startDateTimeFilter) {
    this.startDateTimeFilter = startDateTimeFilter;
    return this;
  }

  /**
   * Specifies the start date time in ISO8601 from which to enumerate backups. If not specified, backups are enumerated from the beginning.
   * @return startDateTimeFilter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTimeFilter() {
    return startDateTimeFilter;
  }

  public void setStartDateTimeFilter(OffsetDateTime startDateTimeFilter) {
    this.startDateTimeFilter = startDateTimeFilter;
  }


  public GetBackupByStorageQueryDescription storage(BackupStorageDescription storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Get storage
   * @return storage
   */
  @javax.annotation.Nonnull
  public BackupStorageDescription getStorage() {
    return storage;
  }

  public void setStorage(BackupStorageDescription storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBackupByStorageQueryDescription getBackupByStorageQueryDescription = (GetBackupByStorageQueryDescription) o;
    return Objects.equals(this.backupEntity, getBackupByStorageQueryDescription.backupEntity) &&
        Objects.equals(this.endDateTimeFilter, getBackupByStorageQueryDescription.endDateTimeFilter) &&
        Objects.equals(this.latest, getBackupByStorageQueryDescription.latest) &&
        Objects.equals(this.startDateTimeFilter, getBackupByStorageQueryDescription.startDateTimeFilter) &&
        Objects.equals(this.storage, getBackupByStorageQueryDescription.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupEntity, endDateTimeFilter, latest, startDateTimeFilter, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBackupByStorageQueryDescription {\n");
    sb.append("    backupEntity: ").append(toIndentedString(backupEntity)).append("\n");
    sb.append("    endDateTimeFilter: ").append(toIndentedString(endDateTimeFilter)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    startDateTimeFilter: ").append(toIndentedString(startDateTimeFilter)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackupEntity");
    openapiFields.add("EndDateTimeFilter");
    openapiFields.add("Latest");
    openapiFields.add("StartDateTimeFilter");
    openapiFields.add("Storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BackupEntity");
    openapiRequiredFields.add("Storage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBackupByStorageQueryDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBackupByStorageQueryDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBackupByStorageQueryDescription is not found in the empty JSON string", GetBackupByStorageQueryDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBackupByStorageQueryDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBackupByStorageQueryDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetBackupByStorageQueryDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BackupEntity`
      BackupEntity.validateJsonElement(jsonObj.get("BackupEntity"));
      // validate the required field `Storage`
      BackupStorageDescription.validateJsonElement(jsonObj.get("Storage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBackupByStorageQueryDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBackupByStorageQueryDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBackupByStorageQueryDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBackupByStorageQueryDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBackupByStorageQueryDescription>() {
           @Override
           public void write(JsonWriter out, GetBackupByStorageQueryDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBackupByStorageQueryDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBackupByStorageQueryDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBackupByStorageQueryDescription
   * @throws IOException if the JSON string is invalid with respect to GetBackupByStorageQueryDescription
   */
  public static GetBackupByStorageQueryDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBackupByStorageQueryDescription.class);
  }

  /**
   * Convert an instance of GetBackupByStorageQueryDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

