/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEvent;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the base for all Application Events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationEvent extends FabricEvent {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public ApplicationEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ApplicationEvent applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \&quot;\\~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp\\~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions.
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationEvent applicationEvent = (ApplicationEvent) o;
    return Objects.equals(this.applicationId, applicationEvent.applicationId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("ApplicationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationEvent is not found in the empty JSON string", ApplicationEvent.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "ApplicationCreatedEvent":
          ApplicationCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationDeletedEvent":
          ApplicationDeletedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationHealthReportCreatedEvent":
          ApplicationHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationHealthReportExpiredEvent":
          ApplicationHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeCompleteEvent":
          ApplicationUpgradeCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeDomainCompleteEvent":
          ApplicationUpgradeDomainCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeRollbackCompleteEvent":
          ApplicationUpgradeRollbackCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeRollbackStartEvent":
          ApplicationUpgradeRollbackStartEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeStartEvent":
          ApplicationUpgradeStartEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartCodePackageFaultCompletedEvent":
          ChaosRestartCodePackageFaultCompletedEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartCodePackageFaultScheduledEvent":
          ChaosRestartCodePackageFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ContainerDeactivatedEvent":
          ContainerDeactivatedEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationHealthReportCreatedEvent":
          DeployedApplicationHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationHealthReportExpiredEvent":
          DeployedApplicationHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedServiceHealthReportCreatedEvent":
          DeployedServiceHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedServiceHealthReportExpiredEvent":
          DeployedServiceHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "ProcessDeactivatedEvent":
          ProcessDeactivatedEvent.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ApplicationEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationEvent
   * @throws IOException if the JSON string is invalid with respect to ApplicationEvent
   */
  public static ApplicationEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationEvent.class);
  }

  /**
   * Convert an instance of ApplicationEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

