/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthEvaluation;
import org.openapitools.client.model.HealthEvaluationKind;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents health evaluation for applications, containing health evaluations for each unhealthy application that impacted current aggregated health state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationsHealthEvaluation extends HealthEvaluation {
  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_APPLICATIONS = "MaxPercentUnhealthyApplications";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_APPLICATIONS)
  private Integer maxPercentUnhealthyApplications;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "TotalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> unhealthyEvaluations = new ArrayList<>();

  public ApplicationsHealthEvaluation() {
    this.kind = this.getClass().getSimpleName();
  }

  public ApplicationsHealthEvaluation maxPercentUnhealthyApplications(Integer maxPercentUnhealthyApplications) {
    this.maxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
    return this;
  }

  /**
   * Maximum allowed percentage of unhealthy applications from the ClusterHealthPolicy.
   * @return maxPercentUnhealthyApplications
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyApplications() {
    return maxPercentUnhealthyApplications;
  }

  public void setMaxPercentUnhealthyApplications(Integer maxPercentUnhealthyApplications) {
    this.maxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
  }


  public ApplicationsHealthEvaluation totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Total number of applications from the health store.
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public ApplicationsHealthEvaluation unhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public ApplicationsHealthEvaluation addUnhealthyEvaluationsItem(HealthEvaluationWrapper unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationsHealthEvaluation applicationsHealthEvaluation = (ApplicationsHealthEvaluation) o;
    return Objects.equals(this.maxPercentUnhealthyApplications, applicationsHealthEvaluation.maxPercentUnhealthyApplications) &&
        Objects.equals(this.totalCount, applicationsHealthEvaluation.totalCount) &&
        Objects.equals(this.unhealthyEvaluations, applicationsHealthEvaluation.unhealthyEvaluations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPercentUnhealthyApplications, totalCount, unhealthyEvaluations, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationsHealthEvaluation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    maxPercentUnhealthyApplications: ").append(toIndentedString(maxPercentUnhealthyApplications)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("Description");
    openapiFields.add("Kind");
    openapiFields.add("MaxPercentUnhealthyApplications");
    openapiFields.add("TotalCount");
    openapiFields.add("UnhealthyEvaluations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationsHealthEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationsHealthEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationsHealthEvaluation is not found in the empty JSON string", ApplicationsHealthEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationsHealthEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationsHealthEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationsHealthEvaluation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationsHealthEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationsHealthEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationsHealthEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationsHealthEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationsHealthEvaluation>() {
           @Override
           public void write(JsonWriter out, ApplicationsHealthEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationsHealthEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationsHealthEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationsHealthEvaluation
   * @throws IOException if the JSON string is invalid with respect to ApplicationsHealthEvaluation
   */
  public static ApplicationsHealthEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationsHealthEvaluation.class);
  }

  /**
   * Convert an instance of ApplicationsHealthEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

