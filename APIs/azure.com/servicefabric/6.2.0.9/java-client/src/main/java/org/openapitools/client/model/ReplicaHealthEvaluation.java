/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.HealthEvaluation;
import org.openapitools.client.model.HealthEvaluationKind;
import org.openapitools.client.model.HealthEvaluationWrapper;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents health evaluation for a replica, containing information about the data and the algorithm used by health store to evaluate health. The evaluation is returned only when the aggregated health state is either Error or Warning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaHealthEvaluation extends HealthEvaluation {
  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_REPLICA_OR_INSTANCE_ID = "ReplicaOrInstanceId";
  @SerializedName(SERIALIZED_NAME_REPLICA_OR_INSTANCE_ID)
  private String replicaOrInstanceId;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<HealthEvaluationWrapper> unhealthyEvaluations = new ArrayList<>();

  public ReplicaHealthEvaluation() {
    this.kind = this.getClass().getSimpleName();
  }

  public ReplicaHealthEvaluation partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public ReplicaHealthEvaluation replicaOrInstanceId(String replicaOrInstanceId) {
    this.replicaOrInstanceId = replicaOrInstanceId;
    return this;
  }

  /**
   * Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.
   * @return replicaOrInstanceId
   */
  @javax.annotation.Nullable
  public String getReplicaOrInstanceId() {
    return replicaOrInstanceId;
  }

  public void setReplicaOrInstanceId(String replicaOrInstanceId) {
    this.replicaOrInstanceId = replicaOrInstanceId;
  }


  public ReplicaHealthEvaluation unhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public ReplicaHealthEvaluation addUnhealthyEvaluationsItem(HealthEvaluationWrapper unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * List of health evaluations that resulted in the current aggregated health state.
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<HealthEvaluationWrapper> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<HealthEvaluationWrapper> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaHealthEvaluation replicaHealthEvaluation = (ReplicaHealthEvaluation) o;
    return Objects.equals(this.partitionId, replicaHealthEvaluation.partitionId) &&
        Objects.equals(this.replicaOrInstanceId, replicaHealthEvaluation.replicaOrInstanceId) &&
        Objects.equals(this.unhealthyEvaluations, replicaHealthEvaluation.unhealthyEvaluations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionId, replicaOrInstanceId, unhealthyEvaluations, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaHealthEvaluation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaOrInstanceId: ").append(toIndentedString(replicaOrInstanceId)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("Description");
    openapiFields.add("Kind");
    openapiFields.add("PartitionId");
    openapiFields.add("ReplicaOrInstanceId");
    openapiFields.add("UnhealthyEvaluations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaHealthEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaHealthEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaHealthEvaluation is not found in the empty JSON string", ReplicaHealthEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaHealthEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaHealthEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicaHealthEvaluation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaHealthEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaHealthEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaHealthEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaHealthEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaHealthEvaluation>() {
           @Override
           public void write(JsonWriter out, ReplicaHealthEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaHealthEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaHealthEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaHealthEvaluation
   * @throws IOException if the JSON string is invalid with respect to ReplicaHealthEvaluation
   */
  public static ReplicaHealthEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaHealthEvaluation.class);
  }

  /**
   * Convert an instance of ReplicaHealthEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

