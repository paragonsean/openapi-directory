/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.UploadChunkRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an image store upload session. A session is associated with a relative path in the image store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadSessionInfo {
  public static final String SERIALIZED_NAME_EXPECTED_RANGES = "ExpectedRanges";
  @SerializedName(SERIALIZED_NAME_EXPECTED_RANGES)
  private List<UploadChunkRange> expectedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_SIZE = "FileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private String fileSize;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "ModifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_SESSION_ID = "SessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private UUID sessionId;

  public static final String SERIALIZED_NAME_STORE_RELATIVE_PATH = "StoreRelativePath";
  @SerializedName(SERIALIZED_NAME_STORE_RELATIVE_PATH)
  private String storeRelativePath;

  public UploadSessionInfo() {
  }

  public UploadSessionInfo expectedRanges(List<UploadChunkRange> expectedRanges) {
    this.expectedRanges = expectedRanges;
    return this;
  }

  public UploadSessionInfo addExpectedRangesItem(UploadChunkRange expectedRangesItem) {
    if (this.expectedRanges == null) {
      this.expectedRanges = new ArrayList<>();
    }
    this.expectedRanges.add(expectedRangesItem);
    return this;
  }

  /**
   * List of chunk ranges that image store has not received yet.
   * @return expectedRanges
   */
  @javax.annotation.Nullable
  public List<UploadChunkRange> getExpectedRanges() {
    return expectedRanges;
  }

  public void setExpectedRanges(List<UploadChunkRange> expectedRanges) {
    this.expectedRanges = expectedRanges;
  }


  public UploadSessionInfo fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * The size in bytes of the uploading file.
   * @return fileSize
   */
  @javax.annotation.Nullable
  public String getFileSize() {
    return fileSize;
  }

  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }


  public UploadSessionInfo modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * The date and time when the upload session was last modified.
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public UploadSessionInfo sessionId(UUID sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * A unique ID of the upload session. A session ID can be reused only if the session was committed or removed.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public UUID getSessionId() {
    return sessionId;
  }

  public void setSessionId(UUID sessionId) {
    this.sessionId = sessionId;
  }


  public UploadSessionInfo storeRelativePath(String storeRelativePath) {
    this.storeRelativePath = storeRelativePath;
    return this;
  }

  /**
   * The remote location within image store. This path is relative to the image store root.
   * @return storeRelativePath
   */
  @javax.annotation.Nullable
  public String getStoreRelativePath() {
    return storeRelativePath;
  }

  public void setStoreRelativePath(String storeRelativePath) {
    this.storeRelativePath = storeRelativePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadSessionInfo uploadSessionInfo = (UploadSessionInfo) o;
    return Objects.equals(this.expectedRanges, uploadSessionInfo.expectedRanges) &&
        Objects.equals(this.fileSize, uploadSessionInfo.fileSize) &&
        Objects.equals(this.modifiedDate, uploadSessionInfo.modifiedDate) &&
        Objects.equals(this.sessionId, uploadSessionInfo.sessionId) &&
        Objects.equals(this.storeRelativePath, uploadSessionInfo.storeRelativePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedRanges, fileSize, modifiedDate, sessionId, storeRelativePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadSessionInfo {\n");
    sb.append("    expectedRanges: ").append(toIndentedString(expectedRanges)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    storeRelativePath: ").append(toIndentedString(storeRelativePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExpectedRanges");
    openapiFields.add("FileSize");
    openapiFields.add("ModifiedDate");
    openapiFields.add("SessionId");
    openapiFields.add("StoreRelativePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadSessionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadSessionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadSessionInfo is not found in the empty JSON string", UploadSessionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadSessionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadSessionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ExpectedRanges") != null && !jsonObj.get("ExpectedRanges").isJsonNull()) {
        JsonArray jsonArrayexpectedRanges = jsonObj.getAsJsonArray("ExpectedRanges");
        if (jsonArrayexpectedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ExpectedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ExpectedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("ExpectedRanges").toString()));
          }

          // validate the optional field `ExpectedRanges` (array)
          for (int i = 0; i < jsonArrayexpectedRanges.size(); i++) {
            UploadChunkRange.validateJsonElement(jsonArrayexpectedRanges.get(i));
          };
        }
      }
      if ((jsonObj.get("FileSize") != null && !jsonObj.get("FileSize").isJsonNull()) && !jsonObj.get("FileSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileSize").toString()));
      }
      if ((jsonObj.get("SessionId") != null && !jsonObj.get("SessionId").isJsonNull()) && !jsonObj.get("SessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SessionId").toString()));
      }
      if ((jsonObj.get("StoreRelativePath") != null && !jsonObj.get("StoreRelativePath").isJsonNull()) && !jsonObj.get("StoreRelativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoreRelativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoreRelativePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadSessionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadSessionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadSessionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadSessionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadSessionInfo>() {
           @Override
           public void write(JsonWriter out, UploadSessionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadSessionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadSessionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadSessionInfo
   * @throws IOException if the JSON string is invalid with respect to UploadSessionInfo
   */
  public static UploadSessionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadSessionInfo.class);
  }

  /**
   * Convert an instance of UploadSessionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

