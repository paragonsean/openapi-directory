/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChaosContext;
import org.openapitools.client.model.ChaosTargetFilter;
import org.openapitools.client.model.ClusterHealthPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines all the parameters to configure a Chaos run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosParameters {
  public static final String SERIALIZED_NAME_CHAOS_TARGET_FILTER = "ChaosTargetFilter";
  @SerializedName(SERIALIZED_NAME_CHAOS_TARGET_FILTER)
  private ChaosTargetFilter chaosTargetFilter;

  public static final String SERIALIZED_NAME_CLUSTER_HEALTH_POLICY = "ClusterHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HEALTH_POLICY)
  private ClusterHealthPolicy clusterHealthPolicy;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ChaosContext context;

  public static final String SERIALIZED_NAME_ENABLE_MOVE_REPLICA_FAULTS = "EnableMoveReplicaFaults";
  @SerializedName(SERIALIZED_NAME_ENABLE_MOVE_REPLICA_FAULTS)
  private Boolean enableMoveReplicaFaults = true;

  public static final String SERIALIZED_NAME_MAX_CLUSTER_STABILIZATION_TIMEOUT_IN_SECONDS = "MaxClusterStabilizationTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_CLUSTER_STABILIZATION_TIMEOUT_IN_SECONDS)
  private Long maxClusterStabilizationTimeoutInSeconds = 60l;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_FAULTS = "MaxConcurrentFaults";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_FAULTS)
  private Long maxConcurrentFaults = 1l;

  public static final String SERIALIZED_NAME_TIME_TO_RUN_IN_SECONDS = "TimeToRunInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_TO_RUN_IN_SECONDS)
  private String timeToRunInSeconds = "4294967295";

  public static final String SERIALIZED_NAME_WAIT_TIME_BETWEEN_FAULTS_IN_SECONDS = "WaitTimeBetweenFaultsInSeconds";
  @SerializedName(SERIALIZED_NAME_WAIT_TIME_BETWEEN_FAULTS_IN_SECONDS)
  private Long waitTimeBetweenFaultsInSeconds = 20l;

  public static final String SERIALIZED_NAME_WAIT_TIME_BETWEEN_ITERATIONS_IN_SECONDS = "WaitTimeBetweenIterationsInSeconds";
  @SerializedName(SERIALIZED_NAME_WAIT_TIME_BETWEEN_ITERATIONS_IN_SECONDS)
  private Long waitTimeBetweenIterationsInSeconds = 30l;

  public ChaosParameters() {
  }

  public ChaosParameters chaosTargetFilter(ChaosTargetFilter chaosTargetFilter) {
    this.chaosTargetFilter = chaosTargetFilter;
    return this;
  }

  /**
   * Get chaosTargetFilter
   * @return chaosTargetFilter
   */
  @javax.annotation.Nullable
  public ChaosTargetFilter getChaosTargetFilter() {
    return chaosTargetFilter;
  }

  public void setChaosTargetFilter(ChaosTargetFilter chaosTargetFilter) {
    this.chaosTargetFilter = chaosTargetFilter;
  }


  public ChaosParameters clusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
    return this;
  }

  /**
   * Get clusterHealthPolicy
   * @return clusterHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterHealthPolicy getClusterHealthPolicy() {
    return clusterHealthPolicy;
  }

  public void setClusterHealthPolicy(ClusterHealthPolicy clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
  }


  public ChaosParameters context(ChaosContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public ChaosContext getContext() {
    return context;
  }

  public void setContext(ChaosContext context) {
    this.context = context;
  }


  public ChaosParameters enableMoveReplicaFaults(Boolean enableMoveReplicaFaults) {
    this.enableMoveReplicaFaults = enableMoveReplicaFaults;
    return this;
  }

  /**
   * Enables or disables the move primary and move secondary faults.
   * @return enableMoveReplicaFaults
   */
  @javax.annotation.Nullable
  public Boolean getEnableMoveReplicaFaults() {
    return enableMoveReplicaFaults;
  }

  public void setEnableMoveReplicaFaults(Boolean enableMoveReplicaFaults) {
    this.enableMoveReplicaFaults = enableMoveReplicaFaults;
  }


  public ChaosParameters maxClusterStabilizationTimeoutInSeconds(Long maxClusterStabilizationTimeoutInSeconds) {
    this.maxClusterStabilizationTimeoutInSeconds = maxClusterStabilizationTimeoutInSeconds;
    return this;
  }

  /**
   * The maximum amount of time to wait for all cluster entities to become stable and healthy. Chaos executes in iterations and at the start of each iteration it validates the health of cluster entities. During validation if a cluster entity is not stable and healthy within MaxClusterStabilizationTimeoutInSeconds, Chaos generates a validation failed event.
   * minimum: 0
   * maximum: 4294967295
   * @return maxClusterStabilizationTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getMaxClusterStabilizationTimeoutInSeconds() {
    return maxClusterStabilizationTimeoutInSeconds;
  }

  public void setMaxClusterStabilizationTimeoutInSeconds(Long maxClusterStabilizationTimeoutInSeconds) {
    this.maxClusterStabilizationTimeoutInSeconds = maxClusterStabilizationTimeoutInSeconds;
  }


  public ChaosParameters maxConcurrentFaults(Long maxConcurrentFaults) {
    this.maxConcurrentFaults = maxConcurrentFaults;
    return this;
  }

  /**
   * MaxConcurrentFaults is the maximum number of concurrent faults induced per iteration. Chaos executes in iterations and two consecutive iterations are separated by a validation phase. The higher the concurrency, the more aggressive the injection of faults -- inducing more complex series of states to uncover bugs. The recommendation is to start with a value of 2 or 3 and to exercise caution while moving up.
   * minimum: 0
   * maximum: 4294967295
   * @return maxConcurrentFaults
   */
  @javax.annotation.Nullable
  public Long getMaxConcurrentFaults() {
    return maxConcurrentFaults;
  }

  public void setMaxConcurrentFaults(Long maxConcurrentFaults) {
    this.maxConcurrentFaults = maxConcurrentFaults;
  }


  public ChaosParameters timeToRunInSeconds(String timeToRunInSeconds) {
    this.timeToRunInSeconds = timeToRunInSeconds;
    return this;
  }

  /**
   * Total time (in seconds) for which Chaos will run before automatically stopping. The maximum allowed value is 4,294,967,295 (System.UInt32.MaxValue).
   * @return timeToRunInSeconds
   */
  @javax.annotation.Nullable
  public String getTimeToRunInSeconds() {
    return timeToRunInSeconds;
  }

  public void setTimeToRunInSeconds(String timeToRunInSeconds) {
    this.timeToRunInSeconds = timeToRunInSeconds;
  }


  public ChaosParameters waitTimeBetweenFaultsInSeconds(Long waitTimeBetweenFaultsInSeconds) {
    this.waitTimeBetweenFaultsInSeconds = waitTimeBetweenFaultsInSeconds;
    return this;
  }

  /**
   * Wait time (in seconds) between consecutive faults within a single iteration. The larger the value, the lower the overlapping between faults and the simpler the sequence of state transitions that the cluster goes through. The recommendation is to start with a value between 1 and 5 and exercise caution while moving up.
   * minimum: 0
   * maximum: 4294967295
   * @return waitTimeBetweenFaultsInSeconds
   */
  @javax.annotation.Nullable
  public Long getWaitTimeBetweenFaultsInSeconds() {
    return waitTimeBetweenFaultsInSeconds;
  }

  public void setWaitTimeBetweenFaultsInSeconds(Long waitTimeBetweenFaultsInSeconds) {
    this.waitTimeBetweenFaultsInSeconds = waitTimeBetweenFaultsInSeconds;
  }


  public ChaosParameters waitTimeBetweenIterationsInSeconds(Long waitTimeBetweenIterationsInSeconds) {
    this.waitTimeBetweenIterationsInSeconds = waitTimeBetweenIterationsInSeconds;
    return this;
  }

  /**
   * Time-separation (in seconds) between two consecutive iterations of Chaos. The larger the value, the lower the fault injection rate.
   * minimum: 0
   * maximum: 4294967295
   * @return waitTimeBetweenIterationsInSeconds
   */
  @javax.annotation.Nullable
  public Long getWaitTimeBetweenIterationsInSeconds() {
    return waitTimeBetweenIterationsInSeconds;
  }

  public void setWaitTimeBetweenIterationsInSeconds(Long waitTimeBetweenIterationsInSeconds) {
    this.waitTimeBetweenIterationsInSeconds = waitTimeBetweenIterationsInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosParameters chaosParameters = (ChaosParameters) o;
    return Objects.equals(this.chaosTargetFilter, chaosParameters.chaosTargetFilter) &&
        Objects.equals(this.clusterHealthPolicy, chaosParameters.clusterHealthPolicy) &&
        Objects.equals(this.context, chaosParameters.context) &&
        Objects.equals(this.enableMoveReplicaFaults, chaosParameters.enableMoveReplicaFaults) &&
        Objects.equals(this.maxClusterStabilizationTimeoutInSeconds, chaosParameters.maxClusterStabilizationTimeoutInSeconds) &&
        Objects.equals(this.maxConcurrentFaults, chaosParameters.maxConcurrentFaults) &&
        Objects.equals(this.timeToRunInSeconds, chaosParameters.timeToRunInSeconds) &&
        Objects.equals(this.waitTimeBetweenFaultsInSeconds, chaosParameters.waitTimeBetweenFaultsInSeconds) &&
        Objects.equals(this.waitTimeBetweenIterationsInSeconds, chaosParameters.waitTimeBetweenIterationsInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaosTargetFilter, clusterHealthPolicy, context, enableMoveReplicaFaults, maxClusterStabilizationTimeoutInSeconds, maxConcurrentFaults, timeToRunInSeconds, waitTimeBetweenFaultsInSeconds, waitTimeBetweenIterationsInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosParameters {\n");
    sb.append("    chaosTargetFilter: ").append(toIndentedString(chaosTargetFilter)).append("\n");
    sb.append("    clusterHealthPolicy: ").append(toIndentedString(clusterHealthPolicy)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    enableMoveReplicaFaults: ").append(toIndentedString(enableMoveReplicaFaults)).append("\n");
    sb.append("    maxClusterStabilizationTimeoutInSeconds: ").append(toIndentedString(maxClusterStabilizationTimeoutInSeconds)).append("\n");
    sb.append("    maxConcurrentFaults: ").append(toIndentedString(maxConcurrentFaults)).append("\n");
    sb.append("    timeToRunInSeconds: ").append(toIndentedString(timeToRunInSeconds)).append("\n");
    sb.append("    waitTimeBetweenFaultsInSeconds: ").append(toIndentedString(waitTimeBetweenFaultsInSeconds)).append("\n");
    sb.append("    waitTimeBetweenIterationsInSeconds: ").append(toIndentedString(waitTimeBetweenIterationsInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChaosTargetFilter");
    openapiFields.add("ClusterHealthPolicy");
    openapiFields.add("Context");
    openapiFields.add("EnableMoveReplicaFaults");
    openapiFields.add("MaxClusterStabilizationTimeoutInSeconds");
    openapiFields.add("MaxConcurrentFaults");
    openapiFields.add("TimeToRunInSeconds");
    openapiFields.add("WaitTimeBetweenFaultsInSeconds");
    openapiFields.add("WaitTimeBetweenIterationsInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosParameters is not found in the empty JSON string", ChaosParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChaosTargetFilter`
      if (jsonObj.get("ChaosTargetFilter") != null && !jsonObj.get("ChaosTargetFilter").isJsonNull()) {
        ChaosTargetFilter.validateJsonElement(jsonObj.get("ChaosTargetFilter"));
      }
      // validate the optional field `ClusterHealthPolicy`
      if (jsonObj.get("ClusterHealthPolicy") != null && !jsonObj.get("ClusterHealthPolicy").isJsonNull()) {
        ClusterHealthPolicy.validateJsonElement(jsonObj.get("ClusterHealthPolicy"));
      }
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        ChaosContext.validateJsonElement(jsonObj.get("Context"));
      }
      if ((jsonObj.get("TimeToRunInSeconds") != null && !jsonObj.get("TimeToRunInSeconds").isJsonNull()) && !jsonObj.get("TimeToRunInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeToRunInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeToRunInSeconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosParameters>() {
           @Override
           public void write(JsonWriter out, ChaosParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosParameters
   * @throws IOException if the JSON string is invalid with respect to ChaosParameters
   */
  public static ChaosParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosParameters.class);
  }

  /**
   * Convert an instance of ChaosParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

