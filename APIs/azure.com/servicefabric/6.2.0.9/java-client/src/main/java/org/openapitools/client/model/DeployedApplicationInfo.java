/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeployedApplicationStatus;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about application deployed on the node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedApplicationInfo {
  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOG_DIRECTORY = "LogDirectory";
  @SerializedName(SERIALIZED_NAME_LOG_DIRECTORY)
  private String logDirectory;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DeployedApplicationStatus status;

  public static final String SERIALIZED_NAME_TEMP_DIRECTORY = "TempDirectory";
  @SerializedName(SERIALIZED_NAME_TEMP_DIRECTORY)
  private String tempDirectory;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_WORK_DIRECTORY = "WorkDirectory";
  @SerializedName(SERIALIZED_NAME_WORK_DIRECTORY)
  private String workDirectory;

  public DeployedApplicationInfo() {
  }

  public DeployedApplicationInfo healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public DeployedApplicationInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \&quot;\\~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp\\~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeployedApplicationInfo logDirectory(String logDirectory) {
    this.logDirectory = logDirectory;
    return this;
  }

  /**
   * The log directory of the application on the node. The log directory can be used to store application logs.
   * @return logDirectory
   */
  @javax.annotation.Nullable
  public String getLogDirectory() {
    return logDirectory;
  }

  public void setLogDirectory(String logDirectory) {
    this.logDirectory = logDirectory;
  }


  public DeployedApplicationInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application, including the &#39;fabric:&#39; URI scheme.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeployedApplicationInfo status(DeployedApplicationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DeployedApplicationStatus getStatus() {
    return status;
  }

  public void setStatus(DeployedApplicationStatus status) {
    this.status = status;
  }


  public DeployedApplicationInfo tempDirectory(String tempDirectory) {
    this.tempDirectory = tempDirectory;
    return this;
  }

  /**
   * The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory.
   * @return tempDirectory
   */
  @javax.annotation.Nullable
  public String getTempDirectory() {
    return tempDirectory;
  }

  public void setTempDirectory(String tempDirectory) {
    this.tempDirectory = tempDirectory;
  }


  public DeployedApplicationInfo typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * The application type name as defined in the application manifest.
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public DeployedApplicationInfo workDirectory(String workDirectory) {
    this.workDirectory = workDirectory;
    return this;
  }

  /**
   * The work directory of the application on the node. The work directory can be used to store application data.
   * @return workDirectory
   */
  @javax.annotation.Nullable
  public String getWorkDirectory() {
    return workDirectory;
  }

  public void setWorkDirectory(String workDirectory) {
    this.workDirectory = workDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedApplicationInfo deployedApplicationInfo = (DeployedApplicationInfo) o;
    return Objects.equals(this.healthState, deployedApplicationInfo.healthState) &&
        Objects.equals(this.id, deployedApplicationInfo.id) &&
        Objects.equals(this.logDirectory, deployedApplicationInfo.logDirectory) &&
        Objects.equals(this.name, deployedApplicationInfo.name) &&
        Objects.equals(this.status, deployedApplicationInfo.status) &&
        Objects.equals(this.tempDirectory, deployedApplicationInfo.tempDirectory) &&
        Objects.equals(this.typeName, deployedApplicationInfo.typeName) &&
        Objects.equals(this.workDirectory, deployedApplicationInfo.workDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthState, id, logDirectory, name, status, tempDirectory, typeName, workDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedApplicationInfo {\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logDirectory: ").append(toIndentedString(logDirectory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tempDirectory: ").append(toIndentedString(tempDirectory)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    workDirectory: ").append(toIndentedString(workDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthState");
    openapiFields.add("Id");
    openapiFields.add("LogDirectory");
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("TempDirectory");
    openapiFields.add("TypeName");
    openapiFields.add("WorkDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedApplicationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedApplicationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedApplicationInfo is not found in the empty JSON string", DeployedApplicationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedApplicationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedApplicationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("LogDirectory") != null && !jsonObj.get("LogDirectory").isJsonNull()) && !jsonObj.get("LogDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogDirectory").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DeployedApplicationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TempDirectory") != null && !jsonObj.get("TempDirectory").isJsonNull()) && !jsonObj.get("TempDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TempDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TempDirectory").toString()));
      }
      if ((jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) && !jsonObj.get("TypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeName").toString()));
      }
      if ((jsonObj.get("WorkDirectory") != null && !jsonObj.get("WorkDirectory").isJsonNull()) && !jsonObj.get("WorkDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedApplicationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedApplicationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedApplicationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedApplicationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedApplicationInfo>() {
           @Override
           public void write(JsonWriter out, DeployedApplicationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedApplicationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedApplicationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedApplicationInfo
   * @throws IOException if the JSON string is invalid with respect to DeployedApplicationInfo
   */
  public static DeployedApplicationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedApplicationInfo.class);
  }

  /**
   * Convert an instance of DeployedApplicationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

