/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CodePackageEntryPointStatistics;
import org.openapitools.client.model.EntryPointStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about setup or main entry point of a code package deployed on a Service Fabric node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodePackageEntryPoint {
  public static final String SERIALIZED_NAME_CODE_PACKAGE_ENTRY_POINT_STATISTICS = "CodePackageEntryPointStatistics";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGE_ENTRY_POINT_STATISTICS)
  private CodePackageEntryPointStatistics codePackageEntryPointStatistics;

  public static final String SERIALIZED_NAME_ENTRY_POINT_LOCATION = "EntryPointLocation";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT_LOCATION)
  private String entryPointLocation;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_NEXT_ACTIVATION_TIME = "NextActivationTime";
  @SerializedName(SERIALIZED_NAME_NEXT_ACTIVATION_TIME)
  private OffsetDateTime nextActivationTime;

  public static final String SERIALIZED_NAME_PROCESS_ID = "ProcessId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public static final String SERIALIZED_NAME_RUN_AS_USER_NAME = "RunAsUserName";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER_NAME)
  private String runAsUserName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryPointStatus status;

  public CodePackageEntryPoint() {
  }

  public CodePackageEntryPoint codePackageEntryPointStatistics(CodePackageEntryPointStatistics codePackageEntryPointStatistics) {
    this.codePackageEntryPointStatistics = codePackageEntryPointStatistics;
    return this;
  }

  /**
   * Get codePackageEntryPointStatistics
   * @return codePackageEntryPointStatistics
   */
  @javax.annotation.Nullable
  public CodePackageEntryPointStatistics getCodePackageEntryPointStatistics() {
    return codePackageEntryPointStatistics;
  }

  public void setCodePackageEntryPointStatistics(CodePackageEntryPointStatistics codePackageEntryPointStatistics) {
    this.codePackageEntryPointStatistics = codePackageEntryPointStatistics;
  }


  public CodePackageEntryPoint entryPointLocation(String entryPointLocation) {
    this.entryPointLocation = entryPointLocation;
    return this;
  }

  /**
   * The location of entry point executable on the node.
   * @return entryPointLocation
   */
  @javax.annotation.Nullable
  public String getEntryPointLocation() {
    return entryPointLocation;
  }

  public void setEntryPointLocation(String entryPointLocation) {
    this.entryPointLocation = entryPointLocation;
  }


  public CodePackageEntryPoint instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public CodePackageEntryPoint nextActivationTime(OffsetDateTime nextActivationTime) {
    this.nextActivationTime = nextActivationTime;
    return this;
  }

  /**
   * The time (in UTC) when the entry point executable will be run next.
   * @return nextActivationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextActivationTime() {
    return nextActivationTime;
  }

  public void setNextActivationTime(OffsetDateTime nextActivationTime) {
    this.nextActivationTime = nextActivationTime;
  }


  public CodePackageEntryPoint processId(String processId) {
    this.processId = processId;
    return this;
  }

  /**
   * The process ID of the entry point.
   * @return processId
   */
  @javax.annotation.Nullable
  public String getProcessId() {
    return processId;
  }

  public void setProcessId(String processId) {
    this.processId = processId;
  }


  public CodePackageEntryPoint runAsUserName(String runAsUserName) {
    this.runAsUserName = runAsUserName;
    return this;
  }

  /**
   * The user name under which entry point executable is run on the node.
   * @return runAsUserName
   */
  @javax.annotation.Nullable
  public String getRunAsUserName() {
    return runAsUserName;
  }

  public void setRunAsUserName(String runAsUserName) {
    this.runAsUserName = runAsUserName;
  }


  public CodePackageEntryPoint status(EntryPointStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryPointStatus getStatus() {
    return status;
  }

  public void setStatus(EntryPointStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodePackageEntryPoint codePackageEntryPoint = (CodePackageEntryPoint) o;
    return Objects.equals(this.codePackageEntryPointStatistics, codePackageEntryPoint.codePackageEntryPointStatistics) &&
        Objects.equals(this.entryPointLocation, codePackageEntryPoint.entryPointLocation) &&
        Objects.equals(this.instanceId, codePackageEntryPoint.instanceId) &&
        Objects.equals(this.nextActivationTime, codePackageEntryPoint.nextActivationTime) &&
        Objects.equals(this.processId, codePackageEntryPoint.processId) &&
        Objects.equals(this.runAsUserName, codePackageEntryPoint.runAsUserName) &&
        Objects.equals(this.status, codePackageEntryPoint.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePackageEntryPointStatistics, entryPointLocation, instanceId, nextActivationTime, processId, runAsUserName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodePackageEntryPoint {\n");
    sb.append("    codePackageEntryPointStatistics: ").append(toIndentedString(codePackageEntryPointStatistics)).append("\n");
    sb.append("    entryPointLocation: ").append(toIndentedString(entryPointLocation)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    nextActivationTime: ").append(toIndentedString(nextActivationTime)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    runAsUserName: ").append(toIndentedString(runAsUserName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodePackageEntryPointStatistics");
    openapiFields.add("EntryPointLocation");
    openapiFields.add("InstanceId");
    openapiFields.add("NextActivationTime");
    openapiFields.add("ProcessId");
    openapiFields.add("RunAsUserName");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodePackageEntryPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodePackageEntryPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodePackageEntryPoint is not found in the empty JSON string", CodePackageEntryPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodePackageEntryPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodePackageEntryPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodePackageEntryPointStatistics`
      if (jsonObj.get("CodePackageEntryPointStatistics") != null && !jsonObj.get("CodePackageEntryPointStatistics").isJsonNull()) {
        CodePackageEntryPointStatistics.validateJsonElement(jsonObj.get("CodePackageEntryPointStatistics"));
      }
      if ((jsonObj.get("EntryPointLocation") != null && !jsonObj.get("EntryPointLocation").isJsonNull()) && !jsonObj.get("EntryPointLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntryPointLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntryPointLocation").toString()));
      }
      if ((jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) && !jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("ProcessId") != null && !jsonObj.get("ProcessId").isJsonNull()) && !jsonObj.get("ProcessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProcessId").toString()));
      }
      if ((jsonObj.get("RunAsUserName") != null && !jsonObj.get("RunAsUserName").isJsonNull()) && !jsonObj.get("RunAsUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RunAsUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RunAsUserName").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EntryPointStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodePackageEntryPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodePackageEntryPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodePackageEntryPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodePackageEntryPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<CodePackageEntryPoint>() {
           @Override
           public void write(JsonWriter out, CodePackageEntryPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodePackageEntryPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodePackageEntryPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodePackageEntryPoint
   * @throws IOException if the JSON string is invalid with respect to CodePackageEntryPoint
   */
  public static CodePackageEntryPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodePackageEntryPoint.class);
  }

  /**
   * Convert an instance of CodePackageEntryPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

