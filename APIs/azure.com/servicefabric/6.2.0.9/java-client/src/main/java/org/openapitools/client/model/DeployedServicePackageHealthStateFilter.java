/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a deployed service package should be included as a child of a deployed application in the cluster health chunk. The deployed service packages are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent deployed application and its parent application must be included in the cluster health chunk. One filter can match zero, one or multiple deployed service packages, depending on its properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedServicePackageHealthStateFilter {
  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME_FILTER = "ServiceManifestNameFilter";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME_FILTER)
  private String serviceManifestNameFilter;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID_FILTER = "ServicePackageActivationIdFilter";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID_FILTER)
  private String servicePackageActivationIdFilter;

  public DeployedServicePackageHealthStateFilter() {
  }

  public DeployedServicePackageHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the deployed service packages. It allows selecting deployed service packages if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed service packages that match the filter are returned. All deployed service packages are used to evaluate the parent deployed application aggregated health state. If not specified, default value is None, unless the deployed service package ID is specified. If the filter has default value and deployed service package ID is specified, the matching deployed service package is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches deployed service packages with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public DeployedServicePackageHealthStateFilter serviceManifestNameFilter(String serviceManifestNameFilter) {
    this.serviceManifestNameFilter = serviceManifestNameFilter;
    return this;
  }

  /**
   * The name of the service manifest which identifies the deployed service packages that matches the filter. If specified, the filter is applied only to the specified deployed service packages, if any. If no deployed service packages with specified manifest name exist, nothing is returned in the cluster health chunk based on this filter. If any deployed service package exists, they are included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed service packages that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
   * @return serviceManifestNameFilter
   */
  @javax.annotation.Nullable
  public String getServiceManifestNameFilter() {
    return serviceManifestNameFilter;
  }

  public void setServiceManifestNameFilter(String serviceManifestNameFilter) {
    this.serviceManifestNameFilter = serviceManifestNameFilter;
  }


  public DeployedServicePackageHealthStateFilter servicePackageActivationIdFilter(String servicePackageActivationIdFilter) {
    this.servicePackageActivationIdFilter = servicePackageActivationIdFilter;
    return this;
  }

  /**
   * The activation ID of a deployed service package that matches the filter. If not specified, the filter applies to all deployed service packages that match the other parameters. If specified, the filter matches only the deployed service package with the specified activation ID.
   * @return servicePackageActivationIdFilter
   */
  @javax.annotation.Nullable
  public String getServicePackageActivationIdFilter() {
    return servicePackageActivationIdFilter;
  }

  public void setServicePackageActivationIdFilter(String servicePackageActivationIdFilter) {
    this.servicePackageActivationIdFilter = servicePackageActivationIdFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedServicePackageHealthStateFilter deployedServicePackageHealthStateFilter = (DeployedServicePackageHealthStateFilter) o;
    return Objects.equals(this.healthStateFilter, deployedServicePackageHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.serviceManifestNameFilter, deployedServicePackageHealthStateFilter.serviceManifestNameFilter) &&
        Objects.equals(this.servicePackageActivationIdFilter, deployedServicePackageHealthStateFilter.servicePackageActivationIdFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStateFilter, serviceManifestNameFilter, servicePackageActivationIdFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedServicePackageHealthStateFilter {\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    serviceManifestNameFilter: ").append(toIndentedString(serviceManifestNameFilter)).append("\n");
    sb.append("    servicePackageActivationIdFilter: ").append(toIndentedString(servicePackageActivationIdFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthStateFilter");
    openapiFields.add("ServiceManifestNameFilter");
    openapiFields.add("ServicePackageActivationIdFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedServicePackageHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedServicePackageHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedServicePackageHealthStateFilter is not found in the empty JSON string", DeployedServicePackageHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedServicePackageHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedServicePackageHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ServiceManifestNameFilter") != null && !jsonObj.get("ServiceManifestNameFilter").isJsonNull()) && !jsonObj.get("ServiceManifestNameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestNameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestNameFilter").toString()));
      }
      if ((jsonObj.get("ServicePackageActivationIdFilter") != null && !jsonObj.get("ServicePackageActivationIdFilter").isJsonNull()) && !jsonObj.get("ServicePackageActivationIdFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServicePackageActivationIdFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServicePackageActivationIdFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedServicePackageHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedServicePackageHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedServicePackageHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedServicePackageHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedServicePackageHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, DeployedServicePackageHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedServicePackageHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedServicePackageHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedServicePackageHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to DeployedServicePackageHealthStateFilter
   */
  public static DeployedServicePackageHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedServicePackageHealthStateFilter.class);
  }

  /**
   * Convert an instance of DeployedServicePackageHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

