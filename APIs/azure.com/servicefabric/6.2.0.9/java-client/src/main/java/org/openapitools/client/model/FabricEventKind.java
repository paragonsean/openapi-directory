/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The kind of FabricEvent.
 */
@JsonAdapter(FabricEventKind.Adapter.class)
public enum FabricEventKind {
  
  CLUSTER_EVENT("ClusterEvent"),
  
  CONTAINER_INSTANCE_EVENT("ContainerInstanceEvent"),
  
  NODE_EVENT("NodeEvent"),
  
  APPLICATION_EVENT("ApplicationEvent"),
  
  SERVICE_EVENT("ServiceEvent"),
  
  PARTITION_EVENT("PartitionEvent"),
  
  REPLICA_EVENT("ReplicaEvent"),
  
  PARTITION_ANALYSIS_EVENT("PartitionAnalysisEvent"),
  
  APPLICATION_CREATED("ApplicationCreated"),
  
  APPLICATION_DELETED("ApplicationDeleted"),
  
  APPLICATION_HEALTH_REPORT_CREATED("ApplicationHealthReportCreated"),
  
  APPLICATION_HEALTH_REPORT_EXPIRED("ApplicationHealthReportExpired"),
  
  APPLICATION_UPGRADE_COMPLETE("ApplicationUpgradeComplete"),
  
  APPLICATION_UPGRADE_DOMAIN_COMPLETE("ApplicationUpgradeDomainComplete"),
  
  APPLICATION_UPGRADE_ROLLBACK_COMPLETE("ApplicationUpgradeRollbackComplete"),
  
  APPLICATION_UPGRADE_ROLLBACK_START("ApplicationUpgradeRollbackStart"),
  
  APPLICATION_UPGRADE_START("ApplicationUpgradeStart"),
  
  DEPLOYED_APPLICATION_HEALTH_REPORT_CREATED("DeployedApplicationHealthReportCreated"),
  
  DEPLOYED_APPLICATION_HEALTH_REPORT_EXPIRED("DeployedApplicationHealthReportExpired"),
  
  PROCESS_DEACTIVATED("ProcessDeactivated"),
  
  CONTAINER_DEACTIVATED("ContainerDeactivated"),
  
  NODE_ABORTED("NodeAborted"),
  
  NODE_ABORTING("NodeAborting"),
  
  NODE_ADDED("NodeAdded"),
  
  NODE_CLOSE("NodeClose"),
  
  NODE_CLOSING("NodeClosing"),
  
  NODE_DEACTIVATE_COMPLETE("NodeDeactivateComplete"),
  
  NODE_DEACTIVATE_START("NodeDeactivateStart"),
  
  NODE_DOWN("NodeDown"),
  
  NODE_HEALTH_REPORT_CREATED("NodeHealthReportCreated"),
  
  NODE_HEALTH_REPORT_EXPIRED("NodeHealthReportExpired"),
  
  NODE_OPENED_SUCCESS("NodeOpenedSuccess"),
  
  NODE_OPEN_FAILED("NodeOpenFailed"),
  
  NODE_OPENING("NodeOpening"),
  
  NODE_REMOVED("NodeRemoved"),
  
  NODE_UP("NodeUp"),
  
  PARTITION_HEALTH_REPORT_CREATED("PartitionHealthReportCreated"),
  
  PARTITION_HEALTH_REPORT_EXPIRED("PartitionHealthReportExpired"),
  
  PARTITION_RECONFIGURATION_COMPLETED("PartitionReconfigurationCompleted"),
  
  PARTITION_PRIMARY_MOVE_ANALYSIS("PartitionPrimaryMoveAnalysis"),
  
  SERVICE_CREATED("ServiceCreated"),
  
  SERVICE_DELETED("ServiceDeleted"),
  
  SERVICE_HEALTH_REPORT_CREATED("ServiceHealthReportCreated"),
  
  SERVICE_HEALTH_REPORT_EXPIRED("ServiceHealthReportExpired"),
  
  DEPLOYED_SERVICE_HEALTH_REPORT_CREATED("DeployedServiceHealthReportCreated"),
  
  DEPLOYED_SERVICE_HEALTH_REPORT_EXPIRED("DeployedServiceHealthReportExpired"),
  
  STATEFUL_REPLICA_HEALTH_REPORT_CREATED("StatefulReplicaHealthReportCreated"),
  
  STATEFUL_REPLICA_HEALTH_REPORT_EXPIRED("StatefulReplicaHealthReportExpired"),
  
  STATELESS_REPLICA_HEALTH_REPORT_CREATED("StatelessReplicaHealthReportCreated"),
  
  STATELESS_REPLICA_HEALTH_REPORT_EXPIRED("StatelessReplicaHealthReportExpired"),
  
  CLUSTER_HEALTH_REPORT_CREATED("ClusterHealthReportCreated"),
  
  CLUSTER_HEALTH_REPORT_EXPIRED("ClusterHealthReportExpired"),
  
  CLUSTER_UPGRADE_COMPLETE("ClusterUpgradeComplete"),
  
  CLUSTER_UPGRADE_DOMAIN_COMPLETE("ClusterUpgradeDomainComplete"),
  
  CLUSTER_UPGRADE_ROLLBACK_COMPLETE("ClusterUpgradeRollbackComplete"),
  
  CLUSTER_UPGRADE_ROLLBACK_START("ClusterUpgradeRollbackStart"),
  
  CLUSTER_UPGRADE_START("ClusterUpgradeStart"),
  
  CHAOS_STOPPED("ChaosStopped"),
  
  CHAOS_STARTED("ChaosStarted"),
  
  CHAOS_RESTART_NODE_FAULT_COMPLETED("ChaosRestartNodeFaultCompleted"),
  
  CHAOS_RESTART_CODE_PACKAGE_FAULT_SCHEDULED("ChaosRestartCodePackageFaultScheduled"),
  
  CHAOS_RESTART_CODE_PACKAGE_FAULT_COMPLETED("ChaosRestartCodePackageFaultCompleted"),
  
  CHAOS_REMOVE_REPLICA_FAULT_SCHEDULED("ChaosRemoveReplicaFaultScheduled"),
  
  CHAOS_REMOVE_REPLICA_FAULT_COMPLETED("ChaosRemoveReplicaFaultCompleted"),
  
  CHAOS_MOVE_SECONDARY_FAULT_SCHEDULED("ChaosMoveSecondaryFaultScheduled"),
  
  CHAOS_MOVE_PRIMARY_FAULT_SCHEDULED("ChaosMovePrimaryFaultScheduled"),
  
  CHAOS_RESTART_REPLICA_FAULT_SCHEDULED("ChaosRestartReplicaFaultScheduled"),
  
  CHAOS_RESTART_NODE_FAULT_SCHEDULED("ChaosRestartNodeFaultScheduled");

  private String value;

  FabricEventKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FabricEventKind fromValue(String value) {
    for (FabricEventKind b : FabricEventKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FabricEventKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final FabricEventKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FabricEventKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FabricEventKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FabricEventKind.fromValue(value);
  }
}

