/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationEvent;
import org.openapitools.client.model.ClusterEvent;
import org.openapitools.client.model.ContainerInstanceEvent;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.FabricEvent;
import org.openapitools.client.model.NodeEvent;
import org.openapitools.client.model.PartitionEvent;
import org.openapitools.client.model.ReplicaEvent;
import org.openapitools.client.model.ServiceEvent;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsStoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsStoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsStoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getApplicationEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationEventListCall(String apiVersion, String applicationId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Applications/{applicationId}/$/Events"
            .replace("{" + "applicationId" + "}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationEventListValidateBeforeCall(String apiVersion, String applicationId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationEventList(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getApplicationEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getApplicationEventList(Async)");
        }

        return getApplicationEventListCall(apiVersion, applicationId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets an Application-related events.
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ApplicationEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationEvent> getApplicationEventList(String apiVersion, String applicationId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ApplicationEvent>> localVarResp = getApplicationEventListWithHttpInfo(apiVersion, applicationId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets an Application-related events.
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ApplicationEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationEvent>> getApplicationEventListWithHttpInfo(String apiVersion, String applicationId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getApplicationEventListValidateBeforeCall(apiVersion, applicationId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ApplicationEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an Application-related events. (asynchronously)
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param applicationId The identity of the application. This is typically the full name of the application without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the application name is \&quot;fabric:/myapp/app1\&quot;, the application identity would be \&quot;myapp~app1\&quot; in 6.0+ and \&quot;myapp/app1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationEventListAsync(String apiVersion, String applicationId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ApplicationEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationEventListValidateBeforeCall(apiVersion, applicationId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationsEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationsEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Applications/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationsEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationsEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getApplicationsEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getApplicationsEventList(Async)");
        }

        return getApplicationsEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Applications-related events.
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ApplicationEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationEvent> getApplicationsEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ApplicationEvent>> localVarResp = getApplicationsEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Applications-related events.
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ApplicationEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationEvent>> getApplicationsEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getApplicationsEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ApplicationEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Applications-related events. (asynchronously)
     * The response is list of ApplicationEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ApplicationEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationsEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ApplicationEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationsEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClusterEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ClusterEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Cluster/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getClusterEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getClusterEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getClusterEventList(Async)");
        }

        return getClusterEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Cluster-related events.
     * The response is list of ClusterEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ClusterEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ClusterEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ClusterEvent> getClusterEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ClusterEvent>> localVarResp = getClusterEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Cluster-related events.
     * The response is list of ClusterEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ClusterEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ClusterEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClusterEvent>> getClusterEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getClusterEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ClusterEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Cluster-related events. (asynchronously)
     * The response is list of ClusterEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ClusterEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ClusterEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ClusterEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContainersEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ContainerInstanceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContainersEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Containers/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContainersEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getContainersEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getContainersEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getContainersEventList(Async)");
        }

        return getContainersEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Containers-related events.
     * The response is list of ContainerInstanceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ContainerInstanceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ContainerInstanceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ContainerInstanceEvent> getContainersEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ContainerInstanceEvent>> localVarResp = getContainersEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Containers-related events.
     * The response is list of ContainerInstanceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ContainerInstanceEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ContainerInstanceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContainerInstanceEvent>> getContainersEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getContainersEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ContainerInstanceEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Containers-related events. (asynchronously)
     * The response is list of ContainerInstanceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ContainerInstanceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContainersEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ContainerInstanceEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContainersEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ContainerInstanceEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorrelatedEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param eventInstanceId The EventInstanceId. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type FabricEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorrelatedEventListCall(String apiVersion, String eventInstanceId, Long timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events"
            .replace("{" + "eventInstanceId" + "}", localVarApiClient.escapeString(eventInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorrelatedEventListValidateBeforeCall(String apiVersion, String eventInstanceId, Long timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCorrelatedEventList(Async)");
        }

        // verify the required parameter 'eventInstanceId' is set
        if (eventInstanceId == null) {
            throw new ApiException("Missing the required parameter 'eventInstanceId' when calling getCorrelatedEventList(Async)");
        }

        return getCorrelatedEventListCall(apiVersion, eventInstanceId, timeout, _callback);

    }

    /**
     * Gets all correlated events for a given event.
     * The response is list of FabricEvents.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param eventInstanceId The EventInstanceId. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return List&lt;FabricEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type FabricEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<FabricEvent> getCorrelatedEventList(String apiVersion, String eventInstanceId, Long timeout) throws ApiException {
        ApiResponse<List<FabricEvent>> localVarResp = getCorrelatedEventListWithHttpInfo(apiVersion, eventInstanceId, timeout);
        return localVarResp.getData();
    }

    /**
     * Gets all correlated events for a given event.
     * The response is list of FabricEvents.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param eventInstanceId The EventInstanceId. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @return ApiResponse&lt;List&lt;FabricEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type FabricEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FabricEvent>> getCorrelatedEventListWithHttpInfo(String apiVersion, String eventInstanceId, Long timeout) throws ApiException {
        okhttp3.Call localVarCall = getCorrelatedEventListValidateBeforeCall(apiVersion, eventInstanceId, timeout, null);
        Type localVarReturnType = new TypeToken<List<FabricEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all correlated events for a given event. (asynchronously)
     * The response is list of FabricEvents.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param eventInstanceId The EventInstanceId. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type FabricEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorrelatedEventListAsync(String apiVersion, String eventInstanceId, Long timeout, final ApiCallback<List<FabricEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorrelatedEventListValidateBeforeCall(apiVersion, eventInstanceId, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<FabricEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNodeEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param nodeName The name of the node. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeEventListCall(String apiVersion, String nodeName, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Nodes/{nodeName}/$/Events"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeEventListValidateBeforeCall(String apiVersion, String nodeName, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getNodeEventList(Async)");
        }

        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling getNodeEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getNodeEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getNodeEventList(Async)");
        }

        return getNodeEventListCall(apiVersion, nodeName, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets a Node-related events.
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param nodeName The name of the node. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;NodeEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NodeEvent> getNodeEventList(String apiVersion, String nodeName, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<NodeEvent>> localVarResp = getNodeEventListWithHttpInfo(apiVersion, nodeName, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets a Node-related events.
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param nodeName The name of the node. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;NodeEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NodeEvent>> getNodeEventListWithHttpInfo(String apiVersion, String nodeName, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getNodeEventListValidateBeforeCall(apiVersion, nodeName, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<NodeEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Node-related events. (asynchronously)
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param nodeName The name of the node. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeEventListAsync(String apiVersion, String nodeName, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<NodeEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeEventListValidateBeforeCall(apiVersion, nodeName, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<NodeEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNodesEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodesEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Nodes/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodesEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getNodesEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getNodesEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getNodesEventList(Async)");
        }

        return getNodesEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Nodes-related Events.
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;NodeEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<NodeEvent> getNodesEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<NodeEvent>> localVarResp = getNodesEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Nodes-related Events.
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;NodeEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NodeEvent>> getNodesEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getNodesEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<NodeEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Nodes-related Events. (asynchronously)
     * The response is list of NodeEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type NodeEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodesEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<NodeEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodesEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<NodeEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionEventListCall(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Partitions/{partitionId}/$/Events"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionEventListValidateBeforeCall(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionEventList(Async)");
        }

        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getPartitionEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getPartitionEventList(Async)");
        }

        return getPartitionEventListCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets a Partition-related events.
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;PartitionEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PartitionEvent> getPartitionEventList(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<PartitionEvent>> localVarResp = getPartitionEventListWithHttpInfo(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets a Partition-related events.
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;PartitionEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PartitionEvent>> getPartitionEventListWithHttpInfo(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getPartitionEventListValidateBeforeCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<PartitionEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Partition-related events. (asynchronously)
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionEventListAsync(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<PartitionEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionEventListValidateBeforeCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<PartitionEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionReplicaEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param replicaId The identifier of the replica. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionReplicaEventListCall(String apiVersion, UUID partitionId, String replicaId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionReplicaEventListValidateBeforeCall(String apiVersion, UUID partitionId, String replicaId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionReplicaEventList(Async)");
        }

        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionReplicaEventList(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling getPartitionReplicaEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getPartitionReplicaEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getPartitionReplicaEventList(Async)");
        }

        return getPartitionReplicaEventListCall(apiVersion, partitionId, replicaId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets a Partition Replica-related events.
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param replicaId The identifier of the replica. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ReplicaEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ReplicaEvent> getPartitionReplicaEventList(String apiVersion, UUID partitionId, String replicaId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ReplicaEvent>> localVarResp = getPartitionReplicaEventListWithHttpInfo(apiVersion, partitionId, replicaId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets a Partition Replica-related events.
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param replicaId The identifier of the replica. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ReplicaEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReplicaEvent>> getPartitionReplicaEventListWithHttpInfo(String apiVersion, UUID partitionId, String replicaId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getPartitionReplicaEventListValidateBeforeCall(apiVersion, partitionId, replicaId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ReplicaEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Partition Replica-related events. (asynchronously)
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param replicaId The identifier of the replica. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionReplicaEventListAsync(String apiVersion, UUID partitionId, String replicaId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ReplicaEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionReplicaEventListValidateBeforeCall(apiVersion, partitionId, replicaId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ReplicaEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionReplicasEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionReplicasEventListCall(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Partitions/{partitionId}/$/Replicas/Events"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionReplicasEventListValidateBeforeCall(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionReplicasEventList(Async)");
        }

        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling getPartitionReplicasEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getPartitionReplicasEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getPartitionReplicasEventList(Async)");
        }

        return getPartitionReplicasEventListCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Replicas-related events for a Partition.
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ReplicaEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ReplicaEvent> getPartitionReplicasEventList(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ReplicaEvent>> localVarResp = getPartitionReplicasEventListWithHttpInfo(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Replicas-related events for a Partition.
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ReplicaEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReplicaEvent>> getPartitionReplicasEventListWithHttpInfo(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getPartitionReplicasEventListValidateBeforeCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ReplicaEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Replicas-related events for a Partition. (asynchronously)
     * The response is list of ReplicaEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param partitionId The identity of the partition. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ReplicaEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionReplicasEventListAsync(String apiVersion, UUID partitionId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ReplicaEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionReplicasEventListValidateBeforeCall(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ReplicaEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartitionsEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionsEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Partitions/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartitionsEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPartitionsEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getPartitionsEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getPartitionsEventList(Async)");
        }

        return getPartitionsEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Partitions-related events.
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;PartitionEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PartitionEvent> getPartitionsEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<PartitionEvent>> localVarResp = getPartitionsEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Partitions-related events.
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;PartitionEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PartitionEvent>> getPartitionsEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getPartitionsEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<PartitionEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Partitions-related events. (asynchronously)
     * The response is list of PartitionEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type PartitionEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartitionsEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<PartitionEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartitionsEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<PartitionEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param serviceId The identity of the service. This is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceEventListCall(String apiVersion, String serviceId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Services/{serviceId}/$/Events"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceEventListValidateBeforeCall(String apiVersion, String serviceId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getServiceEventList(Async)");
        }

        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling getServiceEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getServiceEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getServiceEventList(Async)");
        }

        return getServiceEventListCall(apiVersion, serviceId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets a Service-related events.
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param serviceId The identity of the service. This is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ServiceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ServiceEvent> getServiceEventList(String apiVersion, String serviceId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ServiceEvent>> localVarResp = getServiceEventListWithHttpInfo(apiVersion, serviceId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets a Service-related events.
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param serviceId The identity of the service. This is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ServiceEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServiceEvent>> getServiceEventListWithHttpInfo(String apiVersion, String serviceId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getServiceEventListValidateBeforeCall(apiVersion, serviceId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ServiceEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Service-related events. (asynchronously)
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param serviceId The identity of the service. This is typically the full name of the service without the &#39;fabric:&#39; URI scheme. Starting from version 6.0, hierarchical names are delimited with the \&quot;~\&quot; character. For example, if the service name is \&quot;fabric:/myapp/app1/svc1\&quot;, the service identity would be \&quot;myapp~app1~svc1\&quot; in 6.0+ and \&quot;myapp/app1/svc1\&quot; in previous versions. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceEventListAsync(String apiVersion, String serviceId, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ServiceEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceEventListValidateBeforeCall(apiVersion, serviceId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ServiceEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesEventList
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesEventListCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/EventsStore/Services/Events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (startTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTimeUtc", startTimeUtc));
        }

        if (endTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTimeUtc", endTimeUtc));
        }

        if (eventsTypesFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsTypesFilter", eventsTypesFilter));
        }

        if (excludeAnalysisEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExcludeAnalysisEvents", excludeAnalysisEvents));
        }

        if (skipCorrelationLookup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipCorrelationLookup", skipCorrelationLookup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesEventListValidateBeforeCall(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getServicesEventList(Async)");
        }

        // verify the required parameter 'startTimeUtc' is set
        if (startTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'startTimeUtc' when calling getServicesEventList(Async)");
        }

        // verify the required parameter 'endTimeUtc' is set
        if (endTimeUtc == null) {
            throw new ApiException("Missing the required parameter 'endTimeUtc' when calling getServicesEventList(Async)");
        }

        return getServicesEventListCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);

    }

    /**
     * Gets all Services-related events.
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return List&lt;ServiceEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ServiceEvent> getServicesEventList(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        ApiResponse<List<ServiceEvent>> localVarResp = getServicesEventListWithHttpInfo(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        return localVarResp.getData();
    }

    /**
     * Gets all Services-related events.
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @return ApiResponse&lt;List&lt;ServiceEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServiceEvent>> getServicesEventListWithHttpInfo(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup) throws ApiException {
        okhttp3.Call localVarCall = getServicesEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, null);
        Type localVarReturnType = new TypeToken<List<ServiceEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all Services-related events. (asynchronously)
     * The response is list of ServiceEvent objects.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.2-preview&#39;. (required)
     * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ. (required)
     * @param timeout The server timeout for performing the operation in seconds. This timeout specifies the time duration that the client is willing to wait for the requested operation to complete. The default value for this parameter is 60 seconds. (optional, default to 60)
     * @param eventsTypesFilter This is a comma separated string specifying the types of FabricEvents that should only be included in the response. (optional)
     * @param excludeAnalysisEvents This param disables the retrieval of AnalysisEvents if true is passed. (optional)
     * @param skipCorrelationLookup This param disables the search of CorrelatedEvents information if true is passed. otherwise the CorrelationEvents get processed and HasCorrelatedEvents field in every FabricEvent gets populated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of events objects with base type ServiceEvent. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesEventListAsync(String apiVersion, String startTimeUtc, String endTimeUtc, Long timeout, String eventsTypesFilter, Boolean excludeAnalysisEvents, Boolean skipCorrelationLookup, final ApiCallback<List<ServiceEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesEventListValidateBeforeCall(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup, _callback);
        Type localVarReturnType = new TypeToken<List<ServiceEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
