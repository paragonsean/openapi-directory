/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeployedServicePackageHealthStateFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines matching criteria to determine whether a deployed application should be included as a child of an application in the cluster health chunk. The deployed applications are only returned if the parent application matches a filter specified in the cluster health chunk query description. One filter can match zero, one or multiple deployed applications, depending on its properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedApplicationHealthStateFilter {
  public static final String SERIALIZED_NAME_DEPLOYED_SERVICE_PACKAGE_FILTERS = "DeployedServicePackageFilters";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_SERVICE_PACKAGE_FILTERS)
  private List<DeployedServicePackageHealthStateFilter> deployedServicePackageFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_STATE_FILTER = "HealthStateFilter";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE_FILTER)
  private Integer healthStateFilter;

  public static final String SERIALIZED_NAME_NODE_NAME_FILTER = "NodeNameFilter";
  @SerializedName(SERIALIZED_NAME_NODE_NAME_FILTER)
  private String nodeNameFilter;

  public DeployedApplicationHealthStateFilter() {
  }

  public DeployedApplicationHealthStateFilter deployedServicePackageFilters(List<DeployedServicePackageHealthStateFilter> deployedServicePackageFilters) {
    this.deployedServicePackageFilters = deployedServicePackageFilters;
    return this;
  }

  public DeployedApplicationHealthStateFilter addDeployedServicePackageFiltersItem(DeployedServicePackageHealthStateFilter deployedServicePackageFiltersItem) {
    if (this.deployedServicePackageFilters == null) {
      this.deployedServicePackageFilters = new ArrayList<>();
    }
    this.deployedServicePackageFilters.add(deployedServicePackageFiltersItem);
    return this;
  }

  /**
   * Defines a list of filters that specify which deployed service packages to be included in the returned cluster health chunk as children of the parent deployed application. The deployed service packages are returned only if the parent deployed application matches a filter. If the list is empty, no deployed service packages are returned. All the deployed service packages are used to evaluate the parent deployed application aggregated health state, regardless of the input filters. The deployed application filter may specify multiple deployed service package filters. For example, it can specify a filter to return all deployed service packages with health state Error and another filter to always include a deployed service package on a node.
   * @return deployedServicePackageFilters
   */
  @javax.annotation.Nullable
  public List<DeployedServicePackageHealthStateFilter> getDeployedServicePackageFilters() {
    return deployedServicePackageFilters;
  }

  public void setDeployedServicePackageFilters(List<DeployedServicePackageHealthStateFilter> deployedServicePackageFilters) {
    this.deployedServicePackageFilters = deployedServicePackageFilters;
  }


  public DeployedApplicationHealthStateFilter healthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
    return this;
  }

  /**
   * The filter for the health state of the deployed applications. It allows selecting deployed applications if they match the desired health states. The possible values are integer value of one of the following health states. Only deployed applications that match the filter are returned. All deployed applications are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching deployed application is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise &#39;OR&#39; operator. For example, if the provided value is 6, it matches deployed applications with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn&#39;t match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
   * @return healthStateFilter
   */
  @javax.annotation.Nullable
  public Integer getHealthStateFilter() {
    return healthStateFilter;
  }

  public void setHealthStateFilter(Integer healthStateFilter) {
    this.healthStateFilter = healthStateFilter;
  }


  public DeployedApplicationHealthStateFilter nodeNameFilter(String nodeNameFilter) {
    this.nodeNameFilter = nodeNameFilter;
    return this;
  }

  /**
   * The name of the node where the application is deployed in order to match the filter. If specified, the filter is applied only to the application deployed on the specified node. If the application is not deployed on the node with the specified name, no deployed application is returned in the cluster health chunk based on this filter. Otherwise, the deployed application is included in the cluster health chunk if it respects the other filter properties. If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
   * @return nodeNameFilter
   */
  @javax.annotation.Nullable
  public String getNodeNameFilter() {
    return nodeNameFilter;
  }

  public void setNodeNameFilter(String nodeNameFilter) {
    this.nodeNameFilter = nodeNameFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedApplicationHealthStateFilter deployedApplicationHealthStateFilter = (DeployedApplicationHealthStateFilter) o;
    return Objects.equals(this.deployedServicePackageFilters, deployedApplicationHealthStateFilter.deployedServicePackageFilters) &&
        Objects.equals(this.healthStateFilter, deployedApplicationHealthStateFilter.healthStateFilter) &&
        Objects.equals(this.nodeNameFilter, deployedApplicationHealthStateFilter.nodeNameFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployedServicePackageFilters, healthStateFilter, nodeNameFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedApplicationHealthStateFilter {\n");
    sb.append("    deployedServicePackageFilters: ").append(toIndentedString(deployedServicePackageFilters)).append("\n");
    sb.append("    healthStateFilter: ").append(toIndentedString(healthStateFilter)).append("\n");
    sb.append("    nodeNameFilter: ").append(toIndentedString(nodeNameFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeployedServicePackageFilters");
    openapiFields.add("HealthStateFilter");
    openapiFields.add("NodeNameFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedApplicationHealthStateFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedApplicationHealthStateFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedApplicationHealthStateFilter is not found in the empty JSON string", DeployedApplicationHealthStateFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedApplicationHealthStateFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedApplicationHealthStateFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("DeployedServicePackageFilters") != null && !jsonObj.get("DeployedServicePackageFilters").isJsonNull()) {
        JsonArray jsonArraydeployedServicePackageFilters = jsonObj.getAsJsonArray("DeployedServicePackageFilters");
        if (jsonArraydeployedServicePackageFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DeployedServicePackageFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DeployedServicePackageFilters` to be an array in the JSON string but got `%s`", jsonObj.get("DeployedServicePackageFilters").toString()));
          }

          // validate the optional field `DeployedServicePackageFilters` (array)
          for (int i = 0; i < jsonArraydeployedServicePackageFilters.size(); i++) {
            DeployedServicePackageHealthStateFilter.validateJsonElement(jsonArraydeployedServicePackageFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("NodeNameFilter") != null && !jsonObj.get("NodeNameFilter").isJsonNull()) && !jsonObj.get("NodeNameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeNameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeNameFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedApplicationHealthStateFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedApplicationHealthStateFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedApplicationHealthStateFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedApplicationHealthStateFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedApplicationHealthStateFilter>() {
           @Override
           public void write(JsonWriter out, DeployedApplicationHealthStateFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedApplicationHealthStateFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedApplicationHealthStateFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedApplicationHealthStateFilter
   * @throws IOException if the JSON string is invalid with respect to DeployedApplicationHealthStateFilter
   */
  public static DeployedApplicationHealthStateFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedApplicationHealthStateFilter.class);
  }

  /**
   * Convert an instance of DeployedApplicationHealthStateFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

