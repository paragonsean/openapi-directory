/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceTypeHealthPolicy {
  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_PARTITIONS_PER_SERVICE = "MaxPercentUnhealthyPartitionsPerService";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_PARTITIONS_PER_SERVICE)
  private Integer maxPercentUnhealthyPartitionsPerService;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_REPLICAS_PER_PARTITION = "MaxPercentUnhealthyReplicasPerPartition";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_REPLICAS_PER_PARTITION)
  private Integer maxPercentUnhealthyReplicasPerPartition;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_SERVICES = "MaxPercentUnhealthyServices";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_SERVICES)
  private Integer maxPercentUnhealthyServices;

  public ServiceTypeHealthPolicy() {
  }

  public ServiceTypeHealthPolicy maxPercentUnhealthyPartitionsPerService(Integer maxPercentUnhealthyPartitionsPerService) {
    this.maxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
    return this;
  }

  /**
   * The maximum allowed percentage of unhealthy partitions per service. Allowed values are Byte values from zero to 100  The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error. If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service. The computation rounds up to tolerate one failure on small numbers of partitions. Default percentage is zero.
   * @return maxPercentUnhealthyPartitionsPerService
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyPartitionsPerService() {
    return maxPercentUnhealthyPartitionsPerService;
  }

  public void setMaxPercentUnhealthyPartitionsPerService(Integer maxPercentUnhealthyPartitionsPerService) {
    this.maxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
  }


  public ServiceTypeHealthPolicy maxPercentUnhealthyReplicasPerPartition(Integer maxPercentUnhealthyReplicasPerPartition) {
    this.maxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
    return this;
  }

  /**
   * The maximum allowed percentage of unhealthy replicas per partition. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error. If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition. The computation rounds up to tolerate one failure on small numbers of replicas. Default percentage is zero.
   * @return maxPercentUnhealthyReplicasPerPartition
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyReplicasPerPartition() {
    return maxPercentUnhealthyReplicasPerPartition;
  }

  public void setMaxPercentUnhealthyReplicasPerPartition(Integer maxPercentUnhealthyReplicasPerPartition) {
    this.maxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
  }


  public ServiceTypeHealthPolicy maxPercentUnhealthyServices(Integer maxPercentUnhealthyServices) {
    this.maxPercentUnhealthyServices = maxPercentUnhealthyServices;
    return this;
  }

  /**
   * The maximum allowed percentage of unhealthy services. Allowed values are Byte values from zero to 100.  The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error. If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type. The computation rounds up to tolerate one failure on small numbers of services. Default percentage is zero.
   * @return maxPercentUnhealthyServices
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyServices() {
    return maxPercentUnhealthyServices;
  }

  public void setMaxPercentUnhealthyServices(Integer maxPercentUnhealthyServices) {
    this.maxPercentUnhealthyServices = maxPercentUnhealthyServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTypeHealthPolicy serviceTypeHealthPolicy = (ServiceTypeHealthPolicy) o;
    return Objects.equals(this.maxPercentUnhealthyPartitionsPerService, serviceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService) &&
        Objects.equals(this.maxPercentUnhealthyReplicasPerPartition, serviceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition) &&
        Objects.equals(this.maxPercentUnhealthyServices, serviceTypeHealthPolicy.maxPercentUnhealthyServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPercentUnhealthyPartitionsPerService, maxPercentUnhealthyReplicasPerPartition, maxPercentUnhealthyServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTypeHealthPolicy {\n");
    sb.append("    maxPercentUnhealthyPartitionsPerService: ").append(toIndentedString(maxPercentUnhealthyPartitionsPerService)).append("\n");
    sb.append("    maxPercentUnhealthyReplicasPerPartition: ").append(toIndentedString(maxPercentUnhealthyReplicasPerPartition)).append("\n");
    sb.append("    maxPercentUnhealthyServices: ").append(toIndentedString(maxPercentUnhealthyServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxPercentUnhealthyPartitionsPerService");
    openapiFields.add("MaxPercentUnhealthyReplicasPerPartition");
    openapiFields.add("MaxPercentUnhealthyServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceTypeHealthPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceTypeHealthPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTypeHealthPolicy is not found in the empty JSON string", ServiceTypeHealthPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceTypeHealthPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceTypeHealthPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceTypeHealthPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceTypeHealthPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceTypeHealthPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceTypeHealthPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceTypeHealthPolicy>() {
           @Override
           public void write(JsonWriter out, ServiceTypeHealthPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceTypeHealthPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceTypeHealthPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceTypeHealthPolicy
   * @throws IOException if the JSON string is invalid with respect to ServiceTypeHealthPolicy
   */
  public static ServiceTypeHealthPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTypeHealthPolicy.class);
  }

  /**
   * Convert an instance of ServiceTypeHealthPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

