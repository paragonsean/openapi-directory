/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.MonitoringPolicyDescription;
import org.openapitools.client.model.RegistryCredential;
import org.openapitools.client.model.UpgradeKind;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for a compose deployment upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComposeDeploymentUpgradeDescription {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY = "ApplicationHealthPolicy";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY)
  private ApplicationHealthPolicy applicationHealthPolicy;

  public static final String SERIALIZED_NAME_COMPOSE_FILE_CONTENT = "ComposeFileContent";
  @SerializedName(SERIALIZED_NAME_COMPOSE_FILE_CONTENT)
  private String composeFileContent;

  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "DeploymentName";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart = false;

  public static final String SERIALIZED_NAME_MONITORING_POLICY = "MonitoringPolicy";
  @SerializedName(SERIALIZED_NAME_MONITORING_POLICY)
  private MonitoringPolicyDescription monitoringPolicy;

  public static final String SERIALIZED_NAME_REGISTRY_CREDENTIAL = "RegistryCredential";
  @SerializedName(SERIALIZED_NAME_REGISTRY_CREDENTIAL)
  private RegistryCredential registryCredential;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private UpgradeMode rollingUpgradeMode = UpgradeMode.UNMONITORED_AUTO;

  public static final String SERIALIZED_NAME_UPGRADE_KIND = "UpgradeKind";
  @SerializedName(SERIALIZED_NAME_UPGRADE_KIND)
  private UpgradeKind upgradeKind = UpgradeKind.ROLLING;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Long upgradeReplicaSetCheckTimeoutInSeconds;

  public ComposeDeploymentUpgradeDescription() {
  }

  public ComposeDeploymentUpgradeDescription applicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
    return this;
  }

  /**
   * Get applicationHealthPolicy
   * @return applicationHealthPolicy
   */
  @javax.annotation.Nullable
  public ApplicationHealthPolicy getApplicationHealthPolicy() {
    return applicationHealthPolicy;
  }

  public void setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
  }


  public ComposeDeploymentUpgradeDescription composeFileContent(String composeFileContent) {
    this.composeFileContent = composeFileContent;
    return this;
  }

  /**
   * The content of the compose file that describes the deployment to create.
   * @return composeFileContent
   */
  @javax.annotation.Nonnull
  public String getComposeFileContent() {
    return composeFileContent;
  }

  public void setComposeFileContent(String composeFileContent) {
    this.composeFileContent = composeFileContent;
  }


  public ComposeDeploymentUpgradeDescription deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * The name of the deployment.
   * @return deploymentName
   */
  @javax.annotation.Nonnull
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public ComposeDeploymentUpgradeDescription forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public ComposeDeploymentUpgradeDescription monitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
    return this;
  }

  /**
   * Get monitoringPolicy
   * @return monitoringPolicy
   */
  @javax.annotation.Nullable
  public MonitoringPolicyDescription getMonitoringPolicy() {
    return monitoringPolicy;
  }

  public void setMonitoringPolicy(MonitoringPolicyDescription monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
  }


  public ComposeDeploymentUpgradeDescription registryCredential(RegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
    return this;
  }

  /**
   * Get registryCredential
   * @return registryCredential
   */
  @javax.annotation.Nullable
  public RegistryCredential getRegistryCredential() {
    return registryCredential;
  }

  public void setRegistryCredential(RegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
  }


  public ComposeDeploymentUpgradeDescription rollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(UpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ComposeDeploymentUpgradeDescription upgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
    return this;
  }

  /**
   * Get upgradeKind
   * @return upgradeKind
   */
  @javax.annotation.Nonnull
  public UpgradeKind getUpgradeKind() {
    return upgradeKind;
  }

  public void setUpgradeKind(UpgradeKind upgradeKind) {
    this.upgradeKind = upgradeKind;
  }


  public ComposeDeploymentUpgradeDescription upgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Long getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Long upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComposeDeploymentUpgradeDescription composeDeploymentUpgradeDescription = (ComposeDeploymentUpgradeDescription) o;
    return Objects.equals(this.applicationHealthPolicy, composeDeploymentUpgradeDescription.applicationHealthPolicy) &&
        Objects.equals(this.composeFileContent, composeDeploymentUpgradeDescription.composeFileContent) &&
        Objects.equals(this.deploymentName, composeDeploymentUpgradeDescription.deploymentName) &&
        Objects.equals(this.forceRestart, composeDeploymentUpgradeDescription.forceRestart) &&
        Objects.equals(this.monitoringPolicy, composeDeploymentUpgradeDescription.monitoringPolicy) &&
        Objects.equals(this.registryCredential, composeDeploymentUpgradeDescription.registryCredential) &&
        Objects.equals(this.rollingUpgradeMode, composeDeploymentUpgradeDescription.rollingUpgradeMode) &&
        Objects.equals(this.upgradeKind, composeDeploymentUpgradeDescription.upgradeKind) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, composeDeploymentUpgradeDescription.upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicy, composeFileContent, deploymentName, forceRestart, monitoringPolicy, registryCredential, rollingUpgradeMode, upgradeKind, upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComposeDeploymentUpgradeDescription {\n");
    sb.append("    applicationHealthPolicy: ").append(toIndentedString(applicationHealthPolicy)).append("\n");
    sb.append("    composeFileContent: ").append(toIndentedString(composeFileContent)).append("\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    monitoringPolicy: ").append(toIndentedString(monitoringPolicy)).append("\n");
    sb.append("    registryCredential: ").append(toIndentedString(registryCredential)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    upgradeKind: ").append(toIndentedString(upgradeKind)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicy");
    openapiFields.add("ComposeFileContent");
    openapiFields.add("DeploymentName");
    openapiFields.add("ForceRestart");
    openapiFields.add("MonitoringPolicy");
    openapiFields.add("RegistryCredential");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("UpgradeKind");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ComposeFileContent");
    openapiRequiredFields.add("DeploymentName");
    openapiRequiredFields.add("UpgradeKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComposeDeploymentUpgradeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComposeDeploymentUpgradeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComposeDeploymentUpgradeDescription is not found in the empty JSON string", ComposeDeploymentUpgradeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComposeDeploymentUpgradeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComposeDeploymentUpgradeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComposeDeploymentUpgradeDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationHealthPolicy`
      if (jsonObj.get("ApplicationHealthPolicy") != null && !jsonObj.get("ApplicationHealthPolicy").isJsonNull()) {
        ApplicationHealthPolicy.validateJsonElement(jsonObj.get("ApplicationHealthPolicy"));
      }
      if (!jsonObj.get("ComposeFileContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComposeFileContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComposeFileContent").toString()));
      }
      if (!jsonObj.get("DeploymentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeploymentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeploymentName").toString()));
      }
      // validate the optional field `MonitoringPolicy`
      if (jsonObj.get("MonitoringPolicy") != null && !jsonObj.get("MonitoringPolicy").isJsonNull()) {
        MonitoringPolicyDescription.validateJsonElement(jsonObj.get("MonitoringPolicy"));
      }
      // validate the optional field `RegistryCredential`
      if (jsonObj.get("RegistryCredential") != null && !jsonObj.get("RegistryCredential").isJsonNull()) {
        RegistryCredential.validateJsonElement(jsonObj.get("RegistryCredential"));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        UpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      // validate the required field `UpgradeKind`
      UpgradeKind.validateJsonElement(jsonObj.get("UpgradeKind"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComposeDeploymentUpgradeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComposeDeploymentUpgradeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComposeDeploymentUpgradeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComposeDeploymentUpgradeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ComposeDeploymentUpgradeDescription>() {
           @Override
           public void write(JsonWriter out, ComposeDeploymentUpgradeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComposeDeploymentUpgradeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComposeDeploymentUpgradeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComposeDeploymentUpgradeDescription
   * @throws IOException if the JSON string is invalid with respect to ComposeDeploymentUpgradeDescription
   */
  public static ComposeDeploymentUpgradeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComposeDeploymentUpgradeDescription.class);
  }

  /**
   * Convert an instance of ComposeDeploymentUpgradeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

