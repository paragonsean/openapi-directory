/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the base for all Fabric Events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FabricEvent {
  public static final String SERIALIZED_NAME_EVENT_INSTANCE_ID = "EventInstanceId";
  @SerializedName(SERIALIZED_NAME_EVENT_INSTANCE_ID)
  private UUID eventInstanceId;

  public static final String SERIALIZED_NAME_HAS_CORRELATED_EVENTS = "HasCorrelatedEvents";
  @SerializedName(SERIALIZED_NAME_HAS_CORRELATED_EVENTS)
  private Boolean hasCorrelatedEvents;

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  protected FabricEventKind kind;

  public static final String SERIALIZED_NAME_TIME_STAMP = "TimeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public FabricEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public FabricEvent eventInstanceId(UUID eventInstanceId) {
    this.eventInstanceId = eventInstanceId;
    return this;
  }

  /**
   * The identifier for the FabricEvent instance.
   * @return eventInstanceId
   */
  @javax.annotation.Nonnull
  public UUID getEventInstanceId() {
    return eventInstanceId;
  }

  public void setEventInstanceId(UUID eventInstanceId) {
    this.eventInstanceId = eventInstanceId;
  }


  public FabricEvent hasCorrelatedEvents(Boolean hasCorrelatedEvents) {
    this.hasCorrelatedEvents = hasCorrelatedEvents;
    return this;
  }

  /**
   * Shows there is existing related events available.
   * @return hasCorrelatedEvents
   */
  @javax.annotation.Nullable
  public Boolean getHasCorrelatedEvents() {
    return hasCorrelatedEvents;
  }

  public void setHasCorrelatedEvents(Boolean hasCorrelatedEvents) {
    this.hasCorrelatedEvents = hasCorrelatedEvents;
  }


  public FabricEvent kind(FabricEventKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public FabricEventKind getKind() {
    return kind;
  }

  public void setKind(FabricEventKind kind) {
    this.kind = kind;
  }


  public FabricEvent timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * The time event was logged.
   * @return timeStamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FabricEvent fabricEvent = (FabricEvent) o;
    return Objects.equals(this.eventInstanceId, fabricEvent.eventInstanceId) &&
        Objects.equals(this.hasCorrelatedEvents, fabricEvent.hasCorrelatedEvents) &&
        Objects.equals(this.kind, fabricEvent.kind) &&
        Objects.equals(this.timeStamp, fabricEvent.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventInstanceId, hasCorrelatedEvents, kind, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FabricEvent {\n");
    sb.append("    eventInstanceId: ").append(toIndentedString(eventInstanceId)).append("\n");
    sb.append("    hasCorrelatedEvents: ").append(toIndentedString(hasCorrelatedEvents)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FabricEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FabricEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FabricEvent is not found in the empty JSON string", FabricEvent.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "ApplicationCreatedEvent":
          ApplicationCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationDeletedEvent":
          ApplicationDeletedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationEvent":
          ApplicationEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationHealthReportCreatedEvent":
          ApplicationHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationHealthReportExpiredEvent":
          ApplicationHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeCompleteEvent":
          ApplicationUpgradeCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeDomainCompleteEvent":
          ApplicationUpgradeDomainCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeRollbackCompleteEvent":
          ApplicationUpgradeRollbackCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeRollbackStartEvent":
          ApplicationUpgradeRollbackStartEvent.validateJsonElement(jsonElement);
          break;
        case "ApplicationUpgradeStartEvent":
          ApplicationUpgradeStartEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosMovePrimaryFaultScheduledEvent":
          ChaosMovePrimaryFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosMoveSecondaryFaultScheduledEvent":
          ChaosMoveSecondaryFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRemoveReplicaFaultCompletedEvent":
          ChaosRemoveReplicaFaultCompletedEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRemoveReplicaFaultScheduledEvent":
          ChaosRemoveReplicaFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartCodePackageFaultCompletedEvent":
          ChaosRestartCodePackageFaultCompletedEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartCodePackageFaultScheduledEvent":
          ChaosRestartCodePackageFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartNodeFaultCompletedEvent":
          ChaosRestartNodeFaultCompletedEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartNodeFaultScheduledEvent":
          ChaosRestartNodeFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosRestartReplicaFaultScheduledEvent":
          ChaosRestartReplicaFaultScheduledEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosStartedEvent":
          ChaosStartedEvent.validateJsonElement(jsonElement);
          break;
        case "ChaosStoppedEvent":
          ChaosStoppedEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterEvent":
          ClusterEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterHealthReportCreatedEvent":
          ClusterHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterHealthReportExpiredEvent":
          ClusterHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterUpgradeCompleteEvent":
          ClusterUpgradeCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterUpgradeDomainCompleteEvent":
          ClusterUpgradeDomainCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterUpgradeRollbackCompleteEvent":
          ClusterUpgradeRollbackCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterUpgradeRollbackStartEvent":
          ClusterUpgradeRollbackStartEvent.validateJsonElement(jsonElement);
          break;
        case "ClusterUpgradeStartEvent":
          ClusterUpgradeStartEvent.validateJsonElement(jsonElement);
          break;
        case "ContainerDeactivatedEvent":
          ContainerDeactivatedEvent.validateJsonElement(jsonElement);
          break;
        case "ContainerInstanceEvent":
          ContainerInstanceEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationHealthReportCreatedEvent":
          DeployedApplicationHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationHealthReportExpiredEvent":
          DeployedApplicationHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedServiceHealthReportCreatedEvent":
          DeployedServiceHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "DeployedServiceHealthReportExpiredEvent":
          DeployedServiceHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "NodeAbortedEvent":
          NodeAbortedEvent.validateJsonElement(jsonElement);
          break;
        case "NodeAbortingEvent":
          NodeAbortingEvent.validateJsonElement(jsonElement);
          break;
        case "NodeAddedEvent":
          NodeAddedEvent.validateJsonElement(jsonElement);
          break;
        case "NodeCloseEvent":
          NodeCloseEvent.validateJsonElement(jsonElement);
          break;
        case "NodeClosingEvent":
          NodeClosingEvent.validateJsonElement(jsonElement);
          break;
        case "NodeDeactivateCompleteEvent":
          NodeDeactivateCompleteEvent.validateJsonElement(jsonElement);
          break;
        case "NodeDeactivateStartEvent":
          NodeDeactivateStartEvent.validateJsonElement(jsonElement);
          break;
        case "NodeDownEvent":
          NodeDownEvent.validateJsonElement(jsonElement);
          break;
        case "NodeEvent":
          NodeEvent.validateJsonElement(jsonElement);
          break;
        case "NodeHealthReportCreatedEvent":
          NodeHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "NodeHealthReportExpiredEvent":
          NodeHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "NodeOpenFailedEvent":
          NodeOpenFailedEvent.validateJsonElement(jsonElement);
          break;
        case "NodeOpenedSuccessEvent":
          NodeOpenedSuccessEvent.validateJsonElement(jsonElement);
          break;
        case "NodeOpeningEvent":
          NodeOpeningEvent.validateJsonElement(jsonElement);
          break;
        case "NodeRemovedEvent":
          NodeRemovedEvent.validateJsonElement(jsonElement);
          break;
        case "NodeUpEvent":
          NodeUpEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionAnalysisEvent":
          PartitionAnalysisEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionEvent":
          PartitionEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionHealthReportCreatedEvent":
          PartitionHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionHealthReportExpiredEvent":
          PartitionHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionPrimaryMoveAnalysisEvent":
          PartitionPrimaryMoveAnalysisEvent.validateJsonElement(jsonElement);
          break;
        case "PartitionReconfigurationCompletedEvent":
          PartitionReconfigurationCompletedEvent.validateJsonElement(jsonElement);
          break;
        case "ProcessDeactivatedEvent":
          ProcessDeactivatedEvent.validateJsonElement(jsonElement);
          break;
        case "ReplicaEvent":
          ReplicaEvent.validateJsonElement(jsonElement);
          break;
        case "ServiceCreatedEvent":
          ServiceCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ServiceDeletedEvent":
          ServiceDeletedEvent.validateJsonElement(jsonElement);
          break;
        case "ServiceEvent":
          ServiceEvent.validateJsonElement(jsonElement);
          break;
        case "ServiceHealthReportCreatedEvent":
          ServiceHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "ServiceHealthReportExpiredEvent":
          ServiceHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "StatefulReplicaHealthReportCreatedEvent":
          StatefulReplicaHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "StatefulReplicaHealthReportExpiredEvent":
          StatefulReplicaHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        case "StatelessReplicaHealthReportCreatedEvent":
          StatelessReplicaHealthReportCreatedEvent.validateJsonElement(jsonElement);
          break;
        case "StatelessReplicaHealthReportExpiredEvent":
          StatelessReplicaHealthReportExpiredEvent.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of FabricEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FabricEvent
   * @throws IOException if the JSON string is invalid with respect to FabricEvent
   */
  public static FabricEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FabricEvent.class);
  }

  /**
   * Convert an instance of FabricEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

