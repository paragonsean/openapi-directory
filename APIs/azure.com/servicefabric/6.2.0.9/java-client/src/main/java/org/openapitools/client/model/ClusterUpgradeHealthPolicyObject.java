/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeHealthPolicyObject {
  public static final String SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES = "MaxPercentDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentDeltaUnhealthyNodes;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES = "MaxPercentUpgradeDomainDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentUpgradeDomainDeltaUnhealthyNodes;

  public ClusterUpgradeHealthPolicyObject() {
  }

  public ClusterUpgradeHealthPolicyObject maxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
    return this;
  }

  /**
   * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. The default value is 10%.
   * minimum: 0
   * maximum: 100
   * @return maxPercentDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentDeltaUnhealthyNodes() {
    return maxPercentDeltaUnhealthyNodes;
  }

  public void setMaxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
  }


  public ClusterUpgradeHealthPolicyObject maxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
    return this;
  }

  /**
   * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.
   * minimum: 0
   * maximum: 100
   * @return maxPercentUpgradeDomainDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUpgradeDomainDeltaUnhealthyNodes() {
    return maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }

  public void setMaxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeHealthPolicyObject clusterUpgradeHealthPolicyObject = (ClusterUpgradeHealthPolicyObject) o;
    return Objects.equals(this.maxPercentDeltaUnhealthyNodes, clusterUpgradeHealthPolicyObject.maxPercentDeltaUnhealthyNodes) &&
        Objects.equals(this.maxPercentUpgradeDomainDeltaUnhealthyNodes, clusterUpgradeHealthPolicyObject.maxPercentUpgradeDomainDeltaUnhealthyNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPercentDeltaUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeHealthPolicyObject {\n");
    sb.append("    maxPercentDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentDeltaUnhealthyNodes)).append("\n");
    sb.append("    maxPercentUpgradeDomainDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentUpgradeDomainDeltaUnhealthyNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxPercentDeltaUnhealthyNodes");
    openapiFields.add("MaxPercentUpgradeDomainDeltaUnhealthyNodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeHealthPolicyObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeHealthPolicyObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeHealthPolicyObject is not found in the empty JSON string", ClusterUpgradeHealthPolicyObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeHealthPolicyObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeHealthPolicyObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeHealthPolicyObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeHealthPolicyObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeHealthPolicyObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeHealthPolicyObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeHealthPolicyObject>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeHealthPolicyObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeHealthPolicyObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeHealthPolicyObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeHealthPolicyObject
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeHealthPolicyObject
   */
  public static ClusterUpgradeHealthPolicyObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeHealthPolicyObject.class);
  }

  /**
   * Convert an instance of ClusterUpgradeHealthPolicyObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

