/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.BackupEpoch;
import org.openapitools.client.model.BackupState;
import org.openapitools.client.model.FabricErrorError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the progress of a partition&#39;s backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupProgressInfo {
  public static final String SERIALIZED_NAME_BACKUP_ID = "BackupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private UUID backupId;

  public static final String SERIALIZED_NAME_BACKUP_LOCATION = "BackupLocation";
  @SerializedName(SERIALIZED_NAME_BACKUP_LOCATION)
  private String backupLocation;

  public static final String SERIALIZED_NAME_BACKUP_STATE = "BackupState";
  @SerializedName(SERIALIZED_NAME_BACKUP_STATE)
  private BackupState backupState;

  public static final String SERIALIZED_NAME_EPOCH_OF_LAST_BACKUP_RECORD = "EpochOfLastBackupRecord";
  @SerializedName(SERIALIZED_NAME_EPOCH_OF_LAST_BACKUP_RECORD)
  private BackupEpoch epochOfLastBackupRecord;

  public static final String SERIALIZED_NAME_FAILURE_ERROR = "FailureError";
  @SerializedName(SERIALIZED_NAME_FAILURE_ERROR)
  private FabricErrorError failureError;

  public static final String SERIALIZED_NAME_LSN_OF_LAST_BACKUP_RECORD = "LsnOfLastBackupRecord";
  @SerializedName(SERIALIZED_NAME_LSN_OF_LAST_BACKUP_RECORD)
  private String lsnOfLastBackupRecord;

  public static final String SERIALIZED_NAME_TIME_STAMP_UTC = "TimeStampUtc";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP_UTC)
  private OffsetDateTime timeStampUtc;

  public BackupProgressInfo() {
  }

  public BackupProgressInfo backupId(UUID backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * Unique ID of the newly created backup.
   * @return backupId
   */
  @javax.annotation.Nullable
  public UUID getBackupId() {
    return backupId;
  }

  public void setBackupId(UUID backupId) {
    this.backupId = backupId;
  }


  public BackupProgressInfo backupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
    return this;
  }

  /**
   * Location, relative to the backup store, of the newly created backup.
   * @return backupLocation
   */
  @javax.annotation.Nullable
  public String getBackupLocation() {
    return backupLocation;
  }

  public void setBackupLocation(String backupLocation) {
    this.backupLocation = backupLocation;
  }


  public BackupProgressInfo backupState(BackupState backupState) {
    this.backupState = backupState;
    return this;
  }

  /**
   * Get backupState
   * @return backupState
   */
  @javax.annotation.Nullable
  public BackupState getBackupState() {
    return backupState;
  }

  public void setBackupState(BackupState backupState) {
    this.backupState = backupState;
  }


  public BackupProgressInfo epochOfLastBackupRecord(BackupEpoch epochOfLastBackupRecord) {
    this.epochOfLastBackupRecord = epochOfLastBackupRecord;
    return this;
  }

  /**
   * Get epochOfLastBackupRecord
   * @return epochOfLastBackupRecord
   */
  @javax.annotation.Nullable
  public BackupEpoch getEpochOfLastBackupRecord() {
    return epochOfLastBackupRecord;
  }

  public void setEpochOfLastBackupRecord(BackupEpoch epochOfLastBackupRecord) {
    this.epochOfLastBackupRecord = epochOfLastBackupRecord;
  }


  public BackupProgressInfo failureError(FabricErrorError failureError) {
    this.failureError = failureError;
    return this;
  }

  /**
   * Get failureError
   * @return failureError
   */
  @javax.annotation.Nullable
  public FabricErrorError getFailureError() {
    return failureError;
  }

  public void setFailureError(FabricErrorError failureError) {
    this.failureError = failureError;
  }


  public BackupProgressInfo lsnOfLastBackupRecord(String lsnOfLastBackupRecord) {
    this.lsnOfLastBackupRecord = lsnOfLastBackupRecord;
    return this;
  }

  /**
   * The LSN of last record included in backup.
   * @return lsnOfLastBackupRecord
   */
  @javax.annotation.Nullable
  public String getLsnOfLastBackupRecord() {
    return lsnOfLastBackupRecord;
  }

  public void setLsnOfLastBackupRecord(String lsnOfLastBackupRecord) {
    this.lsnOfLastBackupRecord = lsnOfLastBackupRecord;
  }


  public BackupProgressInfo timeStampUtc(OffsetDateTime timeStampUtc) {
    this.timeStampUtc = timeStampUtc;
    return this;
  }

  /**
   * TimeStamp in UTC when operation succeeded or failed.
   * @return timeStampUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStampUtc() {
    return timeStampUtc;
  }

  public void setTimeStampUtc(OffsetDateTime timeStampUtc) {
    this.timeStampUtc = timeStampUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupProgressInfo backupProgressInfo = (BackupProgressInfo) o;
    return Objects.equals(this.backupId, backupProgressInfo.backupId) &&
        Objects.equals(this.backupLocation, backupProgressInfo.backupLocation) &&
        Objects.equals(this.backupState, backupProgressInfo.backupState) &&
        Objects.equals(this.epochOfLastBackupRecord, backupProgressInfo.epochOfLastBackupRecord) &&
        Objects.equals(this.failureError, backupProgressInfo.failureError) &&
        Objects.equals(this.lsnOfLastBackupRecord, backupProgressInfo.lsnOfLastBackupRecord) &&
        Objects.equals(this.timeStampUtc, backupProgressInfo.timeStampUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupId, backupLocation, backupState, epochOfLastBackupRecord, failureError, lsnOfLastBackupRecord, timeStampUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupProgressInfo {\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    backupLocation: ").append(toIndentedString(backupLocation)).append("\n");
    sb.append("    backupState: ").append(toIndentedString(backupState)).append("\n");
    sb.append("    epochOfLastBackupRecord: ").append(toIndentedString(epochOfLastBackupRecord)).append("\n");
    sb.append("    failureError: ").append(toIndentedString(failureError)).append("\n");
    sb.append("    lsnOfLastBackupRecord: ").append(toIndentedString(lsnOfLastBackupRecord)).append("\n");
    sb.append("    timeStampUtc: ").append(toIndentedString(timeStampUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackupId");
    openapiFields.add("BackupLocation");
    openapiFields.add("BackupState");
    openapiFields.add("EpochOfLastBackupRecord");
    openapiFields.add("FailureError");
    openapiFields.add("LsnOfLastBackupRecord");
    openapiFields.add("TimeStampUtc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupProgressInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupProgressInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupProgressInfo is not found in the empty JSON string", BackupProgressInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupProgressInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupProgressInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BackupId") != null && !jsonObj.get("BackupId").isJsonNull()) && !jsonObj.get("BackupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackupId").toString()));
      }
      if ((jsonObj.get("BackupLocation") != null && !jsonObj.get("BackupLocation").isJsonNull()) && !jsonObj.get("BackupLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackupLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackupLocation").toString()));
      }
      // validate the optional field `BackupState`
      if (jsonObj.get("BackupState") != null && !jsonObj.get("BackupState").isJsonNull()) {
        BackupState.validateJsonElement(jsonObj.get("BackupState"));
      }
      // validate the optional field `EpochOfLastBackupRecord`
      if (jsonObj.get("EpochOfLastBackupRecord") != null && !jsonObj.get("EpochOfLastBackupRecord").isJsonNull()) {
        BackupEpoch.validateJsonElement(jsonObj.get("EpochOfLastBackupRecord"));
      }
      // validate the optional field `FailureError`
      if (jsonObj.get("FailureError") != null && !jsonObj.get("FailureError").isJsonNull()) {
        FabricErrorError.validateJsonElement(jsonObj.get("FailureError"));
      }
      if ((jsonObj.get("LsnOfLastBackupRecord") != null && !jsonObj.get("LsnOfLastBackupRecord").isJsonNull()) && !jsonObj.get("LsnOfLastBackupRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LsnOfLastBackupRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LsnOfLastBackupRecord").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupProgressInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupProgressInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupProgressInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupProgressInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupProgressInfo>() {
           @Override
           public void write(JsonWriter out, BackupProgressInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupProgressInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupProgressInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupProgressInfo
   * @throws IOException if the JSON string is invalid with respect to BackupProgressInfo
   */
  public static BackupProgressInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupProgressInfo.class);
  }

  /**
   * Convert an instance of BackupProgressInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

