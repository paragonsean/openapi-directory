/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;
import org.openapitools.client.model.ServiceEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service Deleted event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceDeletedEvent extends ServiceEvent {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE_NAME = "ApplicationTypeName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE_NAME)
  private String applicationTypeName;

  public static final String SERIALIZED_NAME_IS_STATEFUL = "IsStateful";
  @SerializedName(SERIALIZED_NAME_IS_STATEFUL)
  private Boolean isStateful;

  public static final String SERIALIZED_NAME_MIN_REPLICA_SET_SIZE = "MinReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_MIN_REPLICA_SET_SIZE)
  private Integer minReplicaSetSize;

  public static final String SERIALIZED_NAME_PARTITION_COUNT = "PartitionCount";
  @SerializedName(SERIALIZED_NAME_PARTITION_COUNT)
  private Integer partitionCount;

  public static final String SERIALIZED_NAME_SERVICE_INSTANCE = "ServiceInstance";
  @SerializedName(SERIALIZED_NAME_SERVICE_INSTANCE)
  private Long serviceInstance;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_VERSION = "ServicePackageVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_VERSION)
  private String servicePackageVersion;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public static final String SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE = "TargetReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE)
  private Integer targetReplicaSetSize;

  public ServiceDeletedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ServiceDeletedEvent applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Application name.
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ServiceDeletedEvent applicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
    return this;
  }

  /**
   * Application type name.
   * @return applicationTypeName
   */
  @javax.annotation.Nonnull
  public String getApplicationTypeName() {
    return applicationTypeName;
  }

  public void setApplicationTypeName(String applicationTypeName) {
    this.applicationTypeName = applicationTypeName;
  }


  public ServiceDeletedEvent isStateful(Boolean isStateful) {
    this.isStateful = isStateful;
    return this;
  }

  /**
   * Indicates if Service is stateful.
   * @return isStateful
   */
  @javax.annotation.Nonnull
  public Boolean getIsStateful() {
    return isStateful;
  }

  public void setIsStateful(Boolean isStateful) {
    this.isStateful = isStateful;
  }


  public ServiceDeletedEvent minReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
    return this;
  }

  /**
   * Minimum size of replicas set.
   * @return minReplicaSetSize
   */
  @javax.annotation.Nonnull
  public Integer getMinReplicaSetSize() {
    return minReplicaSetSize;
  }

  public void setMinReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
  }


  public ServiceDeletedEvent partitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * Number of partitions.
   * @return partitionCount
   */
  @javax.annotation.Nonnull
  public Integer getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
  }


  public ServiceDeletedEvent serviceInstance(Long serviceInstance) {
    this.serviceInstance = serviceInstance;
    return this;
  }

  /**
   * Id of Service instance.
   * @return serviceInstance
   */
  @javax.annotation.Nonnull
  public Long getServiceInstance() {
    return serviceInstance;
  }

  public void setServiceInstance(Long serviceInstance) {
    this.serviceInstance = serviceInstance;
  }


  public ServiceDeletedEvent servicePackageVersion(String servicePackageVersion) {
    this.servicePackageVersion = servicePackageVersion;
    return this;
  }

  /**
   * Version of Service package.
   * @return servicePackageVersion
   */
  @javax.annotation.Nonnull
  public String getServicePackageVersion() {
    return servicePackageVersion;
  }

  public void setServicePackageVersion(String servicePackageVersion) {
    this.servicePackageVersion = servicePackageVersion;
  }


  public ServiceDeletedEvent serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Service type name.
   * @return serviceTypeName
   */
  @javax.annotation.Nonnull
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }


  public ServiceDeletedEvent targetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
    return this;
  }

  /**
   * Size of target replicas set.
   * @return targetReplicaSetSize
   */
  @javax.annotation.Nonnull
  public Integer getTargetReplicaSetSize() {
    return targetReplicaSetSize;
  }

  public void setTargetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDeletedEvent serviceDeletedEvent = (ServiceDeletedEvent) o;
    return Objects.equals(this.applicationName, serviceDeletedEvent.applicationName) &&
        Objects.equals(this.applicationTypeName, serviceDeletedEvent.applicationTypeName) &&
        Objects.equals(this.isStateful, serviceDeletedEvent.isStateful) &&
        Objects.equals(this.minReplicaSetSize, serviceDeletedEvent.minReplicaSetSize) &&
        Objects.equals(this.partitionCount, serviceDeletedEvent.partitionCount) &&
        Objects.equals(this.serviceInstance, serviceDeletedEvent.serviceInstance) &&
        Objects.equals(this.servicePackageVersion, serviceDeletedEvent.servicePackageVersion) &&
        Objects.equals(this.serviceTypeName, serviceDeletedEvent.serviceTypeName) &&
        Objects.equals(this.targetReplicaSetSize, serviceDeletedEvent.targetReplicaSetSize) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, applicationTypeName, isStateful, minReplicaSetSize, partitionCount, serviceInstance, servicePackageVersion, serviceTypeName, targetReplicaSetSize, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDeletedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationTypeName: ").append(toIndentedString(applicationTypeName)).append("\n");
    sb.append("    isStateful: ").append(toIndentedString(isStateful)).append("\n");
    sb.append("    minReplicaSetSize: ").append(toIndentedString(minReplicaSetSize)).append("\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    serviceInstance: ").append(toIndentedString(serviceInstance)).append("\n");
    sb.append("    servicePackageVersion: ").append(toIndentedString(servicePackageVersion)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("    targetReplicaSetSize: ").append(toIndentedString(targetReplicaSetSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("ServiceId");
    openapiFields.add("ApplicationName");
    openapiFields.add("ApplicationTypeName");
    openapiFields.add("IsStateful");
    openapiFields.add("MinReplicaSetSize");
    openapiFields.add("PartitionCount");
    openapiFields.add("ServiceInstance");
    openapiFields.add("ServicePackageVersion");
    openapiFields.add("ServiceTypeName");
    openapiFields.add("TargetReplicaSetSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("ApplicationTypeName");
    openapiRequiredFields.add("IsStateful");
    openapiRequiredFields.add("MinReplicaSetSize");
    openapiRequiredFields.add("PartitionCount");
    openapiRequiredFields.add("ServiceInstance");
    openapiRequiredFields.add("ServicePackageVersion");
    openapiRequiredFields.add("ServiceTypeName");
    openapiRequiredFields.add("TargetReplicaSetSize");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
    openapiRequiredFields.add("ServiceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceDeletedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceDeletedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceDeletedEvent is not found in the empty JSON string", ServiceDeletedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceDeletedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceDeletedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceDeletedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceDeletedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceDeletedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceDeletedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceDeletedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceDeletedEvent>() {
           @Override
           public void write(JsonWriter out, ServiceDeletedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceDeletedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceDeletedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceDeletedEvent
   * @throws IOException if the JSON string is invalid with respect to ServiceDeletedEvent
   */
  public static ServiceDeletedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceDeletedEvent.class);
  }

  /**
   * Convert an instance of ServiceDeletedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

