/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;
import org.openapitools.client.model.NodeEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node Health Report Created event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeHealthReportCreatedEvent extends NodeEvent {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private String healthState;

  public static final String SERIALIZED_NAME_NODE_INSTANCE_ID = "NodeInstanceId";
  @SerializedName(SERIALIZED_NAME_NODE_INSTANCE_ID)
  private Long nodeInstanceId;

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_REMOVE_WHEN_EXPIRED = "RemoveWhenExpired";
  @SerializedName(SERIALIZED_NAME_REMOVE_WHEN_EXPIRED)
  private Boolean removeWhenExpired;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Long sequenceNumber;

  public static final String SERIALIZED_NAME_SOURCE_ID = "SourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP = "SourceUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP)
  private OffsetDateTime sourceUtcTimestamp;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE_MS = "TimeToLiveMs";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE_MS)
  private Long timeToLiveMs;

  public NodeHealthReportCreatedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public NodeHealthReportCreatedEvent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of report.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NodeHealthReportCreatedEvent healthState(String healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Describes the property health state.
   * @return healthState
   */
  @javax.annotation.Nonnull
  public String getHealthState() {
    return healthState;
  }

  public void setHealthState(String healthState) {
    this.healthState = healthState;
  }


  public NodeHealthReportCreatedEvent nodeInstanceId(Long nodeInstanceId) {
    this.nodeInstanceId = nodeInstanceId;
    return this;
  }

  /**
   * Id of Node instance.
   * @return nodeInstanceId
   */
  @javax.annotation.Nonnull
  public Long getNodeInstanceId() {
    return nodeInstanceId;
  }

  public void setNodeInstanceId(Long nodeInstanceId) {
    this.nodeInstanceId = nodeInstanceId;
  }


  public NodeHealthReportCreatedEvent property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Describes the property.
   * @return property
   */
  @javax.annotation.Nonnull
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public NodeHealthReportCreatedEvent removeWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
    return this;
  }

  /**
   * Indicates the removal when it expires.
   * @return removeWhenExpired
   */
  @javax.annotation.Nonnull
  public Boolean getRemoveWhenExpired() {
    return removeWhenExpired;
  }

  public void setRemoveWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
  }


  public NodeHealthReportCreatedEvent sequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Sequence number of report.
   * @return sequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public NodeHealthReportCreatedEvent sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Id of report source.
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public NodeHealthReportCreatedEvent sourceUtcTimestamp(OffsetDateTime sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
    return this;
  }

  /**
   * Source time.
   * @return sourceUtcTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSourceUtcTimestamp() {
    return sourceUtcTimestamp;
  }

  public void setSourceUtcTimestamp(OffsetDateTime sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
  }


  public NodeHealthReportCreatedEvent timeToLiveMs(Long timeToLiveMs) {
    this.timeToLiveMs = timeToLiveMs;
    return this;
  }

  /**
   * Time to live in milli-seconds.
   * @return timeToLiveMs
   */
  @javax.annotation.Nonnull
  public Long getTimeToLiveMs() {
    return timeToLiveMs;
  }

  public void setTimeToLiveMs(Long timeToLiveMs) {
    this.timeToLiveMs = timeToLiveMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeHealthReportCreatedEvent nodeHealthReportCreatedEvent = (NodeHealthReportCreatedEvent) o;
    return Objects.equals(this.description, nodeHealthReportCreatedEvent.description) &&
        Objects.equals(this.healthState, nodeHealthReportCreatedEvent.healthState) &&
        Objects.equals(this.nodeInstanceId, nodeHealthReportCreatedEvent.nodeInstanceId) &&
        Objects.equals(this.property, nodeHealthReportCreatedEvent.property) &&
        Objects.equals(this.removeWhenExpired, nodeHealthReportCreatedEvent.removeWhenExpired) &&
        Objects.equals(this.sequenceNumber, nodeHealthReportCreatedEvent.sequenceNumber) &&
        Objects.equals(this.sourceId, nodeHealthReportCreatedEvent.sourceId) &&
        Objects.equals(this.sourceUtcTimestamp, nodeHealthReportCreatedEvent.sourceUtcTimestamp) &&
        Objects.equals(this.timeToLiveMs, nodeHealthReportCreatedEvent.timeToLiveMs) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, healthState, nodeInstanceId, property, removeWhenExpired, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeHealthReportCreatedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    nodeInstanceId: ").append(toIndentedString(nodeInstanceId)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    removeWhenExpired: ").append(toIndentedString(removeWhenExpired)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUtcTimestamp: ").append(toIndentedString(sourceUtcTimestamp)).append("\n");
    sb.append("    timeToLiveMs: ").append(toIndentedString(timeToLiveMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("NodeName");
    openapiFields.add("Description");
    openapiFields.add("HealthState");
    openapiFields.add("NodeInstanceId");
    openapiFields.add("Property");
    openapiFields.add("RemoveWhenExpired");
    openapiFields.add("SequenceNumber");
    openapiFields.add("SourceId");
    openapiFields.add("SourceUtcTimestamp");
    openapiFields.add("TimeToLiveMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("HealthState");
    openapiRequiredFields.add("NodeInstanceId");
    openapiRequiredFields.add("Property");
    openapiRequiredFields.add("RemoveWhenExpired");
    openapiRequiredFields.add("SequenceNumber");
    openapiRequiredFields.add("SourceId");
    openapiRequiredFields.add("SourceUtcTimestamp");
    openapiRequiredFields.add("TimeToLiveMs");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
    openapiRequiredFields.add("NodeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeHealthReportCreatedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeHealthReportCreatedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeHealthReportCreatedEvent is not found in the empty JSON string", NodeHealthReportCreatedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeHealthReportCreatedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeHealthReportCreatedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeHealthReportCreatedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeHealthReportCreatedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeHealthReportCreatedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeHealthReportCreatedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeHealthReportCreatedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeHealthReportCreatedEvent>() {
           @Override
           public void write(JsonWriter out, NodeHealthReportCreatedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeHealthReportCreatedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeHealthReportCreatedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeHealthReportCreatedEvent
   * @throws IOException if the JSON string is invalid with respect to NodeHealthReportCreatedEvent
   */
  public static NodeHealthReportCreatedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeHealthReportCreatedEvent.class);
  }

  /**
   * Convert an instance of NodeHealthReportCreatedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

