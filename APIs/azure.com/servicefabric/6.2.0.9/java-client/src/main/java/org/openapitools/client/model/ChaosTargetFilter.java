/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines all filters for targeted Chaos faults, for example, faulting only certain node types or faulting only certain applications. If ChaosTargetFilter is not used, Chaos faults all cluster entities. If ChaosTargetFilter is used, Chaos faults only the entities that meet the ChaosTargetFilter specification. NodeTypeInclusionList and ApplicationInclusionList allow a union semantics only. It is not possible to specify an intersection of NodeTypeInclusionList and ApplicationInclusionList. For example, it is not possible to specify \&quot;fault this application only when it is on that node type.\&quot; Once an entity is included in either NodeTypeInclusionList or ApplicationInclusionList, that entity cannot be excluded using ChaosTargetFilter. Even if applicationX does not appear in ApplicationInclusionList, in some Chaos iteration applicationX can be faulted because it happens to be on a node of nodeTypeY that is included in NodeTypeInclusionList. If both NodeTypeInclusionList and ApplicationInclusionList are null or empty, an ArgumentException is thrown.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:01.944731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosTargetFilter {
  public static final String SERIALIZED_NAME_APPLICATION_INCLUSION_LIST = "ApplicationInclusionList";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INCLUSION_LIST)
  private List<String> applicationInclusionList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_TYPE_INCLUSION_LIST = "NodeTypeInclusionList";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE_INCLUSION_LIST)
  private List<String> nodeTypeInclusionList = new ArrayList<>();

  public ChaosTargetFilter() {
  }

  public ChaosTargetFilter applicationInclusionList(List<String> applicationInclusionList) {
    this.applicationInclusionList = applicationInclusionList;
    return this;
  }

  public ChaosTargetFilter addApplicationInclusionListItem(String applicationInclusionListItem) {
    if (this.applicationInclusionList == null) {
      this.applicationInclusionList = new ArrayList<>();
    }
    this.applicationInclusionList.add(applicationInclusionListItem);
    return this;
  }

  /**
   * A list of application URIs to include in Chaos faults. All replicas belonging to services of these applications are amenable to replica faults (restart replica, remove replica, move primary, and move secondary) by Chaos. Chaos may restart a code package only if the code package hosts replicas of these applications only. If an application does not appear in this list, it can still be faulted in some Chaos iteration if the application ends up on a node of a node type that is included in NodeTypeInclusionList. However, if applicationX is tied to nodeTypeY through placement constraints and applicationX is absent from ApplicationInclusionList and nodeTypeY is absent from NodeTypeInclusionList, then applicationX will never be faulted. At most 1000 application names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfApplicationsInChaosEntityFilter configuration.
   * @return applicationInclusionList
   */
  @javax.annotation.Nullable
  public List<String> getApplicationInclusionList() {
    return applicationInclusionList;
  }

  public void setApplicationInclusionList(List<String> applicationInclusionList) {
    this.applicationInclusionList = applicationInclusionList;
  }


  public ChaosTargetFilter nodeTypeInclusionList(List<String> nodeTypeInclusionList) {
    this.nodeTypeInclusionList = nodeTypeInclusionList;
    return this;
  }

  public ChaosTargetFilter addNodeTypeInclusionListItem(String nodeTypeInclusionListItem) {
    if (this.nodeTypeInclusionList == null) {
      this.nodeTypeInclusionList = new ArrayList<>();
    }
    this.nodeTypeInclusionList.add(nodeTypeInclusionListItem);
    return this;
  }

  /**
   * A list of node types to include in Chaos faults. All types of faults (restart node, restart code package, remove replica, restart replica, move primary, and move secondary) are enabled for the nodes of these node types. If a node type (say NodeTypeX) does not appear in the NodeTypeInclusionList, then node level faults (like NodeRestart) will never be enabled for the nodes of NodeTypeX, but code package and replica faults can still be enabled for NodeTypeX if an application in the ApplicationInclusionList. happens to reside on a node of NodeTypeX. At most 100 node type names can be included in this list, to increase this number, a config upgrade is required for MaxNumberOfNodeTypesInChaosEntityFilter configuration.
   * @return nodeTypeInclusionList
   */
  @javax.annotation.Nullable
  public List<String> getNodeTypeInclusionList() {
    return nodeTypeInclusionList;
  }

  public void setNodeTypeInclusionList(List<String> nodeTypeInclusionList) {
    this.nodeTypeInclusionList = nodeTypeInclusionList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosTargetFilter chaosTargetFilter = (ChaosTargetFilter) o;
    return Objects.equals(this.applicationInclusionList, chaosTargetFilter.applicationInclusionList) &&
        Objects.equals(this.nodeTypeInclusionList, chaosTargetFilter.nodeTypeInclusionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationInclusionList, nodeTypeInclusionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosTargetFilter {\n");
    sb.append("    applicationInclusionList: ").append(toIndentedString(applicationInclusionList)).append("\n");
    sb.append("    nodeTypeInclusionList: ").append(toIndentedString(nodeTypeInclusionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationInclusionList");
    openapiFields.add("NodeTypeInclusionList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosTargetFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosTargetFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosTargetFilter is not found in the empty JSON string", ChaosTargetFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosTargetFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosTargetFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ApplicationInclusionList") != null && !jsonObj.get("ApplicationInclusionList").isJsonNull() && !jsonObj.get("ApplicationInclusionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationInclusionList` to be an array in the JSON string but got `%s`", jsonObj.get("ApplicationInclusionList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NodeTypeInclusionList") != null && !jsonObj.get("NodeTypeInclusionList").isJsonNull() && !jsonObj.get("NodeTypeInclusionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeTypeInclusionList` to be an array in the JSON string but got `%s`", jsonObj.get("NodeTypeInclusionList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosTargetFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosTargetFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosTargetFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosTargetFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosTargetFilter>() {
           @Override
           public void write(JsonWriter out, ChaosTargetFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosTargetFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosTargetFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosTargetFilter
   * @throws IOException if the JSON string is invalid with respect to ChaosTargetFilter
   */
  public static ChaosTargetFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosTargetFilter.class);
  }

  /**
   * Convert an instance of ChaosTargetFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

