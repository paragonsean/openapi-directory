/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The kind of application type registration or provision requested. The application package can be registered or provisioned either from the image store or from an external store. Following are the kinds of the application type provision.
 */
@JsonAdapter(ProvisionApplicationTypeKind.Adapter.class)
public enum ProvisionApplicationTypeKind {
  
  INVALID("Invalid"),
  
  IMAGE_STORE_PATH("ImageStorePath"),
  
  EXTERNAL_STORE("ExternalStore");

  private String value;

  ProvisionApplicationTypeKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ProvisionApplicationTypeKind fromValue(String value) {
    for (ProvisionApplicationTypeKind b : ProvisionApplicationTypeKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ProvisionApplicationTypeKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final ProvisionApplicationTypeKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ProvisionApplicationTypeKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ProvisionApplicationTypeKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ProvisionApplicationTypeKind.fromValue(value);
  }
}

