/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyValueKind from './PropertyValueKind';

/**
 * The PropertyMetadata model module.
 * @module model/PropertyMetadata
 * @version 6.2.0.9
 */
class PropertyMetadata {
    /**
     * Constructs a new <code>PropertyMetadata</code>.
     * The metadata associated with a property, including the property&#39;s name.
     * @alias module:model/PropertyMetadata
     */
    constructor() { 
        
        PropertyMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyMetadata} obj Optional instance to populate.
     * @return {module:model/PropertyMetadata} The populated <code>PropertyMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyMetadata();

            if (data.hasOwnProperty('CustomTypeId')) {
                obj['CustomTypeId'] = ApiClient.convertToType(data['CustomTypeId'], 'String');
            }
            if (data.hasOwnProperty('LastModifiedUtcTimestamp')) {
                obj['LastModifiedUtcTimestamp'] = ApiClient.convertToType(data['LastModifiedUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('Parent')) {
                obj['Parent'] = ApiClient.convertToType(data['Parent'], 'String');
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('SizeInBytes')) {
                obj['SizeInBytes'] = ApiClient.convertToType(data['SizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('TypeId')) {
                obj['TypeId'] = PropertyValueKind.constructFromObject(data['TypeId']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CustomTypeId'] && !(typeof data['CustomTypeId'] === 'string' || data['CustomTypeId'] instanceof String)) {
            throw new Error("Expected the field `CustomTypeId` to be a primitive type in the JSON string but got " + data['CustomTypeId']);
        }
        // ensure the json data is a string
        if (data['Parent'] && !(typeof data['Parent'] === 'string' || data['Parent'] instanceof String)) {
            throw new Error("Expected the field `Parent` to be a primitive type in the JSON string but got " + data['Parent']);
        }
        // ensure the json data is a string
        if (data['SequenceNumber'] && !(typeof data['SequenceNumber'] === 'string' || data['SequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got " + data['SequenceNumber']);
        }

        return true;
    }


}



/**
 * The property's custom type id. Using this property, the user is able to tag the type of the value of the property.
 * @member {String} CustomTypeId
 */
PropertyMetadata.prototype['CustomTypeId'] = undefined;

/**
 * Represents when the Property was last modified. Only write operations will cause this field to be updated.
 * @member {Date} LastModifiedUtcTimestamp
 */
PropertyMetadata.prototype['LastModifiedUtcTimestamp'] = undefined;

/**
 * The Service Fabric name, including the 'fabric:' URI scheme.
 * @member {String} Parent
 */
PropertyMetadata.prototype['Parent'] = undefined;

/**
 * The version of the property. Every time a property is modified, its sequence number is increased.
 * @member {String} SequenceNumber
 */
PropertyMetadata.prototype['SequenceNumber'] = undefined;

/**
 * The length of the serialized property value.
 * @member {Number} SizeInBytes
 */
PropertyMetadata.prototype['SizeInBytes'] = undefined;

/**
 * @member {module:model/PropertyValueKind} TypeId
 */
PropertyMetadata.prototype['TypeId'] = undefined;






export default PropertyMetadata;

