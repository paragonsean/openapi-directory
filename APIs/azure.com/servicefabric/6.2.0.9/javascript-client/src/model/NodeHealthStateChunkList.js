/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityHealthStateChunkList from './EntityHealthStateChunkList';
import NodeHealthStateChunk from './NodeHealthStateChunk';

/**
 * The NodeHealthStateChunkList model module.
 * @module model/NodeHealthStateChunkList
 * @version 6.2.0.9
 */
class NodeHealthStateChunkList {
    /**
     * Constructs a new <code>NodeHealthStateChunkList</code>.
     * The list of node health state chunks in the cluster that respect the input filters in the chunk query. Returned by get cluster health state chunks query.
     * @alias module:model/NodeHealthStateChunkList
     * @implements module:model/EntityHealthStateChunkList
     */
    constructor() { 
        EntityHealthStateChunkList.initialize(this);
        NodeHealthStateChunkList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeHealthStateChunkList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeHealthStateChunkList} obj Optional instance to populate.
     * @return {module:model/NodeHealthStateChunkList} The populated <code>NodeHealthStateChunkList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeHealthStateChunkList();
            EntityHealthStateChunkList.constructFromObject(data, obj);

            if (data.hasOwnProperty('TotalCount')) {
                obj['TotalCount'] = ApiClient.convertToType(data['TotalCount'], 'Number');
            }
            if (data.hasOwnProperty('Items')) {
                obj['Items'] = ApiClient.convertToType(data['Items'], [NodeHealthStateChunk]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeHealthStateChunkList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeHealthStateChunkList</code>.
     */
    static validateJSON(data) {
        if (data['Items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Items'])) {
                throw new Error("Expected the field `Items` to be an array in the JSON data but got " + data['Items']);
            }
            // validate the optional field `Items` (array)
            for (const item of data['Items']) {
                NodeHealthStateChunk.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Total number of entity health state objects that match the specified filters from the cluster health chunk query description.
 * @member {Number} TotalCount
 */
NodeHealthStateChunkList.prototype['TotalCount'] = undefined;

/**
 * The list of node health state chunks that respect the input filters in the chunk query.
 * @member {Array.<module:model/NodeHealthStateChunk>} Items
 */
NodeHealthStateChunkList.prototype['Items'] = undefined;


// Implement EntityHealthStateChunkList interface:
/**
 * Total number of entity health state objects that match the specified filters from the cluster health chunk query description.
 * @member {Number} TotalCount
 */
EntityHealthStateChunkList.prototype['TotalCount'] = undefined;




export default NodeHealthStateChunkList;

