/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeployedApplicationStatus from './DeployedApplicationStatus';
import HealthState from './HealthState';

/**
 * The DeployedApplicationInfo model module.
 * @module model/DeployedApplicationInfo
 * @version 6.2.0.9
 */
class DeployedApplicationInfo {
    /**
     * Constructs a new <code>DeployedApplicationInfo</code>.
     * Information about application deployed on the node.
     * @alias module:model/DeployedApplicationInfo
     */
    constructor() { 
        
        DeployedApplicationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedApplicationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedApplicationInfo} obj Optional instance to populate.
     * @return {module:model/DeployedApplicationInfo} The populated <code>DeployedApplicationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedApplicationInfo();

            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LogDirectory')) {
                obj['LogDirectory'] = ApiClient.convertToType(data['LogDirectory'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = DeployedApplicationStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('TempDirectory')) {
                obj['TempDirectory'] = ApiClient.convertToType(data['TempDirectory'], 'String');
            }
            if (data.hasOwnProperty('TypeName')) {
                obj['TypeName'] = ApiClient.convertToType(data['TypeName'], 'String');
            }
            if (data.hasOwnProperty('WorkDirectory')) {
                obj['WorkDirectory'] = ApiClient.convertToType(data['WorkDirectory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedApplicationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedApplicationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LogDirectory'] && !(typeof data['LogDirectory'] === 'string' || data['LogDirectory'] instanceof String)) {
            throw new Error("Expected the field `LogDirectory` to be a primitive type in the JSON string but got " + data['LogDirectory']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TempDirectory'] && !(typeof data['TempDirectory'] === 'string' || data['TempDirectory'] instanceof String)) {
            throw new Error("Expected the field `TempDirectory` to be a primitive type in the JSON string but got " + data['TempDirectory']);
        }
        // ensure the json data is a string
        if (data['TypeName'] && !(typeof data['TypeName'] === 'string' || data['TypeName'] instanceof String)) {
            throw new Error("Expected the field `TypeName` to be a primitive type in the JSON string but got " + data['TypeName']);
        }
        // ensure the json data is a string
        if (data['WorkDirectory'] && !(typeof data['WorkDirectory'] === 'string' || data['WorkDirectory'] instanceof String)) {
            throw new Error("Expected the field `WorkDirectory` to be a primitive type in the JSON string but got " + data['WorkDirectory']);
        }

        return true;
    }


}



/**
 * @member {module:model/HealthState} HealthState
 */
DeployedApplicationInfo.prototype['HealthState'] = undefined;

/**
 * The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.
 * @member {String} Id
 */
DeployedApplicationInfo.prototype['Id'] = undefined;

/**
 * The log directory of the application on the node. The log directory can be used to store application logs.
 * @member {String} LogDirectory
 */
DeployedApplicationInfo.prototype['LogDirectory'] = undefined;

/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} Name
 */
DeployedApplicationInfo.prototype['Name'] = undefined;

/**
 * @member {module:model/DeployedApplicationStatus} Status
 */
DeployedApplicationInfo.prototype['Status'] = undefined;

/**
 * The temp directory of the application on the node. The code packages belonging to the application are forked with this directory set as their temporary directory.
 * @member {String} TempDirectory
 */
DeployedApplicationInfo.prototype['TempDirectory'] = undefined;

/**
 * The application type name as defined in the application manifest.
 * @member {String} TypeName
 */
DeployedApplicationInfo.prototype['TypeName'] = undefined;

/**
 * The work directory of the application on the node. The work directory can be used to store application data.
 * @member {String} WorkDirectory
 */
DeployedApplicationInfo.prototype['WorkDirectory'] = undefined;






export default DeployedApplicationInfo;

