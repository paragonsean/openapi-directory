/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicy from './ApplicationHealthPolicy';
import ApplicationParameter from './ApplicationParameter';
import MonitoringPolicyDescription from './MonitoringPolicyDescription';
import UpgradeKind from './UpgradeKind';
import UpgradeMode from './UpgradeMode';

/**
 * The ApplicationUpgradeDescription model module.
 * @module model/ApplicationUpgradeDescription
 * @version 6.2.0.9
 */
class ApplicationUpgradeDescription {
    /**
     * Constructs a new <code>ApplicationUpgradeDescription</code>.
     * Describes the parameters for an application upgrade. Please note that upgrade description replaces the existing application description. This means that if the parameters are not specified, the existing parameters on the applications will be overwritten with the empty parameters list. This would results in application using the default value of the parameters from the application manifest. If you do not want to change any existing parameter values, please get the application parameters first using the GetApplicationInfo query and then supply those values as Parameters in this ApplicationUpgradeDescription.
     * @alias module:model/ApplicationUpgradeDescription
     * @param name {String} The name of the target application, including the 'fabric:' URI scheme.
     * @param parameters {Array.<module:model/ApplicationParameter>} List of application parameters with overridden values from their default values specified in the application manifest.
     * @param targetApplicationTypeVersion {String} The target application type version (found in the application manifest) for the application upgrade.
     * @param upgradeKind {module:model/UpgradeKind} 
     */
    constructor(name, parameters, targetApplicationTypeVersion, upgradeKind) { 
        
        ApplicationUpgradeDescription.initialize(this, name, parameters, targetApplicationTypeVersion, upgradeKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, parameters, targetApplicationTypeVersion, upgradeKind) { 
        obj['ForceRestart'] = false;
        obj['Name'] = name;
        obj['Parameters'] = parameters;
        obj['TargetApplicationTypeVersion'] = targetApplicationTypeVersion;
        obj['UpgradeKind'] = upgradeKind;
    }

    /**
     * Constructs a <code>ApplicationUpgradeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationUpgradeDescription} obj Optional instance to populate.
     * @return {module:model/ApplicationUpgradeDescription} The populated <code>ApplicationUpgradeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationUpgradeDescription();

            if (data.hasOwnProperty('ApplicationHealthPolicy')) {
                obj['ApplicationHealthPolicy'] = ApplicationHealthPolicy.constructFromObject(data['ApplicationHealthPolicy']);
            }
            if (data.hasOwnProperty('ForceRestart')) {
                obj['ForceRestart'] = ApiClient.convertToType(data['ForceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('MonitoringPolicy')) {
                obj['MonitoringPolicy'] = MonitoringPolicyDescription.constructFromObject(data['MonitoringPolicy']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], [ApplicationParameter]);
            }
            if (data.hasOwnProperty('RollingUpgradeMode')) {
                obj['RollingUpgradeMode'] = UpgradeMode.constructFromObject(data['RollingUpgradeMode']);
            }
            if (data.hasOwnProperty('TargetApplicationTypeVersion')) {
                obj['TargetApplicationTypeVersion'] = ApiClient.convertToType(data['TargetApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('UpgradeKind')) {
                obj['UpgradeKind'] = UpgradeKind.constructFromObject(data['UpgradeKind']);
            }
            if (data.hasOwnProperty('UpgradeReplicaSetCheckTimeoutInSeconds')) {
                obj['UpgradeReplicaSetCheckTimeoutInSeconds'] = ApiClient.convertToType(data['UpgradeReplicaSetCheckTimeoutInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationUpgradeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationUpgradeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationUpgradeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ApplicationHealthPolicy`
        if (data['ApplicationHealthPolicy']) { // data not null
          ApplicationHealthPolicy.validateJSON(data['ApplicationHealthPolicy']);
        }
        // validate the optional field `MonitoringPolicy`
        if (data['MonitoringPolicy']) { // data not null
          MonitoringPolicyDescription.validateJSON(data['MonitoringPolicy']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Parameters'])) {
                throw new Error("Expected the field `Parameters` to be an array in the JSON data but got " + data['Parameters']);
            }
            // validate the optional field `Parameters` (array)
            for (const item of data['Parameters']) {
                ApplicationParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TargetApplicationTypeVersion'] && !(typeof data['TargetApplicationTypeVersion'] === 'string' || data['TargetApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['TargetApplicationTypeVersion']);
        }

        return true;
    }


}

ApplicationUpgradeDescription.RequiredProperties = ["Name", "Parameters", "TargetApplicationTypeVersion", "UpgradeKind"];

/**
 * @member {module:model/ApplicationHealthPolicy} ApplicationHealthPolicy
 */
ApplicationUpgradeDescription.prototype['ApplicationHealthPolicy'] = undefined;

/**
 * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
 * @member {Boolean} ForceRestart
 * @default false
 */
ApplicationUpgradeDescription.prototype['ForceRestart'] = false;

/**
 * @member {module:model/MonitoringPolicyDescription} MonitoringPolicy
 */
ApplicationUpgradeDescription.prototype['MonitoringPolicy'] = undefined;

/**
 * The name of the target application, including the 'fabric:' URI scheme.
 * @member {String} Name
 */
ApplicationUpgradeDescription.prototype['Name'] = undefined;

/**
 * List of application parameters with overridden values from their default values specified in the application manifest.
 * @member {Array.<module:model/ApplicationParameter>} Parameters
 */
ApplicationUpgradeDescription.prototype['Parameters'] = undefined;

/**
 * @member {module:model/UpgradeMode} RollingUpgradeMode
 */
ApplicationUpgradeDescription.prototype['RollingUpgradeMode'] = undefined;

/**
 * The target application type version (found in the application manifest) for the application upgrade.
 * @member {String} TargetApplicationTypeVersion
 */
ApplicationUpgradeDescription.prototype['TargetApplicationTypeVersion'] = undefined;

/**
 * @member {module:model/UpgradeKind} UpgradeKind
 */
ApplicationUpgradeDescription.prototype['UpgradeKind'] = undefined;

/**
 * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
 * @member {Number} UpgradeReplicaSetCheckTimeoutInSeconds
 */
ApplicationUpgradeDescription.prototype['UpgradeReplicaSetCheckTimeoutInSeconds'] = undefined;






export default ApplicationUpgradeDescription;

