/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthStateChunkList from './ApplicationHealthStateChunkList';
import HealthState from './HealthState';
import NodeHealthStateChunkList from './NodeHealthStateChunkList';

/**
 * The ClusterHealthChunk model module.
 * @module model/ClusterHealthChunk
 * @version 6.2.0.9
 */
class ClusterHealthChunk {
    /**
     * Constructs a new <code>ClusterHealthChunk</code>.
     * Represents the health chunk of the cluster. Contains the cluster aggregated health state, and the cluster entities that respect the input filter.
     * @alias module:model/ClusterHealthChunk
     */
    constructor() { 
        
        ClusterHealthChunk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterHealthChunk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterHealthChunk} obj Optional instance to populate.
     * @return {module:model/ClusterHealthChunk} The populated <code>ClusterHealthChunk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterHealthChunk();

            if (data.hasOwnProperty('ApplicationHealthStateChunks')) {
                obj['ApplicationHealthStateChunks'] = ApplicationHealthStateChunkList.constructFromObject(data['ApplicationHealthStateChunks']);
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('NodeHealthStateChunks')) {
                obj['NodeHealthStateChunks'] = NodeHealthStateChunkList.constructFromObject(data['NodeHealthStateChunks']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterHealthChunk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterHealthChunk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ApplicationHealthStateChunks`
        if (data['ApplicationHealthStateChunks']) { // data not null
          ApplicationHealthStateChunkList.validateJSON(data['ApplicationHealthStateChunks']);
        }
        // validate the optional field `NodeHealthStateChunks`
        if (data['NodeHealthStateChunks']) { // data not null
          NodeHealthStateChunkList.validateJSON(data['NodeHealthStateChunks']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApplicationHealthStateChunkList} ApplicationHealthStateChunks
 */
ClusterHealthChunk.prototype['ApplicationHealthStateChunks'] = undefined;

/**
 * @member {module:model/HealthState} HealthState
 */
ClusterHealthChunk.prototype['HealthState'] = undefined;

/**
 * @member {module:model/NodeHealthStateChunkList} NodeHealthStateChunks
 */
ClusterHealthChunk.prototype['NodeHealthStateChunks'] = undefined;






export default ClusterHealthChunk;

