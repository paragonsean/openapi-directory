/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProvisionApplicationTypeDescriptionBase from './ProvisionApplicationTypeDescriptionBase';
import ProvisionApplicationTypeKind from './ProvisionApplicationTypeKind';

/**
 * The ExternalStoreProvisionApplicationTypeDescription model module.
 * @module model/ExternalStoreProvisionApplicationTypeDescription
 * @version 6.2.0.9
 */
class ExternalStoreProvisionApplicationTypeDescription {
    /**
     * Constructs a new <code>ExternalStoreProvisionApplicationTypeDescription</code>.
     * Describes the operation to register or provision an application type using an application package from an external store instead of a package uploaded to the Service Fabric image store.
     * @alias module:model/ExternalStoreProvisionApplicationTypeDescription
     * @extends module:model/ProvisionApplicationTypeDescriptionBase
     * @implements module:model/ProvisionApplicationTypeDescriptionBase
     * @param async {Boolean} Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.
     * @param kind {module:model/ProvisionApplicationTypeKind} 
     */
    constructor(async, kind) { 
        ProvisionApplicationTypeDescriptionBase.initialize(this, async, kind);
        ExternalStoreProvisionApplicationTypeDescription.initialize(this, async, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, async, kind) { 
    }

    /**
     * Constructs a <code>ExternalStoreProvisionApplicationTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalStoreProvisionApplicationTypeDescription} obj Optional instance to populate.
     * @return {module:model/ExternalStoreProvisionApplicationTypeDescription} The populated <code>ExternalStoreProvisionApplicationTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalStoreProvisionApplicationTypeDescription();
            ProvisionApplicationTypeDescriptionBase.constructFromObject(data, obj);
            ProvisionApplicationTypeDescriptionBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('ApplicationPackageDownloadUri')) {
                obj['ApplicationPackageDownloadUri'] = ApiClient.convertToType(data['ApplicationPackageDownloadUri'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeName')) {
                obj['ApplicationTypeName'] = ApiClient.convertToType(data['ApplicationTypeName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeVersion')) {
                obj['ApplicationTypeVersion'] = ApiClient.convertToType(data['ApplicationTypeVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalStoreProvisionApplicationTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalStoreProvisionApplicationTypeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExternalStoreProvisionApplicationTypeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationPackageDownloadUri'] && !(typeof data['ApplicationPackageDownloadUri'] === 'string' || data['ApplicationPackageDownloadUri'] instanceof String)) {
            throw new Error("Expected the field `ApplicationPackageDownloadUri` to be a primitive type in the JSON string but got " + data['ApplicationPackageDownloadUri']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeName'] && !(typeof data['ApplicationTypeName'] === 'string' || data['ApplicationTypeName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeName` to be a primitive type in the JSON string but got " + data['ApplicationTypeName']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeVersion'] && !(typeof data['ApplicationTypeVersion'] === 'string' || data['ApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['ApplicationTypeVersion']);
        }

        return true;
    }


}

ExternalStoreProvisionApplicationTypeDescription.RequiredProperties = ["Async", "Kind"];

/**
 * The path to the '.sfpkg' application package from where the application package can be downloaded using HTTP or HTTPS protocols. The application package can be stored in an external store that provides GET operation to download the file. Supported protocols are HTTP and HTTPS, and the path must allow READ access.
 * @member {String} ApplicationPackageDownloadUri
 */
ExternalStoreProvisionApplicationTypeDescription.prototype['ApplicationPackageDownloadUri'] = undefined;

/**
 * The application type name represents the name of the application type found in the application manifest.
 * @member {String} ApplicationTypeName
 */
ExternalStoreProvisionApplicationTypeDescription.prototype['ApplicationTypeName'] = undefined;

/**
 * The application type version represents the version of the application type found in the application manifest.
 * @member {String} ApplicationTypeVersion
 */
ExternalStoreProvisionApplicationTypeDescription.prototype['ApplicationTypeVersion'] = undefined;


// Implement ProvisionApplicationTypeDescriptionBase interface:
/**
 * Indicates whether or not provisioning should occur asynchronously. When set to true, the provision operation returns when the request is accepted by the system, and the provision operation continues without any timeout limit. The default value is false. For large application packages, we recommend setting the value to true.
 * @member {Boolean} Async
 */
ProvisionApplicationTypeDescriptionBase.prototype['Async'] = undefined;
/**
 * @member {module:model/ProvisionApplicationTypeKind} Kind
 */
ProvisionApplicationTypeDescriptionBase.prototype['Kind'] = undefined;




export default ExternalStoreProvisionApplicationTypeDescription;

