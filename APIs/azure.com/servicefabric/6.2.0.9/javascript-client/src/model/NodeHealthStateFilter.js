/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeHealthStateFilter model module.
 * @module model/NodeHealthStateFilter
 * @version 6.2.0.9
 */
class NodeHealthStateFilter {
    /**
     * Constructs a new <code>NodeHealthStateFilter</code>.
     * Defines matching criteria to determine whether a node should be included in the returned cluster health chunk. One filter can match zero, one or multiple nodes, depending on its properties. Can be specified in the cluster health chunk query description.
     * @alias module:model/NodeHealthStateFilter
     */
    constructor() { 
        
        NodeHealthStateFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeHealthStateFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeHealthStateFilter} obj Optional instance to populate.
     * @return {module:model/NodeHealthStateFilter} The populated <code>NodeHealthStateFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeHealthStateFilter();

            if (data.hasOwnProperty('HealthStateFilter')) {
                obj['HealthStateFilter'] = ApiClient.convertToType(data['HealthStateFilter'], 'Number');
            }
            if (data.hasOwnProperty('NodeNameFilter')) {
                obj['NodeNameFilter'] = ApiClient.convertToType(data['NodeNameFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeHealthStateFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeHealthStateFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NodeNameFilter'] && !(typeof data['NodeNameFilter'] === 'string' || data['NodeNameFilter'] instanceof String)) {
            throw new Error("Expected the field `NodeNameFilter` to be a primitive type in the JSON string but got " + data['NodeNameFilter']);
        }

        return true;
    }


}



/**
 * The filter for the health state of the nodes. It allows selecting nodes if they match the desired health states. The possible values are integer value of one of the following health states. Only nodes that match the filter are returned. All nodes are used to evaluate the cluster aggregated health state. If not specified, default value is None, unless the node name is specified. If the filter has default value and node name is specified, the matching node is returned. The state values are flag based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches nodes with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
 * @member {Number} HealthStateFilter
 */
NodeHealthStateFilter.prototype['HealthStateFilter'] = undefined;

/**
 * Name of the node that matches the filter. The filter is applied only to the specified node, if it exists. If the node doesn't exist, no node is returned in the cluster health chunk based on this filter. If the node exists, it is included in the cluster health chunk if the health state matches the other filter properties. If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
 * @member {String} NodeNameFilter
 */
NodeHealthStateFilter.prototype['NodeNameFilter'] = undefined;






export default NodeHealthStateFilter;

