/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackupScheduleDescription from './BackupScheduleDescription';
import BackupStorageDescription from './BackupStorageDescription';

/**
 * The BackupPolicyDescription model module.
 * @module model/BackupPolicyDescription
 * @version 6.2.0.9
 */
class BackupPolicyDescription {
    /**
     * Constructs a new <code>BackupPolicyDescription</code>.
     * Describes a backup policy for configuring periodic backup.
     * @alias module:model/BackupPolicyDescription
     * @param autoRestoreOnDataLoss {Boolean} Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.
     * @param maxIncrementalBackups {Number} Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
     * @param name {String} The unique name identifying this backup policy.
     * @param schedule {module:model/BackupScheduleDescription} 
     * @param storage {module:model/BackupStorageDescription} 
     */
    constructor(autoRestoreOnDataLoss, maxIncrementalBackups, name, schedule, storage) { 
        
        BackupPolicyDescription.initialize(this, autoRestoreOnDataLoss, maxIncrementalBackups, name, schedule, storage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoRestoreOnDataLoss, maxIncrementalBackups, name, schedule, storage) { 
        obj['AutoRestoreOnDataLoss'] = autoRestoreOnDataLoss;
        obj['MaxIncrementalBackups'] = maxIncrementalBackups;
        obj['Name'] = name;
        obj['Schedule'] = schedule;
        obj['Storage'] = storage;
    }

    /**
     * Constructs a <code>BackupPolicyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupPolicyDescription} obj Optional instance to populate.
     * @return {module:model/BackupPolicyDescription} The populated <code>BackupPolicyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupPolicyDescription();

            if (data.hasOwnProperty('AutoRestoreOnDataLoss')) {
                obj['AutoRestoreOnDataLoss'] = ApiClient.convertToType(data['AutoRestoreOnDataLoss'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxIncrementalBackups')) {
                obj['MaxIncrementalBackups'] = ApiClient.convertToType(data['MaxIncrementalBackups'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Schedule')) {
                obj['Schedule'] = BackupScheduleDescription.constructFromObject(data['Schedule']);
            }
            if (data.hasOwnProperty('Storage')) {
                obj['Storage'] = BackupStorageDescription.constructFromObject(data['Storage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupPolicyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupPolicyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BackupPolicyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `Schedule`
        if (data['Schedule']) { // data not null
          BackupScheduleDescription.validateJSON(data['Schedule']);
        }
        // validate the optional field `Storage`
        if (data['Storage']) { // data not null
          BackupStorageDescription.validateJSON(data['Storage']);
        }

        return true;
    }


}

BackupPolicyDescription.RequiredProperties = ["AutoRestoreOnDataLoss", "MaxIncrementalBackups", "Name", "Schedule", "Storage"];

/**
 * Specifies whether to trigger restore automatically using the latest available backup in case the partition experiences a data loss event.
 * @member {Boolean} AutoRestoreOnDataLoss
 */
BackupPolicyDescription.prototype['AutoRestoreOnDataLoss'] = undefined;

/**
 * Defines the maximum number of incremental backups to be taken between two full backups. This is just the upper limit. A full backup may be taken before specified number of incremental backups are completed in one of the following conditions - The replica has never taken a full backup since it has become primary, - Some of the log records since the last backup has been truncated, or - Replica passed the MaxAccumulatedBackupLogSizeInMB limit.
 * @member {Number} MaxIncrementalBackups
 */
BackupPolicyDescription.prototype['MaxIncrementalBackups'] = undefined;

/**
 * The unique name identifying this backup policy.
 * @member {String} Name
 */
BackupPolicyDescription.prototype['Name'] = undefined;

/**
 * @member {module:model/BackupScheduleDescription} Schedule
 */
BackupPolicyDescription.prototype['Schedule'] = undefined;

/**
 * @member {module:model/BackupStorageDescription} Storage
 */
BackupPolicyDescription.prototype['Storage'] = undefined;






export default BackupPolicyDescription;

