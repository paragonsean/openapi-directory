/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FabricEventKind from './FabricEventKind';
import NodeEvent from './NodeEvent';

/**
 * The NodeUpEvent model module.
 * @module model/NodeUpEvent
 * @version 6.2.0.9
 */
class NodeUpEvent {
    /**
     * Constructs a new <code>NodeUpEvent</code>.
     * Node Up event.
     * @alias module:model/NodeUpEvent
     * @extends module:model/NodeEvent
     * @implements module:model/NodeEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     * @param nodeName {String} The name of a Service Fabric node.
     * @param lastNodeDownAt {Date} Time when Node was last down.
     * @param nodeInstance {Number} Id of Node instance.
     */
    constructor(eventInstanceId, kind, timeStamp, nodeName, lastNodeDownAt, nodeInstance) { 
        NodeEvent.initialize(this, eventInstanceId, kind, timeStamp, nodeName);
        NodeUpEvent.initialize(this, eventInstanceId, kind, timeStamp, nodeName, lastNodeDownAt, nodeInstance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp, nodeName, lastNodeDownAt, nodeInstance) { 
        obj['LastNodeDownAt'] = lastNodeDownAt;
        obj['NodeInstance'] = nodeInstance;
    }

    /**
     * Constructs a <code>NodeUpEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeUpEvent} obj Optional instance to populate.
     * @return {module:model/NodeUpEvent} The populated <code>NodeUpEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeUpEvent();
            NodeEvent.constructFromObject(data, obj);
            NodeEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('LastNodeDownAt')) {
                obj['LastNodeDownAt'] = ApiClient.convertToType(data['LastNodeDownAt'], 'Date');
            }
            if (data.hasOwnProperty('NodeInstance')) {
                obj['NodeInstance'] = ApiClient.convertToType(data['NodeInstance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeUpEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeUpEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeUpEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

NodeUpEvent.RequiredProperties = ["LastNodeDownAt", "NodeInstance", "EventInstanceId", "Kind", "TimeStamp", "NodeName"];

/**
 * Time when Node was last down.
 * @member {Date} LastNodeDownAt
 */
NodeUpEvent.prototype['LastNodeDownAt'] = undefined;

/**
 * Id of Node instance.
 * @member {Number} NodeInstance
 */
NodeUpEvent.prototype['NodeInstance'] = undefined;


// Implement NodeEvent interface:
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
NodeEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
NodeEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
NodeEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
NodeEvent.prototype['TimeStamp'] = undefined;
/**
 * The name of a Service Fabric node.
 * @member {String} NodeName
 */
NodeEvent.prototype['NodeName'] = undefined;




export default NodeUpEvent;

