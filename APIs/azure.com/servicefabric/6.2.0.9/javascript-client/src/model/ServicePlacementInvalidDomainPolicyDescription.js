/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServicePlacementPolicyType from './ServicePlacementPolicyType';

/**
 * The ServicePlacementInvalidDomainPolicyDescription model module.
 * @module model/ServicePlacementInvalidDomainPolicyDescription
 * @version 6.2.0.9
 */
class ServicePlacementInvalidDomainPolicyDescription {
    /**
     * Constructs a new <code>ServicePlacementInvalidDomainPolicyDescription</code>.
     * Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade domain should not be used for placement of the instances or replicas of that service.
     * @alias module:model/ServicePlacementInvalidDomainPolicyDescription
     * @extends module:model/ServicePlacementPolicyDescription
     * @implements module:model/ServicePlacementPolicyDescription
     * @param type {module:model/ServicePlacementPolicyType} 
     */
    constructor(type) { 
        ServicePlacementPolicyDescription.initialize(this, type);
        ServicePlacementInvalidDomainPolicyDescription.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ServicePlacementInvalidDomainPolicyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePlacementInvalidDomainPolicyDescription} obj Optional instance to populate.
     * @return {module:model/ServicePlacementInvalidDomainPolicyDescription} The populated <code>ServicePlacementInvalidDomainPolicyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePlacementInvalidDomainPolicyDescription();
            ServicePlacementPolicyDescription.constructFromObject(data, obj);
            ServicePlacementPolicyDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePlacementInvalidDomainPolicyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePlacementInvalidDomainPolicyDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServicePlacementInvalidDomainPolicyDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DomainName'] && !(typeof data['DomainName'] === 'string' || data['DomainName'] instanceof String)) {
            throw new Error("Expected the field `DomainName` to be a primitive type in the JSON string but got " + data['DomainName']);
        }

        return true;
    }


}

ServicePlacementInvalidDomainPolicyDescription.RequiredProperties = ["Type"];

/**
 * The name of the domain that should not be used for placement.
 * @member {String} DomainName
 */
ServicePlacementInvalidDomainPolicyDescription.prototype['DomainName'] = undefined;


// Implement ServicePlacementPolicyDescription interface:
/**
 * @member {module:model/ServicePlacementPolicyType} Type
 */
ServicePlacementPolicyDescription.prototype['Type'] = undefined;




export default ServicePlacementInvalidDomainPolicyDescription;

