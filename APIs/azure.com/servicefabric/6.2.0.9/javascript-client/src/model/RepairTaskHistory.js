/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepairTaskHistory model module.
 * @module model/RepairTaskHistory
 * @version 6.2.0.9
 */
class RepairTaskHistory {
    /**
     * Constructs a new <code>RepairTaskHistory</code>.
     * A record of the times when the repair task entered each state.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
     * @alias module:model/RepairTaskHistory
     */
    constructor() { 
        
        RepairTaskHistory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepairTaskHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepairTaskHistory} obj Optional instance to populate.
     * @return {module:model/RepairTaskHistory} The populated <code>RepairTaskHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepairTaskHistory();

            if (data.hasOwnProperty('ApprovedUtcTimestamp')) {
                obj['ApprovedUtcTimestamp'] = ApiClient.convertToType(data['ApprovedUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('ClaimedUtcTimestamp')) {
                obj['ClaimedUtcTimestamp'] = ApiClient.convertToType(data['ClaimedUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('CompletedUtcTimestamp')) {
                obj['CompletedUtcTimestamp'] = ApiClient.convertToType(data['CompletedUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('CreatedUtcTimestamp')) {
                obj['CreatedUtcTimestamp'] = ApiClient.convertToType(data['CreatedUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('ExecutingUtcTimestamp')) {
                obj['ExecutingUtcTimestamp'] = ApiClient.convertToType(data['ExecutingUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('PreparingHealthCheckEndUtcTimestamp')) {
                obj['PreparingHealthCheckEndUtcTimestamp'] = ApiClient.convertToType(data['PreparingHealthCheckEndUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('PreparingHealthCheckStartUtcTimestamp')) {
                obj['PreparingHealthCheckStartUtcTimestamp'] = ApiClient.convertToType(data['PreparingHealthCheckStartUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('PreparingUtcTimestamp')) {
                obj['PreparingUtcTimestamp'] = ApiClient.convertToType(data['PreparingUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('RestoringHealthCheckEndUtcTimestamp')) {
                obj['RestoringHealthCheckEndUtcTimestamp'] = ApiClient.convertToType(data['RestoringHealthCheckEndUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('RestoringHealthCheckStartUtcTimestamp')) {
                obj['RestoringHealthCheckStartUtcTimestamp'] = ApiClient.convertToType(data['RestoringHealthCheckStartUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('RestoringUtcTimestamp')) {
                obj['RestoringUtcTimestamp'] = ApiClient.convertToType(data['RestoringUtcTimestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepairTaskHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepairTaskHistory</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The time when the repair task entered the Approved state
 * @member {Date} ApprovedUtcTimestamp
 */
RepairTaskHistory.prototype['ApprovedUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Claimed state.
 * @member {Date} ClaimedUtcTimestamp
 */
RepairTaskHistory.prototype['ClaimedUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Completed state
 * @member {Date} CompletedUtcTimestamp
 */
RepairTaskHistory.prototype['CompletedUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Created state.
 * @member {Date} CreatedUtcTimestamp
 */
RepairTaskHistory.prototype['CreatedUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Executing state
 * @member {Date} ExecutingUtcTimestamp
 */
RepairTaskHistory.prototype['ExecutingUtcTimestamp'] = undefined;

/**
 * The time when the repair task completed the health check in the Preparing state.
 * @member {Date} PreparingHealthCheckEndUtcTimestamp
 */
RepairTaskHistory.prototype['PreparingHealthCheckEndUtcTimestamp'] = undefined;

/**
 * The time when the repair task started the health check in the Preparing state.
 * @member {Date} PreparingHealthCheckStartUtcTimestamp
 */
RepairTaskHistory.prototype['PreparingHealthCheckStartUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Preparing state.
 * @member {Date} PreparingUtcTimestamp
 */
RepairTaskHistory.prototype['PreparingUtcTimestamp'] = undefined;

/**
 * The time when the repair task completed the health check in the Restoring state.
 * @member {Date} RestoringHealthCheckEndUtcTimestamp
 */
RepairTaskHistory.prototype['RestoringHealthCheckEndUtcTimestamp'] = undefined;

/**
 * The time when the repair task started the health check in the Restoring state.
 * @member {Date} RestoringHealthCheckStartUtcTimestamp
 */
RepairTaskHistory.prototype['RestoringHealthCheckStartUtcTimestamp'] = undefined;

/**
 * The time when the repair task entered the Restoring state
 * @member {Date} RestoringUtcTimestamp
 */
RepairTaskHistory.prototype['RestoringUtcTimestamp'] = undefined;






export default RepairTaskHistory;

