/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeployedApplicationHealthStateChunkList from './DeployedApplicationHealthStateChunkList';
import EntityHealthStateChunk from './EntityHealthStateChunk';
import HealthState from './HealthState';
import ServiceHealthStateChunkList from './ServiceHealthStateChunkList';

/**
 * The ApplicationHealthStateChunk model module.
 * @module model/ApplicationHealthStateChunk
 * @version 6.2.0.9
 */
class ApplicationHealthStateChunk {
    /**
     * Constructs a new <code>ApplicationHealthStateChunk</code>.
     * Represents the health state chunk of a application. The application health state chunk contains the application name, its aggregated health state and any children services and deployed applications that respect the filters in cluster health chunk query description.
     * @alias module:model/ApplicationHealthStateChunk
     * @implements module:model/EntityHealthStateChunk
     */
    constructor() { 
        EntityHealthStateChunk.initialize(this);
        ApplicationHealthStateChunk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationHealthStateChunk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationHealthStateChunk} obj Optional instance to populate.
     * @return {module:model/ApplicationHealthStateChunk} The populated <code>ApplicationHealthStateChunk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationHealthStateChunk();
            EntityHealthStateChunk.constructFromObject(data, obj);

            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('ApplicationTypeName')) {
                obj['ApplicationTypeName'] = ApiClient.convertToType(data['ApplicationTypeName'], 'String');
            }
            if (data.hasOwnProperty('DeployedApplicationHealthStateChunks')) {
                obj['DeployedApplicationHealthStateChunks'] = DeployedApplicationHealthStateChunkList.constructFromObject(data['DeployedApplicationHealthStateChunks']);
            }
            if (data.hasOwnProperty('ServiceHealthStateChunks')) {
                obj['ServiceHealthStateChunks'] = ServiceHealthStateChunkList.constructFromObject(data['ServiceHealthStateChunks']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationHealthStateChunk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationHealthStateChunk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        // ensure the json data is a string
        if (data['ApplicationTypeName'] && !(typeof data['ApplicationTypeName'] === 'string' || data['ApplicationTypeName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationTypeName` to be a primitive type in the JSON string but got " + data['ApplicationTypeName']);
        }
        // validate the optional field `DeployedApplicationHealthStateChunks`
        if (data['DeployedApplicationHealthStateChunks']) { // data not null
          DeployedApplicationHealthStateChunkList.validateJSON(data['DeployedApplicationHealthStateChunks']);
        }
        // validate the optional field `ServiceHealthStateChunks`
        if (data['ServiceHealthStateChunks']) { // data not null
          ServiceHealthStateChunkList.validateJSON(data['ServiceHealthStateChunks']);
        }

        return true;
    }


}



/**
 * @member {module:model/HealthState} HealthState
 */
ApplicationHealthStateChunk.prototype['HealthState'] = undefined;

/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
ApplicationHealthStateChunk.prototype['ApplicationName'] = undefined;

/**
 * The application type name as defined in the application manifest.
 * @member {String} ApplicationTypeName
 */
ApplicationHealthStateChunk.prototype['ApplicationTypeName'] = undefined;

/**
 * @member {module:model/DeployedApplicationHealthStateChunkList} DeployedApplicationHealthStateChunks
 */
ApplicationHealthStateChunk.prototype['DeployedApplicationHealthStateChunks'] = undefined;

/**
 * @member {module:model/ServiceHealthStateChunkList} ServiceHealthStateChunks
 */
ApplicationHealthStateChunk.prototype['ServiceHealthStateChunks'] = undefined;


// Implement EntityHealthStateChunk interface:
/**
 * @member {module:model/HealthState} HealthState
 */
EntityHealthStateChunk.prototype['HealthState'] = undefined;




export default ApplicationHealthStateChunk;

