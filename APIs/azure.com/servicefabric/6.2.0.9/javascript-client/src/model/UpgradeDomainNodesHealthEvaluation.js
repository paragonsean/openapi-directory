/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthEvaluation from './HealthEvaluation';
import HealthEvaluationKind from './HealthEvaluationKind';
import HealthEvaluationWrapper from './HealthEvaluationWrapper';
import HealthState from './HealthState';

/**
 * The UpgradeDomainNodesHealthEvaluation model module.
 * @module model/UpgradeDomainNodesHealthEvaluation
 * @version 6.2.0.9
 */
class UpgradeDomainNodesHealthEvaluation {
    /**
     * Constructs a new <code>UpgradeDomainNodesHealthEvaluation</code>.
     * Represents health evaluation for cluster nodes in an upgrade domain, containing health evaluations for each unhealthy node that impacted current aggregated health state. Can be returned when evaluating cluster health during cluster upgrade and the aggregated health state is either Error or Warning.
     * @alias module:model/UpgradeDomainNodesHealthEvaluation
     * @extends module:model/HealthEvaluation
     * @implements module:model/HealthEvaluation
     * @param kind {module:model/HealthEvaluationKind} 
     */
    constructor(kind) { 
        HealthEvaluation.initialize(this, kind);
        UpgradeDomainNodesHealthEvaluation.initialize(this, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind) { 
    }

    /**
     * Constructs a <code>UpgradeDomainNodesHealthEvaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpgradeDomainNodesHealthEvaluation} obj Optional instance to populate.
     * @return {module:model/UpgradeDomainNodesHealthEvaluation} The populated <code>UpgradeDomainNodesHealthEvaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpgradeDomainNodesHealthEvaluation();
            HealthEvaluation.constructFromObject(data, obj);
            HealthEvaluation.constructFromObject(data, obj);

            if (data.hasOwnProperty('MaxPercentUnhealthyNodes')) {
                obj['MaxPercentUnhealthyNodes'] = ApiClient.convertToType(data['MaxPercentUnhealthyNodes'], 'Number');
            }
            if (data.hasOwnProperty('TotalCount')) {
                obj['TotalCount'] = ApiClient.convertToType(data['TotalCount'], 'Number');
            }
            if (data.hasOwnProperty('UnhealthyEvaluations')) {
                obj['UnhealthyEvaluations'] = ApiClient.convertToType(data['UnhealthyEvaluations'], [HealthEvaluationWrapper]);
            }
            if (data.hasOwnProperty('UpgradeDomainName')) {
                obj['UpgradeDomainName'] = ApiClient.convertToType(data['UpgradeDomainName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpgradeDomainNodesHealthEvaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpgradeDomainNodesHealthEvaluation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpgradeDomainNodesHealthEvaluation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['UnhealthyEvaluations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UnhealthyEvaluations'])) {
                throw new Error("Expected the field `UnhealthyEvaluations` to be an array in the JSON data but got " + data['UnhealthyEvaluations']);
            }
            // validate the optional field `UnhealthyEvaluations` (array)
            for (const item of data['UnhealthyEvaluations']) {
                HealthEvaluationWrapper.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['UpgradeDomainName'] && !(typeof data['UpgradeDomainName'] === 'string' || data['UpgradeDomainName'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDomainName` to be a primitive type in the JSON string but got " + data['UpgradeDomainName']);
        }

        return true;
    }


}

UpgradeDomainNodesHealthEvaluation.RequiredProperties = ["Kind"];

/**
 * Maximum allowed percentage of unhealthy nodes from the ClusterHealthPolicy.
 * @member {Number} MaxPercentUnhealthyNodes
 */
UpgradeDomainNodesHealthEvaluation.prototype['MaxPercentUnhealthyNodes'] = undefined;

/**
 * Total number of nodes in the current upgrade domain.
 * @member {Number} TotalCount
 */
UpgradeDomainNodesHealthEvaluation.prototype['TotalCount'] = undefined;

/**
 * List of health evaluations that resulted in the current aggregated health state.
 * @member {Array.<module:model/HealthEvaluationWrapper>} UnhealthyEvaluations
 */
UpgradeDomainNodesHealthEvaluation.prototype['UnhealthyEvaluations'] = undefined;

/**
 * Name of the upgrade domain where nodes health is currently evaluated.
 * @member {String} UpgradeDomainName
 */
UpgradeDomainNodesHealthEvaluation.prototype['UpgradeDomainName'] = undefined;


// Implement HealthEvaluation interface:
/**
 * @member {module:model/HealthState} AggregatedHealthState
 */
HealthEvaluation.prototype['AggregatedHealthState'] = undefined;
/**
 * Description of the health evaluation, which represents a summary of the evaluation process.
 * @member {String} Description
 */
HealthEvaluation.prototype['Description'] = undefined;
/**
 * @member {module:model/HealthEvaluationKind} Kind
 */
HealthEvaluation.prototype['Kind'] = undefined;




export default UpgradeDomainNodesHealthEvaluation;

