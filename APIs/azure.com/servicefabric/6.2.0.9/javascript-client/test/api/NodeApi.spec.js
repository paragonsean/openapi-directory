/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceFabricClientApis);
  }
}(this, function(expect, ServiceFabricClientApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceFabricClientApis.NodeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeApi', function() {
    describe('disableNode', function() {
      it('should call disableNode successfully', function(done) {
        //uncomment below and update the code to test disableNode
        //instance.disableNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableNode', function() {
      it('should call enableNode successfully', function(done) {
        //uncomment below and update the code to test enableNode
        //instance.enableNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeHealth', function() {
      it('should call getNodeHealth successfully', function(done) {
        //uncomment below and update the code to test getNodeHealth
        //instance.getNodeHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeHealthUsingPolicy', function() {
      it('should call getNodeHealthUsingPolicy successfully', function(done) {
        //uncomment below and update the code to test getNodeHealthUsingPolicy
        //instance.getNodeHealthUsingPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeInfo', function() {
      it('should call getNodeInfo successfully', function(done) {
        //uncomment below and update the code to test getNodeInfo
        //instance.getNodeInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeInfoList', function() {
      it('should call getNodeInfoList successfully', function(done) {
        //uncomment below and update the code to test getNodeInfoList
        //instance.getNodeInfoList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeLoadInfo', function() {
      it('should call getNodeLoadInfo successfully', function(done) {
        //uncomment below and update the code to test getNodeLoadInfo
        //instance.getNodeLoadInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeNodeState', function() {
      it('should call removeNodeState successfully', function(done) {
        //uncomment below and update the code to test removeNodeState
        //instance.removeNodeState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reportNodeHealth', function() {
      it('should call reportNodeHealth successfully', function(done) {
        //uncomment below and update the code to test reportNodeHealth
        //instance.reportNodeHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartNode', function() {
      it('should call restartNode successfully', function(done) {
        //uncomment below and update the code to test restartNode
        //instance.restartNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
