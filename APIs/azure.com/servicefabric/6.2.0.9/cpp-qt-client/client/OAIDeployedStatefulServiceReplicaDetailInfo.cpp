/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedStatefulServiceReplicaDetailInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedStatefulServiceReplicaDetailInfo::OAIDeployedStatefulServiceReplicaDetailInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedStatefulServiceReplicaDetailInfo::OAIDeployedStatefulServiceReplicaDetailInfo() {
    this->initializeModel();
}

OAIDeployedStatefulServiceReplicaDetailInfo::~OAIDeployedStatefulServiceReplicaDetailInfo() {}

void OAIDeployedStatefulServiceReplicaDetailInfo::initializeModel() {

    m_current_service_operation_isSet = false;
    m_current_service_operation_isValid = false;

    m_current_service_operation_start_time_utc_isSet = false;
    m_current_service_operation_start_time_utc_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_reported_load_isSet = false;
    m_reported_load_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_current_replicator_operation_isSet = false;
    m_current_replicator_operation_isValid = false;

    m_deployed_service_replica_query_result_isSet = false;
    m_deployed_service_replica_query_result_isValid = false;

    m_read_status_isSet = false;
    m_read_status_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_replica_status_isSet = false;
    m_replica_status_isValid = false;

    m_replicator_status_isSet = false;
    m_replicator_status_isValid = false;

    m_write_status_isSet = false;
    m_write_status_isValid = false;
}

void OAIDeployedStatefulServiceReplicaDetailInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedStatefulServiceReplicaDetailInfo::fromJsonObject(QJsonObject json) {

    m_current_service_operation_isValid = ::OpenAPI::fromJsonValue(m_current_service_operation, json[QString("CurrentServiceOperation")]);
    m_current_service_operation_isSet = !json[QString("CurrentServiceOperation")].isNull() && m_current_service_operation_isValid;

    m_current_service_operation_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_current_service_operation_start_time_utc, json[QString("CurrentServiceOperationStartTimeUtc")]);
    m_current_service_operation_start_time_utc_isSet = !json[QString("CurrentServiceOperationStartTimeUtc")].isNull() && m_current_service_operation_start_time_utc_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_reported_load_isValid = ::OpenAPI::fromJsonValue(m_reported_load, json[QString("ReportedLoad")]);
    m_reported_load_isSet = !json[QString("ReportedLoad")].isNull() && m_reported_load_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_current_replicator_operation_isValid = ::OpenAPI::fromJsonValue(m_current_replicator_operation, json[QString("CurrentReplicatorOperation")]);
    m_current_replicator_operation_isSet = !json[QString("CurrentReplicatorOperation")].isNull() && m_current_replicator_operation_isValid;

    m_deployed_service_replica_query_result_isValid = ::OpenAPI::fromJsonValue(m_deployed_service_replica_query_result, json[QString("DeployedServiceReplicaQueryResult")]);
    m_deployed_service_replica_query_result_isSet = !json[QString("DeployedServiceReplicaQueryResult")].isNull() && m_deployed_service_replica_query_result_isValid;

    m_read_status_isValid = ::OpenAPI::fromJsonValue(m_read_status, json[QString("ReadStatus")]);
    m_read_status_isSet = !json[QString("ReadStatus")].isNull() && m_read_status_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;

    m_replica_status_isValid = ::OpenAPI::fromJsonValue(m_replica_status, json[QString("ReplicaStatus")]);
    m_replica_status_isSet = !json[QString("ReplicaStatus")].isNull() && m_replica_status_isValid;

    m_replicator_status_isValid = ::OpenAPI::fromJsonValue(m_replicator_status, json[QString("ReplicatorStatus")]);
    m_replicator_status_isSet = !json[QString("ReplicatorStatus")].isNull() && m_replicator_status_isValid;

    m_write_status_isValid = ::OpenAPI::fromJsonValue(m_write_status, json[QString("WriteStatus")]);
    m_write_status_isSet = !json[QString("WriteStatus")].isNull() && m_write_status_isValid;
}

QString OAIDeployedStatefulServiceReplicaDetailInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedStatefulServiceReplicaDetailInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_service_operation.isSet()) {
        obj.insert(QString("CurrentServiceOperation"), ::OpenAPI::toJsonValue(m_current_service_operation));
    }
    if (m_current_service_operation_start_time_utc_isSet) {
        obj.insert(QString("CurrentServiceOperationStartTimeUtc"), ::OpenAPI::toJsonValue(m_current_service_operation_start_time_utc));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_reported_load.size() > 0) {
        obj.insert(QString("ReportedLoad"), ::OpenAPI::toJsonValue(m_reported_load));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_current_replicator_operation.isSet()) {
        obj.insert(QString("CurrentReplicatorOperation"), ::OpenAPI::toJsonValue(m_current_replicator_operation));
    }
    if (m_deployed_service_replica_query_result.isSet()) {
        obj.insert(QString("DeployedServiceReplicaQueryResult"), ::OpenAPI::toJsonValue(m_deployed_service_replica_query_result));
    }
    if (m_read_status.isSet()) {
        obj.insert(QString("ReadStatus"), ::OpenAPI::toJsonValue(m_read_status));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_replica_status.isSet()) {
        obj.insert(QString("ReplicaStatus"), ::OpenAPI::toJsonValue(m_replica_status));
    }
    if (m_replicator_status.isSet()) {
        obj.insert(QString("ReplicatorStatus"), ::OpenAPI::toJsonValue(m_replicator_status));
    }
    if (m_write_status.isSet()) {
        obj.insert(QString("WriteStatus"), ::OpenAPI::toJsonValue(m_write_status));
    }
    return obj;
}

OAIServiceOperationName OAIDeployedStatefulServiceReplicaDetailInfo::getCurrentServiceOperation() const {
    return m_current_service_operation;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setCurrentServiceOperation(const OAIServiceOperationName &current_service_operation) {
    m_current_service_operation = current_service_operation;
    m_current_service_operation_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_service_operation_Set() const{
    return m_current_service_operation_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_service_operation_Valid() const{
    return m_current_service_operation_isValid;
}

QDateTime OAIDeployedStatefulServiceReplicaDetailInfo::getCurrentServiceOperationStartTimeUtc() const {
    return m_current_service_operation_start_time_utc;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setCurrentServiceOperationStartTimeUtc(const QDateTime &current_service_operation_start_time_utc) {
    m_current_service_operation_start_time_utc = current_service_operation_start_time_utc;
    m_current_service_operation_start_time_utc_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_service_operation_start_time_utc_Set() const{
    return m_current_service_operation_start_time_utc_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_service_operation_start_time_utc_Valid() const{
    return m_current_service_operation_start_time_utc_isValid;
}

QString OAIDeployedStatefulServiceReplicaDetailInfo::getPartitionId() const {
    return m_partition_id;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QList<OAILoadMetricReportInfo> OAIDeployedStatefulServiceReplicaDetailInfo::getReportedLoad() const {
    return m_reported_load;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setReportedLoad(const QList<OAILoadMetricReportInfo> &reported_load) {
    m_reported_load = reported_load;
    m_reported_load_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_reported_load_Set() const{
    return m_reported_load_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_reported_load_Valid() const{
    return m_reported_load_isValid;
}

OAIServiceKind OAIDeployedStatefulServiceReplicaDetailInfo::getServiceKind() const {
    return m_service_kind;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QString OAIDeployedStatefulServiceReplicaDetailInfo::getServiceName() const {
    return m_service_name;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIReplicatorOperationName OAIDeployedStatefulServiceReplicaDetailInfo::getCurrentReplicatorOperation() const {
    return m_current_replicator_operation;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setCurrentReplicatorOperation(const OAIReplicatorOperationName &current_replicator_operation) {
    m_current_replicator_operation = current_replicator_operation;
    m_current_replicator_operation_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_replicator_operation_Set() const{
    return m_current_replicator_operation_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_current_replicator_operation_Valid() const{
    return m_current_replicator_operation_isValid;
}

OAIDeployedStatefulServiceReplicaInfo OAIDeployedStatefulServiceReplicaDetailInfo::getDeployedServiceReplicaQueryResult() const {
    return m_deployed_service_replica_query_result;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setDeployedServiceReplicaQueryResult(const OAIDeployedStatefulServiceReplicaInfo &deployed_service_replica_query_result) {
    m_deployed_service_replica_query_result = deployed_service_replica_query_result;
    m_deployed_service_replica_query_result_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_deployed_service_replica_query_result_Set() const{
    return m_deployed_service_replica_query_result_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_deployed_service_replica_query_result_Valid() const{
    return m_deployed_service_replica_query_result_isValid;
}

OAIPartitionAccessStatus OAIDeployedStatefulServiceReplicaDetailInfo::getReadStatus() const {
    return m_read_status;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setReadStatus(const OAIPartitionAccessStatus &read_status) {
    m_read_status = read_status;
    m_read_status_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_read_status_Set() const{
    return m_read_status_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_read_status_Valid() const{
    return m_read_status_isValid;
}

QString OAIDeployedStatefulServiceReplicaDetailInfo::getReplicaId() const {
    return m_replica_id;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

OAIKeyValueStoreReplicaStatus OAIDeployedStatefulServiceReplicaDetailInfo::getReplicaStatus() const {
    return m_replica_status;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setReplicaStatus(const OAIKeyValueStoreReplicaStatus &replica_status) {
    m_replica_status = replica_status;
    m_replica_status_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replica_status_Set() const{
    return m_replica_status_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replica_status_Valid() const{
    return m_replica_status_isValid;
}

OAIReplicatorStatus OAIDeployedStatefulServiceReplicaDetailInfo::getReplicatorStatus() const {
    return m_replicator_status;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setReplicatorStatus(const OAIReplicatorStatus &replicator_status) {
    m_replicator_status = replicator_status;
    m_replicator_status_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replicator_status_Set() const{
    return m_replicator_status_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_replicator_status_Valid() const{
    return m_replicator_status_isValid;
}

OAIPartitionAccessStatus OAIDeployedStatefulServiceReplicaDetailInfo::getWriteStatus() const {
    return m_write_status;
}
void OAIDeployedStatefulServiceReplicaDetailInfo::setWriteStatus(const OAIPartitionAccessStatus &write_status) {
    m_write_status = write_status;
    m_write_status_isSet = true;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_write_status_Set() const{
    return m_write_status_isSet;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::is_write_status_Valid() const{
    return m_write_status_isValid;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_service_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_operation_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_load.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_replicator_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_service_replica_query_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicator_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedStatefulServiceReplicaDetailInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
