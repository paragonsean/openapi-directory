/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterUpgradeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterUpgradeDescription::OAIUpdateClusterUpgradeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterUpgradeDescription::OAIUpdateClusterUpgradeDescription() {
    this->initializeModel();
}

OAIUpdateClusterUpgradeDescription::~OAIUpdateClusterUpgradeDescription() {}

void OAIUpdateClusterUpgradeDescription::initializeModel() {

    m_application_health_policy_map_isSet = false;
    m_application_health_policy_map_isValid = false;

    m_cluster_health_policy_isSet = false;
    m_cluster_health_policy_isValid = false;

    m_cluster_upgrade_health_policy_isSet = false;
    m_cluster_upgrade_health_policy_isValid = false;

    m_enable_delta_health_evaluation_isSet = false;
    m_enable_delta_health_evaluation_isValid = false;

    m_update_description_isSet = false;
    m_update_description_isValid = false;

    m_upgrade_kind_isSet = false;
    m_upgrade_kind_isValid = false;
}

void OAIUpdateClusterUpgradeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterUpgradeDescription::fromJsonObject(QJsonObject json) {

    m_application_health_policy_map_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy_map, json[QString("ApplicationHealthPolicyMap")]);
    m_application_health_policy_map_isSet = !json[QString("ApplicationHealthPolicyMap")].isNull() && m_application_health_policy_map_isValid;

    m_cluster_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_health_policy, json[QString("ClusterHealthPolicy")]);
    m_cluster_health_policy_isSet = !json[QString("ClusterHealthPolicy")].isNull() && m_cluster_health_policy_isValid;

    m_cluster_upgrade_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_upgrade_health_policy, json[QString("ClusterUpgradeHealthPolicy")]);
    m_cluster_upgrade_health_policy_isSet = !json[QString("ClusterUpgradeHealthPolicy")].isNull() && m_cluster_upgrade_health_policy_isValid;

    m_enable_delta_health_evaluation_isValid = ::OpenAPI::fromJsonValue(m_enable_delta_health_evaluation, json[QString("EnableDeltaHealthEvaluation")]);
    m_enable_delta_health_evaluation_isSet = !json[QString("EnableDeltaHealthEvaluation")].isNull() && m_enable_delta_health_evaluation_isValid;

    m_update_description_isValid = ::OpenAPI::fromJsonValue(m_update_description, json[QString("UpdateDescription")]);
    m_update_description_isSet = !json[QString("UpdateDescription")].isNull() && m_update_description_isValid;

    m_upgrade_kind_isValid = ::OpenAPI::fromJsonValue(m_upgrade_kind, json[QString("UpgradeKind")]);
    m_upgrade_kind_isSet = !json[QString("UpgradeKind")].isNull() && m_upgrade_kind_isValid;
}

QString OAIUpdateClusterUpgradeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterUpgradeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy_map.isSet()) {
        obj.insert(QString("ApplicationHealthPolicyMap"), ::OpenAPI::toJsonValue(m_application_health_policy_map));
    }
    if (m_cluster_health_policy.isSet()) {
        obj.insert(QString("ClusterHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_health_policy));
    }
    if (m_cluster_upgrade_health_policy.isSet()) {
        obj.insert(QString("ClusterUpgradeHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_upgrade_health_policy));
    }
    if (m_enable_delta_health_evaluation_isSet) {
        obj.insert(QString("EnableDeltaHealthEvaluation"), ::OpenAPI::toJsonValue(m_enable_delta_health_evaluation));
    }
    if (m_update_description.isSet()) {
        obj.insert(QString("UpdateDescription"), ::OpenAPI::toJsonValue(m_update_description));
    }
    if (m_upgrade_kind.isSet()) {
        obj.insert(QString("UpgradeKind"), ::OpenAPI::toJsonValue(m_upgrade_kind));
    }
    return obj;
}

OAIApplicationHealthPolicies OAIUpdateClusterUpgradeDescription::getApplicationHealthPolicyMap() const {
    return m_application_health_policy_map;
}
void OAIUpdateClusterUpgradeDescription::setApplicationHealthPolicyMap(const OAIApplicationHealthPolicies &application_health_policy_map) {
    m_application_health_policy_map = application_health_policy_map;
    m_application_health_policy_map_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_application_health_policy_map_Set() const{
    return m_application_health_policy_map_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_application_health_policy_map_Valid() const{
    return m_application_health_policy_map_isValid;
}

OAIClusterHealthPolicy OAIUpdateClusterUpgradeDescription::getClusterHealthPolicy() const {
    return m_cluster_health_policy;
}
void OAIUpdateClusterUpgradeDescription::setClusterHealthPolicy(const OAIClusterHealthPolicy &cluster_health_policy) {
    m_cluster_health_policy = cluster_health_policy;
    m_cluster_health_policy_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_cluster_health_policy_Set() const{
    return m_cluster_health_policy_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_cluster_health_policy_Valid() const{
    return m_cluster_health_policy_isValid;
}

OAIClusterUpgradeHealthPolicyObject OAIUpdateClusterUpgradeDescription::getClusterUpgradeHealthPolicy() const {
    return m_cluster_upgrade_health_policy;
}
void OAIUpdateClusterUpgradeDescription::setClusterUpgradeHealthPolicy(const OAIClusterUpgradeHealthPolicyObject &cluster_upgrade_health_policy) {
    m_cluster_upgrade_health_policy = cluster_upgrade_health_policy;
    m_cluster_upgrade_health_policy_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_cluster_upgrade_health_policy_Set() const{
    return m_cluster_upgrade_health_policy_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_cluster_upgrade_health_policy_Valid() const{
    return m_cluster_upgrade_health_policy_isValid;
}

bool OAIUpdateClusterUpgradeDescription::isEnableDeltaHealthEvaluation() const {
    return m_enable_delta_health_evaluation;
}
void OAIUpdateClusterUpgradeDescription::setEnableDeltaHealthEvaluation(const bool &enable_delta_health_evaluation) {
    m_enable_delta_health_evaluation = enable_delta_health_evaluation;
    m_enable_delta_health_evaluation_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_enable_delta_health_evaluation_Set() const{
    return m_enable_delta_health_evaluation_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_enable_delta_health_evaluation_Valid() const{
    return m_enable_delta_health_evaluation_isValid;
}

OAIRollingUpgradeUpdateDescription OAIUpdateClusterUpgradeDescription::getUpdateDescription() const {
    return m_update_description;
}
void OAIUpdateClusterUpgradeDescription::setUpdateDescription(const OAIRollingUpgradeUpdateDescription &update_description) {
    m_update_description = update_description;
    m_update_description_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_update_description_Set() const{
    return m_update_description_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_update_description_Valid() const{
    return m_update_description_isValid;
}

OAIUpgradeType OAIUpdateClusterUpgradeDescription::getUpgradeKind() const {
    return m_upgrade_kind;
}
void OAIUpdateClusterUpgradeDescription::setUpgradeKind(const OAIUpgradeType &upgrade_kind) {
    m_upgrade_kind = upgrade_kind;
    m_upgrade_kind_isSet = true;
}

bool OAIUpdateClusterUpgradeDescription::is_upgrade_kind_Set() const{
    return m_upgrade_kind_isSet;
}

bool OAIUpdateClusterUpgradeDescription::is_upgrade_kind_Valid() const{
    return m_upgrade_kind_isValid;
}

bool OAIUpdateClusterUpgradeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_upgrade_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_delta_health_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterUpgradeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
