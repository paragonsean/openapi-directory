/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupPolicyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupPolicyDescription::OAIBackupPolicyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupPolicyDescription::OAIBackupPolicyDescription() {
    this->initializeModel();
}

OAIBackupPolicyDescription::~OAIBackupPolicyDescription() {}

void OAIBackupPolicyDescription::initializeModel() {

    m_auto_restore_on_data_loss_isSet = false;
    m_auto_restore_on_data_loss_isValid = false;

    m_max_incremental_backups_isSet = false;
    m_max_incremental_backups_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;
}

void OAIBackupPolicyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupPolicyDescription::fromJsonObject(QJsonObject json) {

    m_auto_restore_on_data_loss_isValid = ::OpenAPI::fromJsonValue(m_auto_restore_on_data_loss, json[QString("AutoRestoreOnDataLoss")]);
    m_auto_restore_on_data_loss_isSet = !json[QString("AutoRestoreOnDataLoss")].isNull() && m_auto_restore_on_data_loss_isValid;

    m_max_incremental_backups_isValid = ::OpenAPI::fromJsonValue(m_max_incremental_backups, json[QString("MaxIncrementalBackups")]);
    m_max_incremental_backups_isSet = !json[QString("MaxIncrementalBackups")].isNull() && m_max_incremental_backups_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("Storage")]);
    m_storage_isSet = !json[QString("Storage")].isNull() && m_storage_isValid;
}

QString OAIBackupPolicyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupPolicyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_restore_on_data_loss_isSet) {
        obj.insert(QString("AutoRestoreOnDataLoss"), ::OpenAPI::toJsonValue(m_auto_restore_on_data_loss));
    }
    if (m_max_incremental_backups_isSet) {
        obj.insert(QString("MaxIncrementalBackups"), ::OpenAPI::toJsonValue(m_max_incremental_backups));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_storage.isSet()) {
        obj.insert(QString("Storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    return obj;
}

bool OAIBackupPolicyDescription::isAutoRestoreOnDataLoss() const {
    return m_auto_restore_on_data_loss;
}
void OAIBackupPolicyDescription::setAutoRestoreOnDataLoss(const bool &auto_restore_on_data_loss) {
    m_auto_restore_on_data_loss = auto_restore_on_data_loss;
    m_auto_restore_on_data_loss_isSet = true;
}

bool OAIBackupPolicyDescription::is_auto_restore_on_data_loss_Set() const{
    return m_auto_restore_on_data_loss_isSet;
}

bool OAIBackupPolicyDescription::is_auto_restore_on_data_loss_Valid() const{
    return m_auto_restore_on_data_loss_isValid;
}

qint32 OAIBackupPolicyDescription::getMaxIncrementalBackups() const {
    return m_max_incremental_backups;
}
void OAIBackupPolicyDescription::setMaxIncrementalBackups(const qint32 &max_incremental_backups) {
    m_max_incremental_backups = max_incremental_backups;
    m_max_incremental_backups_isSet = true;
}

bool OAIBackupPolicyDescription::is_max_incremental_backups_Set() const{
    return m_max_incremental_backups_isSet;
}

bool OAIBackupPolicyDescription::is_max_incremental_backups_Valid() const{
    return m_max_incremental_backups_isValid;
}

QString OAIBackupPolicyDescription::getName() const {
    return m_name;
}
void OAIBackupPolicyDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackupPolicyDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackupPolicyDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIBackupScheduleDescription OAIBackupPolicyDescription::getSchedule() const {
    return m_schedule;
}
void OAIBackupPolicyDescription::setSchedule(const OAIBackupScheduleDescription &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIBackupPolicyDescription::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIBackupPolicyDescription::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAIBackupStorageDescription OAIBackupPolicyDescription::getStorage() const {
    return m_storage;
}
void OAIBackupPolicyDescription::setStorage(const OAIBackupStorageDescription &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIBackupPolicyDescription::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIBackupPolicyDescription::is_storage_Valid() const{
    return m_storage_isValid;
}

bool OAIBackupPolicyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_restore_on_data_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_incremental_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupPolicyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_restore_on_data_loss_isValid && m_max_incremental_backups_isValid && m_name_isValid && m_schedule_isValid && m_storage_isValid && true;
}

} // namespace OpenAPI
