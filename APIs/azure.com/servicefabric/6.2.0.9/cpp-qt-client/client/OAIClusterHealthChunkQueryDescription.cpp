/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterHealthChunkQueryDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterHealthChunkQueryDescription::OAIClusterHealthChunkQueryDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterHealthChunkQueryDescription::OAIClusterHealthChunkQueryDescription() {
    this->initializeModel();
}

OAIClusterHealthChunkQueryDescription::~OAIClusterHealthChunkQueryDescription() {}

void OAIClusterHealthChunkQueryDescription::initializeModel() {

    m_application_filters_isSet = false;
    m_application_filters_isValid = false;

    m_application_health_policies_isSet = false;
    m_application_health_policies_isValid = false;

    m_cluster_health_policy_isSet = false;
    m_cluster_health_policy_isValid = false;

    m_node_filters_isSet = false;
    m_node_filters_isValid = false;
}

void OAIClusterHealthChunkQueryDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterHealthChunkQueryDescription::fromJsonObject(QJsonObject json) {

    m_application_filters_isValid = ::OpenAPI::fromJsonValue(m_application_filters, json[QString("ApplicationFilters")]);
    m_application_filters_isSet = !json[QString("ApplicationFilters")].isNull() && m_application_filters_isValid;

    m_application_health_policies_isValid = ::OpenAPI::fromJsonValue(m_application_health_policies, json[QString("ApplicationHealthPolicies")]);
    m_application_health_policies_isSet = !json[QString("ApplicationHealthPolicies")].isNull() && m_application_health_policies_isValid;

    m_cluster_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_health_policy, json[QString("ClusterHealthPolicy")]);
    m_cluster_health_policy_isSet = !json[QString("ClusterHealthPolicy")].isNull() && m_cluster_health_policy_isValid;

    m_node_filters_isValid = ::OpenAPI::fromJsonValue(m_node_filters, json[QString("NodeFilters")]);
    m_node_filters_isSet = !json[QString("NodeFilters")].isNull() && m_node_filters_isValid;
}

QString OAIClusterHealthChunkQueryDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterHealthChunkQueryDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_filters.size() > 0) {
        obj.insert(QString("ApplicationFilters"), ::OpenAPI::toJsonValue(m_application_filters));
    }
    if (m_application_health_policies.isSet()) {
        obj.insert(QString("ApplicationHealthPolicies"), ::OpenAPI::toJsonValue(m_application_health_policies));
    }
    if (m_cluster_health_policy.isSet()) {
        obj.insert(QString("ClusterHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_health_policy));
    }
    if (m_node_filters.size() > 0) {
        obj.insert(QString("NodeFilters"), ::OpenAPI::toJsonValue(m_node_filters));
    }
    return obj;
}

QList<OAIApplicationHealthStateFilter> OAIClusterHealthChunkQueryDescription::getApplicationFilters() const {
    return m_application_filters;
}
void OAIClusterHealthChunkQueryDescription::setApplicationFilters(const QList<OAIApplicationHealthStateFilter> &application_filters) {
    m_application_filters = application_filters;
    m_application_filters_isSet = true;
}

bool OAIClusterHealthChunkQueryDescription::is_application_filters_Set() const{
    return m_application_filters_isSet;
}

bool OAIClusterHealthChunkQueryDescription::is_application_filters_Valid() const{
    return m_application_filters_isValid;
}

OAIApplicationHealthPolicies OAIClusterHealthChunkQueryDescription::getApplicationHealthPolicies() const {
    return m_application_health_policies;
}
void OAIClusterHealthChunkQueryDescription::setApplicationHealthPolicies(const OAIApplicationHealthPolicies &application_health_policies) {
    m_application_health_policies = application_health_policies;
    m_application_health_policies_isSet = true;
}

bool OAIClusterHealthChunkQueryDescription::is_application_health_policies_Set() const{
    return m_application_health_policies_isSet;
}

bool OAIClusterHealthChunkQueryDescription::is_application_health_policies_Valid() const{
    return m_application_health_policies_isValid;
}

OAIClusterHealthPolicy OAIClusterHealthChunkQueryDescription::getClusterHealthPolicy() const {
    return m_cluster_health_policy;
}
void OAIClusterHealthChunkQueryDescription::setClusterHealthPolicy(const OAIClusterHealthPolicy &cluster_health_policy) {
    m_cluster_health_policy = cluster_health_policy;
    m_cluster_health_policy_isSet = true;
}

bool OAIClusterHealthChunkQueryDescription::is_cluster_health_policy_Set() const{
    return m_cluster_health_policy_isSet;
}

bool OAIClusterHealthChunkQueryDescription::is_cluster_health_policy_Valid() const{
    return m_cluster_health_policy_isValid;
}

QList<OAINodeHealthStateFilter> OAIClusterHealthChunkQueryDescription::getNodeFilters() const {
    return m_node_filters;
}
void OAIClusterHealthChunkQueryDescription::setNodeFilters(const QList<OAINodeHealthStateFilter> &node_filters) {
    m_node_filters = node_filters;
    m_node_filters_isSet = true;
}

bool OAIClusterHealthChunkQueryDescription::is_node_filters_Set() const{
    return m_node_filters_isSet;
}

bool OAIClusterHealthChunkQueryDescription::is_node_filters_Valid() const{
    return m_node_filters_isValid;
}

bool OAIClusterHealthChunkQueryDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_health_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterHealthChunkQueryDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
