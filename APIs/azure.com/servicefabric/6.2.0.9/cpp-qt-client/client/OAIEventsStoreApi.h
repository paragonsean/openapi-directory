/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsStoreApi_H
#define OAI_OAIEventsStoreApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationEvent.h"
#include "OAIClusterEvent.h"
#include "OAIContainerInstanceEvent.h"
#include "OAIFabricError.h"
#include "OAIFabricEvent.h"
#include "OAINodeEvent.h"
#include "OAIPartitionEvent.h"
#include "OAIReplicaEvent.h"
#include "OAIServiceEvent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsStoreApi : public QObject {
    Q_OBJECT

public:
    OAIEventsStoreApi(const int timeOut = 0);
    ~OAIEventsStoreApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getApplicationEventList(const QString &api_version, const QString &application_id, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getApplicationsEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getClusterEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getContainersEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  event_instance_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getCorrelatedEventList(const QString &api_version, const QString &event_instance_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getNodeEventList(const QString &api_version, const QString &node_name, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getNodesEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getPartitionEventList(const QString &api_version, const QString &partition_id, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getPartitionReplicaEventList(const QString &api_version, const QString &partition_id, const QString &replica_id, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getPartitionReplicasEventList(const QString &api_version, const QString &partition_id, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getPartitionsEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getServiceEventList(const QString &api_version, const QString &service_id, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_time_utc QString [required]
    * @param[in]  end_time_utc QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  events_types_filter QString [optional]
    * @param[in]  exclude_analysis_events bool [optional]
    * @param[in]  skip_correlation_lookup bool [optional]
    */
    virtual void getServicesEventList(const QString &api_version, const QString &start_time_utc, const QString &end_time_utc, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &events_types_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_analysis_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_correlation_lookup = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getApplicationEventListCallback(OAIHttpRequestWorker *worker);
    void getApplicationsEventListCallback(OAIHttpRequestWorker *worker);
    void getClusterEventListCallback(OAIHttpRequestWorker *worker);
    void getContainersEventListCallback(OAIHttpRequestWorker *worker);
    void getCorrelatedEventListCallback(OAIHttpRequestWorker *worker);
    void getNodeEventListCallback(OAIHttpRequestWorker *worker);
    void getNodesEventListCallback(OAIHttpRequestWorker *worker);
    void getPartitionEventListCallback(OAIHttpRequestWorker *worker);
    void getPartitionReplicaEventListCallback(OAIHttpRequestWorker *worker);
    void getPartitionReplicasEventListCallback(OAIHttpRequestWorker *worker);
    void getPartitionsEventListCallback(OAIHttpRequestWorker *worker);
    void getServiceEventListCallback(OAIHttpRequestWorker *worker);
    void getServicesEventListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getApplicationEventListSignal(QList<OAIApplicationEvent> summary);
    void getApplicationsEventListSignal(QList<OAIApplicationEvent> summary);
    void getClusterEventListSignal(QList<OAIClusterEvent> summary);
    void getContainersEventListSignal(QList<OAIContainerInstanceEvent> summary);
    void getCorrelatedEventListSignal(QList<OAIFabricEvent> summary);
    void getNodeEventListSignal(QList<OAINodeEvent> summary);
    void getNodesEventListSignal(QList<OAINodeEvent> summary);
    void getPartitionEventListSignal(QList<OAIPartitionEvent> summary);
    void getPartitionReplicaEventListSignal(QList<OAIReplicaEvent> summary);
    void getPartitionReplicasEventListSignal(QList<OAIReplicaEvent> summary);
    void getPartitionsEventListSignal(QList<OAIPartitionEvent> summary);
    void getServiceEventListSignal(QList<OAIServiceEvent> summary);
    void getServicesEventListSignal(QList<OAIServiceEvent> summary);


    void getApplicationEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationEvent> summary);
    void getApplicationsEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationEvent> summary);
    void getClusterEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIClusterEvent> summary);
    void getContainersEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContainerInstanceEvent> summary);
    void getCorrelatedEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIFabricEvent> summary);
    void getNodeEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAINodeEvent> summary);
    void getNodesEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAINodeEvent> summary);
    void getPartitionEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPartitionEvent> summary);
    void getPartitionReplicaEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIReplicaEvent> summary);
    void getPartitionReplicasEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIReplicaEvent> summary);
    void getPartitionsEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPartitionEvent> summary);
    void getServiceEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIServiceEvent> summary);
    void getServicesEventListSignalFull(OAIHttpRequestWorker *worker, QList<OAIServiceEvent> summary);

    Q_DECL_DEPRECATED_X("Use getApplicationEventListSignalError() instead")
    void getApplicationEventListSignalE(QList<OAIApplicationEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationEventListSignalError(QList<OAIApplicationEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationsEventListSignalError() instead")
    void getApplicationsEventListSignalE(QList<OAIApplicationEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationsEventListSignalError(QList<OAIApplicationEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterEventListSignalError() instead")
    void getClusterEventListSignalE(QList<OAIClusterEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterEventListSignalError(QList<OAIClusterEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContainersEventListSignalError() instead")
    void getContainersEventListSignalE(QList<OAIContainerInstanceEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContainersEventListSignalError(QList<OAIContainerInstanceEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrelatedEventListSignalError() instead")
    void getCorrelatedEventListSignalE(QList<OAIFabricEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrelatedEventListSignalError(QList<OAIFabricEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeEventListSignalError() instead")
    void getNodeEventListSignalE(QList<OAINodeEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeEventListSignalError(QList<OAINodeEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodesEventListSignalError() instead")
    void getNodesEventListSignalE(QList<OAINodeEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodesEventListSignalError(QList<OAINodeEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionEventListSignalError() instead")
    void getPartitionEventListSignalE(QList<OAIPartitionEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionEventListSignalError(QList<OAIPartitionEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionReplicaEventListSignalError() instead")
    void getPartitionReplicaEventListSignalE(QList<OAIReplicaEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionReplicaEventListSignalError(QList<OAIReplicaEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionReplicasEventListSignalError() instead")
    void getPartitionReplicasEventListSignalE(QList<OAIReplicaEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionReplicasEventListSignalError(QList<OAIReplicaEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionsEventListSignalError() instead")
    void getPartitionsEventListSignalE(QList<OAIPartitionEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionsEventListSignalError(QList<OAIPartitionEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceEventListSignalError() instead")
    void getServiceEventListSignalE(QList<OAIServiceEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceEventListSignalError(QList<OAIServiceEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesEventListSignalError() instead")
    void getServicesEventListSignalE(QList<OAIServiceEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesEventListSignalError(QList<OAIServiceEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getApplicationEventListSignalErrorFull() instead")
    void getApplicationEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationsEventListSignalErrorFull() instead")
    void getApplicationsEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationsEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClusterEventListSignalErrorFull() instead")
    void getClusterEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContainersEventListSignalErrorFull() instead")
    void getContainersEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContainersEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrelatedEventListSignalErrorFull() instead")
    void getCorrelatedEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrelatedEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeEventListSignalErrorFull() instead")
    void getNodeEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodesEventListSignalErrorFull() instead")
    void getNodesEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodesEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionEventListSignalErrorFull() instead")
    void getPartitionEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionReplicaEventListSignalErrorFull() instead")
    void getPartitionReplicaEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionReplicaEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionReplicasEventListSignalErrorFull() instead")
    void getPartitionReplicasEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionReplicasEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionsEventListSignalErrorFull() instead")
    void getPartitionsEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionsEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceEventListSignalErrorFull() instead")
    void getServiceEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesEventListSignalErrorFull() instead")
    void getServicesEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
