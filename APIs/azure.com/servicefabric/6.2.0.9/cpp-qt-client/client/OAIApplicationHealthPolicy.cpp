/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationHealthPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationHealthPolicy::OAIApplicationHealthPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationHealthPolicy::OAIApplicationHealthPolicy() {
    this->initializeModel();
}

OAIApplicationHealthPolicy::~OAIApplicationHealthPolicy() {}

void OAIApplicationHealthPolicy::initializeModel() {

    m_consider_warning_as_error_isSet = false;
    m_consider_warning_as_error_isValid = false;

    m_default_service_type_health_policy_isSet = false;
    m_default_service_type_health_policy_isValid = false;

    m_max_percent_unhealthy_deployed_applications_isSet = false;
    m_max_percent_unhealthy_deployed_applications_isValid = false;

    m_service_type_health_policy_map_isSet = false;
    m_service_type_health_policy_map_isValid = false;
}

void OAIApplicationHealthPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationHealthPolicy::fromJsonObject(QJsonObject json) {

    m_consider_warning_as_error_isValid = ::OpenAPI::fromJsonValue(m_consider_warning_as_error, json[QString("ConsiderWarningAsError")]);
    m_consider_warning_as_error_isSet = !json[QString("ConsiderWarningAsError")].isNull() && m_consider_warning_as_error_isValid;

    m_default_service_type_health_policy_isValid = ::OpenAPI::fromJsonValue(m_default_service_type_health_policy, json[QString("DefaultServiceTypeHealthPolicy")]);
    m_default_service_type_health_policy_isSet = !json[QString("DefaultServiceTypeHealthPolicy")].isNull() && m_default_service_type_health_policy_isValid;

    m_max_percent_unhealthy_deployed_applications_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_deployed_applications, json[QString("MaxPercentUnhealthyDeployedApplications")]);
    m_max_percent_unhealthy_deployed_applications_isSet = !json[QString("MaxPercentUnhealthyDeployedApplications")].isNull() && m_max_percent_unhealthy_deployed_applications_isValid;

    m_service_type_health_policy_map_isValid = ::OpenAPI::fromJsonValue(m_service_type_health_policy_map, json[QString("ServiceTypeHealthPolicyMap")]);
    m_service_type_health_policy_map_isSet = !json[QString("ServiceTypeHealthPolicyMap")].isNull() && m_service_type_health_policy_map_isValid;
}

QString OAIApplicationHealthPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationHealthPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_consider_warning_as_error_isSet) {
        obj.insert(QString("ConsiderWarningAsError"), ::OpenAPI::toJsonValue(m_consider_warning_as_error));
    }
    if (m_default_service_type_health_policy.isSet()) {
        obj.insert(QString("DefaultServiceTypeHealthPolicy"), ::OpenAPI::toJsonValue(m_default_service_type_health_policy));
    }
    if (m_max_percent_unhealthy_deployed_applications_isSet) {
        obj.insert(QString("MaxPercentUnhealthyDeployedApplications"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_deployed_applications));
    }
    if (m_service_type_health_policy_map.size() > 0) {
        obj.insert(QString("ServiceTypeHealthPolicyMap"), ::OpenAPI::toJsonValue(m_service_type_health_policy_map));
    }
    return obj;
}

bool OAIApplicationHealthPolicy::isConsiderWarningAsError() const {
    return m_consider_warning_as_error;
}
void OAIApplicationHealthPolicy::setConsiderWarningAsError(const bool &consider_warning_as_error) {
    m_consider_warning_as_error = consider_warning_as_error;
    m_consider_warning_as_error_isSet = true;
}

bool OAIApplicationHealthPolicy::is_consider_warning_as_error_Set() const{
    return m_consider_warning_as_error_isSet;
}

bool OAIApplicationHealthPolicy::is_consider_warning_as_error_Valid() const{
    return m_consider_warning_as_error_isValid;
}

OAIServiceTypeHealthPolicy OAIApplicationHealthPolicy::getDefaultServiceTypeHealthPolicy() const {
    return m_default_service_type_health_policy;
}
void OAIApplicationHealthPolicy::setDefaultServiceTypeHealthPolicy(const OAIServiceTypeHealthPolicy &default_service_type_health_policy) {
    m_default_service_type_health_policy = default_service_type_health_policy;
    m_default_service_type_health_policy_isSet = true;
}

bool OAIApplicationHealthPolicy::is_default_service_type_health_policy_Set() const{
    return m_default_service_type_health_policy_isSet;
}

bool OAIApplicationHealthPolicy::is_default_service_type_health_policy_Valid() const{
    return m_default_service_type_health_policy_isValid;
}

qint32 OAIApplicationHealthPolicy::getMaxPercentUnhealthyDeployedApplications() const {
    return m_max_percent_unhealthy_deployed_applications;
}
void OAIApplicationHealthPolicy::setMaxPercentUnhealthyDeployedApplications(const qint32 &max_percent_unhealthy_deployed_applications) {
    m_max_percent_unhealthy_deployed_applications = max_percent_unhealthy_deployed_applications;
    m_max_percent_unhealthy_deployed_applications_isSet = true;
}

bool OAIApplicationHealthPolicy::is_max_percent_unhealthy_deployed_applications_Set() const{
    return m_max_percent_unhealthy_deployed_applications_isSet;
}

bool OAIApplicationHealthPolicy::is_max_percent_unhealthy_deployed_applications_Valid() const{
    return m_max_percent_unhealthy_deployed_applications_isValid;
}

QList<OAIServiceTypeHealthPolicyMapItem> OAIApplicationHealthPolicy::getServiceTypeHealthPolicyMap() const {
    return m_service_type_health_policy_map;
}
void OAIApplicationHealthPolicy::setServiceTypeHealthPolicyMap(const QList<OAIServiceTypeHealthPolicyMapItem> &service_type_health_policy_map) {
    m_service_type_health_policy_map = service_type_health_policy_map;
    m_service_type_health_policy_map_isSet = true;
}

bool OAIApplicationHealthPolicy::is_service_type_health_policy_map_Set() const{
    return m_service_type_health_policy_map_isSet;
}

bool OAIApplicationHealthPolicy::is_service_type_health_policy_map_Valid() const{
    return m_service_type_health_policy_map_isValid;
}

bool OAIApplicationHealthPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consider_warning_as_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_type_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_deployed_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_health_policy_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationHealthPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
