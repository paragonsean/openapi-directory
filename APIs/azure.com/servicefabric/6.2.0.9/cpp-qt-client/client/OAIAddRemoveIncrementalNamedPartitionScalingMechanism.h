/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddRemoveIncrementalNamedPartitionScalingMechanism.h
 *
 * Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are in the format &#39;0&#39;,&#39;1&#39;&#39;N-1&#39;
 */

#ifndef OAIAddRemoveIncrementalNamedPartitionScalingMechanism_H
#define OAIAddRemoveIncrementalNamedPartitionScalingMechanism_H

#include <QJsonObject>

#include "OAIScalingMechanismDescription.h"
#include "OAIScalingMechanismKind.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAddRemoveIncrementalNamedPartitionScalingMechanism : public OAIObject {
public:
    OAIAddRemoveIncrementalNamedPartitionScalingMechanism();
    OAIAddRemoveIncrementalNamedPartitionScalingMechanism(QString json);
    ~OAIAddRemoveIncrementalNamedPartitionScalingMechanism() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxPartitionCount() const;
    void setMaxPartitionCount(const qint32 &max_partition_count);
    bool is_max_partition_count_Set() const;
    bool is_max_partition_count_Valid() const;

    qint32 getMinPartitionCount() const;
    void setMinPartitionCount(const qint32 &min_partition_count);
    bool is_min_partition_count_Set() const;
    bool is_min_partition_count_Valid() const;

    qint32 getScaleIncrement() const;
    void setScaleIncrement(const qint32 &scale_increment);
    bool is_scale_increment_Set() const;
    bool is_scale_increment_Valid() const;

    OAIScalingMechanismKind getKind() const;
    void setKind(const OAIScalingMechanismKind &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_partition_count;
    bool m_max_partition_count_isSet;
    bool m_max_partition_count_isValid;

    qint32 m_min_partition_count;
    bool m_min_partition_count_isSet;
    bool m_min_partition_count_isValid;

    qint32 m_scale_increment;
    bool m_scale_increment_isSet;
    bool m_scale_increment_isValid;

    OAIScalingMechanismKind m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddRemoveIncrementalNamedPartitionScalingMechanism)

#endif // OAIAddRemoveIncrementalNamedPartitionScalingMechanism_H
