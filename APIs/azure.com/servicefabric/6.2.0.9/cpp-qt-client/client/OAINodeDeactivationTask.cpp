/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeDeactivationTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeDeactivationTask::OAINodeDeactivationTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeDeactivationTask::OAINodeDeactivationTask() {
    this->initializeModel();
}

OAINodeDeactivationTask::~OAINodeDeactivationTask() {}

void OAINodeDeactivationTask::initializeModel() {

    m_node_deactivation_intent_isSet = false;
    m_node_deactivation_intent_isValid = false;

    m_node_deactivation_task_id_isSet = false;
    m_node_deactivation_task_id_isValid = false;
}

void OAINodeDeactivationTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeDeactivationTask::fromJsonObject(QJsonObject json) {

    m_node_deactivation_intent_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_intent, json[QString("NodeDeactivationIntent")]);
    m_node_deactivation_intent_isSet = !json[QString("NodeDeactivationIntent")].isNull() && m_node_deactivation_intent_isValid;

    m_node_deactivation_task_id_isValid = ::OpenAPI::fromJsonValue(m_node_deactivation_task_id, json[QString("NodeDeactivationTaskId")]);
    m_node_deactivation_task_id_isSet = !json[QString("NodeDeactivationTaskId")].isNull() && m_node_deactivation_task_id_isValid;
}

QString OAINodeDeactivationTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeDeactivationTask::asJsonObject() const {
    QJsonObject obj;
    if (m_node_deactivation_intent.isSet()) {
        obj.insert(QString("NodeDeactivationIntent"), ::OpenAPI::toJsonValue(m_node_deactivation_intent));
    }
    if (m_node_deactivation_task_id.isSet()) {
        obj.insert(QString("NodeDeactivationTaskId"), ::OpenAPI::toJsonValue(m_node_deactivation_task_id));
    }
    return obj;
}

OAINodeDeactivationIntent OAINodeDeactivationTask::getNodeDeactivationIntent() const {
    return m_node_deactivation_intent;
}
void OAINodeDeactivationTask::setNodeDeactivationIntent(const OAINodeDeactivationIntent &node_deactivation_intent) {
    m_node_deactivation_intent = node_deactivation_intent;
    m_node_deactivation_intent_isSet = true;
}

bool OAINodeDeactivationTask::is_node_deactivation_intent_Set() const{
    return m_node_deactivation_intent_isSet;
}

bool OAINodeDeactivationTask::is_node_deactivation_intent_Valid() const{
    return m_node_deactivation_intent_isValid;
}

OAINodeDeactivationTaskId OAINodeDeactivationTask::getNodeDeactivationTaskId() const {
    return m_node_deactivation_task_id;
}
void OAINodeDeactivationTask::setNodeDeactivationTaskId(const OAINodeDeactivationTaskId &node_deactivation_task_id) {
    m_node_deactivation_task_id = node_deactivation_task_id;
    m_node_deactivation_task_id_isSet = true;
}

bool OAINodeDeactivationTask::is_node_deactivation_task_id_Set() const{
    return m_node_deactivation_task_id_isSet;
}

bool OAINodeDeactivationTask::is_node_deactivation_task_id_Valid() const{
    return m_node_deactivation_task_id_isValid;
}

bool OAINodeDeactivationTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_deactivation_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_deactivation_task_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeDeactivationTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
