/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadSessionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadSessionInfo::OAIUploadSessionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadSessionInfo::OAIUploadSessionInfo() {
    this->initializeModel();
}

OAIUploadSessionInfo::~OAIUploadSessionInfo() {}

void OAIUploadSessionInfo::initializeModel() {

    m_expected_ranges_isSet = false;
    m_expected_ranges_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_store_relative_path_isSet = false;
    m_store_relative_path_isValid = false;
}

void OAIUploadSessionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadSessionInfo::fromJsonObject(QJsonObject json) {

    m_expected_ranges_isValid = ::OpenAPI::fromJsonValue(m_expected_ranges, json[QString("ExpectedRanges")]);
    m_expected_ranges_isSet = !json[QString("ExpectedRanges")].isNull() && m_expected_ranges_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("FileSize")]);
    m_file_size_isSet = !json[QString("FileSize")].isNull() && m_file_size_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("ModifiedDate")]);
    m_modified_date_isSet = !json[QString("ModifiedDate")].isNull() && m_modified_date_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;

    m_store_relative_path_isValid = ::OpenAPI::fromJsonValue(m_store_relative_path, json[QString("StoreRelativePath")]);
    m_store_relative_path_isSet = !json[QString("StoreRelativePath")].isNull() && m_store_relative_path_isValid;
}

QString OAIUploadSessionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadSessionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_ranges.size() > 0) {
        obj.insert(QString("ExpectedRanges"), ::OpenAPI::toJsonValue(m_expected_ranges));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("FileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("ModifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_store_relative_path_isSet) {
        obj.insert(QString("StoreRelativePath"), ::OpenAPI::toJsonValue(m_store_relative_path));
    }
    return obj;
}

QList<OAIUploadChunkRange> OAIUploadSessionInfo::getExpectedRanges() const {
    return m_expected_ranges;
}
void OAIUploadSessionInfo::setExpectedRanges(const QList<OAIUploadChunkRange> &expected_ranges) {
    m_expected_ranges = expected_ranges;
    m_expected_ranges_isSet = true;
}

bool OAIUploadSessionInfo::is_expected_ranges_Set() const{
    return m_expected_ranges_isSet;
}

bool OAIUploadSessionInfo::is_expected_ranges_Valid() const{
    return m_expected_ranges_isValid;
}

QString OAIUploadSessionInfo::getFileSize() const {
    return m_file_size;
}
void OAIUploadSessionInfo::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIUploadSessionInfo::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIUploadSessionInfo::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QDateTime OAIUploadSessionInfo::getModifiedDate() const {
    return m_modified_date;
}
void OAIUploadSessionInfo::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIUploadSessionInfo::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIUploadSessionInfo::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIUploadSessionInfo::getSessionId() const {
    return m_session_id;
}
void OAIUploadSessionInfo::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIUploadSessionInfo::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIUploadSessionInfo::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIUploadSessionInfo::getStoreRelativePath() const {
    return m_store_relative_path;
}
void OAIUploadSessionInfo::setStoreRelativePath(const QString &store_relative_path) {
    m_store_relative_path = store_relative_path;
    m_store_relative_path_isSet = true;
}

bool OAIUploadSessionInfo::is_store_relative_path_Set() const{
    return m_store_relative_path_isSet;
}

bool OAIUploadSessionInfo::is_store_relative_path_Valid() const{
    return m_store_relative_path_isValid;
}

bool OAIUploadSessionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadSessionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
