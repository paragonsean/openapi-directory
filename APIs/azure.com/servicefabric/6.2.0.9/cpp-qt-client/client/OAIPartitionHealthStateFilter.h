/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartitionHealthStateFilter.h
 *
 * Defines matching criteria to determine whether a partition should be included as a child of a service in the cluster health chunk. The partitions are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent service and application must be included in the cluster health chunk. One filter can match zero, one or multiple partitions, depending on its properties.
 */

#ifndef OAIPartitionHealthStateFilter_H
#define OAIPartitionHealthStateFilter_H

#include <QJsonObject>

#include "OAIReplicaHealthStateFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReplicaHealthStateFilter;

class OAIPartitionHealthStateFilter : public OAIObject {
public:
    OAIPartitionHealthStateFilter();
    OAIPartitionHealthStateFilter(QString json);
    ~OAIPartitionHealthStateFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHealthStateFilter() const;
    void setHealthStateFilter(const qint32 &health_state_filter);
    bool is_health_state_filter_Set() const;
    bool is_health_state_filter_Valid() const;

    QString getPartitionIdFilter() const;
    void setPartitionIdFilter(const QString &partition_id_filter);
    bool is_partition_id_filter_Set() const;
    bool is_partition_id_filter_Valid() const;

    QList<OAIReplicaHealthStateFilter> getReplicaFilters() const;
    void setReplicaFilters(const QList<OAIReplicaHealthStateFilter> &replica_filters);
    bool is_replica_filters_Set() const;
    bool is_replica_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_health_state_filter;
    bool m_health_state_filter_isSet;
    bool m_health_state_filter_isValid;

    QString m_partition_id_filter;
    bool m_partition_id_filter_isSet;
    bool m_partition_id_filter_isValid;

    QList<OAIReplicaHealthStateFilter> m_replica_filters;
    bool m_replica_filters_isSet;
    bool m_replica_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartitionHealthStateFilter)

#endif // OAIPartitionHealthStateFilter_H
