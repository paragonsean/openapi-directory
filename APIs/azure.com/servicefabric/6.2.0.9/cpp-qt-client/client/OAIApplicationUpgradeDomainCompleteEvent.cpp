/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationUpgradeDomainCompleteEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationUpgradeDomainCompleteEvent::OAIApplicationUpgradeDomainCompleteEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationUpgradeDomainCompleteEvent::OAIApplicationUpgradeDomainCompleteEvent() {
    this->initializeModel();
}

OAIApplicationUpgradeDomainCompleteEvent::~OAIApplicationUpgradeDomainCompleteEvent() {}

void OAIApplicationUpgradeDomainCompleteEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_type_name_isSet = false;
    m_application_type_name_isValid = false;

    m_application_type_version_isSet = false;
    m_application_type_version_isValid = false;

    m_current_application_type_version_isSet = false;
    m_current_application_type_version_isValid = false;

    m_upgrade_domain_elapsed_time_in_ms_isSet = false;
    m_upgrade_domain_elapsed_time_in_ms_isValid = false;

    m_upgrade_domains_isSet = false;
    m_upgrade_domains_isValid = false;

    m_upgrade_state_isSet = false;
    m_upgrade_state_isValid = false;
}

void OAIApplicationUpgradeDomainCompleteEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationUpgradeDomainCompleteEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_application_type_name_isValid = ::OpenAPI::fromJsonValue(m_application_type_name, json[QString("ApplicationTypeName")]);
    m_application_type_name_isSet = !json[QString("ApplicationTypeName")].isNull() && m_application_type_name_isValid;

    m_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_application_type_version, json[QString("ApplicationTypeVersion")]);
    m_application_type_version_isSet = !json[QString("ApplicationTypeVersion")].isNull() && m_application_type_version_isValid;

    m_current_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_current_application_type_version, json[QString("CurrentApplicationTypeVersion")]);
    m_current_application_type_version_isSet = !json[QString("CurrentApplicationTypeVersion")].isNull() && m_current_application_type_version_isValid;

    m_upgrade_domain_elapsed_time_in_ms_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_elapsed_time_in_ms, json[QString("UpgradeDomainElapsedTimeInMs")]);
    m_upgrade_domain_elapsed_time_in_ms_isSet = !json[QString("UpgradeDomainElapsedTimeInMs")].isNull() && m_upgrade_domain_elapsed_time_in_ms_isValid;

    m_upgrade_domains_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domains, json[QString("UpgradeDomains")]);
    m_upgrade_domains_isSet = !json[QString("UpgradeDomains")].isNull() && m_upgrade_domains_isValid;

    m_upgrade_state_isValid = ::OpenAPI::fromJsonValue(m_upgrade_state, json[QString("UpgradeState")]);
    m_upgrade_state_isSet = !json[QString("UpgradeState")].isNull() && m_upgrade_state_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationUpgradeDomainCompleteEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_type_name_isSet) {
        obj.insert(QString("ApplicationTypeName"), ::OpenAPI::toJsonValue(m_application_type_name));
    }
    if (m_application_type_version_isSet) {
        obj.insert(QString("ApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_application_type_version));
    }
    if (m_current_application_type_version_isSet) {
        obj.insert(QString("CurrentApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_current_application_type_version));
    }
    if (m_upgrade_domain_elapsed_time_in_ms_isSet) {
        obj.insert(QString("UpgradeDomainElapsedTimeInMs"), ::OpenAPI::toJsonValue(m_upgrade_domain_elapsed_time_in_ms));
    }
    if (m_upgrade_domains_isSet) {
        obj.insert(QString("UpgradeDomains"), ::OpenAPI::toJsonValue(m_upgrade_domains));
    }
    if (m_upgrade_state_isSet) {
        obj.insert(QString("UpgradeState"), ::OpenAPI::toJsonValue(m_upgrade_state));
    }
    return obj;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIApplicationUpgradeDomainCompleteEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIApplicationUpgradeDomainCompleteEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIApplicationUpgradeDomainCompleteEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIApplicationUpgradeDomainCompleteEvent::getKind() const {
    return m_kind;
}
void OAIApplicationUpgradeDomainCompleteEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIApplicationUpgradeDomainCompleteEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIApplicationUpgradeDomainCompleteEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getApplicationId() const {
    return m_application_id;
}
void OAIApplicationUpgradeDomainCompleteEvent::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getApplicationTypeName() const {
    return m_application_type_name;
}
void OAIApplicationUpgradeDomainCompleteEvent::setApplicationTypeName(const QString &application_type_name) {
    m_application_type_name = application_type_name;
    m_application_type_name_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_type_name_Set() const{
    return m_application_type_name_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_type_name_Valid() const{
    return m_application_type_name_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getApplicationTypeVersion() const {
    return m_application_type_version;
}
void OAIApplicationUpgradeDomainCompleteEvent::setApplicationTypeVersion(const QString &application_type_version) {
    m_application_type_version = application_type_version;
    m_application_type_version_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_type_version_Set() const{
    return m_application_type_version_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_application_type_version_Valid() const{
    return m_application_type_version_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getCurrentApplicationTypeVersion() const {
    return m_current_application_type_version;
}
void OAIApplicationUpgradeDomainCompleteEvent::setCurrentApplicationTypeVersion(const QString &current_application_type_version) {
    m_current_application_type_version = current_application_type_version;
    m_current_application_type_version_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_current_application_type_version_Set() const{
    return m_current_application_type_version_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_current_application_type_version_Valid() const{
    return m_current_application_type_version_isValid;
}

double OAIApplicationUpgradeDomainCompleteEvent::getUpgradeDomainElapsedTimeInMs() const {
    return m_upgrade_domain_elapsed_time_in_ms;
}
void OAIApplicationUpgradeDomainCompleteEvent::setUpgradeDomainElapsedTimeInMs(const double &upgrade_domain_elapsed_time_in_ms) {
    m_upgrade_domain_elapsed_time_in_ms = upgrade_domain_elapsed_time_in_ms;
    m_upgrade_domain_elapsed_time_in_ms_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_domain_elapsed_time_in_ms_Set() const{
    return m_upgrade_domain_elapsed_time_in_ms_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_domain_elapsed_time_in_ms_Valid() const{
    return m_upgrade_domain_elapsed_time_in_ms_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getUpgradeDomains() const {
    return m_upgrade_domains;
}
void OAIApplicationUpgradeDomainCompleteEvent::setUpgradeDomains(const QString &upgrade_domains) {
    m_upgrade_domains = upgrade_domains;
    m_upgrade_domains_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_domains_Set() const{
    return m_upgrade_domains_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_domains_Valid() const{
    return m_upgrade_domains_isValid;
}

QString OAIApplicationUpgradeDomainCompleteEvent::getUpgradeState() const {
    return m_upgrade_state;
}
void OAIApplicationUpgradeDomainCompleteEvent::setUpgradeState(const QString &upgrade_state) {
    m_upgrade_state = upgrade_state;
    m_upgrade_state_isSet = true;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_state_Set() const{
    return m_upgrade_state_isSet;
}

bool OAIApplicationUpgradeDomainCompleteEvent::is_upgrade_state_Valid() const{
    return m_upgrade_state_isValid;
}

bool OAIApplicationUpgradeDomainCompleteEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_elapsed_time_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationUpgradeDomainCompleteEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_application_id_isValid && m_application_type_name_isValid && m_application_type_version_isValid && m_current_application_type_version_isValid && m_upgrade_domain_elapsed_time_in_ms_isValid && m_upgrade_domains_isValid && m_upgrade_state_isValid && true;
}

} // namespace OpenAPI
