/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteReplicatorAcknowledgementDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteReplicatorAcknowledgementDetail::OAIRemoteReplicatorAcknowledgementDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteReplicatorAcknowledgementDetail::OAIRemoteReplicatorAcknowledgementDetail() {
    this->initializeModel();
}

OAIRemoteReplicatorAcknowledgementDetail::~OAIRemoteReplicatorAcknowledgementDetail() {}

void OAIRemoteReplicatorAcknowledgementDetail::initializeModel() {

    m_average_apply_duration_isSet = false;
    m_average_apply_duration_isValid = false;

    m_average_receive_duration_isSet = false;
    m_average_receive_duration_isValid = false;

    m_not_received_count_isSet = false;
    m_not_received_count_isValid = false;

    m_received_and_not_applied_count_isSet = false;
    m_received_and_not_applied_count_isValid = false;
}

void OAIRemoteReplicatorAcknowledgementDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteReplicatorAcknowledgementDetail::fromJsonObject(QJsonObject json) {

    m_average_apply_duration_isValid = ::OpenAPI::fromJsonValue(m_average_apply_duration, json[QString("AverageApplyDuration")]);
    m_average_apply_duration_isSet = !json[QString("AverageApplyDuration")].isNull() && m_average_apply_duration_isValid;

    m_average_receive_duration_isValid = ::OpenAPI::fromJsonValue(m_average_receive_duration, json[QString("AverageReceiveDuration")]);
    m_average_receive_duration_isSet = !json[QString("AverageReceiveDuration")].isNull() && m_average_receive_duration_isValid;

    m_not_received_count_isValid = ::OpenAPI::fromJsonValue(m_not_received_count, json[QString("NotReceivedCount")]);
    m_not_received_count_isSet = !json[QString("NotReceivedCount")].isNull() && m_not_received_count_isValid;

    m_received_and_not_applied_count_isValid = ::OpenAPI::fromJsonValue(m_received_and_not_applied_count, json[QString("ReceivedAndNotAppliedCount")]);
    m_received_and_not_applied_count_isSet = !json[QString("ReceivedAndNotAppliedCount")].isNull() && m_received_and_not_applied_count_isValid;
}

QString OAIRemoteReplicatorAcknowledgementDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteReplicatorAcknowledgementDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_average_apply_duration_isSet) {
        obj.insert(QString("AverageApplyDuration"), ::OpenAPI::toJsonValue(m_average_apply_duration));
    }
    if (m_average_receive_duration_isSet) {
        obj.insert(QString("AverageReceiveDuration"), ::OpenAPI::toJsonValue(m_average_receive_duration));
    }
    if (m_not_received_count_isSet) {
        obj.insert(QString("NotReceivedCount"), ::OpenAPI::toJsonValue(m_not_received_count));
    }
    if (m_received_and_not_applied_count_isSet) {
        obj.insert(QString("ReceivedAndNotAppliedCount"), ::OpenAPI::toJsonValue(m_received_and_not_applied_count));
    }
    return obj;
}

QString OAIRemoteReplicatorAcknowledgementDetail::getAverageApplyDuration() const {
    return m_average_apply_duration;
}
void OAIRemoteReplicatorAcknowledgementDetail::setAverageApplyDuration(const QString &average_apply_duration) {
    m_average_apply_duration = average_apply_duration;
    m_average_apply_duration_isSet = true;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_average_apply_duration_Set() const{
    return m_average_apply_duration_isSet;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_average_apply_duration_Valid() const{
    return m_average_apply_duration_isValid;
}

QString OAIRemoteReplicatorAcknowledgementDetail::getAverageReceiveDuration() const {
    return m_average_receive_duration;
}
void OAIRemoteReplicatorAcknowledgementDetail::setAverageReceiveDuration(const QString &average_receive_duration) {
    m_average_receive_duration = average_receive_duration;
    m_average_receive_duration_isSet = true;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_average_receive_duration_Set() const{
    return m_average_receive_duration_isSet;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_average_receive_duration_Valid() const{
    return m_average_receive_duration_isValid;
}

QString OAIRemoteReplicatorAcknowledgementDetail::getNotReceivedCount() const {
    return m_not_received_count;
}
void OAIRemoteReplicatorAcknowledgementDetail::setNotReceivedCount(const QString &not_received_count) {
    m_not_received_count = not_received_count;
    m_not_received_count_isSet = true;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_not_received_count_Set() const{
    return m_not_received_count_isSet;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_not_received_count_Valid() const{
    return m_not_received_count_isValid;
}

QString OAIRemoteReplicatorAcknowledgementDetail::getReceivedAndNotAppliedCount() const {
    return m_received_and_not_applied_count;
}
void OAIRemoteReplicatorAcknowledgementDetail::setReceivedAndNotAppliedCount(const QString &received_and_not_applied_count) {
    m_received_and_not_applied_count = received_and_not_applied_count;
    m_received_and_not_applied_count_isSet = true;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_received_and_not_applied_count_Set() const{
    return m_received_and_not_applied_count_isSet;
}

bool OAIRemoteReplicatorAcknowledgementDetail::is_received_and_not_applied_count_Valid() const{
    return m_received_and_not_applied_count_isValid;
}

bool OAIRemoteReplicatorAcknowledgementDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_apply_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_receive_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_received_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_and_not_applied_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteReplicatorAcknowledgementDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
