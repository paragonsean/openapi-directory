/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceFromTemplateDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceFromTemplateDescription::OAIServiceFromTemplateDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceFromTemplateDescription::OAIServiceFromTemplateDescription() {
    this->initializeModel();
}

OAIServiceFromTemplateDescription::~OAIServiceFromTemplateDescription() {}

void OAIServiceFromTemplateDescription::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_initialization_data_isSet = false;
    m_initialization_data_isValid = false;

    m_service_dns_name_isSet = false;
    m_service_dns_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_package_activation_mode_isSet = false;
    m_service_package_activation_mode_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;
}

void OAIServiceFromTemplateDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceFromTemplateDescription::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_initialization_data_isValid = ::OpenAPI::fromJsonValue(m_initialization_data, json[QString("InitializationData")]);
    m_initialization_data_isSet = !json[QString("InitializationData")].isNull() && m_initialization_data_isValid;

    m_service_dns_name_isValid = ::OpenAPI::fromJsonValue(m_service_dns_name, json[QString("ServiceDnsName")]);
    m_service_dns_name_isSet = !json[QString("ServiceDnsName")].isNull() && m_service_dns_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_package_activation_mode_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_mode, json[QString("ServicePackageActivationMode")]);
    m_service_package_activation_mode_isSet = !json[QString("ServicePackageActivationMode")].isNull() && m_service_package_activation_mode_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;
}

QString OAIServiceFromTemplateDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceFromTemplateDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_initialization_data.size() > 0) {
        obj.insert(QString("InitializationData"), ::OpenAPI::toJsonValue(m_initialization_data));
    }
    if (m_service_dns_name_isSet) {
        obj.insert(QString("ServiceDnsName"), ::OpenAPI::toJsonValue(m_service_dns_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_package_activation_mode.isSet()) {
        obj.insert(QString("ServicePackageActivationMode"), ::OpenAPI::toJsonValue(m_service_package_activation_mode));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    return obj;
}

QString OAIServiceFromTemplateDescription::getApplicationName() const {
    return m_application_name;
}
void OAIServiceFromTemplateDescription::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIServiceFromTemplateDescription::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QList<qint32> OAIServiceFromTemplateDescription::getInitializationData() const {
    return m_initialization_data;
}
void OAIServiceFromTemplateDescription::setInitializationData(const QList<qint32> &initialization_data) {
    m_initialization_data = initialization_data;
    m_initialization_data_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_initialization_data_Set() const{
    return m_initialization_data_isSet;
}

bool OAIServiceFromTemplateDescription::is_initialization_data_Valid() const{
    return m_initialization_data_isValid;
}

QString OAIServiceFromTemplateDescription::getServiceDnsName() const {
    return m_service_dns_name;
}
void OAIServiceFromTemplateDescription::setServiceDnsName(const QString &service_dns_name) {
    m_service_dns_name = service_dns_name;
    m_service_dns_name_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_service_dns_name_Set() const{
    return m_service_dns_name_isSet;
}

bool OAIServiceFromTemplateDescription::is_service_dns_name_Valid() const{
    return m_service_dns_name_isValid;
}

QString OAIServiceFromTemplateDescription::getServiceName() const {
    return m_service_name;
}
void OAIServiceFromTemplateDescription::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceFromTemplateDescription::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIServicePackageActivationMode OAIServiceFromTemplateDescription::getServicePackageActivationMode() const {
    return m_service_package_activation_mode;
}
void OAIServiceFromTemplateDescription::setServicePackageActivationMode(const OAIServicePackageActivationMode &service_package_activation_mode) {
    m_service_package_activation_mode = service_package_activation_mode;
    m_service_package_activation_mode_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_service_package_activation_mode_Set() const{
    return m_service_package_activation_mode_isSet;
}

bool OAIServiceFromTemplateDescription::is_service_package_activation_mode_Valid() const{
    return m_service_package_activation_mode_isValid;
}

QString OAIServiceFromTemplateDescription::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIServiceFromTemplateDescription::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIServiceFromTemplateDescription::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIServiceFromTemplateDescription::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

bool OAIServiceFromTemplateDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceFromTemplateDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_service_name_isValid && m_service_type_name_isValid && true;
}

} // namespace OpenAPI
