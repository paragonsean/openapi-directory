/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecondaryActiveReplicatorStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecondaryActiveReplicatorStatus::OAISecondaryActiveReplicatorStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecondaryActiveReplicatorStatus::OAISecondaryActiveReplicatorStatus() {
    this->initializeModel();
}

OAISecondaryActiveReplicatorStatus::~OAISecondaryActiveReplicatorStatus() {}

void OAISecondaryActiveReplicatorStatus::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_copy_queue_status_isSet = false;
    m_copy_queue_status_isValid = false;

    m_is_in_build_isSet = false;
    m_is_in_build_isValid = false;

    m_last_acknowledgement_sent_time_utc_isSet = false;
    m_last_acknowledgement_sent_time_utc_isValid = false;

    m_last_copy_operation_received_time_utc_isSet = false;
    m_last_copy_operation_received_time_utc_isValid = false;

    m_last_replication_operation_received_time_utc_isSet = false;
    m_last_replication_operation_received_time_utc_isValid = false;

    m_replication_queue_status_isSet = false;
    m_replication_queue_status_isValid = false;
}

void OAISecondaryActiveReplicatorStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecondaryActiveReplicatorStatus::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_copy_queue_status_isValid = ::OpenAPI::fromJsonValue(m_copy_queue_status, json[QString("CopyQueueStatus")]);
    m_copy_queue_status_isSet = !json[QString("CopyQueueStatus")].isNull() && m_copy_queue_status_isValid;

    m_is_in_build_isValid = ::OpenAPI::fromJsonValue(m_is_in_build, json[QString("IsInBuild")]);
    m_is_in_build_isSet = !json[QString("IsInBuild")].isNull() && m_is_in_build_isValid;

    m_last_acknowledgement_sent_time_utc_isValid = ::OpenAPI::fromJsonValue(m_last_acknowledgement_sent_time_utc, json[QString("LastAcknowledgementSentTimeUtc")]);
    m_last_acknowledgement_sent_time_utc_isSet = !json[QString("LastAcknowledgementSentTimeUtc")].isNull() && m_last_acknowledgement_sent_time_utc_isValid;

    m_last_copy_operation_received_time_utc_isValid = ::OpenAPI::fromJsonValue(m_last_copy_operation_received_time_utc, json[QString("LastCopyOperationReceivedTimeUtc")]);
    m_last_copy_operation_received_time_utc_isSet = !json[QString("LastCopyOperationReceivedTimeUtc")].isNull() && m_last_copy_operation_received_time_utc_isValid;

    m_last_replication_operation_received_time_utc_isValid = ::OpenAPI::fromJsonValue(m_last_replication_operation_received_time_utc, json[QString("LastReplicationOperationReceivedTimeUtc")]);
    m_last_replication_operation_received_time_utc_isSet = !json[QString("LastReplicationOperationReceivedTimeUtc")].isNull() && m_last_replication_operation_received_time_utc_isValid;

    m_replication_queue_status_isValid = ::OpenAPI::fromJsonValue(m_replication_queue_status, json[QString("ReplicationQueueStatus")]);
    m_replication_queue_status_isSet = !json[QString("ReplicationQueueStatus")].isNull() && m_replication_queue_status_isValid;
}

QString OAISecondaryActiveReplicatorStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecondaryActiveReplicatorStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_copy_queue_status.isSet()) {
        obj.insert(QString("CopyQueueStatus"), ::OpenAPI::toJsonValue(m_copy_queue_status));
    }
    if (m_is_in_build_isSet) {
        obj.insert(QString("IsInBuild"), ::OpenAPI::toJsonValue(m_is_in_build));
    }
    if (m_last_acknowledgement_sent_time_utc_isSet) {
        obj.insert(QString("LastAcknowledgementSentTimeUtc"), ::OpenAPI::toJsonValue(m_last_acknowledgement_sent_time_utc));
    }
    if (m_last_copy_operation_received_time_utc_isSet) {
        obj.insert(QString("LastCopyOperationReceivedTimeUtc"), ::OpenAPI::toJsonValue(m_last_copy_operation_received_time_utc));
    }
    if (m_last_replication_operation_received_time_utc_isSet) {
        obj.insert(QString("LastReplicationOperationReceivedTimeUtc"), ::OpenAPI::toJsonValue(m_last_replication_operation_received_time_utc));
    }
    if (m_replication_queue_status.isSet()) {
        obj.insert(QString("ReplicationQueueStatus"), ::OpenAPI::toJsonValue(m_replication_queue_status));
    }
    return obj;
}

OAIReplicaRole OAISecondaryActiveReplicatorStatus::getKind() const {
    return m_kind;
}
void OAISecondaryActiveReplicatorStatus::setKind(const OAIReplicaRole &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIReplicatorQueueStatus OAISecondaryActiveReplicatorStatus::getCopyQueueStatus() const {
    return m_copy_queue_status;
}
void OAISecondaryActiveReplicatorStatus::setCopyQueueStatus(const OAIReplicatorQueueStatus &copy_queue_status) {
    m_copy_queue_status = copy_queue_status;
    m_copy_queue_status_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_copy_queue_status_Set() const{
    return m_copy_queue_status_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_copy_queue_status_Valid() const{
    return m_copy_queue_status_isValid;
}

bool OAISecondaryActiveReplicatorStatus::isIsInBuild() const {
    return m_is_in_build;
}
void OAISecondaryActiveReplicatorStatus::setIsInBuild(const bool &is_in_build) {
    m_is_in_build = is_in_build;
    m_is_in_build_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_is_in_build_Set() const{
    return m_is_in_build_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_is_in_build_Valid() const{
    return m_is_in_build_isValid;
}

QDateTime OAISecondaryActiveReplicatorStatus::getLastAcknowledgementSentTimeUtc() const {
    return m_last_acknowledgement_sent_time_utc;
}
void OAISecondaryActiveReplicatorStatus::setLastAcknowledgementSentTimeUtc(const QDateTime &last_acknowledgement_sent_time_utc) {
    m_last_acknowledgement_sent_time_utc = last_acknowledgement_sent_time_utc;
    m_last_acknowledgement_sent_time_utc_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_last_acknowledgement_sent_time_utc_Set() const{
    return m_last_acknowledgement_sent_time_utc_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_last_acknowledgement_sent_time_utc_Valid() const{
    return m_last_acknowledgement_sent_time_utc_isValid;
}

QDateTime OAISecondaryActiveReplicatorStatus::getLastCopyOperationReceivedTimeUtc() const {
    return m_last_copy_operation_received_time_utc;
}
void OAISecondaryActiveReplicatorStatus::setLastCopyOperationReceivedTimeUtc(const QDateTime &last_copy_operation_received_time_utc) {
    m_last_copy_operation_received_time_utc = last_copy_operation_received_time_utc;
    m_last_copy_operation_received_time_utc_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_last_copy_operation_received_time_utc_Set() const{
    return m_last_copy_operation_received_time_utc_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_last_copy_operation_received_time_utc_Valid() const{
    return m_last_copy_operation_received_time_utc_isValid;
}

QDateTime OAISecondaryActiveReplicatorStatus::getLastReplicationOperationReceivedTimeUtc() const {
    return m_last_replication_operation_received_time_utc;
}
void OAISecondaryActiveReplicatorStatus::setLastReplicationOperationReceivedTimeUtc(const QDateTime &last_replication_operation_received_time_utc) {
    m_last_replication_operation_received_time_utc = last_replication_operation_received_time_utc;
    m_last_replication_operation_received_time_utc_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_last_replication_operation_received_time_utc_Set() const{
    return m_last_replication_operation_received_time_utc_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_last_replication_operation_received_time_utc_Valid() const{
    return m_last_replication_operation_received_time_utc_isValid;
}

OAIReplicatorQueueStatus OAISecondaryActiveReplicatorStatus::getReplicationQueueStatus() const {
    return m_replication_queue_status;
}
void OAISecondaryActiveReplicatorStatus::setReplicationQueueStatus(const OAIReplicatorQueueStatus &replication_queue_status) {
    m_replication_queue_status = replication_queue_status;
    m_replication_queue_status_isSet = true;
}

bool OAISecondaryActiveReplicatorStatus::is_replication_queue_status_Set() const{
    return m_replication_queue_status_isSet;
}

bool OAISecondaryActiveReplicatorStatus::is_replication_queue_status_Valid() const{
    return m_replication_queue_status_isValid;
}

bool OAISecondaryActiveReplicatorStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_queue_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_acknowledgement_sent_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_copy_operation_received_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_replication_operation_received_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_queue_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecondaryActiveReplicatorStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
