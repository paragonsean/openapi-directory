/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationTypeInfo::OAIApplicationTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationTypeInfo::OAIApplicationTypeInfo() {
    this->initializeModel();
}

OAIApplicationTypeInfo::~OAIApplicationTypeInfo() {}

void OAIApplicationTypeInfo::initializeModel() {

    m_application_type_definition_kind_isSet = false;
    m_application_type_definition_kind_isValid = false;

    m_default_parameter_list_isSet = false;
    m_default_parameter_list_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApplicationTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationTypeInfo::fromJsonObject(QJsonObject json) {

    m_application_type_definition_kind_isValid = ::OpenAPI::fromJsonValue(m_application_type_definition_kind, json[QString("ApplicationTypeDefinitionKind")]);
    m_application_type_definition_kind_isSet = !json[QString("ApplicationTypeDefinitionKind")].isNull() && m_application_type_definition_kind_isValid;

    m_default_parameter_list_isValid = ::OpenAPI::fromJsonValue(m_default_parameter_list, json[QString("DefaultParameterList")]);
    m_default_parameter_list_isSet = !json[QString("DefaultParameterList")].isNull() && m_default_parameter_list_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("StatusDetails")]);
    m_status_details_isSet = !json[QString("StatusDetails")].isNull() && m_status_details_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIApplicationTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_definition_kind.isSet()) {
        obj.insert(QString("ApplicationTypeDefinitionKind"), ::OpenAPI::toJsonValue(m_application_type_definition_kind));
    }
    if (m_default_parameter_list.size() > 0) {
        obj.insert(QString("DefaultParameterList"), ::OpenAPI::toJsonValue(m_default_parameter_list));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_details_isSet) {
        obj.insert(QString("StatusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIApplicationTypeDefinitionKind OAIApplicationTypeInfo::getApplicationTypeDefinitionKind() const {
    return m_application_type_definition_kind;
}
void OAIApplicationTypeInfo::setApplicationTypeDefinitionKind(const OAIApplicationTypeDefinitionKind &application_type_definition_kind) {
    m_application_type_definition_kind = application_type_definition_kind;
    m_application_type_definition_kind_isSet = true;
}

bool OAIApplicationTypeInfo::is_application_type_definition_kind_Set() const{
    return m_application_type_definition_kind_isSet;
}

bool OAIApplicationTypeInfo::is_application_type_definition_kind_Valid() const{
    return m_application_type_definition_kind_isValid;
}

QList<OAIApplicationParameter> OAIApplicationTypeInfo::getDefaultParameterList() const {
    return m_default_parameter_list;
}
void OAIApplicationTypeInfo::setDefaultParameterList(const QList<OAIApplicationParameter> &default_parameter_list) {
    m_default_parameter_list = default_parameter_list;
    m_default_parameter_list_isSet = true;
}

bool OAIApplicationTypeInfo::is_default_parameter_list_Set() const{
    return m_default_parameter_list_isSet;
}

bool OAIApplicationTypeInfo::is_default_parameter_list_Valid() const{
    return m_default_parameter_list_isValid;
}

QString OAIApplicationTypeInfo::getName() const {
    return m_name;
}
void OAIApplicationTypeInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationTypeInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationTypeInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIApplicationTypeStatus OAIApplicationTypeInfo::getStatus() const {
    return m_status;
}
void OAIApplicationTypeInfo::setStatus(const OAIApplicationTypeStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationTypeInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationTypeInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApplicationTypeInfo::getStatusDetails() const {
    return m_status_details;
}
void OAIApplicationTypeInfo::setStatusDetails(const QString &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIApplicationTypeInfo::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIApplicationTypeInfo::is_status_details_Valid() const{
    return m_status_details_isValid;
}

QString OAIApplicationTypeInfo::getVersion() const {
    return m_version;
}
void OAIApplicationTypeInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApplicationTypeInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApplicationTypeInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApplicationTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_definition_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_parameter_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
