/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionBackupConfigurationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionBackupConfigurationInfo::OAIPartitionBackupConfigurationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionBackupConfigurationInfo::OAIPartitionBackupConfigurationInfo() {
    this->initializeModel();
}

OAIPartitionBackupConfigurationInfo::~OAIPartitionBackupConfigurationInfo() {}

void OAIPartitionBackupConfigurationInfo::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_policy_inherited_from_isSet = false;
    m_policy_inherited_from_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_suspension_info_isSet = false;
    m_suspension_info_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIPartitionBackupConfigurationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionBackupConfigurationInfo::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_policy_inherited_from_isValid = ::OpenAPI::fromJsonValue(m_policy_inherited_from, json[QString("PolicyInheritedFrom")]);
    m_policy_inherited_from_isSet = !json[QString("PolicyInheritedFrom")].isNull() && m_policy_inherited_from_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("PolicyName")]);
    m_policy_name_isSet = !json[QString("PolicyName")].isNull() && m_policy_name_isValid;

    m_suspension_info_isValid = ::OpenAPI::fromJsonValue(m_suspension_info, json[QString("SuspensionInfo")]);
    m_suspension_info_isSet = !json[QString("SuspensionInfo")].isNull() && m_suspension_info_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIPartitionBackupConfigurationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionBackupConfigurationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_policy_inherited_from.isSet()) {
        obj.insert(QString("PolicyInheritedFrom"), ::OpenAPI::toJsonValue(m_policy_inherited_from));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("PolicyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_suspension_info.isSet()) {
        obj.insert(QString("SuspensionInfo"), ::OpenAPI::toJsonValue(m_suspension_info));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

OAIBackupEntityKind OAIPartitionBackupConfigurationInfo::getKind() const {
    return m_kind;
}
void OAIPartitionBackupConfigurationInfo::setKind(const OAIBackupEntityKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIBackupPolicyScope OAIPartitionBackupConfigurationInfo::getPolicyInheritedFrom() const {
    return m_policy_inherited_from;
}
void OAIPartitionBackupConfigurationInfo::setPolicyInheritedFrom(const OAIBackupPolicyScope &policy_inherited_from) {
    m_policy_inherited_from = policy_inherited_from;
    m_policy_inherited_from_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_policy_inherited_from_Set() const{
    return m_policy_inherited_from_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_policy_inherited_from_Valid() const{
    return m_policy_inherited_from_isValid;
}

QString OAIPartitionBackupConfigurationInfo::getPolicyName() const {
    return m_policy_name;
}
void OAIPartitionBackupConfigurationInfo::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

OAIBackupSuspensionInfo OAIPartitionBackupConfigurationInfo::getSuspensionInfo() const {
    return m_suspension_info;
}
void OAIPartitionBackupConfigurationInfo::setSuspensionInfo(const OAIBackupSuspensionInfo &suspension_info) {
    m_suspension_info = suspension_info;
    m_suspension_info_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_suspension_info_Set() const{
    return m_suspension_info_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_suspension_info_Valid() const{
    return m_suspension_info_isValid;
}

QString OAIPartitionBackupConfigurationInfo::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionBackupConfigurationInfo::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIPartitionBackupConfigurationInfo::getServiceName() const {
    return m_service_name;
}
void OAIPartitionBackupConfigurationInfo::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIPartitionBackupConfigurationInfo::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIPartitionBackupConfigurationInfo::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIPartitionBackupConfigurationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_inherited_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionBackupConfigurationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && true;
}

} // namespace OpenAPI
