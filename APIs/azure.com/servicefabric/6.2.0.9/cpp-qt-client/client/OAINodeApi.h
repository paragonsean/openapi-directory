/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINodeApi_H
#define OAI_OAINodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClusterHealthPolicy.h"
#include "OAIDeactivationIntentDescription.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAINodeHealth.h"
#include "OAINodeInfo.h"
#include "OAINodeLoadInfo.h"
#include "OAIPagedNodeInfoList.h"
#include "OAIRestartNodeDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINodeApi : public QObject {
    Q_OBJECT

public:
    OAINodeApi(const int timeOut = 0);
    ~OAINodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  deactivation_intent_description OAIDeactivationIntentDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void disableNode(const QString &api_version, const QString &node_name, const OAIDeactivationIntentDescription &deactivation_intent_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void enableNode(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNodeHealth(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  cluster_health_policy OAIClusterHealthPolicy [optional]
    */
    virtual void getNodeHealthUsingPolicy(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIClusterHealthPolicy> &cluster_health_policy = ::OpenAPI::OptionalParam<OAIClusterHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNodeInfo(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  node_status_filter QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNodeInfoList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_status_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getNodeLoadInfo(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void removeNodeState(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportNodeHealth(const QString &api_version, const QString &node_name, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  restart_node_description OAIRestartNodeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void restartNode(const QString &api_version, const QString &node_name, const OAIRestartNodeDescription &restart_node_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disableNodeCallback(OAIHttpRequestWorker *worker);
    void enableNodeCallback(OAIHttpRequestWorker *worker);
    void getNodeHealthCallback(OAIHttpRequestWorker *worker);
    void getNodeHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getNodeInfoCallback(OAIHttpRequestWorker *worker);
    void getNodeInfoListCallback(OAIHttpRequestWorker *worker);
    void getNodeLoadInfoCallback(OAIHttpRequestWorker *worker);
    void removeNodeStateCallback(OAIHttpRequestWorker *worker);
    void reportNodeHealthCallback(OAIHttpRequestWorker *worker);
    void restartNodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disableNodeSignal();
    void enableNodeSignal();
    void getNodeHealthSignal(OAINodeHealth summary);
    void getNodeHealthUsingPolicySignal(OAINodeHealth summary);
    void getNodeInfoSignal(OAINodeInfo summary);
    void getNodeInfoListSignal(OAIPagedNodeInfoList summary);
    void getNodeLoadInfoSignal(OAINodeLoadInfo summary);
    void removeNodeStateSignal();
    void reportNodeHealthSignal();
    void restartNodeSignal();


    void disableNodeSignalFull(OAIHttpRequestWorker *worker);
    void enableNodeSignalFull(OAIHttpRequestWorker *worker);
    void getNodeHealthSignalFull(OAIHttpRequestWorker *worker, OAINodeHealth summary);
    void getNodeHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAINodeHealth summary);
    void getNodeInfoSignalFull(OAIHttpRequestWorker *worker, OAINodeInfo summary);
    void getNodeInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedNodeInfoList summary);
    void getNodeLoadInfoSignalFull(OAIHttpRequestWorker *worker, OAINodeLoadInfo summary);
    void removeNodeStateSignalFull(OAIHttpRequestWorker *worker);
    void reportNodeHealthSignalFull(OAIHttpRequestWorker *worker);
    void restartNodeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use disableNodeSignalError() instead")
    void disableNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableNodeSignalError() instead")
    void enableNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeHealthSignalError() instead")
    void getNodeHealthSignalE(OAINodeHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeHealthSignalError(OAINodeHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeHealthUsingPolicySignalError() instead")
    void getNodeHealthUsingPolicySignalE(OAINodeHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeHealthUsingPolicySignalError(OAINodeHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeInfoSignalError() instead")
    void getNodeInfoSignalE(OAINodeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoSignalError(OAINodeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeInfoListSignalError() instead")
    void getNodeInfoListSignalE(OAIPagedNodeInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoListSignalError(OAIPagedNodeInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeLoadInfoSignalError() instead")
    void getNodeLoadInfoSignalE(OAINodeLoadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeLoadInfoSignalError(OAINodeLoadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeStateSignalError() instead")
    void removeNodeStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportNodeHealthSignalError() instead")
    void reportNodeHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportNodeHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartNodeSignalError() instead")
    void restartNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restartNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disableNodeSignalErrorFull() instead")
    void disableNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableNodeSignalErrorFull() instead")
    void enableNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeHealthSignalErrorFull() instead")
    void getNodeHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeHealthUsingPolicySignalErrorFull() instead")
    void getNodeHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeInfoSignalErrorFull() instead")
    void getNodeInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeInfoListSignalErrorFull() instead")
    void getNodeInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeLoadInfoSignalErrorFull() instead")
    void getNodeLoadInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeLoadInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeStateSignalErrorFull() instead")
    void removeNodeStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportNodeHealthSignalErrorFull() instead")
    void reportNodeHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportNodeHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restartNodeSignalErrorFull() instead")
    void restartNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restartNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
