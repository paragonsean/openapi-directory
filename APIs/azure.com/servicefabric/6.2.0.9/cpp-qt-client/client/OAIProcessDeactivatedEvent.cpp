/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessDeactivatedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessDeactivatedEvent::OAIProcessDeactivatedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessDeactivatedEvent::OAIProcessDeactivatedEvent() {
    this->initializeModel();
}

OAIProcessDeactivatedEvent::~OAIProcessDeactivatedEvent() {}

void OAIProcessDeactivatedEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_code_package_name_isSet = false;
    m_code_package_name_isValid = false;

    m_entry_point_type_isSet = false;
    m_entry_point_type_isValid = false;

    m_exe_name_isSet = false;
    m_exe_name_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_host_id_isSet = false;
    m_host_id_isValid = false;

    m_is_exclusive_isSet = false;
    m_is_exclusive_isValid = false;

    m_process_id_isSet = false;
    m_process_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_package_activation_id_isSet = false;
    m_service_package_activation_id_isValid = false;

    m_service_package_name_isSet = false;
    m_service_package_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_unexpected_termination_isSet = false;
    m_unexpected_termination_isValid = false;
}

void OAIProcessDeactivatedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessDeactivatedEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_code_package_name_isValid = ::OpenAPI::fromJsonValue(m_code_package_name, json[QString("CodePackageName")]);
    m_code_package_name_isSet = !json[QString("CodePackageName")].isNull() && m_code_package_name_isValid;

    m_entry_point_type_isValid = ::OpenAPI::fromJsonValue(m_entry_point_type, json[QString("EntryPointType")]);
    m_entry_point_type_isSet = !json[QString("EntryPointType")].isNull() && m_entry_point_type_isValid;

    m_exe_name_isValid = ::OpenAPI::fromJsonValue(m_exe_name, json[QString("ExeName")]);
    m_exe_name_isSet = !json[QString("ExeName")].isNull() && m_exe_name_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("ExitCode")]);
    m_exit_code_isSet = !json[QString("ExitCode")].isNull() && m_exit_code_isValid;

    m_host_id_isValid = ::OpenAPI::fromJsonValue(m_host_id, json[QString("HostId")]);
    m_host_id_isSet = !json[QString("HostId")].isNull() && m_host_id_isValid;

    m_is_exclusive_isValid = ::OpenAPI::fromJsonValue(m_is_exclusive, json[QString("IsExclusive")]);
    m_is_exclusive_isSet = !json[QString("IsExclusive")].isNull() && m_is_exclusive_isValid;

    m_process_id_isValid = ::OpenAPI::fromJsonValue(m_process_id, json[QString("ProcessId")]);
    m_process_id_isSet = !json[QString("ProcessId")].isNull() && m_process_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_package_activation_id_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_id, json[QString("ServicePackageActivationId")]);
    m_service_package_activation_id_isSet = !json[QString("ServicePackageActivationId")].isNull() && m_service_package_activation_id_isValid;

    m_service_package_name_isValid = ::OpenAPI::fromJsonValue(m_service_package_name, json[QString("ServicePackageName")]);
    m_service_package_name_isSet = !json[QString("ServicePackageName")].isNull() && m_service_package_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_unexpected_termination_isValid = ::OpenAPI::fromJsonValue(m_unexpected_termination, json[QString("UnexpectedTermination")]);
    m_unexpected_termination_isSet = !json[QString("UnexpectedTermination")].isNull() && m_unexpected_termination_isValid;
}

QString OAIProcessDeactivatedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessDeactivatedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_code_package_name_isSet) {
        obj.insert(QString("CodePackageName"), ::OpenAPI::toJsonValue(m_code_package_name));
    }
    if (m_entry_point_type_isSet) {
        obj.insert(QString("EntryPointType"), ::OpenAPI::toJsonValue(m_entry_point_type));
    }
    if (m_exe_name_isSet) {
        obj.insert(QString("ExeName"), ::OpenAPI::toJsonValue(m_exe_name));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("ExitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_host_id_isSet) {
        obj.insert(QString("HostId"), ::OpenAPI::toJsonValue(m_host_id));
    }
    if (m_is_exclusive_isSet) {
        obj.insert(QString("IsExclusive"), ::OpenAPI::toJsonValue(m_is_exclusive));
    }
    if (m_process_id_isSet) {
        obj.insert(QString("ProcessId"), ::OpenAPI::toJsonValue(m_process_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_package_activation_id_isSet) {
        obj.insert(QString("ServicePackageActivationId"), ::OpenAPI::toJsonValue(m_service_package_activation_id));
    }
    if (m_service_package_name_isSet) {
        obj.insert(QString("ServicePackageName"), ::OpenAPI::toJsonValue(m_service_package_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_unexpected_termination_isSet) {
        obj.insert(QString("UnexpectedTermination"), ::OpenAPI::toJsonValue(m_unexpected_termination));
    }
    return obj;
}

QString OAIProcessDeactivatedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIProcessDeactivatedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIProcessDeactivatedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIProcessDeactivatedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIProcessDeactivatedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIProcessDeactivatedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIProcessDeactivatedEvent::getKind() const {
    return m_kind;
}
void OAIProcessDeactivatedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIProcessDeactivatedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIProcessDeactivatedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIProcessDeactivatedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIProcessDeactivatedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIProcessDeactivatedEvent::getApplicationId() const {
    return m_application_id;
}
void OAIProcessDeactivatedEvent::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIProcessDeactivatedEvent::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIProcessDeactivatedEvent::getCodePackageName() const {
    return m_code_package_name;
}
void OAIProcessDeactivatedEvent::setCodePackageName(const QString &code_package_name) {
    m_code_package_name = code_package_name;
    m_code_package_name_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_code_package_name_Set() const{
    return m_code_package_name_isSet;
}

bool OAIProcessDeactivatedEvent::is_code_package_name_Valid() const{
    return m_code_package_name_isValid;
}

QString OAIProcessDeactivatedEvent::getEntryPointType() const {
    return m_entry_point_type;
}
void OAIProcessDeactivatedEvent::setEntryPointType(const QString &entry_point_type) {
    m_entry_point_type = entry_point_type;
    m_entry_point_type_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_entry_point_type_Set() const{
    return m_entry_point_type_isSet;
}

bool OAIProcessDeactivatedEvent::is_entry_point_type_Valid() const{
    return m_entry_point_type_isValid;
}

QString OAIProcessDeactivatedEvent::getExeName() const {
    return m_exe_name;
}
void OAIProcessDeactivatedEvent::setExeName(const QString &exe_name) {
    m_exe_name = exe_name;
    m_exe_name_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_exe_name_Set() const{
    return m_exe_name_isSet;
}

bool OAIProcessDeactivatedEvent::is_exe_name_Valid() const{
    return m_exe_name_isValid;
}

qint64 OAIProcessDeactivatedEvent::getExitCode() const {
    return m_exit_code;
}
void OAIProcessDeactivatedEvent::setExitCode(const qint64 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIProcessDeactivatedEvent::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QString OAIProcessDeactivatedEvent::getHostId() const {
    return m_host_id;
}
void OAIProcessDeactivatedEvent::setHostId(const QString &host_id) {
    m_host_id = host_id;
    m_host_id_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_host_id_Set() const{
    return m_host_id_isSet;
}

bool OAIProcessDeactivatedEvent::is_host_id_Valid() const{
    return m_host_id_isValid;
}

bool OAIProcessDeactivatedEvent::isIsExclusive() const {
    return m_is_exclusive;
}
void OAIProcessDeactivatedEvent::setIsExclusive(const bool &is_exclusive) {
    m_is_exclusive = is_exclusive;
    m_is_exclusive_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_is_exclusive_Set() const{
    return m_is_exclusive_isSet;
}

bool OAIProcessDeactivatedEvent::is_is_exclusive_Valid() const{
    return m_is_exclusive_isValid;
}

qint64 OAIProcessDeactivatedEvent::getProcessId() const {
    return m_process_id;
}
void OAIProcessDeactivatedEvent::setProcessId(const qint64 &process_id) {
    m_process_id = process_id;
    m_process_id_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_process_id_Set() const{
    return m_process_id_isSet;
}

bool OAIProcessDeactivatedEvent::is_process_id_Valid() const{
    return m_process_id_isValid;
}

QString OAIProcessDeactivatedEvent::getServiceName() const {
    return m_service_name;
}
void OAIProcessDeactivatedEvent::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIProcessDeactivatedEvent::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIProcessDeactivatedEvent::getServicePackageActivationId() const {
    return m_service_package_activation_id;
}
void OAIProcessDeactivatedEvent::setServicePackageActivationId(const QString &service_package_activation_id) {
    m_service_package_activation_id = service_package_activation_id;
    m_service_package_activation_id_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_service_package_activation_id_Set() const{
    return m_service_package_activation_id_isSet;
}

bool OAIProcessDeactivatedEvent::is_service_package_activation_id_Valid() const{
    return m_service_package_activation_id_isValid;
}

QString OAIProcessDeactivatedEvent::getServicePackageName() const {
    return m_service_package_name;
}
void OAIProcessDeactivatedEvent::setServicePackageName(const QString &service_package_name) {
    m_service_package_name = service_package_name;
    m_service_package_name_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_service_package_name_Set() const{
    return m_service_package_name_isSet;
}

bool OAIProcessDeactivatedEvent::is_service_package_name_Valid() const{
    return m_service_package_name_isValid;
}

QDateTime OAIProcessDeactivatedEvent::getStartTime() const {
    return m_start_time;
}
void OAIProcessDeactivatedEvent::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIProcessDeactivatedEvent::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIProcessDeactivatedEvent::isUnexpectedTermination() const {
    return m_unexpected_termination;
}
void OAIProcessDeactivatedEvent::setUnexpectedTermination(const bool &unexpected_termination) {
    m_unexpected_termination = unexpected_termination;
    m_unexpected_termination_isSet = true;
}

bool OAIProcessDeactivatedEvent::is_unexpected_termination_Set() const{
    return m_unexpected_termination_isSet;
}

bool OAIProcessDeactivatedEvent::is_unexpected_termination_Valid() const{
    return m_unexpected_termination_isValid;
}

bool OAIProcessDeactivatedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exe_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unexpected_termination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessDeactivatedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_application_id_isValid && m_code_package_name_isValid && m_entry_point_type_isValid && m_exe_name_isValid && m_exit_code_isValid && m_host_id_isValid && m_is_exclusive_isValid && m_process_id_isValid && m_service_name_isValid && m_service_package_activation_id_isValid && m_service_package_name_isValid && m_start_time_isValid && m_unexpected_termination_isValid && true;
}

} // namespace OpenAPI
