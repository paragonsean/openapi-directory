/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationDescription::OAIApplicationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationDescription::OAIApplicationDescription() {
    this->initializeModel();
}

OAIApplicationDescription::~OAIApplicationDescription() {}

void OAIApplicationDescription::initializeModel() {

    m_application_capacity_isSet = false;
    m_application_capacity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_list_isSet = false;
    m_parameter_list_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_type_version_isSet = false;
    m_type_version_isValid = false;
}

void OAIApplicationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationDescription::fromJsonObject(QJsonObject json) {

    m_application_capacity_isValid = ::OpenAPI::fromJsonValue(m_application_capacity, json[QString("ApplicationCapacity")]);
    m_application_capacity_isSet = !json[QString("ApplicationCapacity")].isNull() && m_application_capacity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameter_list_isValid = ::OpenAPI::fromJsonValue(m_parameter_list, json[QString("ParameterList")]);
    m_parameter_list_isSet = !json[QString("ParameterList")].isNull() && m_parameter_list_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_type_version_isValid = ::OpenAPI::fromJsonValue(m_type_version, json[QString("TypeVersion")]);
    m_type_version_isSet = !json[QString("TypeVersion")].isNull() && m_type_version_isValid;
}

QString OAIApplicationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_capacity.isSet()) {
        obj.insert(QString("ApplicationCapacity"), ::OpenAPI::toJsonValue(m_application_capacity));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_list.size() > 0) {
        obj.insert(QString("ParameterList"), ::OpenAPI::toJsonValue(m_parameter_list));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_type_version_isSet) {
        obj.insert(QString("TypeVersion"), ::OpenAPI::toJsonValue(m_type_version));
    }
    return obj;
}

OAIApplicationCapacityDescription OAIApplicationDescription::getApplicationCapacity() const {
    return m_application_capacity;
}
void OAIApplicationDescription::setApplicationCapacity(const OAIApplicationCapacityDescription &application_capacity) {
    m_application_capacity = application_capacity;
    m_application_capacity_isSet = true;
}

bool OAIApplicationDescription::is_application_capacity_Set() const{
    return m_application_capacity_isSet;
}

bool OAIApplicationDescription::is_application_capacity_Valid() const{
    return m_application_capacity_isValid;
}

QString OAIApplicationDescription::getName() const {
    return m_name;
}
void OAIApplicationDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationDescription::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIApplicationParameter> OAIApplicationDescription::getParameterList() const {
    return m_parameter_list;
}
void OAIApplicationDescription::setParameterList(const QList<OAIApplicationParameter> &parameter_list) {
    m_parameter_list = parameter_list;
    m_parameter_list_isSet = true;
}

bool OAIApplicationDescription::is_parameter_list_Set() const{
    return m_parameter_list_isSet;
}

bool OAIApplicationDescription::is_parameter_list_Valid() const{
    return m_parameter_list_isValid;
}

QString OAIApplicationDescription::getTypeName() const {
    return m_type_name;
}
void OAIApplicationDescription::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIApplicationDescription::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIApplicationDescription::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIApplicationDescription::getTypeVersion() const {
    return m_type_version;
}
void OAIApplicationDescription::setTypeVersion(const QString &type_version) {
    m_type_version = type_version;
    m_type_version_isSet = true;
}

bool OAIApplicationDescription::is_type_version_Set() const{
    return m_type_version_isSet;
}

bool OAIApplicationDescription::is_type_version_Valid() const{
    return m_type_version_isValid;
}

bool OAIApplicationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_name_isValid && m_type_version_isValid && true;
}

} // namespace OpenAPI
