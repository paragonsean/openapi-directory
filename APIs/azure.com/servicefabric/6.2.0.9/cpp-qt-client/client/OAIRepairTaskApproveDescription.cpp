/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairTaskApproveDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairTaskApproveDescription::OAIRepairTaskApproveDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairTaskApproveDescription::OAIRepairTaskApproveDescription() {
    this->initializeModel();
}

OAIRepairTaskApproveDescription::~OAIRepairTaskApproveDescription() {}

void OAIRepairTaskApproveDescription::initializeModel() {

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRepairTaskApproveDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairTaskApproveDescription::fromJsonObject(QJsonObject json) {

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("TaskId")]);
    m_task_id_isSet = !json[QString("TaskId")].isNull() && m_task_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIRepairTaskApproveDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairTaskApproveDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_task_id_isSet) {
        obj.insert(QString("TaskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRepairTaskApproveDescription::getTaskId() const {
    return m_task_id;
}
void OAIRepairTaskApproveDescription::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIRepairTaskApproveDescription::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIRepairTaskApproveDescription::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAIRepairTaskApproveDescription::getVersion() const {
    return m_version;
}
void OAIRepairTaskApproveDescription::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRepairTaskApproveDescription::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRepairTaskApproveDescription::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRepairTaskApproveDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairTaskApproveDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_id_isValid && true;
}

} // namespace OpenAPI
