/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationApi_H
#define OAI_OAIApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationDescription.h"
#include "OAIApplicationHealth.h"
#include "OAIApplicationHealthPolicy.h"
#include "OAIApplicationInfo.h"
#include "OAIApplicationLoadInfo.h"
#include "OAIApplicationUpgradeDescription.h"
#include "OAIApplicationUpgradeProgressInfo.h"
#include "OAIApplicationUpgradeUpdateDescription.h"
#include "OAIDeployedApplicationHealth.h"
#include "OAIDeployedApplicationInfo.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAIPagedApplicationInfoList.h"
#include "OAIPagedDeployedApplicationInfoList.h"
#include "OAIResumeApplicationUpgradeDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationApi(const int timeOut = 0);
    ~OAIApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_description OAIApplicationDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createApplication(const QString &api_version, const OAIApplicationDescription &application_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  force_remove bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deleteApplication(const QString &api_version, const QString &application_id, const ::OpenAPI::OptionalParam<bool> &force_remove = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  deployed_applications_health_state_filter qint32 [optional]
    * @param[in]  services_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationHealth(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deployed_applications_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &services_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  deployed_applications_health_state_filter qint32 [optional]
    * @param[in]  services_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getApplicationHealthUsingPolicy(const QString &application_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deployed_applications_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &services_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  exclude_application_parameters bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationInfo(const QString &api_version, const QString &application_id, const ::OpenAPI::OptionalParam<bool> &exclude_application_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_definition_kind_filter qint32 [optional]
    * @param[in]  application_type_name QString [optional]
    * @param[in]  exclude_application_parameters bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationInfoList(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &application_definition_kind_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &application_type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_application_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationLoadInfo(const QString &api_version, const QString &application_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationUpgrade(const QString &api_version, const QString &application_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  deployed_service_packages_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedApplicationHealth(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deployed_service_packages_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  deployed_service_packages_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getDeployedApplicationHealthUsingPolicy(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deployed_service_packages_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  include_health_state bool [optional]
    */
    virtual void getDeployedApplicationInfo(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &include_health_state = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  include_health_state bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    */
    virtual void getDeployedApplicationInfoList(const QString &api_version, const QString &node_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &include_health_state = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportApplicationHealth(const QString &api_version, const QString &application_id, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportDeployedApplicationHealth(const QString &api_version, const QString &node_name, const QString &application_id, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  resume_application_upgrade_description OAIResumeApplicationUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resumeApplicationUpgrade(const QString &api_version, const QString &application_id, const OAIResumeApplicationUpgradeDescription &resume_application_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void rollbackApplicationUpgrade(const QString &api_version, const QString &application_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  application_upgrade_description OAIApplicationUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startApplicationUpgrade(const QString &api_version, const QString &application_id, const OAIApplicationUpgradeDescription &application_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  application_upgrade_update_description OAIApplicationUpgradeUpdateDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void updateApplicationUpgrade(const QString &api_version, const QString &application_id, const OAIApplicationUpgradeUpdateDescription &application_upgrade_update_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createApplicationCallback(OAIHttpRequestWorker *worker);
    void deleteApplicationCallback(OAIHttpRequestWorker *worker);
    void getApplicationHealthCallback(OAIHttpRequestWorker *worker);
    void getApplicationHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getApplicationInfoCallback(OAIHttpRequestWorker *worker);
    void getApplicationInfoListCallback(OAIHttpRequestWorker *worker);
    void getApplicationLoadInfoCallback(OAIHttpRequestWorker *worker);
    void getApplicationUpgradeCallback(OAIHttpRequestWorker *worker);
    void getDeployedApplicationHealthCallback(OAIHttpRequestWorker *worker);
    void getDeployedApplicationHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getDeployedApplicationInfoCallback(OAIHttpRequestWorker *worker);
    void getDeployedApplicationInfoListCallback(OAIHttpRequestWorker *worker);
    void reportApplicationHealthCallback(OAIHttpRequestWorker *worker);
    void reportDeployedApplicationHealthCallback(OAIHttpRequestWorker *worker);
    void resumeApplicationUpgradeCallback(OAIHttpRequestWorker *worker);
    void rollbackApplicationUpgradeCallback(OAIHttpRequestWorker *worker);
    void startApplicationUpgradeCallback(OAIHttpRequestWorker *worker);
    void updateApplicationUpgradeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createApplicationSignal();
    void deleteApplicationSignal();
    void getApplicationHealthSignal(OAIApplicationHealth summary);
    void getApplicationHealthUsingPolicySignal(OAIApplicationHealth summary);
    void getApplicationInfoSignal(OAIApplicationInfo summary);
    void getApplicationInfoListSignal(OAIPagedApplicationInfoList summary);
    void getApplicationLoadInfoSignal(OAIApplicationLoadInfo summary);
    void getApplicationUpgradeSignal(OAIApplicationUpgradeProgressInfo summary);
    void getDeployedApplicationHealthSignal(OAIDeployedApplicationHealth summary);
    void getDeployedApplicationHealthUsingPolicySignal(OAIDeployedApplicationHealth summary);
    void getDeployedApplicationInfoSignal(OAIDeployedApplicationInfo summary);
    void getDeployedApplicationInfoListSignal(OAIPagedDeployedApplicationInfoList summary);
    void reportApplicationHealthSignal();
    void reportDeployedApplicationHealthSignal();
    void resumeApplicationUpgradeSignal();
    void rollbackApplicationUpgradeSignal();
    void startApplicationUpgradeSignal();
    void updateApplicationUpgradeSignal();


    void createApplicationSignalFull(OAIHttpRequestWorker *worker);
    void deleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void getApplicationHealthSignalFull(OAIHttpRequestWorker *worker, OAIApplicationHealth summary);
    void getApplicationHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIApplicationHealth summary);
    void getApplicationInfoSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInfo summary);
    void getApplicationInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedApplicationInfoList summary);
    void getApplicationLoadInfoSignalFull(OAIHttpRequestWorker *worker, OAIApplicationLoadInfo summary);
    void getApplicationUpgradeSignalFull(OAIHttpRequestWorker *worker, OAIApplicationUpgradeProgressInfo summary);
    void getDeployedApplicationHealthSignalFull(OAIHttpRequestWorker *worker, OAIDeployedApplicationHealth summary);
    void getDeployedApplicationHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIDeployedApplicationHealth summary);
    void getDeployedApplicationInfoSignalFull(OAIHttpRequestWorker *worker, OAIDeployedApplicationInfo summary);
    void getDeployedApplicationInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedDeployedApplicationInfoList summary);
    void reportApplicationHealthSignalFull(OAIHttpRequestWorker *worker);
    void reportDeployedApplicationHealthSignalFull(OAIHttpRequestWorker *worker);
    void resumeApplicationUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void rollbackApplicationUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void startApplicationUpgradeSignalFull(OAIHttpRequestWorker *worker);
    void updateApplicationUpgradeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalError() instead")
    void createApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalError() instead")
    void deleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationHealthSignalError() instead")
    void getApplicationHealthSignalE(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationHealthSignalError(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationHealthUsingPolicySignalError() instead")
    void getApplicationHealthUsingPolicySignalE(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationHealthUsingPolicySignalError(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationInfoSignalError() instead")
    void getApplicationInfoSignalE(OAIApplicationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationInfoSignalError(OAIApplicationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationInfoListSignalError() instead")
    void getApplicationInfoListSignalE(OAIPagedApplicationInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationInfoListSignalError(OAIPagedApplicationInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationLoadInfoSignalError() instead")
    void getApplicationLoadInfoSignalE(OAIApplicationLoadInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationLoadInfoSignalError(OAIApplicationLoadInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationUpgradeSignalError() instead")
    void getApplicationUpgradeSignalE(OAIApplicationUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationUpgradeSignalError(OAIApplicationUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationHealthSignalError() instead")
    void getDeployedApplicationHealthSignalE(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationHealthSignalError(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationHealthUsingPolicySignalError() instead")
    void getDeployedApplicationHealthUsingPolicySignalE(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationHealthUsingPolicySignalError(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationInfoSignalError() instead")
    void getDeployedApplicationInfoSignalE(OAIDeployedApplicationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationInfoSignalError(OAIDeployedApplicationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationInfoListSignalError() instead")
    void getDeployedApplicationInfoListSignalE(OAIPagedDeployedApplicationInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationInfoListSignalError(OAIPagedDeployedApplicationInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportApplicationHealthSignalError() instead")
    void reportApplicationHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportApplicationHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportDeployedApplicationHealthSignalError() instead")
    void reportDeployedApplicationHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeployedApplicationHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeApplicationUpgradeSignalError() instead")
    void resumeApplicationUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resumeApplicationUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackApplicationUpgradeSignalError() instead")
    void rollbackApplicationUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackApplicationUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startApplicationUpgradeSignalError() instead")
    void startApplicationUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startApplicationUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationUpgradeSignalError() instead")
    void updateApplicationUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createApplicationSignalErrorFull() instead")
    void createApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalErrorFull() instead")
    void deleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationHealthSignalErrorFull() instead")
    void getApplicationHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationHealthUsingPolicySignalErrorFull() instead")
    void getApplicationHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationInfoSignalErrorFull() instead")
    void getApplicationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationInfoListSignalErrorFull() instead")
    void getApplicationInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationLoadInfoSignalErrorFull() instead")
    void getApplicationLoadInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationLoadInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationUpgradeSignalErrorFull() instead")
    void getApplicationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationHealthSignalErrorFull() instead")
    void getDeployedApplicationHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationHealthUsingPolicySignalErrorFull() instead")
    void getDeployedApplicationHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationInfoSignalErrorFull() instead")
    void getDeployedApplicationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedApplicationInfoListSignalErrorFull() instead")
    void getDeployedApplicationInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedApplicationInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportApplicationHealthSignalErrorFull() instead")
    void reportApplicationHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportApplicationHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportDeployedApplicationHealthSignalErrorFull() instead")
    void reportDeployedApplicationHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeployedApplicationHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeApplicationUpgradeSignalErrorFull() instead")
    void resumeApplicationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeApplicationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackApplicationUpgradeSignalErrorFull() instead")
    void rollbackApplicationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackApplicationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startApplicationUpgradeSignalErrorFull() instead")
    void startApplicationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startApplicationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationUpgradeSignalErrorFull() instead")
    void updateApplicationUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
