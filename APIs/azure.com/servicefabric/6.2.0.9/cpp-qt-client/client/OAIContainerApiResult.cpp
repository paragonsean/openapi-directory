/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerApiResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerApiResult::OAIContainerApiResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerApiResult::OAIContainerApiResult() {
    this->initializeModel();
}

OAIContainerApiResult::~OAIContainerApiResult() {}

void OAIContainerApiResult::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_encoding_isSet = false;
    m_content_encoding_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIContainerApiResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerApiResult::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_content_encoding_isValid = ::OpenAPI::fromJsonValue(m_content_encoding, json[QString("Content-Encoding")]);
    m_content_encoding_isSet = !json[QString("Content-Encoding")].isNull() && m_content_encoding_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("Content-Type")]);
    m_content_type_isSet = !json[QString("Content-Type")].isNull() && m_content_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIContainerApiResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerApiResult::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content_encoding_isSet) {
        obj.insert(QString("Content-Encoding"), ::OpenAPI::toJsonValue(m_content_encoding));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("Content-Type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIContainerApiResult::getBody() const {
    return m_body;
}
void OAIContainerApiResult::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIContainerApiResult::is_body_Set() const{
    return m_body_isSet;
}

bool OAIContainerApiResult::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIContainerApiResult::getContentEncoding() const {
    return m_content_encoding;
}
void OAIContainerApiResult::setContentEncoding(const QString &content_encoding) {
    m_content_encoding = content_encoding;
    m_content_encoding_isSet = true;
}

bool OAIContainerApiResult::is_content_encoding_Set() const{
    return m_content_encoding_isSet;
}

bool OAIContainerApiResult::is_content_encoding_Valid() const{
    return m_content_encoding_isValid;
}

QString OAIContainerApiResult::getContentType() const {
    return m_content_type;
}
void OAIContainerApiResult::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIContainerApiResult::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIContainerApiResult::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIContainerApiResult::getStatus() const {
    return m_status;
}
void OAIContainerApiResult::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIContainerApiResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIContainerApiResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIContainerApiResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerApiResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
