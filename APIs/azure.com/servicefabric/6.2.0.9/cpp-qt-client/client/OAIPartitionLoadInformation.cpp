/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionLoadInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionLoadInformation::OAIPartitionLoadInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionLoadInformation::OAIPartitionLoadInformation() {
    this->initializeModel();
}

OAIPartitionLoadInformation::~OAIPartitionLoadInformation() {}

void OAIPartitionLoadInformation::initializeModel() {

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_primary_load_metric_reports_isSet = false;
    m_primary_load_metric_reports_isValid = false;

    m_secondary_load_metric_reports_isSet = false;
    m_secondary_load_metric_reports_isValid = false;
}

void OAIPartitionLoadInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionLoadInformation::fromJsonObject(QJsonObject json) {

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_primary_load_metric_reports_isValid = ::OpenAPI::fromJsonValue(m_primary_load_metric_reports, json[QString("PrimaryLoadMetricReports")]);
    m_primary_load_metric_reports_isSet = !json[QString("PrimaryLoadMetricReports")].isNull() && m_primary_load_metric_reports_isValid;

    m_secondary_load_metric_reports_isValid = ::OpenAPI::fromJsonValue(m_secondary_load_metric_reports, json[QString("SecondaryLoadMetricReports")]);
    m_secondary_load_metric_reports_isSet = !json[QString("SecondaryLoadMetricReports")].isNull() && m_secondary_load_metric_reports_isValid;
}

QString OAIPartitionLoadInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionLoadInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_primary_load_metric_reports.size() > 0) {
        obj.insert(QString("PrimaryLoadMetricReports"), ::OpenAPI::toJsonValue(m_primary_load_metric_reports));
    }
    if (m_secondary_load_metric_reports.size() > 0) {
        obj.insert(QString("SecondaryLoadMetricReports"), ::OpenAPI::toJsonValue(m_secondary_load_metric_reports));
    }
    return obj;
}

QString OAIPartitionLoadInformation::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionLoadInformation::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionLoadInformation::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionLoadInformation::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QList<OAILoadMetricReport> OAIPartitionLoadInformation::getPrimaryLoadMetricReports() const {
    return m_primary_load_metric_reports;
}
void OAIPartitionLoadInformation::setPrimaryLoadMetricReports(const QList<OAILoadMetricReport> &primary_load_metric_reports) {
    m_primary_load_metric_reports = primary_load_metric_reports;
    m_primary_load_metric_reports_isSet = true;
}

bool OAIPartitionLoadInformation::is_primary_load_metric_reports_Set() const{
    return m_primary_load_metric_reports_isSet;
}

bool OAIPartitionLoadInformation::is_primary_load_metric_reports_Valid() const{
    return m_primary_load_metric_reports_isValid;
}

QList<OAILoadMetricReport> OAIPartitionLoadInformation::getSecondaryLoadMetricReports() const {
    return m_secondary_load_metric_reports;
}
void OAIPartitionLoadInformation::setSecondaryLoadMetricReports(const QList<OAILoadMetricReport> &secondary_load_metric_reports) {
    m_secondary_load_metric_reports = secondary_load_metric_reports;
    m_secondary_load_metric_reports_isSet = true;
}

bool OAIPartitionLoadInformation::is_secondary_load_metric_reports_Set() const{
    return m_secondary_load_metric_reports_isSet;
}

bool OAIPartitionLoadInformation::is_secondary_load_metric_reports_Valid() const{
    return m_secondary_load_metric_reports_isValid;
}

bool OAIPartitionLoadInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_load_metric_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_load_metric_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionLoadInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
