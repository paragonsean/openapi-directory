/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServicePackageApi_H
#define OAI_OAIServicePackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationHealthPolicy.h"
#include "OAIDeployServicePackageToNodeDescription.h"
#include "OAIDeployedServicePackageHealth.h"
#include "OAIDeployedServicePackageInfo.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServicePackageApi : public QObject {
    Q_OBJECT

public:
    OAIServicePackageApi(const int timeOut = 0);
    ~OAIServicePackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  deploy_service_package_to_node_description OAIDeployServicePackageToNodeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void deployServicePackageToNode(const QString &api_version, const QString &node_name, const OAIDeployServicePackageToNodeDescription &deploy_service_package_to_node_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_package_name QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServicePackageHealth(const QString &api_version, const QString &node_name, const QString &application_id, const QString &service_package_name, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_package_name QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getDeployedServicePackageHealthUsingPolicy(const QString &api_version, const QString &node_name, const QString &application_id, const QString &service_package_name, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServicePackageInfoList(const QString &api_version, const QString &node_name, const QString &application_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_package_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getDeployedServicePackageInfoListByName(const QString &api_version, const QString &node_name, const QString &application_id, const QString &service_package_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  node_name QString [required]
    * @param[in]  application_id QString [required]
    * @param[in]  service_package_name QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportDeployedServicePackageHealth(const QString &api_version, const QString &node_name, const QString &application_id, const QString &service_package_name, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deployServicePackageToNodeCallback(OAIHttpRequestWorker *worker);
    void getDeployedServicePackageHealthCallback(OAIHttpRequestWorker *worker);
    void getDeployedServicePackageHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getDeployedServicePackageInfoListCallback(OAIHttpRequestWorker *worker);
    void getDeployedServicePackageInfoListByNameCallback(OAIHttpRequestWorker *worker);
    void reportDeployedServicePackageHealthCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deployServicePackageToNodeSignal();
    void getDeployedServicePackageHealthSignal(OAIDeployedServicePackageHealth summary);
    void getDeployedServicePackageHealthUsingPolicySignal(OAIDeployedServicePackageHealth summary);
    void getDeployedServicePackageInfoListSignal(QList<OAIDeployedServicePackageInfo> summary);
    void getDeployedServicePackageInfoListByNameSignal();
    void reportDeployedServicePackageHealthSignal();


    void deployServicePackageToNodeSignalFull(OAIHttpRequestWorker *worker);
    void getDeployedServicePackageHealthSignalFull(OAIHttpRequestWorker *worker, OAIDeployedServicePackageHealth summary);
    void getDeployedServicePackageHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIDeployedServicePackageHealth summary);
    void getDeployedServicePackageInfoListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedServicePackageInfo> summary);
    void getDeployedServicePackageInfoListByNameSignalFull(OAIHttpRequestWorker *worker);
    void reportDeployedServicePackageHealthSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deployServicePackageToNodeSignalError() instead")
    void deployServicePackageToNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deployServicePackageToNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageHealthSignalError() instead")
    void getDeployedServicePackageHealthSignalE(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageHealthSignalError(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageHealthUsingPolicySignalError() instead")
    void getDeployedServicePackageHealthUsingPolicySignalE(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageHealthUsingPolicySignalError(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageInfoListSignalError() instead")
    void getDeployedServicePackageInfoListSignalE(QList<OAIDeployedServicePackageInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageInfoListSignalError(QList<OAIDeployedServicePackageInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageInfoListByNameSignalError() instead")
    void getDeployedServicePackageInfoListByNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageInfoListByNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportDeployedServicePackageHealthSignalError() instead")
    void reportDeployedServicePackageHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeployedServicePackageHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deployServicePackageToNodeSignalErrorFull() instead")
    void deployServicePackageToNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployServicePackageToNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageHealthSignalErrorFull() instead")
    void getDeployedServicePackageHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageHealthUsingPolicySignalErrorFull() instead")
    void getDeployedServicePackageHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageInfoListSignalErrorFull() instead")
    void getDeployedServicePackageInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployedServicePackageInfoListByNameSignalErrorFull() instead")
    void getDeployedServicePackageInfoListByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployedServicePackageInfoListByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportDeployedServicePackageHealthSignalErrorFull() instead")
    void reportDeployedServicePackageHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportDeployedServicePackageHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
