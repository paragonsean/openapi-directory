/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationTypeApi_H
#define OAI_OAIApplicationTypeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationTypeManifest.h"
#include "OAIFabricError.h"
#include "OAIPagedApplicationTypeInfoList.h"
#include "OAIProvisionApplicationTypeDescriptionBase.h"
#include "OAIUnprovisionApplicationTypeDescriptionInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationTypeApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationTypeApi(const int timeOut = 0);
    ~OAIApplicationTypeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  application_type_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationManifest(const QString &api_version, const QString &application_type_name, const QString &application_type_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_type_definition_kind_filter qint32 [optional]
    * @param[in]  exclude_application_parameters bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationTypeInfoList(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &application_type_definition_kind_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_application_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  application_type_version QString [optional]
    * @param[in]  exclude_application_parameters bool [optional]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getApplicationTypeInfoListByName(const QString &api_version, const QString &application_type_name, const ::OpenAPI::OptionalParam<QString> &application_type_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_application_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  provision_application_type_description_base_required_body_param OAIProvisionApplicationTypeDescriptionBase [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void provisionApplicationType(const QString &api_version, const OAIProvisionApplicationTypeDescriptionBase &provision_application_type_description_base_required_body_param, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  unprovision_application_type_description_info OAIUnprovisionApplicationTypeDescriptionInfo [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void unprovisionApplicationType(const QString &api_version, const QString &application_type_name, const OAIUnprovisionApplicationTypeDescriptionInfo &unprovision_application_type_description_info, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getApplicationManifestCallback(OAIHttpRequestWorker *worker);
    void getApplicationTypeInfoListCallback(OAIHttpRequestWorker *worker);
    void getApplicationTypeInfoListByNameCallback(OAIHttpRequestWorker *worker);
    void provisionApplicationTypeCallback(OAIHttpRequestWorker *worker);
    void unprovisionApplicationTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getApplicationManifestSignal(OAIApplicationTypeManifest summary);
    void getApplicationTypeInfoListSignal(OAIPagedApplicationTypeInfoList summary);
    void getApplicationTypeInfoListByNameSignal(OAIPagedApplicationTypeInfoList summary);
    void provisionApplicationTypeSignal();
    void unprovisionApplicationTypeSignal();


    void getApplicationManifestSignalFull(OAIHttpRequestWorker *worker, OAIApplicationTypeManifest summary);
    void getApplicationTypeInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedApplicationTypeInfoList summary);
    void getApplicationTypeInfoListByNameSignalFull(OAIHttpRequestWorker *worker, OAIPagedApplicationTypeInfoList summary);
    void provisionApplicationTypeSignalFull(OAIHttpRequestWorker *worker);
    void unprovisionApplicationTypeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getApplicationManifestSignalError() instead")
    void getApplicationManifestSignalE(OAIApplicationTypeManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationManifestSignalError(OAIApplicationTypeManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTypeInfoListSignalError() instead")
    void getApplicationTypeInfoListSignalE(OAIPagedApplicationTypeInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTypeInfoListSignalError(OAIPagedApplicationTypeInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTypeInfoListByNameSignalError() instead")
    void getApplicationTypeInfoListByNameSignalE(OAIPagedApplicationTypeInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTypeInfoListByNameSignalError(OAIPagedApplicationTypeInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionApplicationTypeSignalError() instead")
    void provisionApplicationTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void provisionApplicationTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unprovisionApplicationTypeSignalError() instead")
    void unprovisionApplicationTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unprovisionApplicationTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getApplicationManifestSignalErrorFull() instead")
    void getApplicationManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTypeInfoListSignalErrorFull() instead")
    void getApplicationTypeInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTypeInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTypeInfoListByNameSignalErrorFull() instead")
    void getApplicationTypeInfoListByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTypeInfoListByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionApplicationTypeSignalErrorFull() instead")
    void provisionApplicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionApplicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unprovisionApplicationTypeSignalErrorFull() instead")
    void unprovisionApplicationTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unprovisionApplicationTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
