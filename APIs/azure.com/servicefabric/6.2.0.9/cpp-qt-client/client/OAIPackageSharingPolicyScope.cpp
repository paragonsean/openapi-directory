/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageSharingPolicyScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageSharingPolicyScope::OAIPackageSharingPolicyScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageSharingPolicyScope::OAIPackageSharingPolicyScope() {
    this->initializeModel();
}

OAIPackageSharingPolicyScope::~OAIPackageSharingPolicyScope() {}

void OAIPackageSharingPolicyScope::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPackageSharingPolicyScope::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPackageSharingPolicyScope::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageSharingPolicyScope::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("All", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageSharingPolicyScope::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Code", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageSharingPolicyScope::CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Config", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageSharingPolicyScope::CONFIG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Data", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPackageSharingPolicyScope::DATA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPackageSharingPolicyScope::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPackageSharingPolicyScope::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPackageSharingPolicyScope::NONE:
            val = "None";
            break;
        case eOAIPackageSharingPolicyScope::ALL:
            val = "All";
            break;
        case eOAIPackageSharingPolicyScope::CODE:
            val = "Code";
            break;
        case eOAIPackageSharingPolicyScope::CONFIG:
            val = "Config";
            break;
        case eOAIPackageSharingPolicyScope::DATA:
            val = "Data";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPackageSharingPolicyScope::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPackageSharingPolicyScope::eOAIPackageSharingPolicyScope OAIPackageSharingPolicyScope::getValue() const {
    return m_value;
}

void OAIPackageSharingPolicyScope::setValue(const OAIPackageSharingPolicyScope::eOAIPackageSharingPolicyScope& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPackageSharingPolicyScope::isSet() const {
    
    return m_value_isSet;
}

bool OAIPackageSharingPolicyScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
