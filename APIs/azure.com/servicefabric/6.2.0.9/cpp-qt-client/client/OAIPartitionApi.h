/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartitionApi_H
#define OAI_OAIPartitionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationHealthPolicy.h"
#include "OAIFabricError.h"
#include "OAIHealthInformation.h"
#include "OAIPagedServicePartitionInfoList.h"
#include "OAIPartitionHealth.h"
#include "OAIPartitionLoadInformation.h"
#include "OAIServiceNameInfo.h"
#include "OAIServicePartitionInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartitionApi : public QObject {
    Q_OBJECT

public:
    OAIPartitionApi(const int timeOut = 0);
    ~OAIPartitionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  replicas_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionHealth(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &replicas_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  events_health_state_filter qint32 [optional]
    * @param[in]  replicas_health_state_filter qint32 [optional]
    * @param[in]  exclude_health_statistics bool [optional]
    * @param[in]  timeout qint64 [optional]
    * @param[in]  application_health_policy OAIApplicationHealthPolicy [optional]
    */
    virtual void getPartitionHealthUsingPolicy(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<qint32> &events_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &replicas_health_state_filter = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_health_statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy> &application_health_policy = ::OpenAPI::OptionalParam<OAIApplicationHealthPolicy>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionInfo(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionInfoList(const QString &api_version, const QString &service_id, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getPartitionLoadInformation(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getServiceNameInfo(const QString &api_version, const QString &partition_id, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void recoverAllPartitions(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void recoverPartition(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void recoverServicePartitions(const QString &service_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void recoverSystemPartitions(const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  health_information OAIHealthInformation [required]
    * @param[in]  immediate bool [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void reportPartitionHealth(const QString &api_version, const QString &partition_id, const OAIHealthInformation &health_information, const ::OpenAPI::OptionalParam<bool> &immediate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void resetPartitionLoad(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPartitionHealthCallback(OAIHttpRequestWorker *worker);
    void getPartitionHealthUsingPolicyCallback(OAIHttpRequestWorker *worker);
    void getPartitionInfoCallback(OAIHttpRequestWorker *worker);
    void getPartitionInfoListCallback(OAIHttpRequestWorker *worker);
    void getPartitionLoadInformationCallback(OAIHttpRequestWorker *worker);
    void getServiceNameInfoCallback(OAIHttpRequestWorker *worker);
    void recoverAllPartitionsCallback(OAIHttpRequestWorker *worker);
    void recoverPartitionCallback(OAIHttpRequestWorker *worker);
    void recoverServicePartitionsCallback(OAIHttpRequestWorker *worker);
    void recoverSystemPartitionsCallback(OAIHttpRequestWorker *worker);
    void reportPartitionHealthCallback(OAIHttpRequestWorker *worker);
    void resetPartitionLoadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPartitionHealthSignal(OAIPartitionHealth summary);
    void getPartitionHealthUsingPolicySignal(OAIPartitionHealth summary);
    void getPartitionInfoSignal(OAIServicePartitionInfo summary);
    void getPartitionInfoListSignal(OAIPagedServicePartitionInfoList summary);
    void getPartitionLoadInformationSignal(OAIPartitionLoadInformation summary);
    void getServiceNameInfoSignal(OAIServiceNameInfo summary);
    void recoverAllPartitionsSignal();
    void recoverPartitionSignal();
    void recoverServicePartitionsSignal();
    void recoverSystemPartitionsSignal();
    void reportPartitionHealthSignal();
    void resetPartitionLoadSignal();


    void getPartitionHealthSignalFull(OAIHttpRequestWorker *worker, OAIPartitionHealth summary);
    void getPartitionHealthUsingPolicySignalFull(OAIHttpRequestWorker *worker, OAIPartitionHealth summary);
    void getPartitionInfoSignalFull(OAIHttpRequestWorker *worker, OAIServicePartitionInfo summary);
    void getPartitionInfoListSignalFull(OAIHttpRequestWorker *worker, OAIPagedServicePartitionInfoList summary);
    void getPartitionLoadInformationSignalFull(OAIHttpRequestWorker *worker, OAIPartitionLoadInformation summary);
    void getServiceNameInfoSignalFull(OAIHttpRequestWorker *worker, OAIServiceNameInfo summary);
    void recoverAllPartitionsSignalFull(OAIHttpRequestWorker *worker);
    void recoverPartitionSignalFull(OAIHttpRequestWorker *worker);
    void recoverServicePartitionsSignalFull(OAIHttpRequestWorker *worker);
    void recoverSystemPartitionsSignalFull(OAIHttpRequestWorker *worker);
    void reportPartitionHealthSignalFull(OAIHttpRequestWorker *worker);
    void resetPartitionLoadSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getPartitionHealthSignalError() instead")
    void getPartitionHealthSignalE(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionHealthSignalError(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionHealthUsingPolicySignalError() instead")
    void getPartitionHealthUsingPolicySignalE(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionHealthUsingPolicySignalError(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionInfoSignalError() instead")
    void getPartitionInfoSignalE(OAIServicePartitionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionInfoSignalError(OAIServicePartitionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionInfoListSignalError() instead")
    void getPartitionInfoListSignalE(OAIPagedServicePartitionInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionInfoListSignalError(OAIPagedServicePartitionInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionLoadInformationSignalError() instead")
    void getPartitionLoadInformationSignalE(OAIPartitionLoadInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionLoadInformationSignalError(OAIPartitionLoadInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceNameInfoSignalError() instead")
    void getServiceNameInfoSignalE(OAIServiceNameInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceNameInfoSignalError(OAIServiceNameInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverAllPartitionsSignalError() instead")
    void recoverAllPartitionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recoverAllPartitionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverPartitionSignalError() instead")
    void recoverPartitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recoverPartitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverServicePartitionsSignalError() instead")
    void recoverServicePartitionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recoverServicePartitionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverSystemPartitionsSignalError() instead")
    void recoverSystemPartitionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recoverSystemPartitionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPartitionHealthSignalError() instead")
    void reportPartitionHealthSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reportPartitionHealthSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPartitionLoadSignalError() instead")
    void resetPartitionLoadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetPartitionLoadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPartitionHealthSignalErrorFull() instead")
    void getPartitionHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionHealthUsingPolicySignalErrorFull() instead")
    void getPartitionHealthUsingPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionHealthUsingPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionInfoSignalErrorFull() instead")
    void getPartitionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionInfoListSignalErrorFull() instead")
    void getPartitionInfoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionInfoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartitionLoadInformationSignalErrorFull() instead")
    void getPartitionLoadInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartitionLoadInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceNameInfoSignalErrorFull() instead")
    void getServiceNameInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceNameInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverAllPartitionsSignalErrorFull() instead")
    void recoverAllPartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverAllPartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverPartitionSignalErrorFull() instead")
    void recoverPartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverPartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverServicePartitionsSignalErrorFull() instead")
    void recoverServicePartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverServicePartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverSystemPartitionsSignalErrorFull() instead")
    void recoverSystemPartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverSystemPartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportPartitionHealthSignalErrorFull() instead")
    void reportPartitionHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportPartitionHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPartitionLoadSignalErrorFull() instead")
    void resetPartitionLoadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPartitionLoadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
