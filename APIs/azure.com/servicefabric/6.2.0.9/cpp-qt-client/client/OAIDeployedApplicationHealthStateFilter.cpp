/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedApplicationHealthStateFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedApplicationHealthStateFilter::OAIDeployedApplicationHealthStateFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedApplicationHealthStateFilter::OAIDeployedApplicationHealthStateFilter() {
    this->initializeModel();
}

OAIDeployedApplicationHealthStateFilter::~OAIDeployedApplicationHealthStateFilter() {}

void OAIDeployedApplicationHealthStateFilter::initializeModel() {

    m_deployed_service_package_filters_isSet = false;
    m_deployed_service_package_filters_isValid = false;

    m_health_state_filter_isSet = false;
    m_health_state_filter_isValid = false;

    m_node_name_filter_isSet = false;
    m_node_name_filter_isValid = false;
}

void OAIDeployedApplicationHealthStateFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedApplicationHealthStateFilter::fromJsonObject(QJsonObject json) {

    m_deployed_service_package_filters_isValid = ::OpenAPI::fromJsonValue(m_deployed_service_package_filters, json[QString("DeployedServicePackageFilters")]);
    m_deployed_service_package_filters_isSet = !json[QString("DeployedServicePackageFilters")].isNull() && m_deployed_service_package_filters_isValid;

    m_health_state_filter_isValid = ::OpenAPI::fromJsonValue(m_health_state_filter, json[QString("HealthStateFilter")]);
    m_health_state_filter_isSet = !json[QString("HealthStateFilter")].isNull() && m_health_state_filter_isValid;

    m_node_name_filter_isValid = ::OpenAPI::fromJsonValue(m_node_name_filter, json[QString("NodeNameFilter")]);
    m_node_name_filter_isSet = !json[QString("NodeNameFilter")].isNull() && m_node_name_filter_isValid;
}

QString OAIDeployedApplicationHealthStateFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedApplicationHealthStateFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_deployed_service_package_filters.size() > 0) {
        obj.insert(QString("DeployedServicePackageFilters"), ::OpenAPI::toJsonValue(m_deployed_service_package_filters));
    }
    if (m_health_state_filter_isSet) {
        obj.insert(QString("HealthStateFilter"), ::OpenAPI::toJsonValue(m_health_state_filter));
    }
    if (m_node_name_filter_isSet) {
        obj.insert(QString("NodeNameFilter"), ::OpenAPI::toJsonValue(m_node_name_filter));
    }
    return obj;
}

QList<OAIDeployedServicePackageHealthStateFilter> OAIDeployedApplicationHealthStateFilter::getDeployedServicePackageFilters() const {
    return m_deployed_service_package_filters;
}
void OAIDeployedApplicationHealthStateFilter::setDeployedServicePackageFilters(const QList<OAIDeployedServicePackageHealthStateFilter> &deployed_service_package_filters) {
    m_deployed_service_package_filters = deployed_service_package_filters;
    m_deployed_service_package_filters_isSet = true;
}

bool OAIDeployedApplicationHealthStateFilter::is_deployed_service_package_filters_Set() const{
    return m_deployed_service_package_filters_isSet;
}

bool OAIDeployedApplicationHealthStateFilter::is_deployed_service_package_filters_Valid() const{
    return m_deployed_service_package_filters_isValid;
}

qint32 OAIDeployedApplicationHealthStateFilter::getHealthStateFilter() const {
    return m_health_state_filter;
}
void OAIDeployedApplicationHealthStateFilter::setHealthStateFilter(const qint32 &health_state_filter) {
    m_health_state_filter = health_state_filter;
    m_health_state_filter_isSet = true;
}

bool OAIDeployedApplicationHealthStateFilter::is_health_state_filter_Set() const{
    return m_health_state_filter_isSet;
}

bool OAIDeployedApplicationHealthStateFilter::is_health_state_filter_Valid() const{
    return m_health_state_filter_isValid;
}

QString OAIDeployedApplicationHealthStateFilter::getNodeNameFilter() const {
    return m_node_name_filter;
}
void OAIDeployedApplicationHealthStateFilter::setNodeNameFilter(const QString &node_name_filter) {
    m_node_name_filter = node_name_filter;
    m_node_name_filter_isSet = true;
}

bool OAIDeployedApplicationHealthStateFilter::is_node_name_filter_Set() const{
    return m_node_name_filter_isSet;
}

bool OAIDeployedApplicationHealthStateFilter::is_node_name_filter_Valid() const{
    return m_node_name_filter_isValid;
}

bool OAIDeployedApplicationHealthStateFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployed_service_package_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedApplicationHealthStateFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
