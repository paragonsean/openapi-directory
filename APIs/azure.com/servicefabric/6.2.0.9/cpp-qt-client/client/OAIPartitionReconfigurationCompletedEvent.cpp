/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionReconfigurationCompletedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionReconfigurationCompletedEvent::OAIPartitionReconfigurationCompletedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionReconfigurationCompletedEvent::OAIPartitionReconfigurationCompletedEvent() {
    this->initializeModel();
}

OAIPartitionReconfigurationCompletedEvent::~OAIPartitionReconfigurationCompletedEvent() {}

void OAIPartitionReconfigurationCompletedEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_cc_epoch_config_version_isSet = false;
    m_cc_epoch_config_version_isValid = false;

    m_cc_epoch_data_loss_version_isSet = false;
    m_cc_epoch_data_loss_version_isValid = false;

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_phase0_duration_ms_isSet = false;
    m_phase0_duration_ms_isValid = false;

    m_phase1_duration_ms_isSet = false;
    m_phase1_duration_ms_isValid = false;

    m_phase2_duration_ms_isSet = false;
    m_phase2_duration_ms_isValid = false;

    m_phase3_duration_ms_isSet = false;
    m_phase3_duration_ms_isValid = false;

    m_phase4_duration_ms_isSet = false;
    m_phase4_duration_ms_isValid = false;

    m_reconfig_type_isSet = false;
    m_reconfig_type_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_total_duration_ms_isSet = false;
    m_total_duration_ms_isValid = false;
}

void OAIPartitionReconfigurationCompletedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionReconfigurationCompletedEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_cc_epoch_config_version_isValid = ::OpenAPI::fromJsonValue(m_cc_epoch_config_version, json[QString("CcEpochConfigVersion")]);
    m_cc_epoch_config_version_isSet = !json[QString("CcEpochConfigVersion")].isNull() && m_cc_epoch_config_version_isValid;

    m_cc_epoch_data_loss_version_isValid = ::OpenAPI::fromJsonValue(m_cc_epoch_data_loss_version, json[QString("CcEpochDataLossVersion")]);
    m_cc_epoch_data_loss_version_isSet = !json[QString("CcEpochDataLossVersion")].isNull() && m_cc_epoch_data_loss_version_isValid;

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("NodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("NodeInstanceId")].isNull() && m_node_instance_id_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_phase0_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_phase0_duration_ms, json[QString("Phase0DurationMs")]);
    m_phase0_duration_ms_isSet = !json[QString("Phase0DurationMs")].isNull() && m_phase0_duration_ms_isValid;

    m_phase1_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_phase1_duration_ms, json[QString("Phase1DurationMs")]);
    m_phase1_duration_ms_isSet = !json[QString("Phase1DurationMs")].isNull() && m_phase1_duration_ms_isValid;

    m_phase2_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_phase2_duration_ms, json[QString("Phase2DurationMs")]);
    m_phase2_duration_ms_isSet = !json[QString("Phase2DurationMs")].isNull() && m_phase2_duration_ms_isValid;

    m_phase3_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_phase3_duration_ms, json[QString("Phase3DurationMs")]);
    m_phase3_duration_ms_isSet = !json[QString("Phase3DurationMs")].isNull() && m_phase3_duration_ms_isValid;

    m_phase4_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_phase4_duration_ms, json[QString("Phase4DurationMs")]);
    m_phase4_duration_ms_isSet = !json[QString("Phase4DurationMs")].isNull() && m_phase4_duration_ms_isValid;

    m_reconfig_type_isValid = ::OpenAPI::fromJsonValue(m_reconfig_type, json[QString("ReconfigType")]);
    m_reconfig_type_isSet = !json[QString("ReconfigType")].isNull() && m_reconfig_type_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("ServiceType")]);
    m_service_type_isSet = !json[QString("ServiceType")].isNull() && m_service_type_isValid;

    m_total_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_total_duration_ms, json[QString("TotalDurationMs")]);
    m_total_duration_ms_isSet = !json[QString("TotalDurationMs")].isNull() && m_total_duration_ms_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionReconfigurationCompletedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_cc_epoch_config_version_isSet) {
        obj.insert(QString("CcEpochConfigVersion"), ::OpenAPI::toJsonValue(m_cc_epoch_config_version));
    }
    if (m_cc_epoch_data_loss_version_isSet) {
        obj.insert(QString("CcEpochDataLossVersion"), ::OpenAPI::toJsonValue(m_cc_epoch_data_loss_version));
    }
    if (m_node_instance_id_isSet) {
        obj.insert(QString("NodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_phase0_duration_ms_isSet) {
        obj.insert(QString("Phase0DurationMs"), ::OpenAPI::toJsonValue(m_phase0_duration_ms));
    }
    if (m_phase1_duration_ms_isSet) {
        obj.insert(QString("Phase1DurationMs"), ::OpenAPI::toJsonValue(m_phase1_duration_ms));
    }
    if (m_phase2_duration_ms_isSet) {
        obj.insert(QString("Phase2DurationMs"), ::OpenAPI::toJsonValue(m_phase2_duration_ms));
    }
    if (m_phase3_duration_ms_isSet) {
        obj.insert(QString("Phase3DurationMs"), ::OpenAPI::toJsonValue(m_phase3_duration_ms));
    }
    if (m_phase4_duration_ms_isSet) {
        obj.insert(QString("Phase4DurationMs"), ::OpenAPI::toJsonValue(m_phase4_duration_ms));
    }
    if (m_reconfig_type_isSet) {
        obj.insert(QString("ReconfigType"), ::OpenAPI::toJsonValue(m_reconfig_type));
    }
    if (m_result_isSet) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("ServiceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_total_duration_ms_isSet) {
        obj.insert(QString("TotalDurationMs"), ::OpenAPI::toJsonValue(m_total_duration_ms));
    }
    return obj;
}

QString OAIPartitionReconfigurationCompletedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIPartitionReconfigurationCompletedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIPartitionReconfigurationCompletedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIPartitionReconfigurationCompletedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIPartitionReconfigurationCompletedEvent::getKind() const {
    return m_kind;
}
void OAIPartitionReconfigurationCompletedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIPartitionReconfigurationCompletedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIPartitionReconfigurationCompletedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionReconfigurationCompletedEvent::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

qint64 OAIPartitionReconfigurationCompletedEvent::getCcEpochConfigVersion() const {
    return m_cc_epoch_config_version;
}
void OAIPartitionReconfigurationCompletedEvent::setCcEpochConfigVersion(const qint64 &cc_epoch_config_version) {
    m_cc_epoch_config_version = cc_epoch_config_version;
    m_cc_epoch_config_version_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_cc_epoch_config_version_Set() const{
    return m_cc_epoch_config_version_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_cc_epoch_config_version_Valid() const{
    return m_cc_epoch_config_version_isValid;
}

qint64 OAIPartitionReconfigurationCompletedEvent::getCcEpochDataLossVersion() const {
    return m_cc_epoch_data_loss_version;
}
void OAIPartitionReconfigurationCompletedEvent::setCcEpochDataLossVersion(const qint64 &cc_epoch_data_loss_version) {
    m_cc_epoch_data_loss_version = cc_epoch_data_loss_version;
    m_cc_epoch_data_loss_version_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_cc_epoch_data_loss_version_Set() const{
    return m_cc_epoch_data_loss_version_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_cc_epoch_data_loss_version_Valid() const{
    return m_cc_epoch_data_loss_version_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAIPartitionReconfigurationCompletedEvent::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getNodeName() const {
    return m_node_name;
}
void OAIPartitionReconfigurationCompletedEvent::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_node_name_Valid() const{
    return m_node_name_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getPhase0DurationMs() const {
    return m_phase0_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setPhase0DurationMs(const double &phase0_duration_ms) {
    m_phase0_duration_ms = phase0_duration_ms;
    m_phase0_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase0_duration_ms_Set() const{
    return m_phase0_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase0_duration_ms_Valid() const{
    return m_phase0_duration_ms_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getPhase1DurationMs() const {
    return m_phase1_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setPhase1DurationMs(const double &phase1_duration_ms) {
    m_phase1_duration_ms = phase1_duration_ms;
    m_phase1_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase1_duration_ms_Set() const{
    return m_phase1_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase1_duration_ms_Valid() const{
    return m_phase1_duration_ms_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getPhase2DurationMs() const {
    return m_phase2_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setPhase2DurationMs(const double &phase2_duration_ms) {
    m_phase2_duration_ms = phase2_duration_ms;
    m_phase2_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase2_duration_ms_Set() const{
    return m_phase2_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase2_duration_ms_Valid() const{
    return m_phase2_duration_ms_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getPhase3DurationMs() const {
    return m_phase3_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setPhase3DurationMs(const double &phase3_duration_ms) {
    m_phase3_duration_ms = phase3_duration_ms;
    m_phase3_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase3_duration_ms_Set() const{
    return m_phase3_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase3_duration_ms_Valid() const{
    return m_phase3_duration_ms_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getPhase4DurationMs() const {
    return m_phase4_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setPhase4DurationMs(const double &phase4_duration_ms) {
    m_phase4_duration_ms = phase4_duration_ms;
    m_phase4_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase4_duration_ms_Set() const{
    return m_phase4_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_phase4_duration_ms_Valid() const{
    return m_phase4_duration_ms_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getReconfigType() const {
    return m_reconfig_type;
}
void OAIPartitionReconfigurationCompletedEvent::setReconfigType(const QString &reconfig_type) {
    m_reconfig_type = reconfig_type;
    m_reconfig_type_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_reconfig_type_Set() const{
    return m_reconfig_type_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_reconfig_type_Valid() const{
    return m_reconfig_type_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getResult() const {
    return m_result;
}
void OAIPartitionReconfigurationCompletedEvent::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_result_Set() const{
    return m_result_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIPartitionReconfigurationCompletedEvent::getServiceType() const {
    return m_service_type;
}
void OAIPartitionReconfigurationCompletedEvent::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_service_type_Valid() const{
    return m_service_type_isValid;
}

double OAIPartitionReconfigurationCompletedEvent::getTotalDurationMs() const {
    return m_total_duration_ms;
}
void OAIPartitionReconfigurationCompletedEvent::setTotalDurationMs(const double &total_duration_ms) {
    m_total_duration_ms = total_duration_ms;
    m_total_duration_ms_isSet = true;
}

bool OAIPartitionReconfigurationCompletedEvent::is_total_duration_ms_Set() const{
    return m_total_duration_ms_isSet;
}

bool OAIPartitionReconfigurationCompletedEvent::is_total_duration_ms_Valid() const{
    return m_total_duration_ms_isValid;
}

bool OAIPartitionReconfigurationCompletedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_epoch_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_epoch_data_loss_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase0_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase1_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase2_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase3_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase4_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconfig_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionReconfigurationCompletedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_partition_id_isValid && m_cc_epoch_config_version_isValid && m_cc_epoch_data_loss_version_isValid && m_node_instance_id_isValid && m_node_name_isValid && m_phase0_duration_ms_isValid && m_phase1_duration_ms_isValid && m_phase2_duration_ms_isValid && m_phase3_duration_ms_isValid && m_phase4_duration_ms_isValid && m_reconfig_type_isValid && m_result_isValid && m_service_type_isValid && m_total_duration_ms_isValid && true;
}

} // namespace OpenAPI
