/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestartNodeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestartNodeDescription::OAIRestartNodeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestartNodeDescription::OAIRestartNodeDescription() {
    this->initializeModel();
}

OAIRestartNodeDescription::~OAIRestartNodeDescription() {}

void OAIRestartNodeDescription::initializeModel() {

    m_create_fabric_dump_isSet = false;
    m_create_fabric_dump_isValid = false;

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;
}

void OAIRestartNodeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestartNodeDescription::fromJsonObject(QJsonObject json) {

    m_create_fabric_dump_isValid = ::OpenAPI::fromJsonValue(m_create_fabric_dump, json[QString("CreateFabricDump")]);
    m_create_fabric_dump_isSet = !json[QString("CreateFabricDump")].isNull() && m_create_fabric_dump_isValid;

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("NodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("NodeInstanceId")].isNull() && m_node_instance_id_isValid;
}

QString OAIRestartNodeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestartNodeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_create_fabric_dump_isSet) {
        obj.insert(QString("CreateFabricDump"), ::OpenAPI::toJsonValue(m_create_fabric_dump));
    }
    if (m_node_instance_id_isSet) {
        obj.insert(QString("NodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    return obj;
}

QString OAIRestartNodeDescription::getCreateFabricDump() const {
    return m_create_fabric_dump;
}
void OAIRestartNodeDescription::setCreateFabricDump(const QString &create_fabric_dump) {
    m_create_fabric_dump = create_fabric_dump;
    m_create_fabric_dump_isSet = true;
}

bool OAIRestartNodeDescription::is_create_fabric_dump_Set() const{
    return m_create_fabric_dump_isSet;
}

bool OAIRestartNodeDescription::is_create_fabric_dump_Valid() const{
    return m_create_fabric_dump_isValid;
}

QString OAIRestartNodeDescription::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAIRestartNodeDescription::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAIRestartNodeDescription::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAIRestartNodeDescription::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

bool OAIRestartNodeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_fabric_dump_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestartNodeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_instance_id_isValid && true;
}

} // namespace OpenAPI
