/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDescription::OAIServiceDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDescription::OAIServiceDescription() {
    this->initializeModel();
}

OAIServiceDescription::~OAIServiceDescription() {}

void OAIServiceDescription::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_correlation_scheme_isSet = false;
    m_correlation_scheme_isValid = false;

    m_default_move_cost_isSet = false;
    m_default_move_cost_isValid = false;

    m_initialization_data_isSet = false;
    m_initialization_data_isValid = false;

    m_is_default_move_cost_specified_isSet = false;
    m_is_default_move_cost_specified_isValid = false;

    m_partition_description_isSet = false;
    m_partition_description_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_scaling_policies_isSet = false;
    m_scaling_policies_isValid = false;

    m_service_dns_name_isSet = false;
    m_service_dns_name_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_load_metrics_isSet = false;
    m_service_load_metrics_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_package_activation_mode_isSet = false;
    m_service_package_activation_mode_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;
}

void OAIServiceDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDescription::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_correlation_scheme_isValid = ::OpenAPI::fromJsonValue(m_correlation_scheme, json[QString("CorrelationScheme")]);
    m_correlation_scheme_isSet = !json[QString("CorrelationScheme")].isNull() && m_correlation_scheme_isValid;

    m_default_move_cost_isValid = ::OpenAPI::fromJsonValue(m_default_move_cost, json[QString("DefaultMoveCost")]);
    m_default_move_cost_isSet = !json[QString("DefaultMoveCost")].isNull() && m_default_move_cost_isValid;

    m_initialization_data_isValid = ::OpenAPI::fromJsonValue(m_initialization_data, json[QString("InitializationData")]);
    m_initialization_data_isSet = !json[QString("InitializationData")].isNull() && m_initialization_data_isValid;

    m_is_default_move_cost_specified_isValid = ::OpenAPI::fromJsonValue(m_is_default_move_cost_specified, json[QString("IsDefaultMoveCostSpecified")]);
    m_is_default_move_cost_specified_isSet = !json[QString("IsDefaultMoveCostSpecified")].isNull() && m_is_default_move_cost_specified_isValid;

    m_partition_description_isValid = ::OpenAPI::fromJsonValue(m_partition_description, json[QString("PartitionDescription")]);
    m_partition_description_isSet = !json[QString("PartitionDescription")].isNull() && m_partition_description_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_scaling_policies_isValid = ::OpenAPI::fromJsonValue(m_scaling_policies, json[QString("ScalingPolicies")]);
    m_scaling_policies_isSet = !json[QString("ScalingPolicies")].isNull() && m_scaling_policies_isValid;

    m_service_dns_name_isValid = ::OpenAPI::fromJsonValue(m_service_dns_name, json[QString("ServiceDnsName")]);
    m_service_dns_name_isSet = !json[QString("ServiceDnsName")].isNull() && m_service_dns_name_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_load_metrics_isValid = ::OpenAPI::fromJsonValue(m_service_load_metrics, json[QString("ServiceLoadMetrics")]);
    m_service_load_metrics_isSet = !json[QString("ServiceLoadMetrics")].isNull() && m_service_load_metrics_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_package_activation_mode_isValid = ::OpenAPI::fromJsonValue(m_service_package_activation_mode, json[QString("ServicePackageActivationMode")]);
    m_service_package_activation_mode_isSet = !json[QString("ServicePackageActivationMode")].isNull() && m_service_package_activation_mode_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("ServicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("ServicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;
}

QString OAIServiceDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_correlation_scheme.size() > 0) {
        obj.insert(QString("CorrelationScheme"), ::OpenAPI::toJsonValue(m_correlation_scheme));
    }
    if (m_default_move_cost.isSet()) {
        obj.insert(QString("DefaultMoveCost"), ::OpenAPI::toJsonValue(m_default_move_cost));
    }
    if (m_initialization_data.size() > 0) {
        obj.insert(QString("InitializationData"), ::OpenAPI::toJsonValue(m_initialization_data));
    }
    if (m_is_default_move_cost_specified_isSet) {
        obj.insert(QString("IsDefaultMoveCostSpecified"), ::OpenAPI::toJsonValue(m_is_default_move_cost_specified));
    }
    if (m_partition_description.isSet()) {
        obj.insert(QString("PartitionDescription"), ::OpenAPI::toJsonValue(m_partition_description));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_scaling_policies.size() > 0) {
        obj.insert(QString("ScalingPolicies"), ::OpenAPI::toJsonValue(m_scaling_policies));
    }
    if (m_service_dns_name_isSet) {
        obj.insert(QString("ServiceDnsName"), ::OpenAPI::toJsonValue(m_service_dns_name));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_load_metrics.size() > 0) {
        obj.insert(QString("ServiceLoadMetrics"), ::OpenAPI::toJsonValue(m_service_load_metrics));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_package_activation_mode.isSet()) {
        obj.insert(QString("ServicePackageActivationMode"), ::OpenAPI::toJsonValue(m_service_package_activation_mode));
    }
    if (m_service_placement_policies.size() > 0) {
        obj.insert(QString("ServicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    return obj;
}

QString OAIServiceDescription::getApplicationName() const {
    return m_application_name;
}
void OAIServiceDescription::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIServiceDescription::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIServiceDescription::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QList<OAIServiceCorrelationDescription> OAIServiceDescription::getCorrelationScheme() const {
    return m_correlation_scheme;
}
void OAIServiceDescription::setCorrelationScheme(const QList<OAIServiceCorrelationDescription> &correlation_scheme) {
    m_correlation_scheme = correlation_scheme;
    m_correlation_scheme_isSet = true;
}

bool OAIServiceDescription::is_correlation_scheme_Set() const{
    return m_correlation_scheme_isSet;
}

bool OAIServiceDescription::is_correlation_scheme_Valid() const{
    return m_correlation_scheme_isValid;
}

OAIMoveCost OAIServiceDescription::getDefaultMoveCost() const {
    return m_default_move_cost;
}
void OAIServiceDescription::setDefaultMoveCost(const OAIMoveCost &default_move_cost) {
    m_default_move_cost = default_move_cost;
    m_default_move_cost_isSet = true;
}

bool OAIServiceDescription::is_default_move_cost_Set() const{
    return m_default_move_cost_isSet;
}

bool OAIServiceDescription::is_default_move_cost_Valid() const{
    return m_default_move_cost_isValid;
}

QList<qint32> OAIServiceDescription::getInitializationData() const {
    return m_initialization_data;
}
void OAIServiceDescription::setInitializationData(const QList<qint32> &initialization_data) {
    m_initialization_data = initialization_data;
    m_initialization_data_isSet = true;
}

bool OAIServiceDescription::is_initialization_data_Set() const{
    return m_initialization_data_isSet;
}

bool OAIServiceDescription::is_initialization_data_Valid() const{
    return m_initialization_data_isValid;
}

bool OAIServiceDescription::isIsDefaultMoveCostSpecified() const {
    return m_is_default_move_cost_specified;
}
void OAIServiceDescription::setIsDefaultMoveCostSpecified(const bool &is_default_move_cost_specified) {
    m_is_default_move_cost_specified = is_default_move_cost_specified;
    m_is_default_move_cost_specified_isSet = true;
}

bool OAIServiceDescription::is_is_default_move_cost_specified_Set() const{
    return m_is_default_move_cost_specified_isSet;
}

bool OAIServiceDescription::is_is_default_move_cost_specified_Valid() const{
    return m_is_default_move_cost_specified_isValid;
}

OAIPartitionSchemeDescription OAIServiceDescription::getPartitionDescription() const {
    return m_partition_description;
}
void OAIServiceDescription::setPartitionDescription(const OAIPartitionSchemeDescription &partition_description) {
    m_partition_description = partition_description;
    m_partition_description_isSet = true;
}

bool OAIServiceDescription::is_partition_description_Set() const{
    return m_partition_description_isSet;
}

bool OAIServiceDescription::is_partition_description_Valid() const{
    return m_partition_description_isValid;
}

QString OAIServiceDescription::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIServiceDescription::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIServiceDescription::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIServiceDescription::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIScalingPolicyDescription> OAIServiceDescription::getScalingPolicies() const {
    return m_scaling_policies;
}
void OAIServiceDescription::setScalingPolicies(const QList<OAIScalingPolicyDescription> &scaling_policies) {
    m_scaling_policies = scaling_policies;
    m_scaling_policies_isSet = true;
}

bool OAIServiceDescription::is_scaling_policies_Set() const{
    return m_scaling_policies_isSet;
}

bool OAIServiceDescription::is_scaling_policies_Valid() const{
    return m_scaling_policies_isValid;
}

QString OAIServiceDescription::getServiceDnsName() const {
    return m_service_dns_name;
}
void OAIServiceDescription::setServiceDnsName(const QString &service_dns_name) {
    m_service_dns_name = service_dns_name;
    m_service_dns_name_isSet = true;
}

bool OAIServiceDescription::is_service_dns_name_Set() const{
    return m_service_dns_name_isSet;
}

bool OAIServiceDescription::is_service_dns_name_Valid() const{
    return m_service_dns_name_isValid;
}

OAIServiceKind OAIServiceDescription::getServiceKind() const {
    return m_service_kind;
}
void OAIServiceDescription::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIServiceDescription::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIServiceDescription::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QList<OAIServiceLoadMetricDescription> OAIServiceDescription::getServiceLoadMetrics() const {
    return m_service_load_metrics;
}
void OAIServiceDescription::setServiceLoadMetrics(const QList<OAIServiceLoadMetricDescription> &service_load_metrics) {
    m_service_load_metrics = service_load_metrics;
    m_service_load_metrics_isSet = true;
}

bool OAIServiceDescription::is_service_load_metrics_Set() const{
    return m_service_load_metrics_isSet;
}

bool OAIServiceDescription::is_service_load_metrics_Valid() const{
    return m_service_load_metrics_isValid;
}

QString OAIServiceDescription::getServiceName() const {
    return m_service_name;
}
void OAIServiceDescription::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceDescription::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceDescription::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIServicePackageActivationMode OAIServiceDescription::getServicePackageActivationMode() const {
    return m_service_package_activation_mode;
}
void OAIServiceDescription::setServicePackageActivationMode(const OAIServicePackageActivationMode &service_package_activation_mode) {
    m_service_package_activation_mode = service_package_activation_mode;
    m_service_package_activation_mode_isSet = true;
}

bool OAIServiceDescription::is_service_package_activation_mode_Set() const{
    return m_service_package_activation_mode_isSet;
}

bool OAIServiceDescription::is_service_package_activation_mode_Valid() const{
    return m_service_package_activation_mode_isValid;
}

QList<OAIServicePlacementPolicyDescription> OAIServiceDescription::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIServiceDescription::setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIServiceDescription::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIServiceDescription::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

QString OAIServiceDescription::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIServiceDescription::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIServiceDescription::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIServiceDescription::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

bool OAIServiceDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_scheme.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_move_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_move_cost_specified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_load_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_package_activation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partition_description_isValid && m_service_kind_isValid && m_service_name_isValid && m_service_type_name_isValid && true;
}

} // namespace OpenAPI
