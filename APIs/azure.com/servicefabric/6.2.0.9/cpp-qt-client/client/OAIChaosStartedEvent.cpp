/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChaosStartedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChaosStartedEvent::OAIChaosStartedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChaosStartedEvent::OAIChaosStartedEvent() {
    this->initializeModel();
}

OAIChaosStartedEvent::~OAIChaosStartedEvent() {}

void OAIChaosStartedEvent::initializeModel() {

    m_event_instance_id_isSet = false;
    m_event_instance_id_isValid = false;

    m_has_correlated_events_isSet = false;
    m_has_correlated_events_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_chaos_context_isSet = false;
    m_chaos_context_isValid = false;

    m_cluster_health_policy_isSet = false;
    m_cluster_health_policy_isValid = false;

    m_included_application_list_isSet = false;
    m_included_application_list_isValid = false;

    m_included_node_type_list_isSet = false;
    m_included_node_type_list_isValid = false;

    m_max_cluster_stabilization_timeout_in_seconds_isSet = false;
    m_max_cluster_stabilization_timeout_in_seconds_isValid = false;

    m_max_concurrent_faults_isSet = false;
    m_max_concurrent_faults_isValid = false;

    m_move_replica_fault_enabled_isSet = false;
    m_move_replica_fault_enabled_isValid = false;

    m_time_to_run_in_seconds_isSet = false;
    m_time_to_run_in_seconds_isValid = false;

    m_wait_time_between_fautls_in_seconds_isSet = false;
    m_wait_time_between_fautls_in_seconds_isValid = false;

    m_wait_time_between_iterations_in_seconds_isSet = false;
    m_wait_time_between_iterations_in_seconds_isValid = false;
}

void OAIChaosStartedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChaosStartedEvent::fromJsonObject(QJsonObject json) {

    m_event_instance_id_isValid = ::OpenAPI::fromJsonValue(m_event_instance_id, json[QString("EventInstanceId")]);
    m_event_instance_id_isSet = !json[QString("EventInstanceId")].isNull() && m_event_instance_id_isValid;

    m_has_correlated_events_isValid = ::OpenAPI::fromJsonValue(m_has_correlated_events, json[QString("HasCorrelatedEvents")]);
    m_has_correlated_events_isSet = !json[QString("HasCorrelatedEvents")].isNull() && m_has_correlated_events_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_chaos_context_isValid = ::OpenAPI::fromJsonValue(m_chaos_context, json[QString("ChaosContext")]);
    m_chaos_context_isSet = !json[QString("ChaosContext")].isNull() && m_chaos_context_isValid;

    m_cluster_health_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_health_policy, json[QString("ClusterHealthPolicy")]);
    m_cluster_health_policy_isSet = !json[QString("ClusterHealthPolicy")].isNull() && m_cluster_health_policy_isValid;

    m_included_application_list_isValid = ::OpenAPI::fromJsonValue(m_included_application_list, json[QString("IncludedApplicationList")]);
    m_included_application_list_isSet = !json[QString("IncludedApplicationList")].isNull() && m_included_application_list_isValid;

    m_included_node_type_list_isValid = ::OpenAPI::fromJsonValue(m_included_node_type_list, json[QString("IncludedNodeTypeList")]);
    m_included_node_type_list_isSet = !json[QString("IncludedNodeTypeList")].isNull() && m_included_node_type_list_isValid;

    m_max_cluster_stabilization_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_cluster_stabilization_timeout_in_seconds, json[QString("MaxClusterStabilizationTimeoutInSeconds")]);
    m_max_cluster_stabilization_timeout_in_seconds_isSet = !json[QString("MaxClusterStabilizationTimeoutInSeconds")].isNull() && m_max_cluster_stabilization_timeout_in_seconds_isValid;

    m_max_concurrent_faults_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_faults, json[QString("MaxConcurrentFaults")]);
    m_max_concurrent_faults_isSet = !json[QString("MaxConcurrentFaults")].isNull() && m_max_concurrent_faults_isValid;

    m_move_replica_fault_enabled_isValid = ::OpenAPI::fromJsonValue(m_move_replica_fault_enabled, json[QString("MoveReplicaFaultEnabled")]);
    m_move_replica_fault_enabled_isSet = !json[QString("MoveReplicaFaultEnabled")].isNull() && m_move_replica_fault_enabled_isValid;

    m_time_to_run_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_to_run_in_seconds, json[QString("TimeToRunInSeconds")]);
    m_time_to_run_in_seconds_isSet = !json[QString("TimeToRunInSeconds")].isNull() && m_time_to_run_in_seconds_isValid;

    m_wait_time_between_fautls_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_time_between_fautls_in_seconds, json[QString("WaitTimeBetweenFautlsInSeconds")]);
    m_wait_time_between_fautls_in_seconds_isSet = !json[QString("WaitTimeBetweenFautlsInSeconds")].isNull() && m_wait_time_between_fautls_in_seconds_isValid;

    m_wait_time_between_iterations_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_time_between_iterations_in_seconds, json[QString("WaitTimeBetweenIterationsInSeconds")]);
    m_wait_time_between_iterations_in_seconds_isSet = !json[QString("WaitTimeBetweenIterationsInSeconds")].isNull() && m_wait_time_between_iterations_in_seconds_isValid;
}

QString OAIChaosStartedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChaosStartedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_instance_id_isSet) {
        obj.insert(QString("EventInstanceId"), ::OpenAPI::toJsonValue(m_event_instance_id));
    }
    if (m_has_correlated_events_isSet) {
        obj.insert(QString("HasCorrelatedEvents"), ::OpenAPI::toJsonValue(m_has_correlated_events));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_chaos_context_isSet) {
        obj.insert(QString("ChaosContext"), ::OpenAPI::toJsonValue(m_chaos_context));
    }
    if (m_cluster_health_policy_isSet) {
        obj.insert(QString("ClusterHealthPolicy"), ::OpenAPI::toJsonValue(m_cluster_health_policy));
    }
    if (m_included_application_list_isSet) {
        obj.insert(QString("IncludedApplicationList"), ::OpenAPI::toJsonValue(m_included_application_list));
    }
    if (m_included_node_type_list_isSet) {
        obj.insert(QString("IncludedNodeTypeList"), ::OpenAPI::toJsonValue(m_included_node_type_list));
    }
    if (m_max_cluster_stabilization_timeout_in_seconds_isSet) {
        obj.insert(QString("MaxClusterStabilizationTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_max_cluster_stabilization_timeout_in_seconds));
    }
    if (m_max_concurrent_faults_isSet) {
        obj.insert(QString("MaxConcurrentFaults"), ::OpenAPI::toJsonValue(m_max_concurrent_faults));
    }
    if (m_move_replica_fault_enabled_isSet) {
        obj.insert(QString("MoveReplicaFaultEnabled"), ::OpenAPI::toJsonValue(m_move_replica_fault_enabled));
    }
    if (m_time_to_run_in_seconds_isSet) {
        obj.insert(QString("TimeToRunInSeconds"), ::OpenAPI::toJsonValue(m_time_to_run_in_seconds));
    }
    if (m_wait_time_between_fautls_in_seconds_isSet) {
        obj.insert(QString("WaitTimeBetweenFautlsInSeconds"), ::OpenAPI::toJsonValue(m_wait_time_between_fautls_in_seconds));
    }
    if (m_wait_time_between_iterations_in_seconds_isSet) {
        obj.insert(QString("WaitTimeBetweenIterationsInSeconds"), ::OpenAPI::toJsonValue(m_wait_time_between_iterations_in_seconds));
    }
    return obj;
}

QString OAIChaosStartedEvent::getEventInstanceId() const {
    return m_event_instance_id;
}
void OAIChaosStartedEvent::setEventInstanceId(const QString &event_instance_id) {
    m_event_instance_id = event_instance_id;
    m_event_instance_id_isSet = true;
}

bool OAIChaosStartedEvent::is_event_instance_id_Set() const{
    return m_event_instance_id_isSet;
}

bool OAIChaosStartedEvent::is_event_instance_id_Valid() const{
    return m_event_instance_id_isValid;
}

bool OAIChaosStartedEvent::isHasCorrelatedEvents() const {
    return m_has_correlated_events;
}
void OAIChaosStartedEvent::setHasCorrelatedEvents(const bool &has_correlated_events) {
    m_has_correlated_events = has_correlated_events;
    m_has_correlated_events_isSet = true;
}

bool OAIChaosStartedEvent::is_has_correlated_events_Set() const{
    return m_has_correlated_events_isSet;
}

bool OAIChaosStartedEvent::is_has_correlated_events_Valid() const{
    return m_has_correlated_events_isValid;
}

OAIFabricEventKind OAIChaosStartedEvent::getKind() const {
    return m_kind;
}
void OAIChaosStartedEvent::setKind(const OAIFabricEventKind &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChaosStartedEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChaosStartedEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIChaosStartedEvent::getTimeStamp() const {
    return m_time_stamp;
}
void OAIChaosStartedEvent::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIChaosStartedEvent::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIChaosStartedEvent::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIChaosStartedEvent::getChaosContext() const {
    return m_chaos_context;
}
void OAIChaosStartedEvent::setChaosContext(const QString &chaos_context) {
    m_chaos_context = chaos_context;
    m_chaos_context_isSet = true;
}

bool OAIChaosStartedEvent::is_chaos_context_Set() const{
    return m_chaos_context_isSet;
}

bool OAIChaosStartedEvent::is_chaos_context_Valid() const{
    return m_chaos_context_isValid;
}

QString OAIChaosStartedEvent::getClusterHealthPolicy() const {
    return m_cluster_health_policy;
}
void OAIChaosStartedEvent::setClusterHealthPolicy(const QString &cluster_health_policy) {
    m_cluster_health_policy = cluster_health_policy;
    m_cluster_health_policy_isSet = true;
}

bool OAIChaosStartedEvent::is_cluster_health_policy_Set() const{
    return m_cluster_health_policy_isSet;
}

bool OAIChaosStartedEvent::is_cluster_health_policy_Valid() const{
    return m_cluster_health_policy_isValid;
}

QString OAIChaosStartedEvent::getIncludedApplicationList() const {
    return m_included_application_list;
}
void OAIChaosStartedEvent::setIncludedApplicationList(const QString &included_application_list) {
    m_included_application_list = included_application_list;
    m_included_application_list_isSet = true;
}

bool OAIChaosStartedEvent::is_included_application_list_Set() const{
    return m_included_application_list_isSet;
}

bool OAIChaosStartedEvent::is_included_application_list_Valid() const{
    return m_included_application_list_isValid;
}

QString OAIChaosStartedEvent::getIncludedNodeTypeList() const {
    return m_included_node_type_list;
}
void OAIChaosStartedEvent::setIncludedNodeTypeList(const QString &included_node_type_list) {
    m_included_node_type_list = included_node_type_list;
    m_included_node_type_list_isSet = true;
}

bool OAIChaosStartedEvent::is_included_node_type_list_Set() const{
    return m_included_node_type_list_isSet;
}

bool OAIChaosStartedEvent::is_included_node_type_list_Valid() const{
    return m_included_node_type_list_isValid;
}

double OAIChaosStartedEvent::getMaxClusterStabilizationTimeoutInSeconds() const {
    return m_max_cluster_stabilization_timeout_in_seconds;
}
void OAIChaosStartedEvent::setMaxClusterStabilizationTimeoutInSeconds(const double &max_cluster_stabilization_timeout_in_seconds) {
    m_max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds;
    m_max_cluster_stabilization_timeout_in_seconds_isSet = true;
}

bool OAIChaosStartedEvent::is_max_cluster_stabilization_timeout_in_seconds_Set() const{
    return m_max_cluster_stabilization_timeout_in_seconds_isSet;
}

bool OAIChaosStartedEvent::is_max_cluster_stabilization_timeout_in_seconds_Valid() const{
    return m_max_cluster_stabilization_timeout_in_seconds_isValid;
}

qint64 OAIChaosStartedEvent::getMaxConcurrentFaults() const {
    return m_max_concurrent_faults;
}
void OAIChaosStartedEvent::setMaxConcurrentFaults(const qint64 &max_concurrent_faults) {
    m_max_concurrent_faults = max_concurrent_faults;
    m_max_concurrent_faults_isSet = true;
}

bool OAIChaosStartedEvent::is_max_concurrent_faults_Set() const{
    return m_max_concurrent_faults_isSet;
}

bool OAIChaosStartedEvent::is_max_concurrent_faults_Valid() const{
    return m_max_concurrent_faults_isValid;
}

bool OAIChaosStartedEvent::isMoveReplicaFaultEnabled() const {
    return m_move_replica_fault_enabled;
}
void OAIChaosStartedEvent::setMoveReplicaFaultEnabled(const bool &move_replica_fault_enabled) {
    m_move_replica_fault_enabled = move_replica_fault_enabled;
    m_move_replica_fault_enabled_isSet = true;
}

bool OAIChaosStartedEvent::is_move_replica_fault_enabled_Set() const{
    return m_move_replica_fault_enabled_isSet;
}

bool OAIChaosStartedEvent::is_move_replica_fault_enabled_Valid() const{
    return m_move_replica_fault_enabled_isValid;
}

double OAIChaosStartedEvent::getTimeToRunInSeconds() const {
    return m_time_to_run_in_seconds;
}
void OAIChaosStartedEvent::setTimeToRunInSeconds(const double &time_to_run_in_seconds) {
    m_time_to_run_in_seconds = time_to_run_in_seconds;
    m_time_to_run_in_seconds_isSet = true;
}

bool OAIChaosStartedEvent::is_time_to_run_in_seconds_Set() const{
    return m_time_to_run_in_seconds_isSet;
}

bool OAIChaosStartedEvent::is_time_to_run_in_seconds_Valid() const{
    return m_time_to_run_in_seconds_isValid;
}

double OAIChaosStartedEvent::getWaitTimeBetweenFautlsInSeconds() const {
    return m_wait_time_between_fautls_in_seconds;
}
void OAIChaosStartedEvent::setWaitTimeBetweenFautlsInSeconds(const double &wait_time_between_fautls_in_seconds) {
    m_wait_time_between_fautls_in_seconds = wait_time_between_fautls_in_seconds;
    m_wait_time_between_fautls_in_seconds_isSet = true;
}

bool OAIChaosStartedEvent::is_wait_time_between_fautls_in_seconds_Set() const{
    return m_wait_time_between_fautls_in_seconds_isSet;
}

bool OAIChaosStartedEvent::is_wait_time_between_fautls_in_seconds_Valid() const{
    return m_wait_time_between_fautls_in_seconds_isValid;
}

double OAIChaosStartedEvent::getWaitTimeBetweenIterationsInSeconds() const {
    return m_wait_time_between_iterations_in_seconds;
}
void OAIChaosStartedEvent::setWaitTimeBetweenIterationsInSeconds(const double &wait_time_between_iterations_in_seconds) {
    m_wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds;
    m_wait_time_between_iterations_in_seconds_isSet = true;
}

bool OAIChaosStartedEvent::is_wait_time_between_iterations_in_seconds_Set() const{
    return m_wait_time_between_iterations_in_seconds_isSet;
}

bool OAIChaosStartedEvent::is_wait_time_between_iterations_in_seconds_Valid() const{
    return m_wait_time_between_iterations_in_seconds_isValid;
}

bool OAIChaosStartedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_correlated_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chaos_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_health_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_application_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_node_type_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cluster_stabilization_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_faults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_replica_fault_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_run_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_between_fautls_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_between_iterations_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChaosStartedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_instance_id_isValid && m_kind_isValid && m_time_stamp_isValid && m_chaos_context_isValid && m_cluster_health_policy_isValid && m_included_application_list_isValid && m_included_node_type_list_isValid && m_max_cluster_stabilization_timeout_in_seconds_isValid && m_max_concurrent_faults_isValid && m_move_replica_fault_enabled_isValid && m_time_to_run_in_seconds_isValid && m_wait_time_between_fautls_in_seconds_isValid && m_wait_time_between_iterations_in_seconds_isValid && true;
}

} // namespace OpenAPI
