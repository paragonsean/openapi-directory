/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.2.0.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIComposeDeploymentApi_H
#define OAI_OAIComposeDeploymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComposeDeploymentStatusInfo.h"
#include "OAIComposeDeploymentUpgradeDescription.h"
#include "OAIComposeDeploymentUpgradeProgressInfo.h"
#include "OAICreateComposeDeploymentDescription.h"
#include "OAIFabricError.h"
#include "OAIPagedComposeDeploymentStatusInfoList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIComposeDeploymentApi : public QObject {
    Q_OBJECT

public:
    OAIComposeDeploymentApi(const int timeOut = 0);
    ~OAIComposeDeploymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  create_compose_deployment_description OAICreateComposeDeploymentDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void createComposeDeployment(const QString &api_version, const OAICreateComposeDeploymentDescription &create_compose_deployment_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getComposeDeploymentStatus(const QString &api_version, const QString &deployment_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  continuation_token QString [optional]
    * @param[in]  max_results qint64 [optional]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getComposeDeploymentStatusList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_results = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void getComposeDeploymentUpgradeProgress(const QString &api_version, const QString &deployment_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void removeComposeDeployment(const QString &api_version, const QString &deployment_name, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_name QString [required]
    * @param[in]  compose_deployment_upgrade_description OAIComposeDeploymentUpgradeDescription [required]
    * @param[in]  timeout qint64 [optional]
    */
    virtual void startComposeDeploymentUpgrade(const QString &api_version, const QString &deployment_name, const OAIComposeDeploymentUpgradeDescription &compose_deployment_upgrade_description, const ::OpenAPI::OptionalParam<qint64> &timeout = ::OpenAPI::OptionalParam<qint64>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createComposeDeploymentCallback(OAIHttpRequestWorker *worker);
    void getComposeDeploymentStatusCallback(OAIHttpRequestWorker *worker);
    void getComposeDeploymentStatusListCallback(OAIHttpRequestWorker *worker);
    void getComposeDeploymentUpgradeProgressCallback(OAIHttpRequestWorker *worker);
    void removeComposeDeploymentCallback(OAIHttpRequestWorker *worker);
    void startComposeDeploymentUpgradeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createComposeDeploymentSignal();
    void getComposeDeploymentStatusSignal(OAIComposeDeploymentStatusInfo summary);
    void getComposeDeploymentStatusListSignal(OAIPagedComposeDeploymentStatusInfoList summary);
    void getComposeDeploymentUpgradeProgressSignal(OAIComposeDeploymentUpgradeProgressInfo summary);
    void removeComposeDeploymentSignal();
    void startComposeDeploymentUpgradeSignal();


    void createComposeDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void getComposeDeploymentStatusSignalFull(OAIHttpRequestWorker *worker, OAIComposeDeploymentStatusInfo summary);
    void getComposeDeploymentStatusListSignalFull(OAIHttpRequestWorker *worker, OAIPagedComposeDeploymentStatusInfoList summary);
    void getComposeDeploymentUpgradeProgressSignalFull(OAIHttpRequestWorker *worker, OAIComposeDeploymentUpgradeProgressInfo summary);
    void removeComposeDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void startComposeDeploymentUpgradeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createComposeDeploymentSignalError() instead")
    void createComposeDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createComposeDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentStatusSignalError() instead")
    void getComposeDeploymentStatusSignalE(OAIComposeDeploymentStatusInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentStatusSignalError(OAIComposeDeploymentStatusInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentStatusListSignalError() instead")
    void getComposeDeploymentStatusListSignalE(OAIPagedComposeDeploymentStatusInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentStatusListSignalError(OAIPagedComposeDeploymentStatusInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentUpgradeProgressSignalError() instead")
    void getComposeDeploymentUpgradeProgressSignalE(OAIComposeDeploymentUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentUpgradeProgressSignalError(OAIComposeDeploymentUpgradeProgressInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeComposeDeploymentSignalError() instead")
    void removeComposeDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeComposeDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startComposeDeploymentUpgradeSignalError() instead")
    void startComposeDeploymentUpgradeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startComposeDeploymentUpgradeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createComposeDeploymentSignalErrorFull() instead")
    void createComposeDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createComposeDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentStatusSignalErrorFull() instead")
    void getComposeDeploymentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentStatusListSignalErrorFull() instead")
    void getComposeDeploymentStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComposeDeploymentUpgradeProgressSignalErrorFull() instead")
    void getComposeDeploymentUpgradeProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComposeDeploymentUpgradeProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeComposeDeploymentSignalErrorFull() instead")
    void removeComposeDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeComposeDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startComposeDeploymentUpgradeSignalErrorFull() instead")
    void startComposeDeploymentUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startComposeDeploymentUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
