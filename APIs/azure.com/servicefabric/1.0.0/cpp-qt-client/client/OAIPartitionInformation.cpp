/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionInformation::OAIPartitionInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionInformation::OAIPartitionInformation() {
    this->initializeModel();
}

OAIPartitionInformation::~OAIPartitionInformation() {}

void OAIPartitionInformation::initializeModel() {

    m_high_key_isSet = false;
    m_high_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_low_key_isSet = false;
    m_low_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_partition_kind_isSet = false;
    m_service_partition_kind_isValid = false;
}

void OAIPartitionInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionInformation::fromJsonObject(QJsonObject json) {

    m_high_key_isValid = ::OpenAPI::fromJsonValue(m_high_key, json[QString("HighKey")]);
    m_high_key_isSet = !json[QString("HighKey")].isNull() && m_high_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_low_key_isValid = ::OpenAPI::fromJsonValue(m_low_key, json[QString("LowKey")]);
    m_low_key_isSet = !json[QString("LowKey")].isNull() && m_low_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_service_partition_kind_isValid = ::OpenAPI::fromJsonValue(m_service_partition_kind, json[QString("ServicePartitionKind")]);
    m_service_partition_kind_isSet = !json[QString("ServicePartitionKind")].isNull() && m_service_partition_kind_isValid;
}

QString OAIPartitionInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_high_key_isSet) {
        obj.insert(QString("HighKey"), ::OpenAPI::toJsonValue(m_high_key));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_low_key_isSet) {
        obj.insert(QString("LowKey"), ::OpenAPI::toJsonValue(m_low_key));
    }
    if (m_name.size() > 0) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_partition_kind_isSet) {
        obj.insert(QString("ServicePartitionKind"), ::OpenAPI::toJsonValue(m_service_partition_kind));
    }
    return obj;
}

QString OAIPartitionInformation::getHighKey() const {
    return m_high_key;
}
void OAIPartitionInformation::setHighKey(const QString &high_key) {
    m_high_key = high_key;
    m_high_key_isSet = true;
}

bool OAIPartitionInformation::is_high_key_Set() const{
    return m_high_key_isSet;
}

bool OAIPartitionInformation::is_high_key_Valid() const{
    return m_high_key_isValid;
}

QString OAIPartitionInformation::getId() const {
    return m_id;
}
void OAIPartitionInformation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPartitionInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPartitionInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPartitionInformation::getLowKey() const {
    return m_low_key;
}
void OAIPartitionInformation::setLowKey(const QString &low_key) {
    m_low_key = low_key;
    m_low_key_isSet = true;
}

bool OAIPartitionInformation::is_low_key_Set() const{
    return m_low_key_isSet;
}

bool OAIPartitionInformation::is_low_key_Valid() const{
    return m_low_key_isValid;
}

QList<QString> OAIPartitionInformation::getName() const {
    return m_name;
}
void OAIPartitionInformation::setName(const QList<QString> &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPartitionInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPartitionInformation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPartitionInformation::getServicePartitionKind() const {
    return m_service_partition_kind;
}
void OAIPartitionInformation::setServicePartitionKind(const QString &service_partition_kind) {
    m_service_partition_kind = service_partition_kind;
    m_service_partition_kind_isSet = true;
}

bool OAIPartitionInformation::is_service_partition_kind_Set() const{
    return m_service_partition_kind_isSet;
}

bool OAIPartitionInformation::is_service_partition_kind_Valid() const{
    return m_service_partition_kind_isValid;
}

bool OAIPartitionInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_partition_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
