/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterClusterPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterClusterPackage::OAIRegisterClusterPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterClusterPackage::OAIRegisterClusterPackage() {
    this->initializeModel();
}

OAIRegisterClusterPackage::~OAIRegisterClusterPackage() {}

void OAIRegisterClusterPackage::initializeModel() {

    m_cluster_manifest_file_path_isSet = false;
    m_cluster_manifest_file_path_isValid = false;

    m_code_file_path_isSet = false;
    m_code_file_path_isValid = false;
}

void OAIRegisterClusterPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterClusterPackage::fromJsonObject(QJsonObject json) {

    m_cluster_manifest_file_path_isValid = ::OpenAPI::fromJsonValue(m_cluster_manifest_file_path, json[QString("ClusterManifestFilePath")]);
    m_cluster_manifest_file_path_isSet = !json[QString("ClusterManifestFilePath")].isNull() && m_cluster_manifest_file_path_isValid;

    m_code_file_path_isValid = ::OpenAPI::fromJsonValue(m_code_file_path, json[QString("CodeFilePath")]);
    m_code_file_path_isSet = !json[QString("CodeFilePath")].isNull() && m_code_file_path_isValid;
}

QString OAIRegisterClusterPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterClusterPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_manifest_file_path_isSet) {
        obj.insert(QString("ClusterManifestFilePath"), ::OpenAPI::toJsonValue(m_cluster_manifest_file_path));
    }
    if (m_code_file_path_isSet) {
        obj.insert(QString("CodeFilePath"), ::OpenAPI::toJsonValue(m_code_file_path));
    }
    return obj;
}

QString OAIRegisterClusterPackage::getClusterManifestFilePath() const {
    return m_cluster_manifest_file_path;
}
void OAIRegisterClusterPackage::setClusterManifestFilePath(const QString &cluster_manifest_file_path) {
    m_cluster_manifest_file_path = cluster_manifest_file_path;
    m_cluster_manifest_file_path_isSet = true;
}

bool OAIRegisterClusterPackage::is_cluster_manifest_file_path_Set() const{
    return m_cluster_manifest_file_path_isSet;
}

bool OAIRegisterClusterPackage::is_cluster_manifest_file_path_Valid() const{
    return m_cluster_manifest_file_path_isValid;
}

QString OAIRegisterClusterPackage::getCodeFilePath() const {
    return m_code_file_path;
}
void OAIRegisterClusterPackage::setCodeFilePath(const QString &code_file_path) {
    m_code_file_path = code_file_path;
    m_code_file_path_isSet = true;
}

bool OAIRegisterClusterPackage::is_code_file_path_Set() const{
    return m_code_file_path_isSet;
}

bool OAIRegisterClusterPackage::is_code_file_path_Valid() const{
    return m_code_file_path_isValid;
}

bool OAIRegisterClusterPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_manifest_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterClusterPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
