/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterHealthPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterHealthPolicy::OAIClusterHealthPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterHealthPolicy::OAIClusterHealthPolicy() {
    this->initializeModel();
}

OAIClusterHealthPolicy::~OAIClusterHealthPolicy() {}

void OAIClusterHealthPolicy::initializeModel() {

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_health_check_retry_timeout_in_milliseconds_isSet = false;
    m_health_check_retry_timeout_in_milliseconds_isValid = false;

    m_health_check_stable_duration_in_milliseconds_isSet = false;
    m_health_check_stable_duration_in_milliseconds_isValid = false;

    m_health_check_wait_duration_in_milliseconds_isSet = false;
    m_health_check_wait_duration_in_milliseconds_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_upgrade_domain_timeout_in_milliseconds_isSet = false;
    m_upgrade_domain_timeout_in_milliseconds_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;

    m_upgrade_timeout_in_milliseconds_isSet = false;
    m_upgrade_timeout_in_milliseconds_isValid = false;
}

void OAIClusterHealthPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterHealthPolicy::fromJsonObject(QJsonObject json) {

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("FailureAction")]);
    m_failure_action_isSet = !json[QString("FailureAction")].isNull() && m_failure_action_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("ForceRestart")]);
    m_force_restart_isSet = !json[QString("ForceRestart")].isNull() && m_force_restart_isValid;

    m_health_check_retry_timeout_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_retry_timeout_in_milliseconds, json[QString("HealthCheckRetryTimeoutInMilliseconds")]);
    m_health_check_retry_timeout_in_milliseconds_isSet = !json[QString("HealthCheckRetryTimeoutInMilliseconds")].isNull() && m_health_check_retry_timeout_in_milliseconds_isValid;

    m_health_check_stable_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_stable_duration_in_milliseconds, json[QString("HealthCheckStableDurationInMilliseconds")]);
    m_health_check_stable_duration_in_milliseconds_isSet = !json[QString("HealthCheckStableDurationInMilliseconds")].isNull() && m_health_check_stable_duration_in_milliseconds_isValid;

    m_health_check_wait_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_health_check_wait_duration_in_milliseconds, json[QString("HealthCheckWaitDurationInMilliseconds")]);
    m_health_check_wait_duration_in_milliseconds_isSet = !json[QString("HealthCheckWaitDurationInMilliseconds")].isNull() && m_health_check_wait_duration_in_milliseconds_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_upgrade_domain_timeout_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_timeout_in_milliseconds, json[QString("UpgradeDomainTimeoutInMilliseconds")]);
    m_upgrade_domain_timeout_in_milliseconds_isSet = !json[QString("UpgradeDomainTimeoutInMilliseconds")].isNull() && m_upgrade_domain_timeout_in_milliseconds_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;

    m_upgrade_timeout_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_timeout_in_milliseconds, json[QString("UpgradeTimeoutInMilliseconds")]);
    m_upgrade_timeout_in_milliseconds_isSet = !json[QString("UpgradeTimeoutInMilliseconds")].isNull() && m_upgrade_timeout_in_milliseconds_isValid;
}

QString OAIClusterHealthPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterHealthPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_action_isSet) {
        obj.insert(QString("FailureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("ForceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_health_check_retry_timeout_in_milliseconds_isSet) {
        obj.insert(QString("HealthCheckRetryTimeoutInMilliseconds"), ::OpenAPI::toJsonValue(m_health_check_retry_timeout_in_milliseconds));
    }
    if (m_health_check_stable_duration_in_milliseconds_isSet) {
        obj.insert(QString("HealthCheckStableDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_health_check_stable_duration_in_milliseconds));
    }
    if (m_health_check_wait_duration_in_milliseconds_isSet) {
        obj.insert(QString("HealthCheckWaitDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_health_check_wait_duration_in_milliseconds));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_upgrade_domain_timeout_in_milliseconds_isSet) {
        obj.insert(QString("UpgradeDomainTimeoutInMilliseconds"), ::OpenAPI::toJsonValue(m_upgrade_domain_timeout_in_milliseconds));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    if (m_upgrade_timeout_in_milliseconds_isSet) {
        obj.insert(QString("UpgradeTimeoutInMilliseconds"), ::OpenAPI::toJsonValue(m_upgrade_timeout_in_milliseconds));
    }
    return obj;
}

QString OAIClusterHealthPolicy::getFailureAction() const {
    return m_failure_action;
}
void OAIClusterHealthPolicy::setFailureAction(const QString &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIClusterHealthPolicy::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIClusterHealthPolicy::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

bool OAIClusterHealthPolicy::isForceRestart() const {
    return m_force_restart;
}
void OAIClusterHealthPolicy::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIClusterHealthPolicy::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIClusterHealthPolicy::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

QString OAIClusterHealthPolicy::getHealthCheckRetryTimeoutInMilliseconds() const {
    return m_health_check_retry_timeout_in_milliseconds;
}
void OAIClusterHealthPolicy::setHealthCheckRetryTimeoutInMilliseconds(const QString &health_check_retry_timeout_in_milliseconds) {
    m_health_check_retry_timeout_in_milliseconds = health_check_retry_timeout_in_milliseconds;
    m_health_check_retry_timeout_in_milliseconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_health_check_retry_timeout_in_milliseconds_Set() const{
    return m_health_check_retry_timeout_in_milliseconds_isSet;
}

bool OAIClusterHealthPolicy::is_health_check_retry_timeout_in_milliseconds_Valid() const{
    return m_health_check_retry_timeout_in_milliseconds_isValid;
}

QString OAIClusterHealthPolicy::getHealthCheckStableDurationInMilliseconds() const {
    return m_health_check_stable_duration_in_milliseconds;
}
void OAIClusterHealthPolicy::setHealthCheckStableDurationInMilliseconds(const QString &health_check_stable_duration_in_milliseconds) {
    m_health_check_stable_duration_in_milliseconds = health_check_stable_duration_in_milliseconds;
    m_health_check_stable_duration_in_milliseconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_health_check_stable_duration_in_milliseconds_Set() const{
    return m_health_check_stable_duration_in_milliseconds_isSet;
}

bool OAIClusterHealthPolicy::is_health_check_stable_duration_in_milliseconds_Valid() const{
    return m_health_check_stable_duration_in_milliseconds_isValid;
}

QString OAIClusterHealthPolicy::getHealthCheckWaitDurationInMilliseconds() const {
    return m_health_check_wait_duration_in_milliseconds;
}
void OAIClusterHealthPolicy::setHealthCheckWaitDurationInMilliseconds(const QString &health_check_wait_duration_in_milliseconds) {
    m_health_check_wait_duration_in_milliseconds = health_check_wait_duration_in_milliseconds;
    m_health_check_wait_duration_in_milliseconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_health_check_wait_duration_in_milliseconds_Set() const{
    return m_health_check_wait_duration_in_milliseconds_isSet;
}

bool OAIClusterHealthPolicy::is_health_check_wait_duration_in_milliseconds_Valid() const{
    return m_health_check_wait_duration_in_milliseconds_isValid;
}

OAIRollingUpgradeMode OAIClusterHealthPolicy::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIClusterHealthPolicy::setRollingUpgradeMode(const OAIRollingUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIClusterHealthPolicy::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIClusterHealthPolicy::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

QString OAIClusterHealthPolicy::getUpgradeDomainTimeoutInMilliseconds() const {
    return m_upgrade_domain_timeout_in_milliseconds;
}
void OAIClusterHealthPolicy::setUpgradeDomainTimeoutInMilliseconds(const QString &upgrade_domain_timeout_in_milliseconds) {
    m_upgrade_domain_timeout_in_milliseconds = upgrade_domain_timeout_in_milliseconds;
    m_upgrade_domain_timeout_in_milliseconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_upgrade_domain_timeout_in_milliseconds_Set() const{
    return m_upgrade_domain_timeout_in_milliseconds_isSet;
}

bool OAIClusterHealthPolicy::is_upgrade_domain_timeout_in_milliseconds_Valid() const{
    return m_upgrade_domain_timeout_in_milliseconds_isValid;
}

qint32 OAIClusterHealthPolicy::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIClusterHealthPolicy::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint32 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIClusterHealthPolicy::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

QString OAIClusterHealthPolicy::getUpgradeTimeoutInMilliseconds() const {
    return m_upgrade_timeout_in_milliseconds;
}
void OAIClusterHealthPolicy::setUpgradeTimeoutInMilliseconds(const QString &upgrade_timeout_in_milliseconds) {
    m_upgrade_timeout_in_milliseconds = upgrade_timeout_in_milliseconds;
    m_upgrade_timeout_in_milliseconds_isSet = true;
}

bool OAIClusterHealthPolicy::is_upgrade_timeout_in_milliseconds_Set() const{
    return m_upgrade_timeout_in_milliseconds_isSet;
}

bool OAIClusterHealthPolicy::is_upgrade_timeout_in_milliseconds_Valid() const{
    return m_upgrade_timeout_in_milliseconds_isValid;
}

bool OAIClusterHealthPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_retry_timeout_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_stable_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_wait_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_timeout_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_timeout_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterHealthPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
