/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthEvent::OAIHealthEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthEvent::OAIHealthEvent() {
    this->initializeModel();
}

OAIHealthEvent::~OAIHealthEvent() {}

void OAIHealthEvent::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_is_expired_isSet = false;
    m_is_expired_isValid = false;

    m_last_error_transition_at_isSet = false;
    m_last_error_transition_at_isValid = false;

    m_last_modified_utc_timestamp_isSet = false;
    m_last_modified_utc_timestamp_isValid = false;

    m_last_ok_transition_at_isSet = false;
    m_last_ok_transition_at_isValid = false;

    m_last_warning_transition_at_isSet = false;
    m_last_warning_transition_at_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_remove_when_expired_isSet = false;
    m_remove_when_expired_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_utc_timestamp_isSet = false;
    m_source_utc_timestamp_isValid = false;

    m_time_to_live_in_milli_seconds_isSet = false;
    m_time_to_live_in_milli_seconds_isValid = false;
}

void OAIHealthEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthEvent::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_is_expired_isValid = ::OpenAPI::fromJsonValue(m_is_expired, json[QString("IsExpired")]);
    m_is_expired_isSet = !json[QString("IsExpired")].isNull() && m_is_expired_isValid;

    m_last_error_transition_at_isValid = ::OpenAPI::fromJsonValue(m_last_error_transition_at, json[QString("LastErrorTransitionAt")]);
    m_last_error_transition_at_isSet = !json[QString("LastErrorTransitionAt")].isNull() && m_last_error_transition_at_isValid;

    m_last_modified_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_modified_utc_timestamp, json[QString("LastModifiedUtcTimestamp")]);
    m_last_modified_utc_timestamp_isSet = !json[QString("LastModifiedUtcTimestamp")].isNull() && m_last_modified_utc_timestamp_isValid;

    m_last_ok_transition_at_isValid = ::OpenAPI::fromJsonValue(m_last_ok_transition_at, json[QString("LastOkTransitionAt")]);
    m_last_ok_transition_at_isSet = !json[QString("LastOkTransitionAt")].isNull() && m_last_ok_transition_at_isValid;

    m_last_warning_transition_at_isValid = ::OpenAPI::fromJsonValue(m_last_warning_transition_at, json[QString("LastWarningTransitionAt")]);
    m_last_warning_transition_at_isSet = !json[QString("LastWarningTransitionAt")].isNull() && m_last_warning_transition_at_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("Property")]);
    m_property_isSet = !json[QString("Property")].isNull() && m_property_isValid;

    m_remove_when_expired_isValid = ::OpenAPI::fromJsonValue(m_remove_when_expired, json[QString("RemoveWhenExpired")]);
    m_remove_when_expired_isSet = !json[QString("RemoveWhenExpired")].isNull() && m_remove_when_expired_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceId")]);
    m_source_id_isSet = !json[QString("SourceId")].isNull() && m_source_id_isValid;

    m_source_utc_timestamp_isValid = ::OpenAPI::fromJsonValue(m_source_utc_timestamp, json[QString("SourceUtcTimestamp")]);
    m_source_utc_timestamp_isSet = !json[QString("SourceUtcTimestamp")].isNull() && m_source_utc_timestamp_isValid;

    m_time_to_live_in_milli_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_to_live_in_milli_seconds, json[QString("TimeToLiveInMilliSeconds")]);
    m_time_to_live_in_milli_seconds_isSet = !json[QString("TimeToLiveInMilliSeconds")].isNull() && m_time_to_live_in_milli_seconds_isValid;
}

QString OAIHealthEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_is_expired_isSet) {
        obj.insert(QString("IsExpired"), ::OpenAPI::toJsonValue(m_is_expired));
    }
    if (m_last_error_transition_at_isSet) {
        obj.insert(QString("LastErrorTransitionAt"), ::OpenAPI::toJsonValue(m_last_error_transition_at));
    }
    if (m_last_modified_utc_timestamp_isSet) {
        obj.insert(QString("LastModifiedUtcTimestamp"), ::OpenAPI::toJsonValue(m_last_modified_utc_timestamp));
    }
    if (m_last_ok_transition_at_isSet) {
        obj.insert(QString("LastOkTransitionAt"), ::OpenAPI::toJsonValue(m_last_ok_transition_at));
    }
    if (m_last_warning_transition_at_isSet) {
        obj.insert(QString("LastWarningTransitionAt"), ::OpenAPI::toJsonValue(m_last_warning_transition_at));
    }
    if (m_property_isSet) {
        obj.insert(QString("Property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_remove_when_expired_isSet) {
        obj.insert(QString("RemoveWhenExpired"), ::OpenAPI::toJsonValue(m_remove_when_expired));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_utc_timestamp_isSet) {
        obj.insert(QString("SourceUtcTimestamp"), ::OpenAPI::toJsonValue(m_source_utc_timestamp));
    }
    if (m_time_to_live_in_milli_seconds_isSet) {
        obj.insert(QString("TimeToLiveInMilliSeconds"), ::OpenAPI::toJsonValue(m_time_to_live_in_milli_seconds));
    }
    return obj;
}

QString OAIHealthEvent::getDescription() const {
    return m_description;
}
void OAIHealthEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHealthEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHealthEvent::is_description_Valid() const{
    return m_description_isValid;
}

OAIHealthState OAIHealthEvent::getHealthState() const {
    return m_health_state;
}
void OAIHealthEvent::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIHealthEvent::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIHealthEvent::is_health_state_Valid() const{
    return m_health_state_isValid;
}

bool OAIHealthEvent::isIsExpired() const {
    return m_is_expired;
}
void OAIHealthEvent::setIsExpired(const bool &is_expired) {
    m_is_expired = is_expired;
    m_is_expired_isSet = true;
}

bool OAIHealthEvent::is_is_expired_Set() const{
    return m_is_expired_isSet;
}

bool OAIHealthEvent::is_is_expired_Valid() const{
    return m_is_expired_isValid;
}

QString OAIHealthEvent::getLastErrorTransitionAt() const {
    return m_last_error_transition_at;
}
void OAIHealthEvent::setLastErrorTransitionAt(const QString &last_error_transition_at) {
    m_last_error_transition_at = last_error_transition_at;
    m_last_error_transition_at_isSet = true;
}

bool OAIHealthEvent::is_last_error_transition_at_Set() const{
    return m_last_error_transition_at_isSet;
}

bool OAIHealthEvent::is_last_error_transition_at_Valid() const{
    return m_last_error_transition_at_isValid;
}

QString OAIHealthEvent::getLastModifiedUtcTimestamp() const {
    return m_last_modified_utc_timestamp;
}
void OAIHealthEvent::setLastModifiedUtcTimestamp(const QString &last_modified_utc_timestamp) {
    m_last_modified_utc_timestamp = last_modified_utc_timestamp;
    m_last_modified_utc_timestamp_isSet = true;
}

bool OAIHealthEvent::is_last_modified_utc_timestamp_Set() const{
    return m_last_modified_utc_timestamp_isSet;
}

bool OAIHealthEvent::is_last_modified_utc_timestamp_Valid() const{
    return m_last_modified_utc_timestamp_isValid;
}

QString OAIHealthEvent::getLastOkTransitionAt() const {
    return m_last_ok_transition_at;
}
void OAIHealthEvent::setLastOkTransitionAt(const QString &last_ok_transition_at) {
    m_last_ok_transition_at = last_ok_transition_at;
    m_last_ok_transition_at_isSet = true;
}

bool OAIHealthEvent::is_last_ok_transition_at_Set() const{
    return m_last_ok_transition_at_isSet;
}

bool OAIHealthEvent::is_last_ok_transition_at_Valid() const{
    return m_last_ok_transition_at_isValid;
}

QString OAIHealthEvent::getLastWarningTransitionAt() const {
    return m_last_warning_transition_at;
}
void OAIHealthEvent::setLastWarningTransitionAt(const QString &last_warning_transition_at) {
    m_last_warning_transition_at = last_warning_transition_at;
    m_last_warning_transition_at_isSet = true;
}

bool OAIHealthEvent::is_last_warning_transition_at_Set() const{
    return m_last_warning_transition_at_isSet;
}

bool OAIHealthEvent::is_last_warning_transition_at_Valid() const{
    return m_last_warning_transition_at_isValid;
}

QString OAIHealthEvent::getProperty() const {
    return m_property;
}
void OAIHealthEvent::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIHealthEvent::is_property_Set() const{
    return m_property_isSet;
}

bool OAIHealthEvent::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIHealthEvent::isRemoveWhenExpired() const {
    return m_remove_when_expired;
}
void OAIHealthEvent::setRemoveWhenExpired(const bool &remove_when_expired) {
    m_remove_when_expired = remove_when_expired;
    m_remove_when_expired_isSet = true;
}

bool OAIHealthEvent::is_remove_when_expired_Set() const{
    return m_remove_when_expired_isSet;
}

bool OAIHealthEvent::is_remove_when_expired_Valid() const{
    return m_remove_when_expired_isValid;
}

QString OAIHealthEvent::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIHealthEvent::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIHealthEvent::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIHealthEvent::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

QString OAIHealthEvent::getSourceId() const {
    return m_source_id;
}
void OAIHealthEvent::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIHealthEvent::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIHealthEvent::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIHealthEvent::getSourceUtcTimestamp() const {
    return m_source_utc_timestamp;
}
void OAIHealthEvent::setSourceUtcTimestamp(const QString &source_utc_timestamp) {
    m_source_utc_timestamp = source_utc_timestamp;
    m_source_utc_timestamp_isSet = true;
}

bool OAIHealthEvent::is_source_utc_timestamp_Set() const{
    return m_source_utc_timestamp_isSet;
}

bool OAIHealthEvent::is_source_utc_timestamp_Valid() const{
    return m_source_utc_timestamp_isValid;
}

QString OAIHealthEvent::getTimeToLiveInMilliSeconds() const {
    return m_time_to_live_in_milli_seconds;
}
void OAIHealthEvent::setTimeToLiveInMilliSeconds(const QString &time_to_live_in_milli_seconds) {
    m_time_to_live_in_milli_seconds = time_to_live_in_milli_seconds;
    m_time_to_live_in_milli_seconds_isSet = true;
}

bool OAIHealthEvent::is_time_to_live_in_milli_seconds_Set() const{
    return m_time_to_live_in_milli_seconds_isSet;
}

bool OAIHealthEvent::is_time_to_live_in_milli_seconds_Valid() const{
    return m_time_to_live_in_milli_seconds_isValid;
}

bool OAIHealthEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_transition_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ok_transition_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_warning_transition_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_when_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_utc_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_in_milli_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
