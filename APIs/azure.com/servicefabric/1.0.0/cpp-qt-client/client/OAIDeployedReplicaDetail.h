/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeployedReplicaDetail.h
 *
 * The detail of the deployed replica
 */

#ifndef OAIDeployedReplicaDetail_H
#define OAIDeployedReplicaDetail_H

#include <QJsonObject>

#include "OAIDeployedReplicaDetail_ReplicatorStatus.h"
#include "OAIServiceKind.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeployedReplicaDetail_ReplicatorStatus;

class OAIDeployedReplicaDetail : public OAIObject {
public:
    OAIDeployedReplicaDetail();
    OAIDeployedReplicaDetail(QString json);
    ~OAIDeployedReplicaDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentReplicatorOperation() const;
    void setCurrentReplicatorOperation(const qint32 &current_replicator_operation);
    bool is_current_replicator_operation_Set() const;
    bool is_current_replicator_operation_Valid() const;

    qint32 getCurrentServiceOperation() const;
    void setCurrentServiceOperation(const qint32 &current_service_operation);
    bool is_current_service_operation_Set() const;
    bool is_current_service_operation_Valid() const;

    QString getCurrentServiceOperationStartTimeUtc() const;
    void setCurrentServiceOperationStartTimeUtc(const QString &current_service_operation_start_time_utc);
    bool is_current_service_operation_start_time_utc_Set() const;
    bool is_current_service_operation_start_time_utc_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getPartitionId() const;
    void setPartitionId(const QString &partition_id);
    bool is_partition_id_Set() const;
    bool is_partition_id_Valid() const;

    qint32 getReadStatus() const;
    void setReadStatus(const qint32 &read_status);
    bool is_read_status_Set() const;
    bool is_read_status_Valid() const;

    QString getReplicaId() const;
    void setReplicaId(const QString &replica_id);
    bool is_replica_id_Set() const;
    bool is_replica_id_Valid() const;

    OAIDeployedReplicaDetail_ReplicatorStatus getReplicatorStatus() const;
    void setReplicatorStatus(const OAIDeployedReplicaDetail_ReplicatorStatus &replicator_status);
    bool is_replicator_status_Set() const;
    bool is_replicator_status_Valid() const;

    OAIServiceKind getServiceKind() const;
    void setServiceKind(const OAIServiceKind &service_kind);
    bool is_service_kind_Set() const;
    bool is_service_kind_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    qint32 getWriteStatus() const;
    void setWriteStatus(const qint32 &write_status);
    bool is_write_status_Set() const;
    bool is_write_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_replicator_operation;
    bool m_current_replicator_operation_isSet;
    bool m_current_replicator_operation_isValid;

    qint32 m_current_service_operation;
    bool m_current_service_operation_isSet;
    bool m_current_service_operation_isValid;

    QString m_current_service_operation_start_time_utc;
    bool m_current_service_operation_start_time_utc_isSet;
    bool m_current_service_operation_start_time_utc_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_partition_id;
    bool m_partition_id_isSet;
    bool m_partition_id_isValid;

    qint32 m_read_status;
    bool m_read_status_isSet;
    bool m_read_status_isValid;

    QString m_replica_id;
    bool m_replica_id_isSet;
    bool m_replica_id_isValid;

    OAIDeployedReplicaDetail_ReplicatorStatus m_replicator_status;
    bool m_replicator_status_isSet;
    bool m_replicator_status_isValid;

    OAIServiceKind m_service_kind;
    bool m_service_kind_isSet;
    bool m_service_kind_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    qint32 m_write_status;
    bool m_write_status_isSet;
    bool m_write_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeployedReplicaDetail)

#endif // OAIDeployedReplicaDetail_H
