/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedCodePackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedCodePackage::OAIDeployedCodePackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedCodePackage::OAIDeployedCodePackage() {
    this->initializeModel();
}

OAIDeployedCodePackage::~OAIDeployedCodePackage() {}

void OAIDeployedCodePackage::initializeModel() {

    m_has_setup_entry_point_isSet = false;
    m_has_setup_entry_point_isValid = false;

    m_main_entry_point_isSet = false;
    m_main_entry_point_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_run_frequency_interval_isSet = false;
    m_run_frequency_interval_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_setup_entry_point_isSet = false;
    m_setup_entry_point_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDeployedCodePackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedCodePackage::fromJsonObject(QJsonObject json) {

    m_has_setup_entry_point_isValid = ::OpenAPI::fromJsonValue(m_has_setup_entry_point, json[QString("HasSetupEntryPoint")]);
    m_has_setup_entry_point_isSet = !json[QString("HasSetupEntryPoint")].isNull() && m_has_setup_entry_point_isValid;

    m_main_entry_point_isValid = ::OpenAPI::fromJsonValue(m_main_entry_point, json[QString("MainEntryPoint")]);
    m_main_entry_point_isSet = !json[QString("MainEntryPoint")].isNull() && m_main_entry_point_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_run_frequency_interval_isValid = ::OpenAPI::fromJsonValue(m_run_frequency_interval, json[QString("RunFrequencyInterval")]);
    m_run_frequency_interval_isSet = !json[QString("RunFrequencyInterval")].isNull() && m_run_frequency_interval_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_setup_entry_point_isValid = ::OpenAPI::fromJsonValue(m_setup_entry_point, json[QString("SetupEntryPoint")]);
    m_setup_entry_point_isSet = !json[QString("SetupEntryPoint")].isNull() && m_setup_entry_point_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIDeployedCodePackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedCodePackage::asJsonObject() const {
    QJsonObject obj;
    if (m_has_setup_entry_point_isSet) {
        obj.insert(QString("HasSetupEntryPoint"), ::OpenAPI::toJsonValue(m_has_setup_entry_point));
    }
    if (m_main_entry_point.isSet()) {
        obj.insert(QString("MainEntryPoint"), ::OpenAPI::toJsonValue(m_main_entry_point));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_run_frequency_interval_isSet) {
        obj.insert(QString("RunFrequencyInterval"), ::OpenAPI::toJsonValue(m_run_frequency_interval));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_setup_entry_point.isSet()) {
        obj.insert(QString("SetupEntryPoint"), ::OpenAPI::toJsonValue(m_setup_entry_point));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIDeployedCodePackage::isHasSetupEntryPoint() const {
    return m_has_setup_entry_point;
}
void OAIDeployedCodePackage::setHasSetupEntryPoint(const bool &has_setup_entry_point) {
    m_has_setup_entry_point = has_setup_entry_point;
    m_has_setup_entry_point_isSet = true;
}

bool OAIDeployedCodePackage::is_has_setup_entry_point_Set() const{
    return m_has_setup_entry_point_isSet;
}

bool OAIDeployedCodePackage::is_has_setup_entry_point_Valid() const{
    return m_has_setup_entry_point_isValid;
}

OAIEntryPoint OAIDeployedCodePackage::getMainEntryPoint() const {
    return m_main_entry_point;
}
void OAIDeployedCodePackage::setMainEntryPoint(const OAIEntryPoint &main_entry_point) {
    m_main_entry_point = main_entry_point;
    m_main_entry_point_isSet = true;
}

bool OAIDeployedCodePackage::is_main_entry_point_Set() const{
    return m_main_entry_point_isSet;
}

bool OAIDeployedCodePackage::is_main_entry_point_Valid() const{
    return m_main_entry_point_isValid;
}

QString OAIDeployedCodePackage::getName() const {
    return m_name;
}
void OAIDeployedCodePackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeployedCodePackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeployedCodePackage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeployedCodePackage::getRunFrequencyInterval() const {
    return m_run_frequency_interval;
}
void OAIDeployedCodePackage::setRunFrequencyInterval(const QString &run_frequency_interval) {
    m_run_frequency_interval = run_frequency_interval;
    m_run_frequency_interval_isSet = true;
}

bool OAIDeployedCodePackage::is_run_frequency_interval_Set() const{
    return m_run_frequency_interval_isSet;
}

bool OAIDeployedCodePackage::is_run_frequency_interval_Valid() const{
    return m_run_frequency_interval_isValid;
}

QString OAIDeployedCodePackage::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIDeployedCodePackage::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIDeployedCodePackage::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIDeployedCodePackage::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

OAIEntryPoint OAIDeployedCodePackage::getSetupEntryPoint() const {
    return m_setup_entry_point;
}
void OAIDeployedCodePackage::setSetupEntryPoint(const OAIEntryPoint &setup_entry_point) {
    m_setup_entry_point = setup_entry_point;
    m_setup_entry_point_isSet = true;
}

bool OAIDeployedCodePackage::is_setup_entry_point_Set() const{
    return m_setup_entry_point_isSet;
}

bool OAIDeployedCodePackage::is_setup_entry_point_Valid() const{
    return m_setup_entry_point_isValid;
}

QString OAIDeployedCodePackage::getStatus() const {
    return m_status;
}
void OAIDeployedCodePackage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeployedCodePackage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeployedCodePackage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeployedCodePackage::getVersion() const {
    return m_version;
}
void OAIDeployedCodePackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDeployedCodePackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDeployedCodePackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDeployedCodePackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_setup_entry_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_entry_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_frequency_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_entry_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedCodePackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
