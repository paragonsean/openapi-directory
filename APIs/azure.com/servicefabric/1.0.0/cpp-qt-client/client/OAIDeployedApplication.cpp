/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedApplication::OAIDeployedApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedApplication::OAIDeployedApplication() {
    this->initializeModel();
}

OAIDeployedApplication::~OAIDeployedApplication() {}

void OAIDeployedApplication::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_log_directory_isSet = false;
    m_log_directory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_temp_directory_isSet = false;
    m_temp_directory_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_work_directory_isSet = false;
    m_work_directory_isValid = false;
}

void OAIDeployedApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedApplication::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_log_directory_isValid = ::OpenAPI::fromJsonValue(m_log_directory, json[QString("LogDirectory")]);
    m_log_directory_isSet = !json[QString("LogDirectory")].isNull() && m_log_directory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_temp_directory_isValid = ::OpenAPI::fromJsonValue(m_temp_directory, json[QString("TempDirectory")]);
    m_temp_directory_isSet = !json[QString("TempDirectory")].isNull() && m_temp_directory_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_work_directory_isValid = ::OpenAPI::fromJsonValue(m_work_directory, json[QString("WorkDirectory")]);
    m_work_directory_isSet = !json[QString("WorkDirectory")].isNull() && m_work_directory_isValid;
}

QString OAIDeployedApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_log_directory_isSet) {
        obj.insert(QString("LogDirectory"), ::OpenAPI::toJsonValue(m_log_directory));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_temp_directory_isSet) {
        obj.insert(QString("TempDirectory"), ::OpenAPI::toJsonValue(m_temp_directory));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_work_directory_isSet) {
        obj.insert(QString("WorkDirectory"), ::OpenAPI::toJsonValue(m_work_directory));
    }
    return obj;
}

QString OAIDeployedApplication::getId() const {
    return m_id;
}
void OAIDeployedApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployedApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployedApplication::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployedApplication::getLogDirectory() const {
    return m_log_directory;
}
void OAIDeployedApplication::setLogDirectory(const QString &log_directory) {
    m_log_directory = log_directory;
    m_log_directory_isSet = true;
}

bool OAIDeployedApplication::is_log_directory_Set() const{
    return m_log_directory_isSet;
}

bool OAIDeployedApplication::is_log_directory_Valid() const{
    return m_log_directory_isValid;
}

QString OAIDeployedApplication::getName() const {
    return m_name;
}
void OAIDeployedApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeployedApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeployedApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeployedApplication::getStatus() const {
    return m_status;
}
void OAIDeployedApplication::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeployedApplication::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeployedApplication::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeployedApplication::getTempDirectory() const {
    return m_temp_directory;
}
void OAIDeployedApplication::setTempDirectory(const QString &temp_directory) {
    m_temp_directory = temp_directory;
    m_temp_directory_isSet = true;
}

bool OAIDeployedApplication::is_temp_directory_Set() const{
    return m_temp_directory_isSet;
}

bool OAIDeployedApplication::is_temp_directory_Valid() const{
    return m_temp_directory_isValid;
}

QString OAIDeployedApplication::getTypeName() const {
    return m_type_name;
}
void OAIDeployedApplication::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIDeployedApplication::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIDeployedApplication::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIDeployedApplication::getWorkDirectory() const {
    return m_work_directory;
}
void OAIDeployedApplication::setWorkDirectory(const QString &work_directory) {
    m_work_directory = work_directory;
    m_work_directory_isSet = true;
}

bool OAIDeployedApplication::is_work_directory_Set() const{
    return m_work_directory_isSet;
}

bool OAIDeployedApplication::is_work_directory_Valid() const{
    return m_work_directory_isValid;
}

bool OAIDeployedApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
