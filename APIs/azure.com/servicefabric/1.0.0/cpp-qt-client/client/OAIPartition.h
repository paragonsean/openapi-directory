/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartition.h
 *
 * The partition
 */

#ifndef OAIPartition_H
#define OAIPartition_H

#include <QJsonObject>

#include "OAIHealthState.h"
#include "OAIPartitionInformation.h"
#include "OAIPartition_CurrentConfigurationEpoch.h"
#include "OAIServiceKind.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPartition_CurrentConfigurationEpoch;
class OAIPartitionInformation;

class OAIPartition : public OAIObject {
public:
    OAIPartition();
    OAIPartition(QString json);
    ~OAIPartition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPartition_CurrentConfigurationEpoch getCurrentConfigurationEpoch() const;
    void setCurrentConfigurationEpoch(const OAIPartition_CurrentConfigurationEpoch &current_configuration_epoch);
    bool is_current_configuration_epoch_Set() const;
    bool is_current_configuration_epoch_Valid() const;

    OAIHealthState getHealthState() const;
    void setHealthState(const OAIHealthState &health_state);
    bool is_health_state_Set() const;
    bool is_health_state_Valid() const;

    qint32 getInstanceCount() const;
    void setInstanceCount(const qint32 &instance_count);
    bool is_instance_count_Set() const;
    bool is_instance_count_Valid() const;

    qint32 getMinReplicaSetSize() const;
    void setMinReplicaSetSize(const qint32 &min_replica_set_size);
    bool is_min_replica_set_size_Set() const;
    bool is_min_replica_set_size_Valid() const;

    OAIPartitionInformation getPartitionInformation() const;
    void setPartitionInformation(const OAIPartitionInformation &partition_information);
    bool is_partition_information_Set() const;
    bool is_partition_information_Valid() const;

    QString getPartitionStatus() const;
    void setPartitionStatus(const QString &partition_status);
    bool is_partition_status_Set() const;
    bool is_partition_status_Valid() const;

    OAIServiceKind getServiceKind() const;
    void setServiceKind(const OAIServiceKind &service_kind);
    bool is_service_kind_Set() const;
    bool is_service_kind_Valid() const;

    qint32 getTargetReplicaSetSize() const;
    void setTargetReplicaSetSize(const qint32 &target_replica_set_size);
    bool is_target_replica_set_size_Set() const;
    bool is_target_replica_set_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPartition_CurrentConfigurationEpoch m_current_configuration_epoch;
    bool m_current_configuration_epoch_isSet;
    bool m_current_configuration_epoch_isValid;

    OAIHealthState m_health_state;
    bool m_health_state_isSet;
    bool m_health_state_isValid;

    qint32 m_instance_count;
    bool m_instance_count_isSet;
    bool m_instance_count_isValid;

    qint32 m_min_replica_set_size;
    bool m_min_replica_set_size_isSet;
    bool m_min_replica_set_size_isValid;

    OAIPartitionInformation m_partition_information;
    bool m_partition_information_isSet;
    bool m_partition_information_isValid;

    QString m_partition_status;
    bool m_partition_status_isSet;
    bool m_partition_status_isValid;

    OAIServiceKind m_service_kind;
    bool m_service_kind_isSet;
    bool m_service_kind_isValid;

    qint32 m_target_replica_set_size;
    bool m_target_replica_set_size_isSet;
    bool m_target_replica_set_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartition)

#endif // OAIPartition_H
