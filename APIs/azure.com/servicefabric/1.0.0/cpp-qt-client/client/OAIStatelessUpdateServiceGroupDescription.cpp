/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatelessUpdateServiceGroupDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatelessUpdateServiceGroupDescription::OAIStatelessUpdateServiceGroupDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatelessUpdateServiceGroupDescription::OAIStatelessUpdateServiceGroupDescription() {
    this->initializeModel();
}

OAIStatelessUpdateServiceGroupDescription::~OAIStatelessUpdateServiceGroupDescription() {}

void OAIStatelessUpdateServiceGroupDescription::initializeModel() {

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;
}

void OAIStatelessUpdateServiceGroupDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatelessUpdateServiceGroupDescription::fromJsonObject(QJsonObject json) {

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;
}

QString OAIStatelessUpdateServiceGroupDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatelessUpdateServiceGroupDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    return obj;
}

qint32 OAIStatelessUpdateServiceGroupDescription::getInstanceCount() const {
    return m_instance_count;
}
void OAIStatelessUpdateServiceGroupDescription::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIStatelessUpdateServiceGroupDescription::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIStatelessUpdateServiceGroupDescription::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

qint32 OAIStatelessUpdateServiceGroupDescription::getFlags() const {
    return m_flags;
}
void OAIStatelessUpdateServiceGroupDescription::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIStatelessUpdateServiceGroupDescription::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIStatelessUpdateServiceGroupDescription::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIServiceKind OAIStatelessUpdateServiceGroupDescription::getServiceKind() const {
    return m_service_kind;
}
void OAIStatelessUpdateServiceGroupDescription::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatelessUpdateServiceGroupDescription::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatelessUpdateServiceGroupDescription::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

bool OAIStatelessUpdateServiceGroupDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatelessUpdateServiceGroupDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
