/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionHealth_ReplicaHealthStates_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionHealth_ReplicaHealthStates_inner::OAIPartitionHealth_ReplicaHealthStates_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionHealth_ReplicaHealthStates_inner::OAIPartitionHealth_ReplicaHealthStates_inner() {
    this->initializeModel();
}

OAIPartitionHealth_ReplicaHealthStates_inner::~OAIPartitionHealth_ReplicaHealthStates_inner() {}

void OAIPartitionHealth_ReplicaHealthStates_inner::initializeModel() {

    m_aggregated_health_state_isSet = false;
    m_aggregated_health_state_isValid = false;

    m_health_events_isSet = false;
    m_health_events_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;
}

void OAIPartitionHealth_ReplicaHealthStates_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionHealth_ReplicaHealthStates_inner::fromJsonObject(QJsonObject json) {

    m_aggregated_health_state_isValid = ::OpenAPI::fromJsonValue(m_aggregated_health_state, json[QString("AggregatedHealthState")]);
    m_aggregated_health_state_isSet = !json[QString("AggregatedHealthState")].isNull() && m_aggregated_health_state_isValid;

    m_health_events_isValid = ::OpenAPI::fromJsonValue(m_health_events, json[QString("HealthEvents")]);
    m_health_events_isSet = !json[QString("HealthEvents")].isNull() && m_health_events_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;
}

QString OAIPartitionHealth_ReplicaHealthStates_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionHealth_ReplicaHealthStates_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_health_state.isSet()) {
        obj.insert(QString("AggregatedHealthState"), ::OpenAPI::toJsonValue(m_aggregated_health_state));
    }
    if (m_health_events_isSet) {
        obj.insert(QString("HealthEvents"), ::OpenAPI::toJsonValue(m_health_events));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    return obj;
}

OAIHealthState OAIPartitionHealth_ReplicaHealthStates_inner::getAggregatedHealthState() const {
    return m_aggregated_health_state;
}
void OAIPartitionHealth_ReplicaHealthStates_inner::setAggregatedHealthState(const OAIHealthState &aggregated_health_state) {
    m_aggregated_health_state = aggregated_health_state;
    m_aggregated_health_state_isSet = true;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_aggregated_health_state_Set() const{
    return m_aggregated_health_state_isSet;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_aggregated_health_state_Valid() const{
    return m_aggregated_health_state_isValid;
}

qint32 OAIPartitionHealth_ReplicaHealthStates_inner::getHealthEvents() const {
    return m_health_events;
}
void OAIPartitionHealth_ReplicaHealthStates_inner::setHealthEvents(const qint32 &health_events) {
    m_health_events = health_events;
    m_health_events_isSet = true;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_health_events_Set() const{
    return m_health_events_isSet;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_health_events_Valid() const{
    return m_health_events_isValid;
}

QString OAIPartitionHealth_ReplicaHealthStates_inner::getPartitionId() const {
    return m_partition_id;
}
void OAIPartitionHealth_ReplicaHealthStates_inner::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIPartitionHealth_ReplicaHealthStates_inner::getReplicaId() const {
    return m_replica_id;
}
void OAIPartitionHealth_ReplicaHealthStates_inner::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionHealth_ReplicaHealthStates_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
