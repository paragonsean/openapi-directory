/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartition_CurrentConfigurationEpoch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartition_CurrentConfigurationEpoch::OAIPartition_CurrentConfigurationEpoch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartition_CurrentConfigurationEpoch::OAIPartition_CurrentConfigurationEpoch() {
    this->initializeModel();
}

OAIPartition_CurrentConfigurationEpoch::~OAIPartition_CurrentConfigurationEpoch() {}

void OAIPartition_CurrentConfigurationEpoch::initializeModel() {

    m_configuration_version_isSet = false;
    m_configuration_version_isValid = false;

    m_data_loss_version_isSet = false;
    m_data_loss_version_isValid = false;
}

void OAIPartition_CurrentConfigurationEpoch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartition_CurrentConfigurationEpoch::fromJsonObject(QJsonObject json) {

    m_configuration_version_isValid = ::OpenAPI::fromJsonValue(m_configuration_version, json[QString("ConfigurationVersion")]);
    m_configuration_version_isSet = !json[QString("ConfigurationVersion")].isNull() && m_configuration_version_isValid;

    m_data_loss_version_isValid = ::OpenAPI::fromJsonValue(m_data_loss_version, json[QString("DataLossVersion")]);
    m_data_loss_version_isSet = !json[QString("DataLossVersion")].isNull() && m_data_loss_version_isValid;
}

QString OAIPartition_CurrentConfigurationEpoch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartition_CurrentConfigurationEpoch::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_version_isSet) {
        obj.insert(QString("ConfigurationVersion"), ::OpenAPI::toJsonValue(m_configuration_version));
    }
    if (m_data_loss_version_isSet) {
        obj.insert(QString("DataLossVersion"), ::OpenAPI::toJsonValue(m_data_loss_version));
    }
    return obj;
}

QString OAIPartition_CurrentConfigurationEpoch::getConfigurationVersion() const {
    return m_configuration_version;
}
void OAIPartition_CurrentConfigurationEpoch::setConfigurationVersion(const QString &configuration_version) {
    m_configuration_version = configuration_version;
    m_configuration_version_isSet = true;
}

bool OAIPartition_CurrentConfigurationEpoch::is_configuration_version_Set() const{
    return m_configuration_version_isSet;
}

bool OAIPartition_CurrentConfigurationEpoch::is_configuration_version_Valid() const{
    return m_configuration_version_isValid;
}

QString OAIPartition_CurrentConfigurationEpoch::getDataLossVersion() const {
    return m_data_loss_version;
}
void OAIPartition_CurrentConfigurationEpoch::setDataLossVersion(const QString &data_loss_version) {
    m_data_loss_version = data_loss_version;
    m_data_loss_version_isSet = true;
}

bool OAIPartition_CurrentConfigurationEpoch::is_data_loss_version_Set() const{
    return m_data_loss_version_isSet;
}

bool OAIPartition_CurrentConfigurationEpoch::is_data_loss_version_Valid() const{
    return m_data_loss_version_isValid;
}

bool OAIPartition_CurrentConfigurationEpoch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_loss_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartition_CurrentConfigurationEpoch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
