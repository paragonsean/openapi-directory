/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaHealth::OAIReplicaHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaHealth::OAIReplicaHealth() {
    this->initializeModel();
}

OAIReplicaHealth::~OAIReplicaHealth() {}

void OAIReplicaHealth::initializeModel() {

    m_aggregated_health_state_isSet = false;
    m_aggregated_health_state_isValid = false;

    m_health_events_isSet = false;
    m_health_events_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;
}

void OAIReplicaHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaHealth::fromJsonObject(QJsonObject json) {

    m_aggregated_health_state_isValid = ::OpenAPI::fromJsonValue(m_aggregated_health_state, json[QString("AggregatedHealthState")]);
    m_aggregated_health_state_isSet = !json[QString("AggregatedHealthState")].isNull() && m_aggregated_health_state_isValid;

    m_health_events_isValid = ::OpenAPI::fromJsonValue(m_health_events, json[QString("HealthEvents")]);
    m_health_events_isSet = !json[QString("HealthEvents")].isNull() && m_health_events_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;
}

QString OAIReplicaHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_health_state.isSet()) {
        obj.insert(QString("AggregatedHealthState"), ::OpenAPI::toJsonValue(m_aggregated_health_state));
    }
    if (m_health_events.size() > 0) {
        obj.insert(QString("HealthEvents"), ::OpenAPI::toJsonValue(m_health_events));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    return obj;
}

OAIHealthState OAIReplicaHealth::getAggregatedHealthState() const {
    return m_aggregated_health_state;
}
void OAIReplicaHealth::setAggregatedHealthState(const OAIHealthState &aggregated_health_state) {
    m_aggregated_health_state = aggregated_health_state;
    m_aggregated_health_state_isSet = true;
}

bool OAIReplicaHealth::is_aggregated_health_state_Set() const{
    return m_aggregated_health_state_isSet;
}

bool OAIReplicaHealth::is_aggregated_health_state_Valid() const{
    return m_aggregated_health_state_isValid;
}

QList<OAIHealthEvent> OAIReplicaHealth::getHealthEvents() const {
    return m_health_events;
}
void OAIReplicaHealth::setHealthEvents(const QList<OAIHealthEvent> &health_events) {
    m_health_events = health_events;
    m_health_events_isSet = true;
}

bool OAIReplicaHealth::is_health_events_Set() const{
    return m_health_events_isSet;
}

bool OAIReplicaHealth::is_health_events_Valid() const{
    return m_health_events_isValid;
}

QString OAIReplicaHealth::getPartitionId() const {
    return m_partition_id;
}
void OAIReplicaHealth::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIReplicaHealth::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIReplicaHealth::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIReplicaHealth::getReplicaId() const {
    return m_replica_id;
}
void OAIReplicaHealth::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIReplicaHealth::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIReplicaHealth::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

OAIServiceKind OAIReplicaHealth::getServiceKind() const {
    return m_service_kind;
}
void OAIReplicaHealth::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIReplicaHealth::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIReplicaHealth::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

bool OAIReplicaHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
