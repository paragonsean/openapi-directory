/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatefulUpdateServiceGroupDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatefulUpdateServiceGroupDescription::OAIStatefulUpdateServiceGroupDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatefulUpdateServiceGroupDescription::OAIStatefulUpdateServiceGroupDescription() {
    this->initializeModel();
}

OAIStatefulUpdateServiceGroupDescription::~OAIStatefulUpdateServiceGroupDescription() {}

void OAIStatefulUpdateServiceGroupDescription::initializeModel() {

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_quorum_loss_wait_duration_in_milliseconds_isSet = false;
    m_quorum_loss_wait_duration_in_milliseconds_isValid = false;

    m_replica_restart_wait_duration_in_milliseconds_isSet = false;
    m_replica_restart_wait_duration_in_milliseconds_isValid = false;

    m_stand_by_replica_keep_duration_in_milliseconds_isSet = false;
    m_stand_by_replica_keep_duration_in_milliseconds_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;
}

void OAIStatefulUpdateServiceGroupDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatefulUpdateServiceGroupDescription::fromJsonObject(QJsonObject json) {

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("MinReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("MinReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_quorum_loss_wait_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_quorum_loss_wait_duration_in_milliseconds, json[QString("QuorumLossWaitDurationInMilliseconds")]);
    m_quorum_loss_wait_duration_in_milliseconds_isSet = !json[QString("QuorumLossWaitDurationInMilliseconds")].isNull() && m_quorum_loss_wait_duration_in_milliseconds_isValid;

    m_replica_restart_wait_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_replica_restart_wait_duration_in_milliseconds, json[QString("ReplicaRestartWaitDurationInMilliseconds")]);
    m_replica_restart_wait_duration_in_milliseconds_isSet = !json[QString("ReplicaRestartWaitDurationInMilliseconds")].isNull() && m_replica_restart_wait_duration_in_milliseconds_isValid;

    m_stand_by_replica_keep_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_stand_by_replica_keep_duration_in_milliseconds, json[QString("StandByReplicaKeepDurationInMilliseconds")]);
    m_stand_by_replica_keep_duration_in_milliseconds_isSet = !json[QString("StandByReplicaKeepDurationInMilliseconds")].isNull() && m_stand_by_replica_keep_duration_in_milliseconds_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("TargetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("TargetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;
}

QString OAIStatefulUpdateServiceGroupDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatefulUpdateServiceGroupDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("MinReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_quorum_loss_wait_duration_in_milliseconds_isSet) {
        obj.insert(QString("QuorumLossWaitDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_quorum_loss_wait_duration_in_milliseconds));
    }
    if (m_replica_restart_wait_duration_in_milliseconds_isSet) {
        obj.insert(QString("ReplicaRestartWaitDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_replica_restart_wait_duration_in_milliseconds));
    }
    if (m_stand_by_replica_keep_duration_in_milliseconds_isSet) {
        obj.insert(QString("StandByReplicaKeepDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_stand_by_replica_keep_duration_in_milliseconds));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("TargetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    return obj;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIStatefulUpdateServiceGroupDescription::setMinReplicaSetSize(const qint32 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getQuorumLossWaitDurationInMilliseconds() const {
    return m_quorum_loss_wait_duration_in_milliseconds;
}
void OAIStatefulUpdateServiceGroupDescription::setQuorumLossWaitDurationInMilliseconds(const qint32 &quorum_loss_wait_duration_in_milliseconds) {
    m_quorum_loss_wait_duration_in_milliseconds = quorum_loss_wait_duration_in_milliseconds;
    m_quorum_loss_wait_duration_in_milliseconds_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_quorum_loss_wait_duration_in_milliseconds_Set() const{
    return m_quorum_loss_wait_duration_in_milliseconds_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_quorum_loss_wait_duration_in_milliseconds_Valid() const{
    return m_quorum_loss_wait_duration_in_milliseconds_isValid;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getReplicaRestartWaitDurationInMilliseconds() const {
    return m_replica_restart_wait_duration_in_milliseconds;
}
void OAIStatefulUpdateServiceGroupDescription::setReplicaRestartWaitDurationInMilliseconds(const qint32 &replica_restart_wait_duration_in_milliseconds) {
    m_replica_restart_wait_duration_in_milliseconds = replica_restart_wait_duration_in_milliseconds;
    m_replica_restart_wait_duration_in_milliseconds_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_replica_restart_wait_duration_in_milliseconds_Set() const{
    return m_replica_restart_wait_duration_in_milliseconds_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_replica_restart_wait_duration_in_milliseconds_Valid() const{
    return m_replica_restart_wait_duration_in_milliseconds_isValid;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getStandByReplicaKeepDurationInMilliseconds() const {
    return m_stand_by_replica_keep_duration_in_milliseconds;
}
void OAIStatefulUpdateServiceGroupDescription::setStandByReplicaKeepDurationInMilliseconds(const qint32 &stand_by_replica_keep_duration_in_milliseconds) {
    m_stand_by_replica_keep_duration_in_milliseconds = stand_by_replica_keep_duration_in_milliseconds;
    m_stand_by_replica_keep_duration_in_milliseconds_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_stand_by_replica_keep_duration_in_milliseconds_Set() const{
    return m_stand_by_replica_keep_duration_in_milliseconds_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_stand_by_replica_keep_duration_in_milliseconds_Valid() const{
    return m_stand_by_replica_keep_duration_in_milliseconds_isValid;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIStatefulUpdateServiceGroupDescription::setTargetReplicaSetSize(const qint32 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

qint32 OAIStatefulUpdateServiceGroupDescription::getFlags() const {
    return m_flags;
}
void OAIStatefulUpdateServiceGroupDescription::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIServiceKind OAIStatefulUpdateServiceGroupDescription::getServiceKind() const {
    return m_service_kind;
}
void OAIStatefulUpdateServiceGroupDescription::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatefulUpdateServiceGroupDescription::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatefulUpdateServiceGroupDescription::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

bool OAIStatefulUpdateServiceGroupDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quorum_loss_wait_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_restart_wait_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stand_by_replica_keep_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatefulUpdateServiceGroupDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
