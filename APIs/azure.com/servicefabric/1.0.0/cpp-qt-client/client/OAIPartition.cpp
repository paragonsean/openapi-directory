/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartition::OAIPartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartition::OAIPartition() {
    this->initializeModel();
}

OAIPartition::~OAIPartition() {}

void OAIPartition::initializeModel() {

    m_current_configuration_epoch_isSet = false;
    m_current_configuration_epoch_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_partition_information_isSet = false;
    m_partition_information_isValid = false;

    m_partition_status_isSet = false;
    m_partition_status_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;
}

void OAIPartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartition::fromJsonObject(QJsonObject json) {

    m_current_configuration_epoch_isValid = ::OpenAPI::fromJsonValue(m_current_configuration_epoch, json[QString("CurrentConfigurationEpoch")]);
    m_current_configuration_epoch_isSet = !json[QString("CurrentConfigurationEpoch")].isNull() && m_current_configuration_epoch_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("HealthState")]);
    m_health_state_isSet = !json[QString("HealthState")].isNull() && m_health_state_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("MinReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("MinReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_partition_information_isValid = ::OpenAPI::fromJsonValue(m_partition_information, json[QString("PartitionInformation")]);
    m_partition_information_isSet = !json[QString("PartitionInformation")].isNull() && m_partition_information_isValid;

    m_partition_status_isValid = ::OpenAPI::fromJsonValue(m_partition_status, json[QString("PartitionStatus")]);
    m_partition_status_isSet = !json[QString("PartitionStatus")].isNull() && m_partition_status_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("TargetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("TargetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;
}

QString OAIPartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartition::asJsonObject() const {
    QJsonObject obj;
    if (m_current_configuration_epoch.isSet()) {
        obj.insert(QString("CurrentConfigurationEpoch"), ::OpenAPI::toJsonValue(m_current_configuration_epoch));
    }
    if (m_health_state.isSet()) {
        obj.insert(QString("HealthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("MinReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_partition_information.isSet()) {
        obj.insert(QString("PartitionInformation"), ::OpenAPI::toJsonValue(m_partition_information));
    }
    if (m_partition_status_isSet) {
        obj.insert(QString("PartitionStatus"), ::OpenAPI::toJsonValue(m_partition_status));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("TargetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    return obj;
}

OAIPartition_CurrentConfigurationEpoch OAIPartition::getCurrentConfigurationEpoch() const {
    return m_current_configuration_epoch;
}
void OAIPartition::setCurrentConfigurationEpoch(const OAIPartition_CurrentConfigurationEpoch &current_configuration_epoch) {
    m_current_configuration_epoch = current_configuration_epoch;
    m_current_configuration_epoch_isSet = true;
}

bool OAIPartition::is_current_configuration_epoch_Set() const{
    return m_current_configuration_epoch_isSet;
}

bool OAIPartition::is_current_configuration_epoch_Valid() const{
    return m_current_configuration_epoch_isValid;
}

OAIHealthState OAIPartition::getHealthState() const {
    return m_health_state;
}
void OAIPartition::setHealthState(const OAIHealthState &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIPartition::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIPartition::is_health_state_Valid() const{
    return m_health_state_isValid;
}

qint32 OAIPartition::getInstanceCount() const {
    return m_instance_count;
}
void OAIPartition::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIPartition::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIPartition::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

qint32 OAIPartition::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIPartition::setMinReplicaSetSize(const qint32 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIPartition::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIPartition::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

OAIPartitionInformation OAIPartition::getPartitionInformation() const {
    return m_partition_information;
}
void OAIPartition::setPartitionInformation(const OAIPartitionInformation &partition_information) {
    m_partition_information = partition_information;
    m_partition_information_isSet = true;
}

bool OAIPartition::is_partition_information_Set() const{
    return m_partition_information_isSet;
}

bool OAIPartition::is_partition_information_Valid() const{
    return m_partition_information_isValid;
}

QString OAIPartition::getPartitionStatus() const {
    return m_partition_status;
}
void OAIPartition::setPartitionStatus(const QString &partition_status) {
    m_partition_status = partition_status;
    m_partition_status_isSet = true;
}

bool OAIPartition::is_partition_status_Set() const{
    return m_partition_status_isSet;
}

bool OAIPartition::is_partition_status_Valid() const{
    return m_partition_status_isValid;
}

OAIServiceKind OAIPartition::getServiceKind() const {
    return m_service_kind;
}
void OAIPartition::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIPartition::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIPartition::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

qint32 OAIPartition::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIPartition::setTargetReplicaSetSize(const qint32 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIPartition::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIPartition::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

bool OAIPartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_configuration_epoch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
