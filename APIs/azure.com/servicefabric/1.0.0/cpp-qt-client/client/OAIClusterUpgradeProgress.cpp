/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeProgress::OAIClusterUpgradeProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeProgress::OAIClusterUpgradeProgress() {
    this->initializeModel();
}

OAIClusterUpgradeProgress::~OAIClusterUpgradeProgress() {}

void OAIClusterUpgradeProgress::initializeModel() {

    m_code_version_isSet = false;
    m_code_version_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_current_upgrade_domain_progress_isSet = false;
    m_current_upgrade_domain_progress_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_failure_timestamp_utc_isSet = false;
    m_failure_timestamp_utc_isValid = false;

    m_next_upgrade_domain_isSet = false;
    m_next_upgrade_domain_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_start_timestamp_utc_isSet = false;
    m_start_timestamp_utc_isValid = false;

    m_unhealthy_evaluations_isSet = false;
    m_unhealthy_evaluations_isValid = false;

    m_upgrade_domain_duration_in_milliseconds_isSet = false;
    m_upgrade_domain_duration_in_milliseconds_isValid = false;

    m_upgrade_domain_progress_at_failure_isSet = false;
    m_upgrade_domain_progress_at_failure_isValid = false;

    m_upgrade_domains_isSet = false;
    m_upgrade_domains_isValid = false;

    m_upgrade_duration_in_milliseconds_isSet = false;
    m_upgrade_duration_in_milliseconds_isValid = false;

    m_upgrade_state_isSet = false;
    m_upgrade_state_isValid = false;
}

void OAIClusterUpgradeProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeProgress::fromJsonObject(QJsonObject json) {

    m_code_version_isValid = ::OpenAPI::fromJsonValue(m_code_version, json[QString("CodeVersion")]);
    m_code_version_isSet = !json[QString("CodeVersion")].isNull() && m_code_version_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("ConfigVersion")]);
    m_config_version_isSet = !json[QString("ConfigVersion")].isNull() && m_config_version_isValid;

    m_current_upgrade_domain_progress_isValid = ::OpenAPI::fromJsonValue(m_current_upgrade_domain_progress, json[QString("CurrentUpgradeDomainProgress")]);
    m_current_upgrade_domain_progress_isSet = !json[QString("CurrentUpgradeDomainProgress")].isNull() && m_current_upgrade_domain_progress_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_failure_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_failure_timestamp_utc, json[QString("FailureTimestampUtc")]);
    m_failure_timestamp_utc_isSet = !json[QString("FailureTimestampUtc")].isNull() && m_failure_timestamp_utc_isValid;

    m_next_upgrade_domain_isValid = ::OpenAPI::fromJsonValue(m_next_upgrade_domain, json[QString("NextUpgradeDomain")]);
    m_next_upgrade_domain_isSet = !json[QString("NextUpgradeDomain")].isNull() && m_next_upgrade_domain_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_start_timestamp_utc_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp_utc, json[QString("StartTimestampUtc")]);
    m_start_timestamp_utc_isSet = !json[QString("StartTimestampUtc")].isNull() && m_start_timestamp_utc_isValid;

    m_unhealthy_evaluations_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_evaluations, json[QString("UnhealthyEvaluations")]);
    m_unhealthy_evaluations_isSet = !json[QString("UnhealthyEvaluations")].isNull() && m_unhealthy_evaluations_isValid;

    m_upgrade_domain_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_duration_in_milliseconds, json[QString("UpgradeDomainDurationInMilliseconds")]);
    m_upgrade_domain_duration_in_milliseconds_isSet = !json[QString("UpgradeDomainDurationInMilliseconds")].isNull() && m_upgrade_domain_duration_in_milliseconds_isValid;

    m_upgrade_domain_progress_at_failure_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_progress_at_failure, json[QString("UpgradeDomainProgressAtFailure")]);
    m_upgrade_domain_progress_at_failure_isSet = !json[QString("UpgradeDomainProgressAtFailure")].isNull() && m_upgrade_domain_progress_at_failure_isValid;

    m_upgrade_domains_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domains, json[QString("UpgradeDomains")]);
    m_upgrade_domains_isSet = !json[QString("UpgradeDomains")].isNull() && m_upgrade_domains_isValid;

    m_upgrade_duration_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_duration_in_milliseconds, json[QString("UpgradeDurationInMilliseconds")]);
    m_upgrade_duration_in_milliseconds_isSet = !json[QString("UpgradeDurationInMilliseconds")].isNull() && m_upgrade_duration_in_milliseconds_isValid;

    m_upgrade_state_isValid = ::OpenAPI::fromJsonValue(m_upgrade_state, json[QString("UpgradeState")]);
    m_upgrade_state_isSet = !json[QString("UpgradeState")].isNull() && m_upgrade_state_isValid;
}

QString OAIClusterUpgradeProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_code_version_isSet) {
        obj.insert(QString("CodeVersion"), ::OpenAPI::toJsonValue(m_code_version));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("ConfigVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_current_upgrade_domain_progress.isSet()) {
        obj.insert(QString("CurrentUpgradeDomainProgress"), ::OpenAPI::toJsonValue(m_current_upgrade_domain_progress));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_failure_timestamp_utc_isSet) {
        obj.insert(QString("FailureTimestampUtc"), ::OpenAPI::toJsonValue(m_failure_timestamp_utc));
    }
    if (m_next_upgrade_domain_isSet) {
        obj.insert(QString("NextUpgradeDomain"), ::OpenAPI::toJsonValue(m_next_upgrade_domain));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_start_timestamp_utc_isSet) {
        obj.insert(QString("StartTimestampUtc"), ::OpenAPI::toJsonValue(m_start_timestamp_utc));
    }
    if (m_unhealthy_evaluations.size() > 0) {
        obj.insert(QString("UnhealthyEvaluations"), ::OpenAPI::toJsonValue(m_unhealthy_evaluations));
    }
    if (m_upgrade_domain_duration_in_milliseconds_isSet) {
        obj.insert(QString("UpgradeDomainDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_upgrade_domain_duration_in_milliseconds));
    }
    if (m_upgrade_domain_progress_at_failure.isSet()) {
        obj.insert(QString("UpgradeDomainProgressAtFailure"), ::OpenAPI::toJsonValue(m_upgrade_domain_progress_at_failure));
    }
    if (m_upgrade_domains.size() > 0) {
        obj.insert(QString("UpgradeDomains"), ::OpenAPI::toJsonValue(m_upgrade_domains));
    }
    if (m_upgrade_duration_in_milliseconds_isSet) {
        obj.insert(QString("UpgradeDurationInMilliseconds"), ::OpenAPI::toJsonValue(m_upgrade_duration_in_milliseconds));
    }
    if (m_upgrade_state.isSet()) {
        obj.insert(QString("UpgradeState"), ::OpenAPI::toJsonValue(m_upgrade_state));
    }
    return obj;
}

QString OAIClusterUpgradeProgress::getCodeVersion() const {
    return m_code_version;
}
void OAIClusterUpgradeProgress::setCodeVersion(const QString &code_version) {
    m_code_version = code_version;
    m_code_version_isSet = true;
}

bool OAIClusterUpgradeProgress::is_code_version_Set() const{
    return m_code_version_isSet;
}

bool OAIClusterUpgradeProgress::is_code_version_Valid() const{
    return m_code_version_isValid;
}

QString OAIClusterUpgradeProgress::getConfigVersion() const {
    return m_config_version;
}
void OAIClusterUpgradeProgress::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIClusterUpgradeProgress::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIClusterUpgradeProgress::is_config_version_Valid() const{
    return m_config_version_isValid;
}

OAIApplicationUpgrade_CurrentUpgradeDomainProgress OAIClusterUpgradeProgress::getCurrentUpgradeDomainProgress() const {
    return m_current_upgrade_domain_progress;
}
void OAIClusterUpgradeProgress::setCurrentUpgradeDomainProgress(const OAIApplicationUpgrade_CurrentUpgradeDomainProgress &current_upgrade_domain_progress) {
    m_current_upgrade_domain_progress = current_upgrade_domain_progress;
    m_current_upgrade_domain_progress_isSet = true;
}

bool OAIClusterUpgradeProgress::is_current_upgrade_domain_progress_Set() const{
    return m_current_upgrade_domain_progress_isSet;
}

bool OAIClusterUpgradeProgress::is_current_upgrade_domain_progress_Valid() const{
    return m_current_upgrade_domain_progress_isValid;
}

OAIFailureReason OAIClusterUpgradeProgress::getFailureReason() const {
    return m_failure_reason;
}
void OAIClusterUpgradeProgress::setFailureReason(const OAIFailureReason &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIClusterUpgradeProgress::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIClusterUpgradeProgress::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIClusterUpgradeProgress::getFailureTimestampUtc() const {
    return m_failure_timestamp_utc;
}
void OAIClusterUpgradeProgress::setFailureTimestampUtc(const QString &failure_timestamp_utc) {
    m_failure_timestamp_utc = failure_timestamp_utc;
    m_failure_timestamp_utc_isSet = true;
}

bool OAIClusterUpgradeProgress::is_failure_timestamp_utc_Set() const{
    return m_failure_timestamp_utc_isSet;
}

bool OAIClusterUpgradeProgress::is_failure_timestamp_utc_Valid() const{
    return m_failure_timestamp_utc_isValid;
}

QString OAIClusterUpgradeProgress::getNextUpgradeDomain() const {
    return m_next_upgrade_domain;
}
void OAIClusterUpgradeProgress::setNextUpgradeDomain(const QString &next_upgrade_domain) {
    m_next_upgrade_domain = next_upgrade_domain;
    m_next_upgrade_domain_isSet = true;
}

bool OAIClusterUpgradeProgress::is_next_upgrade_domain_Set() const{
    return m_next_upgrade_domain_isSet;
}

bool OAIClusterUpgradeProgress::is_next_upgrade_domain_Valid() const{
    return m_next_upgrade_domain_isValid;
}

OAIRollingUpgradeMode OAIClusterUpgradeProgress::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIClusterUpgradeProgress::setRollingUpgradeMode(const OAIRollingUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIClusterUpgradeProgress::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIClusterUpgradeProgress::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

QString OAIClusterUpgradeProgress::getStartTimestampUtc() const {
    return m_start_timestamp_utc;
}
void OAIClusterUpgradeProgress::setStartTimestampUtc(const QString &start_timestamp_utc) {
    m_start_timestamp_utc = start_timestamp_utc;
    m_start_timestamp_utc_isSet = true;
}

bool OAIClusterUpgradeProgress::is_start_timestamp_utc_Set() const{
    return m_start_timestamp_utc_isSet;
}

bool OAIClusterUpgradeProgress::is_start_timestamp_utc_Valid() const{
    return m_start_timestamp_utc_isValid;
}

QList<OAIUnhealthyEvaluation> OAIClusterUpgradeProgress::getUnhealthyEvaluations() const {
    return m_unhealthy_evaluations;
}
void OAIClusterUpgradeProgress::setUnhealthyEvaluations(const QList<OAIUnhealthyEvaluation> &unhealthy_evaluations) {
    m_unhealthy_evaluations = unhealthy_evaluations;
    m_unhealthy_evaluations_isSet = true;
}

bool OAIClusterUpgradeProgress::is_unhealthy_evaluations_Set() const{
    return m_unhealthy_evaluations_isSet;
}

bool OAIClusterUpgradeProgress::is_unhealthy_evaluations_Valid() const{
    return m_unhealthy_evaluations_isValid;
}

QString OAIClusterUpgradeProgress::getUpgradeDomainDurationInMilliseconds() const {
    return m_upgrade_domain_duration_in_milliseconds;
}
void OAIClusterUpgradeProgress::setUpgradeDomainDurationInMilliseconds(const QString &upgrade_domain_duration_in_milliseconds) {
    m_upgrade_domain_duration_in_milliseconds = upgrade_domain_duration_in_milliseconds;
    m_upgrade_domain_duration_in_milliseconds_isSet = true;
}

bool OAIClusterUpgradeProgress::is_upgrade_domain_duration_in_milliseconds_Set() const{
    return m_upgrade_domain_duration_in_milliseconds_isSet;
}

bool OAIClusterUpgradeProgress::is_upgrade_domain_duration_in_milliseconds_Valid() const{
    return m_upgrade_domain_duration_in_milliseconds_isValid;
}

OAIClusterUpgradeProgress_UpgradeDomainProgressAtFailure OAIClusterUpgradeProgress::getUpgradeDomainProgressAtFailure() const {
    return m_upgrade_domain_progress_at_failure;
}
void OAIClusterUpgradeProgress::setUpgradeDomainProgressAtFailure(const OAIClusterUpgradeProgress_UpgradeDomainProgressAtFailure &upgrade_domain_progress_at_failure) {
    m_upgrade_domain_progress_at_failure = upgrade_domain_progress_at_failure;
    m_upgrade_domain_progress_at_failure_isSet = true;
}

bool OAIClusterUpgradeProgress::is_upgrade_domain_progress_at_failure_Set() const{
    return m_upgrade_domain_progress_at_failure_isSet;
}

bool OAIClusterUpgradeProgress::is_upgrade_domain_progress_at_failure_Valid() const{
    return m_upgrade_domain_progress_at_failure_isValid;
}

QList<QString> OAIClusterUpgradeProgress::getUpgradeDomains() const {
    return m_upgrade_domains;
}
void OAIClusterUpgradeProgress::setUpgradeDomains(const QList<QString> &upgrade_domains) {
    m_upgrade_domains = upgrade_domains;
    m_upgrade_domains_isSet = true;
}

bool OAIClusterUpgradeProgress::is_upgrade_domains_Set() const{
    return m_upgrade_domains_isSet;
}

bool OAIClusterUpgradeProgress::is_upgrade_domains_Valid() const{
    return m_upgrade_domains_isValid;
}

QString OAIClusterUpgradeProgress::getUpgradeDurationInMilliseconds() const {
    return m_upgrade_duration_in_milliseconds;
}
void OAIClusterUpgradeProgress::setUpgradeDurationInMilliseconds(const QString &upgrade_duration_in_milliseconds) {
    m_upgrade_duration_in_milliseconds = upgrade_duration_in_milliseconds;
    m_upgrade_duration_in_milliseconds_isSet = true;
}

bool OAIClusterUpgradeProgress::is_upgrade_duration_in_milliseconds_Set() const{
    return m_upgrade_duration_in_milliseconds_isSet;
}

bool OAIClusterUpgradeProgress::is_upgrade_duration_in_milliseconds_Valid() const{
    return m_upgrade_duration_in_milliseconds_isValid;
}

OAIUpgradeState OAIClusterUpgradeProgress::getUpgradeState() const {
    return m_upgrade_state;
}
void OAIClusterUpgradeProgress::setUpgradeState(const OAIUpgradeState &upgrade_state) {
    m_upgrade_state = upgrade_state;
    m_upgrade_state_isSet = true;
}

bool OAIClusterUpgradeProgress::is_upgrade_state_Set() const{
    return m_upgrade_state_isSet;
}

bool OAIClusterUpgradeProgress::is_upgrade_state_Valid() const{
    return m_upgrade_state_isValid;
}

bool OAIClusterUpgradeProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_upgrade_domain_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_upgrade_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_evaluations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_progress_at_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_duration_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
