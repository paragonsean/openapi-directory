/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceType::OAIServiceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceType::OAIServiceType() {
    this->initializeModel();
}

OAIServiceType::~OAIServiceType() {}

void OAIServiceType::initializeModel() {

    m_is_service_group_isSet = false;
    m_is_service_group_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_service_manifest_version_isSet = false;
    m_service_manifest_version_isValid = false;

    m_service_type_description_isSet = false;
    m_service_type_description_isValid = false;
}

void OAIServiceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceType::fromJsonObject(QJsonObject json) {

    m_is_service_group_isValid = ::OpenAPI::fromJsonValue(m_is_service_group, json[QString("IsServiceGroup")]);
    m_is_service_group_isSet = !json[QString("IsServiceGroup")].isNull() && m_is_service_group_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_service_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_version, json[QString("ServiceManifestVersion")]);
    m_service_manifest_version_isSet = !json[QString("ServiceManifestVersion")].isNull() && m_service_manifest_version_isValid;

    m_service_type_description_isValid = ::OpenAPI::fromJsonValue(m_service_type_description, json[QString("ServiceTypeDescription")]);
    m_service_type_description_isSet = !json[QString("ServiceTypeDescription")].isNull() && m_service_type_description_isValid;
}

QString OAIServiceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceType::asJsonObject() const {
    QJsonObject obj;
    if (m_is_service_group_isSet) {
        obj.insert(QString("IsServiceGroup"), ::OpenAPI::toJsonValue(m_is_service_group));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_service_manifest_version_isSet) {
        obj.insert(QString("ServiceManifestVersion"), ::OpenAPI::toJsonValue(m_service_manifest_version));
    }
    if (m_service_type_description.isSet()) {
        obj.insert(QString("ServiceTypeDescription"), ::OpenAPI::toJsonValue(m_service_type_description));
    }
    return obj;
}

bool OAIServiceType::isIsServiceGroup() const {
    return m_is_service_group;
}
void OAIServiceType::setIsServiceGroup(const bool &is_service_group) {
    m_is_service_group = is_service_group;
    m_is_service_group_isSet = true;
}

bool OAIServiceType::is_is_service_group_Set() const{
    return m_is_service_group_isSet;
}

bool OAIServiceType::is_is_service_group_Valid() const{
    return m_is_service_group_isValid;
}

QString OAIServiceType::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIServiceType::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIServiceType::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIServiceType::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

QString OAIServiceType::getServiceManifestVersion() const {
    return m_service_manifest_version;
}
void OAIServiceType::setServiceManifestVersion(const QString &service_manifest_version) {
    m_service_manifest_version = service_manifest_version;
    m_service_manifest_version_isSet = true;
}

bool OAIServiceType::is_service_manifest_version_Set() const{
    return m_service_manifest_version_isSet;
}

bool OAIServiceType::is_service_manifest_version_Valid() const{
    return m_service_manifest_version_isValid;
}

OAIServiceType_ServiceTypeDescription OAIServiceType::getServiceTypeDescription() const {
    return m_service_type_description;
}
void OAIServiceType::setServiceTypeDescription(const OAIServiceType_ServiceTypeDescription &service_type_description) {
    m_service_type_description = service_type_description;
    m_service_type_description_isSet = true;
}

bool OAIServiceType::is_service_type_description_Set() const{
    return m_service_type_description_isSet;
}

bool OAIServiceType::is_service_type_description_Valid() const{
    return m_service_type_description_isValid;
}

bool OAIServiceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_service_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
