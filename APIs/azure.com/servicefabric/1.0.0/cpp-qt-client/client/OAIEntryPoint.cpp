/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryPoint::OAIEntryPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryPoint::OAIEntryPoint() {
    this->initializeModel();
}

OAIEntryPoint::~OAIEntryPoint() {}

void OAIEntryPoint::initializeModel() {

    m_code_package_entry_point_statistics_isSet = false;
    m_code_package_entry_point_statistics_isValid = false;

    m_entry_point_location_isSet = false;
    m_entry_point_location_isValid = false;

    m_next_activation_time_isSet = false;
    m_next_activation_time_isValid = false;

    m_process_id_isSet = false;
    m_process_id_isValid = false;

    m_run_as_user_name_isSet = false;
    m_run_as_user_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEntryPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryPoint::fromJsonObject(QJsonObject json) {

    m_code_package_entry_point_statistics_isValid = ::OpenAPI::fromJsonValue(m_code_package_entry_point_statistics, json[QString("CodePackageEntryPointStatistics")]);
    m_code_package_entry_point_statistics_isSet = !json[QString("CodePackageEntryPointStatistics")].isNull() && m_code_package_entry_point_statistics_isValid;

    m_entry_point_location_isValid = ::OpenAPI::fromJsonValue(m_entry_point_location, json[QString("EntryPointLocation")]);
    m_entry_point_location_isSet = !json[QString("EntryPointLocation")].isNull() && m_entry_point_location_isValid;

    m_next_activation_time_isValid = ::OpenAPI::fromJsonValue(m_next_activation_time, json[QString("NextActivationTime")]);
    m_next_activation_time_isSet = !json[QString("NextActivationTime")].isNull() && m_next_activation_time_isValid;

    m_process_id_isValid = ::OpenAPI::fromJsonValue(m_process_id, json[QString("ProcessId")]);
    m_process_id_isSet = !json[QString("ProcessId")].isNull() && m_process_id_isValid;

    m_run_as_user_name_isValid = ::OpenAPI::fromJsonValue(m_run_as_user_name, json[QString("RunAsUserName")]);
    m_run_as_user_name_isSet = !json[QString("RunAsUserName")].isNull() && m_run_as_user_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIEntryPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_code_package_entry_point_statistics.isSet()) {
        obj.insert(QString("CodePackageEntryPointStatistics"), ::OpenAPI::toJsonValue(m_code_package_entry_point_statistics));
    }
    if (m_entry_point_location_isSet) {
        obj.insert(QString("EntryPointLocation"), ::OpenAPI::toJsonValue(m_entry_point_location));
    }
    if (m_next_activation_time_isSet) {
        obj.insert(QString("NextActivationTime"), ::OpenAPI::toJsonValue(m_next_activation_time));
    }
    if (m_process_id_isSet) {
        obj.insert(QString("ProcessId"), ::OpenAPI::toJsonValue(m_process_id));
    }
    if (m_run_as_user_name_isSet) {
        obj.insert(QString("RunAsUserName"), ::OpenAPI::toJsonValue(m_run_as_user_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICodePackageEntryPointStatistics OAIEntryPoint::getCodePackageEntryPointStatistics() const {
    return m_code_package_entry_point_statistics;
}
void OAIEntryPoint::setCodePackageEntryPointStatistics(const OAICodePackageEntryPointStatistics &code_package_entry_point_statistics) {
    m_code_package_entry_point_statistics = code_package_entry_point_statistics;
    m_code_package_entry_point_statistics_isSet = true;
}

bool OAIEntryPoint::is_code_package_entry_point_statistics_Set() const{
    return m_code_package_entry_point_statistics_isSet;
}

bool OAIEntryPoint::is_code_package_entry_point_statistics_Valid() const{
    return m_code_package_entry_point_statistics_isValid;
}

qint32 OAIEntryPoint::getEntryPointLocation() const {
    return m_entry_point_location;
}
void OAIEntryPoint::setEntryPointLocation(const qint32 &entry_point_location) {
    m_entry_point_location = entry_point_location;
    m_entry_point_location_isSet = true;
}

bool OAIEntryPoint::is_entry_point_location_Set() const{
    return m_entry_point_location_isSet;
}

bool OAIEntryPoint::is_entry_point_location_Valid() const{
    return m_entry_point_location_isValid;
}

qint32 OAIEntryPoint::getNextActivationTime() const {
    return m_next_activation_time;
}
void OAIEntryPoint::setNextActivationTime(const qint32 &next_activation_time) {
    m_next_activation_time = next_activation_time;
    m_next_activation_time_isSet = true;
}

bool OAIEntryPoint::is_next_activation_time_Set() const{
    return m_next_activation_time_isSet;
}

bool OAIEntryPoint::is_next_activation_time_Valid() const{
    return m_next_activation_time_isValid;
}

qint32 OAIEntryPoint::getProcessId() const {
    return m_process_id;
}
void OAIEntryPoint::setProcessId(const qint32 &process_id) {
    m_process_id = process_id;
    m_process_id_isSet = true;
}

bool OAIEntryPoint::is_process_id_Set() const{
    return m_process_id_isSet;
}

bool OAIEntryPoint::is_process_id_Valid() const{
    return m_process_id_isValid;
}

qint32 OAIEntryPoint::getRunAsUserName() const {
    return m_run_as_user_name;
}
void OAIEntryPoint::setRunAsUserName(const qint32 &run_as_user_name) {
    m_run_as_user_name = run_as_user_name;
    m_run_as_user_name_isSet = true;
}

bool OAIEntryPoint::is_run_as_user_name_Set() const{
    return m_run_as_user_name_isSet;
}

bool OAIEntryPoint::is_run_as_user_name_Valid() const{
    return m_run_as_user_name_isValid;
}

QString OAIEntryPoint::getStatus() const {
    return m_status;
}
void OAIEntryPoint::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEntryPoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEntryPoint::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEntryPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_package_entry_point_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_activation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
