/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartitionHealth_ReplicaHealthStates_inner.h
 *
 * The states of the replica health
 */

#ifndef OAIPartitionHealth_ReplicaHealthStates_inner_H
#define OAIPartitionHealth_ReplicaHealthStates_inner_H

#include <QJsonObject>

#include "OAIHealthState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPartitionHealth_ReplicaHealthStates_inner : public OAIObject {
public:
    OAIPartitionHealth_ReplicaHealthStates_inner();
    OAIPartitionHealth_ReplicaHealthStates_inner(QString json);
    ~OAIPartitionHealth_ReplicaHealthStates_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHealthState getAggregatedHealthState() const;
    void setAggregatedHealthState(const OAIHealthState &aggregated_health_state);
    bool is_aggregated_health_state_Set() const;
    bool is_aggregated_health_state_Valid() const;

    qint32 getHealthEvents() const;
    void setHealthEvents(const qint32 &health_events);
    bool is_health_events_Set() const;
    bool is_health_events_Valid() const;

    QString getPartitionId() const;
    void setPartitionId(const QString &partition_id);
    bool is_partition_id_Set() const;
    bool is_partition_id_Valid() const;

    QString getReplicaId() const;
    void setReplicaId(const QString &replica_id);
    bool is_replica_id_Set() const;
    bool is_replica_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHealthState m_aggregated_health_state;
    bool m_aggregated_health_state_isSet;
    bool m_aggregated_health_state_isValid;

    qint32 m_health_events;
    bool m_health_events_isSet;
    bool m_health_events_isValid;

    QString m_partition_id;
    bool m_partition_id_isSet;
    bool m_partition_id_isValid;

    QString m_replica_id;
    bool m_replica_id_isSet;
    bool m_replica_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartitionHealth_ReplicaHealthStates_inner)

#endif // OAIPartitionHealth_ReplicaHealthStates_inner_H
