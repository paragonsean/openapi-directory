/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationHealthPolicyMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationHealthPolicyMap::OAIApplicationHealthPolicyMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationHealthPolicyMap::OAIApplicationHealthPolicyMap() {
    this->initializeModel();
}

OAIApplicationHealthPolicyMap::~OAIApplicationHealthPolicyMap() {}

void OAIApplicationHealthPolicyMap::initializeModel() {

    m_consider_warning_as_error_isSet = false;
    m_consider_warning_as_error_isValid = false;

    m_default_service_type_health_policy_isSet = false;
    m_default_service_type_health_policy_isValid = false;

    m_max_percent_unhealthy_deployed_applications_isSet = false;
    m_max_percent_unhealthy_deployed_applications_isValid = false;

    m_max_percent_unhealthy_partitions_per_service_isSet = false;
    m_max_percent_unhealthy_partitions_per_service_isValid = false;

    m_max_percent_unhealthy_replicas_per_partition_isSet = false;
    m_max_percent_unhealthy_replicas_per_partition_isValid = false;

    m_max_percent_unhealthy_services_isSet = false;
    m_max_percent_unhealthy_services_isValid = false;
}

void OAIApplicationHealthPolicyMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationHealthPolicyMap::fromJsonObject(QJsonObject json) {

    m_consider_warning_as_error_isValid = ::OpenAPI::fromJsonValue(m_consider_warning_as_error, json[QString("ConsiderWarningAsError")]);
    m_consider_warning_as_error_isSet = !json[QString("ConsiderWarningAsError")].isNull() && m_consider_warning_as_error_isValid;

    m_default_service_type_health_policy_isValid = ::OpenAPI::fromJsonValue(m_default_service_type_health_policy, json[QString("DefaultServiceTypeHealthPolicy")]);
    m_default_service_type_health_policy_isSet = !json[QString("DefaultServiceTypeHealthPolicy")].isNull() && m_default_service_type_health_policy_isValid;

    m_max_percent_unhealthy_deployed_applications_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_deployed_applications, json[QString("MaxPercentUnhealthyDeployedApplications")]);
    m_max_percent_unhealthy_deployed_applications_isSet = !json[QString("MaxPercentUnhealthyDeployedApplications")].isNull() && m_max_percent_unhealthy_deployed_applications_isValid;

    m_max_percent_unhealthy_partitions_per_service_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_partitions_per_service, json[QString("MaxPercentUnhealthyPartitionsPerService")]);
    m_max_percent_unhealthy_partitions_per_service_isSet = !json[QString("MaxPercentUnhealthyPartitionsPerService")].isNull() && m_max_percent_unhealthy_partitions_per_service_isValid;

    m_max_percent_unhealthy_replicas_per_partition_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_replicas_per_partition, json[QString("MaxPercentUnhealthyReplicasPerPartition")]);
    m_max_percent_unhealthy_replicas_per_partition_isSet = !json[QString("MaxPercentUnhealthyReplicasPerPartition")].isNull() && m_max_percent_unhealthy_replicas_per_partition_isValid;

    m_max_percent_unhealthy_services_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_services, json[QString("MaxPercentUnhealthyServices")]);
    m_max_percent_unhealthy_services_isSet = !json[QString("MaxPercentUnhealthyServices")].isNull() && m_max_percent_unhealthy_services_isValid;
}

QString OAIApplicationHealthPolicyMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationHealthPolicyMap::asJsonObject() const {
    QJsonObject obj;
    if (m_consider_warning_as_error_isSet) {
        obj.insert(QString("ConsiderWarningAsError"), ::OpenAPI::toJsonValue(m_consider_warning_as_error));
    }
    if (m_default_service_type_health_policy_isSet) {
        obj.insert(QString("DefaultServiceTypeHealthPolicy"), ::OpenAPI::toJsonValue(m_default_service_type_health_policy));
    }
    if (m_max_percent_unhealthy_deployed_applications_isSet) {
        obj.insert(QString("MaxPercentUnhealthyDeployedApplications"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_deployed_applications));
    }
    if (m_max_percent_unhealthy_partitions_per_service_isSet) {
        obj.insert(QString("MaxPercentUnhealthyPartitionsPerService"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_partitions_per_service));
    }
    if (m_max_percent_unhealthy_replicas_per_partition_isSet) {
        obj.insert(QString("MaxPercentUnhealthyReplicasPerPartition"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_replicas_per_partition));
    }
    if (m_max_percent_unhealthy_services_isSet) {
        obj.insert(QString("MaxPercentUnhealthyServices"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_services));
    }
    return obj;
}

bool OAIApplicationHealthPolicyMap::isConsiderWarningAsError() const {
    return m_consider_warning_as_error;
}
void OAIApplicationHealthPolicyMap::setConsiderWarningAsError(const bool &consider_warning_as_error) {
    m_consider_warning_as_error = consider_warning_as_error;
    m_consider_warning_as_error_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_consider_warning_as_error_Set() const{
    return m_consider_warning_as_error_isSet;
}

bool OAIApplicationHealthPolicyMap::is_consider_warning_as_error_Valid() const{
    return m_consider_warning_as_error_isValid;
}

qint32 OAIApplicationHealthPolicyMap::getDefaultServiceTypeHealthPolicy() const {
    return m_default_service_type_health_policy;
}
void OAIApplicationHealthPolicyMap::setDefaultServiceTypeHealthPolicy(const qint32 &default_service_type_health_policy) {
    m_default_service_type_health_policy = default_service_type_health_policy;
    m_default_service_type_health_policy_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_default_service_type_health_policy_Set() const{
    return m_default_service_type_health_policy_isSet;
}

bool OAIApplicationHealthPolicyMap::is_default_service_type_health_policy_Valid() const{
    return m_default_service_type_health_policy_isValid;
}

qint32 OAIApplicationHealthPolicyMap::getMaxPercentUnhealthyDeployedApplications() const {
    return m_max_percent_unhealthy_deployed_applications;
}
void OAIApplicationHealthPolicyMap::setMaxPercentUnhealthyDeployedApplications(const qint32 &max_percent_unhealthy_deployed_applications) {
    m_max_percent_unhealthy_deployed_applications = max_percent_unhealthy_deployed_applications;
    m_max_percent_unhealthy_deployed_applications_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_deployed_applications_Set() const{
    return m_max_percent_unhealthy_deployed_applications_isSet;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_deployed_applications_Valid() const{
    return m_max_percent_unhealthy_deployed_applications_isValid;
}

qint32 OAIApplicationHealthPolicyMap::getMaxPercentUnhealthyPartitionsPerService() const {
    return m_max_percent_unhealthy_partitions_per_service;
}
void OAIApplicationHealthPolicyMap::setMaxPercentUnhealthyPartitionsPerService(const qint32 &max_percent_unhealthy_partitions_per_service) {
    m_max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service;
    m_max_percent_unhealthy_partitions_per_service_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_partitions_per_service_Set() const{
    return m_max_percent_unhealthy_partitions_per_service_isSet;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_partitions_per_service_Valid() const{
    return m_max_percent_unhealthy_partitions_per_service_isValid;
}

qint32 OAIApplicationHealthPolicyMap::getMaxPercentUnhealthyReplicasPerPartition() const {
    return m_max_percent_unhealthy_replicas_per_partition;
}
void OAIApplicationHealthPolicyMap::setMaxPercentUnhealthyReplicasPerPartition(const qint32 &max_percent_unhealthy_replicas_per_partition) {
    m_max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition;
    m_max_percent_unhealthy_replicas_per_partition_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_replicas_per_partition_Set() const{
    return m_max_percent_unhealthy_replicas_per_partition_isSet;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_replicas_per_partition_Valid() const{
    return m_max_percent_unhealthy_replicas_per_partition_isValid;
}

qint32 OAIApplicationHealthPolicyMap::getMaxPercentUnhealthyServices() const {
    return m_max_percent_unhealthy_services;
}
void OAIApplicationHealthPolicyMap::setMaxPercentUnhealthyServices(const qint32 &max_percent_unhealthy_services) {
    m_max_percent_unhealthy_services = max_percent_unhealthy_services;
    m_max_percent_unhealthy_services_isSet = true;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_services_Set() const{
    return m_max_percent_unhealthy_services_isSet;
}

bool OAIApplicationHealthPolicyMap::is_max_percent_unhealthy_services_Valid() const{
    return m_max_percent_unhealthy_services_isValid;
}

bool OAIApplicationHealthPolicyMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consider_warning_as_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_type_health_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_deployed_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_partitions_per_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_replicas_per_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationHealthPolicyMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
