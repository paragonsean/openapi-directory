/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaLoadInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaLoadInformation::OAIReplicaLoadInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaLoadInformation::OAIReplicaLoadInformation() {
    this->initializeModel();
}

OAIReplicaLoadInformation::~OAIReplicaLoadInformation() {}

void OAIReplicaLoadInformation::initializeModel() {

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_or_instance_id_isSet = false;
    m_replica_or_instance_id_isValid = false;

    m_reported_load_isSet = false;
    m_reported_load_isValid = false;
}

void OAIReplicaLoadInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaLoadInformation::fromJsonObject(QJsonObject json) {

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_or_instance_id_isValid = ::OpenAPI::fromJsonValue(m_replica_or_instance_id, json[QString("ReplicaOrInstanceId")]);
    m_replica_or_instance_id_isSet = !json[QString("ReplicaOrInstanceId")].isNull() && m_replica_or_instance_id_isValid;

    m_reported_load_isValid = ::OpenAPI::fromJsonValue(m_reported_load, json[QString("ReportedLoad")]);
    m_reported_load_isSet = !json[QString("ReportedLoad")].isNull() && m_reported_load_isValid;
}

QString OAIReplicaLoadInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaLoadInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_or_instance_id_isSet) {
        obj.insert(QString("ReplicaOrInstanceId"), ::OpenAPI::toJsonValue(m_replica_or_instance_id));
    }
    if (m_reported_load.size() > 0) {
        obj.insert(QString("ReportedLoad"), ::OpenAPI::toJsonValue(m_reported_load));
    }
    return obj;
}

QString OAIReplicaLoadInformation::getPartitionId() const {
    return m_partition_id;
}
void OAIReplicaLoadInformation::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIReplicaLoadInformation::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIReplicaLoadInformation::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIReplicaLoadInformation::getReplicaOrInstanceId() const {
    return m_replica_or_instance_id;
}
void OAIReplicaLoadInformation::setReplicaOrInstanceId(const QString &replica_or_instance_id) {
    m_replica_or_instance_id = replica_or_instance_id;
    m_replica_or_instance_id_isSet = true;
}

bool OAIReplicaLoadInformation::is_replica_or_instance_id_Set() const{
    return m_replica_or_instance_id_isSet;
}

bool OAIReplicaLoadInformation::is_replica_or_instance_id_Valid() const{
    return m_replica_or_instance_id_isValid;
}

QList<QString> OAIReplicaLoadInformation::getReportedLoad() const {
    return m_reported_load;
}
void OAIReplicaLoadInformation::setReportedLoad(const QList<QString> &reported_load) {
    m_reported_load = reported_load;
    m_reported_load_isSet = true;
}

bool OAIReplicaLoadInformation::is_reported_load_Set() const{
    return m_reported_load_isSet;
}

bool OAIReplicaLoadInformation::is_reported_load_Valid() const{
    return m_reported_load_isValid;
}

bool OAIReplicaLoadInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_or_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_load.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaLoadInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
