/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIApplicationDescription.h"
#include "OAIApplicationHealth.h"
#include "OAIApplicationHealthReport.h"
#include "OAIApplicationList.h"
#include "OAIApplicationManifest.h"
#include "OAIApplicationType.h"
#include "OAIApplicationUpgrade.h"
#include "OAIClusterHealth.h"
#include "OAIClusterHealthReport.h"
#include "OAIClusterLoadInformation.h"
#include "OAIClusterUpgradeProgress.h"
#include "OAICreateServiceDescription.h"
#include "OAICreateServiceGroupDescription.h"
#include "OAIDeployedApplication.h"
#include "OAIDeployedApplicationHealth.h"
#include "OAIDeployedApplicationHealthReport.h"
#include "OAIDeployedCodePackage.h"
#include "OAIDeployedReplica.h"
#include "OAIDeployedReplicaDetail.h"
#include "OAIDeployedServiceHealthReport.h"
#include "OAIDeployedServicePackage.h"
#include "OAIDeployedServicePackageHealth.h"
#include "OAIDeployedServiceType.h"
#include "OAIDisableNode.h"
#include "OAIErrorModel.h"
#include "OAINode.h"
#include "OAINodeHealth.h"
#include "OAINodeHealthReport.h"
#include "OAINodeList.h"
#include "OAINodeLoadInformation.h"
#include "OAIPartition.h"
#include "OAIPartitionHealth.h"
#include "OAIPartitionHealthReport.h"
#include "OAIPartitionList.h"
#include "OAIPartitionLoadInformation.h"
#include "OAIRegisterApplicationType.h"
#include "OAIRegisterClusterPackage.h"
#include "OAIReplica.h"
#include "OAIReplicaHealth.h"
#include "OAIReplicaHealthReport.h"
#include "OAIReplicaList.h"
#include "OAIReplicaLoadInformation.h"
#include "OAIResolvedServicePartition.h"
#include "OAIResumeApplicationUpgrade.h"
#include "OAIResumeClusterUpgrade.h"
#include "OAIService.h"
#include "OAIServiceDescription.h"
#include "OAIServiceDescriptionTemplate.h"
#include "OAIServiceGroupDescription.h"
#include "OAIServiceGroupMember.h"
#include "OAIServiceHealth.h"
#include "OAIServiceHealthReport.h"
#include "OAIServiceList.h"
#include "OAIServiceManifest.h"
#include "OAIServiceType.h"
#include "OAIStartApplicationUpgrade.h"
#include "OAIStartClusterUpgrade.h"
#include "OAIUnregisterApplicationType.h"
#include "OAIUnregisterClusterPackage.h"
#include "OAIUpdateApplicationUpgrade.h"
#include "OAIUpdateClusterUpgrade.h"
#include "OAIUpdateServiceDescription.h"
#include "OAIUpdateServiceGroupDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  deployed_applications_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationHealthsGet(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deployed_applications_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  application_health_report OAIApplicationHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationHealthsSend(const QString &application_name, const QString &api_version, const OAIApplicationHealthReport &application_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_type_name QString [required]
    * @param[in]  application_type_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationManifestsGet(const QString &application_type_name, const QString &application_type_version, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_type_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationTypesGet(const QString &application_type_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationTypesList(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  register_application_type OAIRegisterApplicationType [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationTypesRegister(const QString &api_version, const OAIRegisterApplicationType &register_application_type, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_type_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  unregister_application_type OAIUnregisterApplicationType [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationTypesUnregister(const QString &application_type_name, const QString &api_version, const OAIUnregisterApplicationType &unregister_application_type, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationUpgradeRollbacksStart(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationUpgradesGet(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resume_application_upgrade OAIResumeApplicationUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationUpgradesResume(const QString &application_name, const QString &api_version, const OAIResumeApplicationUpgrade &resume_application_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_application_upgrade OAIStartApplicationUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationUpgradesStart(const QString &application_name, const QString &api_version, const OAIStartApplicationUpgrade &start_application_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_application_upgrade OAIUpdateApplicationUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationUpgradesUpdate(const QString &application_name, const QString &api_version, const OAIUpdateApplicationUpgrade &update_application_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  application_description OAIApplicationDescription [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationsCreate(const QString &api_version, const OAIApplicationDescription &application_description, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationsGet(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void applicationsList(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  force_remove bool [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void applicationsRemove(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &force_remove = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  nodes_health_state_filter QString [optional]
    * @param[in]  applications_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterHealthsGet(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nodes_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &applications_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  cluster_health_report OAIClusterHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterHealthsSend(const QString &api_version, const OAIClusterHealthReport &cluster_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterLoadInformationsGet(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterManifestsGet(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  register_cluster_package OAIRegisterClusterPackage [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterPackagesRegister(const QString &api_version, const OAIRegisterClusterPackage &register_cluster_package, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  unregister_cluster_package OAIUnregisterClusterPackage [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterPackagesUnregister(const QString &api_version, const OAIUnregisterClusterPackage &unregister_cluster_package, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resume_cluster_upgrade OAIResumeClusterUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterUpgradesResume(const QString &api_version, const OAIResumeClusterUpgrade &resume_cluster_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterUpgradesRollback(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  start_cluster_upgrade OAIStartClusterUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterUpgradesStart(const QString &api_version, const OAIStartClusterUpgrade &start_cluster_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  update_cluster_upgrade OAIUpdateClusterUpgrade [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void clusterUpgradesUpdate(const QString &api_version, const OAIUpdateClusterUpgrade &update_cluster_upgrade, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  deployed_service_packages_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedApplicationHealthsGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deployed_service_packages_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployed_application_health_report OAIDeployedApplicationHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedApplicationHealthsSend(const QString &node_name, const QString &application_name, const QString &api_version, const OAIDeployedApplicationHealthReport &deployed_application_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedApplicationsGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedApplicationsList(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedCodePackagesGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  partition_name QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedReplicaDetailsGet(const QString &node_name, const QString &partition_name, const QString &replica_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedReplicasGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  service_package_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedServicePackageHealthsGet(const QString &node_name, const QString &application_name, const QString &service_package_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  service_manifest_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployed_service_package_health_report OAIDeployedServiceHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedServicePackageHealthsSend(const QString &node_name, const QString &application_name, const QString &service_manifest_name, const QString &api_version, const OAIDeployedServiceHealthReport &deployed_service_package_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedServicePackagesGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void deployedServiceTypesGet(const QString &node_name, const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodeHealthsGet(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  node_health_report OAINodeHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodeHealthsSend(const QString &node_name, const QString &api_version, const OAINodeHealthReport &node_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodeLoadInformationsGet(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodeStatesRemove(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  disable_node OAIDisableNode [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodesDisable(const QString &node_name, const QString &api_version, const OAIDisableNode &disable_node, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodesEnable(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void nodesGet(const QString &node_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void nodesList(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  replicas_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionHealthsGet(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &replicas_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  partition_health_report OAIPartitionHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionHealthsSend(const QString &partition_id, const QString &api_version, const OAIPartitionHealthReport &partition_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionListsRepair(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionLoadInformationsGet(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionLoadsReset(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionsGet(const QString &service_name, const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionsList(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void partitionsRepair(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  events_health_state_filter QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void replicaHealthsGet(const QString &partition_id, const QString &replica_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &events_health_state_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  replica_health_report OAIReplicaHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void replicaHealthsSend(const QString &partition_id, const QString &replica_id, const QString &api_version, const OAIReplicaHealthReport &replica_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void replicaLoadInformationsGet(const QString &partition_id, const QString &replica_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  replica_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void replicasGet(const QString &partition_id, const QString &replica_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  partition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void replicasList(const QString &partition_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceDescriptionsGet(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_description_template OAIServiceDescriptionTemplate [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceFromTemplatesCreate(const QString &application_name, const QString &api_version, const OAIServiceDescriptionTemplate &service_description_template, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupDescriptionsGet(const QString &application_name, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_description_template OAIServiceDescriptionTemplate [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupFromTemplatesCreate(const QString &application_name, const QString &api_version, const OAIServiceDescriptionTemplate &service_description_template, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupMembersGet(const QString &application_name, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_service_group_description OAICreateServiceGroupDescription [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupsCreate(const QString &application_name, const QString &api_version, const OAICreateServiceGroupDescription &create_service_group_description, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupsRemove(const QString &application_name, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_service_group_description OAIUpdateServiceGroupDescription [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceGroupsUpdate(const QString &application_name, const QString &service_name, const QString &api_version, const OAIUpdateServiceGroupDescription &update_service_group_description, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceHealthsGet(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_health_report OAIServiceHealthReport [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceHealthsSend(const QString &service_name, const QString &api_version, const OAIServiceHealthReport &service_health_report, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_type_name QString [required]
    * @param[in]  application_type_version QString [required]
    * @param[in]  service_manifest_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceManifestsGet(const QString &application_type_name, const QString &application_type_version, const QString &service_manifest_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_type_name QString [required]
    * @param[in]  application_type_version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void serviceTypesGet(const QString &application_type_name, const QString &application_type_version, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_service_description OAICreateServiceDescription [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesCreate(const QString &application_name, const QString &api_version, const OAICreateServiceDescription &create_service_description, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesGet(const QString &application_name, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesList(const QString &application_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesRemove(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  partition_key_type qint32 [optional]
    * @param[in]  partition_key_value QString [optional]
    * @param[in]  previous_rsp_version QString [optional]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesResolve(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &partition_key_type = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition_key_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous_rsp_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_service_description OAIUpdateServiceDescription [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void servicesUpdate(const QString &service_name, const QString &api_version, const OAIUpdateServiceDescription &update_service_description, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    */
    virtual void upgradeProgressesGet(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationHealthsGetCallback(OAIHttpRequestWorker *worker);
    void applicationHealthsSendCallback(OAIHttpRequestWorker *worker);
    void applicationManifestsGetCallback(OAIHttpRequestWorker *worker);
    void applicationTypesGetCallback(OAIHttpRequestWorker *worker);
    void applicationTypesListCallback(OAIHttpRequestWorker *worker);
    void applicationTypesRegisterCallback(OAIHttpRequestWorker *worker);
    void applicationTypesUnregisterCallback(OAIHttpRequestWorker *worker);
    void applicationUpgradeRollbacksStartCallback(OAIHttpRequestWorker *worker);
    void applicationUpgradesGetCallback(OAIHttpRequestWorker *worker);
    void applicationUpgradesResumeCallback(OAIHttpRequestWorker *worker);
    void applicationUpgradesStartCallback(OAIHttpRequestWorker *worker);
    void applicationUpgradesUpdateCallback(OAIHttpRequestWorker *worker);
    void applicationsCreateCallback(OAIHttpRequestWorker *worker);
    void applicationsGetCallback(OAIHttpRequestWorker *worker);
    void applicationsListCallback(OAIHttpRequestWorker *worker);
    void applicationsRemoveCallback(OAIHttpRequestWorker *worker);
    void clusterHealthsGetCallback(OAIHttpRequestWorker *worker);
    void clusterHealthsSendCallback(OAIHttpRequestWorker *worker);
    void clusterLoadInformationsGetCallback(OAIHttpRequestWorker *worker);
    void clusterManifestsGetCallback(OAIHttpRequestWorker *worker);
    void clusterPackagesRegisterCallback(OAIHttpRequestWorker *worker);
    void clusterPackagesUnregisterCallback(OAIHttpRequestWorker *worker);
    void clusterUpgradesResumeCallback(OAIHttpRequestWorker *worker);
    void clusterUpgradesRollbackCallback(OAIHttpRequestWorker *worker);
    void clusterUpgradesStartCallback(OAIHttpRequestWorker *worker);
    void clusterUpgradesUpdateCallback(OAIHttpRequestWorker *worker);
    void deployedApplicationHealthsGetCallback(OAIHttpRequestWorker *worker);
    void deployedApplicationHealthsSendCallback(OAIHttpRequestWorker *worker);
    void deployedApplicationsGetCallback(OAIHttpRequestWorker *worker);
    void deployedApplicationsListCallback(OAIHttpRequestWorker *worker);
    void deployedCodePackagesGetCallback(OAIHttpRequestWorker *worker);
    void deployedReplicaDetailsGetCallback(OAIHttpRequestWorker *worker);
    void deployedReplicasGetCallback(OAIHttpRequestWorker *worker);
    void deployedServicePackageHealthsGetCallback(OAIHttpRequestWorker *worker);
    void deployedServicePackageHealthsSendCallback(OAIHttpRequestWorker *worker);
    void deployedServicePackagesGetCallback(OAIHttpRequestWorker *worker);
    void deployedServiceTypesGetCallback(OAIHttpRequestWorker *worker);
    void nodeHealthsGetCallback(OAIHttpRequestWorker *worker);
    void nodeHealthsSendCallback(OAIHttpRequestWorker *worker);
    void nodeLoadInformationsGetCallback(OAIHttpRequestWorker *worker);
    void nodeStatesRemoveCallback(OAIHttpRequestWorker *worker);
    void nodesDisableCallback(OAIHttpRequestWorker *worker);
    void nodesEnableCallback(OAIHttpRequestWorker *worker);
    void nodesGetCallback(OAIHttpRequestWorker *worker);
    void nodesListCallback(OAIHttpRequestWorker *worker);
    void partitionHealthsGetCallback(OAIHttpRequestWorker *worker);
    void partitionHealthsSendCallback(OAIHttpRequestWorker *worker);
    void partitionListsRepairCallback(OAIHttpRequestWorker *worker);
    void partitionLoadInformationsGetCallback(OAIHttpRequestWorker *worker);
    void partitionLoadsResetCallback(OAIHttpRequestWorker *worker);
    void partitionsGetCallback(OAIHttpRequestWorker *worker);
    void partitionsListCallback(OAIHttpRequestWorker *worker);
    void partitionsRepairCallback(OAIHttpRequestWorker *worker);
    void replicaHealthsGetCallback(OAIHttpRequestWorker *worker);
    void replicaHealthsSendCallback(OAIHttpRequestWorker *worker);
    void replicaLoadInformationsGetCallback(OAIHttpRequestWorker *worker);
    void replicasGetCallback(OAIHttpRequestWorker *worker);
    void replicasListCallback(OAIHttpRequestWorker *worker);
    void serviceDescriptionsGetCallback(OAIHttpRequestWorker *worker);
    void serviceFromTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void serviceGroupDescriptionsGetCallback(OAIHttpRequestWorker *worker);
    void serviceGroupFromTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void serviceGroupMembersGetCallback(OAIHttpRequestWorker *worker);
    void serviceGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void serviceGroupsRemoveCallback(OAIHttpRequestWorker *worker);
    void serviceGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceHealthsGetCallback(OAIHttpRequestWorker *worker);
    void serviceHealthsSendCallback(OAIHttpRequestWorker *worker);
    void serviceManifestsGetCallback(OAIHttpRequestWorker *worker);
    void serviceTypesGetCallback(OAIHttpRequestWorker *worker);
    void servicesCreateCallback(OAIHttpRequestWorker *worker);
    void servicesGetCallback(OAIHttpRequestWorker *worker);
    void servicesListCallback(OAIHttpRequestWorker *worker);
    void servicesRemoveCallback(OAIHttpRequestWorker *worker);
    void servicesResolveCallback(OAIHttpRequestWorker *worker);
    void servicesUpdateCallback(OAIHttpRequestWorker *worker);
    void upgradeProgressesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationHealthsGetSignal(OAIApplicationHealth summary);
    void applicationHealthsSendSignal(QString summary);
    void applicationManifestsGetSignal(OAIApplicationManifest summary);
    void applicationTypesGetSignal(QList<OAIApplicationType> summary);
    void applicationTypesListSignal(QList<OAIApplicationType> summary);
    void applicationTypesRegisterSignal(QString summary);
    void applicationTypesUnregisterSignal(QString summary);
    void applicationUpgradeRollbacksStartSignal(QString summary);
    void applicationUpgradesGetSignal(OAIApplicationUpgrade summary);
    void applicationUpgradesResumeSignal(QString summary);
    void applicationUpgradesStartSignal(QString summary);
    void applicationUpgradesUpdateSignal(QString summary);
    void applicationsCreateSignal(QString summary);
    void applicationsGetSignal(OAIApplication summary);
    void applicationsListSignal(OAIApplicationList summary);
    void applicationsRemoveSignal(QString summary);
    void clusterHealthsGetSignal(OAIClusterHealth summary);
    void clusterHealthsSendSignal(QString summary);
    void clusterLoadInformationsGetSignal(OAIClusterLoadInformation summary);
    void clusterManifestsGetSignal(QString summary);
    void clusterPackagesRegisterSignal(QString summary);
    void clusterPackagesUnregisterSignal(QString summary);
    void clusterUpgradesResumeSignal(QString summary);
    void clusterUpgradesRollbackSignal(QString summary);
    void clusterUpgradesStartSignal(QString summary);
    void clusterUpgradesUpdateSignal(QString summary);
    void deployedApplicationHealthsGetSignal(OAIDeployedApplicationHealth summary);
    void deployedApplicationHealthsSendSignal(QString summary);
    void deployedApplicationsGetSignal(OAIDeployedApplication summary);
    void deployedApplicationsListSignal(QList<OAIDeployedApplication> summary);
    void deployedCodePackagesGetSignal(QList<OAIDeployedCodePackage> summary);
    void deployedReplicaDetailsGetSignal(OAIDeployedReplicaDetail summary);
    void deployedReplicasGetSignal(QList<OAIDeployedReplica> summary);
    void deployedServicePackageHealthsGetSignal(OAIDeployedServicePackageHealth summary);
    void deployedServicePackageHealthsSendSignal(QString summary);
    void deployedServicePackagesGetSignal(QList<OAIDeployedServicePackage> summary);
    void deployedServiceTypesGetSignal(QList<OAIDeployedServiceType> summary);
    void nodeHealthsGetSignal(OAINodeHealth summary);
    void nodeHealthsSendSignal(QString summary);
    void nodeLoadInformationsGetSignal(OAINodeLoadInformation summary);
    void nodeStatesRemoveSignal(QString summary);
    void nodesDisableSignal(QString summary);
    void nodesEnableSignal(QString summary);
    void nodesGetSignal(OAINode summary);
    void nodesListSignal(OAINodeList summary);
    void partitionHealthsGetSignal(OAIPartitionHealth summary);
    void partitionHealthsSendSignal(QString summary);
    void partitionListsRepairSignal(QString summary);
    void partitionLoadInformationsGetSignal(OAIPartitionLoadInformation summary);
    void partitionLoadsResetSignal(QString summary);
    void partitionsGetSignal(OAIPartition summary);
    void partitionsListSignal(OAIPartitionList summary);
    void partitionsRepairSignal(QString summary);
    void replicaHealthsGetSignal(OAIReplicaHealth summary);
    void replicaHealthsSendSignal(QString summary);
    void replicaLoadInformationsGetSignal(OAIReplicaLoadInformation summary);
    void replicasGetSignal(OAIReplica summary);
    void replicasListSignal(OAIReplicaList summary);
    void serviceDescriptionsGetSignal(OAIServiceDescription summary);
    void serviceFromTemplatesCreateSignal(QString summary);
    void serviceGroupDescriptionsGetSignal(OAIServiceGroupDescription summary);
    void serviceGroupFromTemplatesCreateSignal(QString summary);
    void serviceGroupMembersGetSignal(OAIServiceGroupMember summary);
    void serviceGroupsCreateSignal(QString summary);
    void serviceGroupsRemoveSignal(QString summary);
    void serviceGroupsUpdateSignal(QString summary);
    void serviceHealthsGetSignal(OAIServiceHealth summary);
    void serviceHealthsSendSignal(QString summary);
    void serviceManifestsGetSignal(OAIServiceManifest summary);
    void serviceTypesGetSignal(QList<OAIServiceType> summary);
    void servicesCreateSignal(QString summary);
    void servicesGetSignal(OAIService summary);
    void servicesListSignal(OAIServiceList summary);
    void servicesRemoveSignal(QString summary);
    void servicesResolveSignal(OAIResolvedServicePartition summary);
    void servicesUpdateSignal(QString summary);
    void upgradeProgressesGetSignal(OAIClusterUpgradeProgress summary);


    void applicationHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationHealth summary);
    void applicationHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationManifestsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationManifest summary);
    void applicationTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationType> summary);
    void applicationTypesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationType> summary);
    void applicationTypesRegisterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationTypesUnregisterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationUpgradeRollbacksStartSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationUpgradesGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationUpgrade summary);
    void applicationUpgradesResumeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationUpgradesStartSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationUpgradesUpdateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationsCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void applicationsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void applicationsListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationList summary);
    void applicationsRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIClusterHealth summary);
    void clusterHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterLoadInformationsGetSignalFull(OAIHttpRequestWorker *worker, OAIClusterLoadInformation summary);
    void clusterManifestsGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterPackagesRegisterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterPackagesUnregisterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterUpgradesResumeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterUpgradesRollbackSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterUpgradesStartSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void clusterUpgradesUpdateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deployedApplicationHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeployedApplicationHealth summary);
    void deployedApplicationHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deployedApplicationsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeployedApplication summary);
    void deployedApplicationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedApplication> summary);
    void deployedCodePackagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedCodePackage> summary);
    void deployedReplicaDetailsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeployedReplicaDetail summary);
    void deployedReplicasGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedReplica> summary);
    void deployedServicePackageHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeployedServicePackageHealth summary);
    void deployedServicePackageHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void deployedServicePackagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedServicePackage> summary);
    void deployedServiceTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployedServiceType> summary);
    void nodeHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAINodeHealth summary);
    void nodeHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void nodeLoadInformationsGetSignalFull(OAIHttpRequestWorker *worker, OAINodeLoadInformation summary);
    void nodeStatesRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void nodesDisableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void nodesEnableSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void nodesGetSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void nodesListSignalFull(OAIHttpRequestWorker *worker, OAINodeList summary);
    void partitionHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIPartitionHealth summary);
    void partitionHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void partitionListsRepairSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void partitionLoadInformationsGetSignalFull(OAIHttpRequestWorker *worker, OAIPartitionLoadInformation summary);
    void partitionLoadsResetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void partitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPartition summary);
    void partitionsListSignalFull(OAIHttpRequestWorker *worker, OAIPartitionList summary);
    void partitionsRepairSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void replicaHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIReplicaHealth summary);
    void replicaHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void replicaLoadInformationsGetSignalFull(OAIHttpRequestWorker *worker, OAIReplicaLoadInformation summary);
    void replicasGetSignalFull(OAIHttpRequestWorker *worker, OAIReplica summary);
    void replicasListSignalFull(OAIHttpRequestWorker *worker, OAIReplicaList summary);
    void serviceDescriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceDescription summary);
    void serviceFromTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceGroupDescriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceGroupDescription summary);
    void serviceGroupFromTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceGroupMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceGroupMember summary);
    void serviceGroupsCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceGroupsRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceHealthsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceHealth summary);
    void serviceHealthsSendSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void serviceManifestsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceManifest summary);
    void serviceTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIServiceType> summary);
    void servicesCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void servicesGetSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void servicesListSignalFull(OAIHttpRequestWorker *worker, OAIServiceList summary);
    void servicesRemoveSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void servicesResolveSignalFull(OAIHttpRequestWorker *worker, OAIResolvedServicePartition summary);
    void servicesUpdateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void upgradeProgressesGetSignalFull(OAIHttpRequestWorker *worker, OAIClusterUpgradeProgress summary);

    Q_DECL_DEPRECATED_X("Use applicationHealthsGetSignalError() instead")
    void applicationHealthsGetSignalE(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationHealthsGetSignalError(OAIApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationHealthsSendSignalError() instead")
    void applicationHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationManifestsGetSignalError() instead")
    void applicationManifestsGetSignalE(OAIApplicationManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationManifestsGetSignalError(OAIApplicationManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesGetSignalError() instead")
    void applicationTypesGetSignalE(QList<OAIApplicationType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesGetSignalError(QList<OAIApplicationType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesListSignalError() instead")
    void applicationTypesListSignalE(QList<OAIApplicationType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesListSignalError(QList<OAIApplicationType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesRegisterSignalError() instead")
    void applicationTypesRegisterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesRegisterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesUnregisterSignalError() instead")
    void applicationTypesUnregisterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesUnregisterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradeRollbacksStartSignalError() instead")
    void applicationUpgradeRollbacksStartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradeRollbacksStartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesGetSignalError() instead")
    void applicationUpgradesGetSignalE(OAIApplicationUpgrade summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesGetSignalError(OAIApplicationUpgrade summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesResumeSignalError() instead")
    void applicationUpgradesResumeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesResumeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesStartSignalError() instead")
    void applicationUpgradesStartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesStartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesUpdateSignalError() instead")
    void applicationUpgradesUpdateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesUpdateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsCreateSignalError() instead")
    void applicationsCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsGetSignalError() instead")
    void applicationsGetSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsGetSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsListSignalError() instead")
    void applicationsListSignalE(OAIApplicationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsListSignalError(OAIApplicationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsRemoveSignalError() instead")
    void applicationsRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterHealthsGetSignalError() instead")
    void clusterHealthsGetSignalE(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterHealthsGetSignalError(OAIClusterHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterHealthsSendSignalError() instead")
    void clusterHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterLoadInformationsGetSignalError() instead")
    void clusterLoadInformationsGetSignalE(OAIClusterLoadInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterLoadInformationsGetSignalError(OAIClusterLoadInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterManifestsGetSignalError() instead")
    void clusterManifestsGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterManifestsGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPackagesRegisterSignalError() instead")
    void clusterPackagesRegisterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPackagesRegisterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPackagesUnregisterSignalError() instead")
    void clusterPackagesUnregisterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPackagesUnregisterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesResumeSignalError() instead")
    void clusterUpgradesResumeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesResumeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesRollbackSignalError() instead")
    void clusterUpgradesRollbackSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesRollbackSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesStartSignalError() instead")
    void clusterUpgradesStartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesStartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesUpdateSignalError() instead")
    void clusterUpgradesUpdateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesUpdateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationHealthsGetSignalError() instead")
    void deployedApplicationHealthsGetSignalE(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationHealthsGetSignalError(OAIDeployedApplicationHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationHealthsSendSignalError() instead")
    void deployedApplicationHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationsGetSignalError() instead")
    void deployedApplicationsGetSignalE(OAIDeployedApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationsGetSignalError(OAIDeployedApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationsListSignalError() instead")
    void deployedApplicationsListSignalE(QList<OAIDeployedApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationsListSignalError(QList<OAIDeployedApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedCodePackagesGetSignalError() instead")
    void deployedCodePackagesGetSignalE(QList<OAIDeployedCodePackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedCodePackagesGetSignalError(QList<OAIDeployedCodePackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedReplicaDetailsGetSignalError() instead")
    void deployedReplicaDetailsGetSignalE(OAIDeployedReplicaDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedReplicaDetailsGetSignalError(OAIDeployedReplicaDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedReplicasGetSignalError() instead")
    void deployedReplicasGetSignalE(QList<OAIDeployedReplica> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedReplicasGetSignalError(QList<OAIDeployedReplica> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackageHealthsGetSignalError() instead")
    void deployedServicePackageHealthsGetSignalE(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackageHealthsGetSignalError(OAIDeployedServicePackageHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackageHealthsSendSignalError() instead")
    void deployedServicePackageHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackageHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackagesGetSignalError() instead")
    void deployedServicePackagesGetSignalE(QList<OAIDeployedServicePackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackagesGetSignalError(QList<OAIDeployedServicePackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServiceTypesGetSignalError() instead")
    void deployedServiceTypesGetSignalE(QList<OAIDeployedServiceType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServiceTypesGetSignalError(QList<OAIDeployedServiceType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeHealthsGetSignalError() instead")
    void nodeHealthsGetSignalE(OAINodeHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeHealthsGetSignalError(OAINodeHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeHealthsSendSignalError() instead")
    void nodeHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeLoadInformationsGetSignalError() instead")
    void nodeLoadInformationsGetSignalE(OAINodeLoadInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeLoadInformationsGetSignalError(OAINodeLoadInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeStatesRemoveSignalError() instead")
    void nodeStatesRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeStatesRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDisableSignalError() instead")
    void nodesDisableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDisableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesEnableSignalError() instead")
    void nodesEnableSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesEnableSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesGetSignalError() instead")
    void nodesGetSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesGetSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesListSignalError() instead")
    void nodesListSignalE(OAINodeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesListSignalError(OAINodeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionHealthsGetSignalError() instead")
    void partitionHealthsGetSignalE(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionHealthsGetSignalError(OAIPartitionHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionHealthsSendSignalError() instead")
    void partitionHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionListsRepairSignalError() instead")
    void partitionListsRepairSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionListsRepairSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionLoadInformationsGetSignalError() instead")
    void partitionLoadInformationsGetSignalE(OAIPartitionLoadInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionLoadInformationsGetSignalError(OAIPartitionLoadInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionLoadsResetSignalError() instead")
    void partitionLoadsResetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionLoadsResetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsGetSignalError() instead")
    void partitionsGetSignalE(OAIPartition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsGetSignalError(OAIPartition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsListSignalError() instead")
    void partitionsListSignalE(OAIPartitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsListSignalError(OAIPartitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsRepairSignalError() instead")
    void partitionsRepairSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsRepairSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaHealthsGetSignalError() instead")
    void replicaHealthsGetSignalE(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaHealthsGetSignalError(OAIReplicaHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaHealthsSendSignalError() instead")
    void replicaHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaLoadInformationsGetSignalError() instead")
    void replicaLoadInformationsGetSignalE(OAIReplicaLoadInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaLoadInformationsGetSignalError(OAIReplicaLoadInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicasGetSignalError() instead")
    void replicasGetSignalE(OAIReplica summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicasGetSignalError(OAIReplica summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicasListSignalError() instead")
    void replicasListSignalE(OAIReplicaList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicasListSignalError(OAIReplicaList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceDescriptionsGetSignalError() instead")
    void serviceDescriptionsGetSignalE(OAIServiceDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceDescriptionsGetSignalError(OAIServiceDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFromTemplatesCreateSignalError() instead")
    void serviceFromTemplatesCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFromTemplatesCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupDescriptionsGetSignalError() instead")
    void serviceGroupDescriptionsGetSignalE(OAIServiceGroupDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupDescriptionsGetSignalError(OAIServiceGroupDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupFromTemplatesCreateSignalError() instead")
    void serviceGroupFromTemplatesCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupFromTemplatesCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupMembersGetSignalError() instead")
    void serviceGroupMembersGetSignalE(OAIServiceGroupMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupMembersGetSignalError(OAIServiceGroupMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsCreateSignalError() instead")
    void serviceGroupsCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsRemoveSignalError() instead")
    void serviceGroupsRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsUpdateSignalError() instead")
    void serviceGroupsUpdateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsUpdateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceHealthsGetSignalError() instead")
    void serviceHealthsGetSignalE(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceHealthsGetSignalError(OAIServiceHealth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceHealthsSendSignalError() instead")
    void serviceHealthsSendSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceHealthsSendSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceManifestsGetSignalError() instead")
    void serviceManifestsGetSignalE(OAIServiceManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceManifestsGetSignalError(OAIServiceManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTypesGetSignalError() instead")
    void serviceTypesGetSignalE(QList<OAIServiceType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTypesGetSignalError(QList<OAIServiceType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateSignalError() instead")
    void servicesCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalError() instead")
    void servicesGetSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalError() instead")
    void servicesListSignalE(OAIServiceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalError(OAIServiceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesRemoveSignalError() instead")
    void servicesRemoveSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesRemoveSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesResolveSignalError() instead")
    void servicesResolveSignalE(OAIResolvedServicePartition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesResolveSignalError(OAIResolvedServicePartition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalError() instead")
    void servicesUpdateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradeProgressesGetSignalError() instead")
    void upgradeProgressesGetSignalE(OAIClusterUpgradeProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upgradeProgressesGetSignalError(OAIClusterUpgradeProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationHealthsGetSignalErrorFull() instead")
    void applicationHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationHealthsSendSignalErrorFull() instead")
    void applicationHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationManifestsGetSignalErrorFull() instead")
    void applicationManifestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationManifestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesGetSignalErrorFull() instead")
    void applicationTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesListSignalErrorFull() instead")
    void applicationTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesRegisterSignalErrorFull() instead")
    void applicationTypesRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypesUnregisterSignalErrorFull() instead")
    void applicationTypesUnregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypesUnregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradeRollbacksStartSignalErrorFull() instead")
    void applicationUpgradeRollbacksStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradeRollbacksStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesGetSignalErrorFull() instead")
    void applicationUpgradesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesResumeSignalErrorFull() instead")
    void applicationUpgradesResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesStartSignalErrorFull() instead")
    void applicationUpgradesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationUpgradesUpdateSignalErrorFull() instead")
    void applicationUpgradesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationUpgradesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsCreateSignalErrorFull() instead")
    void applicationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsGetSignalErrorFull() instead")
    void applicationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsListSignalErrorFull() instead")
    void applicationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationsRemoveSignalErrorFull() instead")
    void applicationsRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationsRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterHealthsGetSignalErrorFull() instead")
    void clusterHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterHealthsSendSignalErrorFull() instead")
    void clusterHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterLoadInformationsGetSignalErrorFull() instead")
    void clusterLoadInformationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterLoadInformationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterManifestsGetSignalErrorFull() instead")
    void clusterManifestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterManifestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPackagesRegisterSignalErrorFull() instead")
    void clusterPackagesRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPackagesRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPackagesUnregisterSignalErrorFull() instead")
    void clusterPackagesUnregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPackagesUnregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesResumeSignalErrorFull() instead")
    void clusterUpgradesResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesRollbackSignalErrorFull() instead")
    void clusterUpgradesRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesStartSignalErrorFull() instead")
    void clusterUpgradesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterUpgradesUpdateSignalErrorFull() instead")
    void clusterUpgradesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterUpgradesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationHealthsGetSignalErrorFull() instead")
    void deployedApplicationHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationHealthsSendSignalErrorFull() instead")
    void deployedApplicationHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationsGetSignalErrorFull() instead")
    void deployedApplicationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedApplicationsListSignalErrorFull() instead")
    void deployedApplicationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedApplicationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedCodePackagesGetSignalErrorFull() instead")
    void deployedCodePackagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedCodePackagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedReplicaDetailsGetSignalErrorFull() instead")
    void deployedReplicaDetailsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedReplicaDetailsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedReplicasGetSignalErrorFull() instead")
    void deployedReplicasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedReplicasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackageHealthsGetSignalErrorFull() instead")
    void deployedServicePackageHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackageHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackageHealthsSendSignalErrorFull() instead")
    void deployedServicePackageHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackageHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServicePackagesGetSignalErrorFull() instead")
    void deployedServicePackagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServicePackagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deployedServiceTypesGetSignalErrorFull() instead")
    void deployedServiceTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deployedServiceTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeHealthsGetSignalErrorFull() instead")
    void nodeHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeHealthsSendSignalErrorFull() instead")
    void nodeHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeLoadInformationsGetSignalErrorFull() instead")
    void nodeLoadInformationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeLoadInformationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodeStatesRemoveSignalErrorFull() instead")
    void nodeStatesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodeStatesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesDisableSignalErrorFull() instead")
    void nodesDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesEnableSignalErrorFull() instead")
    void nodesEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesGetSignalErrorFull() instead")
    void nodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nodesListSignalErrorFull() instead")
    void nodesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nodesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionHealthsGetSignalErrorFull() instead")
    void partitionHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionHealthsSendSignalErrorFull() instead")
    void partitionHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionListsRepairSignalErrorFull() instead")
    void partitionListsRepairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionListsRepairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionLoadInformationsGetSignalErrorFull() instead")
    void partitionLoadInformationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionLoadInformationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionLoadsResetSignalErrorFull() instead")
    void partitionLoadsResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionLoadsResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsGetSignalErrorFull() instead")
    void partitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsListSignalErrorFull() instead")
    void partitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partitionsRepairSignalErrorFull() instead")
    void partitionsRepairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partitionsRepairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaHealthsGetSignalErrorFull() instead")
    void replicaHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaHealthsSendSignalErrorFull() instead")
    void replicaHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicaLoadInformationsGetSignalErrorFull() instead")
    void replicaLoadInformationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicaLoadInformationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicasGetSignalErrorFull() instead")
    void replicasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicasListSignalErrorFull() instead")
    void replicasListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicasListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceDescriptionsGetSignalErrorFull() instead")
    void serviceDescriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceDescriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceFromTemplatesCreateSignalErrorFull() instead")
    void serviceFromTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceFromTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupDescriptionsGetSignalErrorFull() instead")
    void serviceGroupDescriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupDescriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupFromTemplatesCreateSignalErrorFull() instead")
    void serviceGroupFromTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupFromTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupMembersGetSignalErrorFull() instead")
    void serviceGroupMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsCreateSignalErrorFull() instead")
    void serviceGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsRemoveSignalErrorFull() instead")
    void serviceGroupsRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceGroupsUpdateSignalErrorFull() instead")
    void serviceGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceHealthsGetSignalErrorFull() instead")
    void serviceHealthsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceHealthsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceHealthsSendSignalErrorFull() instead")
    void serviceHealthsSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceHealthsSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceManifestsGetSignalErrorFull() instead")
    void serviceManifestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceManifestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceTypesGetSignalErrorFull() instead")
    void serviceTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateSignalErrorFull() instead")
    void servicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalErrorFull() instead")
    void servicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalErrorFull() instead")
    void servicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesRemoveSignalErrorFull() instead")
    void servicesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesResolveSignalErrorFull() instead")
    void servicesResolveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesResolveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalErrorFull() instead")
    void servicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradeProgressesGetSignalErrorFull() instead")
    void upgradeProgressesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upgradeProgressesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
