/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatelessServiceGroupDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatelessServiceGroupDescription::OAIStatelessServiceGroupDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatelessServiceGroupDescription::OAIStatelessServiceGroupDescription() {
    this->initializeModel();
}

OAIStatelessServiceGroupDescription::~OAIStatelessServiceGroupDescription() {}

void OAIStatelessServiceGroupDescription::initializeModel() {

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_correlation_scheme_isSet = false;
    m_correlation_scheme_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_partition_description_isSet = false;
    m_partition_description_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_service_group_member_description_isSet = false;
    m_service_group_member_description_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_load_metrics_isSet = false;
    m_service_load_metrics_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;
}

void OAIStatelessServiceGroupDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatelessServiceGroupDescription::fromJsonObject(QJsonObject json) {

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_correlation_scheme_isValid = ::OpenAPI::fromJsonValue(m_correlation_scheme, json[QString("CorrelationScheme")]);
    m_correlation_scheme_isSet = !json[QString("CorrelationScheme")].isNull() && m_correlation_scheme_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_partition_description_isValid = ::OpenAPI::fromJsonValue(m_partition_description, json[QString("PartitionDescription")]);
    m_partition_description_isSet = !json[QString("PartitionDescription")].isNull() && m_partition_description_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_service_group_member_description_isValid = ::OpenAPI::fromJsonValue(m_service_group_member_description, json[QString("ServiceGroupMemberDescription")]);
    m_service_group_member_description_isSet = !json[QString("ServiceGroupMemberDescription")].isNull() && m_service_group_member_description_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_load_metrics_isValid = ::OpenAPI::fromJsonValue(m_service_load_metrics, json[QString("ServiceLoadMetrics")]);
    m_service_load_metrics_isSet = !json[QString("ServiceLoadMetrics")].isNull() && m_service_load_metrics_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("ServicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("ServicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;
}

QString OAIStatelessServiceGroupDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatelessServiceGroupDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_correlation_scheme.isSet()) {
        obj.insert(QString("CorrelationScheme"), ::OpenAPI::toJsonValue(m_correlation_scheme));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_partition_description.isSet()) {
        obj.insert(QString("PartitionDescription"), ::OpenAPI::toJsonValue(m_partition_description));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_service_group_member_description.size() > 0) {
        obj.insert(QString("ServiceGroupMemberDescription"), ::OpenAPI::toJsonValue(m_service_group_member_description));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_load_metrics.isSet()) {
        obj.insert(QString("ServiceLoadMetrics"), ::OpenAPI::toJsonValue(m_service_load_metrics));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_placement_policies.isSet()) {
        obj.insert(QString("ServicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    return obj;
}

qint32 OAIStatelessServiceGroupDescription::getInstanceCount() const {
    return m_instance_count;
}
void OAIStatelessServiceGroupDescription::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIStatelessServiceGroupDescription::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

QString OAIStatelessServiceGroupDescription::getApplicationName() const {
    return m_application_name;
}
void OAIStatelessServiceGroupDescription::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIStatelessServiceGroupDescription::is_application_name_Valid() const{
    return m_application_name_isValid;
}

OAIServiceCorrelationDescription OAIStatelessServiceGroupDescription::getCorrelationScheme() const {
    return m_correlation_scheme;
}
void OAIStatelessServiceGroupDescription::setCorrelationScheme(const OAIServiceCorrelationDescription &correlation_scheme) {
    m_correlation_scheme = correlation_scheme;
    m_correlation_scheme_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_correlation_scheme_Set() const{
    return m_correlation_scheme_isSet;
}

bool OAIStatelessServiceGroupDescription::is_correlation_scheme_Valid() const{
    return m_correlation_scheme_isValid;
}

qint32 OAIStatelessServiceGroupDescription::getFlags() const {
    return m_flags;
}
void OAIStatelessServiceGroupDescription::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIStatelessServiceGroupDescription::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIPartitionDescription OAIStatelessServiceGroupDescription::getPartitionDescription() const {
    return m_partition_description;
}
void OAIStatelessServiceGroupDescription::setPartitionDescription(const OAIPartitionDescription &partition_description) {
    m_partition_description = partition_description;
    m_partition_description_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_partition_description_Set() const{
    return m_partition_description_isSet;
}

bool OAIStatelessServiceGroupDescription::is_partition_description_Valid() const{
    return m_partition_description_isValid;
}

QString OAIStatelessServiceGroupDescription::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIStatelessServiceGroupDescription::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIStatelessServiceGroupDescription::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIServiceGroupMemberDescription> OAIStatelessServiceGroupDescription::getServiceGroupMemberDescription() const {
    return m_service_group_member_description;
}
void OAIStatelessServiceGroupDescription::setServiceGroupMemberDescription(const QList<OAIServiceGroupMemberDescription> &service_group_member_description) {
    m_service_group_member_description = service_group_member_description;
    m_service_group_member_description_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_group_member_description_Set() const{
    return m_service_group_member_description_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_group_member_description_Valid() const{
    return m_service_group_member_description_isValid;
}

OAIServiceKind OAIStatelessServiceGroupDescription::getServiceKind() const {
    return m_service_kind;
}
void OAIStatelessServiceGroupDescription::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

OAIServiceCorrelationDescription OAIStatelessServiceGroupDescription::getServiceLoadMetrics() const {
    return m_service_load_metrics;
}
void OAIStatelessServiceGroupDescription::setServiceLoadMetrics(const OAIServiceCorrelationDescription &service_load_metrics) {
    m_service_load_metrics = service_load_metrics;
    m_service_load_metrics_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_load_metrics_Set() const{
    return m_service_load_metrics_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_load_metrics_Valid() const{
    return m_service_load_metrics_isValid;
}

QString OAIStatelessServiceGroupDescription::getServiceName() const {
    return m_service_name;
}
void OAIStatelessServiceGroupDescription::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIServiceCorrelationDescription OAIStatelessServiceGroupDescription::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIStatelessServiceGroupDescription::setServicePlacementPolicies(const OAIServiceCorrelationDescription &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

QString OAIStatelessServiceGroupDescription::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIStatelessServiceGroupDescription::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIStatelessServiceGroupDescription::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIStatelessServiceGroupDescription::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

bool OAIStatelessServiceGroupDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_member_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_load_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatelessServiceGroupDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
