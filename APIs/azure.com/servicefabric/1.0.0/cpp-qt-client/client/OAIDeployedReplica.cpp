/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedReplica.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedReplica::OAIDeployedReplica(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedReplica::OAIDeployedReplica() {
    this->initializeModel();
}

OAIDeployedReplica::~OAIDeployedReplica() {}

void OAIDeployedReplica::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_code_package_name_isSet = false;
    m_code_package_name_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_replica_role_isSet = false;
    m_replica_role_isValid = false;

    m_replica_status_isSet = false;
    m_replica_status_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_manifest_name_isSet = false;
    m_service_manifest_name_isValid = false;

    m_service_manifest_version_isSet = false;
    m_service_manifest_version_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;
}

void OAIDeployedReplica::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedReplica::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_code_package_name_isValid = ::OpenAPI::fromJsonValue(m_code_package_name, json[QString("CodePackageName")]);
    m_code_package_name_isSet = !json[QString("CodePackageName")].isNull() && m_code_package_name_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("PartitionId")]);
    m_partition_id_isSet = !json[QString("PartitionId")].isNull() && m_partition_id_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("ReplicaId")]);
    m_replica_id_isSet = !json[QString("ReplicaId")].isNull() && m_replica_id_isValid;

    m_replica_role_isValid = ::OpenAPI::fromJsonValue(m_replica_role, json[QString("ReplicaRole")]);
    m_replica_role_isSet = !json[QString("ReplicaRole")].isNull() && m_replica_role_isValid;

    m_replica_status_isValid = ::OpenAPI::fromJsonValue(m_replica_status, json[QString("ReplicaStatus")]);
    m_replica_status_isSet = !json[QString("ReplicaStatus")].isNull() && m_replica_status_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("ServiceKind")]);
    m_service_kind_isSet = !json[QString("ServiceKind")].isNull() && m_service_kind_isValid;

    m_service_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_name, json[QString("ServiceManifestName")]);
    m_service_manifest_name_isSet = !json[QString("ServiceManifestName")].isNull() && m_service_manifest_name_isValid;

    m_service_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_service_manifest_version, json[QString("ServiceManifestVersion")]);
    m_service_manifest_version_isSet = !json[QString("ServiceManifestVersion")].isNull() && m_service_manifest_version_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("ServiceTypeName")]);
    m_service_type_name_isSet = !json[QString("ServiceTypeName")].isNull() && m_service_type_name_isValid;
}

QString OAIDeployedReplica::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedReplica::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_code_package_name_isSet) {
        obj.insert(QString("CodePackageName"), ::OpenAPI::toJsonValue(m_code_package_name));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("PartitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("ReplicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_replica_role.isSet()) {
        obj.insert(QString("ReplicaRole"), ::OpenAPI::toJsonValue(m_replica_role));
    }
    if (m_replica_status.isSet()) {
        obj.insert(QString("ReplicaStatus"), ::OpenAPI::toJsonValue(m_replica_status));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("ServiceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_manifest_name_isSet) {
        obj.insert(QString("ServiceManifestName"), ::OpenAPI::toJsonValue(m_service_manifest_name));
    }
    if (m_service_manifest_version_isSet) {
        obj.insert(QString("ServiceManifestVersion"), ::OpenAPI::toJsonValue(m_service_manifest_version));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("ServiceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    return obj;
}

QString OAIDeployedReplica::getAddress() const {
    return m_address;
}
void OAIDeployedReplica::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDeployedReplica::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDeployedReplica::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIDeployedReplica::getCodePackageName() const {
    return m_code_package_name;
}
void OAIDeployedReplica::setCodePackageName(const QString &code_package_name) {
    m_code_package_name = code_package_name;
    m_code_package_name_isSet = true;
}

bool OAIDeployedReplica::is_code_package_name_Set() const{
    return m_code_package_name_isSet;
}

bool OAIDeployedReplica::is_code_package_name_Valid() const{
    return m_code_package_name_isValid;
}

QString OAIDeployedReplica::getInstanceId() const {
    return m_instance_id;
}
void OAIDeployedReplica::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDeployedReplica::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDeployedReplica::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIDeployedReplica::getPartitionId() const {
    return m_partition_id;
}
void OAIDeployedReplica::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIDeployedReplica::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIDeployedReplica::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

QString OAIDeployedReplica::getReplicaId() const {
    return m_replica_id;
}
void OAIDeployedReplica::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIDeployedReplica::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIDeployedReplica::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

OAIReplicaRole OAIDeployedReplica::getReplicaRole() const {
    return m_replica_role;
}
void OAIDeployedReplica::setReplicaRole(const OAIReplicaRole &replica_role) {
    m_replica_role = replica_role;
    m_replica_role_isSet = true;
}

bool OAIDeployedReplica::is_replica_role_Set() const{
    return m_replica_role_isSet;
}

bool OAIDeployedReplica::is_replica_role_Valid() const{
    return m_replica_role_isValid;
}

OAIReplicaStatus OAIDeployedReplica::getReplicaStatus() const {
    return m_replica_status;
}
void OAIDeployedReplica::setReplicaStatus(const OAIReplicaStatus &replica_status) {
    m_replica_status = replica_status;
    m_replica_status_isSet = true;
}

bool OAIDeployedReplica::is_replica_status_Set() const{
    return m_replica_status_isSet;
}

bool OAIDeployedReplica::is_replica_status_Valid() const{
    return m_replica_status_isValid;
}

OAIServiceKind OAIDeployedReplica::getServiceKind() const {
    return m_service_kind;
}
void OAIDeployedReplica::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIDeployedReplica::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIDeployedReplica::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QString OAIDeployedReplica::getServiceManifestName() const {
    return m_service_manifest_name;
}
void OAIDeployedReplica::setServiceManifestName(const QString &service_manifest_name) {
    m_service_manifest_name = service_manifest_name;
    m_service_manifest_name_isSet = true;
}

bool OAIDeployedReplica::is_service_manifest_name_Set() const{
    return m_service_manifest_name_isSet;
}

bool OAIDeployedReplica::is_service_manifest_name_Valid() const{
    return m_service_manifest_name_isValid;
}

QString OAIDeployedReplica::getServiceManifestVersion() const {
    return m_service_manifest_version;
}
void OAIDeployedReplica::setServiceManifestVersion(const QString &service_manifest_version) {
    m_service_manifest_version = service_manifest_version;
    m_service_manifest_version_isSet = true;
}

bool OAIDeployedReplica::is_service_manifest_version_Set() const{
    return m_service_manifest_version_isSet;
}

bool OAIDeployedReplica::is_service_manifest_version_Valid() const{
    return m_service_manifest_version_isValid;
}

QString OAIDeployedReplica::getServiceName() const {
    return m_service_name;
}
void OAIDeployedReplica::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDeployedReplica::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDeployedReplica::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIDeployedReplica::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIDeployedReplica::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIDeployedReplica::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIDeployedReplica::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

bool OAIDeployedReplica::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedReplica::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
