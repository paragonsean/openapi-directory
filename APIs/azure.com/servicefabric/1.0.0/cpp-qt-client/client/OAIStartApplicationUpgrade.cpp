/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartApplicationUpgrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartApplicationUpgrade::OAIStartApplicationUpgrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartApplicationUpgrade::OAIStartApplicationUpgrade() {
    this->initializeModel();
}

OAIStartApplicationUpgrade::~OAIStartApplicationUpgrade() {}

void OAIStartApplicationUpgrade::initializeModel() {

    m_application_health_policy_isSet = false;
    m_application_health_policy_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_monitoring_policy_isSet = false;
    m_monitoring_policy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_rolling_upgrade_mode_isSet = false;
    m_rolling_upgrade_mode_isValid = false;

    m_target_application_type_version_isSet = false;
    m_target_application_type_version_isValid = false;

    m_upgrade_kind_isSet = false;
    m_upgrade_kind_isValid = false;

    m_upgrade_replica_set_check_timeout_in_seconds_isSet = false;
    m_upgrade_replica_set_check_timeout_in_seconds_isValid = false;
}

void OAIStartApplicationUpgrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartApplicationUpgrade::fromJsonObject(QJsonObject json) {

    m_application_health_policy_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy, json[QString("ApplicationHealthPolicy")]);
    m_application_health_policy_isSet = !json[QString("ApplicationHealthPolicy")].isNull() && m_application_health_policy_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("ForceRestart")]);
    m_force_restart_isSet = !json[QString("ForceRestart")].isNull() && m_force_restart_isValid;

    m_monitoring_policy_isValid = ::OpenAPI::fromJsonValue(m_monitoring_policy, json[QString("MonitoringPolicy")]);
    m_monitoring_policy_isSet = !json[QString("MonitoringPolicy")].isNull() && m_monitoring_policy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_rolling_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_mode, json[QString("RollingUpgradeMode")]);
    m_rolling_upgrade_mode_isSet = !json[QString("RollingUpgradeMode")].isNull() && m_rolling_upgrade_mode_isValid;

    m_target_application_type_version_isValid = ::OpenAPI::fromJsonValue(m_target_application_type_version, json[QString("TargetApplicationTypeVersion")]);
    m_target_application_type_version_isSet = !json[QString("TargetApplicationTypeVersion")].isNull() && m_target_application_type_version_isValid;

    m_upgrade_kind_isValid = ::OpenAPI::fromJsonValue(m_upgrade_kind, json[QString("UpgradeKind")]);
    m_upgrade_kind_isSet = !json[QString("UpgradeKind")].isNull() && m_upgrade_kind_isValid;

    m_upgrade_replica_set_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout_in_seconds, json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")]);
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = !json[QString("UpgradeReplicaSetCheckTimeoutInSeconds")].isNull() && m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

QString OAIStartApplicationUpgrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartApplicationUpgrade::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy.isSet()) {
        obj.insert(QString("ApplicationHealthPolicy"), ::OpenAPI::toJsonValue(m_application_health_policy));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("ForceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_monitoring_policy.isSet()) {
        obj.insert(QString("MonitoringPolicy"), ::OpenAPI::toJsonValue(m_monitoring_policy));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_rolling_upgrade_mode.isSet()) {
        obj.insert(QString("RollingUpgradeMode"), ::OpenAPI::toJsonValue(m_rolling_upgrade_mode));
    }
    if (m_target_application_type_version_isSet) {
        obj.insert(QString("TargetApplicationTypeVersion"), ::OpenAPI::toJsonValue(m_target_application_type_version));
    }
    if (m_upgrade_kind_isSet) {
        obj.insert(QString("UpgradeKind"), ::OpenAPI::toJsonValue(m_upgrade_kind));
    }
    if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
        obj.insert(QString("UpgradeReplicaSetCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout_in_seconds));
    }
    return obj;
}

OAIApplicationHealthPolicy OAIStartApplicationUpgrade::getApplicationHealthPolicy() const {
    return m_application_health_policy;
}
void OAIStartApplicationUpgrade::setApplicationHealthPolicy(const OAIApplicationHealthPolicy &application_health_policy) {
    m_application_health_policy = application_health_policy;
    m_application_health_policy_isSet = true;
}

bool OAIStartApplicationUpgrade::is_application_health_policy_Set() const{
    return m_application_health_policy_isSet;
}

bool OAIStartApplicationUpgrade::is_application_health_policy_Valid() const{
    return m_application_health_policy_isValid;
}

bool OAIStartApplicationUpgrade::isForceRestart() const {
    return m_force_restart;
}
void OAIStartApplicationUpgrade::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIStartApplicationUpgrade::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIStartApplicationUpgrade::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

OAIMonitoringPolicy OAIStartApplicationUpgrade::getMonitoringPolicy() const {
    return m_monitoring_policy;
}
void OAIStartApplicationUpgrade::setMonitoringPolicy(const OAIMonitoringPolicy &monitoring_policy) {
    m_monitoring_policy = monitoring_policy;
    m_monitoring_policy_isSet = true;
}

bool OAIStartApplicationUpgrade::is_monitoring_policy_Set() const{
    return m_monitoring_policy_isSet;
}

bool OAIStartApplicationUpgrade::is_monitoring_policy_Valid() const{
    return m_monitoring_policy_isValid;
}

QString OAIStartApplicationUpgrade::getName() const {
    return m_name;
}
void OAIStartApplicationUpgrade::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartApplicationUpgrade::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartApplicationUpgrade::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIApplication_Parameters_inner> OAIStartApplicationUpgrade::getParameters() const {
    return m_parameters;
}
void OAIStartApplicationUpgrade::setParameters(const QList<OAIApplication_Parameters_inner> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStartApplicationUpgrade::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStartApplicationUpgrade::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIRollingUpgradeMode OAIStartApplicationUpgrade::getRollingUpgradeMode() const {
    return m_rolling_upgrade_mode;
}
void OAIStartApplicationUpgrade::setRollingUpgradeMode(const OAIRollingUpgradeMode &rolling_upgrade_mode) {
    m_rolling_upgrade_mode = rolling_upgrade_mode;
    m_rolling_upgrade_mode_isSet = true;
}

bool OAIStartApplicationUpgrade::is_rolling_upgrade_mode_Set() const{
    return m_rolling_upgrade_mode_isSet;
}

bool OAIStartApplicationUpgrade::is_rolling_upgrade_mode_Valid() const{
    return m_rolling_upgrade_mode_isValid;
}

QString OAIStartApplicationUpgrade::getTargetApplicationTypeVersion() const {
    return m_target_application_type_version;
}
void OAIStartApplicationUpgrade::setTargetApplicationTypeVersion(const QString &target_application_type_version) {
    m_target_application_type_version = target_application_type_version;
    m_target_application_type_version_isSet = true;
}

bool OAIStartApplicationUpgrade::is_target_application_type_version_Set() const{
    return m_target_application_type_version_isSet;
}

bool OAIStartApplicationUpgrade::is_target_application_type_version_Valid() const{
    return m_target_application_type_version_isValid;
}

QString OAIStartApplicationUpgrade::getUpgradeKind() const {
    return m_upgrade_kind;
}
void OAIStartApplicationUpgrade::setUpgradeKind(const QString &upgrade_kind) {
    m_upgrade_kind = upgrade_kind;
    m_upgrade_kind_isSet = true;
}

bool OAIStartApplicationUpgrade::is_upgrade_kind_Set() const{
    return m_upgrade_kind_isSet;
}

bool OAIStartApplicationUpgrade::is_upgrade_kind_Valid() const{
    return m_upgrade_kind_isValid;
}

qint32 OAIStartApplicationUpgrade::getUpgradeReplicaSetCheckTimeoutInSeconds() const {
    return m_upgrade_replica_set_check_timeout_in_seconds;
}
void OAIStartApplicationUpgrade::setUpgradeReplicaSetCheckTimeoutInSeconds(const qint32 &upgrade_replica_set_check_timeout_in_seconds) {
    m_upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds;
    m_upgrade_replica_set_check_timeout_in_seconds_isSet = true;
}

bool OAIStartApplicationUpgrade::is_upgrade_replica_set_check_timeout_in_seconds_Set() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isSet;
}

bool OAIStartApplicationUpgrade::is_upgrade_replica_set_check_timeout_in_seconds_Valid() const{
    return m_upgrade_replica_set_check_timeout_in_seconds_isValid;
}

bool OAIStartApplicationUpgrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_application_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartApplicationUpgrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
