/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationHealth_DeployedApplicationHealthStates_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationHealth_DeployedApplicationHealthStates_inner::OAIApplicationHealth_DeployedApplicationHealthStates_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationHealth_DeployedApplicationHealthStates_inner::OAIApplicationHealth_DeployedApplicationHealthStates_inner() {
    this->initializeModel();
}

OAIApplicationHealth_DeployedApplicationHealthStates_inner::~OAIApplicationHealth_DeployedApplicationHealthStates_inner() {}

void OAIApplicationHealth_DeployedApplicationHealthStates_inner::initializeModel() {

    m_aggregated_health_state_isSet = false;
    m_aggregated_health_state_isValid = false;

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;
}

void OAIApplicationHealth_DeployedApplicationHealthStates_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationHealth_DeployedApplicationHealthStates_inner::fromJsonObject(QJsonObject json) {

    m_aggregated_health_state_isValid = ::OpenAPI::fromJsonValue(m_aggregated_health_state, json[QString("AggregatedHealthState")]);
    m_aggregated_health_state_isSet = !json[QString("AggregatedHealthState")].isNull() && m_aggregated_health_state_isValid;

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;
}

QString OAIApplicationHealth_DeployedApplicationHealthStates_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationHealth_DeployedApplicationHealthStates_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_health_state.isSet()) {
        obj.insert(QString("AggregatedHealthState"), ::OpenAPI::toJsonValue(m_aggregated_health_state));
    }
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    return obj;
}

OAIHealthState OAIApplicationHealth_DeployedApplicationHealthStates_inner::getAggregatedHealthState() const {
    return m_aggregated_health_state;
}
void OAIApplicationHealth_DeployedApplicationHealthStates_inner::setAggregatedHealthState(const OAIHealthState &aggregated_health_state) {
    m_aggregated_health_state = aggregated_health_state;
    m_aggregated_health_state_isSet = true;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_aggregated_health_state_Set() const{
    return m_aggregated_health_state_isSet;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_aggregated_health_state_Valid() const{
    return m_aggregated_health_state_isValid;
}

QString OAIApplicationHealth_DeployedApplicationHealthStates_inner::getApplicationName() const {
    return m_application_name;
}
void OAIApplicationHealth_DeployedApplicationHealthStates_inner::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIApplicationHealth_DeployedApplicationHealthStates_inner::getNodeName() const {
    return m_node_name;
}
void OAIApplicationHealth_DeployedApplicationHealthStates_inner::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::is_node_name_Valid() const{
    return m_node_name_isValid;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_health_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationHealth_DeployedApplicationHealthStates_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
