# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_persisted_state: bool=None, health_state: HealthState=None, id: str=None, is_service_group: bool=None, manifest_version: str=None, name: str=None, service_kind: ServiceKind=None, service_status: str=None, type_name: str=None):
        """Service - a model defined in OpenAPI

        :param has_persisted_state: The has_persisted_state of this Service.
        :param health_state: The health_state of this Service.
        :param id: The id of this Service.
        :param is_service_group: The is_service_group of this Service.
        :param manifest_version: The manifest_version of this Service.
        :param name: The name of this Service.
        :param service_kind: The service_kind of this Service.
        :param service_status: The service_status of this Service.
        :param type_name: The type_name of this Service.
        """
        self.openapi_types = {
            'has_persisted_state': bool,
            'health_state': HealthState,
            'id': str,
            'is_service_group': bool,
            'manifest_version': str,
            'name': str,
            'service_kind': ServiceKind,
            'service_status': str,
            'type_name': str
        }

        self.attribute_map = {
            'has_persisted_state': 'HasPersistedState',
            'health_state': 'HealthState',
            'id': 'Id',
            'is_service_group': 'IsServiceGroup',
            'manifest_version': 'ManifestVersion',
            'name': 'Name',
            'service_kind': 'ServiceKind',
            'service_status': 'ServiceStatus',
            'type_name': 'TypeName'
        }

        self._has_persisted_state = has_persisted_state
        self._health_state = health_state
        self._id = id
        self._is_service_group = is_service_group
        self._manifest_version = manifest_version
        self._name = name
        self._service_kind = service_kind
        self._service_status = service_status
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_persisted_state(self):
        """Gets the has_persisted_state of this Service.


        :return: The has_persisted_state of this Service.
        :rtype: bool
        """
        return self._has_persisted_state

    @has_persisted_state.setter
    def has_persisted_state(self, has_persisted_state):
        """Sets the has_persisted_state of this Service.


        :param has_persisted_state: The has_persisted_state of this Service.
        :type has_persisted_state: bool
        """

        self._has_persisted_state = has_persisted_state

    @property
    def health_state(self):
        """Gets the health_state of this Service.


        :return: The health_state of this Service.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Service.


        :param health_state: The health_state of this Service.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this Service.


        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.
        :type id: str
        """

        self._id = id

    @property
    def is_service_group(self):
        """Gets the is_service_group of this Service.


        :return: The is_service_group of this Service.
        :rtype: bool
        """
        return self._is_service_group

    @is_service_group.setter
    def is_service_group(self, is_service_group):
        """Sets the is_service_group of this Service.


        :param is_service_group: The is_service_group of this Service.
        :type is_service_group: bool
        """

        self._is_service_group = is_service_group

    @property
    def manifest_version(self):
        """Gets the manifest_version of this Service.


        :return: The manifest_version of this Service.
        :rtype: str
        """
        return self._manifest_version

    @manifest_version.setter
    def manifest_version(self, manifest_version):
        """Sets the manifest_version of this Service.


        :param manifest_version: The manifest_version of this Service.
        :type manifest_version: str
        """

        self._manifest_version = manifest_version

    @property
    def name(self):
        """Gets the name of this Service.


        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def service_kind(self):
        """Gets the service_kind of this Service.


        :return: The service_kind of this Service.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this Service.


        :param service_kind: The service_kind of this Service.
        :type service_kind: ServiceKind
        """

        self._service_kind = service_kind

    @property
    def service_status(self):
        """Gets the service_status of this Service.


        :return: The service_status of this Service.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this Service.


        :param service_status: The service_status of this Service.
        :type service_status: str
        """
        allowed_values = ["Invalid", "Active", "Upgrading", "Deleting", "Creating", "Faile"]  # noqa: E501
        if service_status not in allowed_values:
            raise ValueError(
                "Invalid value for `service_status` ({0}), must be one of {1}"
                .format(service_status, allowed_values)
            )

        self._service_status = service_status

    @property
    def type_name(self):
        """Gets the type_name of this Service.


        :return: The type_name of this Service.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this Service.


        :param type_name: The type_name of this Service.
        :type type_name: str
        """

        self._type_name = type_name
