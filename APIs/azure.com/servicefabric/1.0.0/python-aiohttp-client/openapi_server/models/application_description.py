# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_description_parameter_list_inner import ApplicationDescriptionParameterListInner
from openapi_server import util


class ApplicationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parameter_list: List[ApplicationDescriptionParameterListInner]=None, type_name: str=None, type_version: str=None):
        """ApplicationDescription - a model defined in OpenAPI

        :param name: The name of this ApplicationDescription.
        :param parameter_list: The parameter_list of this ApplicationDescription.
        :param type_name: The type_name of this ApplicationDescription.
        :param type_version: The type_version of this ApplicationDescription.
        """
        self.openapi_types = {
            'name': str,
            'parameter_list': List[ApplicationDescriptionParameterListInner],
            'type_name': str,
            'type_version': str
        }

        self.attribute_map = {
            'name': 'Name',
            'parameter_list': 'ParameterList',
            'type_name': 'TypeName',
            'type_version': 'TypeVersion'
        }

        self._name = name
        self._parameter_list = parameter_list
        self._type_name = type_name
        self._type_version = type_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDescription of this ApplicationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ApplicationDescription.


        :return: The name of this ApplicationDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationDescription.


        :param name: The name of this ApplicationDescription.
        :type name: str
        """

        self._name = name

    @property
    def parameter_list(self):
        """Gets the parameter_list of this ApplicationDescription.


        :return: The parameter_list of this ApplicationDescription.
        :rtype: List[ApplicationDescriptionParameterListInner]
        """
        return self._parameter_list

    @parameter_list.setter
    def parameter_list(self, parameter_list):
        """Sets the parameter_list of this ApplicationDescription.


        :param parameter_list: The parameter_list of this ApplicationDescription.
        :type parameter_list: List[ApplicationDescriptionParameterListInner]
        """

        self._parameter_list = parameter_list

    @property
    def type_name(self):
        """Gets the type_name of this ApplicationDescription.


        :return: The type_name of this ApplicationDescription.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ApplicationDescription.


        :param type_name: The type_name of this ApplicationDescription.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def type_version(self):
        """Gets the type_version of this ApplicationDescription.


        :return: The type_version of this ApplicationDescription.
        :rtype: str
        """
        return self._type_version

    @type_version.setter
    def type_version(self, type_version):
        """Sets the type_version of this ApplicationDescription.


        :param type_version: The type_version of this ApplicationDescription.
        :type type_version: str
        """

        self._type_version = type_version
