# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceLoadMetricDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, primary_default_load: int=None, secondary_default_load: int=None, service_load_metric_weight: str=None):
        """ServiceLoadMetricDescription - a model defined in OpenAPI

        :param name: The name of this ServiceLoadMetricDescription.
        :param primary_default_load: The primary_default_load of this ServiceLoadMetricDescription.
        :param secondary_default_load: The secondary_default_load of this ServiceLoadMetricDescription.
        :param service_load_metric_weight: The service_load_metric_weight of this ServiceLoadMetricDescription.
        """
        self.openapi_types = {
            'name': str,
            'primary_default_load': int,
            'secondary_default_load': int,
            'service_load_metric_weight': str
        }

        self.attribute_map = {
            'name': 'Name',
            'primary_default_load': 'PrimaryDefaultLoad',
            'secondary_default_load': 'SecondaryDefaultLoad',
            'service_load_metric_weight': 'ServiceLoadMetricWeight'
        }

        self._name = name
        self._primary_default_load = primary_default_load
        self._secondary_default_load = secondary_default_load
        self._service_load_metric_weight = service_load_metric_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLoadMetricDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLoadMetricDescription of this ServiceLoadMetricDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ServiceLoadMetricDescription.


        :return: The name of this ServiceLoadMetricDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceLoadMetricDescription.


        :param name: The name of this ServiceLoadMetricDescription.
        :type name: str
        """

        self._name = name

    @property
    def primary_default_load(self):
        """Gets the primary_default_load of this ServiceLoadMetricDescription.


        :return: The primary_default_load of this ServiceLoadMetricDescription.
        :rtype: int
        """
        return self._primary_default_load

    @primary_default_load.setter
    def primary_default_load(self, primary_default_load):
        """Sets the primary_default_load of this ServiceLoadMetricDescription.


        :param primary_default_load: The primary_default_load of this ServiceLoadMetricDescription.
        :type primary_default_load: int
        """

        self._primary_default_load = primary_default_load

    @property
    def secondary_default_load(self):
        """Gets the secondary_default_load of this ServiceLoadMetricDescription.


        :return: The secondary_default_load of this ServiceLoadMetricDescription.
        :rtype: int
        """
        return self._secondary_default_load

    @secondary_default_load.setter
    def secondary_default_load(self, secondary_default_load):
        """Sets the secondary_default_load of this ServiceLoadMetricDescription.


        :param secondary_default_load: The secondary_default_load of this ServiceLoadMetricDescription.
        :type secondary_default_load: int
        """

        self._secondary_default_load = secondary_default_load

    @property
    def service_load_metric_weight(self):
        """Gets the service_load_metric_weight of this ServiceLoadMetricDescription.


        :return: The service_load_metric_weight of this ServiceLoadMetricDescription.
        :rtype: str
        """
        return self._service_load_metric_weight

    @service_load_metric_weight.setter
    def service_load_metric_weight(self, service_load_metric_weight):
        """Sets the service_load_metric_weight of this ServiceLoadMetricDescription.


        :param service_load_metric_weight: The service_load_metric_weight of this ServiceLoadMetricDescription.
        :type service_load_metric_weight: str
        """
        allowed_values = ["Zero", "Low", "Medium", "High"]  # noqa: E501
        if service_load_metric_weight not in allowed_values:
            raise ValueError(
                "Invalid value for `service_load_metric_weight` ({0}), must be one of {1}"
                .format(service_load_metric_weight, allowed_values)
            )

        self._service_load_metric_weight = service_load_metric_weight
