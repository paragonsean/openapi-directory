# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_health_node_health_states_inner_id import ClusterHealthNodeHealthStatesInnerId
from openapi_server.models.health_state import HealthState
from openapi_server.models.node_node_deactivation_info import NodeNodeDeactivationInfo
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_version: str=None, config_version: str=None, fault_domain: str=None, health_state: HealthState=None, id: ClusterHealthNodeHealthStatesInnerId=None, instance_id: str=None, ip_address_or_fqdn: str=None, is_seed_node: bool=None, name: str=None, node_deactivation_info: NodeNodeDeactivationInfo=None, node_status: str=None, node_up_time_in_seconds: str=None, type: str=None, upgrade_domain: str=None):
        """Node - a model defined in OpenAPI

        :param code_version: The code_version of this Node.
        :param config_version: The config_version of this Node.
        :param fault_domain: The fault_domain of this Node.
        :param health_state: The health_state of this Node.
        :param id: The id of this Node.
        :param instance_id: The instance_id of this Node.
        :param ip_address_or_fqdn: The ip_address_or_fqdn of this Node.
        :param is_seed_node: The is_seed_node of this Node.
        :param name: The name of this Node.
        :param node_deactivation_info: The node_deactivation_info of this Node.
        :param node_status: The node_status of this Node.
        :param node_up_time_in_seconds: The node_up_time_in_seconds of this Node.
        :param type: The type of this Node.
        :param upgrade_domain: The upgrade_domain of this Node.
        """
        self.openapi_types = {
            'code_version': str,
            'config_version': str,
            'fault_domain': str,
            'health_state': HealthState,
            'id': ClusterHealthNodeHealthStatesInnerId,
            'instance_id': str,
            'ip_address_or_fqdn': str,
            'is_seed_node': bool,
            'name': str,
            'node_deactivation_info': NodeNodeDeactivationInfo,
            'node_status': str,
            'node_up_time_in_seconds': str,
            'type': str,
            'upgrade_domain': str
        }

        self.attribute_map = {
            'code_version': 'CodeVersion',
            'config_version': 'ConfigVersion',
            'fault_domain': 'FaultDomain',
            'health_state': 'HealthState',
            'id': 'Id',
            'instance_id': 'InstanceId',
            'ip_address_or_fqdn': 'IpAddressOrFQDN',
            'is_seed_node': 'IsSeedNode',
            'name': 'Name',
            'node_deactivation_info': 'NodeDeactivationInfo',
            'node_status': 'NodeStatus',
            'node_up_time_in_seconds': 'NodeUpTimeInSeconds',
            'type': 'Type',
            'upgrade_domain': 'UpgradeDomain'
        }

        self._code_version = code_version
        self._config_version = config_version
        self._fault_domain = fault_domain
        self._health_state = health_state
        self._id = id
        self._instance_id = instance_id
        self._ip_address_or_fqdn = ip_address_or_fqdn
        self._is_seed_node = is_seed_node
        self._name = name
        self._node_deactivation_info = node_deactivation_info
        self._node_status = node_status
        self._node_up_time_in_seconds = node_up_time_in_seconds
        self._type = type
        self._upgrade_domain = upgrade_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_version(self):
        """Gets the code_version of this Node.


        :return: The code_version of this Node.
        :rtype: str
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this Node.


        :param code_version: The code_version of this Node.
        :type code_version: str
        """

        self._code_version = code_version

    @property
    def config_version(self):
        """Gets the config_version of this Node.


        :return: The config_version of this Node.
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this Node.


        :param config_version: The config_version of this Node.
        :type config_version: str
        """

        self._config_version = config_version

    @property
    def fault_domain(self):
        """Gets the fault_domain of this Node.


        :return: The fault_domain of this Node.
        :rtype: str
        """
        return self._fault_domain

    @fault_domain.setter
    def fault_domain(self, fault_domain):
        """Sets the fault_domain of this Node.


        :param fault_domain: The fault_domain of this Node.
        :type fault_domain: str
        """

        self._fault_domain = fault_domain

    @property
    def health_state(self):
        """Gets the health_state of this Node.


        :return: The health_state of this Node.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Node.


        :param health_state: The health_state of this Node.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this Node.


        :return: The id of this Node.
        :rtype: ClusterHealthNodeHealthStatesInnerId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.
        :type id: ClusterHealthNodeHealthStatesInnerId
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this Node.


        :return: The instance_id of this Node.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Node.


        :param instance_id: The instance_id of this Node.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def ip_address_or_fqdn(self):
        """Gets the ip_address_or_fqdn of this Node.


        :return: The ip_address_or_fqdn of this Node.
        :rtype: str
        """
        return self._ip_address_or_fqdn

    @ip_address_or_fqdn.setter
    def ip_address_or_fqdn(self, ip_address_or_fqdn):
        """Sets the ip_address_or_fqdn of this Node.


        :param ip_address_or_fqdn: The ip_address_or_fqdn of this Node.
        :type ip_address_or_fqdn: str
        """

        self._ip_address_or_fqdn = ip_address_or_fqdn

    @property
    def is_seed_node(self):
        """Gets the is_seed_node of this Node.


        :return: The is_seed_node of this Node.
        :rtype: bool
        """
        return self._is_seed_node

    @is_seed_node.setter
    def is_seed_node(self, is_seed_node):
        """Sets the is_seed_node of this Node.


        :param is_seed_node: The is_seed_node of this Node.
        :type is_seed_node: bool
        """

        self._is_seed_node = is_seed_node

    @property
    def name(self):
        """Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def node_deactivation_info(self):
        """Gets the node_deactivation_info of this Node.


        :return: The node_deactivation_info of this Node.
        :rtype: NodeNodeDeactivationInfo
        """
        return self._node_deactivation_info

    @node_deactivation_info.setter
    def node_deactivation_info(self, node_deactivation_info):
        """Sets the node_deactivation_info of this Node.


        :param node_deactivation_info: The node_deactivation_info of this Node.
        :type node_deactivation_info: NodeNodeDeactivationInfo
        """

        self._node_deactivation_info = node_deactivation_info

    @property
    def node_status(self):
        """Gets the node_status of this Node.


        :return: The node_status of this Node.
        :rtype: str
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this Node.


        :param node_status: The node_status of this Node.
        :type node_status: str
        """
        allowed_values = ["Invalid", "Up", "Down", "Enabling", "Disabling", "Disabled", "Unknown", "Removed"]  # noqa: E501
        if node_status not in allowed_values:
            raise ValueError(
                "Invalid value for `node_status` ({0}), must be one of {1}"
                .format(node_status, allowed_values)
            )

        self._node_status = node_status

    @property
    def node_up_time_in_seconds(self):
        """Gets the node_up_time_in_seconds of this Node.


        :return: The node_up_time_in_seconds of this Node.
        :rtype: str
        """
        return self._node_up_time_in_seconds

    @node_up_time_in_seconds.setter
    def node_up_time_in_seconds(self, node_up_time_in_seconds):
        """Sets the node_up_time_in_seconds of this Node.


        :param node_up_time_in_seconds: The node_up_time_in_seconds of this Node.
        :type node_up_time_in_seconds: str
        """

        self._node_up_time_in_seconds = node_up_time_in_seconds

    @property
    def type(self):
        """Gets the type of this Node.


        :return: The type of this Node.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.


        :param type: The type of this Node.
        :type type: str
        """

        self._type = type

    @property
    def upgrade_domain(self):
        """Gets the upgrade_domain of this Node.


        :return: The upgrade_domain of this Node.
        :rtype: str
        """
        return self._upgrade_domain

    @upgrade_domain.setter
    def upgrade_domain(self, upgrade_domain):
        """Sets the upgrade_domain of this Node.


        :param upgrade_domain: The upgrade_domain of this Node.
        :type upgrade_domain: str
        """

        self._upgrade_domain = upgrade_domain
