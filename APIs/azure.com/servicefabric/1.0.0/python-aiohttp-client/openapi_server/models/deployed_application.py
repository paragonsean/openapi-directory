# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeployedApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, log_directory: str=None, name: str=None, status: str=None, temp_directory: str=None, type_name: str=None, work_directory: str=None):
        """DeployedApplication - a model defined in OpenAPI

        :param id: The id of this DeployedApplication.
        :param log_directory: The log_directory of this DeployedApplication.
        :param name: The name of this DeployedApplication.
        :param status: The status of this DeployedApplication.
        :param temp_directory: The temp_directory of this DeployedApplication.
        :param type_name: The type_name of this DeployedApplication.
        :param work_directory: The work_directory of this DeployedApplication.
        """
        self.openapi_types = {
            'id': str,
            'log_directory': str,
            'name': str,
            'status': str,
            'temp_directory': str,
            'type_name': str,
            'work_directory': str
        }

        self.attribute_map = {
            'id': 'Id',
            'log_directory': 'LogDirectory',
            'name': 'Name',
            'status': 'Status',
            'temp_directory': 'TempDirectory',
            'type_name': 'TypeName',
            'work_directory': 'WorkDirectory'
        }

        self._id = id
        self._log_directory = log_directory
        self._name = name
        self._status = status
        self._temp_directory = temp_directory
        self._type_name = type_name
        self._work_directory = work_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedApplication of this DeployedApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeployedApplication.


        :return: The id of this DeployedApplication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeployedApplication.


        :param id: The id of this DeployedApplication.
        :type id: str
        """

        self._id = id

    @property
    def log_directory(self):
        """Gets the log_directory of this DeployedApplication.


        :return: The log_directory of this DeployedApplication.
        :rtype: str
        """
        return self._log_directory

    @log_directory.setter
    def log_directory(self, log_directory):
        """Sets the log_directory of this DeployedApplication.


        :param log_directory: The log_directory of this DeployedApplication.
        :type log_directory: str
        """

        self._log_directory = log_directory

    @property
    def name(self):
        """Gets the name of this DeployedApplication.


        :return: The name of this DeployedApplication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeployedApplication.


        :param name: The name of this DeployedApplication.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DeployedApplication.


        :return: The status of this DeployedApplication.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeployedApplication.


        :param status: The status of this DeployedApplication.
        :type status: str
        """

        self._status = status

    @property
    def temp_directory(self):
        """Gets the temp_directory of this DeployedApplication.


        :return: The temp_directory of this DeployedApplication.
        :rtype: str
        """
        return self._temp_directory

    @temp_directory.setter
    def temp_directory(self, temp_directory):
        """Sets the temp_directory of this DeployedApplication.


        :param temp_directory: The temp_directory of this DeployedApplication.
        :type temp_directory: str
        """

        self._temp_directory = temp_directory

    @property
    def type_name(self):
        """Gets the type_name of this DeployedApplication.


        :return: The type_name of this DeployedApplication.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this DeployedApplication.


        :param type_name: The type_name of this DeployedApplication.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def work_directory(self):
        """Gets the work_directory of this DeployedApplication.


        :return: The work_directory of this DeployedApplication.
        :rtype: str
        """
        return self._work_directory

    @work_directory.setter
    def work_directory(self, work_directory):
        """Sets the work_directory of this DeployedApplication.


        :param work_directory: The work_directory of this DeployedApplication.
        :type work_directory: str
        """

        self._work_directory = work_directory
