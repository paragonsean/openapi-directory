# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server import util


class ClusterHealthReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, health_state: HealthState=None, _property: str=None, remove_when_expired: bool=None, sequence_number: str=None, source_id: str=None, time_to_live_in_milli_seconds: str=None):
        """ClusterHealthReport - a model defined in OpenAPI

        :param description: The description of this ClusterHealthReport.
        :param health_state: The health_state of this ClusterHealthReport.
        :param _property: The _property of this ClusterHealthReport.
        :param remove_when_expired: The remove_when_expired of this ClusterHealthReport.
        :param sequence_number: The sequence_number of this ClusterHealthReport.
        :param source_id: The source_id of this ClusterHealthReport.
        :param time_to_live_in_milli_seconds: The time_to_live_in_milli_seconds of this ClusterHealthReport.
        """
        self.openapi_types = {
            'description': str,
            'health_state': HealthState,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': str,
            'source_id': str,
            'time_to_live_in_milli_seconds': str
        }

        self.attribute_map = {
            'description': 'Description',
            'health_state': 'HealthState',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'source_id': 'SourceId',
            'time_to_live_in_milli_seconds': 'TimeToLiveInMilliSeconds'
        }

        self._description = description
        self._health_state = health_state
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._source_id = source_id
        self._time_to_live_in_milli_seconds = time_to_live_in_milli_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHealthReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHealthReport of this ClusterHealthReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ClusterHealthReport.


        :return: The description of this ClusterHealthReport.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterHealthReport.


        :param description: The description of this ClusterHealthReport.
        :type description: str
        """

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this ClusterHealthReport.


        :return: The health_state of this ClusterHealthReport.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ClusterHealthReport.


        :param health_state: The health_state of this ClusterHealthReport.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def _property(self):
        """Gets the _property of this ClusterHealthReport.


        :return: The _property of this ClusterHealthReport.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ClusterHealthReport.


        :param _property: The _property of this ClusterHealthReport.
        :type _property: str
        """

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this ClusterHealthReport.


        :return: The remove_when_expired of this ClusterHealthReport.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this ClusterHealthReport.


        :param remove_when_expired: The remove_when_expired of this ClusterHealthReport.
        :type remove_when_expired: bool
        """

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ClusterHealthReport.


        :return: The sequence_number of this ClusterHealthReport.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ClusterHealthReport.


        :param sequence_number: The sequence_number of this ClusterHealthReport.
        :type sequence_number: str
        """

        self._sequence_number = sequence_number

    @property
    def source_id(self):
        """Gets the source_id of this ClusterHealthReport.


        :return: The source_id of this ClusterHealthReport.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ClusterHealthReport.


        :param source_id: The source_id of this ClusterHealthReport.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def time_to_live_in_milli_seconds(self):
        """Gets the time_to_live_in_milli_seconds of this ClusterHealthReport.


        :return: The time_to_live_in_milli_seconds of this ClusterHealthReport.
        :rtype: str
        """
        return self._time_to_live_in_milli_seconds

    @time_to_live_in_milli_seconds.setter
    def time_to_live_in_milli_seconds(self, time_to_live_in_milli_seconds):
        """Sets the time_to_live_in_milli_seconds of this ClusterHealthReport.


        :param time_to_live_in_milli_seconds: The time_to_live_in_milli_seconds of this ClusterHealthReport.
        :type time_to_live_in_milli_seconds: str
        """

        self._time_to_live_in_milli_seconds = time_to_live_in_milli_seconds
