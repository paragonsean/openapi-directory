# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceTypeServiceTypeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_persisted_state: bool=None, is_stateful: bool=None, placement_constraints: str=None, service_type_name: str=None):
        """ServiceTypeServiceTypeDescription - a model defined in OpenAPI

        :param has_persisted_state: The has_persisted_state of this ServiceTypeServiceTypeDescription.
        :param is_stateful: The is_stateful of this ServiceTypeServiceTypeDescription.
        :param placement_constraints: The placement_constraints of this ServiceTypeServiceTypeDescription.
        :param service_type_name: The service_type_name of this ServiceTypeServiceTypeDescription.
        """
        self.openapi_types = {
            'has_persisted_state': bool,
            'is_stateful': bool,
            'placement_constraints': str,
            'service_type_name': str
        }

        self.attribute_map = {
            'has_persisted_state': 'HasPersistedState',
            'is_stateful': 'IsStateful',
            'placement_constraints': 'PlacementConstraints',
            'service_type_name': 'ServiceTypeName'
        }

        self._has_persisted_state = has_persisted_state
        self._is_stateful = is_stateful
        self._placement_constraints = placement_constraints
        self._service_type_name = service_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceTypeServiceTypeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceType_ServiceTypeDescription of this ServiceTypeServiceTypeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_persisted_state(self):
        """Gets the has_persisted_state of this ServiceTypeServiceTypeDescription.


        :return: The has_persisted_state of this ServiceTypeServiceTypeDescription.
        :rtype: bool
        """
        return self._has_persisted_state

    @has_persisted_state.setter
    def has_persisted_state(self, has_persisted_state):
        """Sets the has_persisted_state of this ServiceTypeServiceTypeDescription.


        :param has_persisted_state: The has_persisted_state of this ServiceTypeServiceTypeDescription.
        :type has_persisted_state: bool
        """

        self._has_persisted_state = has_persisted_state

    @property
    def is_stateful(self):
        """Gets the is_stateful of this ServiceTypeServiceTypeDescription.


        :return: The is_stateful of this ServiceTypeServiceTypeDescription.
        :rtype: bool
        """
        return self._is_stateful

    @is_stateful.setter
    def is_stateful(self, is_stateful):
        """Sets the is_stateful of this ServiceTypeServiceTypeDescription.


        :param is_stateful: The is_stateful of this ServiceTypeServiceTypeDescription.
        :type is_stateful: bool
        """

        self._is_stateful = is_stateful

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this ServiceTypeServiceTypeDescription.


        :return: The placement_constraints of this ServiceTypeServiceTypeDescription.
        :rtype: str
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this ServiceTypeServiceTypeDescription.


        :param placement_constraints: The placement_constraints of this ServiceTypeServiceTypeDescription.
        :type placement_constraints: str
        """

        self._placement_constraints = placement_constraints

    @property
    def service_type_name(self):
        """Gets the service_type_name of this ServiceTypeServiceTypeDescription.


        :return: The service_type_name of this ServiceTypeServiceTypeDescription.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this ServiceTypeServiceTypeDescription.


        :param service_type_name: The service_type_name of this ServiceTypeServiceTypeDescription.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name
