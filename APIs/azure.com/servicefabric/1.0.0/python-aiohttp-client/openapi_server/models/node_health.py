# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_event import HealthEvent
from openapi_server.models.health_state import HealthState
from openapi_server import util


class NodeHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_health_state: HealthState=None, health_events: List[HealthEvent]=None, name: str=None):
        """NodeHealth - a model defined in OpenAPI

        :param aggregated_health_state: The aggregated_health_state of this NodeHealth.
        :param health_events: The health_events of this NodeHealth.
        :param name: The name of this NodeHealth.
        """
        self.openapi_types = {
            'aggregated_health_state': HealthState,
            'health_events': List[HealthEvent],
            'name': str
        }

        self.attribute_map = {
            'aggregated_health_state': 'AggregatedHealthState',
            'health_events': 'HealthEvents',
            'name': 'Name'
        }

        self._aggregated_health_state = aggregated_health_state
        self._health_events = health_events
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeHealth of this NodeHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this NodeHealth.


        :return: The aggregated_health_state of this NodeHealth.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this NodeHealth.


        :param aggregated_health_state: The aggregated_health_state of this NodeHealth.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def health_events(self):
        """Gets the health_events of this NodeHealth.


        :return: The health_events of this NodeHealth.
        :rtype: List[HealthEvent]
        """
        return self._health_events

    @health_events.setter
    def health_events(self, health_events):
        """Sets the health_events of this NodeHealth.


        :param health_events: The health_events of this NodeHealth.
        :type health_events: List[HealthEvent]
        """

        self._health_events = health_events

    @property
    def name(self):
        """Gets the name of this NodeHealth.


        :return: The name of this NodeHealth.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeHealth.


        :param name: The name of this NodeHealth.
        :type name: str
        """

        self._name = name
