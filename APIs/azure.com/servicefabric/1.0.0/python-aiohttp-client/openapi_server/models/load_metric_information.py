# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_metric_information_max_node_load_id import LoadMetricInformationMaxNodeLoadId
from openapi_server.models.load_metric_information_min_node_load_id import LoadMetricInformationMinNodeLoadId
from openapi_server import util


class LoadMetricInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, activity_threshold: int=None, balancing_threshold: int=None, buffered_capacity: str=None, cluster_capacity: str=None, cluster_load: str=None, deviation_after: int=None, deviation_before: int=None, is_balanced_after: bool=None, is_balanced_before: bool=None, is_cluster_capacity_violation: bool=None, max_node_load_id: LoadMetricInformationMaxNodeLoadId=None, max_node_load_value: str=None, min_node_load_id: LoadMetricInformationMinNodeLoadId=None, min_node_load_value: str=None, name: str=None, node_buffer_percentage: int=None, remaining_buffered_capacity: str=None, remaining_unbuffered_capacity: str=None):
        """LoadMetricInformation - a model defined in OpenAPI

        :param action: The action of this LoadMetricInformation.
        :param activity_threshold: The activity_threshold of this LoadMetricInformation.
        :param balancing_threshold: The balancing_threshold of this LoadMetricInformation.
        :param buffered_capacity: The buffered_capacity of this LoadMetricInformation.
        :param cluster_capacity: The cluster_capacity of this LoadMetricInformation.
        :param cluster_load: The cluster_load of this LoadMetricInformation.
        :param deviation_after: The deviation_after of this LoadMetricInformation.
        :param deviation_before: The deviation_before of this LoadMetricInformation.
        :param is_balanced_after: The is_balanced_after of this LoadMetricInformation.
        :param is_balanced_before: The is_balanced_before of this LoadMetricInformation.
        :param is_cluster_capacity_violation: The is_cluster_capacity_violation of this LoadMetricInformation.
        :param max_node_load_id: The max_node_load_id of this LoadMetricInformation.
        :param max_node_load_value: The max_node_load_value of this LoadMetricInformation.
        :param min_node_load_id: The min_node_load_id of this LoadMetricInformation.
        :param min_node_load_value: The min_node_load_value of this LoadMetricInformation.
        :param name: The name of this LoadMetricInformation.
        :param node_buffer_percentage: The node_buffer_percentage of this LoadMetricInformation.
        :param remaining_buffered_capacity: The remaining_buffered_capacity of this LoadMetricInformation.
        :param remaining_unbuffered_capacity: The remaining_unbuffered_capacity of this LoadMetricInformation.
        """
        self.openapi_types = {
            'action': str,
            'activity_threshold': int,
            'balancing_threshold': int,
            'buffered_capacity': str,
            'cluster_capacity': str,
            'cluster_load': str,
            'deviation_after': int,
            'deviation_before': int,
            'is_balanced_after': bool,
            'is_balanced_before': bool,
            'is_cluster_capacity_violation': bool,
            'max_node_load_id': LoadMetricInformationMaxNodeLoadId,
            'max_node_load_value': str,
            'min_node_load_id': LoadMetricInformationMinNodeLoadId,
            'min_node_load_value': str,
            'name': str,
            'node_buffer_percentage': int,
            'remaining_buffered_capacity': str,
            'remaining_unbuffered_capacity': str
        }

        self.attribute_map = {
            'action': 'Action',
            'activity_threshold': 'ActivityThreshold',
            'balancing_threshold': 'BalancingThreshold',
            'buffered_capacity': 'BufferedCapacity',
            'cluster_capacity': 'ClusterCapacity',
            'cluster_load': 'ClusterLoad',
            'deviation_after': 'DeviationAfter',
            'deviation_before': 'DeviationBefore',
            'is_balanced_after': 'IsBalancedAfter',
            'is_balanced_before': 'IsBalancedBefore',
            'is_cluster_capacity_violation': 'IsClusterCapacityViolation',
            'max_node_load_id': 'MaxNodeLoadId',
            'max_node_load_value': 'MaxNodeLoadValue',
            'min_node_load_id': 'MinNodeLoadId',
            'min_node_load_value': 'MinNodeLoadValue',
            'name': 'Name',
            'node_buffer_percentage': 'NodeBufferPercentage',
            'remaining_buffered_capacity': 'RemainingBufferedCapacity',
            'remaining_unbuffered_capacity': 'RemainingUnbufferedCapacity'
        }

        self._action = action
        self._activity_threshold = activity_threshold
        self._balancing_threshold = balancing_threshold
        self._buffered_capacity = buffered_capacity
        self._cluster_capacity = cluster_capacity
        self._cluster_load = cluster_load
        self._deviation_after = deviation_after
        self._deviation_before = deviation_before
        self._is_balanced_after = is_balanced_after
        self._is_balanced_before = is_balanced_before
        self._is_cluster_capacity_violation = is_cluster_capacity_violation
        self._max_node_load_id = max_node_load_id
        self._max_node_load_value = max_node_load_value
        self._min_node_load_id = min_node_load_id
        self._min_node_load_value = min_node_load_value
        self._name = name
        self._node_buffer_percentage = node_buffer_percentage
        self._remaining_buffered_capacity = remaining_buffered_capacity
        self._remaining_unbuffered_capacity = remaining_unbuffered_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadMetricInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadMetricInformation of this LoadMetricInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LoadMetricInformation.


        :return: The action of this LoadMetricInformation.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LoadMetricInformation.


        :param action: The action of this LoadMetricInformation.
        :type action: str
        """

        self._action = action

    @property
    def activity_threshold(self):
        """Gets the activity_threshold of this LoadMetricInformation.


        :return: The activity_threshold of this LoadMetricInformation.
        :rtype: int
        """
        return self._activity_threshold

    @activity_threshold.setter
    def activity_threshold(self, activity_threshold):
        """Sets the activity_threshold of this LoadMetricInformation.


        :param activity_threshold: The activity_threshold of this LoadMetricInformation.
        :type activity_threshold: int
        """

        self._activity_threshold = activity_threshold

    @property
    def balancing_threshold(self):
        """Gets the balancing_threshold of this LoadMetricInformation.


        :return: The balancing_threshold of this LoadMetricInformation.
        :rtype: int
        """
        return self._balancing_threshold

    @balancing_threshold.setter
    def balancing_threshold(self, balancing_threshold):
        """Sets the balancing_threshold of this LoadMetricInformation.


        :param balancing_threshold: The balancing_threshold of this LoadMetricInformation.
        :type balancing_threshold: int
        """

        self._balancing_threshold = balancing_threshold

    @property
    def buffered_capacity(self):
        """Gets the buffered_capacity of this LoadMetricInformation.


        :return: The buffered_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._buffered_capacity

    @buffered_capacity.setter
    def buffered_capacity(self, buffered_capacity):
        """Sets the buffered_capacity of this LoadMetricInformation.


        :param buffered_capacity: The buffered_capacity of this LoadMetricInformation.
        :type buffered_capacity: str
        """

        self._buffered_capacity = buffered_capacity

    @property
    def cluster_capacity(self):
        """Gets the cluster_capacity of this LoadMetricInformation.


        :return: The cluster_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_capacity

    @cluster_capacity.setter
    def cluster_capacity(self, cluster_capacity):
        """Sets the cluster_capacity of this LoadMetricInformation.


        :param cluster_capacity: The cluster_capacity of this LoadMetricInformation.
        :type cluster_capacity: str
        """

        self._cluster_capacity = cluster_capacity

    @property
    def cluster_load(self):
        """Gets the cluster_load of this LoadMetricInformation.


        :return: The cluster_load of this LoadMetricInformation.
        :rtype: str
        """
        return self._cluster_load

    @cluster_load.setter
    def cluster_load(self, cluster_load):
        """Sets the cluster_load of this LoadMetricInformation.


        :param cluster_load: The cluster_load of this LoadMetricInformation.
        :type cluster_load: str
        """

        self._cluster_load = cluster_load

    @property
    def deviation_after(self):
        """Gets the deviation_after of this LoadMetricInformation.


        :return: The deviation_after of this LoadMetricInformation.
        :rtype: int
        """
        return self._deviation_after

    @deviation_after.setter
    def deviation_after(self, deviation_after):
        """Sets the deviation_after of this LoadMetricInformation.


        :param deviation_after: The deviation_after of this LoadMetricInformation.
        :type deviation_after: int
        """

        self._deviation_after = deviation_after

    @property
    def deviation_before(self):
        """Gets the deviation_before of this LoadMetricInformation.


        :return: The deviation_before of this LoadMetricInformation.
        :rtype: int
        """
        return self._deviation_before

    @deviation_before.setter
    def deviation_before(self, deviation_before):
        """Sets the deviation_before of this LoadMetricInformation.


        :param deviation_before: The deviation_before of this LoadMetricInformation.
        :type deviation_before: int
        """

        self._deviation_before = deviation_before

    @property
    def is_balanced_after(self):
        """Gets the is_balanced_after of this LoadMetricInformation.


        :return: The is_balanced_after of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_balanced_after

    @is_balanced_after.setter
    def is_balanced_after(self, is_balanced_after):
        """Sets the is_balanced_after of this LoadMetricInformation.


        :param is_balanced_after: The is_balanced_after of this LoadMetricInformation.
        :type is_balanced_after: bool
        """

        self._is_balanced_after = is_balanced_after

    @property
    def is_balanced_before(self):
        """Gets the is_balanced_before of this LoadMetricInformation.


        :return: The is_balanced_before of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_balanced_before

    @is_balanced_before.setter
    def is_balanced_before(self, is_balanced_before):
        """Sets the is_balanced_before of this LoadMetricInformation.


        :param is_balanced_before: The is_balanced_before of this LoadMetricInformation.
        :type is_balanced_before: bool
        """

        self._is_balanced_before = is_balanced_before

    @property
    def is_cluster_capacity_violation(self):
        """Gets the is_cluster_capacity_violation of this LoadMetricInformation.


        :return: The is_cluster_capacity_violation of this LoadMetricInformation.
        :rtype: bool
        """
        return self._is_cluster_capacity_violation

    @is_cluster_capacity_violation.setter
    def is_cluster_capacity_violation(self, is_cluster_capacity_violation):
        """Sets the is_cluster_capacity_violation of this LoadMetricInformation.


        :param is_cluster_capacity_violation: The is_cluster_capacity_violation of this LoadMetricInformation.
        :type is_cluster_capacity_violation: bool
        """

        self._is_cluster_capacity_violation = is_cluster_capacity_violation

    @property
    def max_node_load_id(self):
        """Gets the max_node_load_id of this LoadMetricInformation.


        :return: The max_node_load_id of this LoadMetricInformation.
        :rtype: LoadMetricInformationMaxNodeLoadId
        """
        return self._max_node_load_id

    @max_node_load_id.setter
    def max_node_load_id(self, max_node_load_id):
        """Sets the max_node_load_id of this LoadMetricInformation.


        :param max_node_load_id: The max_node_load_id of this LoadMetricInformation.
        :type max_node_load_id: LoadMetricInformationMaxNodeLoadId
        """

        self._max_node_load_id = max_node_load_id

    @property
    def max_node_load_value(self):
        """Gets the max_node_load_value of this LoadMetricInformation.


        :return: The max_node_load_value of this LoadMetricInformation.
        :rtype: str
        """
        return self._max_node_load_value

    @max_node_load_value.setter
    def max_node_load_value(self, max_node_load_value):
        """Sets the max_node_load_value of this LoadMetricInformation.


        :param max_node_load_value: The max_node_load_value of this LoadMetricInformation.
        :type max_node_load_value: str
        """

        self._max_node_load_value = max_node_load_value

    @property
    def min_node_load_id(self):
        """Gets the min_node_load_id of this LoadMetricInformation.


        :return: The min_node_load_id of this LoadMetricInformation.
        :rtype: LoadMetricInformationMinNodeLoadId
        """
        return self._min_node_load_id

    @min_node_load_id.setter
    def min_node_load_id(self, min_node_load_id):
        """Sets the min_node_load_id of this LoadMetricInformation.


        :param min_node_load_id: The min_node_load_id of this LoadMetricInformation.
        :type min_node_load_id: LoadMetricInformationMinNodeLoadId
        """

        self._min_node_load_id = min_node_load_id

    @property
    def min_node_load_value(self):
        """Gets the min_node_load_value of this LoadMetricInformation.


        :return: The min_node_load_value of this LoadMetricInformation.
        :rtype: str
        """
        return self._min_node_load_value

    @min_node_load_value.setter
    def min_node_load_value(self, min_node_load_value):
        """Sets the min_node_load_value of this LoadMetricInformation.


        :param min_node_load_value: The min_node_load_value of this LoadMetricInformation.
        :type min_node_load_value: str
        """

        self._min_node_load_value = min_node_load_value

    @property
    def name(self):
        """Gets the name of this LoadMetricInformation.


        :return: The name of this LoadMetricInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoadMetricInformation.


        :param name: The name of this LoadMetricInformation.
        :type name: str
        """

        self._name = name

    @property
    def node_buffer_percentage(self):
        """Gets the node_buffer_percentage of this LoadMetricInformation.


        :return: The node_buffer_percentage of this LoadMetricInformation.
        :rtype: int
        """
        return self._node_buffer_percentage

    @node_buffer_percentage.setter
    def node_buffer_percentage(self, node_buffer_percentage):
        """Sets the node_buffer_percentage of this LoadMetricInformation.


        :param node_buffer_percentage: The node_buffer_percentage of this LoadMetricInformation.
        :type node_buffer_percentage: int
        """

        self._node_buffer_percentage = node_buffer_percentage

    @property
    def remaining_buffered_capacity(self):
        """Gets the remaining_buffered_capacity of this LoadMetricInformation.


        :return: The remaining_buffered_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._remaining_buffered_capacity

    @remaining_buffered_capacity.setter
    def remaining_buffered_capacity(self, remaining_buffered_capacity):
        """Sets the remaining_buffered_capacity of this LoadMetricInformation.


        :param remaining_buffered_capacity: The remaining_buffered_capacity of this LoadMetricInformation.
        :type remaining_buffered_capacity: str
        """

        self._remaining_buffered_capacity = remaining_buffered_capacity

    @property
    def remaining_unbuffered_capacity(self):
        """Gets the remaining_unbuffered_capacity of this LoadMetricInformation.


        :return: The remaining_unbuffered_capacity of this LoadMetricInformation.
        :rtype: str
        """
        return self._remaining_unbuffered_capacity

    @remaining_unbuffered_capacity.setter
    def remaining_unbuffered_capacity(self, remaining_unbuffered_capacity):
        """Sets the remaining_unbuffered_capacity of this LoadMetricInformation.


        :param remaining_unbuffered_capacity: The remaining_unbuffered_capacity of this LoadMetricInformation.
        :type remaining_unbuffered_capacity: str
        """

        self._remaining_unbuffered_capacity = remaining_unbuffered_capacity
