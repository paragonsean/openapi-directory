# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeNodeDeactivationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_deactivation_intent: str=None, node_deactivation_status: str=None):
        """NodeNodeDeactivationInfo - a model defined in OpenAPI

        :param node_deactivation_intent: The node_deactivation_intent of this NodeNodeDeactivationInfo.
        :param node_deactivation_status: The node_deactivation_status of this NodeNodeDeactivationInfo.
        """
        self.openapi_types = {
            'node_deactivation_intent': str,
            'node_deactivation_status': str
        }

        self.attribute_map = {
            'node_deactivation_intent': 'NodeDeactivationIntent',
            'node_deactivation_status': 'NodeDeactivationStatus'
        }

        self._node_deactivation_intent = node_deactivation_intent
        self._node_deactivation_status = node_deactivation_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeNodeDeactivationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node_NodeDeactivationInfo of this NodeNodeDeactivationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_deactivation_intent(self):
        """Gets the node_deactivation_intent of this NodeNodeDeactivationInfo.


        :return: The node_deactivation_intent of this NodeNodeDeactivationInfo.
        :rtype: str
        """
        return self._node_deactivation_intent

    @node_deactivation_intent.setter
    def node_deactivation_intent(self, node_deactivation_intent):
        """Sets the node_deactivation_intent of this NodeNodeDeactivationInfo.


        :param node_deactivation_intent: The node_deactivation_intent of this NodeNodeDeactivationInfo.
        :type node_deactivation_intent: str
        """
        allowed_values = ["Invalid", "Pause", "Restart", "RemoveData"]  # noqa: E501
        if node_deactivation_intent not in allowed_values:
            raise ValueError(
                "Invalid value for `node_deactivation_intent` ({0}), must be one of {1}"
                .format(node_deactivation_intent, allowed_values)
            )

        self._node_deactivation_intent = node_deactivation_intent

    @property
    def node_deactivation_status(self):
        """Gets the node_deactivation_status of this NodeNodeDeactivationInfo.


        :return: The node_deactivation_status of this NodeNodeDeactivationInfo.
        :rtype: str
        """
        return self._node_deactivation_status

    @node_deactivation_status.setter
    def node_deactivation_status(self, node_deactivation_status):
        """Sets the node_deactivation_status of this NodeNodeDeactivationInfo.


        :param node_deactivation_status: The node_deactivation_status of this NodeNodeDeactivationInfo.
        :type node_deactivation_status: str
        """
        allowed_values = ["Invalid", "SafetyCheckInProgress", "SafetyCheckComplete", "Completed"]  # noqa: E501
        if node_deactivation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `node_deactivation_status` ({0}), must be one of {1}"
                .format(node_deactivation_status, allowed_values)
            )

        self._node_deactivation_status = node_deactivation_status
