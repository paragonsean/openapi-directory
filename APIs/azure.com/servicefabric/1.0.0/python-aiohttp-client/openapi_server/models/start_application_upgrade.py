# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server.models.application_parameters_inner import ApplicationParametersInner
from openapi_server.models.monitoring_policy import MonitoringPolicy
from openapi_server.models.rolling_upgrade_mode import RollingUpgradeMode
from openapi_server import util


class StartApplicationUpgrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy: ApplicationHealthPolicy=None, force_restart: bool=None, monitoring_policy: MonitoringPolicy=None, name: str=None, parameters: List[ApplicationParametersInner]=None, rolling_upgrade_mode: RollingUpgradeMode=None, target_application_type_version: str=None, upgrade_kind: str=None, upgrade_replica_set_check_timeout_in_seconds: int=None):
        """StartApplicationUpgrade - a model defined in OpenAPI

        :param application_health_policy: The application_health_policy of this StartApplicationUpgrade.
        :param force_restart: The force_restart of this StartApplicationUpgrade.
        :param monitoring_policy: The monitoring_policy of this StartApplicationUpgrade.
        :param name: The name of this StartApplicationUpgrade.
        :param parameters: The parameters of this StartApplicationUpgrade.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this StartApplicationUpgrade.
        :param target_application_type_version: The target_application_type_version of this StartApplicationUpgrade.
        :param upgrade_kind: The upgrade_kind of this StartApplicationUpgrade.
        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this StartApplicationUpgrade.
        """
        self.openapi_types = {
            'application_health_policy': ApplicationHealthPolicy,
            'force_restart': bool,
            'monitoring_policy': MonitoringPolicy,
            'name': str,
            'parameters': List[ApplicationParametersInner],
            'rolling_upgrade_mode': RollingUpgradeMode,
            'target_application_type_version': str,
            'upgrade_kind': str,
            'upgrade_replica_set_check_timeout_in_seconds': int
        }

        self.attribute_map = {
            'application_health_policy': 'ApplicationHealthPolicy',
            'force_restart': 'ForceRestart',
            'monitoring_policy': 'MonitoringPolicy',
            'name': 'Name',
            'parameters': 'Parameters',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'target_application_type_version': 'TargetApplicationTypeVersion',
            'upgrade_kind': 'UpgradeKind',
            'upgrade_replica_set_check_timeout_in_seconds': 'UpgradeReplicaSetCheckTimeoutInSeconds'
        }

        self._application_health_policy = application_health_policy
        self._force_restart = force_restart
        self._monitoring_policy = monitoring_policy
        self._name = name
        self._parameters = parameters
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._target_application_type_version = target_application_type_version
        self._upgrade_kind = upgrade_kind
        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartApplicationUpgrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartApplicationUpgrade of this StartApplicationUpgrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy(self):
        """Gets the application_health_policy of this StartApplicationUpgrade.


        :return: The application_health_policy of this StartApplicationUpgrade.
        :rtype: ApplicationHealthPolicy
        """
        return self._application_health_policy

    @application_health_policy.setter
    def application_health_policy(self, application_health_policy):
        """Sets the application_health_policy of this StartApplicationUpgrade.


        :param application_health_policy: The application_health_policy of this StartApplicationUpgrade.
        :type application_health_policy: ApplicationHealthPolicy
        """

        self._application_health_policy = application_health_policy

    @property
    def force_restart(self):
        """Gets the force_restart of this StartApplicationUpgrade.


        :return: The force_restart of this StartApplicationUpgrade.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this StartApplicationUpgrade.


        :param force_restart: The force_restart of this StartApplicationUpgrade.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def monitoring_policy(self):
        """Gets the monitoring_policy of this StartApplicationUpgrade.


        :return: The monitoring_policy of this StartApplicationUpgrade.
        :rtype: MonitoringPolicy
        """
        return self._monitoring_policy

    @monitoring_policy.setter
    def monitoring_policy(self, monitoring_policy):
        """Sets the monitoring_policy of this StartApplicationUpgrade.


        :param monitoring_policy: The monitoring_policy of this StartApplicationUpgrade.
        :type monitoring_policy: MonitoringPolicy
        """

        self._monitoring_policy = monitoring_policy

    @property
    def name(self):
        """Gets the name of this StartApplicationUpgrade.


        :return: The name of this StartApplicationUpgrade.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartApplicationUpgrade.


        :param name: The name of this StartApplicationUpgrade.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this StartApplicationUpgrade.


        :return: The parameters of this StartApplicationUpgrade.
        :rtype: List[ApplicationParametersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StartApplicationUpgrade.


        :param parameters: The parameters of this StartApplicationUpgrade.
        :type parameters: List[ApplicationParametersInner]
        """

        self._parameters = parameters

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this StartApplicationUpgrade.


        :return: The rolling_upgrade_mode of this StartApplicationUpgrade.
        :rtype: RollingUpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this StartApplicationUpgrade.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this StartApplicationUpgrade.
        :type rolling_upgrade_mode: RollingUpgradeMode
        """

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def target_application_type_version(self):
        """Gets the target_application_type_version of this StartApplicationUpgrade.


        :return: The target_application_type_version of this StartApplicationUpgrade.
        :rtype: str
        """
        return self._target_application_type_version

    @target_application_type_version.setter
    def target_application_type_version(self, target_application_type_version):
        """Sets the target_application_type_version of this StartApplicationUpgrade.


        :param target_application_type_version: The target_application_type_version of this StartApplicationUpgrade.
        :type target_application_type_version: str
        """

        self._target_application_type_version = target_application_type_version

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this StartApplicationUpgrade.


        :return: The upgrade_kind of this StartApplicationUpgrade.
        :rtype: str
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this StartApplicationUpgrade.


        :param upgrade_kind: The upgrade_kind of this StartApplicationUpgrade.
        :type upgrade_kind: str
        """
        allowed_values = ["Invalid", "Rolling"]  # noqa: E501
        if upgrade_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `upgrade_kind` ({0}), must be one of {1}"
                .format(upgrade_kind, allowed_values)
            )

        self._upgrade_kind = upgrade_kind

    @property
    def upgrade_replica_set_check_timeout_in_seconds(self):
        """Gets the upgrade_replica_set_check_timeout_in_seconds of this StartApplicationUpgrade.


        :return: The upgrade_replica_set_check_timeout_in_seconds of this StartApplicationUpgrade.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout_in_seconds

    @upgrade_replica_set_check_timeout_in_seconds.setter
    def upgrade_replica_set_check_timeout_in_seconds(self, upgrade_replica_set_check_timeout_in_seconds):
        """Sets the upgrade_replica_set_check_timeout_in_seconds of this StartApplicationUpgrade.


        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this StartApplicationUpgrade.
        :type upgrade_replica_set_check_timeout_in_seconds: int
        """

        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds
