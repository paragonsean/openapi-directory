# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.partition_current_configuration_epoch import PartitionCurrentConfigurationEpoch
from openapi_server.models.partition_information import PartitionInformation
from openapi_server.models.service_kind import ServiceKind
from openapi_server import util


class Partition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_configuration_epoch: PartitionCurrentConfigurationEpoch=None, health_state: HealthState=None, instance_count: int=None, min_replica_set_size: int=None, partition_information: PartitionInformation=None, partition_status: str=None, service_kind: ServiceKind=None, target_replica_set_size: int=None):
        """Partition - a model defined in OpenAPI

        :param current_configuration_epoch: The current_configuration_epoch of this Partition.
        :param health_state: The health_state of this Partition.
        :param instance_count: The instance_count of this Partition.
        :param min_replica_set_size: The min_replica_set_size of this Partition.
        :param partition_information: The partition_information of this Partition.
        :param partition_status: The partition_status of this Partition.
        :param service_kind: The service_kind of this Partition.
        :param target_replica_set_size: The target_replica_set_size of this Partition.
        """
        self.openapi_types = {
            'current_configuration_epoch': PartitionCurrentConfigurationEpoch,
            'health_state': HealthState,
            'instance_count': int,
            'min_replica_set_size': int,
            'partition_information': PartitionInformation,
            'partition_status': str,
            'service_kind': ServiceKind,
            'target_replica_set_size': int
        }

        self.attribute_map = {
            'current_configuration_epoch': 'CurrentConfigurationEpoch',
            'health_state': 'HealthState',
            'instance_count': 'InstanceCount',
            'min_replica_set_size': 'MinReplicaSetSize',
            'partition_information': 'PartitionInformation',
            'partition_status': 'PartitionStatus',
            'service_kind': 'ServiceKind',
            'target_replica_set_size': 'TargetReplicaSetSize'
        }

        self._current_configuration_epoch = current_configuration_epoch
        self._health_state = health_state
        self._instance_count = instance_count
        self._min_replica_set_size = min_replica_set_size
        self._partition_information = partition_information
        self._partition_status = partition_status
        self._service_kind = service_kind
        self._target_replica_set_size = target_replica_set_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Partition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partition of this Partition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_configuration_epoch(self):
        """Gets the current_configuration_epoch of this Partition.


        :return: The current_configuration_epoch of this Partition.
        :rtype: PartitionCurrentConfigurationEpoch
        """
        return self._current_configuration_epoch

    @current_configuration_epoch.setter
    def current_configuration_epoch(self, current_configuration_epoch):
        """Sets the current_configuration_epoch of this Partition.


        :param current_configuration_epoch: The current_configuration_epoch of this Partition.
        :type current_configuration_epoch: PartitionCurrentConfigurationEpoch
        """

        self._current_configuration_epoch = current_configuration_epoch

    @property
    def health_state(self):
        """Gets the health_state of this Partition.


        :return: The health_state of this Partition.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Partition.


        :param health_state: The health_state of this Partition.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def instance_count(self):
        """Gets the instance_count of this Partition.


        :return: The instance_count of this Partition.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this Partition.


        :param instance_count: The instance_count of this Partition.
        :type instance_count: int
        """

        self._instance_count = instance_count

    @property
    def min_replica_set_size(self):
        """Gets the min_replica_set_size of this Partition.


        :return: The min_replica_set_size of this Partition.
        :rtype: int
        """
        return self._min_replica_set_size

    @min_replica_set_size.setter
    def min_replica_set_size(self, min_replica_set_size):
        """Sets the min_replica_set_size of this Partition.


        :param min_replica_set_size: The min_replica_set_size of this Partition.
        :type min_replica_set_size: int
        """

        self._min_replica_set_size = min_replica_set_size

    @property
    def partition_information(self):
        """Gets the partition_information of this Partition.


        :return: The partition_information of this Partition.
        :rtype: PartitionInformation
        """
        return self._partition_information

    @partition_information.setter
    def partition_information(self, partition_information):
        """Sets the partition_information of this Partition.


        :param partition_information: The partition_information of this Partition.
        :type partition_information: PartitionInformation
        """

        self._partition_information = partition_information

    @property
    def partition_status(self):
        """Gets the partition_status of this Partition.


        :return: The partition_status of this Partition.
        :rtype: str
        """
        return self._partition_status

    @partition_status.setter
    def partition_status(self, partition_status):
        """Sets the partition_status of this Partition.


        :param partition_status: The partition_status of this Partition.
        :type partition_status: str
        """
        allowed_values = ["Invalid", "Ready", "NotReady", "InQuorumLoss", "Reconfiguring", "Deleting"]  # noqa: E501
        if partition_status not in allowed_values:
            raise ValueError(
                "Invalid value for `partition_status` ({0}), must be one of {1}"
                .format(partition_status, allowed_values)
            )

        self._partition_status = partition_status

    @property
    def service_kind(self):
        """Gets the service_kind of this Partition.


        :return: The service_kind of this Partition.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this Partition.


        :param service_kind: The service_kind of this Partition.
        :type service_kind: ServiceKind
        """

        self._service_kind = service_kind

    @property
    def target_replica_set_size(self):
        """Gets the target_replica_set_size of this Partition.


        :return: The target_replica_set_size of this Partition.
        :rtype: int
        """
        return self._target_replica_set_size

    @target_replica_set_size.setter
    def target_replica_set_size(self, target_replica_set_size):
        """Sets the target_replica_set_size of this Partition.


        :param target_replica_set_size: The target_replica_set_size of this Partition.
        :type target_replica_set_size: int
        """

        self._target_replica_set_size = target_replica_set_size
