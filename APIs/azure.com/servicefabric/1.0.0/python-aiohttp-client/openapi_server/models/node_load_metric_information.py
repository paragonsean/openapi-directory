# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeLoadMetricInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_capacity_violation: bool=None, name: str=None, node_buffered_capacity: str=None, node_capacity: str=None, node_load: str=None, node_remaining_buffered_capacity: str=None, node_remaining_capacity: str=None):
        """NodeLoadMetricInformation - a model defined in OpenAPI

        :param is_capacity_violation: The is_capacity_violation of this NodeLoadMetricInformation.
        :param name: The name of this NodeLoadMetricInformation.
        :param node_buffered_capacity: The node_buffered_capacity of this NodeLoadMetricInformation.
        :param node_capacity: The node_capacity of this NodeLoadMetricInformation.
        :param node_load: The node_load of this NodeLoadMetricInformation.
        :param node_remaining_buffered_capacity: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :param node_remaining_capacity: The node_remaining_capacity of this NodeLoadMetricInformation.
        """
        self.openapi_types = {
            'is_capacity_violation': bool,
            'name': str,
            'node_buffered_capacity': str,
            'node_capacity': str,
            'node_load': str,
            'node_remaining_buffered_capacity': str,
            'node_remaining_capacity': str
        }

        self.attribute_map = {
            'is_capacity_violation': 'IsCapacityViolation',
            'name': 'Name',
            'node_buffered_capacity': 'NodeBufferedCapacity',
            'node_capacity': 'NodeCapacity',
            'node_load': 'NodeLoad',
            'node_remaining_buffered_capacity': 'NodeRemainingBufferedCapacity',
            'node_remaining_capacity': 'NodeRemainingCapacity'
        }

        self._is_capacity_violation = is_capacity_violation
        self._name = name
        self._node_buffered_capacity = node_buffered_capacity
        self._node_capacity = node_capacity
        self._node_load = node_load
        self._node_remaining_buffered_capacity = node_remaining_buffered_capacity
        self._node_remaining_capacity = node_remaining_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeLoadMetricInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeLoadMetricInformation of this NodeLoadMetricInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_capacity_violation(self):
        """Gets the is_capacity_violation of this NodeLoadMetricInformation.


        :return: The is_capacity_violation of this NodeLoadMetricInformation.
        :rtype: bool
        """
        return self._is_capacity_violation

    @is_capacity_violation.setter
    def is_capacity_violation(self, is_capacity_violation):
        """Sets the is_capacity_violation of this NodeLoadMetricInformation.


        :param is_capacity_violation: The is_capacity_violation of this NodeLoadMetricInformation.
        :type is_capacity_violation: bool
        """

        self._is_capacity_violation = is_capacity_violation

    @property
    def name(self):
        """Gets the name of this NodeLoadMetricInformation.


        :return: The name of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeLoadMetricInformation.


        :param name: The name of this NodeLoadMetricInformation.
        :type name: str
        """

        self._name = name

    @property
    def node_buffered_capacity(self):
        """Gets the node_buffered_capacity of this NodeLoadMetricInformation.


        :return: The node_buffered_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_buffered_capacity

    @node_buffered_capacity.setter
    def node_buffered_capacity(self, node_buffered_capacity):
        """Sets the node_buffered_capacity of this NodeLoadMetricInformation.


        :param node_buffered_capacity: The node_buffered_capacity of this NodeLoadMetricInformation.
        :type node_buffered_capacity: str
        """

        self._node_buffered_capacity = node_buffered_capacity

    @property
    def node_capacity(self):
        """Gets the node_capacity of this NodeLoadMetricInformation.


        :return: The node_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_capacity

    @node_capacity.setter
    def node_capacity(self, node_capacity):
        """Sets the node_capacity of this NodeLoadMetricInformation.


        :param node_capacity: The node_capacity of this NodeLoadMetricInformation.
        :type node_capacity: str
        """

        self._node_capacity = node_capacity

    @property
    def node_load(self):
        """Gets the node_load of this NodeLoadMetricInformation.


        :return: The node_load of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_load

    @node_load.setter
    def node_load(self, node_load):
        """Sets the node_load of this NodeLoadMetricInformation.


        :param node_load: The node_load of this NodeLoadMetricInformation.
        :type node_load: str
        """

        self._node_load = node_load

    @property
    def node_remaining_buffered_capacity(self):
        """Gets the node_remaining_buffered_capacity of this NodeLoadMetricInformation.


        :return: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_remaining_buffered_capacity

    @node_remaining_buffered_capacity.setter
    def node_remaining_buffered_capacity(self, node_remaining_buffered_capacity):
        """Sets the node_remaining_buffered_capacity of this NodeLoadMetricInformation.


        :param node_remaining_buffered_capacity: The node_remaining_buffered_capacity of this NodeLoadMetricInformation.
        :type node_remaining_buffered_capacity: str
        """

        self._node_remaining_buffered_capacity = node_remaining_buffered_capacity

    @property
    def node_remaining_capacity(self):
        """Gets the node_remaining_capacity of this NodeLoadMetricInformation.


        :return: The node_remaining_capacity of this NodeLoadMetricInformation.
        :rtype: str
        """
        return self._node_remaining_capacity

    @node_remaining_capacity.setter
    def node_remaining_capacity(self, node_remaining_capacity):
        """Sets the node_remaining_capacity of this NodeLoadMetricInformation.


        :param node_remaining_capacity: The node_remaining_capacity of this NodeLoadMetricInformation.
        :type node_remaining_capacity: str
        """

        self._node_remaining_capacity = node_remaining_capacity
