# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy_map import ApplicationHealthPolicyMap
from openapi_server.models.cluster_upgrade_health_policy import ClusterUpgradeHealthPolicy
from openapi_server.models.rolling_upgrade_mode import RollingUpgradeMode
from openapi_server import util


class StartClusterUpgrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy_map: ApplicationHealthPolicyMap=None, cluster_upgrade_health_policy: ClusterUpgradeHealthPolicy=None, code_version: str=None, config_version: str=None, enable_delta_health_evaluation: bool=None, force_restart: bool=None, monitoring_policy: object=None, rolling_upgrade_mode: RollingUpgradeMode=None, upgrade_kind: str=None, upgrade_replica_set_check_timeout_in_seconds: int=None):
        """StartClusterUpgrade - a model defined in OpenAPI

        :param application_health_policy_map: The application_health_policy_map of this StartClusterUpgrade.
        :param cluster_upgrade_health_policy: The cluster_upgrade_health_policy of this StartClusterUpgrade.
        :param code_version: The code_version of this StartClusterUpgrade.
        :param config_version: The config_version of this StartClusterUpgrade.
        :param enable_delta_health_evaluation: The enable_delta_health_evaluation of this StartClusterUpgrade.
        :param force_restart: The force_restart of this StartClusterUpgrade.
        :param monitoring_policy: The monitoring_policy of this StartClusterUpgrade.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this StartClusterUpgrade.
        :param upgrade_kind: The upgrade_kind of this StartClusterUpgrade.
        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this StartClusterUpgrade.
        """
        self.openapi_types = {
            'application_health_policy_map': ApplicationHealthPolicyMap,
            'cluster_upgrade_health_policy': ClusterUpgradeHealthPolicy,
            'code_version': str,
            'config_version': str,
            'enable_delta_health_evaluation': bool,
            'force_restart': bool,
            'monitoring_policy': object,
            'rolling_upgrade_mode': RollingUpgradeMode,
            'upgrade_kind': str,
            'upgrade_replica_set_check_timeout_in_seconds': int
        }

        self.attribute_map = {
            'application_health_policy_map': 'ApplicationHealthPolicyMap',
            'cluster_upgrade_health_policy': 'ClusterUpgradeHealthPolicy',
            'code_version': 'CodeVersion',
            'config_version': 'ConfigVersion',
            'enable_delta_health_evaluation': 'EnableDeltaHealthEvaluation',
            'force_restart': 'ForceRestart',
            'monitoring_policy': 'MonitoringPolicy',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'upgrade_kind': 'UpgradeKind',
            'upgrade_replica_set_check_timeout_in_seconds': 'UpgradeReplicaSetCheckTimeoutInSeconds'
        }

        self._application_health_policy_map = application_health_policy_map
        self._cluster_upgrade_health_policy = cluster_upgrade_health_policy
        self._code_version = code_version
        self._config_version = config_version
        self._enable_delta_health_evaluation = enable_delta_health_evaluation
        self._force_restart = force_restart
        self._monitoring_policy = monitoring_policy
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._upgrade_kind = upgrade_kind
        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartClusterUpgrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartClusterUpgrade of this StartClusterUpgrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy_map(self):
        """Gets the application_health_policy_map of this StartClusterUpgrade.


        :return: The application_health_policy_map of this StartClusterUpgrade.
        :rtype: ApplicationHealthPolicyMap
        """
        return self._application_health_policy_map

    @application_health_policy_map.setter
    def application_health_policy_map(self, application_health_policy_map):
        """Sets the application_health_policy_map of this StartClusterUpgrade.


        :param application_health_policy_map: The application_health_policy_map of this StartClusterUpgrade.
        :type application_health_policy_map: ApplicationHealthPolicyMap
        """

        self._application_health_policy_map = application_health_policy_map

    @property
    def cluster_upgrade_health_policy(self):
        """Gets the cluster_upgrade_health_policy of this StartClusterUpgrade.


        :return: The cluster_upgrade_health_policy of this StartClusterUpgrade.
        :rtype: ClusterUpgradeHealthPolicy
        """
        return self._cluster_upgrade_health_policy

    @cluster_upgrade_health_policy.setter
    def cluster_upgrade_health_policy(self, cluster_upgrade_health_policy):
        """Sets the cluster_upgrade_health_policy of this StartClusterUpgrade.


        :param cluster_upgrade_health_policy: The cluster_upgrade_health_policy of this StartClusterUpgrade.
        :type cluster_upgrade_health_policy: ClusterUpgradeHealthPolicy
        """

        self._cluster_upgrade_health_policy = cluster_upgrade_health_policy

    @property
    def code_version(self):
        """Gets the code_version of this StartClusterUpgrade.

        The version of the code

        :return: The code_version of this StartClusterUpgrade.
        :rtype: str
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this StartClusterUpgrade.

        The version of the code

        :param code_version: The code_version of this StartClusterUpgrade.
        :type code_version: str
        """

        self._code_version = code_version

    @property
    def config_version(self):
        """Gets the config_version of this StartClusterUpgrade.

        The version of the config

        :return: The config_version of this StartClusterUpgrade.
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this StartClusterUpgrade.

        The version of the config

        :param config_version: The config_version of this StartClusterUpgrade.
        :type config_version: str
        """

        self._config_version = config_version

    @property
    def enable_delta_health_evaluation(self):
        """Gets the enable_delta_health_evaluation of this StartClusterUpgrade.

        The evaluation of the enable delta health

        :return: The enable_delta_health_evaluation of this StartClusterUpgrade.
        :rtype: bool
        """
        return self._enable_delta_health_evaluation

    @enable_delta_health_evaluation.setter
    def enable_delta_health_evaluation(self, enable_delta_health_evaluation):
        """Sets the enable_delta_health_evaluation of this StartClusterUpgrade.

        The evaluation of the enable delta health

        :param enable_delta_health_evaluation: The enable_delta_health_evaluation of this StartClusterUpgrade.
        :type enable_delta_health_evaluation: bool
        """

        self._enable_delta_health_evaluation = enable_delta_health_evaluation

    @property
    def force_restart(self):
        """Gets the force_restart of this StartClusterUpgrade.

        The flag of the force restart

        :return: The force_restart of this StartClusterUpgrade.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this StartClusterUpgrade.

        The flag of the force restart

        :param force_restart: The force_restart of this StartClusterUpgrade.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def monitoring_policy(self):
        """Gets the monitoring_policy of this StartClusterUpgrade.

        The policy of the monitoring

        :return: The monitoring_policy of this StartClusterUpgrade.
        :rtype: object
        """
        return self._monitoring_policy

    @monitoring_policy.setter
    def monitoring_policy(self, monitoring_policy):
        """Sets the monitoring_policy of this StartClusterUpgrade.

        The policy of the monitoring

        :param monitoring_policy: The monitoring_policy of this StartClusterUpgrade.
        :type monitoring_policy: object
        """

        self._monitoring_policy = monitoring_policy

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this StartClusterUpgrade.


        :return: The rolling_upgrade_mode of this StartClusterUpgrade.
        :rtype: RollingUpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this StartClusterUpgrade.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this StartClusterUpgrade.
        :type rolling_upgrade_mode: RollingUpgradeMode
        """

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this StartClusterUpgrade.

        The kind of the upgrade

        :return: The upgrade_kind of this StartClusterUpgrade.
        :rtype: str
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this StartClusterUpgrade.

        The kind of the upgrade

        :param upgrade_kind: The upgrade_kind of this StartClusterUpgrade.
        :type upgrade_kind: str
        """

        self._upgrade_kind = upgrade_kind

    @property
    def upgrade_replica_set_check_timeout_in_seconds(self):
        """Gets the upgrade_replica_set_check_timeout_in_seconds of this StartClusterUpgrade.

        The seconds of the upgrade replica set check timeout

        :return: The upgrade_replica_set_check_timeout_in_seconds of this StartClusterUpgrade.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout_in_seconds

    @upgrade_replica_set_check_timeout_in_seconds.setter
    def upgrade_replica_set_check_timeout_in_seconds(self, upgrade_replica_set_check_timeout_in_seconds):
        """Sets the upgrade_replica_set_check_timeout_in_seconds of this StartClusterUpgrade.

        The seconds of the upgrade replica set check timeout

        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this StartClusterUpgrade.
        :type upgrade_replica_set_check_timeout_in_seconds: int
        """

        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds
