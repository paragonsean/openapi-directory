# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_parameters_inner import ApplicationParametersInner
from openapi_server.models.health_state import HealthState
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state: HealthState=None, id: str=None, name: str=None, parameters: List[ApplicationParametersInner]=None, status: str=None, type_name: str=None, type_version: str=None):
        """Application - a model defined in OpenAPI

        :param health_state: The health_state of this Application.
        :param id: The id of this Application.
        :param name: The name of this Application.
        :param parameters: The parameters of this Application.
        :param status: The status of this Application.
        :param type_name: The type_name of this Application.
        :param type_version: The type_version of this Application.
        """
        self.openapi_types = {
            'health_state': HealthState,
            'id': str,
            'name': str,
            'parameters': List[ApplicationParametersInner],
            'status': str,
            'type_name': str,
            'type_version': str
        }

        self.attribute_map = {
            'health_state': 'HealthState',
            'id': 'Id',
            'name': 'Name',
            'parameters': 'Parameters',
            'status': 'Status',
            'type_name': 'TypeName',
            'type_version': 'TypeVersion'
        }

        self._health_state = health_state
        self._id = id
        self._name = name
        self._parameters = parameters
        self._status = status
        self._type_name = type_name
        self._type_version = type_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state(self):
        """Gets the health_state of this Application.


        :return: The health_state of this Application.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Application.


        :param health_state: The health_state of this Application.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this Application.


        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.


        :param id: The id of this Application.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Application.


        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.


        :param name: The name of this Application.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this Application.


        :return: The parameters of this Application.
        :rtype: List[ApplicationParametersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Application.


        :param parameters: The parameters of this Application.
        :type parameters: List[ApplicationParametersInner]
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this Application.


        :return: The status of this Application.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Application.


        :param status: The status of this Application.
        :type status: str
        """

        self._status = status

    @property
    def type_name(self):
        """Gets the type_name of this Application.


        :return: The type_name of this Application.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this Application.


        :param type_name: The type_name of this Application.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def type_version(self):
        """Gets the type_version of this Application.


        :return: The type_version of this Application.
        :rtype: str
        """
        return self._type_version

    @type_version.setter
    def type_version(self, type_version):
        """Sets the type_version of this Application.


        :param type_version: The type_version of this Application.
        :type type_version: str
        """

        self._type_version = type_version
