# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartitionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high_key: str=None, id: str=None, low_key: str=None, name: List[str]=None, service_partition_kind: str=None):
        """PartitionInformation - a model defined in OpenAPI

        :param high_key: The high_key of this PartitionInformation.
        :param id: The id of this PartitionInformation.
        :param low_key: The low_key of this PartitionInformation.
        :param name: The name of this PartitionInformation.
        :param service_partition_kind: The service_partition_kind of this PartitionInformation.
        """
        self.openapi_types = {
            'high_key': str,
            'id': str,
            'low_key': str,
            'name': List[str],
            'service_partition_kind': str
        }

        self.attribute_map = {
            'high_key': 'HighKey',
            'id': 'Id',
            'low_key': 'LowKey',
            'name': 'Name',
            'service_partition_kind': 'ServicePartitionKind'
        }

        self._high_key = high_key
        self._id = id
        self._low_key = low_key
        self._name = name
        self._service_partition_kind = service_partition_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionInformation of this PartitionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high_key(self):
        """Gets the high_key of this PartitionInformation.


        :return: The high_key of this PartitionInformation.
        :rtype: str
        """
        return self._high_key

    @high_key.setter
    def high_key(self, high_key):
        """Sets the high_key of this PartitionInformation.


        :param high_key: The high_key of this PartitionInformation.
        :type high_key: str
        """

        self._high_key = high_key

    @property
    def id(self):
        """Gets the id of this PartitionInformation.


        :return: The id of this PartitionInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartitionInformation.


        :param id: The id of this PartitionInformation.
        :type id: str
        """

        self._id = id

    @property
    def low_key(self):
        """Gets the low_key of this PartitionInformation.


        :return: The low_key of this PartitionInformation.
        :rtype: str
        """
        return self._low_key

    @low_key.setter
    def low_key(self, low_key):
        """Sets the low_key of this PartitionInformation.


        :param low_key: The low_key of this PartitionInformation.
        :type low_key: str
        """

        self._low_key = low_key

    @property
    def name(self):
        """Gets the name of this PartitionInformation.


        :return: The name of this PartitionInformation.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartitionInformation.


        :param name: The name of this PartitionInformation.
        :type name: List[str]
        """

        self._name = name

    @property
    def service_partition_kind(self):
        """Gets the service_partition_kind of this PartitionInformation.


        :return: The service_partition_kind of this PartitionInformation.
        :rtype: str
        """
        return self._service_partition_kind

    @service_partition_kind.setter
    def service_partition_kind(self, service_partition_kind):
        """Sets the service_partition_kind of this PartitionInformation.


        :param service_partition_kind: The service_partition_kind of this PartitionInformation.
        :type service_partition_kind: str
        """
        allowed_values = ["Invalid", "Singleton", "Int64Range", "Named"]  # noqa: E501
        if service_partition_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `service_partition_kind` ({0}), must be one of {1}"
                .format(service_partition_kind, allowed_values)
            )

        self._service_partition_kind = service_partition_kind
