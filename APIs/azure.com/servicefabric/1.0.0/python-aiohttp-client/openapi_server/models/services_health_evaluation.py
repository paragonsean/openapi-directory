# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation import HealthEvaluation
from openapi_server.models.health_state import HealthState
from openapi_server.models.unhealthy_evaluation import UnhealthyEvaluation
from openapi_server import util


class ServicesHealthEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_percent_unhealthy_services: int=None, service_type_name: str=None, total_count: int=None, unhealthy_evaluations: List[UnhealthyEvaluation]=None, aggregated_health_state: HealthState=None, description: str=None, kind: str=None):
        """ServicesHealthEvaluation - a model defined in OpenAPI

        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ServicesHealthEvaluation.
        :param service_type_name: The service_type_name of this ServicesHealthEvaluation.
        :param total_count: The total_count of this ServicesHealthEvaluation.
        :param unhealthy_evaluations: The unhealthy_evaluations of this ServicesHealthEvaluation.
        :param aggregated_health_state: The aggregated_health_state of this ServicesHealthEvaluation.
        :param description: The description of this ServicesHealthEvaluation.
        :param kind: The kind of this ServicesHealthEvaluation.
        """
        self.openapi_types = {
            'max_percent_unhealthy_services': int,
            'service_type_name': str,
            'total_count': int,
            'unhealthy_evaluations': List[UnhealthyEvaluation],
            'aggregated_health_state': HealthState,
            'description': str,
            'kind': str
        }

        self.attribute_map = {
            'max_percent_unhealthy_services': 'MaxPercentUnhealthyServices',
            'service_type_name': 'ServiceTypeName',
            'total_count': 'TotalCount',
            'unhealthy_evaluations': 'UnhealthyEvaluations',
            'aggregated_health_state': 'AggregatedHealthState',
            'description': 'Description',
            'kind': 'Kind'
        }

        self._max_percent_unhealthy_services = max_percent_unhealthy_services
        self._service_type_name = service_type_name
        self._total_count = total_count
        self._unhealthy_evaluations = unhealthy_evaluations
        self._aggregated_health_state = aggregated_health_state
        self._description = description
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesHealthEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicesHealthEvaluation of this ServicesHealthEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_percent_unhealthy_services(self):
        """Gets the max_percent_unhealthy_services of this ServicesHealthEvaluation.


        :return: The max_percent_unhealthy_services of this ServicesHealthEvaluation.
        :rtype: int
        """
        return self._max_percent_unhealthy_services

    @max_percent_unhealthy_services.setter
    def max_percent_unhealthy_services(self, max_percent_unhealthy_services):
        """Sets the max_percent_unhealthy_services of this ServicesHealthEvaluation.


        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ServicesHealthEvaluation.
        :type max_percent_unhealthy_services: int
        """

        self._max_percent_unhealthy_services = max_percent_unhealthy_services

    @property
    def service_type_name(self):
        """Gets the service_type_name of this ServicesHealthEvaluation.


        :return: The service_type_name of this ServicesHealthEvaluation.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this ServicesHealthEvaluation.


        :param service_type_name: The service_type_name of this ServicesHealthEvaluation.
        :type service_type_name: str
        """

        self._service_type_name = service_type_name

    @property
    def total_count(self):
        """Gets the total_count of this ServicesHealthEvaluation.


        :return: The total_count of this ServicesHealthEvaluation.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ServicesHealthEvaluation.


        :param total_count: The total_count of this ServicesHealthEvaluation.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this ServicesHealthEvaluation.


        :return: The unhealthy_evaluations of this ServicesHealthEvaluation.
        :rtype: List[UnhealthyEvaluation]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this ServicesHealthEvaluation.


        :param unhealthy_evaluations: The unhealthy_evaluations of this ServicesHealthEvaluation.
        :type unhealthy_evaluations: List[UnhealthyEvaluation]
        """

        self._unhealthy_evaluations = unhealthy_evaluations

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this ServicesHealthEvaluation.


        :return: The aggregated_health_state of this ServicesHealthEvaluation.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this ServicesHealthEvaluation.


        :param aggregated_health_state: The aggregated_health_state of this ServicesHealthEvaluation.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def description(self):
        """Gets the description of this ServicesHealthEvaluation.


        :return: The description of this ServicesHealthEvaluation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicesHealthEvaluation.


        :param description: The description of this ServicesHealthEvaluation.
        :type description: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this ServicesHealthEvaluation.


        :return: The kind of this ServicesHealthEvaluation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ServicesHealthEvaluation.


        :param kind: The kind of this ServicesHealthEvaluation.
        :type kind: str
        """
        allowed_values = ["Invalid", "Event", "Replicas", "Partitions", "DeployedServicePackages", "DeployedApplications", "Services", "Nodes", "Applications", "SystemApplication", "UpgradeDomainDeployedApplications", "UpgradeDomainNodes", "Node", "Replica", "Partition", "Service", "DeployedServicePackage", "DeployedApplication", "Application", "DeltaNodesCheck", "UpgradeDomainDeltaNodesCheck", "ApplicationTypeApplications"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind
