/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationDescription;
import org.openapitools.client.model.ApplicationHealth;
import org.openapitools.client.model.ApplicationHealthReport;
import org.openapitools.client.model.ApplicationList;
import org.openapitools.client.model.ApplicationManifest;
import org.openapitools.client.model.ApplicationType;
import org.openapitools.client.model.ApplicationUpgrade;
import org.openapitools.client.model.ClusterHealth;
import org.openapitools.client.model.ClusterHealthReport;
import org.openapitools.client.model.ClusterLoadInformation;
import org.openapitools.client.model.ClusterUpgradeProgress;
import org.openapitools.client.model.CreateServiceDescription;
import org.openapitools.client.model.CreateServiceGroupDescription;
import org.openapitools.client.model.DeployedApplication;
import org.openapitools.client.model.DeployedApplicationHealth;
import org.openapitools.client.model.DeployedApplicationHealthReport;
import org.openapitools.client.model.DeployedCodePackage;
import org.openapitools.client.model.DeployedReplica;
import org.openapitools.client.model.DeployedReplicaDetail;
import org.openapitools.client.model.DeployedServiceHealthReport;
import org.openapitools.client.model.DeployedServicePackage;
import org.openapitools.client.model.DeployedServicePackageHealth;
import org.openapitools.client.model.DeployedServiceType;
import org.openapitools.client.model.DisableNode;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.NodeHealth;
import org.openapitools.client.model.NodeHealthReport;
import org.openapitools.client.model.NodeList;
import org.openapitools.client.model.NodeLoadInformation;
import org.openapitools.client.model.Partition;
import org.openapitools.client.model.PartitionHealth;
import org.openapitools.client.model.PartitionHealthReport;
import org.openapitools.client.model.PartitionList;
import org.openapitools.client.model.PartitionLoadInformation;
import org.openapitools.client.model.RegisterApplicationType;
import org.openapitools.client.model.RegisterClusterPackage;
import org.openapitools.client.model.Replica;
import org.openapitools.client.model.ReplicaHealth;
import org.openapitools.client.model.ReplicaHealthReport;
import org.openapitools.client.model.ReplicaList;
import org.openapitools.client.model.ReplicaLoadInformation;
import org.openapitools.client.model.ResolvedServicePartition;
import org.openapitools.client.model.ResumeApplicationUpgrade;
import org.openapitools.client.model.ResumeClusterUpgrade;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.ServiceDescription;
import org.openapitools.client.model.ServiceDescriptionTemplate;
import org.openapitools.client.model.ServiceGroupDescription;
import org.openapitools.client.model.ServiceGroupMember;
import org.openapitools.client.model.ServiceHealth;
import org.openapitools.client.model.ServiceHealthReport;
import org.openapitools.client.model.ServiceList;
import org.openapitools.client.model.ServiceManifest;
import org.openapitools.client.model.ServiceType;
import org.openapitools.client.model.StartApplicationUpgrade;
import org.openapitools.client.model.StartClusterUpgrade;
import org.openapitools.client.model.UnregisterApplicationType;
import org.openapitools.client.model.UnregisterClusterPackage;
import org.openapitools.client.model.UpdateApplicationUpgrade;
import org.openapitools.client.model.UpdateClusterUpgrade;
import org.openapitools.client.model.UpdateServiceDescription;
import org.openapitools.client.model.UpdateServiceGroupDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get application healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationHealthsGetTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        String deployedApplicationsHealthStateFilter = null;
        Integer timeout = null;
        ApplicationHealth response = api.applicationHealthsGet(applicationName, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send application health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationHealthsSendTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        ApplicationHealthReport applicationHealthReport = null;
        Integer timeout = null;
        String response = api.applicationHealthsSend(applicationName, apiVersion, applicationHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get application manifests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationManifestsGetTest() throws ApiException {
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        String apiVersion = null;
        Integer timeout = null;
        ApplicationManifest response = api.applicationManifestsGet(applicationTypeName, applicationTypeVersion, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get application types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationTypesGetTest() throws ApiException {
        String applicationTypeName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<ApplicationType> response = api.applicationTypesGet(applicationTypeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List application types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationTypesListTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        List<ApplicationType> response = api.applicationTypesList(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Register application types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationTypesRegisterTest() throws ApiException {
        String apiVersion = null;
        RegisterApplicationType registerApplicationType = null;
        Integer timeout = null;
        String response = api.applicationTypesRegister(apiVersion, registerApplicationType, timeout);
        // TODO: test validations
    }

    /**
     * Unregister application types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationTypesUnregisterTest() throws ApiException {
        String applicationTypeName = null;
        String apiVersion = null;
        UnregisterApplicationType unregisterApplicationType = null;
        Integer timeout = null;
        String response = api.applicationTypesUnregister(applicationTypeName, apiVersion, unregisterApplicationType, timeout);
        // TODO: test validations
    }

    /**
     * Start application upgrade rollbacks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationUpgradeRollbacksStartTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.applicationUpgradeRollbacksStart(applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get application upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationUpgradesGetTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        ApplicationUpgrade response = api.applicationUpgradesGet(applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Resume application upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationUpgradesResumeTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        ResumeApplicationUpgrade resumeApplicationUpgrade = null;
        Integer timeout = null;
        String response = api.applicationUpgradesResume(applicationName, apiVersion, resumeApplicationUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Start application upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationUpgradesStartTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        StartApplicationUpgrade startApplicationUpgrade = null;
        Integer timeout = null;
        String response = api.applicationUpgradesStart(applicationName, apiVersion, startApplicationUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Update application upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationUpgradesUpdateTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        UpdateApplicationUpgrade updateApplicationUpgrade = null;
        Integer timeout = null;
        String response = api.applicationUpgradesUpdate(applicationName, apiVersion, updateApplicationUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Create applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsCreateTest() throws ApiException {
        String apiVersion = null;
        ApplicationDescription applicationDescription = null;
        Integer timeout = null;
        String response = api.applicationsCreate(apiVersion, applicationDescription, timeout);
        // TODO: test validations
    }

    /**
     * Get applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsGetTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        Application response = api.applicationsGet(applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsListTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String continuationToken = null;
        ApplicationList response = api.applicationsList(apiVersion, timeout, continuationToken);
        // TODO: test validations
    }

    /**
     * Remove applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsRemoveTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        Boolean forceRemove = null;
        Integer timeout = null;
        String response = api.applicationsRemove(applicationName, apiVersion, forceRemove, timeout);
        // TODO: test validations
    }

    /**
     * Get cluster healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterHealthsGetTest() throws ApiException {
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        String nodesHealthStateFilter = null;
        String applicationsHealthStateFilter = null;
        Integer timeout = null;
        ClusterHealth response = api.clusterHealthsGet(apiVersion, eventsHealthStateFilter, nodesHealthStateFilter, applicationsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Report cluster healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterHealthsSendTest() throws ApiException {
        String apiVersion = null;
        ClusterHealthReport clusterHealthReport = null;
        Integer timeout = null;
        String response = api.clusterHealthsSend(apiVersion, clusterHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get cluster load informations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterLoadInformationsGetTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        ClusterLoadInformation response = api.clusterLoadInformationsGet(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get cluster manifests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterManifestsGetTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String response = api.clusterManifestsGet(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Register cluster packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterPackagesRegisterTest() throws ApiException {
        String apiVersion = null;
        RegisterClusterPackage registerClusterPackage = null;
        Integer timeout = null;
        String response = api.clusterPackagesRegister(apiVersion, registerClusterPackage, timeout);
        // TODO: test validations
    }

    /**
     * Unregister cluster packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterPackagesUnregisterTest() throws ApiException {
        String apiVersion = null;
        UnregisterClusterPackage unregisterClusterPackage = null;
        Integer timeout = null;
        String response = api.clusterPackagesUnregister(apiVersion, unregisterClusterPackage, timeout);
        // TODO: test validations
    }

    /**
     * Resume cluster upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterUpgradesResumeTest() throws ApiException {
        String apiVersion = null;
        ResumeClusterUpgrade resumeClusterUpgrade = null;
        Integer timeout = null;
        String response = api.clusterUpgradesResume(apiVersion, resumeClusterUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Rollback cluster upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterUpgradesRollbackTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String response = api.clusterUpgradesRollback(apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Start cluster upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterUpgradesStartTest() throws ApiException {
        String apiVersion = null;
        StartClusterUpgrade startClusterUpgrade = null;
        Integer timeout = null;
        String response = api.clusterUpgradesStart(apiVersion, startClusterUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Update cluster upgrades
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clusterUpgradesUpdateTest() throws ApiException {
        String apiVersion = null;
        UpdateClusterUpgrade updateClusterUpgrade = null;
        Integer timeout = null;
        String response = api.clusterUpgradesUpdate(apiVersion, updateClusterUpgrade, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed application healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedApplicationHealthsGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        String deployedServicePackagesHealthStateFilter = null;
        Integer timeout = null;
        DeployedApplicationHealth response = api.deployedApplicationHealthsGet(nodeName, applicationName, apiVersion, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send deployed application health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedApplicationHealthsSendTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        DeployedApplicationHealthReport deployedApplicationHealthReport = null;
        Integer timeout = null;
        String response = api.deployedApplicationHealthsSend(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedApplicationsGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        DeployedApplication response = api.deployedApplicationsGet(nodeName, applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List deployed applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedApplicationsListTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<DeployedApplication> response = api.deployedApplicationsList(nodeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed code packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedCodePackagesGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<DeployedCodePackage> response = api.deployedCodePackagesGet(nodeName, applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed replica details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedReplicaDetailsGetTest() throws ApiException {
        String nodeName = null;
        String partitionName = null;
        String replicaId = null;
        String apiVersion = null;
        Integer timeout = null;
        DeployedReplicaDetail response = api.deployedReplicaDetailsGet(nodeName, partitionName, replicaId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed replicas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedReplicasGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<DeployedReplica> response = api.deployedReplicasGet(nodeName, applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed service package healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedServicePackageHealthsGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String servicePackageName = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        Integer timeout = null;
        DeployedServicePackageHealth response = api.deployedServicePackageHealthsGet(nodeName, applicationName, servicePackageName, apiVersion, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send deployed service package health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedServicePackageHealthsSendTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String serviceManifestName = null;
        String apiVersion = null;
        DeployedServiceHealthReport deployedServicePackageHealthReport = null;
        Integer timeout = null;
        String response = api.deployedServicePackageHealthsSend(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed service packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedServicePackagesGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<DeployedServicePackage> response = api.deployedServicePackagesGet(nodeName, applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get deployed service types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployedServiceTypesGetTest() throws ApiException {
        String nodeName = null;
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        List<DeployedServiceType> response = api.deployedServiceTypesGet(nodeName, applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get node healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodeHealthsGetTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        Integer timeout = null;
        NodeHealth response = api.nodeHealthsGet(nodeName, apiVersion, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send node health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodeHealthsSendTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        NodeHealthReport nodeHealthReport = null;
        Integer timeout = null;
        String response = api.nodeHealthsSend(nodeName, apiVersion, nodeHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get node load informations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodeLoadInformationsGetTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        Integer timeout = null;
        NodeLoadInformation response = api.nodeLoadInformationsGet(nodeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Remove node states
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodeStatesRemoveTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.nodeStatesRemove(nodeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Disable nodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesDisableTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        DisableNode disableNode = null;
        Integer timeout = null;
        String response = api.nodesDisable(nodeName, apiVersion, disableNode, timeout);
        // TODO: test validations
    }

    /**
     * Enable nodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesEnableTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.nodesEnable(nodeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get nodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesGetTest() throws ApiException {
        String nodeName = null;
        String apiVersion = null;
        Integer timeout = null;
        Node response = api.nodesGet(nodeName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List nodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nodesListTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        String continuationToken = null;
        NodeList response = api.nodesList(apiVersion, timeout, continuationToken);
        // TODO: test validations
    }

    /**
     * Get partition healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionHealthsGetTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        String replicasHealthStateFilter = null;
        Integer timeout = null;
        PartitionHealth response = api.partitionHealthsGet(partitionId, apiVersion, eventsHealthStateFilter, replicasHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send partition health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionHealthsSendTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        PartitionHealthReport partitionHealthReport = null;
        Integer timeout = null;
        String response = api.partitionHealthsSend(partitionId, apiVersion, partitionHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Repair partition lists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionListsRepairTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.partitionListsRepair(serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get partition load informations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionLoadInformationsGetTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        Integer timeout = null;
        PartitionLoadInformation response = api.partitionLoadInformationsGet(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Reset partition loads
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionLoadsResetTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.partitionLoadsReset(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get partitions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionsGetTest() throws ApiException {
        String serviceName = null;
        String partitionId = null;
        String apiVersion = null;
        Integer timeout = null;
        Partition response = api.partitionsGet(serviceName, partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List partitions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionsListTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        PartitionList response = api.partitionsList(serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Repair partitions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partitionsRepairTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.partitionsRepair(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get replica healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicaHealthsGetTest() throws ApiException {
        String partitionId = null;
        String replicaId = null;
        String apiVersion = null;
        String eventsHealthStateFilter = null;
        Integer timeout = null;
        ReplicaHealth response = api.replicaHealthsGet(partitionId, replicaId, apiVersion, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Send replica healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicaHealthsSendTest() throws ApiException {
        String partitionId = null;
        String replicaId = null;
        String apiVersion = null;
        ReplicaHealthReport replicaHealthReport = null;
        Integer timeout = null;
        String response = api.replicaHealthsSend(partitionId, replicaId, apiVersion, replicaHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get replica load informations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicaLoadInformationsGetTest() throws ApiException {
        String partitionId = null;
        String replicaId = null;
        String apiVersion = null;
        Integer timeout = null;
        ReplicaLoadInformation response = api.replicaLoadInformationsGet(partitionId, replicaId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get replicas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicasGetTest() throws ApiException {
        String partitionId = null;
        String replicaId = null;
        String apiVersion = null;
        Integer timeout = null;
        Replica response = api.replicasGet(partitionId, replicaId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List replicas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replicasListTest() throws ApiException {
        String partitionId = null;
        String apiVersion = null;
        Integer timeout = null;
        ReplicaList response = api.replicasList(partitionId, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get service descriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceDescriptionsGetTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceDescription response = api.serviceDescriptionsGet(serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Create service from templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceFromTemplatesCreateTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        ServiceDescriptionTemplate serviceDescriptionTemplate = null;
        Integer timeout = null;
        String response = api.serviceFromTemplatesCreate(applicationName, apiVersion, serviceDescriptionTemplate, timeout);
        // TODO: test validations
    }

    /**
     * Get service group descriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupDescriptionsGetTest() throws ApiException {
        String applicationName = null;
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceGroupDescription response = api.serviceGroupDescriptionsGet(applicationName, serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Create service group from templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupFromTemplatesCreateTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        ServiceDescriptionTemplate serviceDescriptionTemplate = null;
        Integer timeout = null;
        String response = api.serviceGroupFromTemplatesCreate(applicationName, apiVersion, serviceDescriptionTemplate, timeout);
        // TODO: test validations
    }

    /**
     * Get service group members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupMembersGetTest() throws ApiException {
        String applicationName = null;
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceGroupMember response = api.serviceGroupMembersGet(applicationName, serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Create service groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupsCreateTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        CreateServiceGroupDescription createServiceGroupDescription = null;
        Integer timeout = null;
        String response = api.serviceGroupsCreate(applicationName, apiVersion, createServiceGroupDescription, timeout);
        // TODO: test validations
    }

    /**
     * Remove service groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupsRemoveTest() throws ApiException {
        String applicationName = null;
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.serviceGroupsRemove(applicationName, serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Update service groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceGroupsUpdateTest() throws ApiException {
        String applicationName = null;
        String serviceName = null;
        String apiVersion = null;
        UpdateServiceGroupDescription updateServiceGroupDescription = null;
        Integer timeout = null;
        String response = api.serviceGroupsUpdate(applicationName, serviceName, apiVersion, updateServiceGroupDescription, timeout);
        // TODO: test validations
    }

    /**
     * Get service healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceHealthsGetTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceHealth response = api.serviceHealthsGet(serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Send service healths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceHealthsSendTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ServiceHealthReport serviceHealthReport = null;
        Integer timeout = null;
        String response = api.serviceHealthsSend(serviceName, apiVersion, serviceHealthReport, timeout);
        // TODO: test validations
    }

    /**
     * Get service manifests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceManifestsGetTest() throws ApiException {
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        String serviceManifestName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceManifest response = api.serviceManifestsGet(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Get service types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceTypesGetTest() throws ApiException {
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        String apiVersion = null;
        Integer timeout = null;
        List<ServiceType> response = api.serviceTypesGet(applicationTypeName, applicationTypeVersion, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Create services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesCreateTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        CreateServiceDescription createServiceDescription = null;
        Integer timeout = null;
        String response = api.servicesCreate(applicationName, apiVersion, createServiceDescription, timeout);
        // TODO: test validations
    }

    /**
     * Get services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesGetTest() throws ApiException {
        String applicationName = null;
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        Service response = api.servicesGet(applicationName, serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * List services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListTest() throws ApiException {
        String applicationName = null;
        String apiVersion = null;
        Integer timeout = null;
        ServiceList response = api.servicesList(applicationName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Remove services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesRemoveTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer timeout = null;
        String response = api.servicesRemove(serviceName, apiVersion, timeout);
        // TODO: test validations
    }

    /**
     * Resolve services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesResolveTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Integer partitionKeyType = null;
        String partitionKeyValue = null;
        String previousRspVersion = null;
        Integer timeout = null;
        ResolvedServicePartition response = api.servicesResolve(serviceName, apiVersion, partitionKeyType, partitionKeyValue, previousRspVersion, timeout);
        // TODO: test validations
    }

    /**
     * Update services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesUpdateTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        UpdateServiceDescription updateServiceDescription = null;
        Integer timeout = null;
        String response = api.servicesUpdate(serviceName, apiVersion, updateServiceDescription, timeout);
        // TODO: test validations
    }

    /**
     * Get upgrade progresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeProgressesGetTest() throws ApiException {
        String apiVersion = null;
        Integer timeout = null;
        ClusterUpgradeProgress response = api.upgradeProgressesGet(apiVersion, timeout);
        // TODO: test validations
    }

}
