/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationDescription;
import org.openapitools.client.model.ApplicationHealth;
import org.openapitools.client.model.ApplicationHealthReport;
import org.openapitools.client.model.ApplicationList;
import org.openapitools.client.model.ApplicationManifest;
import org.openapitools.client.model.ApplicationType;
import org.openapitools.client.model.ApplicationUpgrade;
import org.openapitools.client.model.ClusterHealth;
import org.openapitools.client.model.ClusterHealthReport;
import org.openapitools.client.model.ClusterLoadInformation;
import org.openapitools.client.model.ClusterUpgradeProgress;
import org.openapitools.client.model.CreateServiceDescription;
import org.openapitools.client.model.CreateServiceGroupDescription;
import org.openapitools.client.model.DeployedApplication;
import org.openapitools.client.model.DeployedApplicationHealth;
import org.openapitools.client.model.DeployedApplicationHealthReport;
import org.openapitools.client.model.DeployedCodePackage;
import org.openapitools.client.model.DeployedReplica;
import org.openapitools.client.model.DeployedReplicaDetail;
import org.openapitools.client.model.DeployedServiceHealthReport;
import org.openapitools.client.model.DeployedServicePackage;
import org.openapitools.client.model.DeployedServicePackageHealth;
import org.openapitools.client.model.DeployedServiceType;
import org.openapitools.client.model.DisableNode;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.NodeHealth;
import org.openapitools.client.model.NodeHealthReport;
import org.openapitools.client.model.NodeList;
import org.openapitools.client.model.NodeLoadInformation;
import org.openapitools.client.model.Partition;
import org.openapitools.client.model.PartitionHealth;
import org.openapitools.client.model.PartitionHealthReport;
import org.openapitools.client.model.PartitionList;
import org.openapitools.client.model.PartitionLoadInformation;
import org.openapitools.client.model.RegisterApplicationType;
import org.openapitools.client.model.RegisterClusterPackage;
import org.openapitools.client.model.Replica;
import org.openapitools.client.model.ReplicaHealth;
import org.openapitools.client.model.ReplicaHealthReport;
import org.openapitools.client.model.ReplicaList;
import org.openapitools.client.model.ReplicaLoadInformation;
import org.openapitools.client.model.ResolvedServicePartition;
import org.openapitools.client.model.ResumeApplicationUpgrade;
import org.openapitools.client.model.ResumeClusterUpgrade;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.ServiceDescription;
import org.openapitools.client.model.ServiceDescriptionTemplate;
import org.openapitools.client.model.ServiceGroupDescription;
import org.openapitools.client.model.ServiceGroupMember;
import org.openapitools.client.model.ServiceHealth;
import org.openapitools.client.model.ServiceHealthReport;
import org.openapitools.client.model.ServiceList;
import org.openapitools.client.model.ServiceManifest;
import org.openapitools.client.model.ServiceType;
import org.openapitools.client.model.StartApplicationUpgrade;
import org.openapitools.client.model.StartClusterUpgrade;
import org.openapitools.client.model.UnregisterApplicationType;
import org.openapitools.client.model.UnregisterClusterPackage;
import org.openapitools.client.model.UpdateApplicationUpgrade;
import org.openapitools.client.model.UpdateClusterUpgrade;
import org.openapitools.client.model.UpdateServiceDescription;
import org.openapitools.client.model.UpdateServiceGroupDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationHealthsGet
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedApplicationsHealthStateFilter The filter of the deployed application health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationHealthsGetCall(String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedApplicationsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetHealth"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (deployedApplicationsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeployedApplicationsHealthStateFilter", deployedApplicationsHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationHealthsGetValidateBeforeCall(String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedApplicationsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationHealthsGet(Async)");
        }

        return applicationHealthsGetCall(applicationName, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get application healths
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedApplicationsHealthStateFilter The filter of the deployed application health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApplicationHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationHealth applicationHealthsGet(String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedApplicationsHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<ApplicationHealth> localVarResp = applicationHealthsGetWithHttpInfo(applicationName, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get application healths
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedApplicationsHealthStateFilter The filter of the deployed application health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ApplicationHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationHealth> applicationHealthsGetWithHttpInfo(String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedApplicationsHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationHealthsGetValidateBeforeCall(applicationName, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<ApplicationHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get application healths
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedApplicationsHealthStateFilter The filter of the deployed application health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationHealthsGetAsync(String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedApplicationsHealthStateFilter, Integer timeout, final ApiCallback<ApplicationHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationHealthsGetValidateBeforeCall(applicationName, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<ApplicationHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationHealthsSend
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param applicationHealthReport The report of the application health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationHealthsSendCall(String applicationName, String apiVersion, ApplicationHealthReport applicationHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationHealthReport;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/ReportHealth"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationHealthsSendValidateBeforeCall(String applicationName, String apiVersion, ApplicationHealthReport applicationHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationHealthsSend(Async)");
        }

        // verify the required parameter 'applicationHealthReport' is set
        if (applicationHealthReport == null) {
            throw new ApiException("Missing the required parameter 'applicationHealthReport' when calling applicationHealthsSend(Async)");
        }

        return applicationHealthsSendCall(applicationName, apiVersion, applicationHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send application health
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param applicationHealthReport The report of the application health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationHealthsSend(String applicationName, String apiVersion, ApplicationHealthReport applicationHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationHealthsSendWithHttpInfo(applicationName, apiVersion, applicationHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send application health
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param applicationHealthReport The report of the application health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationHealthsSendWithHttpInfo(String applicationName, String apiVersion, ApplicationHealthReport applicationHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationHealthsSendValidateBeforeCall(applicationName, apiVersion, applicationHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send application health
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param applicationHealthReport The report of the application health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationHealthsSendAsync(String applicationName, String apiVersion, ApplicationHealthReport applicationHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationHealthsSendValidateBeforeCall(applicationName, apiVersion, applicationHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationManifestsGet
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationManifestsGetCall(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationTypeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeVersion", applicationTypeVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationManifestsGetValidateBeforeCall(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationManifestsGet(Async)");
        }

        // verify the required parameter 'applicationTypeVersion' is set
        if (applicationTypeVersion == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeVersion' when calling applicationManifestsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationManifestsGet(Async)");
        }

        return applicationManifestsGetCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get application manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApplicationManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationManifest applicationManifestsGet(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ApplicationManifest> localVarResp = applicationManifestsGetWithHttpInfo(applicationTypeName, applicationTypeVersion, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get application manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ApplicationManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationManifest> applicationManifestsGetWithHttpInfo(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationManifestsGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ApplicationManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get application manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationManifestsGetAsync(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback<ApplicationManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationManifestsGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ApplicationManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypesGet
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesGetCall(String applicationTypeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypesGetValidateBeforeCall(String applicationTypeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypesGet(Async)");
        }

        return applicationTypesGetCall(applicationTypeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;ApplicationType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationType> applicationTypesGet(String applicationTypeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<ApplicationType>> localVarResp = applicationTypesGetWithHttpInfo(applicationTypeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;ApplicationType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationType>> applicationTypesGetWithHttpInfo(String applicationTypeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationTypesGetValidateBeforeCall(applicationTypeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<ApplicationType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesGetAsync(String applicationTypeName, String apiVersion, Integer timeout, final ApiCallback<List<ApplicationType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypesGetValidateBeforeCall(applicationTypeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypesList
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesListCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypesListValidateBeforeCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypesList(Async)");
        }

        return applicationTypesListCall(apiVersion, timeout, _callback);

    }

    /**
     * 
     * List application types
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;ApplicationType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationType> applicationTypesList(String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<ApplicationType>> localVarResp = applicationTypesListWithHttpInfo(apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * List application types
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;ApplicationType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationType>> applicationTypesListWithHttpInfo(String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationTypesListValidateBeforeCall(apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<ApplicationType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List application types
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesListAsync(String apiVersion, Integer timeout, final ApiCallback<List<ApplicationType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypesListValidateBeforeCall(apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypesRegister
     * @param apiVersion The version of the api (required)
     * @param registerApplicationType The type of the register application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesRegisterCall(String apiVersion, RegisterApplicationType registerApplicationType, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerApplicationType;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/$/Provision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypesRegisterValidateBeforeCall(String apiVersion, RegisterApplicationType registerApplicationType, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypesRegister(Async)");
        }

        // verify the required parameter 'registerApplicationType' is set
        if (registerApplicationType == null) {
            throw new ApiException("Missing the required parameter 'registerApplicationType' when calling applicationTypesRegister(Async)");
        }

        return applicationTypesRegisterCall(apiVersion, registerApplicationType, timeout, _callback);

    }

    /**
     * 
     * Register application types
     * @param apiVersion The version of the api (required)
     * @param registerApplicationType The type of the register application (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationTypesRegister(String apiVersion, RegisterApplicationType registerApplicationType, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationTypesRegisterWithHttpInfo(apiVersion, registerApplicationType, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Register application types
     * @param apiVersion The version of the api (required)
     * @param registerApplicationType The type of the register application (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationTypesRegisterWithHttpInfo(String apiVersion, RegisterApplicationType registerApplicationType, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationTypesRegisterValidateBeforeCall(apiVersion, registerApplicationType, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register application types
     * @param apiVersion The version of the api (required)
     * @param registerApplicationType The type of the register application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesRegisterAsync(String apiVersion, RegisterApplicationType registerApplicationType, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypesRegisterValidateBeforeCall(apiVersion, registerApplicationType, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypesUnregister
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param unregisterApplicationType The type of the unregister application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesUnregisterCall(String applicationTypeName, String apiVersion, UnregisterApplicationType unregisterApplicationType, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unregisterApplicationType;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/Unprovision"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypesUnregisterValidateBeforeCall(String applicationTypeName, String apiVersion, UnregisterApplicationType unregisterApplicationType, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypesUnregister(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypesUnregister(Async)");
        }

        // verify the required parameter 'unregisterApplicationType' is set
        if (unregisterApplicationType == null) {
            throw new ApiException("Missing the required parameter 'unregisterApplicationType' when calling applicationTypesUnregister(Async)");
        }

        return applicationTypesUnregisterCall(applicationTypeName, apiVersion, unregisterApplicationType, timeout, _callback);

    }

    /**
     * 
     * Unregister application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param unregisterApplicationType The type of the unregister application (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationTypesUnregister(String applicationTypeName, String apiVersion, UnregisterApplicationType unregisterApplicationType, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationTypesUnregisterWithHttpInfo(applicationTypeName, apiVersion, unregisterApplicationType, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Unregister application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param unregisterApplicationType The type of the unregister application (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationTypesUnregisterWithHttpInfo(String applicationTypeName, String apiVersion, UnregisterApplicationType unregisterApplicationType, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationTypesUnregisterValidateBeforeCall(applicationTypeName, apiVersion, unregisterApplicationType, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unregister application types
     * @param applicationTypeName The name of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param unregisterApplicationType The type of the unregister application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypesUnregisterAsync(String applicationTypeName, String apiVersion, UnregisterApplicationType unregisterApplicationType, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypesUnregisterValidateBeforeCall(applicationTypeName, apiVersion, unregisterApplicationType, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationUpgradeRollbacksStart
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade rollback </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradeRollbacksStartCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/RollbackUpgrade"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationUpgradeRollbacksStartValidateBeforeCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationUpgradeRollbacksStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationUpgradeRollbacksStart(Async)");
        }

        return applicationUpgradeRollbacksStartCall(applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Start application upgrade rollbacks
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade rollback </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationUpgradeRollbacksStart(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationUpgradeRollbacksStartWithHttpInfo(applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Start application upgrade rollbacks
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade rollback </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationUpgradeRollbacksStartWithHttpInfo(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationUpgradeRollbacksStartValidateBeforeCall(applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start application upgrade rollbacks
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade rollback </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradeRollbacksStartAsync(String applicationName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationUpgradeRollbacksStartValidateBeforeCall(applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationUpgradesGet
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesGetCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetUpgradeProgress"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationUpgradesGetValidateBeforeCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationUpgradesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationUpgradesGet(Async)");
        }

        return applicationUpgradesGetCall(applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApplicationUpgrade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationUpgrade applicationUpgradesGet(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ApplicationUpgrade> localVarResp = applicationUpgradesGetWithHttpInfo(applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ApplicationUpgrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationUpgrade> applicationUpgradesGetWithHttpInfo(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationUpgradesGetValidateBeforeCall(applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ApplicationUpgrade>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesGetAsync(String applicationName, String apiVersion, Integer timeout, final ApiCallback<ApplicationUpgrade> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationUpgradesGetValidateBeforeCall(applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ApplicationUpgrade>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationUpgradesResume
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param resumeApplicationUpgrade The upgrade of the resume application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resume application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesResumeCall(String applicationName, String apiVersion, ResumeApplicationUpgrade resumeApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resumeApplicationUpgrade;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/MoveNextUpgradeDomain"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationUpgradesResumeValidateBeforeCall(String applicationName, String apiVersion, ResumeApplicationUpgrade resumeApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationUpgradesResume(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationUpgradesResume(Async)");
        }

        // verify the required parameter 'resumeApplicationUpgrade' is set
        if (resumeApplicationUpgrade == null) {
            throw new ApiException("Missing the required parameter 'resumeApplicationUpgrade' when calling applicationUpgradesResume(Async)");
        }

        return applicationUpgradesResumeCall(applicationName, apiVersion, resumeApplicationUpgrade, timeout, _callback);

    }

    /**
     * 
     * Resume application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param resumeApplicationUpgrade The upgrade of the resume application (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resume application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationUpgradesResume(String applicationName, String apiVersion, ResumeApplicationUpgrade resumeApplicationUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationUpgradesResumeWithHttpInfo(applicationName, apiVersion, resumeApplicationUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Resume application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param resumeApplicationUpgrade The upgrade of the resume application (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resume application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationUpgradesResumeWithHttpInfo(String applicationName, String apiVersion, ResumeApplicationUpgrade resumeApplicationUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationUpgradesResumeValidateBeforeCall(applicationName, apiVersion, resumeApplicationUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resume application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param resumeApplicationUpgrade The upgrade of the resume application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resume application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesResumeAsync(String applicationName, String apiVersion, ResumeApplicationUpgrade resumeApplicationUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationUpgradesResumeValidateBeforeCall(applicationName, apiVersion, resumeApplicationUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationUpgradesStart
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param startApplicationUpgrade The description of the start application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The start application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesStartCall(String applicationName, String apiVersion, StartApplicationUpgrade startApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startApplicationUpgrade;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/Upgrade"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationUpgradesStartValidateBeforeCall(String applicationName, String apiVersion, StartApplicationUpgrade startApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationUpgradesStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationUpgradesStart(Async)");
        }

        // verify the required parameter 'startApplicationUpgrade' is set
        if (startApplicationUpgrade == null) {
            throw new ApiException("Missing the required parameter 'startApplicationUpgrade' when calling applicationUpgradesStart(Async)");
        }

        return applicationUpgradesStartCall(applicationName, apiVersion, startApplicationUpgrade, timeout, _callback);

    }

    /**
     * 
     * Start application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param startApplicationUpgrade The description of the start application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The start application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationUpgradesStart(String applicationName, String apiVersion, StartApplicationUpgrade startApplicationUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationUpgradesStartWithHttpInfo(applicationName, apiVersion, startApplicationUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Start application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param startApplicationUpgrade The description of the start application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The start application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationUpgradesStartWithHttpInfo(String applicationName, String apiVersion, StartApplicationUpgrade startApplicationUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationUpgradesStartValidateBeforeCall(applicationName, apiVersion, startApplicationUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param startApplicationUpgrade The description of the start application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The start application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesStartAsync(String applicationName, String apiVersion, StartApplicationUpgrade startApplicationUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationUpgradesStartValidateBeforeCall(applicationName, apiVersion, startApplicationUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationUpgradesUpdate
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param updateApplicationUpgrade The description of the update application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesUpdateCall(String applicationName, String apiVersion, UpdateApplicationUpgrade updateApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApplicationUpgrade;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/UpdateUpgrade"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationUpgradesUpdateValidateBeforeCall(String applicationName, String apiVersion, UpdateApplicationUpgrade updateApplicationUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationUpgradesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationUpgradesUpdate(Async)");
        }

        // verify the required parameter 'updateApplicationUpgrade' is set
        if (updateApplicationUpgrade == null) {
            throw new ApiException("Missing the required parameter 'updateApplicationUpgrade' when calling applicationUpgradesUpdate(Async)");
        }

        return applicationUpgradesUpdateCall(applicationName, apiVersion, updateApplicationUpgrade, timeout, _callback);

    }

    /**
     * 
     * Update application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param updateApplicationUpgrade The description of the update application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationUpgradesUpdate(String applicationName, String apiVersion, UpdateApplicationUpgrade updateApplicationUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationUpgradesUpdateWithHttpInfo(applicationName, apiVersion, updateApplicationUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Update application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param updateApplicationUpgrade The description of the update application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationUpgradesUpdateWithHttpInfo(String applicationName, String apiVersion, UpdateApplicationUpgrade updateApplicationUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationUpgradesUpdateValidateBeforeCall(applicationName, apiVersion, updateApplicationUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update application upgrades
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param updateApplicationUpgrade The description of the update application upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update application upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationUpgradesUpdateAsync(String applicationName, String apiVersion, UpdateApplicationUpgrade updateApplicationUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationUpgradesUpdateValidateBeforeCall(applicationName, apiVersion, updateApplicationUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsCreate
     * @param apiVersion The version of the api (required)
     * @param applicationDescription The description of the application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsCreateCall(String apiVersion, ApplicationDescription applicationDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationDescription;

        // create path and map variables
        String localVarPath = "/Applications/$/Create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsCreateValidateBeforeCall(String apiVersion, ApplicationDescription applicationDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationsCreate(Async)");
        }

        // verify the required parameter 'applicationDescription' is set
        if (applicationDescription == null) {
            throw new ApiException("Missing the required parameter 'applicationDescription' when calling applicationsCreate(Async)");
        }

        return applicationsCreateCall(apiVersion, applicationDescription, timeout, _callback);

    }

    /**
     * 
     * Create applications
     * @param apiVersion The version of the api (required)
     * @param applicationDescription The description of the application (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationsCreate(String apiVersion, ApplicationDescription applicationDescription, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationsCreateWithHttpInfo(apiVersion, applicationDescription, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Create applications
     * @param apiVersion The version of the api (required)
     * @param applicationDescription The description of the application (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationsCreateWithHttpInfo(String apiVersion, ApplicationDescription applicationDescription, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationsCreateValidateBeforeCall(apiVersion, applicationDescription, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create applications
     * @param apiVersion The version of the api (required)
     * @param applicationDescription The description of the application (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The application description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsCreateAsync(String apiVersion, ApplicationDescription applicationDescription, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsCreateValidateBeforeCall(apiVersion, applicationDescription, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsGet
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsGetCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsGetValidateBeforeCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationsGet(Async)");
        }

        return applicationsGetCall(applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Application applicationsGet(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<Application> localVarResp = applicationsGetWithHttpInfo(applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> applicationsGetWithHttpInfo(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationsGetValidateBeforeCall(applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsGetAsync(String applicationName, String apiVersion, Integer timeout, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsGetValidateBeforeCall(applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsList
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsListCall(String apiVersion, Integer timeout, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuation-token", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsListValidateBeforeCall(String apiVersion, Integer timeout, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationsList(Async)");
        }

        return applicationsListCall(apiVersion, timeout, continuationToken, _callback);

    }

    /**
     * 
     * List applications
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @return ApplicationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationList applicationsList(String apiVersion, Integer timeout, String continuationToken) throws ApiException {
        ApiResponse<ApplicationList> localVarResp = applicationsListWithHttpInfo(apiVersion, timeout, continuationToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List applications
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @return ApiResponse&lt;ApplicationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationList> applicationsListWithHttpInfo(String apiVersion, Integer timeout, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = applicationsListValidateBeforeCall(apiVersion, timeout, continuationToken, null);
        Type localVarReturnType = new TypeToken<ApplicationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List applications
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsListAsync(String apiVersion, Integer timeout, String continuationToken, final ApiCallback<ApplicationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsListValidateBeforeCall(apiVersion, timeout, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<ApplicationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsRemove
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param forceRemove The force remove flag to skip services check (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsRemoveCall(String applicationName, String apiVersion, Boolean forceRemove, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/Delete"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceRemove != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceRemove", forceRemove));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsRemoveValidateBeforeCall(String applicationName, String apiVersion, Boolean forceRemove, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling applicationsRemove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationsRemove(Async)");
        }

        return applicationsRemoveCall(applicationName, apiVersion, forceRemove, timeout, _callback);

    }

    /**
     * 
     * Remove applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param forceRemove The force remove flag to skip services check (optional)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String applicationsRemove(String applicationName, String apiVersion, Boolean forceRemove, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = applicationsRemoveWithHttpInfo(applicationName, apiVersion, forceRemove, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param forceRemove The force remove flag to skip services check (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applicationsRemoveWithHttpInfo(String applicationName, String apiVersion, Boolean forceRemove, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = applicationsRemoveValidateBeforeCall(applicationName, apiVersion, forceRemove, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove applications
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param forceRemove The force remove flag to skip services check (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsRemoveAsync(String applicationName, String apiVersion, Boolean forceRemove, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsRemoveValidateBeforeCall(applicationName, apiVersion, forceRemove, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterHealthsGet
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param nodesHealthStateFilter The filter of the nodes health state (optional)
     * @param applicationsHealthStateFilter The filter of the applications health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterHealthsGetCall(String apiVersion, String eventsHealthStateFilter, String nodesHealthStateFilter, String applicationsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/$/GetClusterHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (nodesHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodesHealthStateFilter", nodesHealthStateFilter));
        }

        if (applicationsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationsHealthStateFilter", applicationsHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterHealthsGetValidateBeforeCall(String apiVersion, String eventsHealthStateFilter, String nodesHealthStateFilter, String applicationsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterHealthsGet(Async)");
        }

        return clusterHealthsGetCall(apiVersion, eventsHealthStateFilter, nodesHealthStateFilter, applicationsHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get cluster healths
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param nodesHealthStateFilter The filter of the nodes health state (optional)
     * @param applicationsHealthStateFilter The filter of the applications health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ClusterHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterHealth clusterHealthsGet(String apiVersion, String eventsHealthStateFilter, String nodesHealthStateFilter, String applicationsHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<ClusterHealth> localVarResp = clusterHealthsGetWithHttpInfo(apiVersion, eventsHealthStateFilter, nodesHealthStateFilter, applicationsHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cluster healths
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param nodesHealthStateFilter The filter of the nodes health state (optional)
     * @param applicationsHealthStateFilter The filter of the applications health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ClusterHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterHealth> clusterHealthsGetWithHttpInfo(String apiVersion, String eventsHealthStateFilter, String nodesHealthStateFilter, String applicationsHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterHealthsGetValidateBeforeCall(apiVersion, eventsHealthStateFilter, nodesHealthStateFilter, applicationsHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<ClusterHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cluster healths
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param nodesHealthStateFilter The filter of the nodes health state (optional)
     * @param applicationsHealthStateFilter The filter of the applications health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterHealthsGetAsync(String apiVersion, String eventsHealthStateFilter, String nodesHealthStateFilter, String applicationsHealthStateFilter, Integer timeout, final ApiCallback<ClusterHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterHealthsGetValidateBeforeCall(apiVersion, eventsHealthStateFilter, nodesHealthStateFilter, applicationsHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<ClusterHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterHealthsSend
     * @param apiVersion The version of the api (required)
     * @param clusterHealthReport The report of the cluster health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterHealthsSendCall(String apiVersion, ClusterHealthReport clusterHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clusterHealthReport;

        // create path and map variables
        String localVarPath = "/$/ReportClusterHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterHealthsSendValidateBeforeCall(String apiVersion, ClusterHealthReport clusterHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterHealthsSend(Async)");
        }

        // verify the required parameter 'clusterHealthReport' is set
        if (clusterHealthReport == null) {
            throw new ApiException("Missing the required parameter 'clusterHealthReport' when calling clusterHealthsSend(Async)");
        }

        return clusterHealthsSendCall(apiVersion, clusterHealthReport, timeout, _callback);

    }

    /**
     * 
     * Report cluster healths
     * @param apiVersion The version of the api (required)
     * @param clusterHealthReport The report of the cluster health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterHealthsSend(String apiVersion, ClusterHealthReport clusterHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterHealthsSendWithHttpInfo(apiVersion, clusterHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Report cluster healths
     * @param apiVersion The version of the api (required)
     * @param clusterHealthReport The report of the cluster health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterHealthsSendWithHttpInfo(String apiVersion, ClusterHealthReport clusterHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterHealthsSendValidateBeforeCall(apiVersion, clusterHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Report cluster healths
     * @param apiVersion The version of the api (required)
     * @param clusterHealthReport The report of the cluster health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterHealthsSendAsync(String apiVersion, ClusterHealthReport clusterHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterHealthsSendValidateBeforeCall(apiVersion, clusterHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterLoadInformationsGet
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterLoadInformationsGetCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/$/GetLoadInformation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterLoadInformationsGetValidateBeforeCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterLoadInformationsGet(Async)");
        }

        return clusterLoadInformationsGetCall(apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get cluster load informations
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ClusterLoadInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterLoadInformation clusterLoadInformationsGet(String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ClusterLoadInformation> localVarResp = clusterLoadInformationsGetWithHttpInfo(apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cluster load informations
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ClusterLoadInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterLoadInformation> clusterLoadInformationsGetWithHttpInfo(String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterLoadInformationsGetValidateBeforeCall(apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ClusterLoadInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cluster load informations
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterLoadInformationsGetAsync(String apiVersion, Integer timeout, final ApiCallback<ClusterLoadInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterLoadInformationsGetValidateBeforeCall(apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ClusterLoadInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterManifestsGet
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterManifestsGetCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/$/GetClusterManifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterManifestsGetValidateBeforeCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterManifestsGet(Async)");
        }

        return clusterManifestsGetCall(apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get cluster manifests
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterManifestsGet(String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterManifestsGetWithHttpInfo(apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cluster manifests
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterManifestsGetWithHttpInfo(String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterManifestsGetValidateBeforeCall(apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cluster manifests
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterManifestsGetAsync(String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterManifestsGetValidateBeforeCall(apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterPackagesRegister
     * @param apiVersion The version of the api (required)
     * @param registerClusterPackage The package of the register cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPackagesRegisterCall(String apiVersion, RegisterClusterPackage registerClusterPackage, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerClusterPackage;

        // create path and map variables
        String localVarPath = "/$/Provision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterPackagesRegisterValidateBeforeCall(String apiVersion, RegisterClusterPackage registerClusterPackage, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterPackagesRegister(Async)");
        }

        // verify the required parameter 'registerClusterPackage' is set
        if (registerClusterPackage == null) {
            throw new ApiException("Missing the required parameter 'registerClusterPackage' when calling clusterPackagesRegister(Async)");
        }

        return clusterPackagesRegisterCall(apiVersion, registerClusterPackage, timeout, _callback);

    }

    /**
     * 
     * Register cluster packages
     * @param apiVersion The version of the api (required)
     * @param registerClusterPackage The package of the register cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterPackagesRegister(String apiVersion, RegisterClusterPackage registerClusterPackage, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterPackagesRegisterWithHttpInfo(apiVersion, registerClusterPackage, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Register cluster packages
     * @param apiVersion The version of the api (required)
     * @param registerClusterPackage The package of the register cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterPackagesRegisterWithHttpInfo(String apiVersion, RegisterClusterPackage registerClusterPackage, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterPackagesRegisterValidateBeforeCall(apiVersion, registerClusterPackage, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register cluster packages
     * @param apiVersion The version of the api (required)
     * @param registerClusterPackage The package of the register cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPackagesRegisterAsync(String apiVersion, RegisterClusterPackage registerClusterPackage, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterPackagesRegisterValidateBeforeCall(apiVersion, registerClusterPackage, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterPackagesUnregister
     * @param apiVersion The version of the api (required)
     * @param unregisterClusterPackage The package of the unregister cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPackagesUnregisterCall(String apiVersion, UnregisterClusterPackage unregisterClusterPackage, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unregisterClusterPackage;

        // create path and map variables
        String localVarPath = "/$/Unprovision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterPackagesUnregisterValidateBeforeCall(String apiVersion, UnregisterClusterPackage unregisterClusterPackage, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterPackagesUnregister(Async)");
        }

        // verify the required parameter 'unregisterClusterPackage' is set
        if (unregisterClusterPackage == null) {
            throw new ApiException("Missing the required parameter 'unregisterClusterPackage' when calling clusterPackagesUnregister(Async)");
        }

        return clusterPackagesUnregisterCall(apiVersion, unregisterClusterPackage, timeout, _callback);

    }

    /**
     * 
     * Unregister cluster packages
     * @param apiVersion The version of the api (required)
     * @param unregisterClusterPackage The package of the unregister cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterPackagesUnregister(String apiVersion, UnregisterClusterPackage unregisterClusterPackage, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterPackagesUnregisterWithHttpInfo(apiVersion, unregisterClusterPackage, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Unregister cluster packages
     * @param apiVersion The version of the api (required)
     * @param unregisterClusterPackage The package of the unregister cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterPackagesUnregisterWithHttpInfo(String apiVersion, UnregisterClusterPackage unregisterClusterPackage, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterPackagesUnregisterValidateBeforeCall(apiVersion, unregisterClusterPackage, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unregister cluster packages
     * @param apiVersion The version of the api (required)
     * @param unregisterClusterPackage The package of the unregister cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPackagesUnregisterAsync(String apiVersion, UnregisterClusterPackage unregisterClusterPackage, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterPackagesUnregisterValidateBeforeCall(apiVersion, unregisterClusterPackage, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterUpgradesResume
     * @param apiVersion The version of the api (required)
     * @param resumeClusterUpgrade The upgrade of the cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesResumeCall(String apiVersion, ResumeClusterUpgrade resumeClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resumeClusterUpgrade;

        // create path and map variables
        String localVarPath = "/$/MoveToNextUpgradeDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterUpgradesResumeValidateBeforeCall(String apiVersion, ResumeClusterUpgrade resumeClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterUpgradesResume(Async)");
        }

        // verify the required parameter 'resumeClusterUpgrade' is set
        if (resumeClusterUpgrade == null) {
            throw new ApiException("Missing the required parameter 'resumeClusterUpgrade' when calling clusterUpgradesResume(Async)");
        }

        return clusterUpgradesResumeCall(apiVersion, resumeClusterUpgrade, timeout, _callback);

    }

    /**
     * 
     * Resume cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param resumeClusterUpgrade The upgrade of the cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterUpgradesResume(String apiVersion, ResumeClusterUpgrade resumeClusterUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterUpgradesResumeWithHttpInfo(apiVersion, resumeClusterUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Resume cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param resumeClusterUpgrade The upgrade of the cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterUpgradesResumeWithHttpInfo(String apiVersion, ResumeClusterUpgrade resumeClusterUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterUpgradesResumeValidateBeforeCall(apiVersion, resumeClusterUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resume cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param resumeClusterUpgrade The upgrade of the cluster (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesResumeAsync(String apiVersion, ResumeClusterUpgrade resumeClusterUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterUpgradesResumeValidateBeforeCall(apiVersion, resumeClusterUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterUpgradesRollback
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesRollbackCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/$/RollbackUpgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterUpgradesRollbackValidateBeforeCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterUpgradesRollback(Async)");
        }

        return clusterUpgradesRollbackCall(apiVersion, timeout, _callback);

    }

    /**
     * 
     * Rollback cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterUpgradesRollback(String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterUpgradesRollbackWithHttpInfo(apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Rollback cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterUpgradesRollbackWithHttpInfo(String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterUpgradesRollbackValidateBeforeCall(apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rollback cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesRollbackAsync(String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterUpgradesRollbackValidateBeforeCall(apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterUpgradesStart
     * @param apiVersion The version of the api (required)
     * @param startClusterUpgrade The description of the start cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesStartCall(String apiVersion, StartClusterUpgrade startClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startClusterUpgrade;

        // create path and map variables
        String localVarPath = "/$/Upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterUpgradesStartValidateBeforeCall(String apiVersion, StartClusterUpgrade startClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterUpgradesStart(Async)");
        }

        // verify the required parameter 'startClusterUpgrade' is set
        if (startClusterUpgrade == null) {
            throw new ApiException("Missing the required parameter 'startClusterUpgrade' when calling clusterUpgradesStart(Async)");
        }

        return clusterUpgradesStartCall(apiVersion, startClusterUpgrade, timeout, _callback);

    }

    /**
     * 
     * Start cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param startClusterUpgrade The description of the start cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterUpgradesStart(String apiVersion, StartClusterUpgrade startClusterUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterUpgradesStartWithHttpInfo(apiVersion, startClusterUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Start cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param startClusterUpgrade The description of the start cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterUpgradesStartWithHttpInfo(String apiVersion, StartClusterUpgrade startClusterUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterUpgradesStartValidateBeforeCall(apiVersion, startClusterUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param startClusterUpgrade The description of the start cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesStartAsync(String apiVersion, StartClusterUpgrade startClusterUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterUpgradesStartValidateBeforeCall(apiVersion, startClusterUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterUpgradesUpdate
     * @param apiVersion The version of the api (required)
     * @param updateClusterUpgrade The description of the update cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesUpdateCall(String apiVersion, UpdateClusterUpgrade updateClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClusterUpgrade;

        // create path and map variables
        String localVarPath = "/$/UpdateUpgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterUpgradesUpdateValidateBeforeCall(String apiVersion, UpdateClusterUpgrade updateClusterUpgrade, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling clusterUpgradesUpdate(Async)");
        }

        // verify the required parameter 'updateClusterUpgrade' is set
        if (updateClusterUpgrade == null) {
            throw new ApiException("Missing the required parameter 'updateClusterUpgrade' when calling clusterUpgradesUpdate(Async)");
        }

        return clusterUpgradesUpdateCall(apiVersion, updateClusterUpgrade, timeout, _callback);

    }

    /**
     * 
     * Update cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param updateClusterUpgrade The description of the update cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String clusterUpgradesUpdate(String apiVersion, UpdateClusterUpgrade updateClusterUpgrade, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = clusterUpgradesUpdateWithHttpInfo(apiVersion, updateClusterUpgrade, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Update cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param updateClusterUpgrade The description of the update cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> clusterUpgradesUpdateWithHttpInfo(String apiVersion, UpdateClusterUpgrade updateClusterUpgrade, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = clusterUpgradesUpdateValidateBeforeCall(apiVersion, updateClusterUpgrade, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update cluster upgrades
     * @param apiVersion The version of the api (required)
     * @param updateClusterUpgrade The description of the update cluster upgrade (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cluster upgrade </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterUpgradesUpdateAsync(String apiVersion, UpdateClusterUpgrade updateClusterUpgrade, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterUpgradesUpdateValidateBeforeCall(apiVersion, updateClusterUpgrade, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedApplicationHealthsGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedServicePackagesHealthStateFilter The filter of the deployed service packages health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationHealthsGetCall(String nodeName, String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedServicePackagesHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (deployedServicePackagesHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeployedServicePackagesHealthStateFilter", deployedServicePackagesHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedApplicationHealthsGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedServicePackagesHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedApplicationHealthsGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedApplicationHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedApplicationHealthsGet(Async)");
        }

        return deployedApplicationHealthsGetCall(nodeName, applicationName, apiVersion, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get deployed application healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedServicePackagesHealthStateFilter The filter of the deployed service packages health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return DeployedApplicationHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeployedApplicationHealth deployedApplicationHealthsGet(String nodeName, String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedServicePackagesHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<DeployedApplicationHealth> localVarResp = deployedApplicationHealthsGetWithHttpInfo(nodeName, applicationName, apiVersion, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed application healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedServicePackagesHealthStateFilter The filter of the deployed service packages health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;DeployedApplicationHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployedApplicationHealth> deployedApplicationHealthsGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedServicePackagesHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedApplicationHealthsGetValidateBeforeCall(nodeName, applicationName, apiVersion, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<DeployedApplicationHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed application healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param deployedServicePackagesHealthStateFilter The filter of the deployed service packages health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationHealthsGetAsync(String nodeName, String applicationName, String apiVersion, String eventsHealthStateFilter, String deployedServicePackagesHealthStateFilter, Integer timeout, final ApiCallback<DeployedApplicationHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedApplicationHealthsGetValidateBeforeCall(nodeName, applicationName, apiVersion, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<DeployedApplicationHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedApplicationHealthsSend
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param deployedApplicationHealthReport The report of the deployed application health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationHealthsSendCall(String nodeName, String applicationName, String apiVersion, DeployedApplicationHealthReport deployedApplicationHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployedApplicationHealthReport;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/ReportHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedApplicationHealthsSendValidateBeforeCall(String nodeName, String applicationName, String apiVersion, DeployedApplicationHealthReport deployedApplicationHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedApplicationHealthsSend(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedApplicationHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedApplicationHealthsSend(Async)");
        }

        // verify the required parameter 'deployedApplicationHealthReport' is set
        if (deployedApplicationHealthReport == null) {
            throw new ApiException("Missing the required parameter 'deployedApplicationHealthReport' when calling deployedApplicationHealthsSend(Async)");
        }

        return deployedApplicationHealthsSendCall(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send deployed application health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param deployedApplicationHealthReport The report of the deployed application health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String deployedApplicationHealthsSend(String nodeName, String applicationName, String apiVersion, DeployedApplicationHealthReport deployedApplicationHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = deployedApplicationHealthsSendWithHttpInfo(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send deployed application health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param deployedApplicationHealthReport The report of the deployed application health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deployedApplicationHealthsSendWithHttpInfo(String nodeName, String applicationName, String apiVersion, DeployedApplicationHealthReport deployedApplicationHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedApplicationHealthsSendValidateBeforeCall(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send deployed application health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param deployedApplicationHealthReport The report of the deployed application health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationHealthsSendAsync(String nodeName, String applicationName, String apiVersion, DeployedApplicationHealthReport deployedApplicationHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedApplicationHealthsSendValidateBeforeCall(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedApplicationsGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationsGetCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedApplicationsGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedApplicationsGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedApplicationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedApplicationsGet(Async)");
        }

        return deployedApplicationsGetCall(nodeName, applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed applications
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return DeployedApplication
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeployedApplication deployedApplicationsGet(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<DeployedApplication> localVarResp = deployedApplicationsGetWithHttpInfo(nodeName, applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed applications
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;DeployedApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployedApplication> deployedApplicationsGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedApplicationsGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<DeployedApplication>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed applications
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationsGetAsync(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback<DeployedApplication> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedApplicationsGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<DeployedApplication>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedApplicationsList
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationsListCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedApplicationsListValidateBeforeCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedApplicationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedApplicationsList(Async)");
        }

        return deployedApplicationsListCall(nodeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * List deployed applications
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;DeployedApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedApplication> deployedApplicationsList(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<DeployedApplication>> localVarResp = deployedApplicationsListWithHttpInfo(nodeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * List deployed applications
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeployedApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedApplication>> deployedApplicationsListWithHttpInfo(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedApplicationsListValidateBeforeCall(nodeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List deployed applications
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed application list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedApplicationsListAsync(String nodeName, String apiVersion, Integer timeout, final ApiCallback<List<DeployedApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedApplicationsListValidateBeforeCall(nodeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedCodePackagesGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed code package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedCodePackagesGetCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetCodePackages"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedCodePackagesGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedCodePackagesGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedCodePackagesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedCodePackagesGet(Async)");
        }

        return deployedCodePackagesGetCall(nodeName, applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed code packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;DeployedCodePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed code package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedCodePackage> deployedCodePackagesGet(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<DeployedCodePackage>> localVarResp = deployedCodePackagesGetWithHttpInfo(nodeName, applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed code packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeployedCodePackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed code package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedCodePackage>> deployedCodePackagesGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedCodePackagesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedCodePackage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed code packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed code package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedCodePackagesGetAsync(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback<List<DeployedCodePackage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedCodePackagesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedCodePackage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedReplicaDetailsGet
     * @param nodeName The name of the node (required)
     * @param partitionName The name of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica detail </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedReplicaDetailsGetCall(String nodeName, String partitionName, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetPartitions/{partitionName}/$/GetReplicas/{replicaId}/$/GetDetail"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "partitionName" + "}", localVarApiClient.escapeString(partitionName.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedReplicaDetailsGetValidateBeforeCall(String nodeName, String partitionName, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedReplicaDetailsGet(Async)");
        }

        // verify the required parameter 'partitionName' is set
        if (partitionName == null) {
            throw new ApiException("Missing the required parameter 'partitionName' when calling deployedReplicaDetailsGet(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling deployedReplicaDetailsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedReplicaDetailsGet(Async)");
        }

        return deployedReplicaDetailsGetCall(nodeName, partitionName, replicaId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed replica details
     * @param nodeName The name of the node (required)
     * @param partitionName The name of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return DeployedReplicaDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica detail </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeployedReplicaDetail deployedReplicaDetailsGet(String nodeName, String partitionName, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<DeployedReplicaDetail> localVarResp = deployedReplicaDetailsGetWithHttpInfo(nodeName, partitionName, replicaId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed replica details
     * @param nodeName The name of the node (required)
     * @param partitionName The name of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;DeployedReplicaDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica detail </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployedReplicaDetail> deployedReplicaDetailsGetWithHttpInfo(String nodeName, String partitionName, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedReplicaDetailsGetValidateBeforeCall(nodeName, partitionName, replicaId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<DeployedReplicaDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed replica details
     * @param nodeName The name of the node (required)
     * @param partitionName The name of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica detail </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedReplicaDetailsGetAsync(String nodeName, String partitionName, String replicaId, String apiVersion, Integer timeout, final ApiCallback<DeployedReplicaDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedReplicaDetailsGetValidateBeforeCall(nodeName, partitionName, replicaId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<DeployedReplicaDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedReplicasGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedReplicasGetCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetReplicas"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedReplicasGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedReplicasGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedReplicasGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedReplicasGet(Async)");
        }

        return deployedReplicasGetCall(nodeName, applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed replicas
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;DeployedReplica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedReplica> deployedReplicasGet(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<DeployedReplica>> localVarResp = deployedReplicasGetWithHttpInfo(nodeName, applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed replicas
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeployedReplica&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedReplica>> deployedReplicasGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedReplicasGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedReplica>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed replicas
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedReplicasGetAsync(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback<List<DeployedReplica>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedReplicasGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedReplica>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedServicePackageHealthsGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param servicePackageName The name of the service package (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackageHealthsGetCall(String nodeName, String applicationName, String servicePackageName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{servicePackageName}/$/GetHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "servicePackageName" + "}", localVarApiClient.escapeString(servicePackageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedServicePackageHealthsGetValidateBeforeCall(String nodeName, String applicationName, String servicePackageName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedServicePackageHealthsGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedServicePackageHealthsGet(Async)");
        }

        // verify the required parameter 'servicePackageName' is set
        if (servicePackageName == null) {
            throw new ApiException("Missing the required parameter 'servicePackageName' when calling deployedServicePackageHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedServicePackageHealthsGet(Async)");
        }

        return deployedServicePackageHealthsGetCall(nodeName, applicationName, servicePackageName, apiVersion, eventsHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get deployed service package healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param servicePackageName The name of the service package (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return DeployedServicePackageHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeployedServicePackageHealth deployedServicePackageHealthsGet(String nodeName, String applicationName, String servicePackageName, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<DeployedServicePackageHealth> localVarResp = deployedServicePackageHealthsGetWithHttpInfo(nodeName, applicationName, servicePackageName, apiVersion, eventsHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed service package healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param servicePackageName The name of the service package (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;DeployedServicePackageHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployedServicePackageHealth> deployedServicePackageHealthsGetWithHttpInfo(String nodeName, String applicationName, String servicePackageName, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedServicePackageHealthsGetValidateBeforeCall(nodeName, applicationName, servicePackageName, apiVersion, eventsHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<DeployedServicePackageHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed service package healths
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param servicePackageName The name of the service package (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackageHealthsGetAsync(String nodeName, String applicationName, String servicePackageName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback<DeployedServicePackageHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedServicePackageHealthsGetValidateBeforeCall(nodeName, applicationName, servicePackageName, apiVersion, eventsHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<DeployedServicePackageHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedServicePackageHealthsSend
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param deployedServicePackageHealthReport The report of the deployed service package health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackageHealthsSendCall(String nodeName, String applicationName, String serviceManifestName, String apiVersion, DeployedServiceHealthReport deployedServicePackageHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployedServicePackageHealthReport;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{serviceManifestName}/$/ReportHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceManifestName" + "}", localVarApiClient.escapeString(serviceManifestName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedServicePackageHealthsSendValidateBeforeCall(String nodeName, String applicationName, String serviceManifestName, String apiVersion, DeployedServiceHealthReport deployedServicePackageHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedServicePackageHealthsSend(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedServicePackageHealthsSend(Async)");
        }

        // verify the required parameter 'serviceManifestName' is set
        if (serviceManifestName == null) {
            throw new ApiException("Missing the required parameter 'serviceManifestName' when calling deployedServicePackageHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedServicePackageHealthsSend(Async)");
        }

        // verify the required parameter 'deployedServicePackageHealthReport' is set
        if (deployedServicePackageHealthReport == null) {
            throw new ApiException("Missing the required parameter 'deployedServicePackageHealthReport' when calling deployedServicePackageHealthsSend(Async)");
        }

        return deployedServicePackageHealthsSendCall(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send deployed service package health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param deployedServicePackageHealthReport The report of the deployed service package health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String deployedServicePackageHealthsSend(String nodeName, String applicationName, String serviceManifestName, String apiVersion, DeployedServiceHealthReport deployedServicePackageHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = deployedServicePackageHealthsSendWithHttpInfo(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send deployed service package health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param deployedServicePackageHealthReport The report of the deployed service package health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deployedServicePackageHealthsSendWithHttpInfo(String nodeName, String applicationName, String serviceManifestName, String apiVersion, DeployedServiceHealthReport deployedServicePackageHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedServicePackageHealthsSendValidateBeforeCall(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send deployed service package health
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param deployedServicePackageHealthReport The report of the deployed service package health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackageHealthsSendAsync(String nodeName, String applicationName, String serviceManifestName, String apiVersion, DeployedServiceHealthReport deployedServicePackageHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedServicePackageHealthsSendValidateBeforeCall(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedServicePackagesGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackagesGetCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedServicePackagesGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedServicePackagesGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedServicePackagesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedServicePackagesGet(Async)");
        }

        return deployedServicePackagesGetCall(nodeName, applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed service packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;DeployedServicePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedServicePackage> deployedServicePackagesGet(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<DeployedServicePackage>> localVarResp = deployedServicePackagesGetWithHttpInfo(nodeName, applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed service packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeployedServicePackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedServicePackage>> deployedServicePackagesGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedServicePackagesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedServicePackage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed service packages
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service package </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServicePackagesGetAsync(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback<List<DeployedServicePackage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedServicePackagesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedServicePackage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployedServiceTypesGet
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServiceTypesGetCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServiceTypes"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployedServiceTypesGetValidateBeforeCall(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling deployedServiceTypesGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling deployedServiceTypesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deployedServiceTypesGet(Async)");
        }

        return deployedServiceTypesGetCall(nodeName, applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get deployed service types
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;DeployedServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeployedServiceType> deployedServiceTypesGet(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<DeployedServiceType>> localVarResp = deployedServiceTypesGetWithHttpInfo(nodeName, applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get deployed service types
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeployedServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeployedServiceType>> deployedServiceTypesGetWithHttpInfo(String nodeName, String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = deployedServiceTypesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<DeployedServiceType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get deployed service types
     * @param nodeName The name of the node (required)
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployed service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployedServiceTypesGetAsync(String nodeName, String applicationName, String apiVersion, Integer timeout, final ApiCallback<List<DeployedServiceType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployedServiceTypesGetValidateBeforeCall(nodeName, applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<DeployedServiceType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodeHealthsGet
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeHealthsGetCall(String nodeName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodeHealthsGetValidateBeforeCall(String nodeName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodeHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodeHealthsGet(Async)");
        }

        return nodeHealthsGetCall(nodeName, apiVersion, eventsHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get node healths
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return NodeHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NodeHealth nodeHealthsGet(String nodeName, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<NodeHealth> localVarResp = nodeHealthsGetWithHttpInfo(nodeName, apiVersion, eventsHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get node healths
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;NodeHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeHealth> nodeHealthsGetWithHttpInfo(String nodeName, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodeHealthsGetValidateBeforeCall(nodeName, apiVersion, eventsHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<NodeHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get node healths
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeHealthsGetAsync(String nodeName, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback<NodeHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodeHealthsGetValidateBeforeCall(nodeName, apiVersion, eventsHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<NodeHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodeHealthsSend
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param nodeHealthReport The report of the node health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeHealthsSendCall(String nodeName, String apiVersion, NodeHealthReport nodeHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nodeHealthReport;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/ReportHealth"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodeHealthsSendValidateBeforeCall(String nodeName, String apiVersion, NodeHealthReport nodeHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodeHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodeHealthsSend(Async)");
        }

        // verify the required parameter 'nodeHealthReport' is set
        if (nodeHealthReport == null) {
            throw new ApiException("Missing the required parameter 'nodeHealthReport' when calling nodeHealthsSend(Async)");
        }

        return nodeHealthsSendCall(nodeName, apiVersion, nodeHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send node health
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param nodeHealthReport The report of the node health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String nodeHealthsSend(String nodeName, String apiVersion, NodeHealthReport nodeHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = nodeHealthsSendWithHttpInfo(nodeName, apiVersion, nodeHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send node health
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param nodeHealthReport The report of the node health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> nodeHealthsSendWithHttpInfo(String nodeName, String apiVersion, NodeHealthReport nodeHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodeHealthsSendValidateBeforeCall(nodeName, apiVersion, nodeHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send node health
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param nodeHealthReport The report of the node health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeHealthsSendAsync(String nodeName, String apiVersion, NodeHealthReport nodeHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodeHealthsSendValidateBeforeCall(nodeName, apiVersion, nodeHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodeLoadInformationsGet
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeLoadInformationsGetCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/GetLoadInformation"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodeLoadInformationsGetValidateBeforeCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodeLoadInformationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodeLoadInformationsGet(Async)");
        }

        return nodeLoadInformationsGetCall(nodeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get node load informations
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return NodeLoadInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NodeLoadInformation nodeLoadInformationsGet(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<NodeLoadInformation> localVarResp = nodeLoadInformationsGetWithHttpInfo(nodeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get node load informations
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;NodeLoadInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeLoadInformation> nodeLoadInformationsGetWithHttpInfo(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodeLoadInformationsGetValidateBeforeCall(nodeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<NodeLoadInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get node load informations
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeLoadInformationsGetAsync(String nodeName, String apiVersion, Integer timeout, final ApiCallback<NodeLoadInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodeLoadInformationsGetValidateBeforeCall(nodeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<NodeLoadInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodeStatesRemove
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeStatesRemoveCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/RemoveNodeState"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodeStatesRemoveValidateBeforeCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodeStatesRemove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodeStatesRemove(Async)");
        }

        return nodeStatesRemoveCall(nodeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Remove node states
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String nodeStatesRemove(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = nodeStatesRemoveWithHttpInfo(nodeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove node states
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> nodeStatesRemoveWithHttpInfo(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodeStatesRemoveValidateBeforeCall(nodeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove node states
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node state </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodeStatesRemoveAsync(String nodeName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodeStatesRemoveValidateBeforeCall(nodeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodesDisable
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param disableNode The node (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesDisableCall(String nodeName, String apiVersion, DisableNode disableNode, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableNode;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/Deactivate"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodesDisableValidateBeforeCall(String nodeName, String apiVersion, DisableNode disableNode, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodesDisable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodesDisable(Async)");
        }

        // verify the required parameter 'disableNode' is set
        if (disableNode == null) {
            throw new ApiException("Missing the required parameter 'disableNode' when calling nodesDisable(Async)");
        }

        return nodesDisableCall(nodeName, apiVersion, disableNode, timeout, _callback);

    }

    /**
     * 
     * Disable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param disableNode The node (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String nodesDisable(String nodeName, String apiVersion, DisableNode disableNode, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = nodesDisableWithHttpInfo(nodeName, apiVersion, disableNode, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param disableNode The node (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> nodesDisableWithHttpInfo(String nodeName, String apiVersion, DisableNode disableNode, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodesDisableValidateBeforeCall(nodeName, apiVersion, disableNode, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param disableNode The node (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesDisableAsync(String nodeName, String apiVersion, DisableNode disableNode, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodesDisableValidateBeforeCall(nodeName, apiVersion, disableNode, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodesEnable
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesEnableCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}/$/Activate"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodesEnableValidateBeforeCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodesEnable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodesEnable(Async)");
        }

        return nodesEnableCall(nodeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Enable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String nodesEnable(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = nodesEnableWithHttpInfo(nodeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Enable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> nodesEnableWithHttpInfo(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodesEnableValidateBeforeCall(nodeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enable nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesEnableAsync(String nodeName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodesEnableValidateBeforeCall(nodeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodesGet
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesGetCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes/{nodeName}"
            .replace("{" + "nodeName" + "}", localVarApiClient.escapeString(nodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodesGetValidateBeforeCall(String nodeName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nodeName' is set
        if (nodeName == null) {
            throw new ApiException("Missing the required parameter 'nodeName' when calling nodesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodesGet(Async)");
        }

        return nodesGetCall(nodeName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Node nodesGet(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<Node> localVarResp = nodesGetWithHttpInfo(nodeName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Node> nodesGetWithHttpInfo(String nodeName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = nodesGetValidateBeforeCall(nodeName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get nodes
     * @param nodeName The name of the node (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesGetAsync(String nodeName, String apiVersion, Integer timeout, final ApiCallback<Node> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodesGetValidateBeforeCall(nodeName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nodesList
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesListCall(String apiVersion, Integer timeout, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuation-token", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nodesListValidateBeforeCall(String apiVersion, Integer timeout, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling nodesList(Async)");
        }

        return nodesListCall(apiVersion, timeout, continuationToken, _callback);

    }

    /**
     * 
     * List nodes
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @return NodeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public NodeList nodesList(String apiVersion, Integer timeout, String continuationToken) throws ApiException {
        ApiResponse<NodeList> localVarResp = nodesListWithHttpInfo(apiVersion, timeout, continuationToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List nodes
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @return ApiResponse&lt;NodeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeList> nodesListWithHttpInfo(String apiVersion, Integer timeout, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = nodesListValidateBeforeCall(apiVersion, timeout, continuationToken, null);
        Type localVarReturnType = new TypeToken<NodeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List nodes
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param continuationToken The token of the continuation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nodesListAsync(String apiVersion, Integer timeout, String continuationToken, final ApiCallback<NodeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = nodesListValidateBeforeCall(apiVersion, timeout, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<NodeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionHealthsGet
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param replicasHealthStateFilter The filter of the replicas health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionHealthsGetCall(String partitionId, String apiVersion, String eventsHealthStateFilter, String replicasHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetHealth"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (replicasHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicasHealthStateFilter", replicasHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionHealthsGetValidateBeforeCall(String partitionId, String apiVersion, String eventsHealthStateFilter, String replicasHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionHealthsGet(Async)");
        }

        return partitionHealthsGetCall(partitionId, apiVersion, eventsHealthStateFilter, replicasHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get partition healths
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param replicasHealthStateFilter The filter of the replicas health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return PartitionHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PartitionHealth partitionHealthsGet(String partitionId, String apiVersion, String eventsHealthStateFilter, String replicasHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<PartitionHealth> localVarResp = partitionHealthsGetWithHttpInfo(partitionId, apiVersion, eventsHealthStateFilter, replicasHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get partition healths
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param replicasHealthStateFilter The filter of the replicas health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;PartitionHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionHealth> partitionHealthsGetWithHttpInfo(String partitionId, String apiVersion, String eventsHealthStateFilter, String replicasHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionHealthsGetValidateBeforeCall(partitionId, apiVersion, eventsHealthStateFilter, replicasHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<PartitionHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get partition healths
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param replicasHealthStateFilter The filter of the replicas health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionHealthsGetAsync(String partitionId, String apiVersion, String eventsHealthStateFilter, String replicasHealthStateFilter, Integer timeout, final ApiCallback<PartitionHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionHealthsGetValidateBeforeCall(partitionId, apiVersion, eventsHealthStateFilter, replicasHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<PartitionHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionHealthsSend
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param partitionHealthReport The report of the partition health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionHealthsSendCall(String partitionId, String apiVersion, PartitionHealthReport partitionHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partitionHealthReport;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/ReportHealth"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionHealthsSendValidateBeforeCall(String partitionId, String apiVersion, PartitionHealthReport partitionHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionHealthsSend(Async)");
        }

        // verify the required parameter 'partitionHealthReport' is set
        if (partitionHealthReport == null) {
            throw new ApiException("Missing the required parameter 'partitionHealthReport' when calling partitionHealthsSend(Async)");
        }

        return partitionHealthsSendCall(partitionId, apiVersion, partitionHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send partition health
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param partitionHealthReport The report of the partition health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String partitionHealthsSend(String partitionId, String apiVersion, PartitionHealthReport partitionHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = partitionHealthsSendWithHttpInfo(partitionId, apiVersion, partitionHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send partition health
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param partitionHealthReport The report of the partition health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> partitionHealthsSendWithHttpInfo(String partitionId, String apiVersion, PartitionHealthReport partitionHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionHealthsSendValidateBeforeCall(partitionId, apiVersion, partitionHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send partition health
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param partitionHealthReport The report of the partition health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionHealthsSendAsync(String partitionId, String apiVersion, PartitionHealthReport partitionHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionHealthsSendValidateBeforeCall(partitionId, apiVersion, partitionHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionListsRepair
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionListsRepairCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/GetPartitions/$/Recover"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionListsRepairValidateBeforeCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling partitionListsRepair(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionListsRepair(Async)");
        }

        return partitionListsRepairCall(serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Repair partition lists
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String partitionListsRepair(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = partitionListsRepairWithHttpInfo(serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Repair partition lists
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> partitionListsRepairWithHttpInfo(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionListsRepairValidateBeforeCall(serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Repair partition lists
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionListsRepairAsync(String serviceName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionListsRepairValidateBeforeCall(serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionLoadInformationsGet
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionLoadInformationsGetCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetLoadInformation"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionLoadInformationsGetValidateBeforeCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionLoadInformationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionLoadInformationsGet(Async)");
        }

        return partitionLoadInformationsGetCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get partition load informations
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return PartitionLoadInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PartitionLoadInformation partitionLoadInformationsGet(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<PartitionLoadInformation> localVarResp = partitionLoadInformationsGetWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get partition load informations
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;PartitionLoadInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionLoadInformation> partitionLoadInformationsGetWithHttpInfo(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionLoadInformationsGetValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<PartitionLoadInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get partition load informations
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionLoadInformationsGetAsync(String partitionId, String apiVersion, Integer timeout, final ApiCallback<PartitionLoadInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionLoadInformationsGetValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<PartitionLoadInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionLoadsReset
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reset partition load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionLoadsResetCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/ResetLoad"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionLoadsResetValidateBeforeCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionLoadsReset(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionLoadsReset(Async)");
        }

        return partitionLoadsResetCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Reset partition loads
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reset partition load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String partitionLoadsReset(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = partitionLoadsResetWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Reset partition loads
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reset partition load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> partitionLoadsResetWithHttpInfo(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionLoadsResetValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reset partition loads
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reset partition load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionLoadsResetAsync(String partitionId, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionLoadsResetValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionsGet
     * @param serviceName The name of the service (required)
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsGetCall(String serviceName, String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/GetPartitions/{partitionId}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionsGetValidateBeforeCall(String serviceName, String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling partitionsGet(Async)");
        }

        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionsGet(Async)");
        }

        return partitionsGetCall(serviceName, partitionId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get partitions
     * @param serviceName The name of the service (required)
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return Partition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Partition partitionsGet(String serviceName, String partitionId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<Partition> localVarResp = partitionsGetWithHttpInfo(serviceName, partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get partitions
     * @param serviceName The name of the service (required)
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;Partition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Partition> partitionsGetWithHttpInfo(String serviceName, String partitionId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionsGetValidateBeforeCall(serviceName, partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<Partition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get partitions
     * @param serviceName The name of the service (required)
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsGetAsync(String serviceName, String partitionId, String apiVersion, Integer timeout, final ApiCallback<Partition> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionsGetValidateBeforeCall(serviceName, partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<Partition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionsList
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsListCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/GetPartitions"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionsListValidateBeforeCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling partitionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionsList(Async)");
        }

        return partitionsListCall(serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * List partitions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return PartitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PartitionList partitionsList(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<PartitionList> localVarResp = partitionsListWithHttpInfo(serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * List partitions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;PartitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartitionList> partitionsListWithHttpInfo(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionsListValidateBeforeCall(serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<PartitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List partitions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partitions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsListAsync(String serviceName, String apiVersion, Integer timeout, final ApiCallback<PartitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionsListValidateBeforeCall(serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<PartitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partitionsRepair
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsRepairCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/Recover"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partitionsRepairValidateBeforeCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling partitionsRepair(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling partitionsRepair(Async)");
        }

        return partitionsRepairCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Repair partitions
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String partitionsRepair(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = partitionsRepairWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Repair partitions
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> partitionsRepairWithHttpInfo(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = partitionsRepairValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Repair partitions
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repair partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partitionsRepairAsync(String partitionId, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = partitionsRepairValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicaHealthsGet
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaHealthsGetCall(String partitionId, String replicaId, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventsHealthStateFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventsHealthStateFilter", eventsHealthStateFilter));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicaHealthsGetValidateBeforeCall(String partitionId, String replicaId, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling replicaHealthsGet(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling replicaHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicaHealthsGet(Async)");
        }

        return replicaHealthsGetCall(partitionId, replicaId, apiVersion, eventsHealthStateFilter, timeout, _callback);

    }

    /**
     * 
     * Get replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ReplicaHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ReplicaHealth replicaHealthsGet(String partitionId, String replicaId, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        ApiResponse<ReplicaHealth> localVarResp = replicaHealthsGetWithHttpInfo(partitionId, replicaId, apiVersion, eventsHealthStateFilter, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ReplicaHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicaHealth> replicaHealthsGetWithHttpInfo(String partitionId, String replicaId, String apiVersion, String eventsHealthStateFilter, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = replicaHealthsGetValidateBeforeCall(partitionId, replicaId, apiVersion, eventsHealthStateFilter, timeout, null);
        Type localVarReturnType = new TypeToken<ReplicaHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param eventsHealthStateFilter The filter of the events health state (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaHealthsGetAsync(String partitionId, String replicaId, String apiVersion, String eventsHealthStateFilter, Integer timeout, final ApiCallback<ReplicaHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicaHealthsGetValidateBeforeCall(partitionId, replicaId, apiVersion, eventsHealthStateFilter, timeout, _callback);
        Type localVarReturnType = new TypeToken<ReplicaHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicaHealthsSend
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param replicaHealthReport The report of the replica health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaHealthsSendCall(String partitionId, String replicaId, String apiVersion, ReplicaHealthReport replicaHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replicaHealthReport;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicaHealthsSendValidateBeforeCall(String partitionId, String replicaId, String apiVersion, ReplicaHealthReport replicaHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling replicaHealthsSend(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling replicaHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicaHealthsSend(Async)");
        }

        // verify the required parameter 'replicaHealthReport' is set
        if (replicaHealthReport == null) {
            throw new ApiException("Missing the required parameter 'replicaHealthReport' when calling replicaHealthsSend(Async)");
        }

        return replicaHealthsSendCall(partitionId, replicaId, apiVersion, replicaHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param replicaHealthReport The report of the replica health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String replicaHealthsSend(String partitionId, String replicaId, String apiVersion, ReplicaHealthReport replicaHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = replicaHealthsSendWithHttpInfo(partitionId, replicaId, apiVersion, replicaHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param replicaHealthReport The report of the replica health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> replicaHealthsSendWithHttpInfo(String partitionId, String replicaId, String apiVersion, ReplicaHealthReport replicaHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = replicaHealthsSendValidateBeforeCall(partitionId, replicaId, apiVersion, replicaHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send replica healths
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param replicaHealthReport The report of the replica health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaHealthsSendAsync(String partitionId, String replicaId, String apiVersion, ReplicaHealthReport replicaHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicaHealthsSendValidateBeforeCall(partitionId, replicaId, apiVersion, replicaHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicaLoadInformationsGet
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaLoadInformationsGetCall(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetLoadInformation"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicaLoadInformationsGetValidateBeforeCall(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling replicaLoadInformationsGet(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling replicaLoadInformationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicaLoadInformationsGet(Async)");
        }

        return replicaLoadInformationsGetCall(partitionId, replicaId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get replica load informations
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ReplicaLoadInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ReplicaLoadInformation replicaLoadInformationsGet(String partitionId, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ReplicaLoadInformation> localVarResp = replicaLoadInformationsGetWithHttpInfo(partitionId, replicaId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get replica load informations
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ReplicaLoadInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicaLoadInformation> replicaLoadInformationsGetWithHttpInfo(String partitionId, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = replicaLoadInformationsGetValidateBeforeCall(partitionId, replicaId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ReplicaLoadInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get replica load informations
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica load information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicaLoadInformationsGetAsync(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback<ReplicaLoadInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicaLoadInformationsGetValidateBeforeCall(partitionId, replicaId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ReplicaLoadInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicasGet
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicasGetCall(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetReplicas/{replicaId}"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()))
            .replace("{" + "replicaId" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicasGetValidateBeforeCall(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling replicasGet(Async)");
        }

        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling replicasGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicasGet(Async)");
        }

        return replicasGetCall(partitionId, replicaId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get replicas
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return Replica
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Replica replicasGet(String partitionId, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<Replica> localVarResp = replicasGetWithHttpInfo(partitionId, replicaId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get replicas
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;Replica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Replica> replicasGetWithHttpInfo(String partitionId, String replicaId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = replicasGetValidateBeforeCall(partitionId, replicaId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get replicas
     * @param partitionId The id of the partition (required)
     * @param replicaId The id of the replica (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicasGetAsync(String partitionId, String replicaId, String apiVersion, Integer timeout, final ApiCallback<Replica> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicasGetValidateBeforeCall(partitionId, replicaId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<Replica>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicasList
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicasListCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Partitions/{partitionId}/$/GetReplicas"
            .replace("{" + "partitionId" + "}", localVarApiClient.escapeString(partitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicasListValidateBeforeCall(String partitionId, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partitionId' is set
        if (partitionId == null) {
            throw new ApiException("Missing the required parameter 'partitionId' when calling replicasList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicasList(Async)");
        }

        return replicasListCall(partitionId, apiVersion, timeout, _callback);

    }

    /**
     * 
     * List replicas
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ReplicaList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ReplicaList replicasList(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ReplicaList> localVarResp = replicasListWithHttpInfo(partitionId, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * List replicas
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ReplicaList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicaList> replicasListWithHttpInfo(String partitionId, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = replicasListValidateBeforeCall(partitionId, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ReplicaList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List replicas
     * @param partitionId The id of the partition (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replica list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicasListAsync(String partitionId, String apiVersion, Integer timeout, final ApiCallback<ReplicaList> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicasListValidateBeforeCall(partitionId, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ReplicaList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceDescriptionsGet
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceDescriptionsGetCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/GetDescription"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceDescriptionsGetValidateBeforeCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceDescriptionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceDescriptionsGet(Async)");
        }

        return serviceDescriptionsGetCall(serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service descriptions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDescription serviceDescriptionsGet(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceDescription> localVarResp = serviceDescriptionsGetWithHttpInfo(serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service descriptions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDescription> serviceDescriptionsGetWithHttpInfo(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceDescriptionsGetValidateBeforeCall(serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service descriptions
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceDescriptionsGetAsync(String serviceName, String apiVersion, Integer timeout, final ApiCallback<ServiceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceDescriptionsGetValidateBeforeCall(serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceFromTemplatesCreate
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceFromTemplatesCreateCall(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceDescriptionTemplate;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/$/CreateFromTemplate"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceFromTemplatesCreateValidateBeforeCall(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceFromTemplatesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceFromTemplatesCreate(Async)");
        }

        // verify the required parameter 'serviceDescriptionTemplate' is set
        if (serviceDescriptionTemplate == null) {
            throw new ApiException("Missing the required parameter 'serviceDescriptionTemplate' when calling serviceFromTemplatesCreate(Async)");
        }

        return serviceFromTemplatesCreateCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, _callback);

    }

    /**
     * 
     * Create service from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceFromTemplatesCreate(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceFromTemplatesCreateWithHttpInfo(applicationName, apiVersion, serviceDescriptionTemplate, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Create service from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceFromTemplatesCreateWithHttpInfo(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceFromTemplatesCreateValidateBeforeCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create service from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceFromTemplatesCreateAsync(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceFromTemplatesCreateValidateBeforeCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupDescriptionsGet
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupDescriptionsGetCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupDescription"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupDescriptionsGetValidateBeforeCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupDescriptionsGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGroupDescriptionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupDescriptionsGet(Async)");
        }

        return serviceGroupDescriptionsGetCall(applicationName, serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service group descriptions
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceGroupDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceGroupDescription serviceGroupDescriptionsGet(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceGroupDescription> localVarResp = serviceGroupDescriptionsGetWithHttpInfo(applicationName, serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service group descriptions
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceGroupDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceGroupDescription> serviceGroupDescriptionsGetWithHttpInfo(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupDescriptionsGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceGroupDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service group descriptions
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupDescriptionsGetAsync(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback<ServiceGroupDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupDescriptionsGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceGroupDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupFromTemplatesCreate
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupFromTemplatesCreateCall(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceDescriptionTemplate;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServiceGroups/$/CreateServiceGroupFromTemplate"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupFromTemplatesCreateValidateBeforeCall(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupFromTemplatesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupFromTemplatesCreate(Async)");
        }

        // verify the required parameter 'serviceDescriptionTemplate' is set
        if (serviceDescriptionTemplate == null) {
            throw new ApiException("Missing the required parameter 'serviceDescriptionTemplate' when calling serviceGroupFromTemplatesCreate(Async)");
        }

        return serviceGroupFromTemplatesCreateCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, _callback);

    }

    /**
     * 
     * Create service group from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceGroupFromTemplatesCreate(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceGroupFromTemplatesCreateWithHttpInfo(applicationName, apiVersion, serviceDescriptionTemplate, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Create service group from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceGroupFromTemplatesCreateWithHttpInfo(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupFromTemplatesCreateValidateBeforeCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create service group from templates
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param serviceDescriptionTemplate The template of the service description (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service group description template </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupFromTemplatesCreateAsync(String applicationName, String apiVersion, ServiceDescriptionTemplate serviceDescriptionTemplate, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupFromTemplatesCreateValidateBeforeCall(applicationName, apiVersion, serviceDescriptionTemplate, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupMembersGet
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupMembersGetCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupMembers"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupMembersGetValidateBeforeCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupMembersGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGroupMembersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupMembersGet(Async)");
        }

        return serviceGroupMembersGetCall(applicationName, serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service group members
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceGroupMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceGroupMember serviceGroupMembersGet(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceGroupMember> localVarResp = serviceGroupMembersGetWithHttpInfo(applicationName, serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service group members
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceGroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceGroupMember> serviceGroupMembersGetWithHttpInfo(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupMembersGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceGroupMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service group members
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupMembersGetAsync(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback<ServiceGroupMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupMembersGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceGroupMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupsCreate
     * @param applicationName The name of the service group (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceGroupDescription The description of the service group (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsCreateCall(String applicationName, String apiVersion, CreateServiceGroupDescription createServiceGroupDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createServiceGroupDescription;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/$/CreateServiceGroup"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupsCreateValidateBeforeCall(String applicationName, String apiVersion, CreateServiceGroupDescription createServiceGroupDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupsCreate(Async)");
        }

        // verify the required parameter 'createServiceGroupDescription' is set
        if (createServiceGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'createServiceGroupDescription' when calling serviceGroupsCreate(Async)");
        }

        return serviceGroupsCreateCall(applicationName, apiVersion, createServiceGroupDescription, timeout, _callback);

    }

    /**
     * 
     * Create service groups
     * @param applicationName The name of the service group (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceGroupDescription The description of the service group (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceGroupsCreate(String applicationName, String apiVersion, CreateServiceGroupDescription createServiceGroupDescription, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceGroupsCreateWithHttpInfo(applicationName, apiVersion, createServiceGroupDescription, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Create service groups
     * @param applicationName The name of the service group (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceGroupDescription The description of the service group (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceGroupsCreateWithHttpInfo(String applicationName, String apiVersion, CreateServiceGroupDescription createServiceGroupDescription, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupsCreateValidateBeforeCall(applicationName, apiVersion, createServiceGroupDescription, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create service groups
     * @param applicationName The name of the service group (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceGroupDescription The description of the service group (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsCreateAsync(String applicationName, String apiVersion, CreateServiceGroupDescription createServiceGroupDescription, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupsCreateValidateBeforeCall(applicationName, apiVersion, createServiceGroupDescription, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupsRemove
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsRemoveCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServiceGroups/{serviceName}/$/Delete"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupsRemoveValidateBeforeCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupsRemove(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGroupsRemove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupsRemove(Async)");
        }

        return serviceGroupsRemoveCall(applicationName, serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Remove service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceGroupsRemove(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceGroupsRemoveWithHttpInfo(applicationName, serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceGroupsRemoveWithHttpInfo(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupsRemoveValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsRemoveAsync(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupsRemoveValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceGroupsUpdate
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceGroupDescription The description of the service group update (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsUpdateCall(String applicationName, String serviceName, String apiVersion, UpdateServiceGroupDescription updateServiceGroupDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateServiceGroupDescription;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/{serviceName}/$/UpdateServiceGroup"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGroupsUpdateValidateBeforeCall(String applicationName, String serviceName, String apiVersion, UpdateServiceGroupDescription updateServiceGroupDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling serviceGroupsUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGroupsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGroupsUpdate(Async)");
        }

        // verify the required parameter 'updateServiceGroupDescription' is set
        if (updateServiceGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'updateServiceGroupDescription' when calling serviceGroupsUpdate(Async)");
        }

        return serviceGroupsUpdateCall(applicationName, serviceName, apiVersion, updateServiceGroupDescription, timeout, _callback);

    }

    /**
     * 
     * Update service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceGroupDescription The description of the service group update (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceGroupsUpdate(String applicationName, String serviceName, String apiVersion, UpdateServiceGroupDescription updateServiceGroupDescription, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceGroupsUpdateWithHttpInfo(applicationName, serviceName, apiVersion, updateServiceGroupDescription, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Update service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceGroupDescription The description of the service group update (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceGroupsUpdateWithHttpInfo(String applicationName, String serviceName, String apiVersion, UpdateServiceGroupDescription updateServiceGroupDescription, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceGroupsUpdateValidateBeforeCall(applicationName, serviceName, apiVersion, updateServiceGroupDescription, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update service groups
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceGroupDescription The description of the service group update (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service group update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGroupsUpdateAsync(String applicationName, String serviceName, String apiVersion, UpdateServiceGroupDescription updateServiceGroupDescription, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGroupsUpdateValidateBeforeCall(applicationName, serviceName, apiVersion, updateServiceGroupDescription, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceHealthsGet
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceHealthsGetCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/GetHealth"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceHealthsGetValidateBeforeCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceHealthsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceHealthsGet(Async)");
        }

        return serviceHealthsGetCall(serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceHealth serviceHealthsGet(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceHealth> localVarResp = serviceHealthsGetWithHttpInfo(serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceHealth> serviceHealthsGetWithHttpInfo(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceHealthsGetValidateBeforeCall(serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceHealth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceHealthsGetAsync(String serviceName, String apiVersion, Integer timeout, final ApiCallback<ServiceHealth> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceHealthsGetValidateBeforeCall(serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceHealth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceHealthsSend
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param serviceHealthReport The report of the service health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceHealthsSendCall(String serviceName, String apiVersion, ServiceHealthReport serviceHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceHealthReport;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/ReportHealth"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceHealthsSendValidateBeforeCall(String serviceName, String apiVersion, ServiceHealthReport serviceHealthReport, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceHealthsSend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceHealthsSend(Async)");
        }

        // verify the required parameter 'serviceHealthReport' is set
        if (serviceHealthReport == null) {
            throw new ApiException("Missing the required parameter 'serviceHealthReport' when calling serviceHealthsSend(Async)");
        }

        return serviceHealthsSendCall(serviceName, apiVersion, serviceHealthReport, timeout, _callback);

    }

    /**
     * 
     * Send service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param serviceHealthReport The report of the service health (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String serviceHealthsSend(String serviceName, String apiVersion, ServiceHealthReport serviceHealthReport, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = serviceHealthsSendWithHttpInfo(serviceName, apiVersion, serviceHealthReport, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Send service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param serviceHealthReport The report of the service health (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> serviceHealthsSendWithHttpInfo(String serviceName, String apiVersion, ServiceHealthReport serviceHealthReport, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceHealthsSendValidateBeforeCall(serviceName, apiVersion, serviceHealthReport, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send service healths
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param serviceHealthReport The report of the service health (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service health </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceHealthsSendAsync(String serviceName, String apiVersion, ServiceHealthReport serviceHealthReport, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceHealthsSendValidateBeforeCall(serviceName, apiVersion, serviceHealthReport, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceManifestsGet
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceManifestsGetCall(String applicationTypeName, String applicationTypeVersion, String serviceManifestName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationTypeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeVersion", applicationTypeVersion));
        }

        if (serviceManifestName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceManifestName", serviceManifestName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceManifestsGetValidateBeforeCall(String applicationTypeName, String applicationTypeVersion, String serviceManifestName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling serviceManifestsGet(Async)");
        }

        // verify the required parameter 'applicationTypeVersion' is set
        if (applicationTypeVersion == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeVersion' when calling serviceManifestsGet(Async)");
        }

        // verify the required parameter 'serviceManifestName' is set
        if (serviceManifestName == null) {
            throw new ApiException("Missing the required parameter 'serviceManifestName' when calling serviceManifestsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceManifestsGet(Async)");
        }

        return serviceManifestsGetCall(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceManifest serviceManifestsGet(String applicationTypeName, String applicationTypeVersion, String serviceManifestName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceManifest> localVarResp = serviceManifestsGetWithHttpInfo(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceManifest> serviceManifestsGetWithHttpInfo(String applicationTypeName, String applicationTypeVersion, String serviceManifestName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceManifestsGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service manifests
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param serviceManifestName The name of the service manifest (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service manifest </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceManifestsGetAsync(String applicationTypeName, String applicationTypeVersion, String serviceManifestName, String apiVersion, Integer timeout, final ApiCallback<ServiceManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceManifestsGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceTypesGet
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTypesGetCall(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes"
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationTypeVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationTypeVersion", applicationTypeVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceTypesGetValidateBeforeCall(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling serviceTypesGet(Async)");
        }

        // verify the required parameter 'applicationTypeVersion' is set
        if (applicationTypeVersion == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeVersion' when calling serviceTypesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceTypesGet(Async)");
        }

        return serviceTypesGetCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get service types
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return List&lt;ServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ServiceType> serviceTypesGet(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<List<ServiceType>> localVarResp = serviceTypesGetWithHttpInfo(applicationTypeName, applicationTypeVersion, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get service types
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;List&lt;ServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServiceType>> serviceTypesGetWithHttpInfo(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = serviceTypesGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<List<ServiceType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get service types
     * @param applicationTypeName The name of the application type (required)
     * @param applicationTypeVersion The version of the application type (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service type </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceTypesGetAsync(String applicationTypeName, String applicationTypeVersion, String apiVersion, Integer timeout, final ApiCallback<List<ServiceType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceTypesGetValidateBeforeCall(applicationTypeName, applicationTypeVersion, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<ServiceType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCreate
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceDescription The description of the service (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateCall(String applicationName, String apiVersion, CreateServiceDescription createServiceDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createServiceDescription;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/$/Create"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCreateValidateBeforeCall(String applicationName, String apiVersion, CreateServiceDescription createServiceDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling servicesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCreate(Async)");
        }

        // verify the required parameter 'createServiceDescription' is set
        if (createServiceDescription == null) {
            throw new ApiException("Missing the required parameter 'createServiceDescription' when calling servicesCreate(Async)");
        }

        return servicesCreateCall(applicationName, apiVersion, createServiceDescription, timeout, _callback);

    }

    /**
     * 
     * Create services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceDescription The description of the service (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String servicesCreate(String applicationName, String apiVersion, CreateServiceDescription createServiceDescription, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = servicesCreateWithHttpInfo(applicationName, apiVersion, createServiceDescription, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Create services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceDescription The description of the service (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> servicesCreateWithHttpInfo(String applicationName, String apiVersion, CreateServiceDescription createServiceDescription, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesCreateValidateBeforeCall(applicationName, apiVersion, createServiceDescription, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param createServiceDescription The description of the service (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateAsync(String applicationName, String apiVersion, CreateServiceDescription createServiceDescription, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCreateValidateBeforeCall(applicationName, apiVersion, createServiceDescription, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices/{serviceName}"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetValidateBeforeCall(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling servicesGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGet(Async)");
        }

        return servicesGetCall(applicationName, serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get services
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Service servicesGet(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<Service> localVarResp = servicesGetWithHttpInfo(applicationName, serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get services
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> servicesGetWithHttpInfo(String applicationName, String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get services
     * @param applicationName The name of the application (required)
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetAsync(String applicationName, String serviceName, String apiVersion, Integer timeout, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(applicationName, serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesList
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Applications/{applicationName}/$/GetServices"
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListValidateBeforeCall(String applicationName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling servicesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesList(Async)");
        }

        return servicesListCall(applicationName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * List services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ServiceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServiceList servicesList(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ServiceList> localVarResp = servicesListWithHttpInfo(applicationName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * List services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ServiceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceList> servicesListWithHttpInfo(String applicationName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesListValidateBeforeCall(applicationName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ServiceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List services
     * @param applicationName The name of the application (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListAsync(String applicationName, String apiVersion, Integer timeout, final ApiCallback<ServiceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListValidateBeforeCall(applicationName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ServiceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesRemove
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRemoveCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/Delete"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesRemoveValidateBeforeCall(String serviceName, String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesRemove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesRemove(Async)");
        }

        return servicesRemoveCall(serviceName, apiVersion, timeout, _callback);

    }

    /**
     * 
     * Remove services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String servicesRemove(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = servicesRemoveWithHttpInfo(serviceName, apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> servicesRemoveWithHttpInfo(String serviceName, String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesRemoveValidateBeforeCall(serviceName, apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesRemoveAsync(String serviceName, String apiVersion, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesRemoveValidateBeforeCall(serviceName, apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesResolve
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param partitionKeyType The type of the partition key (optional)
     * @param partitionKeyValue The value of the partition key (optional)
     * @param previousRspVersion The version of the previous rsp (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesResolveCall(String serviceName, String apiVersion, Integer partitionKeyType, String partitionKeyValue, String previousRspVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/ResolvePartition"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partitionKeyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PartitionKeyType", partitionKeyType));
        }

        if (partitionKeyValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PartitionKeyValue", partitionKeyValue));
        }

        if (previousRspVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreviousRspVersion", previousRspVersion));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesResolveValidateBeforeCall(String serviceName, String apiVersion, Integer partitionKeyType, String partitionKeyValue, String previousRspVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesResolve(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesResolve(Async)");
        }

        return servicesResolveCall(serviceName, apiVersion, partitionKeyType, partitionKeyValue, previousRspVersion, timeout, _callback);

    }

    /**
     * 
     * Resolve services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param partitionKeyType The type of the partition key (optional)
     * @param partitionKeyValue The value of the partition key (optional)
     * @param previousRspVersion The version of the previous rsp (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ResolvedServicePartition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResolvedServicePartition servicesResolve(String serviceName, String apiVersion, Integer partitionKeyType, String partitionKeyValue, String previousRspVersion, Integer timeout) throws ApiException {
        ApiResponse<ResolvedServicePartition> localVarResp = servicesResolveWithHttpInfo(serviceName, apiVersion, partitionKeyType, partitionKeyValue, previousRspVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Resolve services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param partitionKeyType The type of the partition key (optional)
     * @param partitionKeyValue The value of the partition key (optional)
     * @param previousRspVersion The version of the previous rsp (optional)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ResolvedServicePartition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResolvedServicePartition> servicesResolveWithHttpInfo(String serviceName, String apiVersion, Integer partitionKeyType, String partitionKeyValue, String previousRspVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesResolveValidateBeforeCall(serviceName, apiVersion, partitionKeyType, partitionKeyValue, previousRspVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ResolvedServicePartition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resolve services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param partitionKeyType The type of the partition key (optional)
     * @param partitionKeyValue The value of the partition key (optional)
     * @param previousRspVersion The version of the previous rsp (optional)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The partition </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesResolveAsync(String serviceName, String apiVersion, Integer partitionKeyType, String partitionKeyValue, String previousRspVersion, Integer timeout, final ApiCallback<ResolvedServicePartition> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesResolveValidateBeforeCall(serviceName, apiVersion, partitionKeyType, partitionKeyValue, previousRspVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ResolvedServicePartition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesUpdate
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceDescription The description of the service update (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateCall(String serviceName, String apiVersion, UpdateServiceDescription updateServiceDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateServiceDescription;

        // create path and map variables
        String localVarPath = "/Services/{serviceName}/$/Update"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesUpdateValidateBeforeCall(String serviceName, String apiVersion, UpdateServiceDescription updateServiceDescription, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'updateServiceDescription' is set
        if (updateServiceDescription == null) {
            throw new ApiException("Missing the required parameter 'updateServiceDescription' when calling servicesUpdate(Async)");
        }

        return servicesUpdateCall(serviceName, apiVersion, updateServiceDescription, timeout, _callback);

    }

    /**
     * 
     * Update services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceDescription The description of the service update (required)
     * @param timeout The timeout in seconds (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public String servicesUpdate(String serviceName, String apiVersion, UpdateServiceDescription updateServiceDescription, Integer timeout) throws ApiException {
        ApiResponse<String> localVarResp = servicesUpdateWithHttpInfo(serviceName, apiVersion, updateServiceDescription, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Update services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceDescription The description of the service update (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> servicesUpdateWithHttpInfo(String serviceName, String apiVersion, UpdateServiceDescription updateServiceDescription, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(serviceName, apiVersion, updateServiceDescription, timeout, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update services
     * @param serviceName The name of the service (required)
     * @param apiVersion The version of the api (required)
     * @param updateServiceDescription The description of the service update (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service update description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateAsync(String serviceName, String apiVersion, UpdateServiceDescription updateServiceDescription, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(serviceName, apiVersion, updateServiceDescription, timeout, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upgradeProgressesGet
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upgrade progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeProgressesGetCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/$/GetUpgradeProgress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradeProgressesGetValidateBeforeCall(String apiVersion, Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling upgradeProgressesGet(Async)");
        }

        return upgradeProgressesGetCall(apiVersion, timeout, _callback);

    }

    /**
     * 
     * Get upgrade progresses
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ClusterUpgradeProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upgrade progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterUpgradeProgress upgradeProgressesGet(String apiVersion, Integer timeout) throws ApiException {
        ApiResponse<ClusterUpgradeProgress> localVarResp = upgradeProgressesGetWithHttpInfo(apiVersion, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * Get upgrade progresses
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @return ApiResponse&lt;ClusterUpgradeProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upgrade progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterUpgradeProgress> upgradeProgressesGetWithHttpInfo(String apiVersion, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = upgradeProgressesGetValidateBeforeCall(apiVersion, timeout, null);
        Type localVarReturnType = new TypeToken<ClusterUpgradeProgress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get upgrade progresses
     * @param apiVersion The version of the api (required)
     * @param timeout The timeout in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The upgrade progress </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeProgressesGetAsync(String apiVersion, Integer timeout, final ApiCallback<ClusterUpgradeProgress> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradeProgressesGetValidateBeforeCall(apiVersion, timeout, _callback);
        Type localVarReturnType = new TypeToken<ClusterUpgradeProgress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
