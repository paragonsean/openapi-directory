/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationHealthPolicyMap;
import org.openapitools.client.model.ClusterUpgradeHealthPolicy;
import org.openapitools.client.model.RollingUpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The description of the start cluster upgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartClusterUpgrade {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP = "ApplicationHealthPolicyMap";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY_MAP)
  private ApplicationHealthPolicyMap applicationHealthPolicyMap;

  public static final String SERIALIZED_NAME_CLUSTER_UPGRADE_HEALTH_POLICY = "ClusterUpgradeHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UPGRADE_HEALTH_POLICY)
  private ClusterUpgradeHealthPolicy clusterUpgradeHealthPolicy;

  public static final String SERIALIZED_NAME_CODE_VERSION = "CodeVersion";
  @SerializedName(SERIALIZED_NAME_CODE_VERSION)
  private String codeVersion;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "ConfigVersion";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private String configVersion;

  public static final String SERIALIZED_NAME_ENABLE_DELTA_HEALTH_EVALUATION = "EnableDeltaHealthEvaluation";
  @SerializedName(SERIALIZED_NAME_ENABLE_DELTA_HEALTH_EVALUATION)
  private Boolean enableDeltaHealthEvaluation;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart;

  public static final String SERIALIZED_NAME_MONITORING_POLICY = "MonitoringPolicy";
  @SerializedName(SERIALIZED_NAME_MONITORING_POLICY)
  private Object monitoringPolicy;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private RollingUpgradeMode rollingUpgradeMode;

  public static final String SERIALIZED_NAME_UPGRADE_KIND = "UpgradeKind";
  @SerializedName(SERIALIZED_NAME_UPGRADE_KIND)
  private String upgradeKind;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Integer upgradeReplicaSetCheckTimeoutInSeconds;

  public StartClusterUpgrade() {
  }

  public StartClusterUpgrade applicationHealthPolicyMap(ApplicationHealthPolicyMap applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
    return this;
  }

  /**
   * Get applicationHealthPolicyMap
   * @return applicationHealthPolicyMap
   */
  @javax.annotation.Nullable
  public ApplicationHealthPolicyMap getApplicationHealthPolicyMap() {
    return applicationHealthPolicyMap;
  }

  public void setApplicationHealthPolicyMap(ApplicationHealthPolicyMap applicationHealthPolicyMap) {
    this.applicationHealthPolicyMap = applicationHealthPolicyMap;
  }


  public StartClusterUpgrade clusterUpgradeHealthPolicy(ClusterUpgradeHealthPolicy clusterUpgradeHealthPolicy) {
    this.clusterUpgradeHealthPolicy = clusterUpgradeHealthPolicy;
    return this;
  }

  /**
   * Get clusterUpgradeHealthPolicy
   * @return clusterUpgradeHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterUpgradeHealthPolicy getClusterUpgradeHealthPolicy() {
    return clusterUpgradeHealthPolicy;
  }

  public void setClusterUpgradeHealthPolicy(ClusterUpgradeHealthPolicy clusterUpgradeHealthPolicy) {
    this.clusterUpgradeHealthPolicy = clusterUpgradeHealthPolicy;
  }


  public StartClusterUpgrade codeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
    return this;
  }

  /**
   * The version of the code
   * @return codeVersion
   */
  @javax.annotation.Nullable
  public String getCodeVersion() {
    return codeVersion;
  }

  public void setCodeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
  }


  public StartClusterUpgrade configVersion(String configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * The version of the config
   * @return configVersion
   */
  @javax.annotation.Nullable
  public String getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(String configVersion) {
    this.configVersion = configVersion;
  }


  public StartClusterUpgrade enableDeltaHealthEvaluation(Boolean enableDeltaHealthEvaluation) {
    this.enableDeltaHealthEvaluation = enableDeltaHealthEvaluation;
    return this;
  }

  /**
   * The evaluation of the enable delta health
   * @return enableDeltaHealthEvaluation
   */
  @javax.annotation.Nullable
  public Boolean getEnableDeltaHealthEvaluation() {
    return enableDeltaHealthEvaluation;
  }

  public void setEnableDeltaHealthEvaluation(Boolean enableDeltaHealthEvaluation) {
    this.enableDeltaHealthEvaluation = enableDeltaHealthEvaluation;
  }


  public StartClusterUpgrade forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * The flag of the force restart
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public StartClusterUpgrade monitoringPolicy(Object monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
    return this;
  }

  /**
   * The policy of the monitoring
   * @return monitoringPolicy
   */
  @javax.annotation.Nullable
  public Object getMonitoringPolicy() {
    return monitoringPolicy;
  }

  public void setMonitoringPolicy(Object monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
  }


  public StartClusterUpgrade rollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public RollingUpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public StartClusterUpgrade upgradeKind(String upgradeKind) {
    this.upgradeKind = upgradeKind;
    return this;
  }

  /**
   * The kind of the upgrade
   * @return upgradeKind
   */
  @javax.annotation.Nullable
  public String getUpgradeKind() {
    return upgradeKind;
  }

  public void setUpgradeKind(String upgradeKind) {
    this.upgradeKind = upgradeKind;
  }


  public StartClusterUpgrade upgradeReplicaSetCheckTimeoutInSeconds(Integer upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * The seconds of the upgrade replica set check timeout
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Integer upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartClusterUpgrade startClusterUpgrade = (StartClusterUpgrade) o;
    return Objects.equals(this.applicationHealthPolicyMap, startClusterUpgrade.applicationHealthPolicyMap) &&
        Objects.equals(this.clusterUpgradeHealthPolicy, startClusterUpgrade.clusterUpgradeHealthPolicy) &&
        Objects.equals(this.codeVersion, startClusterUpgrade.codeVersion) &&
        Objects.equals(this.configVersion, startClusterUpgrade.configVersion) &&
        Objects.equals(this.enableDeltaHealthEvaluation, startClusterUpgrade.enableDeltaHealthEvaluation) &&
        Objects.equals(this.forceRestart, startClusterUpgrade.forceRestart) &&
        Objects.equals(this.monitoringPolicy, startClusterUpgrade.monitoringPolicy) &&
        Objects.equals(this.rollingUpgradeMode, startClusterUpgrade.rollingUpgradeMode) &&
        Objects.equals(this.upgradeKind, startClusterUpgrade.upgradeKind) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, startClusterUpgrade.upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicyMap, clusterUpgradeHealthPolicy, codeVersion, configVersion, enableDeltaHealthEvaluation, forceRestart, monitoringPolicy, rollingUpgradeMode, upgradeKind, upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartClusterUpgrade {\n");
    sb.append("    applicationHealthPolicyMap: ").append(toIndentedString(applicationHealthPolicyMap)).append("\n");
    sb.append("    clusterUpgradeHealthPolicy: ").append(toIndentedString(clusterUpgradeHealthPolicy)).append("\n");
    sb.append("    codeVersion: ").append(toIndentedString(codeVersion)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    enableDeltaHealthEvaluation: ").append(toIndentedString(enableDeltaHealthEvaluation)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    monitoringPolicy: ").append(toIndentedString(monitoringPolicy)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    upgradeKind: ").append(toIndentedString(upgradeKind)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicyMap");
    openapiFields.add("ClusterUpgradeHealthPolicy");
    openapiFields.add("CodeVersion");
    openapiFields.add("ConfigVersion");
    openapiFields.add("EnableDeltaHealthEvaluation");
    openapiFields.add("ForceRestart");
    openapiFields.add("MonitoringPolicy");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("UpgradeKind");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartClusterUpgrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartClusterUpgrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartClusterUpgrade is not found in the empty JSON string", StartClusterUpgrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartClusterUpgrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartClusterUpgrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationHealthPolicyMap`
      if (jsonObj.get("ApplicationHealthPolicyMap") != null && !jsonObj.get("ApplicationHealthPolicyMap").isJsonNull()) {
        ApplicationHealthPolicyMap.validateJsonElement(jsonObj.get("ApplicationHealthPolicyMap"));
      }
      // validate the optional field `ClusterUpgradeHealthPolicy`
      if (jsonObj.get("ClusterUpgradeHealthPolicy") != null && !jsonObj.get("ClusterUpgradeHealthPolicy").isJsonNull()) {
        ClusterUpgradeHealthPolicy.validateJsonElement(jsonObj.get("ClusterUpgradeHealthPolicy"));
      }
      if ((jsonObj.get("CodeVersion") != null && !jsonObj.get("CodeVersion").isJsonNull()) && !jsonObj.get("CodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeVersion").toString()));
      }
      if ((jsonObj.get("ConfigVersion") != null && !jsonObj.get("ConfigVersion").isJsonNull()) && !jsonObj.get("ConfigVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigVersion").toString()));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        RollingUpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if ((jsonObj.get("UpgradeKind") != null && !jsonObj.get("UpgradeKind").isJsonNull()) && !jsonObj.get("UpgradeKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeKind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartClusterUpgrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartClusterUpgrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartClusterUpgrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartClusterUpgrade.class));

       return (TypeAdapter<T>) new TypeAdapter<StartClusterUpgrade>() {
           @Override
           public void write(JsonWriter out, StartClusterUpgrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartClusterUpgrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartClusterUpgrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartClusterUpgrade
   * @throws IOException if the JSON string is invalid with respect to StartClusterUpgrade
   */
  public static StartClusterUpgrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartClusterUpgrade.class);
  }

  /**
   * Convert an instance of StartClusterUpgrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

