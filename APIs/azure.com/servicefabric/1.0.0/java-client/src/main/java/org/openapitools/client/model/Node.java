/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClusterHealthNodeHealthStatesInnerId;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.NodeNodeDeactivationInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_CODE_VERSION = "CodeVersion";
  @SerializedName(SERIALIZED_NAME_CODE_VERSION)
  private String codeVersion;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "ConfigVersion";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private String configVersion;

  public static final String SERIALIZED_NAME_FAULT_DOMAIN = "FaultDomain";
  @SerializedName(SERIALIZED_NAME_FAULT_DOMAIN)
  private String faultDomain;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ClusterHealthNodeHealthStatesInnerId id;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_IP_ADDRESS_OR_F_Q_D_N = "IpAddressOrFQDN";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_OR_F_Q_D_N)
  private String ipAddressOrFQDN;

  public static final String SERIALIZED_NAME_IS_SEED_NODE = "IsSeedNode";
  @SerializedName(SERIALIZED_NAME_IS_SEED_NODE)
  private Boolean isSeedNode;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_DEACTIVATION_INFO = "NodeDeactivationInfo";
  @SerializedName(SERIALIZED_NAME_NODE_DEACTIVATION_INFO)
  private NodeNodeDeactivationInfo nodeDeactivationInfo;

  /**
   * Gets or Sets nodeStatus
   */
  @JsonAdapter(NodeStatusEnum.Adapter.class)
  public enum NodeStatusEnum {
    INVALID("Invalid"),
    
    UP("Up"),
    
    DOWN("Down"),
    
    ENABLING("Enabling"),
    
    DISABLING("Disabling"),
    
    DISABLED("Disabled"),
    
    UNKNOWN("Unknown"),
    
    REMOVED("Removed");

    private String value;

    NodeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeStatusEnum fromValue(String value) {
      for (NodeStatusEnum b : NodeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NodeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NodeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NodeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NODE_STATUS = "NodeStatus";
  @SerializedName(SERIALIZED_NAME_NODE_STATUS)
  private NodeStatusEnum nodeStatus;

  public static final String SERIALIZED_NAME_NODE_UP_TIME_IN_SECONDS = "NodeUpTimeInSeconds";
  @SerializedName(SERIALIZED_NAME_NODE_UP_TIME_IN_SECONDS)
  private String nodeUpTimeInSeconds;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN = "UpgradeDomain";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN)
  private String upgradeDomain;

  public Node() {
  }

  public Node codeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
    return this;
  }

  /**
   * Get codeVersion
   * @return codeVersion
   */
  @javax.annotation.Nullable
  public String getCodeVersion() {
    return codeVersion;
  }

  public void setCodeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
  }


  public Node configVersion(String configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * Get configVersion
   * @return configVersion
   */
  @javax.annotation.Nullable
  public String getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(String configVersion) {
    this.configVersion = configVersion;
  }


  public Node faultDomain(String faultDomain) {
    this.faultDomain = faultDomain;
    return this;
  }

  /**
   * Get faultDomain
   * @return faultDomain
   */
  @javax.annotation.Nullable
  public String getFaultDomain() {
    return faultDomain;
  }

  public void setFaultDomain(String faultDomain) {
    this.faultDomain = faultDomain;
  }


  public Node healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public Node id(ClusterHealthNodeHealthStatesInnerId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public ClusterHealthNodeHealthStatesInnerId getId() {
    return id;
  }

  public void setId(ClusterHealthNodeHealthStatesInnerId id) {
    this.id = id;
  }


  public Node instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Node ipAddressOrFQDN(String ipAddressOrFQDN) {
    this.ipAddressOrFQDN = ipAddressOrFQDN;
    return this;
  }

  /**
   * Get ipAddressOrFQDN
   * @return ipAddressOrFQDN
   */
  @javax.annotation.Nullable
  public String getIpAddressOrFQDN() {
    return ipAddressOrFQDN;
  }

  public void setIpAddressOrFQDN(String ipAddressOrFQDN) {
    this.ipAddressOrFQDN = ipAddressOrFQDN;
  }


  public Node isSeedNode(Boolean isSeedNode) {
    this.isSeedNode = isSeedNode;
    return this;
  }

  /**
   * Get isSeedNode
   * @return isSeedNode
   */
  @javax.annotation.Nullable
  public Boolean getIsSeedNode() {
    return isSeedNode;
  }

  public void setIsSeedNode(Boolean isSeedNode) {
    this.isSeedNode = isSeedNode;
  }


  public Node name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Node nodeDeactivationInfo(NodeNodeDeactivationInfo nodeDeactivationInfo) {
    this.nodeDeactivationInfo = nodeDeactivationInfo;
    return this;
  }

  /**
   * Get nodeDeactivationInfo
   * @return nodeDeactivationInfo
   */
  @javax.annotation.Nullable
  public NodeNodeDeactivationInfo getNodeDeactivationInfo() {
    return nodeDeactivationInfo;
  }

  public void setNodeDeactivationInfo(NodeNodeDeactivationInfo nodeDeactivationInfo) {
    this.nodeDeactivationInfo = nodeDeactivationInfo;
  }


  public Node nodeStatus(NodeStatusEnum nodeStatus) {
    this.nodeStatus = nodeStatus;
    return this;
  }

  /**
   * Get nodeStatus
   * @return nodeStatus
   */
  @javax.annotation.Nullable
  public NodeStatusEnum getNodeStatus() {
    return nodeStatus;
  }

  public void setNodeStatus(NodeStatusEnum nodeStatus) {
    this.nodeStatus = nodeStatus;
  }


  public Node nodeUpTimeInSeconds(String nodeUpTimeInSeconds) {
    this.nodeUpTimeInSeconds = nodeUpTimeInSeconds;
    return this;
  }

  /**
   * Get nodeUpTimeInSeconds
   * @return nodeUpTimeInSeconds
   */
  @javax.annotation.Nullable
  public String getNodeUpTimeInSeconds() {
    return nodeUpTimeInSeconds;
  }

  public void setNodeUpTimeInSeconds(String nodeUpTimeInSeconds) {
    this.nodeUpTimeInSeconds = nodeUpTimeInSeconds;
  }


  public Node type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Node upgradeDomain(String upgradeDomain) {
    this.upgradeDomain = upgradeDomain;
    return this;
  }

  /**
   * Get upgradeDomain
   * @return upgradeDomain
   */
  @javax.annotation.Nullable
  public String getUpgradeDomain() {
    return upgradeDomain;
  }

  public void setUpgradeDomain(String upgradeDomain) {
    this.upgradeDomain = upgradeDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.codeVersion, node.codeVersion) &&
        Objects.equals(this.configVersion, node.configVersion) &&
        Objects.equals(this.faultDomain, node.faultDomain) &&
        Objects.equals(this.healthState, node.healthState) &&
        Objects.equals(this.id, node.id) &&
        Objects.equals(this.instanceId, node.instanceId) &&
        Objects.equals(this.ipAddressOrFQDN, node.ipAddressOrFQDN) &&
        Objects.equals(this.isSeedNode, node.isSeedNode) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.nodeDeactivationInfo, node.nodeDeactivationInfo) &&
        Objects.equals(this.nodeStatus, node.nodeStatus) &&
        Objects.equals(this.nodeUpTimeInSeconds, node.nodeUpTimeInSeconds) &&
        Objects.equals(this.type, node.type) &&
        Objects.equals(this.upgradeDomain, node.upgradeDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeVersion, configVersion, faultDomain, healthState, id, instanceId, ipAddressOrFQDN, isSeedNode, name, nodeDeactivationInfo, nodeStatus, nodeUpTimeInSeconds, type, upgradeDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    codeVersion: ").append(toIndentedString(codeVersion)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    faultDomain: ").append(toIndentedString(faultDomain)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    ipAddressOrFQDN: ").append(toIndentedString(ipAddressOrFQDN)).append("\n");
    sb.append("    isSeedNode: ").append(toIndentedString(isSeedNode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeDeactivationInfo: ").append(toIndentedString(nodeDeactivationInfo)).append("\n");
    sb.append("    nodeStatus: ").append(toIndentedString(nodeStatus)).append("\n");
    sb.append("    nodeUpTimeInSeconds: ").append(toIndentedString(nodeUpTimeInSeconds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    upgradeDomain: ").append(toIndentedString(upgradeDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeVersion");
    openapiFields.add("ConfigVersion");
    openapiFields.add("FaultDomain");
    openapiFields.add("HealthState");
    openapiFields.add("Id");
    openapiFields.add("InstanceId");
    openapiFields.add("IpAddressOrFQDN");
    openapiFields.add("IsSeedNode");
    openapiFields.add("Name");
    openapiFields.add("NodeDeactivationInfo");
    openapiFields.add("NodeStatus");
    openapiFields.add("NodeUpTimeInSeconds");
    openapiFields.add("Type");
    openapiFields.add("UpgradeDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CodeVersion") != null && !jsonObj.get("CodeVersion").isJsonNull()) && !jsonObj.get("CodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeVersion").toString()));
      }
      if ((jsonObj.get("ConfigVersion") != null && !jsonObj.get("ConfigVersion").isJsonNull()) && !jsonObj.get("ConfigVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigVersion").toString()));
      }
      if ((jsonObj.get("FaultDomain") != null && !jsonObj.get("FaultDomain").isJsonNull()) && !jsonObj.get("FaultDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaultDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaultDomain").toString()));
      }
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        ClusterHealthNodeHealthStatesInnerId.validateJsonElement(jsonObj.get("Id"));
      }
      if ((jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) && !jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("IpAddressOrFQDN") != null && !jsonObj.get("IpAddressOrFQDN").isJsonNull()) && !jsonObj.get("IpAddressOrFQDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IpAddressOrFQDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IpAddressOrFQDN").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `NodeDeactivationInfo`
      if (jsonObj.get("NodeDeactivationInfo") != null && !jsonObj.get("NodeDeactivationInfo").isJsonNull()) {
        NodeNodeDeactivationInfo.validateJsonElement(jsonObj.get("NodeDeactivationInfo"));
      }
      if ((jsonObj.get("NodeStatus") != null && !jsonObj.get("NodeStatus").isJsonNull()) && !jsonObj.get("NodeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeStatus").toString()));
      }
      // validate the optional field `NodeStatus`
      if (jsonObj.get("NodeStatus") != null && !jsonObj.get("NodeStatus").isJsonNull()) {
        NodeStatusEnum.validateJsonElement(jsonObj.get("NodeStatus"));
      }
      if ((jsonObj.get("NodeUpTimeInSeconds") != null && !jsonObj.get("NodeUpTimeInSeconds").isJsonNull()) && !jsonObj.get("NodeUpTimeInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeUpTimeInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeUpTimeInSeconds").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("UpgradeDomain") != null && !jsonObj.get("UpgradeDomain").isJsonNull()) && !jsonObj.get("UpgradeDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

