/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReplicaRole;
import org.openapitools.client.model.ReplicaStatus;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The replica of the deployed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedReplica {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CODE_PACKAGE_NAME = "CodePackageName";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGE_NAME)
  private String codePackageName;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private String partitionId;

  public static final String SERIALIZED_NAME_REPLICA_ID = "ReplicaId";
  @SerializedName(SERIALIZED_NAME_REPLICA_ID)
  private String replicaId;

  public static final String SERIALIZED_NAME_REPLICA_ROLE = "ReplicaRole";
  @SerializedName(SERIALIZED_NAME_REPLICA_ROLE)
  private ReplicaRole replicaRole;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  private ReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_VERSION = "ServiceManifestVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_VERSION)
  private String serviceManifestVersion;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public DeployedReplica() {
  }

  public DeployedReplica address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public DeployedReplica codePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
    return this;
  }

  /**
   * Get codePackageName
   * @return codePackageName
   */
  @javax.annotation.Nullable
  public String getCodePackageName() {
    return codePackageName;
  }

  public void setCodePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
  }


  public DeployedReplica instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DeployedReplica partitionId(String partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * Get partitionId
   * @return partitionId
   */
  @javax.annotation.Nullable
  public String getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(String partitionId) {
    this.partitionId = partitionId;
  }


  public DeployedReplica replicaId(String replicaId) {
    this.replicaId = replicaId;
    return this;
  }

  /**
   * Get replicaId
   * @return replicaId
   */
  @javax.annotation.Nullable
  public String getReplicaId() {
    return replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }


  public DeployedReplica replicaRole(ReplicaRole replicaRole) {
    this.replicaRole = replicaRole;
    return this;
  }

  /**
   * Get replicaRole
   * @return replicaRole
   */
  @javax.annotation.Nullable
  public ReplicaRole getReplicaRole() {
    return replicaRole;
  }

  public void setReplicaRole(ReplicaRole replicaRole) {
    this.replicaRole = replicaRole;
  }


  public DeployedReplica replicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * Get replicaStatus
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public ReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public DeployedReplica serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public DeployedReplica serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * Get serviceManifestName
   * @return serviceManifestName
   */
  @javax.annotation.Nullable
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public DeployedReplica serviceManifestVersion(String serviceManifestVersion) {
    this.serviceManifestVersion = serviceManifestVersion;
    return this;
  }

  /**
   * Get serviceManifestVersion
   * @return serviceManifestVersion
   */
  @javax.annotation.Nullable
  public String getServiceManifestVersion() {
    return serviceManifestVersion;
  }

  public void setServiceManifestVersion(String serviceManifestVersion) {
    this.serviceManifestVersion = serviceManifestVersion;
  }


  public DeployedReplica serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public DeployedReplica serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Get serviceTypeName
   * @return serviceTypeName
   */
  @javax.annotation.Nullable
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedReplica deployedReplica = (DeployedReplica) o;
    return Objects.equals(this.address, deployedReplica.address) &&
        Objects.equals(this.codePackageName, deployedReplica.codePackageName) &&
        Objects.equals(this.instanceId, deployedReplica.instanceId) &&
        Objects.equals(this.partitionId, deployedReplica.partitionId) &&
        Objects.equals(this.replicaId, deployedReplica.replicaId) &&
        Objects.equals(this.replicaRole, deployedReplica.replicaRole) &&
        Objects.equals(this.replicaStatus, deployedReplica.replicaStatus) &&
        Objects.equals(this.serviceKind, deployedReplica.serviceKind) &&
        Objects.equals(this.serviceManifestName, deployedReplica.serviceManifestName) &&
        Objects.equals(this.serviceManifestVersion, deployedReplica.serviceManifestVersion) &&
        Objects.equals(this.serviceName, deployedReplica.serviceName) &&
        Objects.equals(this.serviceTypeName, deployedReplica.serviceTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, codePackageName, instanceId, partitionId, replicaId, replicaRole, replicaStatus, serviceKind, serviceManifestName, serviceManifestVersion, serviceName, serviceTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedReplica {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    codePackageName: ").append(toIndentedString(codePackageName)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaId: ").append(toIndentedString(replicaId)).append("\n");
    sb.append("    replicaRole: ").append(toIndentedString(replicaRole)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    serviceManifestVersion: ").append(toIndentedString(serviceManifestVersion)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("CodePackageName");
    openapiFields.add("InstanceId");
    openapiFields.add("PartitionId");
    openapiFields.add("ReplicaId");
    openapiFields.add("ReplicaRole");
    openapiFields.add("ReplicaStatus");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServiceManifestVersion");
    openapiFields.add("ServiceName");
    openapiFields.add("ServiceTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedReplica
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedReplica.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedReplica is not found in the empty JSON string", DeployedReplica.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedReplica.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedReplica` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if ((jsonObj.get("CodePackageName") != null && !jsonObj.get("CodePackageName").isJsonNull()) && !jsonObj.get("CodePackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodePackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodePackageName").toString()));
      }
      if ((jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) && !jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      if ((jsonObj.get("ReplicaId") != null && !jsonObj.get("ReplicaId").isJsonNull()) && !jsonObj.get("ReplicaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaId").toString()));
      }
      // validate the optional field `ReplicaRole`
      if (jsonObj.get("ReplicaRole") != null && !jsonObj.get("ReplicaRole").isJsonNull()) {
        ReplicaRole.validateJsonElement(jsonObj.get("ReplicaRole"));
      }
      // validate the optional field `ReplicaStatus`
      if (jsonObj.get("ReplicaStatus") != null && !jsonObj.get("ReplicaStatus").isJsonNull()) {
        ReplicaStatus.validateJsonElement(jsonObj.get("ReplicaStatus"));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
      if ((jsonObj.get("ServiceManifestName") != null && !jsonObj.get("ServiceManifestName").isJsonNull()) && !jsonObj.get("ServiceManifestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestName").toString()));
      }
      if ((jsonObj.get("ServiceManifestVersion") != null && !jsonObj.get("ServiceManifestVersion").isJsonNull()) && !jsonObj.get("ServiceManifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestVersion").toString()));
      }
      if ((jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) && !jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
      if ((jsonObj.get("ServiceTypeName") != null && !jsonObj.get("ServiceTypeName").isJsonNull()) && !jsonObj.get("ServiceTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedReplica.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedReplica' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedReplica> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedReplica.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedReplica>() {
           @Override
           public void write(JsonWriter out, DeployedReplica value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedReplica read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedReplica given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedReplica
   * @throws IOException if the JSON string is invalid with respect to DeployedReplica
   */
  public static DeployedReplica fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedReplica.class);
  }

  /**
   * Convert an instance of DeployedReplica to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

