/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthEvent;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.PartitionHealthReplicaHealthStatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The health of the partition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionHealth {
  public static final String SERIALIZED_NAME_AGGREGATED_HEALTH_STATE = "AggregatedHealthState";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_HEALTH_STATE)
  private HealthState aggregatedHealthState;

  public static final String SERIALIZED_NAME_HEALTH_EVENTS = "HealthEvents";
  @SerializedName(SERIALIZED_NAME_HEALTH_EVENTS)
  private List<HealthEvent> healthEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private String partitionId;

  public static final String SERIALIZED_NAME_REPLICA_HEALTH_STATES = "ReplicaHealthStates";
  @SerializedName(SERIALIZED_NAME_REPLICA_HEALTH_STATES)
  private List<PartitionHealthReplicaHealthStatesInner> replicaHealthStates = new ArrayList<>();

  public PartitionHealth() {
  }

  public PartitionHealth aggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
    return this;
  }

  /**
   * Get aggregatedHealthState
   * @return aggregatedHealthState
   */
  @javax.annotation.Nullable
  public HealthState getAggregatedHealthState() {
    return aggregatedHealthState;
  }

  public void setAggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
  }


  public PartitionHealth healthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
    return this;
  }

  public PartitionHealth addHealthEventsItem(HealthEvent healthEventsItem) {
    if (this.healthEvents == null) {
      this.healthEvents = new ArrayList<>();
    }
    this.healthEvents.add(healthEventsItem);
    return this;
  }

  /**
   * Get healthEvents
   * @return healthEvents
   */
  @javax.annotation.Nullable
  public List<HealthEvent> getHealthEvents() {
    return healthEvents;
  }

  public void setHealthEvents(List<HealthEvent> healthEvents) {
    this.healthEvents = healthEvents;
  }


  public PartitionHealth partitionId(String partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * Get partitionId
   * @return partitionId
   */
  @javax.annotation.Nullable
  public String getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(String partitionId) {
    this.partitionId = partitionId;
  }


  public PartitionHealth replicaHealthStates(List<PartitionHealthReplicaHealthStatesInner> replicaHealthStates) {
    this.replicaHealthStates = replicaHealthStates;
    return this;
  }

  public PartitionHealth addReplicaHealthStatesItem(PartitionHealthReplicaHealthStatesInner replicaHealthStatesItem) {
    if (this.replicaHealthStates == null) {
      this.replicaHealthStates = new ArrayList<>();
    }
    this.replicaHealthStates.add(replicaHealthStatesItem);
    return this;
  }

  /**
   * Get replicaHealthStates
   * @return replicaHealthStates
   */
  @javax.annotation.Nullable
  public List<PartitionHealthReplicaHealthStatesInner> getReplicaHealthStates() {
    return replicaHealthStates;
  }

  public void setReplicaHealthStates(List<PartitionHealthReplicaHealthStatesInner> replicaHealthStates) {
    this.replicaHealthStates = replicaHealthStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionHealth partitionHealth = (PartitionHealth) o;
    return Objects.equals(this.aggregatedHealthState, partitionHealth.aggregatedHealthState) &&
        Objects.equals(this.healthEvents, partitionHealth.healthEvents) &&
        Objects.equals(this.partitionId, partitionHealth.partitionId) &&
        Objects.equals(this.replicaHealthStates, partitionHealth.replicaHealthStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatedHealthState, healthEvents, partitionId, replicaHealthStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionHealth {\n");
    sb.append("    aggregatedHealthState: ").append(toIndentedString(aggregatedHealthState)).append("\n");
    sb.append("    healthEvents: ").append(toIndentedString(healthEvents)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaHealthStates: ").append(toIndentedString(replicaHealthStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("HealthEvents");
    openapiFields.add("PartitionId");
    openapiFields.add("ReplicaHealthStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionHealth is not found in the empty JSON string", PartitionHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AggregatedHealthState`
      if (jsonObj.get("AggregatedHealthState") != null && !jsonObj.get("AggregatedHealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("AggregatedHealthState"));
      }
      if (jsonObj.get("HealthEvents") != null && !jsonObj.get("HealthEvents").isJsonNull()) {
        JsonArray jsonArrayhealthEvents = jsonObj.getAsJsonArray("HealthEvents");
        if (jsonArrayhealthEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HealthEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HealthEvents` to be an array in the JSON string but got `%s`", jsonObj.get("HealthEvents").toString()));
          }

          // validate the optional field `HealthEvents` (array)
          for (int i = 0; i < jsonArrayhealthEvents.size(); i++) {
            HealthEvent.validateJsonElement(jsonArrayhealthEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      if (jsonObj.get("ReplicaHealthStates") != null && !jsonObj.get("ReplicaHealthStates").isJsonNull()) {
        JsonArray jsonArrayreplicaHealthStates = jsonObj.getAsJsonArray("ReplicaHealthStates");
        if (jsonArrayreplicaHealthStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReplicaHealthStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReplicaHealthStates` to be an array in the JSON string but got `%s`", jsonObj.get("ReplicaHealthStates").toString()));
          }

          // validate the optional field `ReplicaHealthStates` (array)
          for (int i = 0; i < jsonArrayreplicaHealthStates.size(); i++) {
            PartitionHealthReplicaHealthStatesInner.validateJsonElement(jsonArrayreplicaHealthStates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionHealth>() {
           @Override
           public void write(JsonWriter out, PartitionHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionHealth
   * @throws IOException if the JSON string is invalid with respect to PartitionHealth
   */
  public static PartitionHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionHealth.class);
  }

  /**
   * Convert an instance of PartitionHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

