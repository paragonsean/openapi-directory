/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PartitionDescription;
import org.openapitools.client.model.ServiceCorrelationDescription;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The description of the service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceDescription {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_CORRELATION_SCHEME = "CorrelationScheme";
  @SerializedName(SERIALIZED_NAME_CORRELATION_SCHEME)
  private ServiceCorrelationDescription correlationScheme;

  public static final String SERIALIZED_NAME_FLAGS = "Flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private Integer flags;

  public static final String SERIALIZED_NAME_PARTITION_DESCRIPTION = "PartitionDescription";
  @SerializedName(SERIALIZED_NAME_PARTITION_DESCRIPTION)
  private PartitionDescription partitionDescription;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "PlacementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private String placementConstraints;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  protected ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_LOAD_METRICS = "ServiceLoadMetrics";
  @SerializedName(SERIALIZED_NAME_SERVICE_LOAD_METRICS)
  private ServiceCorrelationDescription serviceLoadMetrics;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES = "ServicePlacementPolicies";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES)
  private ServiceCorrelationDescription servicePlacementPolicies;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "ServiceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public ServiceDescription() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public ServiceDescription applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ServiceDescription correlationScheme(ServiceCorrelationDescription correlationScheme) {
    this.correlationScheme = correlationScheme;
    return this;
  }

  /**
   * Get correlationScheme
   * @return correlationScheme
   */
  @javax.annotation.Nullable
  public ServiceCorrelationDescription getCorrelationScheme() {
    return correlationScheme;
  }

  public void setCorrelationScheme(ServiceCorrelationDescription correlationScheme) {
    this.correlationScheme = correlationScheme;
  }


  public ServiceDescription flags(Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public Integer getFlags() {
    return flags;
  }

  public void setFlags(Integer flags) {
    this.flags = flags;
  }


  public ServiceDescription partitionDescription(PartitionDescription partitionDescription) {
    this.partitionDescription = partitionDescription;
    return this;
  }

  /**
   * Get partitionDescription
   * @return partitionDescription
   */
  @javax.annotation.Nullable
  public PartitionDescription getPartitionDescription() {
    return partitionDescription;
  }

  public void setPartitionDescription(PartitionDescription partitionDescription) {
    this.partitionDescription = partitionDescription;
  }


  public ServiceDescription placementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * Get placementConstraints
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public String getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public ServiceDescription serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nonnull
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public ServiceDescription serviceLoadMetrics(ServiceCorrelationDescription serviceLoadMetrics) {
    this.serviceLoadMetrics = serviceLoadMetrics;
    return this;
  }

  /**
   * Get serviceLoadMetrics
   * @return serviceLoadMetrics
   */
  @javax.annotation.Nullable
  public ServiceCorrelationDescription getServiceLoadMetrics() {
    return serviceLoadMetrics;
  }

  public void setServiceLoadMetrics(ServiceCorrelationDescription serviceLoadMetrics) {
    this.serviceLoadMetrics = serviceLoadMetrics;
  }


  public ServiceDescription serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceDescription servicePlacementPolicies(ServiceCorrelationDescription servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
    return this;
  }

  /**
   * Get servicePlacementPolicies
   * @return servicePlacementPolicies
   */
  @javax.annotation.Nullable
  public ServiceCorrelationDescription getServicePlacementPolicies() {
    return servicePlacementPolicies;
  }

  public void setServicePlacementPolicies(ServiceCorrelationDescription servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
  }


  public ServiceDescription serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * Get serviceTypeName
   * @return serviceTypeName
   */
  @javax.annotation.Nullable
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDescription serviceDescription = (ServiceDescription) o;
    return Objects.equals(this.applicationName, serviceDescription.applicationName) &&
        Objects.equals(this.correlationScheme, serviceDescription.correlationScheme) &&
        Objects.equals(this.flags, serviceDescription.flags) &&
        Objects.equals(this.partitionDescription, serviceDescription.partitionDescription) &&
        Objects.equals(this.placementConstraints, serviceDescription.placementConstraints) &&
        Objects.equals(this.serviceKind, serviceDescription.serviceKind) &&
        Objects.equals(this.serviceLoadMetrics, serviceDescription.serviceLoadMetrics) &&
        Objects.equals(this.serviceName, serviceDescription.serviceName) &&
        Objects.equals(this.servicePlacementPolicies, serviceDescription.servicePlacementPolicies) &&
        Objects.equals(this.serviceTypeName, serviceDescription.serviceTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, correlationScheme, flags, partitionDescription, placementConstraints, serviceKind, serviceLoadMetrics, serviceName, servicePlacementPolicies, serviceTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDescription {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    correlationScheme: ").append(toIndentedString(correlationScheme)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    partitionDescription: ").append(toIndentedString(partitionDescription)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceLoadMetrics: ").append(toIndentedString(serviceLoadMetrics)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    servicePlacementPolicies: ").append(toIndentedString(servicePlacementPolicies)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("CorrelationScheme");
    openapiFields.add("Flags");
    openapiFields.add("PartitionDescription");
    openapiFields.add("PlacementConstraints");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceLoadMetrics");
    openapiFields.add("ServiceName");
    openapiFields.add("ServicePlacementPolicies");
    openapiFields.add("ServiceTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceDescription is not found in the empty JSON string", ServiceDescription.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("ServiceKind").getAsString();
      switch (discriminatorValue) {
        case "StatefulServiceDescription":
          StatefulServiceDescription.validateJsonElement(jsonElement);
          break;
        case "StatelessServiceDescription":
          StatelessServiceDescription.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `ServiceKind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ServiceDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceDescription
   * @throws IOException if the JSON string is invalid with respect to ServiceDescription
   */
  public static ServiceDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceDescription.class);
  }

  /**
   * Convert an instance of ServiceDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

