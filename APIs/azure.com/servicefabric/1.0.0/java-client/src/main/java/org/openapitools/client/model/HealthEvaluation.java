/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The evauation of the health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthEvaluation {
  public static final String SERIALIZED_NAME_AGGREGATED_HEALTH_STATE = "AggregatedHealthState";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_HEALTH_STATE)
  private HealthState aggregatedHealthState;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    INVALID("Invalid"),
    
    EVENT("Event"),
    
    REPLICAS("Replicas"),
    
    PARTITIONS("Partitions"),
    
    DEPLOYED_SERVICE_PACKAGES("DeployedServicePackages"),
    
    DEPLOYED_APPLICATIONS("DeployedApplications"),
    
    SERVICES("Services"),
    
    NODES("Nodes"),
    
    APPLICATIONS("Applications"),
    
    SYSTEM_APPLICATION("SystemApplication"),
    
    UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS("UpgradeDomainDeployedApplications"),
    
    UPGRADE_DOMAIN_NODES("UpgradeDomainNodes"),
    
    NODE("Node"),
    
    REPLICA("Replica"),
    
    PARTITION("Partition"),
    
    SERVICE("Service"),
    
    DEPLOYED_SERVICE_PACKAGE("DeployedServicePackage"),
    
    DEPLOYED_APPLICATION("DeployedApplication"),
    
    APPLICATION("Application"),
    
    DELTA_NODES_CHECK("DeltaNodesCheck"),
    
    UPGRADE_DOMAIN_DELTA_NODES_CHECK("UpgradeDomainDeltaNodesCheck"),
    
    APPLICATION_TYPE_APPLICATIONS("ApplicationTypeApplications");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  protected KindEnum kind;

  public HealthEvaluation() {
  }

  public HealthEvaluation aggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
    return this;
  }

  /**
   * Get aggregatedHealthState
   * @return aggregatedHealthState
   */
  @javax.annotation.Nullable
  public HealthState getAggregatedHealthState() {
    return aggregatedHealthState;
  }

  public void setAggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
  }


  public HealthEvaluation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public HealthEvaluation kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthEvaluation healthEvaluation = (HealthEvaluation) o;
    return Objects.equals(this.aggregatedHealthState, healthEvaluation.aggregatedHealthState) &&
        Objects.equals(this.description, healthEvaluation.description) &&
        Objects.equals(this.kind, healthEvaluation.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatedHealthState, description, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthEvaluation {\n");
    sb.append("    aggregatedHealthState: ").append(toIndentedString(aggregatedHealthState)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("Description");
    openapiFields.add("Kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthEvaluation is not found in the empty JSON string", HealthEvaluation.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("Kind").getAsString();
      switch (discriminatorValue) {
        case "ApplicationHealthEvaluation":
          ApplicationHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ApplicationTypeHealthEvaluation":
          ApplicationTypeHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ApplicationsHealthEvaluation":
          ApplicationsHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "DeltaNodesCheckHealthEvaluation":
          DeltaNodesCheckHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationHealthEvaluation":
          DeployedApplicationHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "DeployedApplicationsHealthEvaluation":
          DeployedApplicationsHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "DeployedServicePackageHealthEvaluation":
          DeployedServicePackageHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "DeployedServicePackagesHealthEvaluation":
          DeployedServicePackagesHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "EventHealthEvaluation":
          EventHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "NodeHealthEvaluation":
          NodeHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "NodesHealthEvaluation":
          NodesHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "PartitionHealthEvaluation":
          PartitionHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "PartitionsHealthEvaluation":
          PartitionsHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ReplicaHealthEvaluation":
          ReplicaHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ReplicasHealthEvaluation":
          ReplicasHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ServiceHealthEvaluation":
          ServiceHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "ServicesHealthEvaluation":
          ServicesHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "SystemApplicationHealthEvaluation":
          SystemApplicationHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "UpgradeDomainDeltaNodesCheckHealthEvaluation":
          UpgradeDomainDeltaNodesCheckHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "UpgradeDomainDeployedApplicationsHealthEvaluation":
          UpgradeDomainDeployedApplicationsHealthEvaluation.validateJsonElement(jsonElement);
          break;
        case "UpgradeDomainNodesHealthEvaluation":
          UpgradeDomainNodesHealthEvaluation.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `Kind` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of HealthEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthEvaluation
   * @throws IOException if the JSON string is invalid with respect to HealthEvaluation
   */
  public static HealthEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthEvaluation.class);
  }

  /**
   * Convert an instance of HealthEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

