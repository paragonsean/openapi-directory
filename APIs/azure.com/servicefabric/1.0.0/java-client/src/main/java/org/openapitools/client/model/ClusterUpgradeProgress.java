/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationUpgradeCurrentUpgradeDomainProgress;
import org.openapitools.client.model.ClusterUpgradeProgressUpgradeDomainProgressAtFailure;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.RollingUpgradeMode;
import org.openapitools.client.model.UnhealthyEvaluation;
import org.openapitools.client.model.UpgradeState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The progress of the cluster upgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeProgress {
  public static final String SERIALIZED_NAME_CODE_VERSION = "CodeVersion";
  @SerializedName(SERIALIZED_NAME_CODE_VERSION)
  private String codeVersion;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "ConfigVersion";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private String configVersion;

  public static final String SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS = "CurrentUpgradeDomainProgress";
  @SerializedName(SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS)
  private ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  public static final String SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC = "FailureTimestampUtc";
  @SerializedName(SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC)
  private String failureTimestampUtc;

  public static final String SERIALIZED_NAME_NEXT_UPGRADE_DOMAIN = "NextUpgradeDomain";
  @SerializedName(SERIALIZED_NAME_NEXT_UPGRADE_DOMAIN)
  private String nextUpgradeDomain;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private RollingUpgradeMode rollingUpgradeMode;

  public static final String SERIALIZED_NAME_START_TIMESTAMP_UTC = "StartTimestampUtc";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP_UTC)
  private String startTimestampUtc;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<UnhealthyEvaluation> unhealthyEvaluations = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_DURATION_IN_MILLISECONDS = "UpgradeDomainDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_DURATION_IN_MILLISECONDS)
  private String upgradeDomainDurationInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_PROGRESS_AT_FAILURE = "UpgradeDomainProgressAtFailure";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_PROGRESS_AT_FAILURE)
  private ClusterUpgradeProgressUpgradeDomainProgressAtFailure upgradeDomainProgressAtFailure;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAINS = "UpgradeDomains";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAINS)
  private List<String> upgradeDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADE_DURATION_IN_MILLISECONDS = "UpgradeDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DURATION_IN_MILLISECONDS)
  private String upgradeDurationInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "UpgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private UpgradeState upgradeState;

  public ClusterUpgradeProgress() {
  }

  public ClusterUpgradeProgress codeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
    return this;
  }

  /**
   * Get codeVersion
   * @return codeVersion
   */
  @javax.annotation.Nullable
  public String getCodeVersion() {
    return codeVersion;
  }

  public void setCodeVersion(String codeVersion) {
    this.codeVersion = codeVersion;
  }


  public ClusterUpgradeProgress configVersion(String configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * Get configVersion
   * @return configVersion
   */
  @javax.annotation.Nullable
  public String getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(String configVersion) {
    this.configVersion = configVersion;
  }


  public ClusterUpgradeProgress currentUpgradeDomainProgress(ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
    return this;
  }

  /**
   * Get currentUpgradeDomainProgress
   * @return currentUpgradeDomainProgress
   */
  @javax.annotation.Nullable
  public ApplicationUpgradeCurrentUpgradeDomainProgress getCurrentUpgradeDomainProgress() {
    return currentUpgradeDomainProgress;
  }

  public void setCurrentUpgradeDomainProgress(ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
  }


  public ClusterUpgradeProgress failureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
  }


  public ClusterUpgradeProgress failureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
    return this;
  }

  /**
   * Get failureTimestampUtc
   * @return failureTimestampUtc
   */
  @javax.annotation.Nullable
  public String getFailureTimestampUtc() {
    return failureTimestampUtc;
  }

  public void setFailureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
  }


  public ClusterUpgradeProgress nextUpgradeDomain(String nextUpgradeDomain) {
    this.nextUpgradeDomain = nextUpgradeDomain;
    return this;
  }

  /**
   * Get nextUpgradeDomain
   * @return nextUpgradeDomain
   */
  @javax.annotation.Nullable
  public String getNextUpgradeDomain() {
    return nextUpgradeDomain;
  }

  public void setNextUpgradeDomain(String nextUpgradeDomain) {
    this.nextUpgradeDomain = nextUpgradeDomain;
  }


  public ClusterUpgradeProgress rollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public RollingUpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ClusterUpgradeProgress startTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
    return this;
  }

  /**
   * Get startTimestampUtc
   * @return startTimestampUtc
   */
  @javax.annotation.Nullable
  public String getStartTimestampUtc() {
    return startTimestampUtc;
  }

  public void setStartTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
  }


  public ClusterUpgradeProgress unhealthyEvaluations(List<UnhealthyEvaluation> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public ClusterUpgradeProgress addUnhealthyEvaluationsItem(UnhealthyEvaluation unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * Get unhealthyEvaluations
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<UnhealthyEvaluation> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<UnhealthyEvaluation> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }


  public ClusterUpgradeProgress upgradeDomainDurationInMilliseconds(String upgradeDomainDurationInMilliseconds) {
    this.upgradeDomainDurationInMilliseconds = upgradeDomainDurationInMilliseconds;
    return this;
  }

  /**
   * Get upgradeDomainDurationInMilliseconds
   * @return upgradeDomainDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainDurationInMilliseconds() {
    return upgradeDomainDurationInMilliseconds;
  }

  public void setUpgradeDomainDurationInMilliseconds(String upgradeDomainDurationInMilliseconds) {
    this.upgradeDomainDurationInMilliseconds = upgradeDomainDurationInMilliseconds;
  }


  public ClusterUpgradeProgress upgradeDomainProgressAtFailure(ClusterUpgradeProgressUpgradeDomainProgressAtFailure upgradeDomainProgressAtFailure) {
    this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
    return this;
  }

  /**
   * Get upgradeDomainProgressAtFailure
   * @return upgradeDomainProgressAtFailure
   */
  @javax.annotation.Nullable
  public ClusterUpgradeProgressUpgradeDomainProgressAtFailure getUpgradeDomainProgressAtFailure() {
    return upgradeDomainProgressAtFailure;
  }

  public void setUpgradeDomainProgressAtFailure(ClusterUpgradeProgressUpgradeDomainProgressAtFailure upgradeDomainProgressAtFailure) {
    this.upgradeDomainProgressAtFailure = upgradeDomainProgressAtFailure;
  }


  public ClusterUpgradeProgress upgradeDomains(List<String> upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
    return this;
  }

  public ClusterUpgradeProgress addUpgradeDomainsItem(String upgradeDomainsItem) {
    if (this.upgradeDomains == null) {
      this.upgradeDomains = new ArrayList<>();
    }
    this.upgradeDomains.add(upgradeDomainsItem);
    return this;
  }

  /**
   * Get upgradeDomains
   * @return upgradeDomains
   */
  @javax.annotation.Nullable
  public List<String> getUpgradeDomains() {
    return upgradeDomains;
  }

  public void setUpgradeDomains(List<String> upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
  }


  public ClusterUpgradeProgress upgradeDurationInMilliseconds(String upgradeDurationInMilliseconds) {
    this.upgradeDurationInMilliseconds = upgradeDurationInMilliseconds;
    return this;
  }

  /**
   * Get upgradeDurationInMilliseconds
   * @return upgradeDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDurationInMilliseconds() {
    return upgradeDurationInMilliseconds;
  }

  public void setUpgradeDurationInMilliseconds(String upgradeDurationInMilliseconds) {
    this.upgradeDurationInMilliseconds = upgradeDurationInMilliseconds;
  }


  public ClusterUpgradeProgress upgradeState(UpgradeState upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * Get upgradeState
   * @return upgradeState
   */
  @javax.annotation.Nullable
  public UpgradeState getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(UpgradeState upgradeState) {
    this.upgradeState = upgradeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeProgress clusterUpgradeProgress = (ClusterUpgradeProgress) o;
    return Objects.equals(this.codeVersion, clusterUpgradeProgress.codeVersion) &&
        Objects.equals(this.configVersion, clusterUpgradeProgress.configVersion) &&
        Objects.equals(this.currentUpgradeDomainProgress, clusterUpgradeProgress.currentUpgradeDomainProgress) &&
        Objects.equals(this.failureReason, clusterUpgradeProgress.failureReason) &&
        Objects.equals(this.failureTimestampUtc, clusterUpgradeProgress.failureTimestampUtc) &&
        Objects.equals(this.nextUpgradeDomain, clusterUpgradeProgress.nextUpgradeDomain) &&
        Objects.equals(this.rollingUpgradeMode, clusterUpgradeProgress.rollingUpgradeMode) &&
        Objects.equals(this.startTimestampUtc, clusterUpgradeProgress.startTimestampUtc) &&
        Objects.equals(this.unhealthyEvaluations, clusterUpgradeProgress.unhealthyEvaluations) &&
        Objects.equals(this.upgradeDomainDurationInMilliseconds, clusterUpgradeProgress.upgradeDomainDurationInMilliseconds) &&
        Objects.equals(this.upgradeDomainProgressAtFailure, clusterUpgradeProgress.upgradeDomainProgressAtFailure) &&
        Objects.equals(this.upgradeDomains, clusterUpgradeProgress.upgradeDomains) &&
        Objects.equals(this.upgradeDurationInMilliseconds, clusterUpgradeProgress.upgradeDurationInMilliseconds) &&
        Objects.equals(this.upgradeState, clusterUpgradeProgress.upgradeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeVersion, configVersion, currentUpgradeDomainProgress, failureReason, failureTimestampUtc, nextUpgradeDomain, rollingUpgradeMode, startTimestampUtc, unhealthyEvaluations, upgradeDomainDurationInMilliseconds, upgradeDomainProgressAtFailure, upgradeDomains, upgradeDurationInMilliseconds, upgradeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeProgress {\n");
    sb.append("    codeVersion: ").append(toIndentedString(codeVersion)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    currentUpgradeDomainProgress: ").append(toIndentedString(currentUpgradeDomainProgress)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    failureTimestampUtc: ").append(toIndentedString(failureTimestampUtc)).append("\n");
    sb.append("    nextUpgradeDomain: ").append(toIndentedString(nextUpgradeDomain)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    startTimestampUtc: ").append(toIndentedString(startTimestampUtc)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("    upgradeDomainDurationInMilliseconds: ").append(toIndentedString(upgradeDomainDurationInMilliseconds)).append("\n");
    sb.append("    upgradeDomainProgressAtFailure: ").append(toIndentedString(upgradeDomainProgressAtFailure)).append("\n");
    sb.append("    upgradeDomains: ").append(toIndentedString(upgradeDomains)).append("\n");
    sb.append("    upgradeDurationInMilliseconds: ").append(toIndentedString(upgradeDurationInMilliseconds)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeVersion");
    openapiFields.add("ConfigVersion");
    openapiFields.add("CurrentUpgradeDomainProgress");
    openapiFields.add("FailureReason");
    openapiFields.add("FailureTimestampUtc");
    openapiFields.add("NextUpgradeDomain");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("StartTimestampUtc");
    openapiFields.add("UnhealthyEvaluations");
    openapiFields.add("UpgradeDomainDurationInMilliseconds");
    openapiFields.add("UpgradeDomainProgressAtFailure");
    openapiFields.add("UpgradeDomains");
    openapiFields.add("UpgradeDurationInMilliseconds");
    openapiFields.add("UpgradeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeProgress is not found in the empty JSON string", ClusterUpgradeProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CodeVersion") != null && !jsonObj.get("CodeVersion").isJsonNull()) && !jsonObj.get("CodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CodeVersion").toString()));
      }
      if ((jsonObj.get("ConfigVersion") != null && !jsonObj.get("ConfigVersion").isJsonNull()) && !jsonObj.get("ConfigVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigVersion").toString()));
      }
      // validate the optional field `CurrentUpgradeDomainProgress`
      if (jsonObj.get("CurrentUpgradeDomainProgress") != null && !jsonObj.get("CurrentUpgradeDomainProgress").isJsonNull()) {
        ApplicationUpgradeCurrentUpgradeDomainProgress.validateJsonElement(jsonObj.get("CurrentUpgradeDomainProgress"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        FailureReason.validateJsonElement(jsonObj.get("FailureReason"));
      }
      if ((jsonObj.get("FailureTimestampUtc") != null && !jsonObj.get("FailureTimestampUtc").isJsonNull()) && !jsonObj.get("FailureTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureTimestampUtc").toString()));
      }
      if ((jsonObj.get("NextUpgradeDomain") != null && !jsonObj.get("NextUpgradeDomain").isJsonNull()) && !jsonObj.get("NextUpgradeDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextUpgradeDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextUpgradeDomain").toString()));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        RollingUpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if ((jsonObj.get("StartTimestampUtc") != null && !jsonObj.get("StartTimestampUtc").isJsonNull()) && !jsonObj.get("StartTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTimestampUtc").toString()));
      }
      if (jsonObj.get("UnhealthyEvaluations") != null && !jsonObj.get("UnhealthyEvaluations").isJsonNull()) {
        JsonArray jsonArrayunhealthyEvaluations = jsonObj.getAsJsonArray("UnhealthyEvaluations");
        if (jsonArrayunhealthyEvaluations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UnhealthyEvaluations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UnhealthyEvaluations` to be an array in the JSON string but got `%s`", jsonObj.get("UnhealthyEvaluations").toString()));
          }

          // validate the optional field `UnhealthyEvaluations` (array)
          for (int i = 0; i < jsonArrayunhealthyEvaluations.size(); i++) {
            UnhealthyEvaluation.validateJsonElement(jsonArrayunhealthyEvaluations.get(i));
          };
        }
      }
      if ((jsonObj.get("UpgradeDomainDurationInMilliseconds") != null && !jsonObj.get("UpgradeDomainDurationInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDomainDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomainDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomainDurationInMilliseconds").toString()));
      }
      // validate the optional field `UpgradeDomainProgressAtFailure`
      if (jsonObj.get("UpgradeDomainProgressAtFailure") != null && !jsonObj.get("UpgradeDomainProgressAtFailure").isJsonNull()) {
        ClusterUpgradeProgressUpgradeDomainProgressAtFailure.validateJsonElement(jsonObj.get("UpgradeDomainProgressAtFailure"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("UpgradeDomains") != null && !jsonObj.get("UpgradeDomains").isJsonNull() && !jsonObj.get("UpgradeDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomains` to be an array in the JSON string but got `%s`", jsonObj.get("UpgradeDomains").toString()));
      }
      if ((jsonObj.get("UpgradeDurationInMilliseconds") != null && !jsonObj.get("UpgradeDurationInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDurationInMilliseconds").toString()));
      }
      // validate the optional field `UpgradeState`
      if (jsonObj.get("UpgradeState") != null && !jsonObj.get("UpgradeState").isJsonNull()) {
        UpgradeState.validateJsonElement(jsonObj.get("UpgradeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeProgress>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeProgress
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeProgress
   */
  public static ClusterUpgradeProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeProgress.class);
  }

  /**
   * Convert an instance of ClusterUpgradeProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

