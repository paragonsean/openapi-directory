/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ReplicaRole;
import org.openapitools.client.model.ReplicaStatus;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The replica
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Replica {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_LAST_IN_BUILD_DURATION_IN_SECONDS = "LastInBuildDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_LAST_IN_BUILD_DURATION_IN_SECONDS)
  private String lastInBuildDurationInSeconds;

  public static final String SERIALIZED_NAME_NODE_NAME = "NodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_REPLICA_ID = "ReplicaId";
  @SerializedName(SERIALIZED_NAME_REPLICA_ID)
  private String replicaId;

  public static final String SERIALIZED_NAME_REPLICA_ROLE = "ReplicaRole";
  @SerializedName(SERIALIZED_NAME_REPLICA_ROLE)
  private ReplicaRole replicaRole;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  private ReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public Replica() {
  }

  public Replica address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Replica healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public Replica instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Replica lastInBuildDurationInSeconds(String lastInBuildDurationInSeconds) {
    this.lastInBuildDurationInSeconds = lastInBuildDurationInSeconds;
    return this;
  }

  /**
   * Get lastInBuildDurationInSeconds
   * @return lastInBuildDurationInSeconds
   */
  @javax.annotation.Nullable
  public String getLastInBuildDurationInSeconds() {
    return lastInBuildDurationInSeconds;
  }

  public void setLastInBuildDurationInSeconds(String lastInBuildDurationInSeconds) {
    this.lastInBuildDurationInSeconds = lastInBuildDurationInSeconds;
  }


  public Replica nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * Get nodeName
   * @return nodeName
   */
  @javax.annotation.Nullable
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public Replica replicaId(String replicaId) {
    this.replicaId = replicaId;
    return this;
  }

  /**
   * Get replicaId
   * @return replicaId
   */
  @javax.annotation.Nullable
  public String getReplicaId() {
    return replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }


  public Replica replicaRole(ReplicaRole replicaRole) {
    this.replicaRole = replicaRole;
    return this;
  }

  /**
   * Get replicaRole
   * @return replicaRole
   */
  @javax.annotation.Nullable
  public ReplicaRole getReplicaRole() {
    return replicaRole;
  }

  public void setReplicaRole(ReplicaRole replicaRole) {
    this.replicaRole = replicaRole;
  }


  public Replica replicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * Get replicaStatus
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public ReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(ReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public Replica serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Replica replica = (Replica) o;
    return Objects.equals(this.address, replica.address) &&
        Objects.equals(this.healthState, replica.healthState) &&
        Objects.equals(this.instanceId, replica.instanceId) &&
        Objects.equals(this.lastInBuildDurationInSeconds, replica.lastInBuildDurationInSeconds) &&
        Objects.equals(this.nodeName, replica.nodeName) &&
        Objects.equals(this.replicaId, replica.replicaId) &&
        Objects.equals(this.replicaRole, replica.replicaRole) &&
        Objects.equals(this.replicaStatus, replica.replicaStatus) &&
        Objects.equals(this.serviceKind, replica.serviceKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, healthState, instanceId, lastInBuildDurationInSeconds, nodeName, replicaId, replicaRole, replicaStatus, serviceKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Replica {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    lastInBuildDurationInSeconds: ").append(toIndentedString(lastInBuildDurationInSeconds)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    replicaId: ").append(toIndentedString(replicaId)).append("\n");
    sb.append("    replicaRole: ").append(toIndentedString(replicaRole)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("HealthState");
    openapiFields.add("InstanceId");
    openapiFields.add("LastInBuildDurationInSeconds");
    openapiFields.add("NodeName");
    openapiFields.add("ReplicaId");
    openapiFields.add("ReplicaRole");
    openapiFields.add("ReplicaStatus");
    openapiFields.add("ServiceKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Replica
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Replica.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Replica is not found in the empty JSON string", Replica.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Replica.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Replica` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) && !jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("LastInBuildDurationInSeconds") != null && !jsonObj.get("LastInBuildDurationInSeconds").isJsonNull()) && !jsonObj.get("LastInBuildDurationInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastInBuildDurationInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastInBuildDurationInSeconds").toString()));
      }
      if ((jsonObj.get("NodeName") != null && !jsonObj.get("NodeName").isJsonNull()) && !jsonObj.get("NodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeName").toString()));
      }
      if ((jsonObj.get("ReplicaId") != null && !jsonObj.get("ReplicaId").isJsonNull()) && !jsonObj.get("ReplicaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaId").toString()));
      }
      // validate the optional field `ReplicaRole`
      if (jsonObj.get("ReplicaRole") != null && !jsonObj.get("ReplicaRole").isJsonNull()) {
        ReplicaRole.validateJsonElement(jsonObj.get("ReplicaRole"));
      }
      // validate the optional field `ReplicaStatus`
      if (jsonObj.get("ReplicaStatus") != null && !jsonObj.get("ReplicaStatus").isJsonNull()) {
        ReplicaStatus.validateJsonElement(jsonObj.get("ReplicaStatus"));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Replica.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Replica' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Replica> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Replica.class));

       return (TypeAdapter<T>) new TypeAdapter<Replica>() {
           @Override
           public void write(JsonWriter out, Replica value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Replica read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Replica given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Replica
   * @throws IOException if the JSON string is invalid with respect to Replica
   */
  public static Replica fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Replica.class);
  }

  /**
   * Convert an instance of Replica to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

