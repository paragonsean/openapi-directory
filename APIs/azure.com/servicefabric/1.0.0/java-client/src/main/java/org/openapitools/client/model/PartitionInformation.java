/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information of the partition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionInformation {
  public static final String SERIALIZED_NAME_HIGH_KEY = "HighKey";
  @SerializedName(SERIALIZED_NAME_HIGH_KEY)
  private String highKey;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOW_KEY = "LowKey";
  @SerializedName(SERIALIZED_NAME_LOW_KEY)
  private String lowKey;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<String> name = new ArrayList<>();

  /**
   * Gets or Sets servicePartitionKind
   */
  @JsonAdapter(ServicePartitionKindEnum.Adapter.class)
  public enum ServicePartitionKindEnum {
    INVALID("Invalid"),
    
    SINGLETON("Singleton"),
    
    INT64_RANGE("Int64Range"),
    
    NAMED("Named");

    private String value;

    ServicePartitionKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServicePartitionKindEnum fromValue(String value) {
      for (ServicePartitionKindEnum b : ServicePartitionKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServicePartitionKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServicePartitionKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServicePartitionKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServicePartitionKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServicePartitionKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_PARTITION_KIND = "ServicePartitionKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_PARTITION_KIND)
  private ServicePartitionKindEnum servicePartitionKind;

  public PartitionInformation() {
  }

  public PartitionInformation highKey(String highKey) {
    this.highKey = highKey;
    return this;
  }

  /**
   * Get highKey
   * @return highKey
   */
  @javax.annotation.Nullable
  public String getHighKey() {
    return highKey;
  }

  public void setHighKey(String highKey) {
    this.highKey = highKey;
  }


  public PartitionInformation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PartitionInformation lowKey(String lowKey) {
    this.lowKey = lowKey;
    return this;
  }

  /**
   * Get lowKey
   * @return lowKey
   */
  @javax.annotation.Nullable
  public String getLowKey() {
    return lowKey;
  }

  public void setLowKey(String lowKey) {
    this.lowKey = lowKey;
  }


  public PartitionInformation name(List<String> name) {
    this.name = name;
    return this;
  }

  public PartitionInformation addNameItem(String nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public List<String> getName() {
    return name;
  }

  public void setName(List<String> name) {
    this.name = name;
  }


  public PartitionInformation servicePartitionKind(ServicePartitionKindEnum servicePartitionKind) {
    this.servicePartitionKind = servicePartitionKind;
    return this;
  }

  /**
   * Get servicePartitionKind
   * @return servicePartitionKind
   */
  @javax.annotation.Nullable
  public ServicePartitionKindEnum getServicePartitionKind() {
    return servicePartitionKind;
  }

  public void setServicePartitionKind(ServicePartitionKindEnum servicePartitionKind) {
    this.servicePartitionKind = servicePartitionKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionInformation partitionInformation = (PartitionInformation) o;
    return Objects.equals(this.highKey, partitionInformation.highKey) &&
        Objects.equals(this.id, partitionInformation.id) &&
        Objects.equals(this.lowKey, partitionInformation.lowKey) &&
        Objects.equals(this.name, partitionInformation.name) &&
        Objects.equals(this.servicePartitionKind, partitionInformation.servicePartitionKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(highKey, id, lowKey, name, servicePartitionKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionInformation {\n");
    sb.append("    highKey: ").append(toIndentedString(highKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lowKey: ").append(toIndentedString(lowKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    servicePartitionKind: ").append(toIndentedString(servicePartitionKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HighKey");
    openapiFields.add("Id");
    openapiFields.add("LowKey");
    openapiFields.add("Name");
    openapiFields.add("ServicePartitionKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionInformation is not found in the empty JSON string", PartitionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("HighKey") != null && !jsonObj.get("HighKey").isJsonNull()) && !jsonObj.get("HighKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HighKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HighKey").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("LowKey") != null && !jsonObj.get("LowKey").isJsonNull()) && !jsonObj.get("LowKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LowKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LowKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull() && !jsonObj.get("Name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be an array in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ServicePartitionKind") != null && !jsonObj.get("ServicePartitionKind").isJsonNull()) && !jsonObj.get("ServicePartitionKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServicePartitionKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServicePartitionKind").toString()));
      }
      // validate the optional field `ServicePartitionKind`
      if (jsonObj.get("ServicePartitionKind") != null && !jsonObj.get("ServicePartitionKind").isJsonNull()) {
        ServicePartitionKindEnum.validateJsonElement(jsonObj.get("ServicePartitionKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionInformation>() {
           @Override
           public void write(JsonWriter out, PartitionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionInformation
   * @throws IOException if the JSON string is invalid with respect to PartitionInformation
   */
  public static PartitionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionInformation.class);
  }

  /**
   * Convert an instance of PartitionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

