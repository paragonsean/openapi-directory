/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationUpgradeCurrentUpgradeDomainProgress;
import org.openapitools.client.model.ApplicationUpgradeDeployedApplicationHealthStates;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.RollingUpgradeMode;
import org.openapitools.client.model.UpgradeState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The upgrade of the application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationUpgrade {
  public static final String SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS = "CurrentUpgradeDomainProgress";
  @SerializedName(SERIALIZED_NAME_CURRENT_UPGRADE_DOMAIN_PROGRESS)
  private ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress;

  public static final String SERIALIZED_NAME_DEPLOYED_APPLICATION_HEALTH_STATES = "DeployedApplicationHealthStates";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_APPLICATION_HEALTH_STATES)
  private ApplicationUpgradeDeployedApplicationHealthStates deployedApplicationHealthStates;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  public static final String SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC = "FailureTimestampUtc";
  @SerializedName(SERIALIZED_NAME_FAILURE_TIMESTAMP_UTC)
  private String failureTimestampUtc;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_UPGRADE_DOMAIN = "NextUpgradeDomain";
  @SerializedName(SERIALIZED_NAME_NEXT_UPGRADE_DOMAIN)
  private String nextUpgradeDomain;

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private RollingUpgradeMode rollingUpgradeMode;

  public static final String SERIALIZED_NAME_START_TIMESTAMP_UTC = "StartTimestampUtc";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP_UTC)
  private String startTimestampUtc;

  public static final String SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION = "TargetApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION)
  private String targetApplicationTypeVersion;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private String unhealthyEvaluations;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_DURATION_IN_MILLISECONDS = "UpgradeDomainDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_DURATION_IN_MILLISECONDS)
  private String upgradeDomainDurationInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAINS = "UpgradeDomains";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAINS)
  private String upgradeDomains;

  public static final String SERIALIZED_NAME_UPGRADE_DURATION_IN_MILLISECONDS = "UpgradeDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DURATION_IN_MILLISECONDS)
  private String upgradeDurationInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_STATE = "UpgradeState";
  @SerializedName(SERIALIZED_NAME_UPGRADE_STATE)
  private UpgradeState upgradeState;

  public ApplicationUpgrade() {
  }

  public ApplicationUpgrade currentUpgradeDomainProgress(ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
    return this;
  }

  /**
   * Get currentUpgradeDomainProgress
   * @return currentUpgradeDomainProgress
   */
  @javax.annotation.Nullable
  public ApplicationUpgradeCurrentUpgradeDomainProgress getCurrentUpgradeDomainProgress() {
    return currentUpgradeDomainProgress;
  }

  public void setCurrentUpgradeDomainProgress(ApplicationUpgradeCurrentUpgradeDomainProgress currentUpgradeDomainProgress) {
    this.currentUpgradeDomainProgress = currentUpgradeDomainProgress;
  }


  public ApplicationUpgrade deployedApplicationHealthStates(ApplicationUpgradeDeployedApplicationHealthStates deployedApplicationHealthStates) {
    this.deployedApplicationHealthStates = deployedApplicationHealthStates;
    return this;
  }

  /**
   * Get deployedApplicationHealthStates
   * @return deployedApplicationHealthStates
   */
  @javax.annotation.Nullable
  public ApplicationUpgradeDeployedApplicationHealthStates getDeployedApplicationHealthStates() {
    return deployedApplicationHealthStates;
  }

  public void setDeployedApplicationHealthStates(ApplicationUpgradeDeployedApplicationHealthStates deployedApplicationHealthStates) {
    this.deployedApplicationHealthStates = deployedApplicationHealthStates;
  }


  public ApplicationUpgrade failureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
  }


  public ApplicationUpgrade failureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
    return this;
  }

  /**
   * Get failureTimestampUtc
   * @return failureTimestampUtc
   */
  @javax.annotation.Nullable
  public String getFailureTimestampUtc() {
    return failureTimestampUtc;
  }

  public void setFailureTimestampUtc(String failureTimestampUtc) {
    this.failureTimestampUtc = failureTimestampUtc;
  }


  public ApplicationUpgrade name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationUpgrade nextUpgradeDomain(String nextUpgradeDomain) {
    this.nextUpgradeDomain = nextUpgradeDomain;
    return this;
  }

  /**
   * Get nextUpgradeDomain
   * @return nextUpgradeDomain
   */
  @javax.annotation.Nullable
  public String getNextUpgradeDomain() {
    return nextUpgradeDomain;
  }

  public void setNextUpgradeDomain(String nextUpgradeDomain) {
    this.nextUpgradeDomain = nextUpgradeDomain;
  }


  public ApplicationUpgrade rollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public RollingUpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public ApplicationUpgrade startTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
    return this;
  }

  /**
   * Get startTimestampUtc
   * @return startTimestampUtc
   */
  @javax.annotation.Nullable
  public String getStartTimestampUtc() {
    return startTimestampUtc;
  }

  public void setStartTimestampUtc(String startTimestampUtc) {
    this.startTimestampUtc = startTimestampUtc;
  }


  public ApplicationUpgrade targetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
    return this;
  }

  /**
   * Get targetApplicationTypeVersion
   * @return targetApplicationTypeVersion
   */
  @javax.annotation.Nullable
  public String getTargetApplicationTypeVersion() {
    return targetApplicationTypeVersion;
  }

  public void setTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
  }


  public ApplicationUpgrade typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ApplicationUpgrade unhealthyEvaluations(String unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  /**
   * Get unhealthyEvaluations
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public String getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(String unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }


  public ApplicationUpgrade upgradeDomainDurationInMilliseconds(String upgradeDomainDurationInMilliseconds) {
    this.upgradeDomainDurationInMilliseconds = upgradeDomainDurationInMilliseconds;
    return this;
  }

  /**
   * Get upgradeDomainDurationInMilliseconds
   * @return upgradeDomainDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainDurationInMilliseconds() {
    return upgradeDomainDurationInMilliseconds;
  }

  public void setUpgradeDomainDurationInMilliseconds(String upgradeDomainDurationInMilliseconds) {
    this.upgradeDomainDurationInMilliseconds = upgradeDomainDurationInMilliseconds;
  }


  public ApplicationUpgrade upgradeDomains(String upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
    return this;
  }

  /**
   * Get upgradeDomains
   * @return upgradeDomains
   */
  @javax.annotation.Nullable
  public String getUpgradeDomains() {
    return upgradeDomains;
  }

  public void setUpgradeDomains(String upgradeDomains) {
    this.upgradeDomains = upgradeDomains;
  }


  public ApplicationUpgrade upgradeDurationInMilliseconds(String upgradeDurationInMilliseconds) {
    this.upgradeDurationInMilliseconds = upgradeDurationInMilliseconds;
    return this;
  }

  /**
   * Get upgradeDurationInMilliseconds
   * @return upgradeDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDurationInMilliseconds() {
    return upgradeDurationInMilliseconds;
  }

  public void setUpgradeDurationInMilliseconds(String upgradeDurationInMilliseconds) {
    this.upgradeDurationInMilliseconds = upgradeDurationInMilliseconds;
  }


  public ApplicationUpgrade upgradeState(UpgradeState upgradeState) {
    this.upgradeState = upgradeState;
    return this;
  }

  /**
   * Get upgradeState
   * @return upgradeState
   */
  @javax.annotation.Nullable
  public UpgradeState getUpgradeState() {
    return upgradeState;
  }

  public void setUpgradeState(UpgradeState upgradeState) {
    this.upgradeState = upgradeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationUpgrade applicationUpgrade = (ApplicationUpgrade) o;
    return Objects.equals(this.currentUpgradeDomainProgress, applicationUpgrade.currentUpgradeDomainProgress) &&
        Objects.equals(this.deployedApplicationHealthStates, applicationUpgrade.deployedApplicationHealthStates) &&
        Objects.equals(this.failureReason, applicationUpgrade.failureReason) &&
        Objects.equals(this.failureTimestampUtc, applicationUpgrade.failureTimestampUtc) &&
        Objects.equals(this.name, applicationUpgrade.name) &&
        Objects.equals(this.nextUpgradeDomain, applicationUpgrade.nextUpgradeDomain) &&
        Objects.equals(this.rollingUpgradeMode, applicationUpgrade.rollingUpgradeMode) &&
        Objects.equals(this.startTimestampUtc, applicationUpgrade.startTimestampUtc) &&
        Objects.equals(this.targetApplicationTypeVersion, applicationUpgrade.targetApplicationTypeVersion) &&
        Objects.equals(this.typeName, applicationUpgrade.typeName) &&
        Objects.equals(this.unhealthyEvaluations, applicationUpgrade.unhealthyEvaluations) &&
        Objects.equals(this.upgradeDomainDurationInMilliseconds, applicationUpgrade.upgradeDomainDurationInMilliseconds) &&
        Objects.equals(this.upgradeDomains, applicationUpgrade.upgradeDomains) &&
        Objects.equals(this.upgradeDurationInMilliseconds, applicationUpgrade.upgradeDurationInMilliseconds) &&
        Objects.equals(this.upgradeState, applicationUpgrade.upgradeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentUpgradeDomainProgress, deployedApplicationHealthStates, failureReason, failureTimestampUtc, name, nextUpgradeDomain, rollingUpgradeMode, startTimestampUtc, targetApplicationTypeVersion, typeName, unhealthyEvaluations, upgradeDomainDurationInMilliseconds, upgradeDomains, upgradeDurationInMilliseconds, upgradeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationUpgrade {\n");
    sb.append("    currentUpgradeDomainProgress: ").append(toIndentedString(currentUpgradeDomainProgress)).append("\n");
    sb.append("    deployedApplicationHealthStates: ").append(toIndentedString(deployedApplicationHealthStates)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    failureTimestampUtc: ").append(toIndentedString(failureTimestampUtc)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextUpgradeDomain: ").append(toIndentedString(nextUpgradeDomain)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    startTimestampUtc: ").append(toIndentedString(startTimestampUtc)).append("\n");
    sb.append("    targetApplicationTypeVersion: ").append(toIndentedString(targetApplicationTypeVersion)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("    upgradeDomainDurationInMilliseconds: ").append(toIndentedString(upgradeDomainDurationInMilliseconds)).append("\n");
    sb.append("    upgradeDomains: ").append(toIndentedString(upgradeDomains)).append("\n");
    sb.append("    upgradeDurationInMilliseconds: ").append(toIndentedString(upgradeDurationInMilliseconds)).append("\n");
    sb.append("    upgradeState: ").append(toIndentedString(upgradeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentUpgradeDomainProgress");
    openapiFields.add("DeployedApplicationHealthStates");
    openapiFields.add("FailureReason");
    openapiFields.add("FailureTimestampUtc");
    openapiFields.add("Name");
    openapiFields.add("NextUpgradeDomain");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("StartTimestampUtc");
    openapiFields.add("TargetApplicationTypeVersion");
    openapiFields.add("TypeName");
    openapiFields.add("UnhealthyEvaluations");
    openapiFields.add("UpgradeDomainDurationInMilliseconds");
    openapiFields.add("UpgradeDomains");
    openapiFields.add("UpgradeDurationInMilliseconds");
    openapiFields.add("UpgradeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationUpgrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationUpgrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationUpgrade is not found in the empty JSON string", ApplicationUpgrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationUpgrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationUpgrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CurrentUpgradeDomainProgress`
      if (jsonObj.get("CurrentUpgradeDomainProgress") != null && !jsonObj.get("CurrentUpgradeDomainProgress").isJsonNull()) {
        ApplicationUpgradeCurrentUpgradeDomainProgress.validateJsonElement(jsonObj.get("CurrentUpgradeDomainProgress"));
      }
      // validate the optional field `DeployedApplicationHealthStates`
      if (jsonObj.get("DeployedApplicationHealthStates") != null && !jsonObj.get("DeployedApplicationHealthStates").isJsonNull()) {
        ApplicationUpgradeDeployedApplicationHealthStates.validateJsonElement(jsonObj.get("DeployedApplicationHealthStates"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        FailureReason.validateJsonElement(jsonObj.get("FailureReason"));
      }
      if ((jsonObj.get("FailureTimestampUtc") != null && !jsonObj.get("FailureTimestampUtc").isJsonNull()) && !jsonObj.get("FailureTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureTimestampUtc").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NextUpgradeDomain") != null && !jsonObj.get("NextUpgradeDomain").isJsonNull()) && !jsonObj.get("NextUpgradeDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextUpgradeDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextUpgradeDomain").toString()));
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        RollingUpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if ((jsonObj.get("StartTimestampUtc") != null && !jsonObj.get("StartTimestampUtc").isJsonNull()) && !jsonObj.get("StartTimestampUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTimestampUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTimestampUtc").toString()));
      }
      if ((jsonObj.get("TargetApplicationTypeVersion") != null && !jsonObj.get("TargetApplicationTypeVersion").isJsonNull()) && !jsonObj.get("TargetApplicationTypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetApplicationTypeVersion").toString()));
      }
      if ((jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) && !jsonObj.get("TypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeName").toString()));
      }
      if ((jsonObj.get("UnhealthyEvaluations") != null && !jsonObj.get("UnhealthyEvaluations").isJsonNull()) && !jsonObj.get("UnhealthyEvaluations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnhealthyEvaluations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnhealthyEvaluations").toString()));
      }
      if ((jsonObj.get("UpgradeDomainDurationInMilliseconds") != null && !jsonObj.get("UpgradeDomainDurationInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDomainDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomainDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomainDurationInMilliseconds").toString()));
      }
      if ((jsonObj.get("UpgradeDomains") != null && !jsonObj.get("UpgradeDomains").isJsonNull()) && !jsonObj.get("UpgradeDomains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomains").toString()));
      }
      if ((jsonObj.get("UpgradeDurationInMilliseconds") != null && !jsonObj.get("UpgradeDurationInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDurationInMilliseconds").toString()));
      }
      // validate the optional field `UpgradeState`
      if (jsonObj.get("UpgradeState") != null && !jsonObj.get("UpgradeState").isJsonNull()) {
        UpgradeState.validateJsonElement(jsonObj.get("UpgradeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationUpgrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationUpgrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationUpgrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationUpgrade.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationUpgrade>() {
           @Override
           public void write(JsonWriter out, ApplicationUpgrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationUpgrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationUpgrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationUpgrade
   * @throws IOException if the JSON string is invalid with respect to ApplicationUpgrade
   */
  public static ApplicationUpgrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationUpgrade.class);
  }

  /**
   * Convert an instance of ApplicationUpgrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

