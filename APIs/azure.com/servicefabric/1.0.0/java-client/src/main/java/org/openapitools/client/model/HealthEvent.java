/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The event of the health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthEvent {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_IS_EXPIRED = "IsExpired";
  @SerializedName(SERIALIZED_NAME_IS_EXPIRED)
  private Boolean isExpired;

  public static final String SERIALIZED_NAME_LAST_ERROR_TRANSITION_AT = "LastErrorTransitionAt";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_TRANSITION_AT)
  private String lastErrorTransitionAt;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_UTC_TIMESTAMP = "LastModifiedUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_UTC_TIMESTAMP)
  private String lastModifiedUtcTimestamp;

  public static final String SERIALIZED_NAME_LAST_OK_TRANSITION_AT = "LastOkTransitionAt";
  @SerializedName(SERIALIZED_NAME_LAST_OK_TRANSITION_AT)
  private String lastOkTransitionAt;

  public static final String SERIALIZED_NAME_LAST_WARNING_TRANSITION_AT = "LastWarningTransitionAt";
  @SerializedName(SERIALIZED_NAME_LAST_WARNING_TRANSITION_AT)
  private String lastWarningTransitionAt;

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_REMOVE_WHEN_EXPIRED = "RemoveWhenExpired";
  @SerializedName(SERIALIZED_NAME_REMOVE_WHEN_EXPIRED)
  private Boolean removeWhenExpired;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_SOURCE_ID = "SourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP = "SourceUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP)
  private String sourceUtcTimestamp;

  public static final String SERIALIZED_NAME_TIME_TO_LIVE_IN_MILLI_SECONDS = "TimeToLiveInMilliSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE_IN_MILLI_SECONDS)
  private String timeToLiveInMilliSeconds;

  public HealthEvent() {
  }

  public HealthEvent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public HealthEvent healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public HealthEvent isExpired(Boolean isExpired) {
    this.isExpired = isExpired;
    return this;
  }

  /**
   * Get isExpired
   * @return isExpired
   */
  @javax.annotation.Nullable
  public Boolean getIsExpired() {
    return isExpired;
  }

  public void setIsExpired(Boolean isExpired) {
    this.isExpired = isExpired;
  }


  public HealthEvent lastErrorTransitionAt(String lastErrorTransitionAt) {
    this.lastErrorTransitionAt = lastErrorTransitionAt;
    return this;
  }

  /**
   * Get lastErrorTransitionAt
   * @return lastErrorTransitionAt
   */
  @javax.annotation.Nullable
  public String getLastErrorTransitionAt() {
    return lastErrorTransitionAt;
  }

  public void setLastErrorTransitionAt(String lastErrorTransitionAt) {
    this.lastErrorTransitionAt = lastErrorTransitionAt;
  }


  public HealthEvent lastModifiedUtcTimestamp(String lastModifiedUtcTimestamp) {
    this.lastModifiedUtcTimestamp = lastModifiedUtcTimestamp;
    return this;
  }

  /**
   * Get lastModifiedUtcTimestamp
   * @return lastModifiedUtcTimestamp
   */
  @javax.annotation.Nullable
  public String getLastModifiedUtcTimestamp() {
    return lastModifiedUtcTimestamp;
  }

  public void setLastModifiedUtcTimestamp(String lastModifiedUtcTimestamp) {
    this.lastModifiedUtcTimestamp = lastModifiedUtcTimestamp;
  }


  public HealthEvent lastOkTransitionAt(String lastOkTransitionAt) {
    this.lastOkTransitionAt = lastOkTransitionAt;
    return this;
  }

  /**
   * Get lastOkTransitionAt
   * @return lastOkTransitionAt
   */
  @javax.annotation.Nullable
  public String getLastOkTransitionAt() {
    return lastOkTransitionAt;
  }

  public void setLastOkTransitionAt(String lastOkTransitionAt) {
    this.lastOkTransitionAt = lastOkTransitionAt;
  }


  public HealthEvent lastWarningTransitionAt(String lastWarningTransitionAt) {
    this.lastWarningTransitionAt = lastWarningTransitionAt;
    return this;
  }

  /**
   * Get lastWarningTransitionAt
   * @return lastWarningTransitionAt
   */
  @javax.annotation.Nullable
  public String getLastWarningTransitionAt() {
    return lastWarningTransitionAt;
  }

  public void setLastWarningTransitionAt(String lastWarningTransitionAt) {
    this.lastWarningTransitionAt = lastWarningTransitionAt;
  }


  public HealthEvent property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public HealthEvent removeWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
    return this;
  }

  /**
   * Get removeWhenExpired
   * @return removeWhenExpired
   */
  @javax.annotation.Nullable
  public Boolean getRemoveWhenExpired() {
    return removeWhenExpired;
  }

  public void setRemoveWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
  }


  public HealthEvent sequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Get sequenceNumber
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public String getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public HealthEvent sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Get sourceId
   * @return sourceId
   */
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public HealthEvent sourceUtcTimestamp(String sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
    return this;
  }

  /**
   * Get sourceUtcTimestamp
   * @return sourceUtcTimestamp
   */
  @javax.annotation.Nullable
  public String getSourceUtcTimestamp() {
    return sourceUtcTimestamp;
  }

  public void setSourceUtcTimestamp(String sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
  }


  public HealthEvent timeToLiveInMilliSeconds(String timeToLiveInMilliSeconds) {
    this.timeToLiveInMilliSeconds = timeToLiveInMilliSeconds;
    return this;
  }

  /**
   * Get timeToLiveInMilliSeconds
   * @return timeToLiveInMilliSeconds
   */
  @javax.annotation.Nullable
  public String getTimeToLiveInMilliSeconds() {
    return timeToLiveInMilliSeconds;
  }

  public void setTimeToLiveInMilliSeconds(String timeToLiveInMilliSeconds) {
    this.timeToLiveInMilliSeconds = timeToLiveInMilliSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthEvent healthEvent = (HealthEvent) o;
    return Objects.equals(this.description, healthEvent.description) &&
        Objects.equals(this.healthState, healthEvent.healthState) &&
        Objects.equals(this.isExpired, healthEvent.isExpired) &&
        Objects.equals(this.lastErrorTransitionAt, healthEvent.lastErrorTransitionAt) &&
        Objects.equals(this.lastModifiedUtcTimestamp, healthEvent.lastModifiedUtcTimestamp) &&
        Objects.equals(this.lastOkTransitionAt, healthEvent.lastOkTransitionAt) &&
        Objects.equals(this.lastWarningTransitionAt, healthEvent.lastWarningTransitionAt) &&
        Objects.equals(this.property, healthEvent.property) &&
        Objects.equals(this.removeWhenExpired, healthEvent.removeWhenExpired) &&
        Objects.equals(this.sequenceNumber, healthEvent.sequenceNumber) &&
        Objects.equals(this.sourceId, healthEvent.sourceId) &&
        Objects.equals(this.sourceUtcTimestamp, healthEvent.sourceUtcTimestamp) &&
        Objects.equals(this.timeToLiveInMilliSeconds, healthEvent.timeToLiveInMilliSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, healthState, isExpired, lastErrorTransitionAt, lastModifiedUtcTimestamp, lastOkTransitionAt, lastWarningTransitionAt, property, removeWhenExpired, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveInMilliSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthEvent {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    isExpired: ").append(toIndentedString(isExpired)).append("\n");
    sb.append("    lastErrorTransitionAt: ").append(toIndentedString(lastErrorTransitionAt)).append("\n");
    sb.append("    lastModifiedUtcTimestamp: ").append(toIndentedString(lastModifiedUtcTimestamp)).append("\n");
    sb.append("    lastOkTransitionAt: ").append(toIndentedString(lastOkTransitionAt)).append("\n");
    sb.append("    lastWarningTransitionAt: ").append(toIndentedString(lastWarningTransitionAt)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    removeWhenExpired: ").append(toIndentedString(removeWhenExpired)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUtcTimestamp: ").append(toIndentedString(sourceUtcTimestamp)).append("\n");
    sb.append("    timeToLiveInMilliSeconds: ").append(toIndentedString(timeToLiveInMilliSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("HealthState");
    openapiFields.add("IsExpired");
    openapiFields.add("LastErrorTransitionAt");
    openapiFields.add("LastModifiedUtcTimestamp");
    openapiFields.add("LastOkTransitionAt");
    openapiFields.add("LastWarningTransitionAt");
    openapiFields.add("Property");
    openapiFields.add("RemoveWhenExpired");
    openapiFields.add("SequenceNumber");
    openapiFields.add("SourceId");
    openapiFields.add("SourceUtcTimestamp");
    openapiFields.add("TimeToLiveInMilliSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthEvent is not found in the empty JSON string", HealthEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("LastErrorTransitionAt") != null && !jsonObj.get("LastErrorTransitionAt").isJsonNull()) && !jsonObj.get("LastErrorTransitionAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastErrorTransitionAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastErrorTransitionAt").toString()));
      }
      if ((jsonObj.get("LastModifiedUtcTimestamp") != null && !jsonObj.get("LastModifiedUtcTimestamp").isJsonNull()) && !jsonObj.get("LastModifiedUtcTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastModifiedUtcTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastModifiedUtcTimestamp").toString()));
      }
      if ((jsonObj.get("LastOkTransitionAt") != null && !jsonObj.get("LastOkTransitionAt").isJsonNull()) && !jsonObj.get("LastOkTransitionAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastOkTransitionAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastOkTransitionAt").toString()));
      }
      if ((jsonObj.get("LastWarningTransitionAt") != null && !jsonObj.get("LastWarningTransitionAt").isJsonNull()) && !jsonObj.get("LastWarningTransitionAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastWarningTransitionAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastWarningTransitionAt").toString()));
      }
      if ((jsonObj.get("Property") != null && !jsonObj.get("Property").isJsonNull()) && !jsonObj.get("Property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Property").toString()));
      }
      if ((jsonObj.get("SequenceNumber") != null && !jsonObj.get("SequenceNumber").isJsonNull()) && !jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      if ((jsonObj.get("SourceId") != null && !jsonObj.get("SourceId").isJsonNull()) && !jsonObj.get("SourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceId").toString()));
      }
      if ((jsonObj.get("SourceUtcTimestamp") != null && !jsonObj.get("SourceUtcTimestamp").isJsonNull()) && !jsonObj.get("SourceUtcTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceUtcTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceUtcTimestamp").toString()));
      }
      if ((jsonObj.get("TimeToLiveInMilliSeconds") != null && !jsonObj.get("TimeToLiveInMilliSeconds").isJsonNull()) && !jsonObj.get("TimeToLiveInMilliSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeToLiveInMilliSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeToLiveInMilliSeconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthEvent>() {
           @Override
           public void write(JsonWriter out, HealthEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthEvent
   * @throws IOException if the JSON string is invalid with respect to HealthEvent
   */
  public static HealthEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthEvent.class);
  }

  /**
   * Convert an instance of HealthEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

