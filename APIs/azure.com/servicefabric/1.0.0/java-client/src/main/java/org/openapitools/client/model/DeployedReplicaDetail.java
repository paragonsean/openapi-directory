/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeployedReplicaDetailReplicatorStatus;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The detail of the deployed replica
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedReplicaDetail {
  public static final String SERIALIZED_NAME_CURRENT_REPLICATOR_OPERATION = "CurrentReplicatorOperation";
  @SerializedName(SERIALIZED_NAME_CURRENT_REPLICATOR_OPERATION)
  private Integer currentReplicatorOperation;

  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OPERATION = "CurrentServiceOperation";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OPERATION)
  private Integer currentServiceOperation;

  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OPERATION_START_TIME_UTC = "CurrentServiceOperationStartTimeUtc";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OPERATION_START_TIME_UTC)
  private String currentServiceOperationStartTimeUtc;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private String partitionId;

  public static final String SERIALIZED_NAME_READ_STATUS = "ReadStatus";
  @SerializedName(SERIALIZED_NAME_READ_STATUS)
  private Integer readStatus;

  public static final String SERIALIZED_NAME_REPLICA_ID = "ReplicaId";
  @SerializedName(SERIALIZED_NAME_REPLICA_ID)
  private String replicaId;

  public static final String SERIALIZED_NAME_REPLICATOR_STATUS = "ReplicatorStatus";
  @SerializedName(SERIALIZED_NAME_REPLICATOR_STATUS)
  private DeployedReplicaDetailReplicatorStatus replicatorStatus;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_WRITE_STATUS = "WriteStatus";
  @SerializedName(SERIALIZED_NAME_WRITE_STATUS)
  private Integer writeStatus;

  public DeployedReplicaDetail() {
  }

  public DeployedReplicaDetail currentReplicatorOperation(Integer currentReplicatorOperation) {
    this.currentReplicatorOperation = currentReplicatorOperation;
    return this;
  }

  /**
   * Get currentReplicatorOperation
   * @return currentReplicatorOperation
   */
  @javax.annotation.Nullable
  public Integer getCurrentReplicatorOperation() {
    return currentReplicatorOperation;
  }

  public void setCurrentReplicatorOperation(Integer currentReplicatorOperation) {
    this.currentReplicatorOperation = currentReplicatorOperation;
  }


  public DeployedReplicaDetail currentServiceOperation(Integer currentServiceOperation) {
    this.currentServiceOperation = currentServiceOperation;
    return this;
  }

  /**
   * Get currentServiceOperation
   * @return currentServiceOperation
   */
  @javax.annotation.Nullable
  public Integer getCurrentServiceOperation() {
    return currentServiceOperation;
  }

  public void setCurrentServiceOperation(Integer currentServiceOperation) {
    this.currentServiceOperation = currentServiceOperation;
  }


  public DeployedReplicaDetail currentServiceOperationStartTimeUtc(String currentServiceOperationStartTimeUtc) {
    this.currentServiceOperationStartTimeUtc = currentServiceOperationStartTimeUtc;
    return this;
  }

  /**
   * Get currentServiceOperationStartTimeUtc
   * @return currentServiceOperationStartTimeUtc
   */
  @javax.annotation.Nullable
  public String getCurrentServiceOperationStartTimeUtc() {
    return currentServiceOperationStartTimeUtc;
  }

  public void setCurrentServiceOperationStartTimeUtc(String currentServiceOperationStartTimeUtc) {
    this.currentServiceOperationStartTimeUtc = currentServiceOperationStartTimeUtc;
  }


  public DeployedReplicaDetail instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DeployedReplicaDetail partitionId(String partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * Get partitionId
   * @return partitionId
   */
  @javax.annotation.Nullable
  public String getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(String partitionId) {
    this.partitionId = partitionId;
  }


  public DeployedReplicaDetail readStatus(Integer readStatus) {
    this.readStatus = readStatus;
    return this;
  }

  /**
   * Get readStatus
   * @return readStatus
   */
  @javax.annotation.Nullable
  public Integer getReadStatus() {
    return readStatus;
  }

  public void setReadStatus(Integer readStatus) {
    this.readStatus = readStatus;
  }


  public DeployedReplicaDetail replicaId(String replicaId) {
    this.replicaId = replicaId;
    return this;
  }

  /**
   * Get replicaId
   * @return replicaId
   */
  @javax.annotation.Nullable
  public String getReplicaId() {
    return replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }


  public DeployedReplicaDetail replicatorStatus(DeployedReplicaDetailReplicatorStatus replicatorStatus) {
    this.replicatorStatus = replicatorStatus;
    return this;
  }

  /**
   * Get replicatorStatus
   * @return replicatorStatus
   */
  @javax.annotation.Nullable
  public DeployedReplicaDetailReplicatorStatus getReplicatorStatus() {
    return replicatorStatus;
  }

  public void setReplicatorStatus(DeployedReplicaDetailReplicatorStatus replicatorStatus) {
    this.replicatorStatus = replicatorStatus;
  }


  public DeployedReplicaDetail serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public DeployedReplicaDetail serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public DeployedReplicaDetail writeStatus(Integer writeStatus) {
    this.writeStatus = writeStatus;
    return this;
  }

  /**
   * Get writeStatus
   * @return writeStatus
   */
  @javax.annotation.Nullable
  public Integer getWriteStatus() {
    return writeStatus;
  }

  public void setWriteStatus(Integer writeStatus) {
    this.writeStatus = writeStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedReplicaDetail deployedReplicaDetail = (DeployedReplicaDetail) o;
    return Objects.equals(this.currentReplicatorOperation, deployedReplicaDetail.currentReplicatorOperation) &&
        Objects.equals(this.currentServiceOperation, deployedReplicaDetail.currentServiceOperation) &&
        Objects.equals(this.currentServiceOperationStartTimeUtc, deployedReplicaDetail.currentServiceOperationStartTimeUtc) &&
        Objects.equals(this.instanceId, deployedReplicaDetail.instanceId) &&
        Objects.equals(this.partitionId, deployedReplicaDetail.partitionId) &&
        Objects.equals(this.readStatus, deployedReplicaDetail.readStatus) &&
        Objects.equals(this.replicaId, deployedReplicaDetail.replicaId) &&
        Objects.equals(this.replicatorStatus, deployedReplicaDetail.replicatorStatus) &&
        Objects.equals(this.serviceKind, deployedReplicaDetail.serviceKind) &&
        Objects.equals(this.serviceName, deployedReplicaDetail.serviceName) &&
        Objects.equals(this.writeStatus, deployedReplicaDetail.writeStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentReplicatorOperation, currentServiceOperation, currentServiceOperationStartTimeUtc, instanceId, partitionId, readStatus, replicaId, replicatorStatus, serviceKind, serviceName, writeStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedReplicaDetail {\n");
    sb.append("    currentReplicatorOperation: ").append(toIndentedString(currentReplicatorOperation)).append("\n");
    sb.append("    currentServiceOperation: ").append(toIndentedString(currentServiceOperation)).append("\n");
    sb.append("    currentServiceOperationStartTimeUtc: ").append(toIndentedString(currentServiceOperationStartTimeUtc)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    readStatus: ").append(toIndentedString(readStatus)).append("\n");
    sb.append("    replicaId: ").append(toIndentedString(replicaId)).append("\n");
    sb.append("    replicatorStatus: ").append(toIndentedString(replicatorStatus)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    writeStatus: ").append(toIndentedString(writeStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentReplicatorOperation");
    openapiFields.add("CurrentServiceOperation");
    openapiFields.add("CurrentServiceOperationStartTimeUtc");
    openapiFields.add("InstanceId");
    openapiFields.add("PartitionId");
    openapiFields.add("ReadStatus");
    openapiFields.add("ReplicaId");
    openapiFields.add("ReplicatorStatus");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceName");
    openapiFields.add("WriteStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedReplicaDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedReplicaDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedReplicaDetail is not found in the empty JSON string", DeployedReplicaDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedReplicaDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedReplicaDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CurrentServiceOperationStartTimeUtc") != null && !jsonObj.get("CurrentServiceOperationStartTimeUtc").isJsonNull()) && !jsonObj.get("CurrentServiceOperationStartTimeUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentServiceOperationStartTimeUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentServiceOperationStartTimeUtc").toString()));
      }
      if ((jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) && !jsonObj.get("InstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceId").toString()));
      }
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      if ((jsonObj.get("ReplicaId") != null && !jsonObj.get("ReplicaId").isJsonNull()) && !jsonObj.get("ReplicaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplicaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplicaId").toString()));
      }
      // validate the optional field `ReplicatorStatus`
      if (jsonObj.get("ReplicatorStatus") != null && !jsonObj.get("ReplicatorStatus").isJsonNull()) {
        DeployedReplicaDetailReplicatorStatus.validateJsonElement(jsonObj.get("ReplicatorStatus"));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
      if ((jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) && !jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedReplicaDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedReplicaDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedReplicaDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedReplicaDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedReplicaDetail>() {
           @Override
           public void write(JsonWriter out, DeployedReplicaDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedReplicaDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedReplicaDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedReplicaDetail
   * @throws IOException if the JSON string is invalid with respect to DeployedReplicaDetail
   */
  public static DeployedReplicaDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedReplicaDetail.class);
  }

  /**
   * Convert an instance of DeployedReplicaDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

