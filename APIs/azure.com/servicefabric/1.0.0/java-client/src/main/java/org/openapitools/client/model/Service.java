/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_HAS_PERSISTED_STATE = "HasPersistedState";
  @SerializedName(SERIALIZED_NAME_HAS_PERSISTED_STATE)
  private Boolean hasPersistedState;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_SERVICE_GROUP = "IsServiceGroup";
  @SerializedName(SERIALIZED_NAME_IS_SERVICE_GROUP)
  private Boolean isServiceGroup;

  public static final String SERIALIZED_NAME_MANIFEST_VERSION = "ManifestVersion";
  @SerializedName(SERIALIZED_NAME_MANIFEST_VERSION)
  private String manifestVersion;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  /**
   * Gets or Sets serviceStatus
   */
  @JsonAdapter(ServiceStatusEnum.Adapter.class)
  public enum ServiceStatusEnum {
    INVALID("Invalid"),
    
    ACTIVE("Active"),
    
    UPGRADING("Upgrading"),
    
    DELETING("Deleting"),
    
    CREATING("Creating"),
    
    FAILE("Faile");

    private String value;

    ServiceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceStatusEnum fromValue(String value) {
      for (ServiceStatusEnum b : ServiceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_STATUS = "ServiceStatus";
  @SerializedName(SERIALIZED_NAME_SERVICE_STATUS)
  private ServiceStatusEnum serviceStatus;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public Service() {
  }

  public Service hasPersistedState(Boolean hasPersistedState) {
    this.hasPersistedState = hasPersistedState;
    return this;
  }

  /**
   * Get hasPersistedState
   * @return hasPersistedState
   */
  @javax.annotation.Nullable
  public Boolean getHasPersistedState() {
    return hasPersistedState;
  }

  public void setHasPersistedState(Boolean hasPersistedState) {
    this.hasPersistedState = hasPersistedState;
  }


  public Service healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public Service id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Service isServiceGroup(Boolean isServiceGroup) {
    this.isServiceGroup = isServiceGroup;
    return this;
  }

  /**
   * Get isServiceGroup
   * @return isServiceGroup
   */
  @javax.annotation.Nullable
  public Boolean getIsServiceGroup() {
    return isServiceGroup;
  }

  public void setIsServiceGroup(Boolean isServiceGroup) {
    this.isServiceGroup = isServiceGroup;
  }


  public Service manifestVersion(String manifestVersion) {
    this.manifestVersion = manifestVersion;
    return this;
  }

  /**
   * Get manifestVersion
   * @return manifestVersion
   */
  @javax.annotation.Nullable
  public String getManifestVersion() {
    return manifestVersion;
  }

  public void setManifestVersion(String manifestVersion) {
    this.manifestVersion = manifestVersion;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public Service serviceStatus(ServiceStatusEnum serviceStatus) {
    this.serviceStatus = serviceStatus;
    return this;
  }

  /**
   * Get serviceStatus
   * @return serviceStatus
   */
  @javax.annotation.Nullable
  public ServiceStatusEnum getServiceStatus() {
    return serviceStatus;
  }

  public void setServiceStatus(ServiceStatusEnum serviceStatus) {
    this.serviceStatus = serviceStatus;
  }


  public Service typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.hasPersistedState, service.hasPersistedState) &&
        Objects.equals(this.healthState, service.healthState) &&
        Objects.equals(this.id, service.id) &&
        Objects.equals(this.isServiceGroup, service.isServiceGroup) &&
        Objects.equals(this.manifestVersion, service.manifestVersion) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.serviceKind, service.serviceKind) &&
        Objects.equals(this.serviceStatus, service.serviceStatus) &&
        Objects.equals(this.typeName, service.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasPersistedState, healthState, id, isServiceGroup, manifestVersion, name, serviceKind, serviceStatus, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    hasPersistedState: ").append(toIndentedString(hasPersistedState)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isServiceGroup: ").append(toIndentedString(isServiceGroup)).append("\n");
    sb.append("    manifestVersion: ").append(toIndentedString(manifestVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceStatus: ").append(toIndentedString(serviceStatus)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HasPersistedState");
    openapiFields.add("HealthState");
    openapiFields.add("Id");
    openapiFields.add("IsServiceGroup");
    openapiFields.add("ManifestVersion");
    openapiFields.add("Name");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceStatus");
    openapiFields.add("TypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("ManifestVersion") != null && !jsonObj.get("ManifestVersion").isJsonNull()) && !jsonObj.get("ManifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManifestVersion").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
      if ((jsonObj.get("ServiceStatus") != null && !jsonObj.get("ServiceStatus").isJsonNull()) && !jsonObj.get("ServiceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceStatus").toString()));
      }
      // validate the optional field `ServiceStatus`
      if (jsonObj.get("ServiceStatus") != null && !jsonObj.get("ServiceStatus").isJsonNull()) {
        ServiceStatusEnum.validateJsonElement(jsonObj.get("ServiceStatus"));
      }
      if ((jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) && !jsonObj.get("TypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

