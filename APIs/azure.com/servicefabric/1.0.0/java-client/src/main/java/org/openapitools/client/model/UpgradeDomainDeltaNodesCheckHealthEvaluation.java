/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthEvaluation;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.UnhealthyEvaluation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The evaluation of the upgrade domain delta nodes check health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeDomainDeltaNodesCheckHealthEvaluation extends HealthEvaluation {
  public static final String SERIALIZED_NAME_BASELINE_ERROR_COUNT = "BaselineErrorCount";
  @SerializedName(SERIALIZED_NAME_BASELINE_ERROR_COUNT)
  private Integer baselineErrorCount;

  public static final String SERIALIZED_NAME_BASELINE_TOTAL_COUNT = "BaselineTotalCount";
  @SerializedName(SERIALIZED_NAME_BASELINE_TOTAL_COUNT)
  private Integer baselineTotalCount;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES = "MaxPercentUpgradeDomainDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentUpgradeDomainDeltaUnhealthyNodes;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "TotalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public static final String SERIALIZED_NAME_UNHEALTHY_EVALUATIONS = "UnhealthyEvaluations";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_EVALUATIONS)
  private List<UnhealthyEvaluation> unhealthyEvaluations = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_NAME = "UpgradeDomainName";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_NAME)
  private String upgradeDomainName;

  public UpgradeDomainDeltaNodesCheckHealthEvaluation() {
    this.kind = this.getClass().getSimpleName();
  }

  public UpgradeDomainDeltaNodesCheckHealthEvaluation baselineErrorCount(Integer baselineErrorCount) {
    this.baselineErrorCount = baselineErrorCount;
    return this;
  }

  /**
   * Get baselineErrorCount
   * @return baselineErrorCount
   */
  @javax.annotation.Nullable
  public Integer getBaselineErrorCount() {
    return baselineErrorCount;
  }

  public void setBaselineErrorCount(Integer baselineErrorCount) {
    this.baselineErrorCount = baselineErrorCount;
  }


  public UpgradeDomainDeltaNodesCheckHealthEvaluation baselineTotalCount(Integer baselineTotalCount) {
    this.baselineTotalCount = baselineTotalCount;
    return this;
  }

  /**
   * Get baselineTotalCount
   * @return baselineTotalCount
   */
  @javax.annotation.Nullable
  public Integer getBaselineTotalCount() {
    return baselineTotalCount;
  }

  public void setBaselineTotalCount(Integer baselineTotalCount) {
    this.baselineTotalCount = baselineTotalCount;
  }


  public UpgradeDomainDeltaNodesCheckHealthEvaluation maxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
    return this;
  }

  /**
   * Get maxPercentUpgradeDomainDeltaUnhealthyNodes
   * @return maxPercentUpgradeDomainDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUpgradeDomainDeltaUnhealthyNodes() {
    return maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }

  public void setMaxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }


  public UpgradeDomainDeltaNodesCheckHealthEvaluation totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public UpgradeDomainDeltaNodesCheckHealthEvaluation unhealthyEvaluations(List<UnhealthyEvaluation> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
    return this;
  }

  public UpgradeDomainDeltaNodesCheckHealthEvaluation addUnhealthyEvaluationsItem(UnhealthyEvaluation unhealthyEvaluationsItem) {
    if (this.unhealthyEvaluations == null) {
      this.unhealthyEvaluations = new ArrayList<>();
    }
    this.unhealthyEvaluations.add(unhealthyEvaluationsItem);
    return this;
  }

  /**
   * Get unhealthyEvaluations
   * @return unhealthyEvaluations
   */
  @javax.annotation.Nullable
  public List<UnhealthyEvaluation> getUnhealthyEvaluations() {
    return unhealthyEvaluations;
  }

  public void setUnhealthyEvaluations(List<UnhealthyEvaluation> unhealthyEvaluations) {
    this.unhealthyEvaluations = unhealthyEvaluations;
  }


  public UpgradeDomainDeltaNodesCheckHealthEvaluation upgradeDomainName(String upgradeDomainName) {
    this.upgradeDomainName = upgradeDomainName;
    return this;
  }

  /**
   * Get upgradeDomainName
   * @return upgradeDomainName
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainName() {
    return upgradeDomainName;
  }

  public void setUpgradeDomainName(String upgradeDomainName) {
    this.upgradeDomainName = upgradeDomainName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeDomainDeltaNodesCheckHealthEvaluation upgradeDomainDeltaNodesCheckHealthEvaluation = (UpgradeDomainDeltaNodesCheckHealthEvaluation) o;
    return Objects.equals(this.baselineErrorCount, upgradeDomainDeltaNodesCheckHealthEvaluation.baselineErrorCount) &&
        Objects.equals(this.baselineTotalCount, upgradeDomainDeltaNodesCheckHealthEvaluation.baselineTotalCount) &&
        Objects.equals(this.maxPercentUpgradeDomainDeltaUnhealthyNodes, upgradeDomainDeltaNodesCheckHealthEvaluation.maxPercentUpgradeDomainDeltaUnhealthyNodes) &&
        Objects.equals(this.totalCount, upgradeDomainDeltaNodesCheckHealthEvaluation.totalCount) &&
        Objects.equals(this.unhealthyEvaluations, upgradeDomainDeltaNodesCheckHealthEvaluation.unhealthyEvaluations) &&
        Objects.equals(this.upgradeDomainName, upgradeDomainDeltaNodesCheckHealthEvaluation.upgradeDomainName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselineErrorCount, baselineTotalCount, maxPercentUpgradeDomainDeltaUnhealthyNodes, totalCount, unhealthyEvaluations, upgradeDomainName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeDomainDeltaNodesCheckHealthEvaluation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baselineErrorCount: ").append(toIndentedString(baselineErrorCount)).append("\n");
    sb.append("    baselineTotalCount: ").append(toIndentedString(baselineTotalCount)).append("\n");
    sb.append("    maxPercentUpgradeDomainDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentUpgradeDomainDeltaUnhealthyNodes)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    unhealthyEvaluations: ").append(toIndentedString(unhealthyEvaluations)).append("\n");
    sb.append("    upgradeDomainName: ").append(toIndentedString(upgradeDomainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("Description");
    openapiFields.add("Kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeDomainDeltaNodesCheckHealthEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeDomainDeltaNodesCheckHealthEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeDomainDeltaNodesCheckHealthEvaluation is not found in the empty JSON string", UpgradeDomainDeltaNodesCheckHealthEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeDomainDeltaNodesCheckHealthEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeDomainDeltaNodesCheckHealthEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpgradeDomainDeltaNodesCheckHealthEvaluation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeDomainDeltaNodesCheckHealthEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeDomainDeltaNodesCheckHealthEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeDomainDeltaNodesCheckHealthEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeDomainDeltaNodesCheckHealthEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeDomainDeltaNodesCheckHealthEvaluation>() {
           @Override
           public void write(JsonWriter out, UpgradeDomainDeltaNodesCheckHealthEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeDomainDeltaNodesCheckHealthEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeDomainDeltaNodesCheckHealthEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeDomainDeltaNodesCheckHealthEvaluation
   * @throws IOException if the JSON string is invalid with respect to UpgradeDomainDeltaNodesCheckHealthEvaluation
   */
  public static UpgradeDomainDeltaNodesCheckHealthEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeDomainDeltaNodesCheckHealthEvaluation.class);
  }

  /**
   * Convert an instance of UpgradeDomainDeltaNodesCheckHealthEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

