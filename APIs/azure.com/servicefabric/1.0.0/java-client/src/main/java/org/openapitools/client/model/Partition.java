/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.PartitionCurrentConfigurationEpoch;
import org.openapitools.client.model.PartitionInformation;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The partition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Partition {
  public static final String SERIALIZED_NAME_CURRENT_CONFIGURATION_EPOCH = "CurrentConfigurationEpoch";
  @SerializedName(SERIALIZED_NAME_CURRENT_CONFIGURATION_EPOCH)
  private PartitionCurrentConfigurationEpoch currentConfigurationEpoch;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "InstanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Integer instanceCount;

  public static final String SERIALIZED_NAME_MIN_REPLICA_SET_SIZE = "MinReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_MIN_REPLICA_SET_SIZE)
  private Integer minReplicaSetSize;

  public static final String SERIALIZED_NAME_PARTITION_INFORMATION = "PartitionInformation";
  @SerializedName(SERIALIZED_NAME_PARTITION_INFORMATION)
  private PartitionInformation partitionInformation;

  /**
   * Gets or Sets partitionStatus
   */
  @JsonAdapter(PartitionStatusEnum.Adapter.class)
  public enum PartitionStatusEnum {
    INVALID("Invalid"),
    
    READY("Ready"),
    
    NOT_READY("NotReady"),
    
    IN_QUORUM_LOSS("InQuorumLoss"),
    
    RECONFIGURING("Reconfiguring"),
    
    DELETING("Deleting");

    private String value;

    PartitionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartitionStatusEnum fromValue(String value) {
      for (PartitionStatusEnum b : PartitionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartitionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartitionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartitionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartitionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PartitionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARTITION_STATUS = "PartitionStatus";
  @SerializedName(SERIALIZED_NAME_PARTITION_STATUS)
  private PartitionStatusEnum partitionStatus;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE = "TargetReplicaSetSize";
  @SerializedName(SERIALIZED_NAME_TARGET_REPLICA_SET_SIZE)
  private Integer targetReplicaSetSize;

  public Partition() {
  }

  public Partition currentConfigurationEpoch(PartitionCurrentConfigurationEpoch currentConfigurationEpoch) {
    this.currentConfigurationEpoch = currentConfigurationEpoch;
    return this;
  }

  /**
   * Get currentConfigurationEpoch
   * @return currentConfigurationEpoch
   */
  @javax.annotation.Nullable
  public PartitionCurrentConfigurationEpoch getCurrentConfigurationEpoch() {
    return currentConfigurationEpoch;
  }

  public void setCurrentConfigurationEpoch(PartitionCurrentConfigurationEpoch currentConfigurationEpoch) {
    this.currentConfigurationEpoch = currentConfigurationEpoch;
  }


  public Partition healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public Partition instanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
    return this;
  }

  /**
   * Get instanceCount
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public Integer getInstanceCount() {
    return instanceCount;
  }

  public void setInstanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
  }


  public Partition minReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
    return this;
  }

  /**
   * Get minReplicaSetSize
   * @return minReplicaSetSize
   */
  @javax.annotation.Nullable
  public Integer getMinReplicaSetSize() {
    return minReplicaSetSize;
  }

  public void setMinReplicaSetSize(Integer minReplicaSetSize) {
    this.minReplicaSetSize = minReplicaSetSize;
  }


  public Partition partitionInformation(PartitionInformation partitionInformation) {
    this.partitionInformation = partitionInformation;
    return this;
  }

  /**
   * Get partitionInformation
   * @return partitionInformation
   */
  @javax.annotation.Nullable
  public PartitionInformation getPartitionInformation() {
    return partitionInformation;
  }

  public void setPartitionInformation(PartitionInformation partitionInformation) {
    this.partitionInformation = partitionInformation;
  }


  public Partition partitionStatus(PartitionStatusEnum partitionStatus) {
    this.partitionStatus = partitionStatus;
    return this;
  }

  /**
   * Get partitionStatus
   * @return partitionStatus
   */
  @javax.annotation.Nullable
  public PartitionStatusEnum getPartitionStatus() {
    return partitionStatus;
  }

  public void setPartitionStatus(PartitionStatusEnum partitionStatus) {
    this.partitionStatus = partitionStatus;
  }


  public Partition serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public Partition targetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
    return this;
  }

  /**
   * Get targetReplicaSetSize
   * @return targetReplicaSetSize
   */
  @javax.annotation.Nullable
  public Integer getTargetReplicaSetSize() {
    return targetReplicaSetSize;
  }

  public void setTargetReplicaSetSize(Integer targetReplicaSetSize) {
    this.targetReplicaSetSize = targetReplicaSetSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Partition partition = (Partition) o;
    return Objects.equals(this.currentConfigurationEpoch, partition.currentConfigurationEpoch) &&
        Objects.equals(this.healthState, partition.healthState) &&
        Objects.equals(this.instanceCount, partition.instanceCount) &&
        Objects.equals(this.minReplicaSetSize, partition.minReplicaSetSize) &&
        Objects.equals(this.partitionInformation, partition.partitionInformation) &&
        Objects.equals(this.partitionStatus, partition.partitionStatus) &&
        Objects.equals(this.serviceKind, partition.serviceKind) &&
        Objects.equals(this.targetReplicaSetSize, partition.targetReplicaSetSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentConfigurationEpoch, healthState, instanceCount, minReplicaSetSize, partitionInformation, partitionStatus, serviceKind, targetReplicaSetSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Partition {\n");
    sb.append("    currentConfigurationEpoch: ").append(toIndentedString(currentConfigurationEpoch)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    minReplicaSetSize: ").append(toIndentedString(minReplicaSetSize)).append("\n");
    sb.append("    partitionInformation: ").append(toIndentedString(partitionInformation)).append("\n");
    sb.append("    partitionStatus: ").append(toIndentedString(partitionStatus)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    targetReplicaSetSize: ").append(toIndentedString(targetReplicaSetSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentConfigurationEpoch");
    openapiFields.add("HealthState");
    openapiFields.add("InstanceCount");
    openapiFields.add("MinReplicaSetSize");
    openapiFields.add("PartitionInformation");
    openapiFields.add("PartitionStatus");
    openapiFields.add("ServiceKind");
    openapiFields.add("TargetReplicaSetSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Partition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Partition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Partition is not found in the empty JSON string", Partition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Partition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Partition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CurrentConfigurationEpoch`
      if (jsonObj.get("CurrentConfigurationEpoch") != null && !jsonObj.get("CurrentConfigurationEpoch").isJsonNull()) {
        PartitionCurrentConfigurationEpoch.validateJsonElement(jsonObj.get("CurrentConfigurationEpoch"));
      }
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      // validate the optional field `PartitionInformation`
      if (jsonObj.get("PartitionInformation") != null && !jsonObj.get("PartitionInformation").isJsonNull()) {
        PartitionInformation.validateJsonElement(jsonObj.get("PartitionInformation"));
      }
      if ((jsonObj.get("PartitionStatus") != null && !jsonObj.get("PartitionStatus").isJsonNull()) && !jsonObj.get("PartitionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionStatus").toString()));
      }
      // validate the optional field `PartitionStatus`
      if (jsonObj.get("PartitionStatus") != null && !jsonObj.get("PartitionStatus").isJsonNull()) {
        PartitionStatusEnum.validateJsonElement(jsonObj.get("PartitionStatus"));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Partition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Partition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Partition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Partition.class));

       return (TypeAdapter<T>) new TypeAdapter<Partition>() {
           @Override
           public void write(JsonWriter out, Partition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Partition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Partition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Partition
   * @throws IOException if the JSON string is invalid with respect to Partition
   */
  public static Partition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Partition.class);
  }

  /**
   * Convert an instance of Partition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

