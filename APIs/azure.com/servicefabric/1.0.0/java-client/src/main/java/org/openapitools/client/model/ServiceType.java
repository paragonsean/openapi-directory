/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceTypeServiceTypeDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type of the service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceType {
  public static final String SERIALIZED_NAME_IS_SERVICE_GROUP = "IsServiceGroup";
  @SerializedName(SERIALIZED_NAME_IS_SERVICE_GROUP)
  private Boolean isServiceGroup;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_VERSION = "ServiceManifestVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_VERSION)
  private String serviceManifestVersion;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_DESCRIPTION = "ServiceTypeDescription";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_DESCRIPTION)
  private ServiceTypeServiceTypeDescription serviceTypeDescription;

  public ServiceType() {
  }

  public ServiceType isServiceGroup(Boolean isServiceGroup) {
    this.isServiceGroup = isServiceGroup;
    return this;
  }

  /**
   * Get isServiceGroup
   * @return isServiceGroup
   */
  @javax.annotation.Nullable
  public Boolean getIsServiceGroup() {
    return isServiceGroup;
  }

  public void setIsServiceGroup(Boolean isServiceGroup) {
    this.isServiceGroup = isServiceGroup;
  }


  public ServiceType serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * Get serviceManifestName
   * @return serviceManifestName
   */
  @javax.annotation.Nullable
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public ServiceType serviceManifestVersion(String serviceManifestVersion) {
    this.serviceManifestVersion = serviceManifestVersion;
    return this;
  }

  /**
   * Get serviceManifestVersion
   * @return serviceManifestVersion
   */
  @javax.annotation.Nullable
  public String getServiceManifestVersion() {
    return serviceManifestVersion;
  }

  public void setServiceManifestVersion(String serviceManifestVersion) {
    this.serviceManifestVersion = serviceManifestVersion;
  }


  public ServiceType serviceTypeDescription(ServiceTypeServiceTypeDescription serviceTypeDescription) {
    this.serviceTypeDescription = serviceTypeDescription;
    return this;
  }

  /**
   * Get serviceTypeDescription
   * @return serviceTypeDescription
   */
  @javax.annotation.Nullable
  public ServiceTypeServiceTypeDescription getServiceTypeDescription() {
    return serviceTypeDescription;
  }

  public void setServiceTypeDescription(ServiceTypeServiceTypeDescription serviceTypeDescription) {
    this.serviceTypeDescription = serviceTypeDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceType serviceType = (ServiceType) o;
    return Objects.equals(this.isServiceGroup, serviceType.isServiceGroup) &&
        Objects.equals(this.serviceManifestName, serviceType.serviceManifestName) &&
        Objects.equals(this.serviceManifestVersion, serviceType.serviceManifestVersion) &&
        Objects.equals(this.serviceTypeDescription, serviceType.serviceTypeDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isServiceGroup, serviceManifestName, serviceManifestVersion, serviceTypeDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceType {\n");
    sb.append("    isServiceGroup: ").append(toIndentedString(isServiceGroup)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    serviceManifestVersion: ").append(toIndentedString(serviceManifestVersion)).append("\n");
    sb.append("    serviceTypeDescription: ").append(toIndentedString(serviceTypeDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsServiceGroup");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServiceManifestVersion");
    openapiFields.add("ServiceTypeDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceType is not found in the empty JSON string", ServiceType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ServiceManifestName") != null && !jsonObj.get("ServiceManifestName").isJsonNull()) && !jsonObj.get("ServiceManifestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestName").toString()));
      }
      if ((jsonObj.get("ServiceManifestVersion") != null && !jsonObj.get("ServiceManifestVersion").isJsonNull()) && !jsonObj.get("ServiceManifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceManifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceManifestVersion").toString()));
      }
      // validate the optional field `ServiceTypeDescription`
      if (jsonObj.get("ServiceTypeDescription") != null && !jsonObj.get("ServiceTypeDescription").isJsonNull()) {
        ServiceTypeServiceTypeDescription.validateJsonElement(jsonObj.get("ServiceTypeDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceType.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceType>() {
           @Override
           public void write(JsonWriter out, ServiceType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceType
   * @throws IOException if the JSON string is invalid with respect to ServiceType
   */
  public static ServiceType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceType.class);
  }

  /**
   * Convert an instance of ServiceType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

