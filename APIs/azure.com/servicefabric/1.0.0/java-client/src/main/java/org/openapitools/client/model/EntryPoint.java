/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodePackageEntryPointStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The point of the entry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryPoint {
  public static final String SERIALIZED_NAME_CODE_PACKAGE_ENTRY_POINT_STATISTICS = "CodePackageEntryPointStatistics";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGE_ENTRY_POINT_STATISTICS)
  private CodePackageEntryPointStatistics codePackageEntryPointStatistics;

  public static final String SERIALIZED_NAME_ENTRY_POINT_LOCATION = "EntryPointLocation";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT_LOCATION)
  private Integer entryPointLocation;

  public static final String SERIALIZED_NAME_NEXT_ACTIVATION_TIME = "NextActivationTime";
  @SerializedName(SERIALIZED_NAME_NEXT_ACTIVATION_TIME)
  private Integer nextActivationTime;

  public static final String SERIALIZED_NAME_PROCESS_ID = "ProcessId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private Integer processId;

  public static final String SERIALIZED_NAME_RUN_AS_USER_NAME = "RunAsUserName";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER_NAME)
  private Integer runAsUserName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public EntryPoint() {
  }

  public EntryPoint codePackageEntryPointStatistics(CodePackageEntryPointStatistics codePackageEntryPointStatistics) {
    this.codePackageEntryPointStatistics = codePackageEntryPointStatistics;
    return this;
  }

  /**
   * Get codePackageEntryPointStatistics
   * @return codePackageEntryPointStatistics
   */
  @javax.annotation.Nullable
  public CodePackageEntryPointStatistics getCodePackageEntryPointStatistics() {
    return codePackageEntryPointStatistics;
  }

  public void setCodePackageEntryPointStatistics(CodePackageEntryPointStatistics codePackageEntryPointStatistics) {
    this.codePackageEntryPointStatistics = codePackageEntryPointStatistics;
  }


  public EntryPoint entryPointLocation(Integer entryPointLocation) {
    this.entryPointLocation = entryPointLocation;
    return this;
  }

  /**
   * Get entryPointLocation
   * @return entryPointLocation
   */
  @javax.annotation.Nullable
  public Integer getEntryPointLocation() {
    return entryPointLocation;
  }

  public void setEntryPointLocation(Integer entryPointLocation) {
    this.entryPointLocation = entryPointLocation;
  }


  public EntryPoint nextActivationTime(Integer nextActivationTime) {
    this.nextActivationTime = nextActivationTime;
    return this;
  }

  /**
   * Get nextActivationTime
   * @return nextActivationTime
   */
  @javax.annotation.Nullable
  public Integer getNextActivationTime() {
    return nextActivationTime;
  }

  public void setNextActivationTime(Integer nextActivationTime) {
    this.nextActivationTime = nextActivationTime;
  }


  public EntryPoint processId(Integer processId) {
    this.processId = processId;
    return this;
  }

  /**
   * Get processId
   * @return processId
   */
  @javax.annotation.Nullable
  public Integer getProcessId() {
    return processId;
  }

  public void setProcessId(Integer processId) {
    this.processId = processId;
  }


  public EntryPoint runAsUserName(Integer runAsUserName) {
    this.runAsUserName = runAsUserName;
    return this;
  }

  /**
   * Get runAsUserName
   * @return runAsUserName
   */
  @javax.annotation.Nullable
  public Integer getRunAsUserName() {
    return runAsUserName;
  }

  public void setRunAsUserName(Integer runAsUserName) {
    this.runAsUserName = runAsUserName;
  }


  public EntryPoint status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryPoint entryPoint = (EntryPoint) o;
    return Objects.equals(this.codePackageEntryPointStatistics, entryPoint.codePackageEntryPointStatistics) &&
        Objects.equals(this.entryPointLocation, entryPoint.entryPointLocation) &&
        Objects.equals(this.nextActivationTime, entryPoint.nextActivationTime) &&
        Objects.equals(this.processId, entryPoint.processId) &&
        Objects.equals(this.runAsUserName, entryPoint.runAsUserName) &&
        Objects.equals(this.status, entryPoint.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePackageEntryPointStatistics, entryPointLocation, nextActivationTime, processId, runAsUserName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryPoint {\n");
    sb.append("    codePackageEntryPointStatistics: ").append(toIndentedString(codePackageEntryPointStatistics)).append("\n");
    sb.append("    entryPointLocation: ").append(toIndentedString(entryPointLocation)).append("\n");
    sb.append("    nextActivationTime: ").append(toIndentedString(nextActivationTime)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    runAsUserName: ").append(toIndentedString(runAsUserName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodePackageEntryPointStatistics");
    openapiFields.add("EntryPointLocation");
    openapiFields.add("NextActivationTime");
    openapiFields.add("ProcessId");
    openapiFields.add("RunAsUserName");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryPoint is not found in the empty JSON string", EntryPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodePackageEntryPointStatistics`
      if (jsonObj.get("CodePackageEntryPointStatistics") != null && !jsonObj.get("CodePackageEntryPointStatistics").isJsonNull()) {
        CodePackageEntryPointStatistics.validateJsonElement(jsonObj.get("CodePackageEntryPointStatistics"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryPoint>() {
           @Override
           public void write(JsonWriter out, EntryPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryPoint
   * @throws IOException if the JSON string is invalid with respect to EntryPoint
   */
  public static EntryPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryPoint.class);
  }

  /**
   * Convert an instance of EntryPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

