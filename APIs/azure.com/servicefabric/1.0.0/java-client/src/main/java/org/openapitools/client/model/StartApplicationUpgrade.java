/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.ApplicationParametersInner;
import org.openapitools.client.model.MonitoringPolicy;
import org.openapitools.client.model.RollingUpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The description of the start application upgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartApplicationUpgrade {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICY = "ApplicationHealthPolicy";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICY)
  private ApplicationHealthPolicy applicationHealthPolicy;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "ForceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart;

  public static final String SERIALIZED_NAME_MONITORING_POLICY = "MonitoringPolicy";
  @SerializedName(SERIALIZED_NAME_MONITORING_POLICY)
  private MonitoringPolicy monitoringPolicy;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ApplicationParametersInner> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLLING_UPGRADE_MODE = "RollingUpgradeMode";
  @SerializedName(SERIALIZED_NAME_ROLLING_UPGRADE_MODE)
  private RollingUpgradeMode rollingUpgradeMode;

  public static final String SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION = "TargetApplicationTypeVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATION_TYPE_VERSION)
  private String targetApplicationTypeVersion;

  /**
   * Gets or Sets upgradeKind
   */
  @JsonAdapter(UpgradeKindEnum.Adapter.class)
  public enum UpgradeKindEnum {
    INVALID("Invalid"),
    
    ROLLING("Rolling");

    private String value;

    UpgradeKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpgradeKindEnum fromValue(String value) {
      for (UpgradeKindEnum b : UpgradeKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpgradeKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpgradeKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpgradeKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpgradeKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpgradeKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPGRADE_KIND = "UpgradeKind";
  @SerializedName(SERIALIZED_NAME_UPGRADE_KIND)
  private UpgradeKindEnum upgradeKind;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS = "UpgradeReplicaSetCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT_IN_SECONDS)
  private Integer upgradeReplicaSetCheckTimeoutInSeconds;

  public StartApplicationUpgrade() {
  }

  public StartApplicationUpgrade applicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
    return this;
  }

  /**
   * Get applicationHealthPolicy
   * @return applicationHealthPolicy
   */
  @javax.annotation.Nullable
  public ApplicationHealthPolicy getApplicationHealthPolicy() {
    return applicationHealthPolicy;
  }

  public void setApplicationHealthPolicy(ApplicationHealthPolicy applicationHealthPolicy) {
    this.applicationHealthPolicy = applicationHealthPolicy;
  }


  public StartApplicationUpgrade forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * Get forceRestart
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public StartApplicationUpgrade monitoringPolicy(MonitoringPolicy monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
    return this;
  }

  /**
   * Get monitoringPolicy
   * @return monitoringPolicy
   */
  @javax.annotation.Nullable
  public MonitoringPolicy getMonitoringPolicy() {
    return monitoringPolicy;
  }

  public void setMonitoringPolicy(MonitoringPolicy monitoringPolicy) {
    this.monitoringPolicy = monitoringPolicy;
  }


  public StartApplicationUpgrade name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartApplicationUpgrade parameters(List<ApplicationParametersInner> parameters) {
    this.parameters = parameters;
    return this;
  }

  public StartApplicationUpgrade addParametersItem(ApplicationParametersInner parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<ApplicationParametersInner> getParameters() {
    return parameters;
  }

  public void setParameters(List<ApplicationParametersInner> parameters) {
    this.parameters = parameters;
  }


  public StartApplicationUpgrade rollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
    return this;
  }

  /**
   * Get rollingUpgradeMode
   * @return rollingUpgradeMode
   */
  @javax.annotation.Nullable
  public RollingUpgradeMode getRollingUpgradeMode() {
    return rollingUpgradeMode;
  }

  public void setRollingUpgradeMode(RollingUpgradeMode rollingUpgradeMode) {
    this.rollingUpgradeMode = rollingUpgradeMode;
  }


  public StartApplicationUpgrade targetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
    return this;
  }

  /**
   * Get targetApplicationTypeVersion
   * @return targetApplicationTypeVersion
   */
  @javax.annotation.Nullable
  public String getTargetApplicationTypeVersion() {
    return targetApplicationTypeVersion;
  }

  public void setTargetApplicationTypeVersion(String targetApplicationTypeVersion) {
    this.targetApplicationTypeVersion = targetApplicationTypeVersion;
  }


  public StartApplicationUpgrade upgradeKind(UpgradeKindEnum upgradeKind) {
    this.upgradeKind = upgradeKind;
    return this;
  }

  /**
   * Get upgradeKind
   * @return upgradeKind
   */
  @javax.annotation.Nullable
  public UpgradeKindEnum getUpgradeKind() {
    return upgradeKind;
  }

  public void setUpgradeKind(UpgradeKindEnum upgradeKind) {
    this.upgradeKind = upgradeKind;
  }


  public StartApplicationUpgrade upgradeReplicaSetCheckTimeoutInSeconds(Integer upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
    return this;
  }

  /**
   * Get upgradeReplicaSetCheckTimeoutInSeconds
   * @return upgradeReplicaSetCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getUpgradeReplicaSetCheckTimeoutInSeconds() {
    return upgradeReplicaSetCheckTimeoutInSeconds;
  }

  public void setUpgradeReplicaSetCheckTimeoutInSeconds(Integer upgradeReplicaSetCheckTimeoutInSeconds) {
    this.upgradeReplicaSetCheckTimeoutInSeconds = upgradeReplicaSetCheckTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartApplicationUpgrade startApplicationUpgrade = (StartApplicationUpgrade) o;
    return Objects.equals(this.applicationHealthPolicy, startApplicationUpgrade.applicationHealthPolicy) &&
        Objects.equals(this.forceRestart, startApplicationUpgrade.forceRestart) &&
        Objects.equals(this.monitoringPolicy, startApplicationUpgrade.monitoringPolicy) &&
        Objects.equals(this.name, startApplicationUpgrade.name) &&
        Objects.equals(this.parameters, startApplicationUpgrade.parameters) &&
        Objects.equals(this.rollingUpgradeMode, startApplicationUpgrade.rollingUpgradeMode) &&
        Objects.equals(this.targetApplicationTypeVersion, startApplicationUpgrade.targetApplicationTypeVersion) &&
        Objects.equals(this.upgradeKind, startApplicationUpgrade.upgradeKind) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeoutInSeconds, startApplicationUpgrade.upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicy, forceRestart, monitoringPolicy, name, parameters, rollingUpgradeMode, targetApplicationTypeVersion, upgradeKind, upgradeReplicaSetCheckTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartApplicationUpgrade {\n");
    sb.append("    applicationHealthPolicy: ").append(toIndentedString(applicationHealthPolicy)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    monitoringPolicy: ").append(toIndentedString(monitoringPolicy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    rollingUpgradeMode: ").append(toIndentedString(rollingUpgradeMode)).append("\n");
    sb.append("    targetApplicationTypeVersion: ").append(toIndentedString(targetApplicationTypeVersion)).append("\n");
    sb.append("    upgradeKind: ").append(toIndentedString(upgradeKind)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeoutInSeconds: ").append(toIndentedString(upgradeReplicaSetCheckTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicy");
    openapiFields.add("ForceRestart");
    openapiFields.add("MonitoringPolicy");
    openapiFields.add("Name");
    openapiFields.add("Parameters");
    openapiFields.add("RollingUpgradeMode");
    openapiFields.add("TargetApplicationTypeVersion");
    openapiFields.add("UpgradeKind");
    openapiFields.add("UpgradeReplicaSetCheckTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartApplicationUpgrade
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartApplicationUpgrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartApplicationUpgrade is not found in the empty JSON string", StartApplicationUpgrade.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartApplicationUpgrade.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartApplicationUpgrade` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationHealthPolicy`
      if (jsonObj.get("ApplicationHealthPolicy") != null && !jsonObj.get("ApplicationHealthPolicy").isJsonNull()) {
        ApplicationHealthPolicy.validateJsonElement(jsonObj.get("ApplicationHealthPolicy"));
      }
      // validate the optional field `MonitoringPolicy`
      if (jsonObj.get("MonitoringPolicy") != null && !jsonObj.get("MonitoringPolicy").isJsonNull()) {
        MonitoringPolicy.validateJsonElement(jsonObj.get("MonitoringPolicy"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            ApplicationParametersInner.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `RollingUpgradeMode`
      if (jsonObj.get("RollingUpgradeMode") != null && !jsonObj.get("RollingUpgradeMode").isJsonNull()) {
        RollingUpgradeMode.validateJsonElement(jsonObj.get("RollingUpgradeMode"));
      }
      if ((jsonObj.get("TargetApplicationTypeVersion") != null && !jsonObj.get("TargetApplicationTypeVersion").isJsonNull()) && !jsonObj.get("TargetApplicationTypeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetApplicationTypeVersion").toString()));
      }
      if ((jsonObj.get("UpgradeKind") != null && !jsonObj.get("UpgradeKind").isJsonNull()) && !jsonObj.get("UpgradeKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeKind").toString()));
      }
      // validate the optional field `UpgradeKind`
      if (jsonObj.get("UpgradeKind") != null && !jsonObj.get("UpgradeKind").isJsonNull()) {
        UpgradeKindEnum.validateJsonElement(jsonObj.get("UpgradeKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartApplicationUpgrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartApplicationUpgrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartApplicationUpgrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartApplicationUpgrade.class));

       return (TypeAdapter<T>) new TypeAdapter<StartApplicationUpgrade>() {
           @Override
           public void write(JsonWriter out, StartApplicationUpgrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartApplicationUpgrade read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartApplicationUpgrade given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartApplicationUpgrade
   * @throws IOException if the JSON string is invalid with respect to StartApplicationUpgrade
   */
  public static StartApplicationUpgrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartApplicationUpgrade.class);
  }

  /**
   * Convert an instance of StartApplicationUpgrade to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

