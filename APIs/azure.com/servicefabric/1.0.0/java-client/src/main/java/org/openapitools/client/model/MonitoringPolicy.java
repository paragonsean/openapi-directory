/*
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The policy of the monitoring
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:57:25.463736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringPolicy {
  public static final String SERIALIZED_NAME_FAILURE_ACTION = "FailureAction";
  @SerializedName(SERIALIZED_NAME_FAILURE_ACTION)
  private String failureAction;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT_IN_MILLISECONDS = "HealthCheckRetryTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT_IN_MILLISECONDS)
  private String healthCheckRetryTimeoutInMilliseconds;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_MILLISECONDS = "HealthCheckStableDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_MILLISECONDS)
  private String healthCheckStableDurationInMilliseconds;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_MILLISECONDS = "HealthCheckWaitDurationInMilliseconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_MILLISECONDS)
  private String healthCheckWaitDurationInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_MILLISECONDS = "UpgradeDomainTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_MILLISECONDS)
  private String upgradeDomainTimeoutInMilliseconds;

  public static final String SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_MILLISECONDS = "UpgradeTimeoutInMilliseconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_MILLISECONDS)
  private String upgradeTimeoutInMilliseconds;

  public MonitoringPolicy() {
  }

  public MonitoringPolicy failureAction(String failureAction) {
    this.failureAction = failureAction;
    return this;
  }

  /**
   * Get failureAction
   * @return failureAction
   */
  @javax.annotation.Nullable
  public String getFailureAction() {
    return failureAction;
  }

  public void setFailureAction(String failureAction) {
    this.failureAction = failureAction;
  }


  public MonitoringPolicy healthCheckRetryTimeoutInMilliseconds(String healthCheckRetryTimeoutInMilliseconds) {
    this.healthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
    return this;
  }

  /**
   * Get healthCheckRetryTimeoutInMilliseconds
   * @return healthCheckRetryTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckRetryTimeoutInMilliseconds() {
    return healthCheckRetryTimeoutInMilliseconds;
  }

  public void setHealthCheckRetryTimeoutInMilliseconds(String healthCheckRetryTimeoutInMilliseconds) {
    this.healthCheckRetryTimeoutInMilliseconds = healthCheckRetryTimeoutInMilliseconds;
  }


  public MonitoringPolicy healthCheckStableDurationInMilliseconds(String healthCheckStableDurationInMilliseconds) {
    this.healthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
    return this;
  }

  /**
   * Get healthCheckStableDurationInMilliseconds
   * @return healthCheckStableDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckStableDurationInMilliseconds() {
    return healthCheckStableDurationInMilliseconds;
  }

  public void setHealthCheckStableDurationInMilliseconds(String healthCheckStableDurationInMilliseconds) {
    this.healthCheckStableDurationInMilliseconds = healthCheckStableDurationInMilliseconds;
  }


  public MonitoringPolicy healthCheckWaitDurationInMilliseconds(String healthCheckWaitDurationInMilliseconds) {
    this.healthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
    return this;
  }

  /**
   * Get healthCheckWaitDurationInMilliseconds
   * @return healthCheckWaitDurationInMilliseconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckWaitDurationInMilliseconds() {
    return healthCheckWaitDurationInMilliseconds;
  }

  public void setHealthCheckWaitDurationInMilliseconds(String healthCheckWaitDurationInMilliseconds) {
    this.healthCheckWaitDurationInMilliseconds = healthCheckWaitDurationInMilliseconds;
  }


  public MonitoringPolicy upgradeDomainTimeoutInMilliseconds(String upgradeDomainTimeoutInMilliseconds) {
    this.upgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
    return this;
  }

  /**
   * Get upgradeDomainTimeoutInMilliseconds
   * @return upgradeDomainTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainTimeoutInMilliseconds() {
    return upgradeDomainTimeoutInMilliseconds;
  }

  public void setUpgradeDomainTimeoutInMilliseconds(String upgradeDomainTimeoutInMilliseconds) {
    this.upgradeDomainTimeoutInMilliseconds = upgradeDomainTimeoutInMilliseconds;
  }


  public MonitoringPolicy upgradeTimeoutInMilliseconds(String upgradeTimeoutInMilliseconds) {
    this.upgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
    return this;
  }

  /**
   * Get upgradeTimeoutInMilliseconds
   * @return upgradeTimeoutInMilliseconds
   */
  @javax.annotation.Nullable
  public String getUpgradeTimeoutInMilliseconds() {
    return upgradeTimeoutInMilliseconds;
  }

  public void setUpgradeTimeoutInMilliseconds(String upgradeTimeoutInMilliseconds) {
    this.upgradeTimeoutInMilliseconds = upgradeTimeoutInMilliseconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringPolicy monitoringPolicy = (MonitoringPolicy) o;
    return Objects.equals(this.failureAction, monitoringPolicy.failureAction) &&
        Objects.equals(this.healthCheckRetryTimeoutInMilliseconds, monitoringPolicy.healthCheckRetryTimeoutInMilliseconds) &&
        Objects.equals(this.healthCheckStableDurationInMilliseconds, monitoringPolicy.healthCheckStableDurationInMilliseconds) &&
        Objects.equals(this.healthCheckWaitDurationInMilliseconds, monitoringPolicy.healthCheckWaitDurationInMilliseconds) &&
        Objects.equals(this.upgradeDomainTimeoutInMilliseconds, monitoringPolicy.upgradeDomainTimeoutInMilliseconds) &&
        Objects.equals(this.upgradeTimeoutInMilliseconds, monitoringPolicy.upgradeTimeoutInMilliseconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureAction, healthCheckRetryTimeoutInMilliseconds, healthCheckStableDurationInMilliseconds, healthCheckWaitDurationInMilliseconds, upgradeDomainTimeoutInMilliseconds, upgradeTimeoutInMilliseconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringPolicy {\n");
    sb.append("    failureAction: ").append(toIndentedString(failureAction)).append("\n");
    sb.append("    healthCheckRetryTimeoutInMilliseconds: ").append(toIndentedString(healthCheckRetryTimeoutInMilliseconds)).append("\n");
    sb.append("    healthCheckStableDurationInMilliseconds: ").append(toIndentedString(healthCheckStableDurationInMilliseconds)).append("\n");
    sb.append("    healthCheckWaitDurationInMilliseconds: ").append(toIndentedString(healthCheckWaitDurationInMilliseconds)).append("\n");
    sb.append("    upgradeDomainTimeoutInMilliseconds: ").append(toIndentedString(upgradeDomainTimeoutInMilliseconds)).append("\n");
    sb.append("    upgradeTimeoutInMilliseconds: ").append(toIndentedString(upgradeTimeoutInMilliseconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FailureAction");
    openapiFields.add("HealthCheckRetryTimeoutInMilliseconds");
    openapiFields.add("HealthCheckStableDurationInMilliseconds");
    openapiFields.add("HealthCheckWaitDurationInMilliseconds");
    openapiFields.add("UpgradeDomainTimeoutInMilliseconds");
    openapiFields.add("UpgradeTimeoutInMilliseconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringPolicy is not found in the empty JSON string", MonitoringPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FailureAction") != null && !jsonObj.get("FailureAction").isJsonNull()) && !jsonObj.get("FailureAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FailureAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FailureAction").toString()));
      }
      if ((jsonObj.get("HealthCheckRetryTimeoutInMilliseconds") != null && !jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckRetryTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckRetryTimeoutInMilliseconds").toString()));
      }
      if ((jsonObj.get("HealthCheckStableDurationInMilliseconds") != null && !jsonObj.get("HealthCheckStableDurationInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckStableDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckStableDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckStableDurationInMilliseconds").toString()));
      }
      if ((jsonObj.get("HealthCheckWaitDurationInMilliseconds") != null && !jsonObj.get("HealthCheckWaitDurationInMilliseconds").isJsonNull()) && !jsonObj.get("HealthCheckWaitDurationInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckWaitDurationInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckWaitDurationInMilliseconds").toString()));
      }
      if ((jsonObj.get("UpgradeDomainTimeoutInMilliseconds") != null && !jsonObj.get("UpgradeDomainTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeDomainTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomainTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomainTimeoutInMilliseconds").toString()));
      }
      if ((jsonObj.get("UpgradeTimeoutInMilliseconds") != null && !jsonObj.get("UpgradeTimeoutInMilliseconds").isJsonNull()) && !jsonObj.get("UpgradeTimeoutInMilliseconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeTimeoutInMilliseconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeTimeoutInMilliseconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringPolicy>() {
           @Override
           public void write(JsonWriter out, MonitoringPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringPolicy
   * @throws IOException if the JSON string is invalid with respect to MonitoringPolicy
   */
  public static MonitoringPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringPolicy.class);
  }

  /**
   * Convert an instance of MonitoringPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

