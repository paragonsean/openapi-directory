/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import ApplicationDescription from '../model/ApplicationDescription';
import ApplicationHealth from '../model/ApplicationHealth';
import ApplicationHealthReport from '../model/ApplicationHealthReport';
import ApplicationList from '../model/ApplicationList';
import ApplicationManifest from '../model/ApplicationManifest';
import ApplicationType from '../model/ApplicationType';
import ApplicationUpgrade from '../model/ApplicationUpgrade';
import ClusterHealth from '../model/ClusterHealth';
import ClusterHealthReport from '../model/ClusterHealthReport';
import ClusterLoadInformation from '../model/ClusterLoadInformation';
import ClusterUpgradeProgress from '../model/ClusterUpgradeProgress';
import CreateServiceDescription from '../model/CreateServiceDescription';
import CreateServiceGroupDescription from '../model/CreateServiceGroupDescription';
import DeployedApplication from '../model/DeployedApplication';
import DeployedApplicationHealth from '../model/DeployedApplicationHealth';
import DeployedApplicationHealthReport from '../model/DeployedApplicationHealthReport';
import DeployedCodePackage from '../model/DeployedCodePackage';
import DeployedReplica from '../model/DeployedReplica';
import DeployedReplicaDetail from '../model/DeployedReplicaDetail';
import DeployedServiceHealthReport from '../model/DeployedServiceHealthReport';
import DeployedServicePackage from '../model/DeployedServicePackage';
import DeployedServicePackageHealth from '../model/DeployedServicePackageHealth';
import DeployedServiceType from '../model/DeployedServiceType';
import DisableNode from '../model/DisableNode';
import ErrorModel from '../model/ErrorModel';
import Node from '../model/Node';
import NodeHealth from '../model/NodeHealth';
import NodeHealthReport from '../model/NodeHealthReport';
import NodeList from '../model/NodeList';
import NodeLoadInformation from '../model/NodeLoadInformation';
import Partition from '../model/Partition';
import PartitionHealth from '../model/PartitionHealth';
import PartitionHealthReport from '../model/PartitionHealthReport';
import PartitionList from '../model/PartitionList';
import PartitionLoadInformation from '../model/PartitionLoadInformation';
import RegisterApplicationType from '../model/RegisterApplicationType';
import RegisterClusterPackage from '../model/RegisterClusterPackage';
import Replica from '../model/Replica';
import ReplicaHealth from '../model/ReplicaHealth';
import ReplicaHealthReport from '../model/ReplicaHealthReport';
import ReplicaList from '../model/ReplicaList';
import ReplicaLoadInformation from '../model/ReplicaLoadInformation';
import ResolvedServicePartition from '../model/ResolvedServicePartition';
import ResumeApplicationUpgrade from '../model/ResumeApplicationUpgrade';
import ResumeClusterUpgrade from '../model/ResumeClusterUpgrade';
import Service from '../model/Service';
import ServiceDescription from '../model/ServiceDescription';
import ServiceDescriptionTemplate from '../model/ServiceDescriptionTemplate';
import ServiceGroupDescription from '../model/ServiceGroupDescription';
import ServiceGroupMember from '../model/ServiceGroupMember';
import ServiceHealth from '../model/ServiceHealth';
import ServiceHealthReport from '../model/ServiceHealthReport';
import ServiceList from '../model/ServiceList';
import ServiceManifest from '../model/ServiceManifest';
import ServiceType from '../model/ServiceType';
import StartApplicationUpgrade from '../model/StartApplicationUpgrade';
import StartClusterUpgrade from '../model/StartClusterUpgrade';
import UnregisterApplicationType from '../model/UnregisterApplicationType';
import UnregisterClusterPackage from '../model/UnregisterClusterPackage';
import UpdateApplicationUpgrade from '../model/UpdateApplicationUpgrade';
import UpdateClusterUpgrade from '../model/UpdateClusterUpgrade';
import UpdateServiceDescription from '../model/UpdateServiceDescription';
import UpdateServiceGroupDescription from '../model/UpdateServiceGroupDescription';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationHealthsGet operation.
     * @callback module:api/DefaultApi~applicationHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application healths
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {String} [deployedApplicationsHealthStateFilter] The filter of the deployed application health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationHealth}
     */
    applicationHealthsGet(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationHealthsGet");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'DeployedApplicationsHealthStateFilter': opts['deployedApplicationsHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationHealth;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationHealthsSend operation.
     * @callback module:api/DefaultApi~applicationHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send application health
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/ApplicationHealthReport} applicationHealthReport The report of the application health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationHealthsSend(applicationName, apiVersion, applicationHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = applicationHealthReport;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationHealthsSend");
      }
      // verify the required parameter 'applicationHealthReport' is set
      if (applicationHealthReport === undefined || applicationHealthReport === null) {
        throw new Error("Missing the required parameter 'applicationHealthReport' when calling applicationHealthsSend");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationManifestsGet operation.
     * @callback module:api/DefaultApi~applicationManifestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application manifests
     * @param {String} applicationTypeName The name of the application type
     * @param {String} applicationTypeVersion The version of the application type
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationManifestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationManifest}
     */
    applicationManifestsGet(applicationTypeName, applicationTypeVersion, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling applicationManifestsGet");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling applicationManifestsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationManifestsGet");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'ApplicationTypeVersion': applicationTypeVersion,
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationManifest;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationTypesGet operation.
     * @callback module:api/DefaultApi~applicationTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application types
     * @param {String} applicationTypeName The name of the application type
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationType>}
     */
    applicationTypesGet(applicationTypeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling applicationTypesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationTypesGet");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationType];
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationTypesList operation.
     * @callback module:api/DefaultApi~applicationTypesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List application types
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationType>}
     */
    applicationTypesList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationTypesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationType];
      return this.apiClient.callApi(
        '/ApplicationTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationTypesRegister operation.
     * @callback module:api/DefaultApi~applicationTypesRegisterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register application types
     * @param {String} apiVersion The version of the api
     * @param {module:model/RegisterApplicationType} registerApplicationType The type of the register application
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationTypesRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationTypesRegister(apiVersion, registerApplicationType, opts, callback) {
      opts = opts || {};
      let postBody = registerApplicationType;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationTypesRegister");
      }
      // verify the required parameter 'registerApplicationType' is set
      if (registerApplicationType === undefined || registerApplicationType === null) {
        throw new Error("Missing the required parameter 'registerApplicationType' when calling applicationTypesRegister");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ApplicationTypes/$/Provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationTypesUnregister operation.
     * @callback module:api/DefaultApi~applicationTypesUnregisterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister application types
     * @param {String} applicationTypeName The name of the application type
     * @param {String} apiVersion The version of the api
     * @param {module:model/UnregisterApplicationType} unregisterApplicationType The type of the unregister application
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationTypesUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationTypesUnregister(applicationTypeName, apiVersion, unregisterApplicationType, opts, callback) {
      opts = opts || {};
      let postBody = unregisterApplicationType;
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling applicationTypesUnregister");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationTypesUnregister");
      }
      // verify the required parameter 'unregisterApplicationType' is set
      if (unregisterApplicationType === undefined || unregisterApplicationType === null) {
        throw new Error("Missing the required parameter 'unregisterApplicationType' when calling applicationTypesUnregister");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/Unprovision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationUpgradeRollbacksStart operation.
     * @callback module:api/DefaultApi~applicationUpgradeRollbacksStartCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start application upgrade rollbacks
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationUpgradeRollbacksStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationUpgradeRollbacksStart(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationUpgradeRollbacksStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationUpgradeRollbacksStart");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/RollbackUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationUpgradesGet operation.
     * @callback module:api/DefaultApi~applicationUpgradesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationUpgrade} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application upgrades
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationUpgradesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationUpgrade}
     */
    applicationUpgradesGet(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationUpgradesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationUpgradesGet");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationUpgrade;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetUpgradeProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationUpgradesResume operation.
     * @callback module:api/DefaultApi~applicationUpgradesResumeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume application upgrades
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/ResumeApplicationUpgrade} resumeApplicationUpgrade The upgrade of the resume application
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationUpgradesResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationUpgradesResume(applicationName, apiVersion, resumeApplicationUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = resumeApplicationUpgrade;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationUpgradesResume");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationUpgradesResume");
      }
      // verify the required parameter 'resumeApplicationUpgrade' is set
      if (resumeApplicationUpgrade === undefined || resumeApplicationUpgrade === null) {
        throw new Error("Missing the required parameter 'resumeApplicationUpgrade' when calling applicationUpgradesResume");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/MoveNextUpgradeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationUpgradesStart operation.
     * @callback module:api/DefaultApi~applicationUpgradesStartCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start application upgrades
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/StartApplicationUpgrade} startApplicationUpgrade The description of the start application upgrade
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationUpgradesStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationUpgradesStart(applicationName, apiVersion, startApplicationUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = startApplicationUpgrade;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationUpgradesStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationUpgradesStart");
      }
      // verify the required parameter 'startApplicationUpgrade' is set
      if (startApplicationUpgrade === undefined || startApplicationUpgrade === null) {
        throw new Error("Missing the required parameter 'startApplicationUpgrade' when calling applicationUpgradesStart");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/Upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationUpgradesUpdate operation.
     * @callback module:api/DefaultApi~applicationUpgradesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update application upgrades
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/UpdateApplicationUpgrade} updateApplicationUpgrade The description of the update application upgrade
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationUpgradesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationUpgradesUpdate(applicationName, apiVersion, updateApplicationUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationUpgrade;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationUpgradesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationUpgradesUpdate");
      }
      // verify the required parameter 'updateApplicationUpgrade' is set
      if (updateApplicationUpgrade === undefined || updateApplicationUpgrade === null) {
        throw new Error("Missing the required parameter 'updateApplicationUpgrade' when calling applicationUpgradesUpdate");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/UpdateUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsCreate operation.
     * @callback module:api/DefaultApi~applicationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create applications
     * @param {String} apiVersion The version of the api
     * @param {module:model/ApplicationDescription} applicationDescription The description of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationsCreate(apiVersion, applicationDescription, opts, callback) {
      opts = opts || {};
      let postBody = applicationDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationsCreate");
      }
      // verify the required parameter 'applicationDescription' is set
      if (applicationDescription === undefined || applicationDescription === null) {
        throw new Error("Missing the required parameter 'applicationDescription' when calling applicationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/$/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsGet operation.
     * @callback module:api/DefaultApi~applicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get applications
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    applicationsGet(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationsGet");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/Applications/{applicationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsList operation.
     * @callback module:api/DefaultApi~applicationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List applications
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {String} [continuationToken] The token of the continuation
     * @param {module:api/DefaultApi~applicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationList}
     */
    applicationsList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion,
        'continuation-token': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationList;
      return this.apiClient.callApi(
        '/Applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsRemove operation.
     * @callback module:api/DefaultApi~applicationsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove applications
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRemove] The force remove flag to skip services check
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~applicationsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    applicationsRemove(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationsRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationsRemove");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'ForceRemove': opts['forceRemove'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/Delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterHealthsGet operation.
     * @callback module:api/DefaultApi~clusterHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster healths
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {String} [nodesHealthStateFilter] The filter of the nodes health state
     * @param {String} [applicationsHealthStateFilter] The filter of the applications health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterHealth}
     */
    clusterHealthsGet(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterHealthsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'NodesHealthStateFilter': opts['nodesHealthStateFilter'],
        'ApplicationsHealthStateFilter': opts['applicationsHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterHealth;
      return this.apiClient.callApi(
        '/$/GetClusterHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterHealthsSend operation.
     * @callback module:api/DefaultApi~clusterHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report cluster healths
     * @param {String} apiVersion The version of the api
     * @param {module:model/ClusterHealthReport} clusterHealthReport The report of the cluster health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterHealthsSend(apiVersion, clusterHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = clusterHealthReport;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterHealthsSend");
      }
      // verify the required parameter 'clusterHealthReport' is set
      if (clusterHealthReport === undefined || clusterHealthReport === null) {
        throw new Error("Missing the required parameter 'clusterHealthReport' when calling clusterHealthsSend");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/ReportClusterHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterLoadInformationsGet operation.
     * @callback module:api/DefaultApi~clusterLoadInformationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterLoadInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster load informations
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterLoadInformationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterLoadInformation}
     */
    clusterLoadInformationsGet(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterLoadInformationsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterLoadInformation;
      return this.apiClient.callApi(
        '/$/GetLoadInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterManifestsGet operation.
     * @callback module:api/DefaultApi~clusterManifestsGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster manifests
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterManifestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterManifestsGet(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterManifestsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/GetClusterManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterPackagesRegister operation.
     * @callback module:api/DefaultApi~clusterPackagesRegisterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register cluster packages
     * @param {String} apiVersion The version of the api
     * @param {module:model/RegisterClusterPackage} registerClusterPackage The package of the register cluster
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterPackagesRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterPackagesRegister(apiVersion, registerClusterPackage, opts, callback) {
      opts = opts || {};
      let postBody = registerClusterPackage;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterPackagesRegister");
      }
      // verify the required parameter 'registerClusterPackage' is set
      if (registerClusterPackage === undefined || registerClusterPackage === null) {
        throw new Error("Missing the required parameter 'registerClusterPackage' when calling clusterPackagesRegister");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/Provision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterPackagesUnregister operation.
     * @callback module:api/DefaultApi~clusterPackagesUnregisterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister cluster packages
     * @param {String} apiVersion The version of the api
     * @param {module:model/UnregisterClusterPackage} unregisterClusterPackage The package of the unregister cluster
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterPackagesUnregisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterPackagesUnregister(apiVersion, unregisterClusterPackage, opts, callback) {
      opts = opts || {};
      let postBody = unregisterClusterPackage;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterPackagesUnregister");
      }
      // verify the required parameter 'unregisterClusterPackage' is set
      if (unregisterClusterPackage === undefined || unregisterClusterPackage === null) {
        throw new Error("Missing the required parameter 'unregisterClusterPackage' when calling clusterPackagesUnregister");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/Unprovision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterUpgradesResume operation.
     * @callback module:api/DefaultApi~clusterUpgradesResumeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume cluster upgrades
     * @param {String} apiVersion The version of the api
     * @param {module:model/ResumeClusterUpgrade} resumeClusterUpgrade The upgrade of the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterUpgradesResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterUpgradesResume(apiVersion, resumeClusterUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = resumeClusterUpgrade;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterUpgradesResume");
      }
      // verify the required parameter 'resumeClusterUpgrade' is set
      if (resumeClusterUpgrade === undefined || resumeClusterUpgrade === null) {
        throw new Error("Missing the required parameter 'resumeClusterUpgrade' when calling clusterUpgradesResume");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/MoveToNextUpgradeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterUpgradesRollback operation.
     * @callback module:api/DefaultApi~clusterUpgradesRollbackCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback cluster upgrades
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterUpgradesRollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterUpgradesRollback(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterUpgradesRollback");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/RollbackUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterUpgradesStart operation.
     * @callback module:api/DefaultApi~clusterUpgradesStartCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start cluster upgrades
     * @param {String} apiVersion The version of the api
     * @param {module:model/StartClusterUpgrade} startClusterUpgrade The description of the start cluster upgrade
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterUpgradesStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterUpgradesStart(apiVersion, startClusterUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = startClusterUpgrade;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterUpgradesStart");
      }
      // verify the required parameter 'startClusterUpgrade' is set
      if (startClusterUpgrade === undefined || startClusterUpgrade === null) {
        throw new Error("Missing the required parameter 'startClusterUpgrade' when calling clusterUpgradesStart");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/Upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterUpgradesUpdate operation.
     * @callback module:api/DefaultApi~clusterUpgradesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update cluster upgrades
     * @param {String} apiVersion The version of the api
     * @param {module:model/UpdateClusterUpgrade} updateClusterUpgrade The description of the update cluster upgrade
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~clusterUpgradesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    clusterUpgradesUpdate(apiVersion, updateClusterUpgrade, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterUpgrade;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling clusterUpgradesUpdate");
      }
      // verify the required parameter 'updateClusterUpgrade' is set
      if (updateClusterUpgrade === undefined || updateClusterUpgrade === null) {
        throw new Error("Missing the required parameter 'updateClusterUpgrade' when calling clusterUpgradesUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/$/UpdateUpgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedApplicationHealthsGet operation.
     * @callback module:api/DefaultApi~deployedApplicationHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployedApplicationHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed application healths
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {String} [deployedServicePackagesHealthStateFilter] The filter of the deployed service packages health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedApplicationHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployedApplicationHealth}
     */
    deployedApplicationHealthsGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedApplicationHealthsGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedApplicationHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedApplicationHealthsGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'DeployedServicePackagesHealthStateFilter': opts['deployedServicePackagesHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployedApplicationHealth;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedApplicationHealthsSend operation.
     * @callback module:api/DefaultApi~deployedApplicationHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send deployed application health
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/DeployedApplicationHealthReport} deployedApplicationHealthReport The report of the deployed application health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedApplicationHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deployedApplicationHealthsSend(nodeName, applicationName, apiVersion, deployedApplicationHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = deployedApplicationHealthReport;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedApplicationHealthsSend");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedApplicationHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedApplicationHealthsSend");
      }
      // verify the required parameter 'deployedApplicationHealthReport' is set
      if (deployedApplicationHealthReport === undefined || deployedApplicationHealthReport === null) {
        throw new Error("Missing the required parameter 'deployedApplicationHealthReport' when calling deployedApplicationHealthsSend");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedApplicationsGet operation.
     * @callback module:api/DefaultApi~deployedApplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployedApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed applications
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedApplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployedApplication}
     */
    deployedApplicationsGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedApplicationsGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedApplicationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedApplicationsGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployedApplication;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedApplicationsList operation.
     * @callback module:api/DefaultApi~deployedApplicationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedApplication>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployed applications
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedApplicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedApplication>}
     */
    deployedApplicationsList(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedApplicationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedApplicationsList");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedApplication];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedCodePackagesGet operation.
     * @callback module:api/DefaultApi~deployedCodePackagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedCodePackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed code packages
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedCodePackagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedCodePackage>}
     */
    deployedCodePackagesGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedCodePackagesGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedCodePackagesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedCodePackagesGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedCodePackage];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetCodePackages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedReplicaDetailsGet operation.
     * @callback module:api/DefaultApi~deployedReplicaDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployedReplicaDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed replica details
     * @param {String} nodeName The name of the node
     * @param {String} partitionName The name of the partition
     * @param {String} replicaId The id of the replica
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedReplicaDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployedReplicaDetail}
     */
    deployedReplicaDetailsGet(nodeName, partitionName, replicaId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedReplicaDetailsGet");
      }
      // verify the required parameter 'partitionName' is set
      if (partitionName === undefined || partitionName === null) {
        throw new Error("Missing the required parameter 'partitionName' when calling deployedReplicaDetailsGet");
      }
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling deployedReplicaDetailsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedReplicaDetailsGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'partitionName': partitionName,
        'replicaId': replicaId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployedReplicaDetail;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetPartitions/{partitionName}/$/GetReplicas/{replicaId}/$/GetDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedReplicasGet operation.
     * @callback module:api/DefaultApi~deployedReplicasGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedReplica>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed replicas
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedReplicasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedReplica>}
     */
    deployedReplicasGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedReplicasGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedReplicasGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedReplicasGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedReplica];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetReplicas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedServicePackageHealthsGet operation.
     * @callback module:api/DefaultApi~deployedServicePackageHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployedServicePackageHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed service package healths
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} servicePackageName The name of the service package
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedServicePackageHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployedServicePackageHealth}
     */
    deployedServicePackageHealthsGet(nodeName, applicationName, servicePackageName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedServicePackageHealthsGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedServicePackageHealthsGet");
      }
      // verify the required parameter 'servicePackageName' is set
      if (servicePackageName === undefined || servicePackageName === null) {
        throw new Error("Missing the required parameter 'servicePackageName' when calling deployedServicePackageHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedServicePackageHealthsGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName,
        'servicePackageName': servicePackageName
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployedServicePackageHealth;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{servicePackageName}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedServicePackageHealthsSend operation.
     * @callback module:api/DefaultApi~deployedServicePackageHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send deployed service package health
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} serviceManifestName The name of the service manifest
     * @param {String} apiVersion The version of the api
     * @param {module:model/DeployedServiceHealthReport} deployedServicePackageHealthReport The report of the deployed service package health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedServicePackageHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deployedServicePackageHealthsSend(nodeName, applicationName, serviceManifestName, apiVersion, deployedServicePackageHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = deployedServicePackageHealthReport;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedServicePackageHealthsSend");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedServicePackageHealthsSend");
      }
      // verify the required parameter 'serviceManifestName' is set
      if (serviceManifestName === undefined || serviceManifestName === null) {
        throw new Error("Missing the required parameter 'serviceManifestName' when calling deployedServicePackageHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedServicePackageHealthsSend");
      }
      // verify the required parameter 'deployedServicePackageHealthReport' is set
      if (deployedServicePackageHealthReport === undefined || deployedServicePackageHealthReport === null) {
        throw new Error("Missing the required parameter 'deployedServicePackageHealthReport' when calling deployedServicePackageHealthsSend");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName,
        'serviceManifestName': serviceManifestName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{serviceManifestName}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedServicePackagesGet operation.
     * @callback module:api/DefaultApi~deployedServicePackagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedServicePackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed service packages
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedServicePackagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedServicePackage>}
     */
    deployedServicePackagesGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedServicePackagesGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedServicePackagesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedServicePackagesGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedServicePackage];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployedServiceTypesGet operation.
     * @callback module:api/DefaultApi~deployedServiceTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedServiceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get deployed service types
     * @param {String} nodeName The name of the node
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~deployedServiceTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedServiceType>}
     */
    deployedServiceTypesGet(nodeName, applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling deployedServiceTypesGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling deployedServiceTypesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deployedServiceTypesGet");
      }

      let pathParams = {
        'nodeName': nodeName,
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeployedServiceType];
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeHealthsGet operation.
     * @callback module:api/DefaultApi~nodeHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get node healths
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodeHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeHealth}
     */
    nodeHealthsGet(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodeHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodeHealthsGet");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeHealth;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeHealthsSend operation.
     * @callback module:api/DefaultApi~nodeHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send node health
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {module:model/NodeHealthReport} nodeHealthReport The report of the node health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodeHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    nodeHealthsSend(nodeName, apiVersion, nodeHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = nodeHealthReport;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodeHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodeHealthsSend");
      }
      // verify the required parameter 'nodeHealthReport' is set
      if (nodeHealthReport === undefined || nodeHealthReport === null) {
        throw new Error("Missing the required parameter 'nodeHealthReport' when calling nodeHealthsSend");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeLoadInformationsGet operation.
     * @callback module:api/DefaultApi~nodeLoadInformationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeLoadInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get node load informations
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodeLoadInformationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeLoadInformation}
     */
    nodeLoadInformationsGet(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodeLoadInformationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodeLoadInformationsGet");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeLoadInformation;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/GetLoadInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeStatesRemove operation.
     * @callback module:api/DefaultApi~nodeStatesRemoveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove node states
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodeStatesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    nodeStatesRemove(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodeStatesRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodeStatesRemove");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/RemoveNodeState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodesDisable operation.
     * @callback module:api/DefaultApi~nodesDisableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable nodes
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {module:model/DisableNode} disableNode The node
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodesDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    nodesDisable(nodeName, apiVersion, disableNode, opts, callback) {
      opts = opts || {};
      let postBody = disableNode;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodesDisable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodesDisable");
      }
      // verify the required parameter 'disableNode' is set
      if (disableNode === undefined || disableNode === null) {
        throw new Error("Missing the required parameter 'disableNode' when calling nodesDisable");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/Deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodesEnable operation.
     * @callback module:api/DefaultApi~nodesEnableCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable nodes
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodesEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    nodesEnable(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodesEnable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodesEnable");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Nodes/{nodeName}/$/Activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodesGet operation.
     * @callback module:api/DefaultApi~nodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get nodes
     * @param {String} nodeName The name of the node
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~nodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    nodesGet(nodeName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeName' is set
      if (nodeName === undefined || nodeName === null) {
        throw new Error("Missing the required parameter 'nodeName' when calling nodesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodesGet");
      }

      let pathParams = {
        'nodeName': nodeName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/Nodes/{nodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nodesList operation.
     * @callback module:api/DefaultApi~nodesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List nodes
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {String} [continuationToken] The token of the continuation
     * @param {module:api/DefaultApi~nodesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeList}
     */
    nodesList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling nodesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion,
        'continuation-token': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeList;
      return this.apiClient.callApi(
        '/Nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionHealthsGet operation.
     * @callback module:api/DefaultApi~partitionHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get partition healths
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {String} [replicasHealthStateFilter] The filter of the replicas health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionHealth}
     */
    partitionHealthsGet(partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionHealthsGet");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'ReplicasHealthStateFilter': opts['replicasHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionHealth;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionHealthsSend operation.
     * @callback module:api/DefaultApi~partitionHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send partition health
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {module:model/PartitionHealthReport} partitionHealthReport The report of the partition health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    partitionHealthsSend(partitionId, apiVersion, partitionHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = partitionHealthReport;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionHealthsSend");
      }
      // verify the required parameter 'partitionHealthReport' is set
      if (partitionHealthReport === undefined || partitionHealthReport === null) {
        throw new Error("Missing the required parameter 'partitionHealthReport' when calling partitionHealthsSend");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionListsRepair operation.
     * @callback module:api/DefaultApi~partitionListsRepairCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Repair partition lists
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionListsRepairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    partitionListsRepair(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling partitionListsRepair");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionListsRepair");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/GetPartitions/$/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionLoadInformationsGet operation.
     * @callback module:api/DefaultApi~partitionLoadInformationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionLoadInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get partition load informations
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionLoadInformationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionLoadInformation}
     */
    partitionLoadInformationsGet(partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionLoadInformationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionLoadInformationsGet");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionLoadInformation;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetLoadInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionLoadsReset operation.
     * @callback module:api/DefaultApi~partitionLoadsResetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset partition loads
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionLoadsResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    partitionLoadsReset(partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionLoadsReset");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionLoadsReset");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/ResetLoad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionsGet operation.
     * @callback module:api/DefaultApi~partitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Partition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get partitions
     * @param {String} serviceName The name of the service
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Partition}
     */
    partitionsGet(serviceName, partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling partitionsGet");
      }
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionsGet");
      }

      let pathParams = {
        'serviceName': serviceName,
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Partition;
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/GetPartitions/{partitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionsList operation.
     * @callback module:api/DefaultApi~partitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List partitions
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartitionList}
     */
    partitionsList(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling partitionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionsList");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PartitionList;
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/GetPartitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partitionsRepair operation.
     * @callback module:api/DefaultApi~partitionsRepairCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Repair partitions
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~partitionsRepairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    partitionsRepair(partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling partitionsRepair");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling partitionsRepair");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/Recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicaHealthsGet operation.
     * @callback module:api/DefaultApi~replicaHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicaHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get replica healths
     * @param {String} partitionId The id of the partition
     * @param {String} replicaId The id of the replica
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {String} [eventsHealthStateFilter] The filter of the events health state
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~replicaHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicaHealth}
     */
    replicaHealthsGet(partitionId, replicaId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling replicaHealthsGet");
      }
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicaHealthsGet");
      }

      let pathParams = {
        'partitionId': partitionId,
        'replicaId': replicaId
      };
      let queryParams = {
        'EventsHealthStateFilter': opts['eventsHealthStateFilter'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicaHealth;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicaHealthsSend operation.
     * @callback module:api/DefaultApi~replicaHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send replica healths
     * @param {String} partitionId The id of the partition
     * @param {String} replicaId The id of the replica
     * @param {String} apiVersion The version of the api
     * @param {module:model/ReplicaHealthReport} replicaHealthReport The report of the replica health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~replicaHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    replicaHealthsSend(partitionId, replicaId, apiVersion, replicaHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = replicaHealthReport;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling replicaHealthsSend");
      }
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicaHealthsSend");
      }
      // verify the required parameter 'replicaHealthReport' is set
      if (replicaHealthReport === undefined || replicaHealthReport === null) {
        throw new Error("Missing the required parameter 'replicaHealthReport' when calling replicaHealthsSend");
      }

      let pathParams = {
        'partitionId': partitionId,
        'replicaId': replicaId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicaLoadInformationsGet operation.
     * @callback module:api/DefaultApi~replicaLoadInformationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicaLoadInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get replica load informations
     * @param {String} partitionId The id of the partition
     * @param {String} replicaId The id of the replica
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~replicaLoadInformationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicaLoadInformation}
     */
    replicaLoadInformationsGet(partitionId, replicaId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling replicaLoadInformationsGet");
      }
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaLoadInformationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicaLoadInformationsGet");
      }

      let pathParams = {
        'partitionId': partitionId,
        'replicaId': replicaId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicaLoadInformation;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetLoadInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicasGet operation.
     * @callback module:api/DefaultApi~replicasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Replica} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get replicas
     * @param {String} partitionId The id of the partition
     * @param {String} replicaId The id of the replica
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~replicasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Replica}
     */
    replicasGet(partitionId, replicaId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling replicasGet");
      }
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicasGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicasGet");
      }

      let pathParams = {
        'partitionId': partitionId,
        'replicaId': replicaId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetReplicas/{replicaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicasList operation.
     * @callback module:api/DefaultApi~replicasListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List replicas
     * @param {String} partitionId The id of the partition
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~replicasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicaList}
     */
    replicasList(partitionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partitionId' is set
      if (partitionId === undefined || partitionId === null) {
        throw new Error("Missing the required parameter 'partitionId' when calling replicasList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicasList");
      }

      let pathParams = {
        'partitionId': partitionId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicaList;
      return this.apiClient.callApi(
        '/Partitions/{partitionId}/$/GetReplicas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceDescriptionsGet operation.
     * @callback module:api/DefaultApi~serviceDescriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service descriptions
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceDescriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDescription}
     */
    serviceDescriptionsGet(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceDescriptionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceDescriptionsGet");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceDescription;
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/GetDescription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceFromTemplatesCreate operation.
     * @callback module:api/DefaultApi~serviceFromTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create service from templates
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/ServiceDescriptionTemplate} serviceDescriptionTemplate The template of the service description
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceFromTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceFromTemplatesCreate(applicationName, apiVersion, serviceDescriptionTemplate, opts, callback) {
      opts = opts || {};
      let postBody = serviceDescriptionTemplate;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceFromTemplatesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceFromTemplatesCreate");
      }
      // verify the required parameter 'serviceDescriptionTemplate' is set
      if (serviceDescriptionTemplate === undefined || serviceDescriptionTemplate === null) {
        throw new Error("Missing the required parameter 'serviceDescriptionTemplate' when calling serviceFromTemplatesCreate");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/$/CreateFromTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupDescriptionsGet operation.
     * @callback module:api/DefaultApi~serviceGroupDescriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceGroupDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service group descriptions
     * @param {String} applicationName The name of the application
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupDescriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceGroupDescription}
     */
    serviceGroupDescriptionsGet(applicationName, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupDescriptionsGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceGroupDescriptionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupDescriptionsGet");
      }

      let pathParams = {
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceGroupDescription;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupDescription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupFromTemplatesCreate operation.
     * @callback module:api/DefaultApi~serviceGroupFromTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create service group from templates
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/ServiceDescriptionTemplate} serviceDescriptionTemplate The template of the service description
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupFromTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceGroupFromTemplatesCreate(applicationName, apiVersion, serviceDescriptionTemplate, opts, callback) {
      opts = opts || {};
      let postBody = serviceDescriptionTemplate;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupFromTemplatesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupFromTemplatesCreate");
      }
      // verify the required parameter 'serviceDescriptionTemplate' is set
      if (serviceDescriptionTemplate === undefined || serviceDescriptionTemplate === null) {
        throw new Error("Missing the required parameter 'serviceDescriptionTemplate' when calling serviceGroupFromTemplatesCreate");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServiceGroups/$/CreateServiceGroupFromTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupMembersGet operation.
     * @callback module:api/DefaultApi~serviceGroupMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceGroupMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service group members
     * @param {String} applicationName The name of the application
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceGroupMember}
     */
    serviceGroupMembersGet(applicationName, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupMembersGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceGroupMembersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupMembersGet");
      }

      let pathParams = {
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceGroupMember;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupMembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupsCreate operation.
     * @callback module:api/DefaultApi~serviceGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create service groups
     * @param {String} applicationName The name of the service group
     * @param {String} apiVersion The version of the api
     * @param {module:model/CreateServiceGroupDescription} createServiceGroupDescription The description of the service group
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceGroupsCreate(applicationName, apiVersion, createServiceGroupDescription, opts, callback) {
      opts = opts || {};
      let postBody = createServiceGroupDescription;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupsCreate");
      }
      // verify the required parameter 'createServiceGroupDescription' is set
      if (createServiceGroupDescription === undefined || createServiceGroupDescription === null) {
        throw new Error("Missing the required parameter 'createServiceGroupDescription' when calling serviceGroupsCreate");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/$/CreateServiceGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupsRemove operation.
     * @callback module:api/DefaultApi~serviceGroupsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove service groups
     * @param {String} applicationName The name of the application
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceGroupsRemove(applicationName, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupsRemove");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceGroupsRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupsRemove");
      }

      let pathParams = {
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServiceGroups/{serviceName}/$/Delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceGroupsUpdate operation.
     * @callback module:api/DefaultApi~serviceGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update service groups
     * @param {String} applicationName The name of the application
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {module:model/UpdateServiceGroupDescription} updateServiceGroupDescription The description of the service group update
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceGroupsUpdate(applicationName, serviceName, apiVersion, updateServiceGroupDescription, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceGroupDescription;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling serviceGroupsUpdate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceGroupsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGroupsUpdate");
      }
      // verify the required parameter 'updateServiceGroupDescription' is set
      if (updateServiceGroupDescription === undefined || updateServiceGroupDescription === null) {
        throw new Error("Missing the required parameter 'updateServiceGroupDescription' when calling serviceGroupsUpdate");
      }

      let pathParams = {
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/{serviceName}/$/UpdateServiceGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceHealthsGet operation.
     * @callback module:api/DefaultApi~serviceHealthsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service healths
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceHealthsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceHealth}
     */
    serviceHealthsGet(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceHealthsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceHealthsGet");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceHealth;
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/GetHealth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceHealthsSend operation.
     * @callback module:api/DefaultApi~serviceHealthsSendCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send service healths
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {module:model/ServiceHealthReport} serviceHealthReport The report of the service health
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceHealthsSendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    serviceHealthsSend(serviceName, apiVersion, serviceHealthReport, opts, callback) {
      opts = opts || {};
      let postBody = serviceHealthReport;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceHealthsSend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceHealthsSend");
      }
      // verify the required parameter 'serviceHealthReport' is set
      if (serviceHealthReport === undefined || serviceHealthReport === null) {
        throw new Error("Missing the required parameter 'serviceHealthReport' when calling serviceHealthsSend");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/ReportHealth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceManifestsGet operation.
     * @callback module:api/DefaultApi~serviceManifestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceManifest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service manifests
     * @param {String} applicationTypeName The name of the application type
     * @param {String} applicationTypeVersion The version of the application type
     * @param {String} serviceManifestName The name of the service manifest
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceManifestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceManifest}
     */
    serviceManifestsGet(applicationTypeName, applicationTypeVersion, serviceManifestName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling serviceManifestsGet");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling serviceManifestsGet");
      }
      // verify the required parameter 'serviceManifestName' is set
      if (serviceManifestName === undefined || serviceManifestName === null) {
        throw new Error("Missing the required parameter 'serviceManifestName' when calling serviceManifestsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceManifestsGet");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'ApplicationTypeVersion': applicationTypeVersion,
        'ServiceManifestName': serviceManifestName,
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceManifest;
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceTypesGet operation.
     * @callback module:api/DefaultApi~serviceTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service types
     * @param {String} applicationTypeName The name of the application type
     * @param {String} applicationTypeVersion The version of the application type
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~serviceTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceType>}
     */
    serviceTypesGet(applicationTypeName, applicationTypeVersion, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationTypeName' is set
      if (applicationTypeName === undefined || applicationTypeName === null) {
        throw new Error("Missing the required parameter 'applicationTypeName' when calling serviceTypesGet");
      }
      // verify the required parameter 'applicationTypeVersion' is set
      if (applicationTypeVersion === undefined || applicationTypeVersion === null) {
        throw new Error("Missing the required parameter 'applicationTypeVersion' when calling serviceTypesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceTypesGet");
      }

      let pathParams = {
        'applicationTypeName': applicationTypeName
      };
      let queryParams = {
        'ApplicationTypeVersion': applicationTypeVersion,
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceType];
      return this.apiClient.callApi(
        '/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCreate operation.
     * @callback module:api/DefaultApi~servicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create services
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {module:model/CreateServiceDescription} createServiceDescription The description of the service
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    servicesCreate(applicationName, apiVersion, createServiceDescription, opts, callback) {
      opts = opts || {};
      let postBody = createServiceDescription;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCreate");
      }
      // verify the required parameter 'createServiceDescription' is set
      if (createServiceDescription === undefined || createServiceDescription === null) {
        throw new Error("Missing the required parameter 'createServiceDescription' when calling servicesCreate");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/$/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGet operation.
     * @callback module:api/DefaultApi~servicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get services
     * @param {String} applicationName The name of the application
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    servicesGet(applicationName, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGet");
      }

      let pathParams = {
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices/{serviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesList operation.
     * @callback module:api/DefaultApi~servicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List services
     * @param {String} applicationName The name of the application
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceList}
     */
    servicesList(applicationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesList");
      }

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceList;
      return this.apiClient.callApi(
        '/Applications/{applicationName}/$/GetServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesRemove operation.
     * @callback module:api/DefaultApi~servicesRemoveCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove services
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    servicesRemove(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesRemove");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/Delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesResolve operation.
     * @callback module:api/DefaultApi~servicesResolveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResolvedServicePartition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve services
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [partitionKeyType] The type of the partition key
     * @param {String} [partitionKeyValue] The value of the partition key
     * @param {String} [previousRspVersion] The version of the previous rsp
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesResolveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResolvedServicePartition}
     */
    servicesResolve(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesResolve");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesResolve");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'PartitionKeyType': opts['partitionKeyType'],
        'PartitionKeyValue': opts['partitionKeyValue'],
        'PreviousRspVersion': opts['previousRspVersion'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResolvedServicePartition;
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/ResolvePartition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesUpdate operation.
     * @callback module:api/DefaultApi~servicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update services
     * @param {String} serviceName The name of the service
     * @param {String} apiVersion The version of the api
     * @param {module:model/UpdateServiceDescription} updateServiceDescription The description of the service update
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~servicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    servicesUpdate(serviceName, apiVersion, updateServiceDescription, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceDescription;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesUpdate");
      }
      // verify the required parameter 'updateServiceDescription' is set
      if (updateServiceDescription === undefined || updateServiceDescription === null) {
        throw new Error("Missing the required parameter 'updateServiceDescription' when calling servicesUpdate");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Services/{serviceName}/$/Update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeProgressesGet operation.
     * @callback module:api/DefaultApi~upgradeProgressesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterUpgradeProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get upgrade progresses
     * @param {String} apiVersion The version of the api
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout] The timeout in seconds
     * @param {module:api/DefaultApi~upgradeProgressesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterUpgradeProgress}
     */
    upgradeProgressesGet(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling upgradeProgressesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterUpgradeProgress;
      return this.apiClient.callApi(
        '/$/GetUpgradeProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
