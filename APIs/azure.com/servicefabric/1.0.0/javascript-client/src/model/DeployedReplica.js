/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReplicaRole from './ReplicaRole';
import ReplicaStatus from './ReplicaStatus';
import ServiceKind from './ServiceKind';

/**
 * The DeployedReplica model module.
 * @module model/DeployedReplica
 * @version 1.0.0
 */
class DeployedReplica {
    /**
     * Constructs a new <code>DeployedReplica</code>.
     * The replica of the deployed
     * @alias module:model/DeployedReplica
     */
    constructor() { 
        
        DeployedReplica.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedReplica</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedReplica} obj Optional instance to populate.
     * @return {module:model/DeployedReplica} The populated <code>DeployedReplica</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedReplica();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], 'String');
            }
            if (data.hasOwnProperty('CodePackageName')) {
                obj['CodePackageName'] = ApiClient.convertToType(data['CodePackageName'], 'String');
            }
            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('PartitionId')) {
                obj['PartitionId'] = ApiClient.convertToType(data['PartitionId'], 'String');
            }
            if (data.hasOwnProperty('ReplicaId')) {
                obj['ReplicaId'] = ApiClient.convertToType(data['ReplicaId'], 'String');
            }
            if (data.hasOwnProperty('ReplicaRole')) {
                obj['ReplicaRole'] = ReplicaRole.constructFromObject(data['ReplicaRole']);
            }
            if (data.hasOwnProperty('ReplicaStatus')) {
                obj['ReplicaStatus'] = ReplicaStatus.constructFromObject(data['ReplicaStatus']);
            }
            if (data.hasOwnProperty('ServiceKind')) {
                obj['ServiceKind'] = ServiceKind.constructFromObject(data['ServiceKind']);
            }
            if (data.hasOwnProperty('ServiceManifestName')) {
                obj['ServiceManifestName'] = ApiClient.convertToType(data['ServiceManifestName'], 'String');
            }
            if (data.hasOwnProperty('ServiceManifestVersion')) {
                obj['ServiceManifestVersion'] = ApiClient.convertToType(data['ServiceManifestVersion'], 'String');
            }
            if (data.hasOwnProperty('ServiceName')) {
                obj['ServiceName'] = ApiClient.convertToType(data['ServiceName'], 'String');
            }
            if (data.hasOwnProperty('ServiceTypeName')) {
                obj['ServiceTypeName'] = ApiClient.convertToType(data['ServiceTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedReplica</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedReplica</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address'] && !(typeof data['Address'] === 'string' || data['Address'] instanceof String)) {
            throw new Error("Expected the field `Address` to be a primitive type in the JSON string but got " + data['Address']);
        }
        // ensure the json data is a string
        if (data['CodePackageName'] && !(typeof data['CodePackageName'] === 'string' || data['CodePackageName'] instanceof String)) {
            throw new Error("Expected the field `CodePackageName` to be a primitive type in the JSON string but got " + data['CodePackageName']);
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }
        // ensure the json data is a string
        if (data['PartitionId'] && !(typeof data['PartitionId'] === 'string' || data['PartitionId'] instanceof String)) {
            throw new Error("Expected the field `PartitionId` to be a primitive type in the JSON string but got " + data['PartitionId']);
        }
        // ensure the json data is a string
        if (data['ReplicaId'] && !(typeof data['ReplicaId'] === 'string' || data['ReplicaId'] instanceof String)) {
            throw new Error("Expected the field `ReplicaId` to be a primitive type in the JSON string but got " + data['ReplicaId']);
        }
        // ensure the json data is a string
        if (data['ServiceManifestName'] && !(typeof data['ServiceManifestName'] === 'string' || data['ServiceManifestName'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestName` to be a primitive type in the JSON string but got " + data['ServiceManifestName']);
        }
        // ensure the json data is a string
        if (data['ServiceManifestVersion'] && !(typeof data['ServiceManifestVersion'] === 'string' || data['ServiceManifestVersion'] instanceof String)) {
            throw new Error("Expected the field `ServiceManifestVersion` to be a primitive type in the JSON string but got " + data['ServiceManifestVersion']);
        }
        // ensure the json data is a string
        if (data['ServiceName'] && !(typeof data['ServiceName'] === 'string' || data['ServiceName'] instanceof String)) {
            throw new Error("Expected the field `ServiceName` to be a primitive type in the JSON string but got " + data['ServiceName']);
        }
        // ensure the json data is a string
        if (data['ServiceTypeName'] && !(typeof data['ServiceTypeName'] === 'string' || data['ServiceTypeName'] instanceof String)) {
            throw new Error("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got " + data['ServiceTypeName']);
        }

        return true;
    }


}



/**
 * @member {String} Address
 */
DeployedReplica.prototype['Address'] = undefined;

/**
 * @member {String} CodePackageName
 */
DeployedReplica.prototype['CodePackageName'] = undefined;

/**
 * @member {String} InstanceId
 */
DeployedReplica.prototype['InstanceId'] = undefined;

/**
 * @member {String} PartitionId
 */
DeployedReplica.prototype['PartitionId'] = undefined;

/**
 * @member {String} ReplicaId
 */
DeployedReplica.prototype['ReplicaId'] = undefined;

/**
 * @member {module:model/ReplicaRole} ReplicaRole
 */
DeployedReplica.prototype['ReplicaRole'] = undefined;

/**
 * @member {module:model/ReplicaStatus} ReplicaStatus
 */
DeployedReplica.prototype['ReplicaStatus'] = undefined;

/**
 * @member {module:model/ServiceKind} ServiceKind
 */
DeployedReplica.prototype['ServiceKind'] = undefined;

/**
 * @member {String} ServiceManifestName
 */
DeployedReplica.prototype['ServiceManifestName'] = undefined;

/**
 * @member {String} ServiceManifestVersion
 */
DeployedReplica.prototype['ServiceManifestVersion'] = undefined;

/**
 * @member {String} ServiceName
 */
DeployedReplica.prototype['ServiceName'] = undefined;

/**
 * @member {String} ServiceTypeName
 */
DeployedReplica.prototype['ServiceTypeName'] = undefined;






export default DeployedReplica;

