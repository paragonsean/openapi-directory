/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionDescription from './PartitionDescription';
import ServiceCorrelationDescription from './ServiceCorrelationDescription';
import ServiceKind from './ServiceKind';

/**
 * The ServiceDescription model module.
 * @module model/ServiceDescription
 * @version 1.0.0
 */
class ServiceDescription {
    /**
     * Constructs a new <code>ServiceDescription</code>.
     * The description of the service
     * @alias module:model/ServiceDescription
     * @param serviceKind {module:model/ServiceKind} 
     */
    constructor(serviceKind) { 
        
        ServiceDescription.initialize(this, serviceKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceKind) { 
        obj['ServiceKind'] = serviceKind;
    }

    /**
     * Constructs a <code>ServiceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceDescription} obj Optional instance to populate.
     * @return {module:model/ServiceDescription} The populated <code>ServiceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceDescription();

            if (data.hasOwnProperty('ApplicationName')) {
                obj['ApplicationName'] = ApiClient.convertToType(data['ApplicationName'], 'String');
            }
            if (data.hasOwnProperty('CorrelationScheme')) {
                obj['CorrelationScheme'] = ServiceCorrelationDescription.constructFromObject(data['CorrelationScheme']);
            }
            if (data.hasOwnProperty('Flags')) {
                obj['Flags'] = ApiClient.convertToType(data['Flags'], 'Number');
            }
            if (data.hasOwnProperty('PartitionDescription')) {
                obj['PartitionDescription'] = PartitionDescription.constructFromObject(data['PartitionDescription']);
            }
            if (data.hasOwnProperty('PlacementConstraints')) {
                obj['PlacementConstraints'] = ApiClient.convertToType(data['PlacementConstraints'], 'String');
            }
            if (data.hasOwnProperty('ServiceKind')) {
                obj['ServiceKind'] = ServiceKind.constructFromObject(data['ServiceKind']);
            }
            if (data.hasOwnProperty('ServiceLoadMetrics')) {
                obj['ServiceLoadMetrics'] = ServiceCorrelationDescription.constructFromObject(data['ServiceLoadMetrics']);
            }
            if (data.hasOwnProperty('ServiceName')) {
                obj['ServiceName'] = ApiClient.convertToType(data['ServiceName'], 'String');
            }
            if (data.hasOwnProperty('ServicePlacementPolicies')) {
                obj['ServicePlacementPolicies'] = ServiceCorrelationDescription.constructFromObject(data['ServicePlacementPolicies']);
            }
            if (data.hasOwnProperty('ServiceTypeName')) {
                obj['ServiceTypeName'] = ApiClient.convertToType(data['ServiceTypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ApplicationName'] && !(typeof data['ApplicationName'] === 'string' || data['ApplicationName'] instanceof String)) {
            throw new Error("Expected the field `ApplicationName` to be a primitive type in the JSON string but got " + data['ApplicationName']);
        }
        // validate the optional field `CorrelationScheme`
        if (data['CorrelationScheme']) { // data not null
          ServiceCorrelationDescription.validateJSON(data['CorrelationScheme']);
        }
        // validate the optional field `PartitionDescription`
        if (data['PartitionDescription']) { // data not null
          PartitionDescription.validateJSON(data['PartitionDescription']);
        }
        // ensure the json data is a string
        if (data['PlacementConstraints'] && !(typeof data['PlacementConstraints'] === 'string' || data['PlacementConstraints'] instanceof String)) {
            throw new Error("Expected the field `PlacementConstraints` to be a primitive type in the JSON string but got " + data['PlacementConstraints']);
        }
        // validate the optional field `ServiceLoadMetrics`
        if (data['ServiceLoadMetrics']) { // data not null
          ServiceCorrelationDescription.validateJSON(data['ServiceLoadMetrics']);
        }
        // ensure the json data is a string
        if (data['ServiceName'] && !(typeof data['ServiceName'] === 'string' || data['ServiceName'] instanceof String)) {
            throw new Error("Expected the field `ServiceName` to be a primitive type in the JSON string but got " + data['ServiceName']);
        }
        // validate the optional field `ServicePlacementPolicies`
        if (data['ServicePlacementPolicies']) { // data not null
          ServiceCorrelationDescription.validateJSON(data['ServicePlacementPolicies']);
        }
        // ensure the json data is a string
        if (data['ServiceTypeName'] && !(typeof data['ServiceTypeName'] === 'string' || data['ServiceTypeName'] instanceof String)) {
            throw new Error("Expected the field `ServiceTypeName` to be a primitive type in the JSON string but got " + data['ServiceTypeName']);
        }

        return true;
    }


}

ServiceDescription.RequiredProperties = ["ServiceKind"];

/**
 * @member {String} ApplicationName
 */
ServiceDescription.prototype['ApplicationName'] = undefined;

/**
 * @member {module:model/ServiceCorrelationDescription} CorrelationScheme
 */
ServiceDescription.prototype['CorrelationScheme'] = undefined;

/**
 * @member {Number} Flags
 */
ServiceDescription.prototype['Flags'] = undefined;

/**
 * @member {module:model/PartitionDescription} PartitionDescription
 */
ServiceDescription.prototype['PartitionDescription'] = undefined;

/**
 * @member {String} PlacementConstraints
 */
ServiceDescription.prototype['PlacementConstraints'] = undefined;

/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ServiceDescription.prototype['ServiceKind'] = undefined;

/**
 * @member {module:model/ServiceCorrelationDescription} ServiceLoadMetrics
 */
ServiceDescription.prototype['ServiceLoadMetrics'] = undefined;

/**
 * @member {String} ServiceName
 */
ServiceDescription.prototype['ServiceName'] = undefined;

/**
 * @member {module:model/ServiceCorrelationDescription} ServicePlacementPolicies
 */
ServiceDescription.prototype['ServicePlacementPolicies'] = undefined;

/**
 * @member {String} ServiceTypeName
 */
ServiceDescription.prototype['ServiceTypeName'] = undefined;






export default ServiceDescription;

