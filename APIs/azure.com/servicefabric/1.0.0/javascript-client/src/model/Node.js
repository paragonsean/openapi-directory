/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterHealthNodeHealthStatesInnerId from './ClusterHealthNodeHealthStatesInnerId';
import HealthState from './HealthState';
import NodeNodeDeactivationInfo from './NodeNodeDeactivationInfo';

/**
 * The Node model module.
 * @module model/Node
 * @version 1.0.0
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * The node
     * @alias module:model/Node
     */
    constructor() { 
        
        Node.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Node();

            if (data.hasOwnProperty('CodeVersion')) {
                obj['CodeVersion'] = ApiClient.convertToType(data['CodeVersion'], 'String');
            }
            if (data.hasOwnProperty('ConfigVersion')) {
                obj['ConfigVersion'] = ApiClient.convertToType(data['ConfigVersion'], 'String');
            }
            if (data.hasOwnProperty('FaultDomain')) {
                obj['FaultDomain'] = ApiClient.convertToType(data['FaultDomain'], 'String');
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ClusterHealthNodeHealthStatesInnerId.constructFromObject(data['Id']);
            }
            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('IpAddressOrFQDN')) {
                obj['IpAddressOrFQDN'] = ApiClient.convertToType(data['IpAddressOrFQDN'], 'String');
            }
            if (data.hasOwnProperty('IsSeedNode')) {
                obj['IsSeedNode'] = ApiClient.convertToType(data['IsSeedNode'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NodeDeactivationInfo')) {
                obj['NodeDeactivationInfo'] = NodeNodeDeactivationInfo.constructFromObject(data['NodeDeactivationInfo']);
            }
            if (data.hasOwnProperty('NodeStatus')) {
                obj['NodeStatus'] = ApiClient.convertToType(data['NodeStatus'], 'String');
            }
            if (data.hasOwnProperty('NodeUpTimeInSeconds')) {
                obj['NodeUpTimeInSeconds'] = ApiClient.convertToType(data['NodeUpTimeInSeconds'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('UpgradeDomain')) {
                obj['UpgradeDomain'] = ApiClient.convertToType(data['UpgradeDomain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Node</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Node</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CodeVersion'] && !(typeof data['CodeVersion'] === 'string' || data['CodeVersion'] instanceof String)) {
            throw new Error("Expected the field `CodeVersion` to be a primitive type in the JSON string but got " + data['CodeVersion']);
        }
        // ensure the json data is a string
        if (data['ConfigVersion'] && !(typeof data['ConfigVersion'] === 'string' || data['ConfigVersion'] instanceof String)) {
            throw new Error("Expected the field `ConfigVersion` to be a primitive type in the JSON string but got " + data['ConfigVersion']);
        }
        // ensure the json data is a string
        if (data['FaultDomain'] && !(typeof data['FaultDomain'] === 'string' || data['FaultDomain'] instanceof String)) {
            throw new Error("Expected the field `FaultDomain` to be a primitive type in the JSON string but got " + data['FaultDomain']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          ClusterHealthNodeHealthStatesInnerId.validateJSON(data['Id']);
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }
        // ensure the json data is a string
        if (data['IpAddressOrFQDN'] && !(typeof data['IpAddressOrFQDN'] === 'string' || data['IpAddressOrFQDN'] instanceof String)) {
            throw new Error("Expected the field `IpAddressOrFQDN` to be a primitive type in the JSON string but got " + data['IpAddressOrFQDN']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `NodeDeactivationInfo`
        if (data['NodeDeactivationInfo']) { // data not null
          NodeNodeDeactivationInfo.validateJSON(data['NodeDeactivationInfo']);
        }
        // ensure the json data is a string
        if (data['NodeStatus'] && !(typeof data['NodeStatus'] === 'string' || data['NodeStatus'] instanceof String)) {
            throw new Error("Expected the field `NodeStatus` to be a primitive type in the JSON string but got " + data['NodeStatus']);
        }
        // ensure the json data is a string
        if (data['NodeUpTimeInSeconds'] && !(typeof data['NodeUpTimeInSeconds'] === 'string' || data['NodeUpTimeInSeconds'] instanceof String)) {
            throw new Error("Expected the field `NodeUpTimeInSeconds` to be a primitive type in the JSON string but got " + data['NodeUpTimeInSeconds']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['UpgradeDomain'] && !(typeof data['UpgradeDomain'] === 'string' || data['UpgradeDomain'] instanceof String)) {
            throw new Error("Expected the field `UpgradeDomain` to be a primitive type in the JSON string but got " + data['UpgradeDomain']);
        }

        return true;
    }


}



/**
 * @member {String} CodeVersion
 */
Node.prototype['CodeVersion'] = undefined;

/**
 * @member {String} ConfigVersion
 */
Node.prototype['ConfigVersion'] = undefined;

/**
 * @member {String} FaultDomain
 */
Node.prototype['FaultDomain'] = undefined;

/**
 * @member {module:model/HealthState} HealthState
 */
Node.prototype['HealthState'] = undefined;

/**
 * @member {module:model/ClusterHealthNodeHealthStatesInnerId} Id
 */
Node.prototype['Id'] = undefined;

/**
 * @member {String} InstanceId
 */
Node.prototype['InstanceId'] = undefined;

/**
 * @member {String} IpAddressOrFQDN
 */
Node.prototype['IpAddressOrFQDN'] = undefined;

/**
 * @member {Boolean} IsSeedNode
 */
Node.prototype['IsSeedNode'] = undefined;

/**
 * @member {String} Name
 */
Node.prototype['Name'] = undefined;

/**
 * @member {module:model/NodeNodeDeactivationInfo} NodeDeactivationInfo
 */
Node.prototype['NodeDeactivationInfo'] = undefined;

/**
 * @member {module:model/Node.NodeStatusEnum} NodeStatus
 */
Node.prototype['NodeStatus'] = undefined;

/**
 * @member {String} NodeUpTimeInSeconds
 */
Node.prototype['NodeUpTimeInSeconds'] = undefined;

/**
 * @member {String} Type
 */
Node.prototype['Type'] = undefined;

/**
 * @member {String} UpgradeDomain
 */
Node.prototype['UpgradeDomain'] = undefined;





/**
 * Allowed values for the <code>NodeStatus</code> property.
 * @enum {String}
 * @readonly
 */
Node['NodeStatusEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Up"
     * @const
     */
    "Up": "Up",

    /**
     * value: "Down"
     * @const
     */
    "Down": "Down",

    /**
     * value: "Enabling"
     * @const
     */
    "Enabling": "Enabling",

    /**
     * value: "Disabling"
     * @const
     */
    "Disabling": "Disabling",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Removed"
     * @const
     */
    "Removed": "Removed"
};



export default Node;

