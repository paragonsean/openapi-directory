/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeployedApplication model module.
 * @module model/DeployedApplication
 * @version 1.0.0
 */
class DeployedApplication {
    /**
     * Constructs a new <code>DeployedApplication</code>.
     * The application of the deployed
     * @alias module:model/DeployedApplication
     */
    constructor() { 
        
        DeployedApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedApplication} obj Optional instance to populate.
     * @return {module:model/DeployedApplication} The populated <code>DeployedApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedApplication();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LogDirectory')) {
                obj['LogDirectory'] = ApiClient.convertToType(data['LogDirectory'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TempDirectory')) {
                obj['TempDirectory'] = ApiClient.convertToType(data['TempDirectory'], 'String');
            }
            if (data.hasOwnProperty('TypeName')) {
                obj['TypeName'] = ApiClient.convertToType(data['TypeName'], 'String');
            }
            if (data.hasOwnProperty('WorkDirectory')) {
                obj['WorkDirectory'] = ApiClient.convertToType(data['WorkDirectory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedApplication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LogDirectory'] && !(typeof data['LogDirectory'] === 'string' || data['LogDirectory'] instanceof String)) {
            throw new Error("Expected the field `LogDirectory` to be a primitive type in the JSON string but got " + data['LogDirectory']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TempDirectory'] && !(typeof data['TempDirectory'] === 'string' || data['TempDirectory'] instanceof String)) {
            throw new Error("Expected the field `TempDirectory` to be a primitive type in the JSON string but got " + data['TempDirectory']);
        }
        // ensure the json data is a string
        if (data['TypeName'] && !(typeof data['TypeName'] === 'string' || data['TypeName'] instanceof String)) {
            throw new Error("Expected the field `TypeName` to be a primitive type in the JSON string but got " + data['TypeName']);
        }
        // ensure the json data is a string
        if (data['WorkDirectory'] && !(typeof data['WorkDirectory'] === 'string' || data['WorkDirectory'] instanceof String)) {
            throw new Error("Expected the field `WorkDirectory` to be a primitive type in the JSON string but got " + data['WorkDirectory']);
        }

        return true;
    }


}



/**
 * @member {String} Id
 */
DeployedApplication.prototype['Id'] = undefined;

/**
 * @member {String} LogDirectory
 */
DeployedApplication.prototype['LogDirectory'] = undefined;

/**
 * @member {String} Name
 */
DeployedApplication.prototype['Name'] = undefined;

/**
 * @member {String} Status
 */
DeployedApplication.prototype['Status'] = undefined;

/**
 * @member {String} TempDirectory
 */
DeployedApplication.prototype['TempDirectory'] = undefined;

/**
 * @member {String} TypeName
 */
DeployedApplication.prototype['TypeName'] = undefined;

/**
 * @member {String} WorkDirectory
 */
DeployedApplication.prototype['WorkDirectory'] = undefined;






export default DeployedApplication;

