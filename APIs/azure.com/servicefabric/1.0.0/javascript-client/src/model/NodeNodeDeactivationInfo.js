/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeNodeDeactivationInfo model module.
 * @module model/NodeNodeDeactivationInfo
 * @version 1.0.0
 */
class NodeNodeDeactivationInfo {
    /**
     * Constructs a new <code>NodeNodeDeactivationInfo</code>.
     * The info of the deactivation info
     * @alias module:model/NodeNodeDeactivationInfo
     */
    constructor() { 
        
        NodeNodeDeactivationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeNodeDeactivationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeNodeDeactivationInfo} obj Optional instance to populate.
     * @return {module:model/NodeNodeDeactivationInfo} The populated <code>NodeNodeDeactivationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeNodeDeactivationInfo();

            if (data.hasOwnProperty('NodeDeactivationIntent')) {
                obj['NodeDeactivationIntent'] = ApiClient.convertToType(data['NodeDeactivationIntent'], 'String');
            }
            if (data.hasOwnProperty('NodeDeactivationStatus')) {
                obj['NodeDeactivationStatus'] = ApiClient.convertToType(data['NodeDeactivationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeNodeDeactivationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeNodeDeactivationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NodeDeactivationIntent'] && !(typeof data['NodeDeactivationIntent'] === 'string' || data['NodeDeactivationIntent'] instanceof String)) {
            throw new Error("Expected the field `NodeDeactivationIntent` to be a primitive type in the JSON string but got " + data['NodeDeactivationIntent']);
        }
        // ensure the json data is a string
        if (data['NodeDeactivationStatus'] && !(typeof data['NodeDeactivationStatus'] === 'string' || data['NodeDeactivationStatus'] instanceof String)) {
            throw new Error("Expected the field `NodeDeactivationStatus` to be a primitive type in the JSON string but got " + data['NodeDeactivationStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/NodeNodeDeactivationInfo.NodeDeactivationIntentEnum} NodeDeactivationIntent
 */
NodeNodeDeactivationInfo.prototype['NodeDeactivationIntent'] = undefined;

/**
 * @member {module:model/NodeNodeDeactivationInfo.NodeDeactivationStatusEnum} NodeDeactivationStatus
 */
NodeNodeDeactivationInfo.prototype['NodeDeactivationStatus'] = undefined;





/**
 * Allowed values for the <code>NodeDeactivationIntent</code> property.
 * @enum {String}
 * @readonly
 */
NodeNodeDeactivationInfo['NodeDeactivationIntentEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Pause"
     * @const
     */
    "Pause": "Pause",

    /**
     * value: "Restart"
     * @const
     */
    "Restart": "Restart",

    /**
     * value: "RemoveData"
     * @const
     */
    "RemoveData": "RemoveData"
};


/**
 * Allowed values for the <code>NodeDeactivationStatus</code> property.
 * @enum {String}
 * @readonly
 */
NodeNodeDeactivationInfo['NodeDeactivationStatusEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "SafetyCheckInProgress"
     * @const
     */
    "SafetyCheckInProgress": "SafetyCheckInProgress",

    /**
     * value: "SafetyCheckComplete"
     * @const
     */
    "SafetyCheckComplete": "SafetyCheckComplete",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed"
};



export default NodeNodeDeactivationInfo;

