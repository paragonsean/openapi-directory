/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicy from './ApplicationHealthPolicy';
import ApplicationParametersInner from './ApplicationParametersInner';
import MonitoringPolicy from './MonitoringPolicy';
import RollingUpgradeMode from './RollingUpgradeMode';

/**
 * The StartApplicationUpgrade model module.
 * @module model/StartApplicationUpgrade
 * @version 1.0.0
 */
class StartApplicationUpgrade {
    /**
     * Constructs a new <code>StartApplicationUpgrade</code>.
     * The description of the start application upgrade
     * @alias module:model/StartApplicationUpgrade
     */
    constructor() { 
        
        StartApplicationUpgrade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartApplicationUpgrade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartApplicationUpgrade} obj Optional instance to populate.
     * @return {module:model/StartApplicationUpgrade} The populated <code>StartApplicationUpgrade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartApplicationUpgrade();

            if (data.hasOwnProperty('ApplicationHealthPolicy')) {
                obj['ApplicationHealthPolicy'] = ApplicationHealthPolicy.constructFromObject(data['ApplicationHealthPolicy']);
            }
            if (data.hasOwnProperty('ForceRestart')) {
                obj['ForceRestart'] = ApiClient.convertToType(data['ForceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('MonitoringPolicy')) {
                obj['MonitoringPolicy'] = MonitoringPolicy.constructFromObject(data['MonitoringPolicy']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], [ApplicationParametersInner]);
            }
            if (data.hasOwnProperty('RollingUpgradeMode')) {
                obj['RollingUpgradeMode'] = RollingUpgradeMode.constructFromObject(data['RollingUpgradeMode']);
            }
            if (data.hasOwnProperty('TargetApplicationTypeVersion')) {
                obj['TargetApplicationTypeVersion'] = ApiClient.convertToType(data['TargetApplicationTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('UpgradeKind')) {
                obj['UpgradeKind'] = ApiClient.convertToType(data['UpgradeKind'], 'String');
            }
            if (data.hasOwnProperty('UpgradeReplicaSetCheckTimeoutInSeconds')) {
                obj['UpgradeReplicaSetCheckTimeoutInSeconds'] = ApiClient.convertToType(data['UpgradeReplicaSetCheckTimeoutInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartApplicationUpgrade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartApplicationUpgrade</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ApplicationHealthPolicy`
        if (data['ApplicationHealthPolicy']) { // data not null
          ApplicationHealthPolicy.validateJSON(data['ApplicationHealthPolicy']);
        }
        // validate the optional field `MonitoringPolicy`
        if (data['MonitoringPolicy']) { // data not null
          MonitoringPolicy.validateJSON(data['MonitoringPolicy']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Parameters'])) {
                throw new Error("Expected the field `Parameters` to be an array in the JSON data but got " + data['Parameters']);
            }
            // validate the optional field `Parameters` (array)
            for (const item of data['Parameters']) {
                ApplicationParametersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TargetApplicationTypeVersion'] && !(typeof data['TargetApplicationTypeVersion'] === 'string' || data['TargetApplicationTypeVersion'] instanceof String)) {
            throw new Error("Expected the field `TargetApplicationTypeVersion` to be a primitive type in the JSON string but got " + data['TargetApplicationTypeVersion']);
        }
        // ensure the json data is a string
        if (data['UpgradeKind'] && !(typeof data['UpgradeKind'] === 'string' || data['UpgradeKind'] instanceof String)) {
            throw new Error("Expected the field `UpgradeKind` to be a primitive type in the JSON string but got " + data['UpgradeKind']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApplicationHealthPolicy} ApplicationHealthPolicy
 */
StartApplicationUpgrade.prototype['ApplicationHealthPolicy'] = undefined;

/**
 * @member {Boolean} ForceRestart
 */
StartApplicationUpgrade.prototype['ForceRestart'] = undefined;

/**
 * @member {module:model/MonitoringPolicy} MonitoringPolicy
 */
StartApplicationUpgrade.prototype['MonitoringPolicy'] = undefined;

/**
 * @member {String} Name
 */
StartApplicationUpgrade.prototype['Name'] = undefined;

/**
 * @member {Array.<module:model/ApplicationParametersInner>} Parameters
 */
StartApplicationUpgrade.prototype['Parameters'] = undefined;

/**
 * @member {module:model/RollingUpgradeMode} RollingUpgradeMode
 */
StartApplicationUpgrade.prototype['RollingUpgradeMode'] = undefined;

/**
 * @member {String} TargetApplicationTypeVersion
 */
StartApplicationUpgrade.prototype['TargetApplicationTypeVersion'] = undefined;

/**
 * @member {module:model/StartApplicationUpgrade.UpgradeKindEnum} UpgradeKind
 */
StartApplicationUpgrade.prototype['UpgradeKind'] = undefined;

/**
 * @member {Number} UpgradeReplicaSetCheckTimeoutInSeconds
 */
StartApplicationUpgrade.prototype['UpgradeReplicaSetCheckTimeoutInSeconds'] = undefined;





/**
 * Allowed values for the <code>UpgradeKind</code> property.
 * @enum {String}
 * @readonly
 */
StartApplicationUpgrade['UpgradeKindEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Rolling"
     * @const
     */
    "Rolling": "Rolling"
};



export default StartApplicationUpgrade;

