/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PartitionInformation model module.
 * @module model/PartitionInformation
 * @version 1.0.0
 */
class PartitionInformation {
    /**
     * Constructs a new <code>PartitionInformation</code>.
     * The information of the partition
     * @alias module:model/PartitionInformation
     */
    constructor() { 
        
        PartitionInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionInformation} obj Optional instance to populate.
     * @return {module:model/PartitionInformation} The populated <code>PartitionInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionInformation();

            if (data.hasOwnProperty('HighKey')) {
                obj['HighKey'] = ApiClient.convertToType(data['HighKey'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LowKey')) {
                obj['LowKey'] = ApiClient.convertToType(data['LowKey'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], ['String']);
            }
            if (data.hasOwnProperty('ServicePartitionKind')) {
                obj['ServicePartitionKind'] = ApiClient.convertToType(data['ServicePartitionKind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['HighKey'] && !(typeof data['HighKey'] === 'string' || data['HighKey'] instanceof String)) {
            throw new Error("Expected the field `HighKey` to be a primitive type in the JSON string but got " + data['HighKey']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['LowKey'] && !(typeof data['LowKey'] === 'string' || data['LowKey'] instanceof String)) {
            throw new Error("Expected the field `LowKey` to be a primitive type in the JSON string but got " + data['LowKey']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Name'])) {
            throw new Error("Expected the field `Name` to be an array in the JSON data but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ServicePartitionKind'] && !(typeof data['ServicePartitionKind'] === 'string' || data['ServicePartitionKind'] instanceof String)) {
            throw new Error("Expected the field `ServicePartitionKind` to be a primitive type in the JSON string but got " + data['ServicePartitionKind']);
        }

        return true;
    }


}



/**
 * @member {String} HighKey
 */
PartitionInformation.prototype['HighKey'] = undefined;

/**
 * @member {String} Id
 */
PartitionInformation.prototype['Id'] = undefined;

/**
 * @member {String} LowKey
 */
PartitionInformation.prototype['LowKey'] = undefined;

/**
 * @member {Array.<String>} Name
 */
PartitionInformation.prototype['Name'] = undefined;

/**
 * @member {module:model/PartitionInformation.ServicePartitionKindEnum} ServicePartitionKind
 */
PartitionInformation.prototype['ServicePartitionKind'] = undefined;





/**
 * Allowed values for the <code>ServicePartitionKind</code> property.
 * @enum {String}
 * @readonly
 */
PartitionInformation['ServicePartitionKindEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Singleton"
     * @const
     */
    "Singleton": "Singleton",

    /**
     * value: "Int64Range"
     * @const
     */
    "Int64Range": "Int64Range",

    /**
     * value: "Named"
     * @const
     */
    "Named": "Named"
};



export default PartitionInformation;

