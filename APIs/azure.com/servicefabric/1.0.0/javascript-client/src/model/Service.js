/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthState from './HealthState';
import ServiceKind from './ServiceKind';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.0.0
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * The service
     * @alias module:model/Service
     */
    constructor() { 
        
        Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('HasPersistedState')) {
                obj['HasPersistedState'] = ApiClient.convertToType(data['HasPersistedState'], 'Boolean');
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsServiceGroup')) {
                obj['IsServiceGroup'] = ApiClient.convertToType(data['IsServiceGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('ManifestVersion')) {
                obj['ManifestVersion'] = ApiClient.convertToType(data['ManifestVersion'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ServiceKind')) {
                obj['ServiceKind'] = ServiceKind.constructFromObject(data['ServiceKind']);
            }
            if (data.hasOwnProperty('ServiceStatus')) {
                obj['ServiceStatus'] = ApiClient.convertToType(data['ServiceStatus'], 'String');
            }
            if (data.hasOwnProperty('TypeName')) {
                obj['TypeName'] = ApiClient.convertToType(data['TypeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['ManifestVersion'] && !(typeof data['ManifestVersion'] === 'string' || data['ManifestVersion'] instanceof String)) {
            throw new Error("Expected the field `ManifestVersion` to be a primitive type in the JSON string but got " + data['ManifestVersion']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ServiceStatus'] && !(typeof data['ServiceStatus'] === 'string' || data['ServiceStatus'] instanceof String)) {
            throw new Error("Expected the field `ServiceStatus` to be a primitive type in the JSON string but got " + data['ServiceStatus']);
        }
        // ensure the json data is a string
        if (data['TypeName'] && !(typeof data['TypeName'] === 'string' || data['TypeName'] instanceof String)) {
            throw new Error("Expected the field `TypeName` to be a primitive type in the JSON string but got " + data['TypeName']);
        }

        return true;
    }


}



/**
 * @member {Boolean} HasPersistedState
 */
Service.prototype['HasPersistedState'] = undefined;

/**
 * @member {module:model/HealthState} HealthState
 */
Service.prototype['HealthState'] = undefined;

/**
 * @member {String} Id
 */
Service.prototype['Id'] = undefined;

/**
 * @member {Boolean} IsServiceGroup
 */
Service.prototype['IsServiceGroup'] = undefined;

/**
 * @member {String} ManifestVersion
 */
Service.prototype['ManifestVersion'] = undefined;

/**
 * @member {String} Name
 */
Service.prototype['Name'] = undefined;

/**
 * @member {module:model/ServiceKind} ServiceKind
 */
Service.prototype['ServiceKind'] = undefined;

/**
 * @member {module:model/Service.ServiceStatusEnum} ServiceStatus
 */
Service.prototype['ServiceStatus'] = undefined;

/**
 * @member {String} TypeName
 */
Service.prototype['TypeName'] = undefined;





/**
 * Allowed values for the <code>ServiceStatus</code> property.
 * @enum {String}
 * @readonly
 */
Service['ServiceStatusEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Upgrading"
     * @const
     */
    "Upgrading": "Upgrading",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Faile"
     * @const
     */
    "Faile": "Faile"
};



export default Service;

