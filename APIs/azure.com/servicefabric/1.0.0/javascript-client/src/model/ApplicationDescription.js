/**
 * ServiceFabricClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationDescriptionParameterListInner from './ApplicationDescriptionParameterListInner';

/**
 * The ApplicationDescription model module.
 * @module model/ApplicationDescription
 * @version 1.0.0
 */
class ApplicationDescription {
    /**
     * Constructs a new <code>ApplicationDescription</code>.
     * The description of the application
     * @alias module:model/ApplicationDescription
     */
    constructor() { 
        
        ApplicationDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationDescription} obj Optional instance to populate.
     * @return {module:model/ApplicationDescription} The populated <code>ApplicationDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationDescription();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ParameterList')) {
                obj['ParameterList'] = ApiClient.convertToType(data['ParameterList'], [ApplicationDescriptionParameterListInner]);
            }
            if (data.hasOwnProperty('TypeName')) {
                obj['TypeName'] = ApiClient.convertToType(data['TypeName'], 'String');
            }
            if (data.hasOwnProperty('TypeVersion')) {
                obj['TypeVersion'] = ApiClient.convertToType(data['TypeVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['ParameterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ParameterList'])) {
                throw new Error("Expected the field `ParameterList` to be an array in the JSON data but got " + data['ParameterList']);
            }
            // validate the optional field `ParameterList` (array)
            for (const item of data['ParameterList']) {
                ApplicationDescriptionParameterListInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TypeName'] && !(typeof data['TypeName'] === 'string' || data['TypeName'] instanceof String)) {
            throw new Error("Expected the field `TypeName` to be a primitive type in the JSON string but got " + data['TypeName']);
        }
        // ensure the json data is a string
        if (data['TypeVersion'] && !(typeof data['TypeVersion'] === 'string' || data['TypeVersion'] instanceof String)) {
            throw new Error("Expected the field `TypeVersion` to be a primitive type in the JSON string but got " + data['TypeVersion']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
ApplicationDescription.prototype['Name'] = undefined;

/**
 * @member {Array.<module:model/ApplicationDescriptionParameterListInner>} ParameterList
 */
ApplicationDescription.prototype['ParameterList'] = undefined;

/**
 * @member {String} TypeName
 */
ApplicationDescription.prototype['TypeName'] = undefined;

/**
 * @member {String} TypeVersion
 */
ApplicationDescription.prototype['TypeVersion'] = undefined;






export default ApplicationDescription;

