/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkloadGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkloadGroupProperties::OAIWorkloadGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkloadGroupProperties::OAIWorkloadGroupProperties() {
    this->initializeModel();
}

OAIWorkloadGroupProperties::~OAIWorkloadGroupProperties() {}

void OAIWorkloadGroupProperties::initializeModel() {

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_max_resource_percent_isSet = false;
    m_max_resource_percent_isValid = false;

    m_max_resource_percent_per_request_isSet = false;
    m_max_resource_percent_per_request_isValid = false;

    m_min_resource_percent_isSet = false;
    m_min_resource_percent_isValid = false;

    m_min_resource_percent_per_request_isSet = false;
    m_min_resource_percent_per_request_isValid = false;

    m_query_execution_timeout_isSet = false;
    m_query_execution_timeout_isValid = false;
}

void OAIWorkloadGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkloadGroupProperties::fromJsonObject(QJsonObject json) {

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_max_resource_percent_isValid = ::OpenAPI::fromJsonValue(m_max_resource_percent, json[QString("maxResourcePercent")]);
    m_max_resource_percent_isSet = !json[QString("maxResourcePercent")].isNull() && m_max_resource_percent_isValid;

    m_max_resource_percent_per_request_isValid = ::OpenAPI::fromJsonValue(m_max_resource_percent_per_request, json[QString("maxResourcePercentPerRequest")]);
    m_max_resource_percent_per_request_isSet = !json[QString("maxResourcePercentPerRequest")].isNull() && m_max_resource_percent_per_request_isValid;

    m_min_resource_percent_isValid = ::OpenAPI::fromJsonValue(m_min_resource_percent, json[QString("minResourcePercent")]);
    m_min_resource_percent_isSet = !json[QString("minResourcePercent")].isNull() && m_min_resource_percent_isValid;

    m_min_resource_percent_per_request_isValid = ::OpenAPI::fromJsonValue(m_min_resource_percent_per_request, json[QString("minResourcePercentPerRequest")]);
    m_min_resource_percent_per_request_isSet = !json[QString("minResourcePercentPerRequest")].isNull() && m_min_resource_percent_per_request_isValid;

    m_query_execution_timeout_isValid = ::OpenAPI::fromJsonValue(m_query_execution_timeout, json[QString("queryExecutionTimeout")]);
    m_query_execution_timeout_isSet = !json[QString("queryExecutionTimeout")].isNull() && m_query_execution_timeout_isValid;
}

QString OAIWorkloadGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkloadGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_max_resource_percent_isSet) {
        obj.insert(QString("maxResourcePercent"), ::OpenAPI::toJsonValue(m_max_resource_percent));
    }
    if (m_max_resource_percent_per_request_isSet) {
        obj.insert(QString("maxResourcePercentPerRequest"), ::OpenAPI::toJsonValue(m_max_resource_percent_per_request));
    }
    if (m_min_resource_percent_isSet) {
        obj.insert(QString("minResourcePercent"), ::OpenAPI::toJsonValue(m_min_resource_percent));
    }
    if (m_min_resource_percent_per_request_isSet) {
        obj.insert(QString("minResourcePercentPerRequest"), ::OpenAPI::toJsonValue(m_min_resource_percent_per_request));
    }
    if (m_query_execution_timeout_isSet) {
        obj.insert(QString("queryExecutionTimeout"), ::OpenAPI::toJsonValue(m_query_execution_timeout));
    }
    return obj;
}

QString OAIWorkloadGroupProperties::getImportance() const {
    return m_importance;
}
void OAIWorkloadGroupProperties::setImportance(const QString &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAIWorkloadGroupProperties::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAIWorkloadGroupProperties::is_importance_Valid() const{
    return m_importance_isValid;
}

qint32 OAIWorkloadGroupProperties::getMaxResourcePercent() const {
    return m_max_resource_percent;
}
void OAIWorkloadGroupProperties::setMaxResourcePercent(const qint32 &max_resource_percent) {
    m_max_resource_percent = max_resource_percent;
    m_max_resource_percent_isSet = true;
}

bool OAIWorkloadGroupProperties::is_max_resource_percent_Set() const{
    return m_max_resource_percent_isSet;
}

bool OAIWorkloadGroupProperties::is_max_resource_percent_Valid() const{
    return m_max_resource_percent_isValid;
}

double OAIWorkloadGroupProperties::getMaxResourcePercentPerRequest() const {
    return m_max_resource_percent_per_request;
}
void OAIWorkloadGroupProperties::setMaxResourcePercentPerRequest(const double &max_resource_percent_per_request) {
    m_max_resource_percent_per_request = max_resource_percent_per_request;
    m_max_resource_percent_per_request_isSet = true;
}

bool OAIWorkloadGroupProperties::is_max_resource_percent_per_request_Set() const{
    return m_max_resource_percent_per_request_isSet;
}

bool OAIWorkloadGroupProperties::is_max_resource_percent_per_request_Valid() const{
    return m_max_resource_percent_per_request_isValid;
}

qint32 OAIWorkloadGroupProperties::getMinResourcePercent() const {
    return m_min_resource_percent;
}
void OAIWorkloadGroupProperties::setMinResourcePercent(const qint32 &min_resource_percent) {
    m_min_resource_percent = min_resource_percent;
    m_min_resource_percent_isSet = true;
}

bool OAIWorkloadGroupProperties::is_min_resource_percent_Set() const{
    return m_min_resource_percent_isSet;
}

bool OAIWorkloadGroupProperties::is_min_resource_percent_Valid() const{
    return m_min_resource_percent_isValid;
}

double OAIWorkloadGroupProperties::getMinResourcePercentPerRequest() const {
    return m_min_resource_percent_per_request;
}
void OAIWorkloadGroupProperties::setMinResourcePercentPerRequest(const double &min_resource_percent_per_request) {
    m_min_resource_percent_per_request = min_resource_percent_per_request;
    m_min_resource_percent_per_request_isSet = true;
}

bool OAIWorkloadGroupProperties::is_min_resource_percent_per_request_Set() const{
    return m_min_resource_percent_per_request_isSet;
}

bool OAIWorkloadGroupProperties::is_min_resource_percent_per_request_Valid() const{
    return m_min_resource_percent_per_request_isValid;
}

qint32 OAIWorkloadGroupProperties::getQueryExecutionTimeout() const {
    return m_query_execution_timeout;
}
void OAIWorkloadGroupProperties::setQueryExecutionTimeout(const qint32 &query_execution_timeout) {
    m_query_execution_timeout = query_execution_timeout;
    m_query_execution_timeout_isSet = true;
}

bool OAIWorkloadGroupProperties::is_query_execution_timeout_Set() const{
    return m_query_execution_timeout_isSet;
}

bool OAIWorkloadGroupProperties::is_query_execution_timeout_Valid() const{
    return m_query_execution_timeout_isValid;
}

bool OAIWorkloadGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resource_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resource_percent_per_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_resource_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_resource_percent_per_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_execution_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkloadGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_resource_percent_isValid && m_min_resource_percent_isValid && m_min_resource_percent_per_request_isValid && true;
}

} // namespace OpenAPI
