/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkloadGroupsApi_H
#define OAI_OAIWorkloadGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWorkloadGroup.h"
#include "OAIWorkloadGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkloadGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkloadGroupsApi(const int timeOut = 0);
    ~OAIWorkloadGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIWorkloadGroup [required]
    */
    virtual void workloadGroupsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &subscription_id, const QString &api_version, const OAIWorkloadGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadGroupsDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  workload_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadGroupsGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &workload_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workloadGroupsListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workloadGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workloadGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void workloadGroupsGetCallback(OAIHttpRequestWorker *worker);
    void workloadGroupsListByDatabaseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workloadGroupsCreateOrUpdateSignal(OAIWorkloadGroup summary);
    void workloadGroupsDeleteSignal();
    void workloadGroupsGetSignal(OAIWorkloadGroup summary);
    void workloadGroupsListByDatabaseSignal(OAIWorkloadGroupListResult summary);


    void workloadGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadGroup summary);
    void workloadGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workloadGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadGroup summary);
    void workloadGroupsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIWorkloadGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use workloadGroupsCreateOrUpdateSignalError() instead")
    void workloadGroupsCreateOrUpdateSignalE(OAIWorkloadGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsCreateOrUpdateSignalError(OAIWorkloadGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsDeleteSignalError() instead")
    void workloadGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsGetSignalError() instead")
    void workloadGroupsGetSignalE(OAIWorkloadGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsGetSignalError(OAIWorkloadGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsListByDatabaseSignalError() instead")
    void workloadGroupsListByDatabaseSignalE(OAIWorkloadGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsListByDatabaseSignalError(OAIWorkloadGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workloadGroupsCreateOrUpdateSignalErrorFull() instead")
    void workloadGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsDeleteSignalErrorFull() instead")
    void workloadGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsGetSignalErrorFull() instead")
    void workloadGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workloadGroupsListByDatabaseSignalErrorFull() instead")
    void workloadGroupsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workloadGroupsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
