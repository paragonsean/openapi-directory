# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkloadGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, importance: str=None, max_resource_percent: int=None, max_resource_percent_per_request: float=None, min_resource_percent: int=None, min_resource_percent_per_request: float=None, query_execution_timeout: int=None):
        """WorkloadGroupProperties - a model defined in OpenAPI

        :param importance: The importance of this WorkloadGroupProperties.
        :param max_resource_percent: The max_resource_percent of this WorkloadGroupProperties.
        :param max_resource_percent_per_request: The max_resource_percent_per_request of this WorkloadGroupProperties.
        :param min_resource_percent: The min_resource_percent of this WorkloadGroupProperties.
        :param min_resource_percent_per_request: The min_resource_percent_per_request of this WorkloadGroupProperties.
        :param query_execution_timeout: The query_execution_timeout of this WorkloadGroupProperties.
        """
        self.openapi_types = {
            'importance': str,
            'max_resource_percent': int,
            'max_resource_percent_per_request': float,
            'min_resource_percent': int,
            'min_resource_percent_per_request': float,
            'query_execution_timeout': int
        }

        self.attribute_map = {
            'importance': 'importance',
            'max_resource_percent': 'maxResourcePercent',
            'max_resource_percent_per_request': 'maxResourcePercentPerRequest',
            'min_resource_percent': 'minResourcePercent',
            'min_resource_percent_per_request': 'minResourcePercentPerRequest',
            'query_execution_timeout': 'queryExecutionTimeout'
        }

        self._importance = importance
        self._max_resource_percent = max_resource_percent
        self._max_resource_percent_per_request = max_resource_percent_per_request
        self._min_resource_percent = min_resource_percent
        self._min_resource_percent_per_request = min_resource_percent_per_request
        self._query_execution_timeout = query_execution_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadGroupProperties of this WorkloadGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def importance(self):
        """Gets the importance of this WorkloadGroupProperties.

        The workload group importance level.

        :return: The importance of this WorkloadGroupProperties.
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this WorkloadGroupProperties.

        The workload group importance level.

        :param importance: The importance of this WorkloadGroupProperties.
        :type importance: str
        """

        self._importance = importance

    @property
    def max_resource_percent(self):
        """Gets the max_resource_percent of this WorkloadGroupProperties.

        The workload group cap percentage resource.

        :return: The max_resource_percent of this WorkloadGroupProperties.
        :rtype: int
        """
        return self._max_resource_percent

    @max_resource_percent.setter
    def max_resource_percent(self, max_resource_percent):
        """Sets the max_resource_percent of this WorkloadGroupProperties.

        The workload group cap percentage resource.

        :param max_resource_percent: The max_resource_percent of this WorkloadGroupProperties.
        :type max_resource_percent: int
        """
        if max_resource_percent is None:
            raise ValueError("Invalid value for `max_resource_percent`, must not be `None`")

        self._max_resource_percent = max_resource_percent

    @property
    def max_resource_percent_per_request(self):
        """Gets the max_resource_percent_per_request of this WorkloadGroupProperties.

        The workload group request maximum grant percentage.

        :return: The max_resource_percent_per_request of this WorkloadGroupProperties.
        :rtype: float
        """
        return self._max_resource_percent_per_request

    @max_resource_percent_per_request.setter
    def max_resource_percent_per_request(self, max_resource_percent_per_request):
        """Sets the max_resource_percent_per_request of this WorkloadGroupProperties.

        The workload group request maximum grant percentage.

        :param max_resource_percent_per_request: The max_resource_percent_per_request of this WorkloadGroupProperties.
        :type max_resource_percent_per_request: float
        """

        self._max_resource_percent_per_request = max_resource_percent_per_request

    @property
    def min_resource_percent(self):
        """Gets the min_resource_percent of this WorkloadGroupProperties.

        The workload group minimum percentage resource.

        :return: The min_resource_percent of this WorkloadGroupProperties.
        :rtype: int
        """
        return self._min_resource_percent

    @min_resource_percent.setter
    def min_resource_percent(self, min_resource_percent):
        """Sets the min_resource_percent of this WorkloadGroupProperties.

        The workload group minimum percentage resource.

        :param min_resource_percent: The min_resource_percent of this WorkloadGroupProperties.
        :type min_resource_percent: int
        """
        if min_resource_percent is None:
            raise ValueError("Invalid value for `min_resource_percent`, must not be `None`")

        self._min_resource_percent = min_resource_percent

    @property
    def min_resource_percent_per_request(self):
        """Gets the min_resource_percent_per_request of this WorkloadGroupProperties.

        The workload group request minimum grant percentage.

        :return: The min_resource_percent_per_request of this WorkloadGroupProperties.
        :rtype: float
        """
        return self._min_resource_percent_per_request

    @min_resource_percent_per_request.setter
    def min_resource_percent_per_request(self, min_resource_percent_per_request):
        """Sets the min_resource_percent_per_request of this WorkloadGroupProperties.

        The workload group request minimum grant percentage.

        :param min_resource_percent_per_request: The min_resource_percent_per_request of this WorkloadGroupProperties.
        :type min_resource_percent_per_request: float
        """
        if min_resource_percent_per_request is None:
            raise ValueError("Invalid value for `min_resource_percent_per_request`, must not be `None`")

        self._min_resource_percent_per_request = min_resource_percent_per_request

    @property
    def query_execution_timeout(self):
        """Gets the query_execution_timeout of this WorkloadGroupProperties.

        The workload group query execution timeout.

        :return: The query_execution_timeout of this WorkloadGroupProperties.
        :rtype: int
        """
        return self._query_execution_timeout

    @query_execution_timeout.setter
    def query_execution_timeout(self, query_execution_timeout):
        """Sets the query_execution_timeout of this WorkloadGroupProperties.

        The workload group query execution timeout.

        :param query_execution_timeout: The query_execution_timeout of this WorkloadGroupProperties.
        :type query_execution_timeout: int
        """

        self._query_execution_timeout = query_execution_timeout
