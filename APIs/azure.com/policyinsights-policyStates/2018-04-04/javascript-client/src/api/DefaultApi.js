/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationsListResults from '../model/OperationsListResults';
import PolicyStatesQueryResults from '../model/PolicyStatesQueryResults';
import QueryFailure from '../model/QueryFailure';
import SummarizeResults from '../model/SummarizeResults';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-04-04
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsListResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available operations.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsListResults}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsListResults;
      return this.apiClient.callApi(
        '/providers/Microsoft.PolicyInsights/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesGetMetadata operation.
     * @callback module:api/DefaultApi~policyStatesGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets OData metadata XML document.
     * @param {String} scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {module:api/DefaultApi~policyStatesGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    policyStatesGetMetadata(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyStatesGetMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesGetMetadata");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.PolicyInsights/policyStates/$metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForManagementGroup operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the management group.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupName Management group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForManagementGroup(policyStatesResource, managementGroupsNamespace, managementGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupName' is set
      if (managementGroupName === undefined || managementGroupName === null) {
        throw new Error("Missing the required parameter 'managementGroupName' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForManagementGroup");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupName': managementGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForPolicyDefinition operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForPolicyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the subscription level policy definition.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyDefinitionName Policy definition name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForPolicyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForPolicyDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForPolicyDefinition");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesListQueryResultsForPolicyDefinition");
      }
      // verify the required parameter 'policyDefinitionName' is set
      if (policyDefinitionName === undefined || policyDefinitionName === null) {
        throw new Error("Missing the required parameter 'policyDefinitionName' when calling policyStatesListQueryResultsForPolicyDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForPolicyDefinition");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policyDefinitionName': policyDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForPolicySetDefinition operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForPolicySetDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the subscription level policy set definition.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policySetDefinitionName Policy set definition name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForPolicySetDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForPolicySetDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForPolicySetDefinition");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesListQueryResultsForPolicySetDefinition");
      }
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policyStatesListQueryResultsForPolicySetDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForPolicySetDefinition");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policySetDefinitionName': policySetDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForResource operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resource.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} resourceId Resource ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForResource(policyStatesResource, resourceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling policyStatesListQueryResultsForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForResource");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'resourceId': resourceId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForResourceGroup operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the resource group.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForResourceGroup");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resource group level policy assignment.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'authorizationNamespace': authorizationNamespace,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForSubscription operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the subscription.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForSubscription(policyStatesResource, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForSubscription");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the subscription level policy assignment.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForManagementGroup operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the resources under the management group.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupName Management group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForManagementGroup(policyStatesSummaryResource, managementGroupsNamespace, managementGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForManagementGroup");
      }
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling policyStatesSummarizeForManagementGroup");
      }
      // verify the required parameter 'managementGroupName' is set
      if (managementGroupName === undefined || managementGroupName === null) {
        throw new Error("Missing the required parameter 'managementGroupName' when calling policyStatesSummarizeForManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForManagementGroup");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupName': managementGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForPolicyDefinition operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForPolicyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the subscription level policy definition.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyDefinitionName Policy definition name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForPolicyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForPolicyDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForPolicyDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForPolicyDefinition");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesSummarizeForPolicyDefinition");
      }
      // verify the required parameter 'policyDefinitionName' is set
      if (policyDefinitionName === undefined || policyDefinitionName === null) {
        throw new Error("Missing the required parameter 'policyDefinitionName' when calling policyStatesSummarizeForPolicyDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForPolicyDefinition");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policyDefinitionName': policyDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForPolicySetDefinition operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForPolicySetDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the subscription level policy set definition.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policySetDefinitionName Policy set definition name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForPolicySetDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForPolicySetDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForPolicySetDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForPolicySetDefinition");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesSummarizeForPolicySetDefinition");
      }
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policyStatesSummarizeForPolicySetDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForPolicySetDefinition");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policySetDefinitionName': policySetDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForResource operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the resource.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} resourceId Resource ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForResource(policyStatesSummaryResource, resourceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling policyStatesSummarizeForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForResource");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'resourceId': resourceId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForResourceGroup operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the resources under the resource group.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForResourceGroup(policyStatesSummaryResource, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyStatesSummarizeForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForResourceGroup");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForResourceGroupLevelPolicyAssignment operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForResourceGroupLevelPolicyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the resource group level policy assignment.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForResourceGroupLevelPolicyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForResourceGroupLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForResourceGroupLevelPolicyAssignment");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'authorizationNamespace': authorizationNamespace,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForSubscription operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the resources under the subscription.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForSubscription(policyStatesSummaryResource, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForSubscription");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesSummarizeForSubscriptionLevelPolicyAssignment operation.
     * @callback module:api/DefaultApi~policyStatesSummarizeForSubscriptionLevelPolicyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarizes policy states for the subscription level policy assignment.
     * @param {module:model/String} policyStatesSummaryResource The virtual resource under PolicyStates resource type for summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the only allowed value.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {module:model/String} authorizationNamespace The namespace for Microsoft Authorization resource provider; only \"Microsoft.Authorization\" is allowed.
     * @param {String} policyAssignmentName Policy assignment name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~policyStatesSummarizeForSubscriptionLevelPolicyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeResults}
     */
    policyStatesSummarizeForSubscriptionLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesSummaryResource' is set
      if (policyStatesSummaryResource === undefined || policyStatesSummaryResource === null) {
        throw new Error("Missing the required parameter 'policyStatesSummaryResource' when calling policyStatesSummarizeForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesSummarizeForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'authorizationNamespace' is set
      if (authorizationNamespace === undefined || authorizationNamespace === null) {
        throw new Error("Missing the required parameter 'authorizationNamespace' when calling policyStatesSummarizeForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'policyAssignmentName' is set
      if (policyAssignmentName === undefined || policyAssignmentName === null) {
        throw new Error("Missing the required parameter 'policyAssignmentName' when calling policyStatesSummarizeForSubscriptionLevelPolicyAssignment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesSummarizeForSubscriptionLevelPolicyAssignment");
      }

      let pathParams = {
        'policyStatesSummaryResource': policyStatesSummaryResource,
        'subscriptionId': subscriptionId,
        'authorizationNamespace': authorizationNamespace,
        'policyAssignmentName': policyAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SummarizeResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
