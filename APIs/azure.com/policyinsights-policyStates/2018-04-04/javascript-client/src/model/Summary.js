/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyAssignmentSummary from './PolicyAssignmentSummary';
import SummaryResults from './SummaryResults';

/**
 * The Summary model module.
 * @module model/Summary
 * @version 2018-04-04
 */
class Summary {
    /**
     * Constructs a new <code>Summary</code>.
     * Summary results.
     * @alias module:model/Summary
     */
    constructor() { 
        
        Summary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Summary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Summary} obj Optional instance to populate.
     * @return {module:model/Summary} The populated <code>Summary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Summary();

            if (data.hasOwnProperty('@odata.context')) {
                obj['@odata.context'] = ApiClient.convertToType(data['@odata.context'], 'String');
            }
            if (data.hasOwnProperty('@odata.id')) {
                obj['@odata.id'] = ApiClient.convertToType(data['@odata.id'], 'String');
            }
            if (data.hasOwnProperty('policyAssignments')) {
                obj['policyAssignments'] = ApiClient.convertToType(data['policyAssignments'], [PolicyAssignmentSummary]);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = SummaryResults.constructFromObject(data['results']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Summary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Summary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@odata.context'] && !(typeof data['@odata.context'] === 'string' || data['@odata.context'] instanceof String)) {
            throw new Error("Expected the field `@odata.context` to be a primitive type in the JSON string but got " + data['@odata.context']);
        }
        // ensure the json data is a string
        if (data['@odata.id'] && !(typeof data['@odata.id'] === 'string' || data['@odata.id'] instanceof String)) {
            throw new Error("Expected the field `@odata.id` to be a primitive type in the JSON string but got " + data['@odata.id']);
        }
        if (data['policyAssignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyAssignments'])) {
                throw new Error("Expected the field `policyAssignments` to be an array in the JSON data but got " + data['policyAssignments']);
            }
            // validate the optional field `policyAssignments` (array)
            for (const item of data['policyAssignments']) {
                PolicyAssignmentSummary.validateJSON(item);
            };
        }
        // validate the optional field `results`
        if (data['results']) { // data not null
          SummaryResults.validateJSON(data['results']);
        }

        return true;
    }


}



/**
 * OData context string; used by OData clients to resolve type information based on metadata.
 * @member {String} @odata.context
 */
Summary.prototype['@odata.context'] = undefined;

/**
 * OData entity ID; always set to null since summaries do not have an entity ID.
 * @member {String} @odata.id
 */
Summary.prototype['@odata.id'] = undefined;

/**
 * Policy assignments summary.
 * @member {Array.<module:model/PolicyAssignmentSummary>} policyAssignments
 */
Summary.prototype['policyAssignments'] = undefined;

/**
 * @member {module:model/SummaryResults} results
 */
Summary.prototype['results'] = undefined;






export default Summary;

