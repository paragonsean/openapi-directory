/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyState model module.
 * @module model/PolicyState
 * @version 2018-04-04
 */
class PolicyState {
    /**
     * Constructs a new <code>PolicyState</code>.
     * Policy state record.
     * @alias module:model/PolicyState
     * @extends Object
     */
    constructor() { 
        
        PolicyState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyState} obj Optional instance to populate.
     * @return {module:model/PolicyState} The populated <code>PolicyState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyState();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('@odata.context')) {
                obj['@odata.context'] = ApiClient.convertToType(data['@odata.context'], 'String');
            }
            if (data.hasOwnProperty('@odata.id')) {
                obj['@odata.id'] = ApiClient.convertToType(data['@odata.id'], 'String');
            }
            if (data.hasOwnProperty('effectiveParameters')) {
                obj['effectiveParameters'] = ApiClient.convertToType(data['effectiveParameters'], 'String');
            }
            if (data.hasOwnProperty('isCompliant')) {
                obj['isCompliant'] = ApiClient.convertToType(data['isCompliant'], 'Boolean');
            }
            if (data.hasOwnProperty('managementGroupIds')) {
                obj['managementGroupIds'] = ApiClient.convertToType(data['managementGroupIds'], 'String');
            }
            if (data.hasOwnProperty('policyAssignmentId')) {
                obj['policyAssignmentId'] = ApiClient.convertToType(data['policyAssignmentId'], 'String');
            }
            if (data.hasOwnProperty('policyAssignmentName')) {
                obj['policyAssignmentName'] = ApiClient.convertToType(data['policyAssignmentName'], 'String');
            }
            if (data.hasOwnProperty('policyAssignmentOwner')) {
                obj['policyAssignmentOwner'] = ApiClient.convertToType(data['policyAssignmentOwner'], 'String');
            }
            if (data.hasOwnProperty('policyAssignmentParameters')) {
                obj['policyAssignmentParameters'] = ApiClient.convertToType(data['policyAssignmentParameters'], 'String');
            }
            if (data.hasOwnProperty('policyAssignmentScope')) {
                obj['policyAssignmentScope'] = ApiClient.convertToType(data['policyAssignmentScope'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionAction')) {
                obj['policyDefinitionAction'] = ApiClient.convertToType(data['policyDefinitionAction'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionCategory')) {
                obj['policyDefinitionCategory'] = ApiClient.convertToType(data['policyDefinitionCategory'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionId')) {
                obj['policyDefinitionId'] = ApiClient.convertToType(data['policyDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionName')) {
                obj['policyDefinitionName'] = ApiClient.convertToType(data['policyDefinitionName'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionReferenceId')) {
                obj['policyDefinitionReferenceId'] = ApiClient.convertToType(data['policyDefinitionReferenceId'], 'String');
            }
            if (data.hasOwnProperty('policySetDefinitionCategory')) {
                obj['policySetDefinitionCategory'] = ApiClient.convertToType(data['policySetDefinitionCategory'], 'String');
            }
            if (data.hasOwnProperty('policySetDefinitionId')) {
                obj['policySetDefinitionId'] = ApiClient.convertToType(data['policySetDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('policySetDefinitionName')) {
                obj['policySetDefinitionName'] = ApiClient.convertToType(data['policySetDefinitionName'], 'String');
            }
            if (data.hasOwnProperty('policySetDefinitionOwner')) {
                obj['policySetDefinitionOwner'] = ApiClient.convertToType(data['policySetDefinitionOwner'], 'String');
            }
            if (data.hasOwnProperty('policySetDefinitionParameters')) {
                obj['policySetDefinitionParameters'] = ApiClient.convertToType(data['policySetDefinitionParameters'], 'String');
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ApiClient.convertToType(data['resourceGroup'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceLocation')) {
                obj['resourceLocation'] = ApiClient.convertToType(data['resourceLocation'], 'String');
            }
            if (data.hasOwnProperty('resourceTags')) {
                obj['resourceTags'] = ApiClient.convertToType(data['resourceTags'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['@odata.context'] && !(typeof data['@odata.context'] === 'string' || data['@odata.context'] instanceof String)) {
            throw new Error("Expected the field `@odata.context` to be a primitive type in the JSON string but got " + data['@odata.context']);
        }
        // ensure the json data is a string
        if (data['@odata.id'] && !(typeof data['@odata.id'] === 'string' || data['@odata.id'] instanceof String)) {
            throw new Error("Expected the field `@odata.id` to be a primitive type in the JSON string but got " + data['@odata.id']);
        }
        // ensure the json data is a string
        if (data['effectiveParameters'] && !(typeof data['effectiveParameters'] === 'string' || data['effectiveParameters'] instanceof String)) {
            throw new Error("Expected the field `effectiveParameters` to be a primitive type in the JSON string but got " + data['effectiveParameters']);
        }
        // ensure the json data is a string
        if (data['managementGroupIds'] && !(typeof data['managementGroupIds'] === 'string' || data['managementGroupIds'] instanceof String)) {
            throw new Error("Expected the field `managementGroupIds` to be a primitive type in the JSON string but got " + data['managementGroupIds']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentId'] && !(typeof data['policyAssignmentId'] === 'string' || data['policyAssignmentId'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentId` to be a primitive type in the JSON string but got " + data['policyAssignmentId']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentName'] && !(typeof data['policyAssignmentName'] === 'string' || data['policyAssignmentName'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentName` to be a primitive type in the JSON string but got " + data['policyAssignmentName']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentOwner'] && !(typeof data['policyAssignmentOwner'] === 'string' || data['policyAssignmentOwner'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentOwner` to be a primitive type in the JSON string but got " + data['policyAssignmentOwner']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentParameters'] && !(typeof data['policyAssignmentParameters'] === 'string' || data['policyAssignmentParameters'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentParameters` to be a primitive type in the JSON string but got " + data['policyAssignmentParameters']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentScope'] && !(typeof data['policyAssignmentScope'] === 'string' || data['policyAssignmentScope'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentScope` to be a primitive type in the JSON string but got " + data['policyAssignmentScope']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionAction'] && !(typeof data['policyDefinitionAction'] === 'string' || data['policyDefinitionAction'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionAction` to be a primitive type in the JSON string but got " + data['policyDefinitionAction']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionCategory'] && !(typeof data['policyDefinitionCategory'] === 'string' || data['policyDefinitionCategory'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionCategory` to be a primitive type in the JSON string but got " + data['policyDefinitionCategory']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionId'] && !(typeof data['policyDefinitionId'] === 'string' || data['policyDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got " + data['policyDefinitionId']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionName'] && !(typeof data['policyDefinitionName'] === 'string' || data['policyDefinitionName'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionName` to be a primitive type in the JSON string but got " + data['policyDefinitionName']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionReferenceId'] && !(typeof data['policyDefinitionReferenceId'] === 'string' || data['policyDefinitionReferenceId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionReferenceId` to be a primitive type in the JSON string but got " + data['policyDefinitionReferenceId']);
        }
        // ensure the json data is a string
        if (data['policySetDefinitionCategory'] && !(typeof data['policySetDefinitionCategory'] === 'string' || data['policySetDefinitionCategory'] instanceof String)) {
            throw new Error("Expected the field `policySetDefinitionCategory` to be a primitive type in the JSON string but got " + data['policySetDefinitionCategory']);
        }
        // ensure the json data is a string
        if (data['policySetDefinitionId'] && !(typeof data['policySetDefinitionId'] === 'string' || data['policySetDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `policySetDefinitionId` to be a primitive type in the JSON string but got " + data['policySetDefinitionId']);
        }
        // ensure the json data is a string
        if (data['policySetDefinitionName'] && !(typeof data['policySetDefinitionName'] === 'string' || data['policySetDefinitionName'] instanceof String)) {
            throw new Error("Expected the field `policySetDefinitionName` to be a primitive type in the JSON string but got " + data['policySetDefinitionName']);
        }
        // ensure the json data is a string
        if (data['policySetDefinitionOwner'] && !(typeof data['policySetDefinitionOwner'] === 'string' || data['policySetDefinitionOwner'] instanceof String)) {
            throw new Error("Expected the field `policySetDefinitionOwner` to be a primitive type in the JSON string but got " + data['policySetDefinitionOwner']);
        }
        // ensure the json data is a string
        if (data['policySetDefinitionParameters'] && !(typeof data['policySetDefinitionParameters'] === 'string' || data['policySetDefinitionParameters'] instanceof String)) {
            throw new Error("Expected the field `policySetDefinitionParameters` to be a primitive type in the JSON string but got " + data['policySetDefinitionParameters']);
        }
        // ensure the json data is a string
        if (data['resourceGroup'] && !(typeof data['resourceGroup'] === 'string' || data['resourceGroup'] instanceof String)) {
            throw new Error("Expected the field `resourceGroup` to be a primitive type in the JSON string but got " + data['resourceGroup']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceLocation'] && !(typeof data['resourceLocation'] === 'string' || data['resourceLocation'] instanceof String)) {
            throw new Error("Expected the field `resourceLocation` to be a primitive type in the JSON string but got " + data['resourceLocation']);
        }
        // ensure the json data is a string
        if (data['resourceTags'] && !(typeof data['resourceTags'] === 'string' || data['resourceTags'] instanceof String)) {
            throw new Error("Expected the field `resourceTags` to be a primitive type in the JSON string but got " + data['resourceTags']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}



/**
 * OData context string; used by OData clients to resolve type information based on metadata.
 * @member {String} @odata.context
 */
PolicyState.prototype['@odata.context'] = undefined;

/**
 * OData entity ID; always set to null since policy state records do not have an entity ID.
 * @member {String} @odata.id
 */
PolicyState.prototype['@odata.id'] = undefined;

/**
 * Effective parameters for the policy assignment.
 * @member {String} effectiveParameters
 */
PolicyState.prototype['effectiveParameters'] = undefined;

/**
 * Flag which states whether the resource is compliant against the policy assignment it was evaluated against.
 * @member {Boolean} isCompliant
 */
PolicyState.prototype['isCompliant'] = undefined;

/**
 * Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
 * @member {String} managementGroupIds
 */
PolicyState.prototype['managementGroupIds'] = undefined;

/**
 * Policy assignment ID.
 * @member {String} policyAssignmentId
 */
PolicyState.prototype['policyAssignmentId'] = undefined;

/**
 * Policy assignment name.
 * @member {String} policyAssignmentName
 */
PolicyState.prototype['policyAssignmentName'] = undefined;

/**
 * Policy assignment owner.
 * @member {String} policyAssignmentOwner
 */
PolicyState.prototype['policyAssignmentOwner'] = undefined;

/**
 * Policy assignment parameters.
 * @member {String} policyAssignmentParameters
 */
PolicyState.prototype['policyAssignmentParameters'] = undefined;

/**
 * Policy assignment scope.
 * @member {String} policyAssignmentScope
 */
PolicyState.prototype['policyAssignmentScope'] = undefined;

/**
 * Policy definition action, i.e. effect.
 * @member {String} policyDefinitionAction
 */
PolicyState.prototype['policyDefinitionAction'] = undefined;

/**
 * Policy definition category.
 * @member {String} policyDefinitionCategory
 */
PolicyState.prototype['policyDefinitionCategory'] = undefined;

/**
 * Policy definition ID.
 * @member {String} policyDefinitionId
 */
PolicyState.prototype['policyDefinitionId'] = undefined;

/**
 * Policy definition name.
 * @member {String} policyDefinitionName
 */
PolicyState.prototype['policyDefinitionName'] = undefined;

/**
 * Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
 * @member {String} policyDefinitionReferenceId
 */
PolicyState.prototype['policyDefinitionReferenceId'] = undefined;

/**
 * Policy set definition category, if the policy assignment is for a policy set.
 * @member {String} policySetDefinitionCategory
 */
PolicyState.prototype['policySetDefinitionCategory'] = undefined;

/**
 * Policy set definition ID, if the policy assignment is for a policy set.
 * @member {String} policySetDefinitionId
 */
PolicyState.prototype['policySetDefinitionId'] = undefined;

/**
 * Policy set definition name, if the policy assignment is for a policy set.
 * @member {String} policySetDefinitionName
 */
PolicyState.prototype['policySetDefinitionName'] = undefined;

/**
 * Policy set definition owner, if the policy assignment is for a policy set.
 * @member {String} policySetDefinitionOwner
 */
PolicyState.prototype['policySetDefinitionOwner'] = undefined;

/**
 * Policy set definition parameters, if the policy assignment is for a policy set.
 * @member {String} policySetDefinitionParameters
 */
PolicyState.prototype['policySetDefinitionParameters'] = undefined;

/**
 * Resource group name.
 * @member {String} resourceGroup
 */
PolicyState.prototype['resourceGroup'] = undefined;

/**
 * Resource ID.
 * @member {String} resourceId
 */
PolicyState.prototype['resourceId'] = undefined;

/**
 * Resource location.
 * @member {String} resourceLocation
 */
PolicyState.prototype['resourceLocation'] = undefined;

/**
 * List of resource tags.
 * @member {String} resourceTags
 */
PolicyState.prototype['resourceTags'] = undefined;

/**
 * Resource type.
 * @member {String} resourceType
 */
PolicyState.prototype['resourceType'] = undefined;

/**
 * Subscription ID.
 * @member {String} subscriptionId
 */
PolicyState.prototype['subscriptionId'] = undefined;

/**
 * Timestamp for the policy state record.
 * @member {Date} timestamp
 */
PolicyState.prototype['timestamp'] = undefined;






export default PolicyState;

