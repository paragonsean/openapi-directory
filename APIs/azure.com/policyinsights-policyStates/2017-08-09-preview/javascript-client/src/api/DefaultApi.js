/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-08-09-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationsListResults from '../model/OperationsListResults';
import PolicyStatesQueryResults from '../model/PolicyStatesQueryResults';
import QueryFailure from '../model/QueryFailure';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-08-09-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsListResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists available operations.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsListResults}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsListResults;
      return this.apiClient.callApi(
        '/providers/Microsoft.PolicyInsights/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForManagementGroup operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the management group.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management resource provider; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupName Management group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForManagementGroup(policyStatesResource, managementGroupsNamespace, managementGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupName' is set
      if (managementGroupName === undefined || managementGroupName === null) {
        throw new Error("Missing the required parameter 'managementGroupName' when calling policyStatesListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForManagementGroup");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupName': managementGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForResource operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resource.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} resourceId Resource ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForResource(policyStatesResource, resourceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling policyStatesListQueryResultsForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForResource");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'resourceId': resourceId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForResourceGroup operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the resource group.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyStatesListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForResourceGroup");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyStatesListQueryResultsForSubscription operation.
     * @callback module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyStatesQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy states for the resources under the subscription.
     * @param {module:model/String} policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyStatesListQueryResultsForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyStatesQueryResults}
     */
    policyStatesListQueryResultsForSubscription(policyStatesResource, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyStatesResource' is set
      if (policyStatesResource === undefined || policyStatesResource === null) {
        throw new Error("Missing the required parameter 'policyStatesResource' when calling policyStatesListQueryResultsForSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyStatesListQueryResultsForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyStatesListQueryResultsForSubscription");
      }

      let pathParams = {
        'policyStatesResource': policyStatesResource,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyStatesQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
