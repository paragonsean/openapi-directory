/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-08-09-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperationsListResults.h"
#include "OAIPolicyStatesQueryResults.h"
#include "OAIQueryFailure.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForManagementGroup(const QString &policy_states_resource, const QString &management_groups_namespace, const QString &management_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForResource(const QString &policy_states_resource, const QString &resource_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForResourceGroup(const QString &policy_states_resource, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForSubscription(const QString &policy_states_resource, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsListCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForResourceCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsListSignal(OAIOperationsListResults summary);
    void policyStatesListQueryResultsForManagementGroupSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionSignal(OAIPolicyStatesQueryResults summary);


    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationsListResults summary);
    void policyStatesListQueryResultsForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);

    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationsListResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationsListResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForManagementGroupSignalError() instead")
    void policyStatesListQueryResultsForManagementGroupSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForManagementGroupSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceSignalError() instead")
    void policyStatesListQueryResultsForResourceSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupSignalError() instead")
    void policyStatesListQueryResultsForResourceGroupSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionSignalError() instead")
    void policyStatesListQueryResultsForSubscriptionSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForManagementGroupSignalErrorFull() instead")
    void policyStatesListQueryResultsForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceSignalErrorFull() instead")
    void policyStatesListQueryResultsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupSignalErrorFull() instead")
    void policyStatesListQueryResultsForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionSignalErrorFull() instead")
    void policyStatesListQueryResultsForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
