/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolicyStatesClient);
  }
}(this, function(expect, PolicyStatesClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolicyStatesClient.PolicyState();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PolicyState', function() {
    it('should create an instance of PolicyState', function() {
      // uncomment below and update the code to test PolicyState
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be.a(PolicyStatesClient.PolicyState);
    });

    it('should have the property odataContext (base name: "@odata.context")', function() {
      // uncomment below and update the code to test the property odataContext
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property odataId (base name: "@odata.id")', function() {
      // uncomment below and update the code to test the property odataId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property effectiveParameters (base name: "effectiveParameters")', function() {
      // uncomment below and update the code to test the property effectiveParameters
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property isCompliant (base name: "isCompliant")', function() {
      // uncomment below and update the code to test the property isCompliant
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property managementGroupIds (base name: "managementGroupIds")', function() {
      // uncomment below and update the code to test the property managementGroupIds
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignmentId (base name: "policyAssignmentId")', function() {
      // uncomment below and update the code to test the property policyAssignmentId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignmentName (base name: "policyAssignmentName")', function() {
      // uncomment below and update the code to test the property policyAssignmentName
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignmentOwner (base name: "policyAssignmentOwner")', function() {
      // uncomment below and update the code to test the property policyAssignmentOwner
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignmentParameters (base name: "policyAssignmentParameters")', function() {
      // uncomment below and update the code to test the property policyAssignmentParameters
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyAssignmentScope (base name: "policyAssignmentScope")', function() {
      // uncomment below and update the code to test the property policyAssignmentScope
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyDefinitionAction (base name: "policyDefinitionAction")', function() {
      // uncomment below and update the code to test the property policyDefinitionAction
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyDefinitionCategory (base name: "policyDefinitionCategory")', function() {
      // uncomment below and update the code to test the property policyDefinitionCategory
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyDefinitionId (base name: "policyDefinitionId")', function() {
      // uncomment below and update the code to test the property policyDefinitionId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyDefinitionName (base name: "policyDefinitionName")', function() {
      // uncomment below and update the code to test the property policyDefinitionName
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policyDefinitionReferenceId (base name: "policyDefinitionReferenceId")', function() {
      // uncomment below and update the code to test the property policyDefinitionReferenceId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policySetDefinitionCategory (base name: "policySetDefinitionCategory")', function() {
      // uncomment below and update the code to test the property policySetDefinitionCategory
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policySetDefinitionId (base name: "policySetDefinitionId")', function() {
      // uncomment below and update the code to test the property policySetDefinitionId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policySetDefinitionName (base name: "policySetDefinitionName")', function() {
      // uncomment below and update the code to test the property policySetDefinitionName
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policySetDefinitionOwner (base name: "policySetDefinitionOwner")', function() {
      // uncomment below and update the code to test the property policySetDefinitionOwner
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property policySetDefinitionParameters (base name: "policySetDefinitionParameters")', function() {
      // uncomment below and update the code to test the property policySetDefinitionParameters
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property resourceGroup (base name: "resourceGroup")', function() {
      // uncomment below and update the code to test the property resourceGroup
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property resourceLocation (base name: "resourceLocation")', function() {
      // uncomment below and update the code to test the property resourceLocation
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property resourceTags (base name: "resourceTags")', function() {
      // uncomment below and update the code to test the property resourceTags
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resourceType")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionId (base name: "subscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new PolicyStatesClient.PolicyState();
      //expect(instance).to.be();
    });

  });

}));
