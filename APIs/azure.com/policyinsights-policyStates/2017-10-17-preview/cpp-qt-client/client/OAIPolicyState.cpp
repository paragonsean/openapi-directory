/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-17-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyState::OAIPolicyState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyState::OAIPolicyState() {
    this->initializeModel();
}

OAIPolicyState::~OAIPolicyState() {}

void OAIPolicyState::initializeModel() {

    m_odata_context_isSet = false;
    m_odata_context_isValid = false;

    m_odata_id_isSet = false;
    m_odata_id_isValid = false;

    m_effective_parameters_isSet = false;
    m_effective_parameters_isValid = false;

    m_is_compliant_isSet = false;
    m_is_compliant_isValid = false;

    m_management_group_ids_isSet = false;
    m_management_group_ids_isValid = false;

    m_policy_assignment_id_isSet = false;
    m_policy_assignment_id_isValid = false;

    m_policy_assignment_name_isSet = false;
    m_policy_assignment_name_isValid = false;

    m_policy_assignment_owner_isSet = false;
    m_policy_assignment_owner_isValid = false;

    m_policy_assignment_parameters_isSet = false;
    m_policy_assignment_parameters_isValid = false;

    m_policy_assignment_scope_isSet = false;
    m_policy_assignment_scope_isValid = false;

    m_policy_definition_action_isSet = false;
    m_policy_definition_action_isValid = false;

    m_policy_definition_category_isSet = false;
    m_policy_definition_category_isValid = false;

    m_policy_definition_id_isSet = false;
    m_policy_definition_id_isValid = false;

    m_policy_definition_name_isSet = false;
    m_policy_definition_name_isValid = false;

    m_policy_definition_reference_id_isSet = false;
    m_policy_definition_reference_id_isValid = false;

    m_policy_set_definition_category_isSet = false;
    m_policy_set_definition_category_isValid = false;

    m_policy_set_definition_id_isSet = false;
    m_policy_set_definition_id_isValid = false;

    m_policy_set_definition_name_isSet = false;
    m_policy_set_definition_name_isValid = false;

    m_policy_set_definition_owner_isSet = false;
    m_policy_set_definition_owner_isValid = false;

    m_policy_set_definition_parameters_isSet = false;
    m_policy_set_definition_parameters_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIPolicyState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyState::fromJsonObject(QJsonObject json) {

    m_odata_context_isValid = ::OpenAPI::fromJsonValue(m_odata_context, json[QString("@odata.context")]);
    m_odata_context_isSet = !json[QString("@odata.context")].isNull() && m_odata_context_isValid;

    m_odata_id_isValid = ::OpenAPI::fromJsonValue(m_odata_id, json[QString("@odata.id")]);
    m_odata_id_isSet = !json[QString("@odata.id")].isNull() && m_odata_id_isValid;

    m_effective_parameters_isValid = ::OpenAPI::fromJsonValue(m_effective_parameters, json[QString("effectiveParameters")]);
    m_effective_parameters_isSet = !json[QString("effectiveParameters")].isNull() && m_effective_parameters_isValid;

    m_is_compliant_isValid = ::OpenAPI::fromJsonValue(m_is_compliant, json[QString("isCompliant")]);
    m_is_compliant_isSet = !json[QString("isCompliant")].isNull() && m_is_compliant_isValid;

    m_management_group_ids_isValid = ::OpenAPI::fromJsonValue(m_management_group_ids, json[QString("managementGroupIds")]);
    m_management_group_ids_isSet = !json[QString("managementGroupIds")].isNull() && m_management_group_ids_isValid;

    m_policy_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_id, json[QString("policyAssignmentId")]);
    m_policy_assignment_id_isSet = !json[QString("policyAssignmentId")].isNull() && m_policy_assignment_id_isValid;

    m_policy_assignment_name_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_name, json[QString("policyAssignmentName")]);
    m_policy_assignment_name_isSet = !json[QString("policyAssignmentName")].isNull() && m_policy_assignment_name_isValid;

    m_policy_assignment_owner_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_owner, json[QString("policyAssignmentOwner")]);
    m_policy_assignment_owner_isSet = !json[QString("policyAssignmentOwner")].isNull() && m_policy_assignment_owner_isValid;

    m_policy_assignment_parameters_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_parameters, json[QString("policyAssignmentParameters")]);
    m_policy_assignment_parameters_isSet = !json[QString("policyAssignmentParameters")].isNull() && m_policy_assignment_parameters_isValid;

    m_policy_assignment_scope_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_scope, json[QString("policyAssignmentScope")]);
    m_policy_assignment_scope_isSet = !json[QString("policyAssignmentScope")].isNull() && m_policy_assignment_scope_isValid;

    m_policy_definition_action_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_action, json[QString("policyDefinitionAction")]);
    m_policy_definition_action_isSet = !json[QString("policyDefinitionAction")].isNull() && m_policy_definition_action_isValid;

    m_policy_definition_category_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_category, json[QString("policyDefinitionCategory")]);
    m_policy_definition_category_isSet = !json[QString("policyDefinitionCategory")].isNull() && m_policy_definition_category_isValid;

    m_policy_definition_id_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_id, json[QString("policyDefinitionId")]);
    m_policy_definition_id_isSet = !json[QString("policyDefinitionId")].isNull() && m_policy_definition_id_isValid;

    m_policy_definition_name_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_name, json[QString("policyDefinitionName")]);
    m_policy_definition_name_isSet = !json[QString("policyDefinitionName")].isNull() && m_policy_definition_name_isValid;

    m_policy_definition_reference_id_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_reference_id, json[QString("policyDefinitionReferenceId")]);
    m_policy_definition_reference_id_isSet = !json[QString("policyDefinitionReferenceId")].isNull() && m_policy_definition_reference_id_isValid;

    m_policy_set_definition_category_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_category, json[QString("policySetDefinitionCategory")]);
    m_policy_set_definition_category_isSet = !json[QString("policySetDefinitionCategory")].isNull() && m_policy_set_definition_category_isValid;

    m_policy_set_definition_id_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_id, json[QString("policySetDefinitionId")]);
    m_policy_set_definition_id_isSet = !json[QString("policySetDefinitionId")].isNull() && m_policy_set_definition_id_isValid;

    m_policy_set_definition_name_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_name, json[QString("policySetDefinitionName")]);
    m_policy_set_definition_name_isSet = !json[QString("policySetDefinitionName")].isNull() && m_policy_set_definition_name_isValid;

    m_policy_set_definition_owner_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_owner, json[QString("policySetDefinitionOwner")]);
    m_policy_set_definition_owner_isSet = !json[QString("policySetDefinitionOwner")].isNull() && m_policy_set_definition_owner_isValid;

    m_policy_set_definition_parameters_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_parameters, json[QString("policySetDefinitionParameters")]);
    m_policy_set_definition_parameters_isSet = !json[QString("policySetDefinitionParameters")].isNull() && m_policy_set_definition_parameters_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("resourceTags")]);
    m_resource_tags_isSet = !json[QString("resourceTags")].isNull() && m_resource_tags_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIPolicyState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyState::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_context_isSet) {
        obj.insert(QString("@odata.context"), ::OpenAPI::toJsonValue(m_odata_context));
    }
    if (m_odata_id_isSet) {
        obj.insert(QString("@odata.id"), ::OpenAPI::toJsonValue(m_odata_id));
    }
    if (m_effective_parameters_isSet) {
        obj.insert(QString("effectiveParameters"), ::OpenAPI::toJsonValue(m_effective_parameters));
    }
    if (m_is_compliant_isSet) {
        obj.insert(QString("isCompliant"), ::OpenAPI::toJsonValue(m_is_compliant));
    }
    if (m_management_group_ids_isSet) {
        obj.insert(QString("managementGroupIds"), ::OpenAPI::toJsonValue(m_management_group_ids));
    }
    if (m_policy_assignment_id_isSet) {
        obj.insert(QString("policyAssignmentId"), ::OpenAPI::toJsonValue(m_policy_assignment_id));
    }
    if (m_policy_assignment_name_isSet) {
        obj.insert(QString("policyAssignmentName"), ::OpenAPI::toJsonValue(m_policy_assignment_name));
    }
    if (m_policy_assignment_owner_isSet) {
        obj.insert(QString("policyAssignmentOwner"), ::OpenAPI::toJsonValue(m_policy_assignment_owner));
    }
    if (m_policy_assignment_parameters_isSet) {
        obj.insert(QString("policyAssignmentParameters"), ::OpenAPI::toJsonValue(m_policy_assignment_parameters));
    }
    if (m_policy_assignment_scope_isSet) {
        obj.insert(QString("policyAssignmentScope"), ::OpenAPI::toJsonValue(m_policy_assignment_scope));
    }
    if (m_policy_definition_action_isSet) {
        obj.insert(QString("policyDefinitionAction"), ::OpenAPI::toJsonValue(m_policy_definition_action));
    }
    if (m_policy_definition_category_isSet) {
        obj.insert(QString("policyDefinitionCategory"), ::OpenAPI::toJsonValue(m_policy_definition_category));
    }
    if (m_policy_definition_id_isSet) {
        obj.insert(QString("policyDefinitionId"), ::OpenAPI::toJsonValue(m_policy_definition_id));
    }
    if (m_policy_definition_name_isSet) {
        obj.insert(QString("policyDefinitionName"), ::OpenAPI::toJsonValue(m_policy_definition_name));
    }
    if (m_policy_definition_reference_id_isSet) {
        obj.insert(QString("policyDefinitionReferenceId"), ::OpenAPI::toJsonValue(m_policy_definition_reference_id));
    }
    if (m_policy_set_definition_category_isSet) {
        obj.insert(QString("policySetDefinitionCategory"), ::OpenAPI::toJsonValue(m_policy_set_definition_category));
    }
    if (m_policy_set_definition_id_isSet) {
        obj.insert(QString("policySetDefinitionId"), ::OpenAPI::toJsonValue(m_policy_set_definition_id));
    }
    if (m_policy_set_definition_name_isSet) {
        obj.insert(QString("policySetDefinitionName"), ::OpenAPI::toJsonValue(m_policy_set_definition_name));
    }
    if (m_policy_set_definition_owner_isSet) {
        obj.insert(QString("policySetDefinitionOwner"), ::OpenAPI::toJsonValue(m_policy_set_definition_owner));
    }
    if (m_policy_set_definition_parameters_isSet) {
        obj.insert(QString("policySetDefinitionParameters"), ::OpenAPI::toJsonValue(m_policy_set_definition_parameters));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_resource_tags_isSet) {
        obj.insert(QString("resourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIPolicyState::getOdataContext() const {
    return m_odata_context;
}
void OAIPolicyState::setOdataContext(const QString &odata_context) {
    m_odata_context = odata_context;
    m_odata_context_isSet = true;
}

bool OAIPolicyState::is_odata_context_Set() const{
    return m_odata_context_isSet;
}

bool OAIPolicyState::is_odata_context_Valid() const{
    return m_odata_context_isValid;
}

QString OAIPolicyState::getOdataId() const {
    return m_odata_id;
}
void OAIPolicyState::setOdataId(const QString &odata_id) {
    m_odata_id = odata_id;
    m_odata_id_isSet = true;
}

bool OAIPolicyState::is_odata_id_Set() const{
    return m_odata_id_isSet;
}

bool OAIPolicyState::is_odata_id_Valid() const{
    return m_odata_id_isValid;
}

QString OAIPolicyState::getEffectiveParameters() const {
    return m_effective_parameters;
}
void OAIPolicyState::setEffectiveParameters(const QString &effective_parameters) {
    m_effective_parameters = effective_parameters;
    m_effective_parameters_isSet = true;
}

bool OAIPolicyState::is_effective_parameters_Set() const{
    return m_effective_parameters_isSet;
}

bool OAIPolicyState::is_effective_parameters_Valid() const{
    return m_effective_parameters_isValid;
}

bool OAIPolicyState::isIsCompliant() const {
    return m_is_compliant;
}
void OAIPolicyState::setIsCompliant(const bool &is_compliant) {
    m_is_compliant = is_compliant;
    m_is_compliant_isSet = true;
}

bool OAIPolicyState::is_is_compliant_Set() const{
    return m_is_compliant_isSet;
}

bool OAIPolicyState::is_is_compliant_Valid() const{
    return m_is_compliant_isValid;
}

QString OAIPolicyState::getManagementGroupIds() const {
    return m_management_group_ids;
}
void OAIPolicyState::setManagementGroupIds(const QString &management_group_ids) {
    m_management_group_ids = management_group_ids;
    m_management_group_ids_isSet = true;
}

bool OAIPolicyState::is_management_group_ids_Set() const{
    return m_management_group_ids_isSet;
}

bool OAIPolicyState::is_management_group_ids_Valid() const{
    return m_management_group_ids_isValid;
}

QString OAIPolicyState::getPolicyAssignmentId() const {
    return m_policy_assignment_id;
}
void OAIPolicyState::setPolicyAssignmentId(const QString &policy_assignment_id) {
    m_policy_assignment_id = policy_assignment_id;
    m_policy_assignment_id_isSet = true;
}

bool OAIPolicyState::is_policy_assignment_id_Set() const{
    return m_policy_assignment_id_isSet;
}

bool OAIPolicyState::is_policy_assignment_id_Valid() const{
    return m_policy_assignment_id_isValid;
}

QString OAIPolicyState::getPolicyAssignmentName() const {
    return m_policy_assignment_name;
}
void OAIPolicyState::setPolicyAssignmentName(const QString &policy_assignment_name) {
    m_policy_assignment_name = policy_assignment_name;
    m_policy_assignment_name_isSet = true;
}

bool OAIPolicyState::is_policy_assignment_name_Set() const{
    return m_policy_assignment_name_isSet;
}

bool OAIPolicyState::is_policy_assignment_name_Valid() const{
    return m_policy_assignment_name_isValid;
}

QString OAIPolicyState::getPolicyAssignmentOwner() const {
    return m_policy_assignment_owner;
}
void OAIPolicyState::setPolicyAssignmentOwner(const QString &policy_assignment_owner) {
    m_policy_assignment_owner = policy_assignment_owner;
    m_policy_assignment_owner_isSet = true;
}

bool OAIPolicyState::is_policy_assignment_owner_Set() const{
    return m_policy_assignment_owner_isSet;
}

bool OAIPolicyState::is_policy_assignment_owner_Valid() const{
    return m_policy_assignment_owner_isValid;
}

QString OAIPolicyState::getPolicyAssignmentParameters() const {
    return m_policy_assignment_parameters;
}
void OAIPolicyState::setPolicyAssignmentParameters(const QString &policy_assignment_parameters) {
    m_policy_assignment_parameters = policy_assignment_parameters;
    m_policy_assignment_parameters_isSet = true;
}

bool OAIPolicyState::is_policy_assignment_parameters_Set() const{
    return m_policy_assignment_parameters_isSet;
}

bool OAIPolicyState::is_policy_assignment_parameters_Valid() const{
    return m_policy_assignment_parameters_isValid;
}

QString OAIPolicyState::getPolicyAssignmentScope() const {
    return m_policy_assignment_scope;
}
void OAIPolicyState::setPolicyAssignmentScope(const QString &policy_assignment_scope) {
    m_policy_assignment_scope = policy_assignment_scope;
    m_policy_assignment_scope_isSet = true;
}

bool OAIPolicyState::is_policy_assignment_scope_Set() const{
    return m_policy_assignment_scope_isSet;
}

bool OAIPolicyState::is_policy_assignment_scope_Valid() const{
    return m_policy_assignment_scope_isValid;
}

QString OAIPolicyState::getPolicyDefinitionAction() const {
    return m_policy_definition_action;
}
void OAIPolicyState::setPolicyDefinitionAction(const QString &policy_definition_action) {
    m_policy_definition_action = policy_definition_action;
    m_policy_definition_action_isSet = true;
}

bool OAIPolicyState::is_policy_definition_action_Set() const{
    return m_policy_definition_action_isSet;
}

bool OAIPolicyState::is_policy_definition_action_Valid() const{
    return m_policy_definition_action_isValid;
}

QString OAIPolicyState::getPolicyDefinitionCategory() const {
    return m_policy_definition_category;
}
void OAIPolicyState::setPolicyDefinitionCategory(const QString &policy_definition_category) {
    m_policy_definition_category = policy_definition_category;
    m_policy_definition_category_isSet = true;
}

bool OAIPolicyState::is_policy_definition_category_Set() const{
    return m_policy_definition_category_isSet;
}

bool OAIPolicyState::is_policy_definition_category_Valid() const{
    return m_policy_definition_category_isValid;
}

QString OAIPolicyState::getPolicyDefinitionId() const {
    return m_policy_definition_id;
}
void OAIPolicyState::setPolicyDefinitionId(const QString &policy_definition_id) {
    m_policy_definition_id = policy_definition_id;
    m_policy_definition_id_isSet = true;
}

bool OAIPolicyState::is_policy_definition_id_Set() const{
    return m_policy_definition_id_isSet;
}

bool OAIPolicyState::is_policy_definition_id_Valid() const{
    return m_policy_definition_id_isValid;
}

QString OAIPolicyState::getPolicyDefinitionName() const {
    return m_policy_definition_name;
}
void OAIPolicyState::setPolicyDefinitionName(const QString &policy_definition_name) {
    m_policy_definition_name = policy_definition_name;
    m_policy_definition_name_isSet = true;
}

bool OAIPolicyState::is_policy_definition_name_Set() const{
    return m_policy_definition_name_isSet;
}

bool OAIPolicyState::is_policy_definition_name_Valid() const{
    return m_policy_definition_name_isValid;
}

QString OAIPolicyState::getPolicyDefinitionReferenceId() const {
    return m_policy_definition_reference_id;
}
void OAIPolicyState::setPolicyDefinitionReferenceId(const QString &policy_definition_reference_id) {
    m_policy_definition_reference_id = policy_definition_reference_id;
    m_policy_definition_reference_id_isSet = true;
}

bool OAIPolicyState::is_policy_definition_reference_id_Set() const{
    return m_policy_definition_reference_id_isSet;
}

bool OAIPolicyState::is_policy_definition_reference_id_Valid() const{
    return m_policy_definition_reference_id_isValid;
}

QString OAIPolicyState::getPolicySetDefinitionCategory() const {
    return m_policy_set_definition_category;
}
void OAIPolicyState::setPolicySetDefinitionCategory(const QString &policy_set_definition_category) {
    m_policy_set_definition_category = policy_set_definition_category;
    m_policy_set_definition_category_isSet = true;
}

bool OAIPolicyState::is_policy_set_definition_category_Set() const{
    return m_policy_set_definition_category_isSet;
}

bool OAIPolicyState::is_policy_set_definition_category_Valid() const{
    return m_policy_set_definition_category_isValid;
}

QString OAIPolicyState::getPolicySetDefinitionId() const {
    return m_policy_set_definition_id;
}
void OAIPolicyState::setPolicySetDefinitionId(const QString &policy_set_definition_id) {
    m_policy_set_definition_id = policy_set_definition_id;
    m_policy_set_definition_id_isSet = true;
}

bool OAIPolicyState::is_policy_set_definition_id_Set() const{
    return m_policy_set_definition_id_isSet;
}

bool OAIPolicyState::is_policy_set_definition_id_Valid() const{
    return m_policy_set_definition_id_isValid;
}

QString OAIPolicyState::getPolicySetDefinitionName() const {
    return m_policy_set_definition_name;
}
void OAIPolicyState::setPolicySetDefinitionName(const QString &policy_set_definition_name) {
    m_policy_set_definition_name = policy_set_definition_name;
    m_policy_set_definition_name_isSet = true;
}

bool OAIPolicyState::is_policy_set_definition_name_Set() const{
    return m_policy_set_definition_name_isSet;
}

bool OAIPolicyState::is_policy_set_definition_name_Valid() const{
    return m_policy_set_definition_name_isValid;
}

QString OAIPolicyState::getPolicySetDefinitionOwner() const {
    return m_policy_set_definition_owner;
}
void OAIPolicyState::setPolicySetDefinitionOwner(const QString &policy_set_definition_owner) {
    m_policy_set_definition_owner = policy_set_definition_owner;
    m_policy_set_definition_owner_isSet = true;
}

bool OAIPolicyState::is_policy_set_definition_owner_Set() const{
    return m_policy_set_definition_owner_isSet;
}

bool OAIPolicyState::is_policy_set_definition_owner_Valid() const{
    return m_policy_set_definition_owner_isValid;
}

QString OAIPolicyState::getPolicySetDefinitionParameters() const {
    return m_policy_set_definition_parameters;
}
void OAIPolicyState::setPolicySetDefinitionParameters(const QString &policy_set_definition_parameters) {
    m_policy_set_definition_parameters = policy_set_definition_parameters;
    m_policy_set_definition_parameters_isSet = true;
}

bool OAIPolicyState::is_policy_set_definition_parameters_Set() const{
    return m_policy_set_definition_parameters_isSet;
}

bool OAIPolicyState::is_policy_set_definition_parameters_Valid() const{
    return m_policy_set_definition_parameters_isValid;
}

QString OAIPolicyState::getResourceGroup() const {
    return m_resource_group;
}
void OAIPolicyState::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIPolicyState::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIPolicyState::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIPolicyState::getResourceId() const {
    return m_resource_id;
}
void OAIPolicyState::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIPolicyState::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIPolicyState::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIPolicyState::getResourceLocation() const {
    return m_resource_location;
}
void OAIPolicyState::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIPolicyState::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIPolicyState::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIPolicyState::getResourceTags() const {
    return m_resource_tags;
}
void OAIPolicyState::setResourceTags(const QString &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAIPolicyState::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAIPolicyState::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

QString OAIPolicyState::getResourceType() const {
    return m_resource_type;
}
void OAIPolicyState::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIPolicyState::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIPolicyState::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIPolicyState::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIPolicyState::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIPolicyState::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIPolicyState::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QDateTime OAIPolicyState::getTimestamp() const {
    return m_timestamp;
}
void OAIPolicyState::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPolicyState::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPolicyState::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIPolicyState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_group_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
