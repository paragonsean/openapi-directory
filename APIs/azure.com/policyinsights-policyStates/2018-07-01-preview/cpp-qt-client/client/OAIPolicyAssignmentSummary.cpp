/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyAssignmentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyAssignmentSummary::OAIPolicyAssignmentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyAssignmentSummary::OAIPolicyAssignmentSummary() {
    this->initializeModel();
}

OAIPolicyAssignmentSummary::~OAIPolicyAssignmentSummary() {}

void OAIPolicyAssignmentSummary::initializeModel() {

    m_policy_assignment_id_isSet = false;
    m_policy_assignment_id_isValid = false;

    m_policy_definitions_isSet = false;
    m_policy_definitions_isValid = false;

    m_policy_set_definition_id_isSet = false;
    m_policy_set_definition_id_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIPolicyAssignmentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyAssignmentSummary::fromJsonObject(QJsonObject json) {

    m_policy_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_id, json[QString("policyAssignmentId")]);
    m_policy_assignment_id_isSet = !json[QString("policyAssignmentId")].isNull() && m_policy_assignment_id_isValid;

    m_policy_definitions_isValid = ::OpenAPI::fromJsonValue(m_policy_definitions, json[QString("policyDefinitions")]);
    m_policy_definitions_isSet = !json[QString("policyDefinitions")].isNull() && m_policy_definitions_isValid;

    m_policy_set_definition_id_isValid = ::OpenAPI::fromJsonValue(m_policy_set_definition_id, json[QString("policySetDefinitionId")]);
    m_policy_set_definition_id_isSet = !json[QString("policySetDefinitionId")].isNull() && m_policy_set_definition_id_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIPolicyAssignmentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyAssignmentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_assignment_id_isSet) {
        obj.insert(QString("policyAssignmentId"), ::OpenAPI::toJsonValue(m_policy_assignment_id));
    }
    if (m_policy_definitions.size() > 0) {
        obj.insert(QString("policyDefinitions"), ::OpenAPI::toJsonValue(m_policy_definitions));
    }
    if (m_policy_set_definition_id_isSet) {
        obj.insert(QString("policySetDefinitionId"), ::OpenAPI::toJsonValue(m_policy_set_definition_id));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIPolicyAssignmentSummary::getPolicyAssignmentId() const {
    return m_policy_assignment_id;
}
void OAIPolicyAssignmentSummary::setPolicyAssignmentId(const QString &policy_assignment_id) {
    m_policy_assignment_id = policy_assignment_id;
    m_policy_assignment_id_isSet = true;
}

bool OAIPolicyAssignmentSummary::is_policy_assignment_id_Set() const{
    return m_policy_assignment_id_isSet;
}

bool OAIPolicyAssignmentSummary::is_policy_assignment_id_Valid() const{
    return m_policy_assignment_id_isValid;
}

QList<OAIPolicyDefinitionSummary> OAIPolicyAssignmentSummary::getPolicyDefinitions() const {
    return m_policy_definitions;
}
void OAIPolicyAssignmentSummary::setPolicyDefinitions(const QList<OAIPolicyDefinitionSummary> &policy_definitions) {
    m_policy_definitions = policy_definitions;
    m_policy_definitions_isSet = true;
}

bool OAIPolicyAssignmentSummary::is_policy_definitions_Set() const{
    return m_policy_definitions_isSet;
}

bool OAIPolicyAssignmentSummary::is_policy_definitions_Valid() const{
    return m_policy_definitions_isValid;
}

QString OAIPolicyAssignmentSummary::getPolicySetDefinitionId() const {
    return m_policy_set_definition_id;
}
void OAIPolicyAssignmentSummary::setPolicySetDefinitionId(const QString &policy_set_definition_id) {
    m_policy_set_definition_id = policy_set_definition_id;
    m_policy_set_definition_id_isSet = true;
}

bool OAIPolicyAssignmentSummary::is_policy_set_definition_id_Set() const{
    return m_policy_set_definition_id_isSet;
}

bool OAIPolicyAssignmentSummary::is_policy_set_definition_id_Valid() const{
    return m_policy_set_definition_id_isValid;
}

OAISummaryResults OAIPolicyAssignmentSummary::getResults() const {
    return m_results;
}
void OAIPolicyAssignmentSummary::setResults(const OAISummaryResults &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPolicyAssignmentSummary::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPolicyAssignmentSummary::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIPolicyAssignmentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_set_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyAssignmentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
