/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressionEvaluationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressionEvaluationDetails::OAIExpressionEvaluationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressionEvaluationDetails::OAIExpressionEvaluationDetails() {
    this->initializeModel();
}

OAIExpressionEvaluationDetails::~OAIExpressionEvaluationDetails() {}

void OAIExpressionEvaluationDetails::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_expression_value_isSet = false;
    m_expression_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_target_value_isSet = false;
    m_target_value_isValid = false;
}

void OAIExpressionEvaluationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressionEvaluationDetails::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_expression_value_isValid = ::OpenAPI::fromJsonValue(m_expression_value, json[QString("expressionValue")]);
    m_expression_value_isSet = !json[QString("expressionValue")].isNull() && m_expression_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_target_value_isValid = ::OpenAPI::fromJsonValue(m_target_value, json[QString("targetValue")]);
    m_target_value_isSet = !json[QString("targetValue")].isNull() && m_target_value_isValid;
}

QString OAIExpressionEvaluationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressionEvaluationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_expression_value_isSet) {
        obj.insert(QString("expressionValue"), ::OpenAPI::toJsonValue(m_expression_value));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_target_value_isSet) {
        obj.insert(QString("targetValue"), ::OpenAPI::toJsonValue(m_target_value));
    }
    return obj;
}

QString OAIExpressionEvaluationDetails::getExpression() const {
    return m_expression;
}
void OAIExpressionEvaluationDetails::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIExpressionEvaluationDetails::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIObject OAIExpressionEvaluationDetails::getExpressionValue() const {
    return m_expression_value;
}
void OAIExpressionEvaluationDetails::setExpressionValue(const OAIObject &expression_value) {
    m_expression_value = expression_value;
    m_expression_value_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_expression_value_Set() const{
    return m_expression_value_isSet;
}

bool OAIExpressionEvaluationDetails::is_expression_value_Valid() const{
    return m_expression_value_isValid;
}

QString OAIExpressionEvaluationDetails::getROperator() const {
    return m_r_operator;
}
void OAIExpressionEvaluationDetails::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIExpressionEvaluationDetails::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIExpressionEvaluationDetails::getPath() const {
    return m_path;
}
void OAIExpressionEvaluationDetails::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_path_Set() const{
    return m_path_isSet;
}

bool OAIExpressionEvaluationDetails::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIExpressionEvaluationDetails::getResult() const {
    return m_result;
}
void OAIExpressionEvaluationDetails::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_result_Set() const{
    return m_result_isSet;
}

bool OAIExpressionEvaluationDetails::is_result_Valid() const{
    return m_result_isValid;
}

OAIObject OAIExpressionEvaluationDetails::getTargetValue() const {
    return m_target_value;
}
void OAIExpressionEvaluationDetails::setTargetValue(const OAIObject &target_value) {
    m_target_value = target_value;
    m_target_value_isSet = true;
}

bool OAIExpressionEvaluationDetails::is_target_value_Set() const{
    return m_target_value_isSet;
}

bool OAIExpressionEvaluationDetails::is_target_value_Valid() const{
    return m_target_value_isValid;
}

bool OAIExpressionEvaluationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressionEvaluationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
