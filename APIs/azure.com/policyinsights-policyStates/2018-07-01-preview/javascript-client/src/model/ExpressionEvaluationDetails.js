/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExpressionEvaluationDetails model module.
 * @module model/ExpressionEvaluationDetails
 * @version 2018-07-01-preview
 */
class ExpressionEvaluationDetails {
    /**
     * Constructs a new <code>ExpressionEvaluationDetails</code>.
     * Evaluation details of policy language expressions.
     * @alias module:model/ExpressionEvaluationDetails
     */
    constructor() { 
        
        ExpressionEvaluationDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressionEvaluationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressionEvaluationDetails} obj Optional instance to populate.
     * @return {module:model/ExpressionEvaluationDetails} The populated <code>ExpressionEvaluationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressionEvaluationDetails();

            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('expressionValue')) {
                obj['expressionValue'] = ApiClient.convertToType(data['expressionValue'], Object);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('targetValue')) {
                obj['targetValue'] = ApiClient.convertToType(data['targetValue'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressionEvaluationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressionEvaluationDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}



/**
 * Expression evaluated.
 * @member {String} expression
 */
ExpressionEvaluationDetails.prototype['expression'] = undefined;

/**
 * Value of the expression.
 * @member {Object} expressionValue
 */
ExpressionEvaluationDetails.prototype['expressionValue'] = undefined;

/**
 * Operator to compare the expression value and the target value.
 * @member {String} operator
 */
ExpressionEvaluationDetails.prototype['operator'] = undefined;

/**
 * Property path if the expression is a field or an alias.
 * @member {String} path
 */
ExpressionEvaluationDetails.prototype['path'] = undefined;

/**
 * Evaluation result.
 * @member {String} result
 */
ExpressionEvaluationDetails.prototype['result'] = undefined;

/**
 * Target value to be compared with the expression value.
 * @member {Object} targetValue
 */
ExpressionEvaluationDetails.prototype['targetValue'] = undefined;






export default ExpressionEvaluationDetails;

