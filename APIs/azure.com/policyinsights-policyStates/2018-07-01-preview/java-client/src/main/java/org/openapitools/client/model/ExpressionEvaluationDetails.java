/*
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation details of policy language expressions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:25.435433-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressionEvaluationDetails {
  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_EXPRESSION_VALUE = "expressionValue";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_VALUE)
  private Object expressionValue;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_TARGET_VALUE = "targetValue";
  @SerializedName(SERIALIZED_NAME_TARGET_VALUE)
  private Object targetValue;

  public ExpressionEvaluationDetails() {
  }

  public ExpressionEvaluationDetails expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Expression evaluated.
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public ExpressionEvaluationDetails expressionValue(Object expressionValue) {
    this.expressionValue = expressionValue;
    return this;
  }

  /**
   * Value of the expression.
   * @return expressionValue
   */
  @javax.annotation.Nullable
  public Object getExpressionValue() {
    return expressionValue;
  }

  public void setExpressionValue(Object expressionValue) {
    this.expressionValue = expressionValue;
  }


  public ExpressionEvaluationDetails operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Operator to compare the expression value and the target value.
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public ExpressionEvaluationDetails path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Property path if the expression is a field or an alias.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ExpressionEvaluationDetails result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Evaluation result.
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public ExpressionEvaluationDetails targetValue(Object targetValue) {
    this.targetValue = targetValue;
    return this;
  }

  /**
   * Target value to be compared with the expression value.
   * @return targetValue
   */
  @javax.annotation.Nullable
  public Object getTargetValue() {
    return targetValue;
  }

  public void setTargetValue(Object targetValue) {
    this.targetValue = targetValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionEvaluationDetails expressionEvaluationDetails = (ExpressionEvaluationDetails) o;
    return Objects.equals(this.expression, expressionEvaluationDetails.expression) &&
        Objects.equals(this.expressionValue, expressionEvaluationDetails.expressionValue) &&
        Objects.equals(this.operator, expressionEvaluationDetails.operator) &&
        Objects.equals(this.path, expressionEvaluationDetails.path) &&
        Objects.equals(this.result, expressionEvaluationDetails.result) &&
        Objects.equals(this.targetValue, expressionEvaluationDetails.targetValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expression, expressionValue, operator, path, result, targetValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionEvaluationDetails {\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    expressionValue: ").append(toIndentedString(expressionValue)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    targetValue: ").append(toIndentedString(targetValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expression");
    openapiFields.add("expressionValue");
    openapiFields.add("operator");
    openapiFields.add("path");
    openapiFields.add("result");
    openapiFields.add("targetValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressionEvaluationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressionEvaluationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressionEvaluationDetails is not found in the empty JSON string", ExpressionEvaluationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressionEvaluationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressionEvaluationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressionEvaluationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressionEvaluationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressionEvaluationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressionEvaluationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressionEvaluationDetails>() {
           @Override
           public void write(JsonWriter out, ExpressionEvaluationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressionEvaluationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressionEvaluationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressionEvaluationDetails
   * @throws IOException if the JSON string is invalid with respect to ExpressionEvaluationDetails
   */
  public static ExpressionEvaluationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressionEvaluationDetails.class);
  }

  /**
   * Convert an instance of ExpressionEvaluationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

