# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression_evaluation_details import ExpressionEvaluationDetails
from openapi_server.models.if_not_exists_evaluation_details import IfNotExistsEvaluationDetails
from openapi_server import util


class PolicyEvaluationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluated_expressions: List[ExpressionEvaluationDetails]=None, if_not_exists_details: IfNotExistsEvaluationDetails=None):
        """PolicyEvaluationDetails - a model defined in OpenAPI

        :param evaluated_expressions: The evaluated_expressions of this PolicyEvaluationDetails.
        :param if_not_exists_details: The if_not_exists_details of this PolicyEvaluationDetails.
        """
        self.openapi_types = {
            'evaluated_expressions': List[ExpressionEvaluationDetails],
            'if_not_exists_details': IfNotExistsEvaluationDetails
        }

        self.attribute_map = {
            'evaluated_expressions': 'evaluatedExpressions',
            'if_not_exists_details': 'ifNotExistsDetails'
        }

        self._evaluated_expressions = evaluated_expressions
        self._if_not_exists_details = if_not_exists_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyEvaluationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyEvaluationDetails of this PolicyEvaluationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluated_expressions(self):
        """Gets the evaluated_expressions of this PolicyEvaluationDetails.

        Details of the evaluated expressions.

        :return: The evaluated_expressions of this PolicyEvaluationDetails.
        :rtype: List[ExpressionEvaluationDetails]
        """
        return self._evaluated_expressions

    @evaluated_expressions.setter
    def evaluated_expressions(self, evaluated_expressions):
        """Sets the evaluated_expressions of this PolicyEvaluationDetails.

        Details of the evaluated expressions.

        :param evaluated_expressions: The evaluated_expressions of this PolicyEvaluationDetails.
        :type evaluated_expressions: List[ExpressionEvaluationDetails]
        """

        self._evaluated_expressions = evaluated_expressions

    @property
    def if_not_exists_details(self):
        """Gets the if_not_exists_details of this PolicyEvaluationDetails.


        :return: The if_not_exists_details of this PolicyEvaluationDetails.
        :rtype: IfNotExistsEvaluationDetails
        """
        return self._if_not_exists_details

    @if_not_exists_details.setter
    def if_not_exists_details(self, if_not_exists_details):
        """Sets the if_not_exists_details of this PolicyEvaluationDetails.


        :param if_not_exists_details: The if_not_exists_details of this PolicyEvaluationDetails.
        :type if_not_exists_details: IfNotExistsEvaluationDetails
        """

        self._if_not_exists_details = if_not_exists_details
