# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressionEvaluationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: str=None, expression_value: object=None, operator: str=None, path: str=None, result: str=None, target_value: object=None):
        """ExpressionEvaluationDetails - a model defined in OpenAPI

        :param expression: The expression of this ExpressionEvaluationDetails.
        :param expression_value: The expression_value of this ExpressionEvaluationDetails.
        :param operator: The operator of this ExpressionEvaluationDetails.
        :param path: The path of this ExpressionEvaluationDetails.
        :param result: The result of this ExpressionEvaluationDetails.
        :param target_value: The target_value of this ExpressionEvaluationDetails.
        """
        self.openapi_types = {
            'expression': str,
            'expression_value': object,
            'operator': str,
            'path': str,
            'result': str,
            'target_value': object
        }

        self.attribute_map = {
            'expression': 'expression',
            'expression_value': 'expressionValue',
            'operator': 'operator',
            'path': 'path',
            'result': 'result',
            'target_value': 'targetValue'
        }

        self._expression = expression
        self._expression_value = expression_value
        self._operator = operator
        self._path = path
        self._result = result
        self._target_value = target_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressionEvaluationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressionEvaluationDetails of this ExpressionEvaluationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this ExpressionEvaluationDetails.

        Expression evaluated.

        :return: The expression of this ExpressionEvaluationDetails.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ExpressionEvaluationDetails.

        Expression evaluated.

        :param expression: The expression of this ExpressionEvaluationDetails.
        :type expression: str
        """

        self._expression = expression

    @property
    def expression_value(self):
        """Gets the expression_value of this ExpressionEvaluationDetails.

        Value of the expression.

        :return: The expression_value of this ExpressionEvaluationDetails.
        :rtype: object
        """
        return self._expression_value

    @expression_value.setter
    def expression_value(self, expression_value):
        """Sets the expression_value of this ExpressionEvaluationDetails.

        Value of the expression.

        :param expression_value: The expression_value of this ExpressionEvaluationDetails.
        :type expression_value: object
        """

        self._expression_value = expression_value

    @property
    def operator(self):
        """Gets the operator of this ExpressionEvaluationDetails.

        Operator to compare the expression value and the target value.

        :return: The operator of this ExpressionEvaluationDetails.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ExpressionEvaluationDetails.

        Operator to compare the expression value and the target value.

        :param operator: The operator of this ExpressionEvaluationDetails.
        :type operator: str
        """

        self._operator = operator

    @property
    def path(self):
        """Gets the path of this ExpressionEvaluationDetails.

        Property path if the expression is a field or an alias.

        :return: The path of this ExpressionEvaluationDetails.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ExpressionEvaluationDetails.

        Property path if the expression is a field or an alias.

        :param path: The path of this ExpressionEvaluationDetails.
        :type path: str
        """

        self._path = path

    @property
    def result(self):
        """Gets the result of this ExpressionEvaluationDetails.

        Evaluation result.

        :return: The result of this ExpressionEvaluationDetails.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ExpressionEvaluationDetails.

        Evaluation result.

        :param result: The result of this ExpressionEvaluationDetails.
        :type result: str
        """

        self._result = result

    @property
    def target_value(self):
        """Gets the target_value of this ExpressionEvaluationDetails.

        Target value to be compared with the expression value.

        :return: The target_value of this ExpressionEvaluationDetails.
        :rtype: object
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this ExpressionEvaluationDetails.

        Target value to be compared with the expression value.

        :param target_value: The target_value of this ExpressionEvaluationDetails.
        :type target_value: object
        """

        self._target_value = target_value
