/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-12-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperationsListResults.h"
#include "OAIPolicyStatesQueryResults.h"
#include "OAIQueryFailure.h"
#include "OAISummarizeResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyStatesGetMetadata(const QString &scope, const QString &api_version);

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForManagementGroup(const QString &policy_states_resource, const QString &management_groups_namespace, const QString &management_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForPolicyDefinition(const QString &policy_states_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_definition_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForPolicySetDefinition(const QString &policy_states_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_set_definition_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForResource(const QString &policy_states_resource, const QString &resource_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForResourceGroup(const QString &policy_states_resource, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignment(const QString &policy_states_resource, const QString &subscription_id, const QString &resource_group_name, const QString &authorization_namespace, const QString &policy_assignment_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForSubscription(const QString &policy_states_resource, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignment(const QString &policy_states_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_assignment_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForManagementGroup(const QString &policy_states_summary_resource, const QString &management_groups_namespace, const QString &management_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForPolicyDefinition(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_definition_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForPolicySetDefinition(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_set_definition_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForResource(const QString &policy_states_summary_resource, const QString &resource_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForResourceGroup(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForResourceGroupLevelPolicyAssignment(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &resource_group_name, const QString &authorization_namespace, const QString &policy_assignment_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForSubscription(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_states_summary_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  authorization_namespace QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void policyStatesSummarizeForSubscriptionLevelPolicyAssignment(const QString &policy_states_summary_resource, const QString &subscription_id, const QString &authorization_namespace, const QString &policy_assignment_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsListCallback(OAIHttpRequestWorker *worker);
    void policyStatesGetMetadataCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForPolicyDefinitionCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForPolicySetDefinitionCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForResourceCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForSubscriptionCallback(OAIHttpRequestWorker *worker);
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForPolicyDefinitionCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForPolicySetDefinitionCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForResourceCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForSubscriptionCallback(OAIHttpRequestWorker *worker);
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsListSignal(OAIOperationsListResults summary);
    void policyStatesGetMetadataSignal(QString summary);
    void policyStatesListQueryResultsForManagementGroupSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForPolicyDefinitionSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForPolicySetDefinitionSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignal(OAIPolicyStatesQueryResults summary);
    void policyStatesSummarizeForManagementGroupSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForPolicyDefinitionSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForPolicySetDefinitionSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForResourceSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForResourceGroupSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForSubscriptionSignal(OAISummarizeResults summary);
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignal(OAISummarizeResults summary);


    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationsListResults summary);
    void policyStatesGetMetadataSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void policyStatesListQueryResultsForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForPolicyDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForPolicySetDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIPolicyStatesQueryResults summary);
    void policyStatesSummarizeForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForPolicyDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForPolicySetDefinitionSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForResourceSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalFull(OAIHttpRequestWorker *worker, OAISummarizeResults summary);

    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationsListResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationsListResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesGetMetadataSignalError() instead")
    void policyStatesGetMetadataSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesGetMetadataSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForManagementGroupSignalError() instead")
    void policyStatesListQueryResultsForManagementGroupSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForManagementGroupSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForPolicyDefinitionSignalError() instead")
    void policyStatesListQueryResultsForPolicyDefinitionSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForPolicyDefinitionSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForPolicySetDefinitionSignalError() instead")
    void policyStatesListQueryResultsForPolicySetDefinitionSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForPolicySetDefinitionSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceSignalError() instead")
    void policyStatesListQueryResultsForResourceSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupSignalError() instead")
    void policyStatesListQueryResultsForResourceGroupSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalError() instead")
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionSignalError() instead")
    void policyStatesListQueryResultsForSubscriptionSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalError() instead")
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalE(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalError(OAIPolicyStatesQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForManagementGroupSignalError() instead")
    void policyStatesSummarizeForManagementGroupSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForManagementGroupSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForPolicyDefinitionSignalError() instead")
    void policyStatesSummarizeForPolicyDefinitionSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForPolicyDefinitionSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForPolicySetDefinitionSignalError() instead")
    void policyStatesSummarizeForPolicySetDefinitionSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForPolicySetDefinitionSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceSignalError() instead")
    void policyStatesSummarizeForResourceSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceGroupSignalError() instead")
    void policyStatesSummarizeForResourceGroupSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceGroupSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalError() instead")
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForSubscriptionSignalError() instead")
    void policyStatesSummarizeForSubscriptionSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForSubscriptionSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalError() instead")
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalE(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalError(OAISummarizeResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesGetMetadataSignalErrorFull() instead")
    void policyStatesGetMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesGetMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForManagementGroupSignalErrorFull() instead")
    void policyStatesListQueryResultsForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForPolicyDefinitionSignalErrorFull() instead")
    void policyStatesListQueryResultsForPolicyDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForPolicyDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForPolicySetDefinitionSignalErrorFull() instead")
    void policyStatesListQueryResultsForPolicySetDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForPolicySetDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceSignalErrorFull() instead")
    void policyStatesListQueryResultsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupSignalErrorFull() instead")
    void policyStatesListQueryResultsForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalErrorFull() instead")
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionSignalErrorFull() instead")
    void policyStatesListQueryResultsForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalErrorFull() instead")
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForManagementGroupSignalErrorFull() instead")
    void policyStatesSummarizeForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForPolicyDefinitionSignalErrorFull() instead")
    void policyStatesSummarizeForPolicyDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForPolicyDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForPolicySetDefinitionSignalErrorFull() instead")
    void policyStatesSummarizeForPolicySetDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForPolicySetDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceSignalErrorFull() instead")
    void policyStatesSummarizeForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceGroupSignalErrorFull() instead")
    void policyStatesSummarizeForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalErrorFull() instead")
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForResourceGroupLevelPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForSubscriptionSignalErrorFull() instead")
    void policyStatesSummarizeForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalErrorFull() instead")
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyStatesSummarizeForSubscriptionLevelPolicyAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
