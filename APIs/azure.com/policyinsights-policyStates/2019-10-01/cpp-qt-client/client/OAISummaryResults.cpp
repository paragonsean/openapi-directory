/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummaryResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummaryResults::OAISummaryResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummaryResults::OAISummaryResults() {
    this->initializeModel();
}

OAISummaryResults::~OAISummaryResults() {}

void OAISummaryResults::initializeModel() {

    m_non_compliant_policies_isSet = false;
    m_non_compliant_policies_isValid = false;

    m_non_compliant_resources_isSet = false;
    m_non_compliant_resources_isValid = false;

    m_policy_details_isSet = false;
    m_policy_details_isValid = false;

    m_policy_group_details_isSet = false;
    m_policy_group_details_isValid = false;

    m_query_results_uri_isSet = false;
    m_query_results_uri_isValid = false;

    m_resource_details_isSet = false;
    m_resource_details_isValid = false;
}

void OAISummaryResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummaryResults::fromJsonObject(QJsonObject json) {

    m_non_compliant_policies_isValid = ::OpenAPI::fromJsonValue(m_non_compliant_policies, json[QString("nonCompliantPolicies")]);
    m_non_compliant_policies_isSet = !json[QString("nonCompliantPolicies")].isNull() && m_non_compliant_policies_isValid;

    m_non_compliant_resources_isValid = ::OpenAPI::fromJsonValue(m_non_compliant_resources, json[QString("nonCompliantResources")]);
    m_non_compliant_resources_isSet = !json[QString("nonCompliantResources")].isNull() && m_non_compliant_resources_isValid;

    m_policy_details_isValid = ::OpenAPI::fromJsonValue(m_policy_details, json[QString("policyDetails")]);
    m_policy_details_isSet = !json[QString("policyDetails")].isNull() && m_policy_details_isValid;

    m_policy_group_details_isValid = ::OpenAPI::fromJsonValue(m_policy_group_details, json[QString("policyGroupDetails")]);
    m_policy_group_details_isSet = !json[QString("policyGroupDetails")].isNull() && m_policy_group_details_isValid;

    m_query_results_uri_isValid = ::OpenAPI::fromJsonValue(m_query_results_uri, json[QString("queryResultsUri")]);
    m_query_results_uri_isSet = !json[QString("queryResultsUri")].isNull() && m_query_results_uri_isValid;

    m_resource_details_isValid = ::OpenAPI::fromJsonValue(m_resource_details, json[QString("resourceDetails")]);
    m_resource_details_isSet = !json[QString("resourceDetails")].isNull() && m_resource_details_isValid;
}

QString OAISummaryResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummaryResults::asJsonObject() const {
    QJsonObject obj;
    if (m_non_compliant_policies_isSet) {
        obj.insert(QString("nonCompliantPolicies"), ::OpenAPI::toJsonValue(m_non_compliant_policies));
    }
    if (m_non_compliant_resources_isSet) {
        obj.insert(QString("nonCompliantResources"), ::OpenAPI::toJsonValue(m_non_compliant_resources));
    }
    if (m_policy_details.size() > 0) {
        obj.insert(QString("policyDetails"), ::OpenAPI::toJsonValue(m_policy_details));
    }
    if (m_policy_group_details.size() > 0) {
        obj.insert(QString("policyGroupDetails"), ::OpenAPI::toJsonValue(m_policy_group_details));
    }
    if (m_query_results_uri_isSet) {
        obj.insert(QString("queryResultsUri"), ::OpenAPI::toJsonValue(m_query_results_uri));
    }
    if (m_resource_details.size() > 0) {
        obj.insert(QString("resourceDetails"), ::OpenAPI::toJsonValue(m_resource_details));
    }
    return obj;
}

qint32 OAISummaryResults::getNonCompliantPolicies() const {
    return m_non_compliant_policies;
}
void OAISummaryResults::setNonCompliantPolicies(const qint32 &non_compliant_policies) {
    m_non_compliant_policies = non_compliant_policies;
    m_non_compliant_policies_isSet = true;
}

bool OAISummaryResults::is_non_compliant_policies_Set() const{
    return m_non_compliant_policies_isSet;
}

bool OAISummaryResults::is_non_compliant_policies_Valid() const{
    return m_non_compliant_policies_isValid;
}

qint32 OAISummaryResults::getNonCompliantResources() const {
    return m_non_compliant_resources;
}
void OAISummaryResults::setNonCompliantResources(const qint32 &non_compliant_resources) {
    m_non_compliant_resources = non_compliant_resources;
    m_non_compliant_resources_isSet = true;
}

bool OAISummaryResults::is_non_compliant_resources_Set() const{
    return m_non_compliant_resources_isSet;
}

bool OAISummaryResults::is_non_compliant_resources_Valid() const{
    return m_non_compliant_resources_isValid;
}

QList<OAIComplianceDetail> OAISummaryResults::getPolicyDetails() const {
    return m_policy_details;
}
void OAISummaryResults::setPolicyDetails(const QList<OAIComplianceDetail> &policy_details) {
    m_policy_details = policy_details;
    m_policy_details_isSet = true;
}

bool OAISummaryResults::is_policy_details_Set() const{
    return m_policy_details_isSet;
}

bool OAISummaryResults::is_policy_details_Valid() const{
    return m_policy_details_isValid;
}

QList<OAIComplianceDetail> OAISummaryResults::getPolicyGroupDetails() const {
    return m_policy_group_details;
}
void OAISummaryResults::setPolicyGroupDetails(const QList<OAIComplianceDetail> &policy_group_details) {
    m_policy_group_details = policy_group_details;
    m_policy_group_details_isSet = true;
}

bool OAISummaryResults::is_policy_group_details_Set() const{
    return m_policy_group_details_isSet;
}

bool OAISummaryResults::is_policy_group_details_Valid() const{
    return m_policy_group_details_isValid;
}

QString OAISummaryResults::getQueryResultsUri() const {
    return m_query_results_uri;
}
void OAISummaryResults::setQueryResultsUri(const QString &query_results_uri) {
    m_query_results_uri = query_results_uri;
    m_query_results_uri_isSet = true;
}

bool OAISummaryResults::is_query_results_uri_Set() const{
    return m_query_results_uri_isSet;
}

bool OAISummaryResults::is_query_results_uri_Valid() const{
    return m_query_results_uri_isValid;
}

QList<OAIComplianceDetail> OAISummaryResults::getResourceDetails() const {
    return m_resource_details;
}
void OAISummaryResults::setResourceDetails(const QList<OAIComplianceDetail> &resource_details) {
    m_resource_details = resource_details;
    m_resource_details_isSet = true;
}

bool OAISummaryResults::is_resource_details_Set() const{
    return m_resource_details_isSet;
}

bool OAISummaryResults::is_resource_details_Valid() const{
    return m_resource_details_isValid;
}

bool OAISummaryResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_non_compliant_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_compliant_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_group_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_results_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummaryResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
