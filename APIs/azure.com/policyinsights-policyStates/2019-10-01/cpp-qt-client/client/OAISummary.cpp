/**
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary::OAISummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary::OAISummary() {
    this->initializeModel();
}

OAISummary::~OAISummary() {}

void OAISummary::initializeModel() {

    m_odata_context_isSet = false;
    m_odata_context_isValid = false;

    m_odata_id_isSet = false;
    m_odata_id_isValid = false;

    m_policy_assignments_isSet = false;
    m_policy_assignments_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAISummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary::fromJsonObject(QJsonObject json) {

    m_odata_context_isValid = ::OpenAPI::fromJsonValue(m_odata_context, json[QString("@odata.context")]);
    m_odata_context_isSet = !json[QString("@odata.context")].isNull() && m_odata_context_isValid;

    m_odata_id_isValid = ::OpenAPI::fromJsonValue(m_odata_id, json[QString("@odata.id")]);
    m_odata_id_isSet = !json[QString("@odata.id")].isNull() && m_odata_id_isValid;

    m_policy_assignments_isValid = ::OpenAPI::fromJsonValue(m_policy_assignments, json[QString("policyAssignments")]);
    m_policy_assignments_isSet = !json[QString("policyAssignments")].isNull() && m_policy_assignments_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAISummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary::asJsonObject() const {
    QJsonObject obj;
    if (m_odata_context_isSet) {
        obj.insert(QString("@odata.context"), ::OpenAPI::toJsonValue(m_odata_context));
    }
    if (m_odata_id_isSet) {
        obj.insert(QString("@odata.id"), ::OpenAPI::toJsonValue(m_odata_id));
    }
    if (m_policy_assignments.size() > 0) {
        obj.insert(QString("policyAssignments"), ::OpenAPI::toJsonValue(m_policy_assignments));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAISummary::getOdataContext() const {
    return m_odata_context;
}
void OAISummary::setOdataContext(const QString &odata_context) {
    m_odata_context = odata_context;
    m_odata_context_isSet = true;
}

bool OAISummary::is_odata_context_Set() const{
    return m_odata_context_isSet;
}

bool OAISummary::is_odata_context_Valid() const{
    return m_odata_context_isValid;
}

QString OAISummary::getOdataId() const {
    return m_odata_id;
}
void OAISummary::setOdataId(const QString &odata_id) {
    m_odata_id = odata_id;
    m_odata_id_isSet = true;
}

bool OAISummary::is_odata_id_Set() const{
    return m_odata_id_isSet;
}

bool OAISummary::is_odata_id_Valid() const{
    return m_odata_id_isValid;
}

QList<OAIPolicyAssignmentSummary> OAISummary::getPolicyAssignments() const {
    return m_policy_assignments;
}
void OAISummary::setPolicyAssignments(const QList<OAIPolicyAssignmentSummary> &policy_assignments) {
    m_policy_assignments = policy_assignments;
    m_policy_assignments_isSet = true;
}

bool OAISummary::is_policy_assignments_Set() const{
    return m_policy_assignments_isSet;
}

bool OAISummary::is_policy_assignments_Valid() const{
    return m_policy_assignments_isValid;
}

OAISummaryResults OAISummary::getResults() const {
    return m_results;
}
void OAISummary::setResults(const OAISummaryResults &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISummary::is_results_Set() const{
    return m_results_isSet;
}

bool OAISummary::is_results_Valid() const{
    return m_results_isValid;
}

bool OAISummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_odata_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
