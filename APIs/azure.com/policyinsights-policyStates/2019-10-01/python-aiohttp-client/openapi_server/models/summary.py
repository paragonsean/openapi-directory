# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_assignment_summary import PolicyAssignmentSummary
from openapi_server.models.summary_results import SummaryResults
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_context: str=None, odata_id: str=None, policy_assignments: List[PolicyAssignmentSummary]=None, results: SummaryResults=None):
        """Summary - a model defined in OpenAPI

        :param odata_context: The odata_context of this Summary.
        :param odata_id: The odata_id of this Summary.
        :param policy_assignments: The policy_assignments of this Summary.
        :param results: The results of this Summary.
        """
        self.openapi_types = {
            'odata_context': str,
            'odata_id': str,
            'policy_assignments': List[PolicyAssignmentSummary],
            'results': SummaryResults
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'policy_assignments': 'policyAssignments',
            'results': 'results'
        }

        self._odata_context = odata_context
        self._odata_id = odata_id
        self._policy_assignments = policy_assignments
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_context(self):
        """Gets the odata_context of this Summary.

        OData context string; used by OData clients to resolve type information based on metadata.

        :return: The odata_context of this Summary.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """Sets the odata_context of this Summary.

        OData context string; used by OData clients to resolve type information based on metadata.

        :param odata_context: The odata_context of this Summary.
        :type odata_context: str
        """

        self._odata_context = odata_context

    @property
    def odata_id(self):
        """Gets the odata_id of this Summary.

        OData entity ID; always set to null since summaries do not have an entity ID.

        :return: The odata_id of this Summary.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """Sets the odata_id of this Summary.

        OData entity ID; always set to null since summaries do not have an entity ID.

        :param odata_id: The odata_id of this Summary.
        :type odata_id: str
        """

        self._odata_id = odata_id

    @property
    def policy_assignments(self):
        """Gets the policy_assignments of this Summary.

        Policy assignments summary.

        :return: The policy_assignments of this Summary.
        :rtype: List[PolicyAssignmentSummary]
        """
        return self._policy_assignments

    @policy_assignments.setter
    def policy_assignments(self, policy_assignments):
        """Sets the policy_assignments of this Summary.

        Policy assignments summary.

        :param policy_assignments: The policy_assignments of this Summary.
        :type policy_assignments: List[PolicyAssignmentSummary]
        """

        self._policy_assignments = policy_assignments

    @property
    def results(self):
        """Gets the results of this Summary.


        :return: The results of this Summary.
        :rtype: SummaryResults
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Summary.


        :param results: The results of this Summary.
        :type results: SummaryResults
        """

        self._results = results
