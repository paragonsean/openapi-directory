# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IfNotExistsEvaluationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: str=None, total_resources: int=None):
        """IfNotExistsEvaluationDetails - a model defined in OpenAPI

        :param resource_id: The resource_id of this IfNotExistsEvaluationDetails.
        :param total_resources: The total_resources of this IfNotExistsEvaluationDetails.
        """
        self.openapi_types = {
            'resource_id': str,
            'total_resources': int
        }

        self.attribute_map = {
            'resource_id': 'resourceId',
            'total_resources': 'totalResources'
        }

        self._resource_id = resource_id
        self._total_resources = total_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IfNotExistsEvaluationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IfNotExistsEvaluationDetails of this IfNotExistsEvaluationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this IfNotExistsEvaluationDetails.

        ID of the last evaluated resource for IfNotExists effect.

        :return: The resource_id of this IfNotExistsEvaluationDetails.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this IfNotExistsEvaluationDetails.

        ID of the last evaluated resource for IfNotExists effect.

        :param resource_id: The resource_id of this IfNotExistsEvaluationDetails.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def total_resources(self):
        """Gets the total_resources of this IfNotExistsEvaluationDetails.

        Total number of resources to which the existence condition is applicable.

        :return: The total_resources of this IfNotExistsEvaluationDetails.
        :rtype: int
        """
        return self._total_resources

    @total_resources.setter
    def total_resources(self, total_resources):
        """Sets the total_resources of this IfNotExistsEvaluationDetails.

        Total number of resources to which the existence condition is applicable.

        :param total_resources: The total_resources of this IfNotExistsEvaluationDetails.
        :type total_resources: int
        """

        self._total_resources = total_resources
