/*
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComplianceDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compliance summary on a particular summary level.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:23.480991-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SummaryResults {
  public static final String SERIALIZED_NAME_NON_COMPLIANT_POLICIES = "nonCompliantPolicies";
  @SerializedName(SERIALIZED_NAME_NON_COMPLIANT_POLICIES)
  private Integer nonCompliantPolicies;

  public static final String SERIALIZED_NAME_NON_COMPLIANT_RESOURCES = "nonCompliantResources";
  @SerializedName(SERIALIZED_NAME_NON_COMPLIANT_RESOURCES)
  private Integer nonCompliantResources;

  public static final String SERIALIZED_NAME_POLICY_DETAILS = "policyDetails";
  @SerializedName(SERIALIZED_NAME_POLICY_DETAILS)
  private List<ComplianceDetail> policyDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_GROUP_DETAILS = "policyGroupDetails";
  @SerializedName(SERIALIZED_NAME_POLICY_GROUP_DETAILS)
  private List<ComplianceDetail> policyGroupDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_RESULTS_URI = "queryResultsUri";
  @SerializedName(SERIALIZED_NAME_QUERY_RESULTS_URI)
  private String queryResultsUri;

  public static final String SERIALIZED_NAME_RESOURCE_DETAILS = "resourceDetails";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DETAILS)
  private List<ComplianceDetail> resourceDetails = new ArrayList<>();

  public SummaryResults() {
  }

  public SummaryResults nonCompliantPolicies(Integer nonCompliantPolicies) {
    this.nonCompliantPolicies = nonCompliantPolicies;
    return this;
  }

  /**
   * Number of non-compliant policies.
   * minimum: 0
   * @return nonCompliantPolicies
   */
  @javax.annotation.Nullable
  public Integer getNonCompliantPolicies() {
    return nonCompliantPolicies;
  }

  public void setNonCompliantPolicies(Integer nonCompliantPolicies) {
    this.nonCompliantPolicies = nonCompliantPolicies;
  }


  public SummaryResults nonCompliantResources(Integer nonCompliantResources) {
    this.nonCompliantResources = nonCompliantResources;
    return this;
  }

  /**
   * Number of non-compliant resources.
   * minimum: 0
   * @return nonCompliantResources
   */
  @javax.annotation.Nullable
  public Integer getNonCompliantResources() {
    return nonCompliantResources;
  }

  public void setNonCompliantResources(Integer nonCompliantResources) {
    this.nonCompliantResources = nonCompliantResources;
  }


  public SummaryResults policyDetails(List<ComplianceDetail> policyDetails) {
    this.policyDetails = policyDetails;
    return this;
  }

  public SummaryResults addPolicyDetailsItem(ComplianceDetail policyDetailsItem) {
    if (this.policyDetails == null) {
      this.policyDetails = new ArrayList<>();
    }
    this.policyDetails.add(policyDetailsItem);
    return this;
  }

  /**
   * The policy artifact summary at this level. For query scope level, it represents policy assignment summary. For policy assignment level, it represents policy definitions summary.
   * @return policyDetails
   */
  @javax.annotation.Nullable
  public List<ComplianceDetail> getPolicyDetails() {
    return policyDetails;
  }

  public void setPolicyDetails(List<ComplianceDetail> policyDetails) {
    this.policyDetails = policyDetails;
  }


  public SummaryResults policyGroupDetails(List<ComplianceDetail> policyGroupDetails) {
    this.policyGroupDetails = policyGroupDetails;
    return this;
  }

  public SummaryResults addPolicyGroupDetailsItem(ComplianceDetail policyGroupDetailsItem) {
    if (this.policyGroupDetails == null) {
      this.policyGroupDetails = new ArrayList<>();
    }
    this.policyGroupDetails.add(policyGroupDetailsItem);
    return this;
  }

  /**
   * The policy definition group summary at this level.
   * @return policyGroupDetails
   */
  @javax.annotation.Nullable
  public List<ComplianceDetail> getPolicyGroupDetails() {
    return policyGroupDetails;
  }

  public void setPolicyGroupDetails(List<ComplianceDetail> policyGroupDetails) {
    this.policyGroupDetails = policyGroupDetails;
  }


  public SummaryResults queryResultsUri(String queryResultsUri) {
    this.queryResultsUri = queryResultsUri;
    return this;
  }

  /**
   * HTTP POST URI for queryResults action on Microsoft.PolicyInsights to retrieve raw results for the compliance summary. This property will not be available by default in future API versions, but could be queried explicitly.
   * @return queryResultsUri
   */
  @javax.annotation.Nullable
  public String getQueryResultsUri() {
    return queryResultsUri;
  }

  public void setQueryResultsUri(String queryResultsUri) {
    this.queryResultsUri = queryResultsUri;
  }


  public SummaryResults resourceDetails(List<ComplianceDetail> resourceDetails) {
    this.resourceDetails = resourceDetails;
    return this;
  }

  public SummaryResults addResourceDetailsItem(ComplianceDetail resourceDetailsItem) {
    if (this.resourceDetails == null) {
      this.resourceDetails = new ArrayList<>();
    }
    this.resourceDetails.add(resourceDetailsItem);
    return this;
  }

  /**
   * The resources summary at this level.
   * @return resourceDetails
   */
  @javax.annotation.Nullable
  public List<ComplianceDetail> getResourceDetails() {
    return resourceDetails;
  }

  public void setResourceDetails(List<ComplianceDetail> resourceDetails) {
    this.resourceDetails = resourceDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryResults summaryResults = (SummaryResults) o;
    return Objects.equals(this.nonCompliantPolicies, summaryResults.nonCompliantPolicies) &&
        Objects.equals(this.nonCompliantResources, summaryResults.nonCompliantResources) &&
        Objects.equals(this.policyDetails, summaryResults.policyDetails) &&
        Objects.equals(this.policyGroupDetails, summaryResults.policyGroupDetails) &&
        Objects.equals(this.queryResultsUri, summaryResults.queryResultsUri) &&
        Objects.equals(this.resourceDetails, summaryResults.resourceDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonCompliantPolicies, nonCompliantResources, policyDetails, policyGroupDetails, queryResultsUri, resourceDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryResults {\n");
    sb.append("    nonCompliantPolicies: ").append(toIndentedString(nonCompliantPolicies)).append("\n");
    sb.append("    nonCompliantResources: ").append(toIndentedString(nonCompliantResources)).append("\n");
    sb.append("    policyDetails: ").append(toIndentedString(policyDetails)).append("\n");
    sb.append("    policyGroupDetails: ").append(toIndentedString(policyGroupDetails)).append("\n");
    sb.append("    queryResultsUri: ").append(toIndentedString(queryResultsUri)).append("\n");
    sb.append("    resourceDetails: ").append(toIndentedString(resourceDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nonCompliantPolicies");
    openapiFields.add("nonCompliantResources");
    openapiFields.add("policyDetails");
    openapiFields.add("policyGroupDetails");
    openapiFields.add("queryResultsUri");
    openapiFields.add("resourceDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryResults is not found in the empty JSON string", SummaryResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("policyDetails") != null && !jsonObj.get("policyDetails").isJsonNull()) {
        JsonArray jsonArraypolicyDetails = jsonObj.getAsJsonArray("policyDetails");
        if (jsonArraypolicyDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyDetails` to be an array in the JSON string but got `%s`", jsonObj.get("policyDetails").toString()));
          }

          // validate the optional field `policyDetails` (array)
          for (int i = 0; i < jsonArraypolicyDetails.size(); i++) {
            ComplianceDetail.validateJsonElement(jsonArraypolicyDetails.get(i));
          };
        }
      }
      if (jsonObj.get("policyGroupDetails") != null && !jsonObj.get("policyGroupDetails").isJsonNull()) {
        JsonArray jsonArraypolicyGroupDetails = jsonObj.getAsJsonArray("policyGroupDetails");
        if (jsonArraypolicyGroupDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyGroupDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyGroupDetails` to be an array in the JSON string but got `%s`", jsonObj.get("policyGroupDetails").toString()));
          }

          // validate the optional field `policyGroupDetails` (array)
          for (int i = 0; i < jsonArraypolicyGroupDetails.size(); i++) {
            ComplianceDetail.validateJsonElement(jsonArraypolicyGroupDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("queryResultsUri") != null && !jsonObj.get("queryResultsUri").isJsonNull()) && !jsonObj.get("queryResultsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryResultsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryResultsUri").toString()));
      }
      if (jsonObj.get("resourceDetails") != null && !jsonObj.get("resourceDetails").isJsonNull()) {
        JsonArray jsonArrayresourceDetails = jsonObj.getAsJsonArray("resourceDetails");
        if (jsonArrayresourceDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceDetails` to be an array in the JSON string but got `%s`", jsonObj.get("resourceDetails").toString()));
          }

          // validate the optional field `resourceDetails` (array)
          for (int i = 0; i < jsonArrayresourceDetails.size(); i++) {
            ComplianceDetail.validateJsonElement(jsonArrayresourceDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryResults.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryResults>() {
           @Override
           public void write(JsonWriter out, SummaryResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryResults
   * @throws IOException if the JSON string is invalid with respect to SummaryResults
   */
  public static SummaryResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryResults.class);
  }

  /**
   * Convert an instance of SummaryResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

