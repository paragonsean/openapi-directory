/*
 * PolicyStatesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyDefinitionSummary;
import org.openapitools.client.model.PolicyGroupSummary;
import org.openapitools.client.model.SummaryResults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policy assignment summary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:23.480991-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyAssignmentSummary {
  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_ID = "policyAssignmentId";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_ID)
  private String policyAssignmentId;

  public static final String SERIALIZED_NAME_POLICY_DEFINITIONS = "policyDefinitions";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITIONS)
  private List<PolicyDefinitionSummary> policyDefinitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_GROUPS = "policyGroups";
  @SerializedName(SERIALIZED_NAME_POLICY_GROUPS)
  private List<PolicyGroupSummary> policyGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_ID = "policySetDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_ID)
  private String policySetDefinitionId;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private SummaryResults results;

  public PolicyAssignmentSummary() {
  }

  public PolicyAssignmentSummary policyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
    return this;
  }

  /**
   * Policy assignment ID.
   * @return policyAssignmentId
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentId() {
    return policyAssignmentId;
  }

  public void setPolicyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
  }


  public PolicyAssignmentSummary policyDefinitions(List<PolicyDefinitionSummary> policyDefinitions) {
    this.policyDefinitions = policyDefinitions;
    return this;
  }

  public PolicyAssignmentSummary addPolicyDefinitionsItem(PolicyDefinitionSummary policyDefinitionsItem) {
    if (this.policyDefinitions == null) {
      this.policyDefinitions = new ArrayList<>();
    }
    this.policyDefinitions.add(policyDefinitionsItem);
    return this;
  }

  /**
   * Policy definitions summary.
   * @return policyDefinitions
   */
  @javax.annotation.Nullable
  public List<PolicyDefinitionSummary> getPolicyDefinitions() {
    return policyDefinitions;
  }

  public void setPolicyDefinitions(List<PolicyDefinitionSummary> policyDefinitions) {
    this.policyDefinitions = policyDefinitions;
  }


  public PolicyAssignmentSummary policyGroups(List<PolicyGroupSummary> policyGroups) {
    this.policyGroups = policyGroups;
    return this;
  }

  public PolicyAssignmentSummary addPolicyGroupsItem(PolicyGroupSummary policyGroupsItem) {
    if (this.policyGroups == null) {
      this.policyGroups = new ArrayList<>();
    }
    this.policyGroups.add(policyGroupsItem);
    return this;
  }

  /**
   * Policy definition group summary.
   * @return policyGroups
   */
  @javax.annotation.Nullable
  public List<PolicyGroupSummary> getPolicyGroups() {
    return policyGroups;
  }

  public void setPolicyGroups(List<PolicyGroupSummary> policyGroups) {
    this.policyGroups = policyGroups;
  }


  public PolicyAssignmentSummary policySetDefinitionId(String policySetDefinitionId) {
    this.policySetDefinitionId = policySetDefinitionId;
    return this;
  }

  /**
   * Policy set definition ID, if the policy assignment is for a policy set.
   * @return policySetDefinitionId
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionId() {
    return policySetDefinitionId;
  }

  public void setPolicySetDefinitionId(String policySetDefinitionId) {
    this.policySetDefinitionId = policySetDefinitionId;
  }


  public PolicyAssignmentSummary results(SummaryResults results) {
    this.results = results;
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public SummaryResults getResults() {
    return results;
  }

  public void setResults(SummaryResults results) {
    this.results = results;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyAssignmentSummary policyAssignmentSummary = (PolicyAssignmentSummary) o;
    return Objects.equals(this.policyAssignmentId, policyAssignmentSummary.policyAssignmentId) &&
        Objects.equals(this.policyDefinitions, policyAssignmentSummary.policyDefinitions) &&
        Objects.equals(this.policyGroups, policyAssignmentSummary.policyGroups) &&
        Objects.equals(this.policySetDefinitionId, policyAssignmentSummary.policySetDefinitionId) &&
        Objects.equals(this.results, policyAssignmentSummary.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyAssignmentId, policyDefinitions, policyGroups, policySetDefinitionId, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyAssignmentSummary {\n");
    sb.append("    policyAssignmentId: ").append(toIndentedString(policyAssignmentId)).append("\n");
    sb.append("    policyDefinitions: ").append(toIndentedString(policyDefinitions)).append("\n");
    sb.append("    policyGroups: ").append(toIndentedString(policyGroups)).append("\n");
    sb.append("    policySetDefinitionId: ").append(toIndentedString(policySetDefinitionId)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyAssignmentId");
    openapiFields.add("policyDefinitions");
    openapiFields.add("policyGroups");
    openapiFields.add("policySetDefinitionId");
    openapiFields.add("results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyAssignmentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyAssignmentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyAssignmentSummary is not found in the empty JSON string", PolicyAssignmentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyAssignmentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyAssignmentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("policyAssignmentId") != null && !jsonObj.get("policyAssignmentId").isJsonNull()) && !jsonObj.get("policyAssignmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentId").toString()));
      }
      if (jsonObj.get("policyDefinitions") != null && !jsonObj.get("policyDefinitions").isJsonNull()) {
        JsonArray jsonArraypolicyDefinitions = jsonObj.getAsJsonArray("policyDefinitions");
        if (jsonArraypolicyDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("policyDefinitions").toString()));
          }

          // validate the optional field `policyDefinitions` (array)
          for (int i = 0; i < jsonArraypolicyDefinitions.size(); i++) {
            PolicyDefinitionSummary.validateJsonElement(jsonArraypolicyDefinitions.get(i));
          };
        }
      }
      if (jsonObj.get("policyGroups") != null && !jsonObj.get("policyGroups").isJsonNull()) {
        JsonArray jsonArraypolicyGroups = jsonObj.getAsJsonArray("policyGroups");
        if (jsonArraypolicyGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyGroups` to be an array in the JSON string but got `%s`", jsonObj.get("policyGroups").toString()));
          }

          // validate the optional field `policyGroups` (array)
          for (int i = 0; i < jsonArraypolicyGroups.size(); i++) {
            PolicyGroupSummary.validateJsonElement(jsonArraypolicyGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("policySetDefinitionId") != null && !jsonObj.get("policySetDefinitionId").isJsonNull()) && !jsonObj.get("policySetDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionId").toString()));
      }
      // validate the optional field `results`
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        SummaryResults.validateJsonElement(jsonObj.get("results"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyAssignmentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyAssignmentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyAssignmentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyAssignmentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyAssignmentSummary>() {
           @Override
           public void write(JsonWriter out, PolicyAssignmentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyAssignmentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyAssignmentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyAssignmentSummary
   * @throws IOException if the JSON string is invalid with respect to PolicyAssignmentSummary
   */
  public static PolicyAssignmentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyAssignmentSummary.class);
  }

  /**
   * Convert an instance of PolicyAssignmentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

