/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobsSummary;
import org.openapitools.client.model.MonitoringSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication usages of a vault.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:04.109203-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationUsage {
  public static final String SERIALIZED_NAME_JOBS_SUMMARY = "jobsSummary";
  @SerializedName(SERIALIZED_NAME_JOBS_SUMMARY)
  private JobsSummary jobsSummary;

  public static final String SERIALIZED_NAME_MONITORING_SUMMARY = "monitoringSummary";
  @SerializedName(SERIALIZED_NAME_MONITORING_SUMMARY)
  private MonitoringSummary monitoringSummary;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_COUNT = "protectedItemCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_COUNT)
  private Integer protectedItemCount;

  public static final String SERIALIZED_NAME_RECOVERY_PLAN_COUNT = "recoveryPlanCount";
  @SerializedName(SERIALIZED_NAME_RECOVERY_PLAN_COUNT)
  private Integer recoveryPlanCount;

  public static final String SERIALIZED_NAME_RECOVERY_SERVICES_PROVIDER_AUTH_TYPE = "recoveryServicesProviderAuthType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_SERVICES_PROVIDER_AUTH_TYPE)
  private Integer recoveryServicesProviderAuthType;

  public static final String SERIALIZED_NAME_REGISTERED_SERVERS_COUNT = "registeredServersCount";
  @SerializedName(SERIALIZED_NAME_REGISTERED_SERVERS_COUNT)
  private Integer registeredServersCount;

  public ReplicationUsage() {
  }

  public ReplicationUsage jobsSummary(JobsSummary jobsSummary) {
    this.jobsSummary = jobsSummary;
    return this;
  }

  /**
   * Get jobsSummary
   * @return jobsSummary
   */
  @javax.annotation.Nullable
  public JobsSummary getJobsSummary() {
    return jobsSummary;
  }

  public void setJobsSummary(JobsSummary jobsSummary) {
    this.jobsSummary = jobsSummary;
  }


  public ReplicationUsage monitoringSummary(MonitoringSummary monitoringSummary) {
    this.monitoringSummary = monitoringSummary;
    return this;
  }

  /**
   * Get monitoringSummary
   * @return monitoringSummary
   */
  @javax.annotation.Nullable
  public MonitoringSummary getMonitoringSummary() {
    return monitoringSummary;
  }

  public void setMonitoringSummary(MonitoringSummary monitoringSummary) {
    this.monitoringSummary = monitoringSummary;
  }


  public ReplicationUsage protectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
    return this;
  }

  /**
   * Number of replication protected items for this vault.
   * @return protectedItemCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedItemCount() {
    return protectedItemCount;
  }

  public void setProtectedItemCount(Integer protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
  }


  public ReplicationUsage recoveryPlanCount(Integer recoveryPlanCount) {
    this.recoveryPlanCount = recoveryPlanCount;
    return this;
  }

  /**
   * Number of replication recovery plans for this vault.
   * @return recoveryPlanCount
   */
  @javax.annotation.Nullable
  public Integer getRecoveryPlanCount() {
    return recoveryPlanCount;
  }

  public void setRecoveryPlanCount(Integer recoveryPlanCount) {
    this.recoveryPlanCount = recoveryPlanCount;
  }


  public ReplicationUsage recoveryServicesProviderAuthType(Integer recoveryServicesProviderAuthType) {
    this.recoveryServicesProviderAuthType = recoveryServicesProviderAuthType;
    return this;
  }

  /**
   * The authentication type of recovery service providers in the vault.
   * @return recoveryServicesProviderAuthType
   */
  @javax.annotation.Nullable
  public Integer getRecoveryServicesProviderAuthType() {
    return recoveryServicesProviderAuthType;
  }

  public void setRecoveryServicesProviderAuthType(Integer recoveryServicesProviderAuthType) {
    this.recoveryServicesProviderAuthType = recoveryServicesProviderAuthType;
  }


  public ReplicationUsage registeredServersCount(Integer registeredServersCount) {
    this.registeredServersCount = registeredServersCount;
    return this;
  }

  /**
   * Number of servers registered to this vault.
   * @return registeredServersCount
   */
  @javax.annotation.Nullable
  public Integer getRegisteredServersCount() {
    return registeredServersCount;
  }

  public void setRegisteredServersCount(Integer registeredServersCount) {
    this.registeredServersCount = registeredServersCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationUsage replicationUsage = (ReplicationUsage) o;
    return Objects.equals(this.jobsSummary, replicationUsage.jobsSummary) &&
        Objects.equals(this.monitoringSummary, replicationUsage.monitoringSummary) &&
        Objects.equals(this.protectedItemCount, replicationUsage.protectedItemCount) &&
        Objects.equals(this.recoveryPlanCount, replicationUsage.recoveryPlanCount) &&
        Objects.equals(this.recoveryServicesProviderAuthType, replicationUsage.recoveryServicesProviderAuthType) &&
        Objects.equals(this.registeredServersCount, replicationUsage.registeredServersCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobsSummary, monitoringSummary, protectedItemCount, recoveryPlanCount, recoveryServicesProviderAuthType, registeredServersCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationUsage {\n");
    sb.append("    jobsSummary: ").append(toIndentedString(jobsSummary)).append("\n");
    sb.append("    monitoringSummary: ").append(toIndentedString(monitoringSummary)).append("\n");
    sb.append("    protectedItemCount: ").append(toIndentedString(protectedItemCount)).append("\n");
    sb.append("    recoveryPlanCount: ").append(toIndentedString(recoveryPlanCount)).append("\n");
    sb.append("    recoveryServicesProviderAuthType: ").append(toIndentedString(recoveryServicesProviderAuthType)).append("\n");
    sb.append("    registeredServersCount: ").append(toIndentedString(registeredServersCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobsSummary");
    openapiFields.add("monitoringSummary");
    openapiFields.add("protectedItemCount");
    openapiFields.add("recoveryPlanCount");
    openapiFields.add("recoveryServicesProviderAuthType");
    openapiFields.add("registeredServersCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationUsage is not found in the empty JSON string", ReplicationUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jobsSummary`
      if (jsonObj.get("jobsSummary") != null && !jsonObj.get("jobsSummary").isJsonNull()) {
        JobsSummary.validateJsonElement(jsonObj.get("jobsSummary"));
      }
      // validate the optional field `monitoringSummary`
      if (jsonObj.get("monitoringSummary") != null && !jsonObj.get("monitoringSummary").isJsonNull()) {
        MonitoringSummary.validateJsonElement(jsonObj.get("monitoringSummary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationUsage>() {
           @Override
           public void write(JsonWriter out, ReplicationUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationUsage
   * @throws IOException if the JSON string is invalid with respect to ReplicationUsage
   */
  public static ReplicationUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationUsage.class);
  }

  /**
   * Convert an instance of ReplicationUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

