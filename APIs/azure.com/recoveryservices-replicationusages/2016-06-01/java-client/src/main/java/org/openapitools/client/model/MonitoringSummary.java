/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the replication monitoring data for this vault.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:04.109203-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringSummary {
  public static final String SERIALIZED_NAME_DEPRECATED_PROVIDER_COUNT = "deprecatedProviderCount";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_PROVIDER_COUNT)
  private Integer deprecatedProviderCount;

  public static final String SERIALIZED_NAME_EVENTS_COUNT = "eventsCount";
  @SerializedName(SERIALIZED_NAME_EVENTS_COUNT)
  private Integer eventsCount;

  public static final String SERIALIZED_NAME_SUPPORTED_PROVIDER_COUNT = "supportedProviderCount";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PROVIDER_COUNT)
  private Integer supportedProviderCount;

  public static final String SERIALIZED_NAME_UN_HEALTHY_PROVIDER_COUNT = "unHealthyProviderCount";
  @SerializedName(SERIALIZED_NAME_UN_HEALTHY_PROVIDER_COUNT)
  private Integer unHealthyProviderCount;

  public static final String SERIALIZED_NAME_UN_HEALTHY_VM_COUNT = "unHealthyVmCount";
  @SerializedName(SERIALIZED_NAME_UN_HEALTHY_VM_COUNT)
  private Integer unHealthyVmCount;

  public static final String SERIALIZED_NAME_UNSUPPORTED_PROVIDER_COUNT = "unsupportedProviderCount";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_PROVIDER_COUNT)
  private Integer unsupportedProviderCount;

  public MonitoringSummary() {
  }

  public MonitoringSummary deprecatedProviderCount(Integer deprecatedProviderCount) {
    this.deprecatedProviderCount = deprecatedProviderCount;
    return this;
  }

  /**
   * Count of all deprecated recovery service providers.
   * @return deprecatedProviderCount
   */
  @javax.annotation.Nullable
  public Integer getDeprecatedProviderCount() {
    return deprecatedProviderCount;
  }

  public void setDeprecatedProviderCount(Integer deprecatedProviderCount) {
    this.deprecatedProviderCount = deprecatedProviderCount;
  }


  public MonitoringSummary eventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
    return this;
  }

  /**
   * Count of all critical warnings.
   * @return eventsCount
   */
  @javax.annotation.Nullable
  public Integer getEventsCount() {
    return eventsCount;
  }

  public void setEventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
  }


  public MonitoringSummary supportedProviderCount(Integer supportedProviderCount) {
    this.supportedProviderCount = supportedProviderCount;
    return this;
  }

  /**
   * Count of all the supported recovery service providers.
   * @return supportedProviderCount
   */
  @javax.annotation.Nullable
  public Integer getSupportedProviderCount() {
    return supportedProviderCount;
  }

  public void setSupportedProviderCount(Integer supportedProviderCount) {
    this.supportedProviderCount = supportedProviderCount;
  }


  public MonitoringSummary unHealthyProviderCount(Integer unHealthyProviderCount) {
    this.unHealthyProviderCount = unHealthyProviderCount;
    return this;
  }

  /**
   * Count of unhealthy replication providers.
   * @return unHealthyProviderCount
   */
  @javax.annotation.Nullable
  public Integer getUnHealthyProviderCount() {
    return unHealthyProviderCount;
  }

  public void setUnHealthyProviderCount(Integer unHealthyProviderCount) {
    this.unHealthyProviderCount = unHealthyProviderCount;
  }


  public MonitoringSummary unHealthyVmCount(Integer unHealthyVmCount) {
    this.unHealthyVmCount = unHealthyVmCount;
    return this;
  }

  /**
   * Count of unhealthy VMs.
   * @return unHealthyVmCount
   */
  @javax.annotation.Nullable
  public Integer getUnHealthyVmCount() {
    return unHealthyVmCount;
  }

  public void setUnHealthyVmCount(Integer unHealthyVmCount) {
    this.unHealthyVmCount = unHealthyVmCount;
  }


  public MonitoringSummary unsupportedProviderCount(Integer unsupportedProviderCount) {
    this.unsupportedProviderCount = unsupportedProviderCount;
    return this;
  }

  /**
   * Count of all the unsupported recovery service providers.
   * @return unsupportedProviderCount
   */
  @javax.annotation.Nullable
  public Integer getUnsupportedProviderCount() {
    return unsupportedProviderCount;
  }

  public void setUnsupportedProviderCount(Integer unsupportedProviderCount) {
    this.unsupportedProviderCount = unsupportedProviderCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringSummary monitoringSummary = (MonitoringSummary) o;
    return Objects.equals(this.deprecatedProviderCount, monitoringSummary.deprecatedProviderCount) &&
        Objects.equals(this.eventsCount, monitoringSummary.eventsCount) &&
        Objects.equals(this.supportedProviderCount, monitoringSummary.supportedProviderCount) &&
        Objects.equals(this.unHealthyProviderCount, monitoringSummary.unHealthyProviderCount) &&
        Objects.equals(this.unHealthyVmCount, monitoringSummary.unHealthyVmCount) &&
        Objects.equals(this.unsupportedProviderCount, monitoringSummary.unsupportedProviderCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecatedProviderCount, eventsCount, supportedProviderCount, unHealthyProviderCount, unHealthyVmCount, unsupportedProviderCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringSummary {\n");
    sb.append("    deprecatedProviderCount: ").append(toIndentedString(deprecatedProviderCount)).append("\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    supportedProviderCount: ").append(toIndentedString(supportedProviderCount)).append("\n");
    sb.append("    unHealthyProviderCount: ").append(toIndentedString(unHealthyProviderCount)).append("\n");
    sb.append("    unHealthyVmCount: ").append(toIndentedString(unHealthyVmCount)).append("\n");
    sb.append("    unsupportedProviderCount: ").append(toIndentedString(unsupportedProviderCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecatedProviderCount");
    openapiFields.add("eventsCount");
    openapiFields.add("supportedProviderCount");
    openapiFields.add("unHealthyProviderCount");
    openapiFields.add("unHealthyVmCount");
    openapiFields.add("unsupportedProviderCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringSummary is not found in the empty JSON string", MonitoringSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringSummary>() {
           @Override
           public void write(JsonWriter out, MonitoringSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringSummary
   * @throws IOException if the JSON string is invalid with respect to MonitoringSummary
   */
  public static MonitoringSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringSummary.class);
  }

  /**
   * Convert an instance of MonitoringSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

