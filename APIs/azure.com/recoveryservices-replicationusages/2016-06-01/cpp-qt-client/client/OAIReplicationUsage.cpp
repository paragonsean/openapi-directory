/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationUsage::OAIReplicationUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationUsage::OAIReplicationUsage() {
    this->initializeModel();
}

OAIReplicationUsage::~OAIReplicationUsage() {}

void OAIReplicationUsage::initializeModel() {

    m_jobs_summary_isSet = false;
    m_jobs_summary_isValid = false;

    m_monitoring_summary_isSet = false;
    m_monitoring_summary_isValid = false;

    m_protected_item_count_isSet = false;
    m_protected_item_count_isValid = false;

    m_recovery_plan_count_isSet = false;
    m_recovery_plan_count_isValid = false;

    m_recovery_services_provider_auth_type_isSet = false;
    m_recovery_services_provider_auth_type_isValid = false;

    m_registered_servers_count_isSet = false;
    m_registered_servers_count_isValid = false;
}

void OAIReplicationUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationUsage::fromJsonObject(QJsonObject json) {

    m_jobs_summary_isValid = ::OpenAPI::fromJsonValue(m_jobs_summary, json[QString("jobsSummary")]);
    m_jobs_summary_isSet = !json[QString("jobsSummary")].isNull() && m_jobs_summary_isValid;

    m_monitoring_summary_isValid = ::OpenAPI::fromJsonValue(m_monitoring_summary, json[QString("monitoringSummary")]);
    m_monitoring_summary_isSet = !json[QString("monitoringSummary")].isNull() && m_monitoring_summary_isValid;

    m_protected_item_count_isValid = ::OpenAPI::fromJsonValue(m_protected_item_count, json[QString("protectedItemCount")]);
    m_protected_item_count_isSet = !json[QString("protectedItemCount")].isNull() && m_protected_item_count_isValid;

    m_recovery_plan_count_isValid = ::OpenAPI::fromJsonValue(m_recovery_plan_count, json[QString("recoveryPlanCount")]);
    m_recovery_plan_count_isSet = !json[QString("recoveryPlanCount")].isNull() && m_recovery_plan_count_isValid;

    m_recovery_services_provider_auth_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_services_provider_auth_type, json[QString("recoveryServicesProviderAuthType")]);
    m_recovery_services_provider_auth_type_isSet = !json[QString("recoveryServicesProviderAuthType")].isNull() && m_recovery_services_provider_auth_type_isValid;

    m_registered_servers_count_isValid = ::OpenAPI::fromJsonValue(m_registered_servers_count, json[QString("registeredServersCount")]);
    m_registered_servers_count_isSet = !json[QString("registeredServersCount")].isNull() && m_registered_servers_count_isValid;
}

QString OAIReplicationUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_jobs_summary.isSet()) {
        obj.insert(QString("jobsSummary"), ::OpenAPI::toJsonValue(m_jobs_summary));
    }
    if (m_monitoring_summary.isSet()) {
        obj.insert(QString("monitoringSummary"), ::OpenAPI::toJsonValue(m_monitoring_summary));
    }
    if (m_protected_item_count_isSet) {
        obj.insert(QString("protectedItemCount"), ::OpenAPI::toJsonValue(m_protected_item_count));
    }
    if (m_recovery_plan_count_isSet) {
        obj.insert(QString("recoveryPlanCount"), ::OpenAPI::toJsonValue(m_recovery_plan_count));
    }
    if (m_recovery_services_provider_auth_type_isSet) {
        obj.insert(QString("recoveryServicesProviderAuthType"), ::OpenAPI::toJsonValue(m_recovery_services_provider_auth_type));
    }
    if (m_registered_servers_count_isSet) {
        obj.insert(QString("registeredServersCount"), ::OpenAPI::toJsonValue(m_registered_servers_count));
    }
    return obj;
}

OAIJobsSummary OAIReplicationUsage::getJobsSummary() const {
    return m_jobs_summary;
}
void OAIReplicationUsage::setJobsSummary(const OAIJobsSummary &jobs_summary) {
    m_jobs_summary = jobs_summary;
    m_jobs_summary_isSet = true;
}

bool OAIReplicationUsage::is_jobs_summary_Set() const{
    return m_jobs_summary_isSet;
}

bool OAIReplicationUsage::is_jobs_summary_Valid() const{
    return m_jobs_summary_isValid;
}

OAIMonitoringSummary OAIReplicationUsage::getMonitoringSummary() const {
    return m_monitoring_summary;
}
void OAIReplicationUsage::setMonitoringSummary(const OAIMonitoringSummary &monitoring_summary) {
    m_monitoring_summary = monitoring_summary;
    m_monitoring_summary_isSet = true;
}

bool OAIReplicationUsage::is_monitoring_summary_Set() const{
    return m_monitoring_summary_isSet;
}

bool OAIReplicationUsage::is_monitoring_summary_Valid() const{
    return m_monitoring_summary_isValid;
}

qint32 OAIReplicationUsage::getProtectedItemCount() const {
    return m_protected_item_count;
}
void OAIReplicationUsage::setProtectedItemCount(const qint32 &protected_item_count) {
    m_protected_item_count = protected_item_count;
    m_protected_item_count_isSet = true;
}

bool OAIReplicationUsage::is_protected_item_count_Set() const{
    return m_protected_item_count_isSet;
}

bool OAIReplicationUsage::is_protected_item_count_Valid() const{
    return m_protected_item_count_isValid;
}

qint32 OAIReplicationUsage::getRecoveryPlanCount() const {
    return m_recovery_plan_count;
}
void OAIReplicationUsage::setRecoveryPlanCount(const qint32 &recovery_plan_count) {
    m_recovery_plan_count = recovery_plan_count;
    m_recovery_plan_count_isSet = true;
}

bool OAIReplicationUsage::is_recovery_plan_count_Set() const{
    return m_recovery_plan_count_isSet;
}

bool OAIReplicationUsage::is_recovery_plan_count_Valid() const{
    return m_recovery_plan_count_isValid;
}

qint32 OAIReplicationUsage::getRecoveryServicesProviderAuthType() const {
    return m_recovery_services_provider_auth_type;
}
void OAIReplicationUsage::setRecoveryServicesProviderAuthType(const qint32 &recovery_services_provider_auth_type) {
    m_recovery_services_provider_auth_type = recovery_services_provider_auth_type;
    m_recovery_services_provider_auth_type_isSet = true;
}

bool OAIReplicationUsage::is_recovery_services_provider_auth_type_Set() const{
    return m_recovery_services_provider_auth_type_isSet;
}

bool OAIReplicationUsage::is_recovery_services_provider_auth_type_Valid() const{
    return m_recovery_services_provider_auth_type_isValid;
}

qint32 OAIReplicationUsage::getRegisteredServersCount() const {
    return m_registered_servers_count;
}
void OAIReplicationUsage::setRegisteredServersCount(const qint32 &registered_servers_count) {
    m_registered_servers_count = registered_servers_count;
    m_registered_servers_count_isSet = true;
}

bool OAIReplicationUsage::is_registered_servers_count_Set() const{
    return m_registered_servers_count_isSet;
}

bool OAIReplicationUsage::is_registered_servers_count_Valid() const{
    return m_registered_servers_count_isValid;
}

bool OAIReplicationUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jobs_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_plan_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_services_provider_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_servers_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
