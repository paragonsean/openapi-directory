/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringSummary::OAIMonitoringSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringSummary::OAIMonitoringSummary() {
    this->initializeModel();
}

OAIMonitoringSummary::~OAIMonitoringSummary() {}

void OAIMonitoringSummary::initializeModel() {

    m_deprecated_provider_count_isSet = false;
    m_deprecated_provider_count_isValid = false;

    m_events_count_isSet = false;
    m_events_count_isValid = false;

    m_supported_provider_count_isSet = false;
    m_supported_provider_count_isValid = false;

    m_un_healthy_provider_count_isSet = false;
    m_un_healthy_provider_count_isValid = false;

    m_un_healthy_vm_count_isSet = false;
    m_un_healthy_vm_count_isValid = false;

    m_unsupported_provider_count_isSet = false;
    m_unsupported_provider_count_isValid = false;
}

void OAIMonitoringSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringSummary::fromJsonObject(QJsonObject json) {

    m_deprecated_provider_count_isValid = ::OpenAPI::fromJsonValue(m_deprecated_provider_count, json[QString("deprecatedProviderCount")]);
    m_deprecated_provider_count_isSet = !json[QString("deprecatedProviderCount")].isNull() && m_deprecated_provider_count_isValid;

    m_events_count_isValid = ::OpenAPI::fromJsonValue(m_events_count, json[QString("eventsCount")]);
    m_events_count_isSet = !json[QString("eventsCount")].isNull() && m_events_count_isValid;

    m_supported_provider_count_isValid = ::OpenAPI::fromJsonValue(m_supported_provider_count, json[QString("supportedProviderCount")]);
    m_supported_provider_count_isSet = !json[QString("supportedProviderCount")].isNull() && m_supported_provider_count_isValid;

    m_un_healthy_provider_count_isValid = ::OpenAPI::fromJsonValue(m_un_healthy_provider_count, json[QString("unHealthyProviderCount")]);
    m_un_healthy_provider_count_isSet = !json[QString("unHealthyProviderCount")].isNull() && m_un_healthy_provider_count_isValid;

    m_un_healthy_vm_count_isValid = ::OpenAPI::fromJsonValue(m_un_healthy_vm_count, json[QString("unHealthyVmCount")]);
    m_un_healthy_vm_count_isSet = !json[QString("unHealthyVmCount")].isNull() && m_un_healthy_vm_count_isValid;

    m_unsupported_provider_count_isValid = ::OpenAPI::fromJsonValue(m_unsupported_provider_count, json[QString("unsupportedProviderCount")]);
    m_unsupported_provider_count_isSet = !json[QString("unsupportedProviderCount")].isNull() && m_unsupported_provider_count_isValid;
}

QString OAIMonitoringSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_provider_count_isSet) {
        obj.insert(QString("deprecatedProviderCount"), ::OpenAPI::toJsonValue(m_deprecated_provider_count));
    }
    if (m_events_count_isSet) {
        obj.insert(QString("eventsCount"), ::OpenAPI::toJsonValue(m_events_count));
    }
    if (m_supported_provider_count_isSet) {
        obj.insert(QString("supportedProviderCount"), ::OpenAPI::toJsonValue(m_supported_provider_count));
    }
    if (m_un_healthy_provider_count_isSet) {
        obj.insert(QString("unHealthyProviderCount"), ::OpenAPI::toJsonValue(m_un_healthy_provider_count));
    }
    if (m_un_healthy_vm_count_isSet) {
        obj.insert(QString("unHealthyVmCount"), ::OpenAPI::toJsonValue(m_un_healthy_vm_count));
    }
    if (m_unsupported_provider_count_isSet) {
        obj.insert(QString("unsupportedProviderCount"), ::OpenAPI::toJsonValue(m_unsupported_provider_count));
    }
    return obj;
}

qint32 OAIMonitoringSummary::getDeprecatedProviderCount() const {
    return m_deprecated_provider_count;
}
void OAIMonitoringSummary::setDeprecatedProviderCount(const qint32 &deprecated_provider_count) {
    m_deprecated_provider_count = deprecated_provider_count;
    m_deprecated_provider_count_isSet = true;
}

bool OAIMonitoringSummary::is_deprecated_provider_count_Set() const{
    return m_deprecated_provider_count_isSet;
}

bool OAIMonitoringSummary::is_deprecated_provider_count_Valid() const{
    return m_deprecated_provider_count_isValid;
}

qint32 OAIMonitoringSummary::getEventsCount() const {
    return m_events_count;
}
void OAIMonitoringSummary::setEventsCount(const qint32 &events_count) {
    m_events_count = events_count;
    m_events_count_isSet = true;
}

bool OAIMonitoringSummary::is_events_count_Set() const{
    return m_events_count_isSet;
}

bool OAIMonitoringSummary::is_events_count_Valid() const{
    return m_events_count_isValid;
}

qint32 OAIMonitoringSummary::getSupportedProviderCount() const {
    return m_supported_provider_count;
}
void OAIMonitoringSummary::setSupportedProviderCount(const qint32 &supported_provider_count) {
    m_supported_provider_count = supported_provider_count;
    m_supported_provider_count_isSet = true;
}

bool OAIMonitoringSummary::is_supported_provider_count_Set() const{
    return m_supported_provider_count_isSet;
}

bool OAIMonitoringSummary::is_supported_provider_count_Valid() const{
    return m_supported_provider_count_isValid;
}

qint32 OAIMonitoringSummary::getUnHealthyProviderCount() const {
    return m_un_healthy_provider_count;
}
void OAIMonitoringSummary::setUnHealthyProviderCount(const qint32 &un_healthy_provider_count) {
    m_un_healthy_provider_count = un_healthy_provider_count;
    m_un_healthy_provider_count_isSet = true;
}

bool OAIMonitoringSummary::is_un_healthy_provider_count_Set() const{
    return m_un_healthy_provider_count_isSet;
}

bool OAIMonitoringSummary::is_un_healthy_provider_count_Valid() const{
    return m_un_healthy_provider_count_isValid;
}

qint32 OAIMonitoringSummary::getUnHealthyVmCount() const {
    return m_un_healthy_vm_count;
}
void OAIMonitoringSummary::setUnHealthyVmCount(const qint32 &un_healthy_vm_count) {
    m_un_healthy_vm_count = un_healthy_vm_count;
    m_un_healthy_vm_count_isSet = true;
}

bool OAIMonitoringSummary::is_un_healthy_vm_count_Set() const{
    return m_un_healthy_vm_count_isSet;
}

bool OAIMonitoringSummary::is_un_healthy_vm_count_Valid() const{
    return m_un_healthy_vm_count_isValid;
}

qint32 OAIMonitoringSummary::getUnsupportedProviderCount() const {
    return m_unsupported_provider_count;
}
void OAIMonitoringSummary::setUnsupportedProviderCount(const qint32 &unsupported_provider_count) {
    m_unsupported_provider_count = unsupported_provider_count;
    m_unsupported_provider_count_isSet = true;
}

bool OAIMonitoringSummary::is_unsupported_provider_count_Set() const{
    return m_unsupported_provider_count_isSet;
}

bool OAIMonitoringSummary::is_unsupported_provider_count_Valid() const{
    return m_unsupported_provider_count_isValid;
}

bool OAIMonitoringSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_provider_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_provider_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_healthy_provider_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_healthy_vm_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_provider_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
