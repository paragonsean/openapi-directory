# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogicalSubnetModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_pools: List[str]=None, is_public: bool=None, metadata: Dict[str, str]=None):
        """LogicalSubnetModel - a model defined in OpenAPI

        :param ip_pools: The ip_pools of this LogicalSubnetModel.
        :param is_public: The is_public of this LogicalSubnetModel.
        :param metadata: The metadata of this LogicalSubnetModel.
        """
        self.openapi_types = {
            'ip_pools': List[str],
            'is_public': bool,
            'metadata': Dict[str, str]
        }

        self.attribute_map = {
            'ip_pools': 'ipPools',
            'is_public': 'isPublic',
            'metadata': 'metadata'
        }

        self._ip_pools = ip_pools
        self._is_public = is_public
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogicalSubnetModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogicalSubnetModel of this LogicalSubnetModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_pools(self):
        """Gets the ip_pools of this LogicalSubnetModel.

        All IP pools which belong to this subnet.

        :return: The ip_pools of this LogicalSubnetModel.
        :rtype: List[str]
        """
        return self._ip_pools

    @ip_pools.setter
    def ip_pools(self, ip_pools):
        """Sets the ip_pools of this LogicalSubnetModel.

        All IP pools which belong to this subnet.

        :param ip_pools: The ip_pools of this LogicalSubnetModel.
        :type ip_pools: List[str]
        """

        self._ip_pools = ip_pools

    @property
    def is_public(self):
        """Gets the is_public of this LogicalSubnetModel.

        The visibility status of the IP pool.  If is true the associated pools are public IP address pools.

        :return: The is_public of this LogicalSubnetModel.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this LogicalSubnetModel.

        The visibility status of the IP pool.  If is true the associated pools are public IP address pools.

        :param is_public: The is_public of this LogicalSubnetModel.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def metadata(self):
        """Gets the metadata of this LogicalSubnetModel.

        Metadata related to the logical network.

        :return: The metadata of this LogicalSubnetModel.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LogicalSubnetModel.

        Metadata related to the logical network.

        :param metadata: The metadata of this LogicalSubnetModel.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata
