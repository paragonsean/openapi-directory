/**
 * FabricAdminClient
 * Logical subnet operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogicalSubnetModel model module.
 * @module model/LogicalSubnetModel
 * @version 2016-05-01
 */
class LogicalSubnetModel {
    /**
     * Constructs a new <code>LogicalSubnetModel</code>.
     * Properties of a logical subnet.
     * @alias module:model/LogicalSubnetModel
     */
    constructor() { 
        
        LogicalSubnetModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogicalSubnetModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogicalSubnetModel} obj Optional instance to populate.
     * @return {module:model/LogicalSubnetModel} The populated <code>LogicalSubnetModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogicalSubnetModel();

            if (data.hasOwnProperty('ipPools')) {
                obj['ipPools'] = ApiClient.convertToType(data['ipPools'], ['String']);
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogicalSubnetModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogicalSubnetModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ipPools'])) {
            throw new Error("Expected the field `ipPools` to be an array in the JSON data but got " + data['ipPools']);
        }

        return true;
    }


}



/**
 * All IP pools which belong to this subnet.
 * @member {Array.<String>} ipPools
 */
LogicalSubnetModel.prototype['ipPools'] = undefined;

/**
 * The visibility status of the IP pool.  If is true the associated pools are public IP address pools.
 * @member {Boolean} isPublic
 */
LogicalSubnetModel.prototype['isPublic'] = undefined;

/**
 * Metadata related to the logical network.
 * @member {Object.<String, String>} metadata
 */
LogicalSubnetModel.prototype['metadata'] = undefined;






export default LogicalSubnetModel;

