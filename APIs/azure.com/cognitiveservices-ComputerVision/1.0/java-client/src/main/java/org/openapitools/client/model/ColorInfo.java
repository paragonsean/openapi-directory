/*
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object providing additional metadata describing color attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:06.614840-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColorInfo {
  public static final String SERIALIZED_NAME_ACCENT_COLOR = "accentColor";
  @SerializedName(SERIALIZED_NAME_ACCENT_COLOR)
  private String accentColor;

  public static final String SERIALIZED_NAME_DOMINANT_COLOR_BACKGROUND = "dominantColorBackground";
  @SerializedName(SERIALIZED_NAME_DOMINANT_COLOR_BACKGROUND)
  private String dominantColorBackground;

  public static final String SERIALIZED_NAME_DOMINANT_COLOR_FOREGROUND = "dominantColorForeground";
  @SerializedName(SERIALIZED_NAME_DOMINANT_COLOR_FOREGROUND)
  private String dominantColorForeground;

  public static final String SERIALIZED_NAME_DOMINANT_COLORS = "dominantColors";
  @SerializedName(SERIALIZED_NAME_DOMINANT_COLORS)
  private List<String> dominantColors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_B_W_IMG = "isBWImg";
  @SerializedName(SERIALIZED_NAME_IS_B_W_IMG)
  private Boolean isBWImg;

  public ColorInfo() {
  }

  public ColorInfo accentColor(String accentColor) {
    this.accentColor = accentColor;
    return this;
  }

  /**
   * Possible accent color.
   * @return accentColor
   */
  @javax.annotation.Nullable
  public String getAccentColor() {
    return accentColor;
  }

  public void setAccentColor(String accentColor) {
    this.accentColor = accentColor;
  }


  public ColorInfo dominantColorBackground(String dominantColorBackground) {
    this.dominantColorBackground = dominantColorBackground;
    return this;
  }

  /**
   * Possible dominant background color.
   * @return dominantColorBackground
   */
  @javax.annotation.Nullable
  public String getDominantColorBackground() {
    return dominantColorBackground;
  }

  public void setDominantColorBackground(String dominantColorBackground) {
    this.dominantColorBackground = dominantColorBackground;
  }


  public ColorInfo dominantColorForeground(String dominantColorForeground) {
    this.dominantColorForeground = dominantColorForeground;
    return this;
  }

  /**
   * Possible dominant foreground color.
   * @return dominantColorForeground
   */
  @javax.annotation.Nullable
  public String getDominantColorForeground() {
    return dominantColorForeground;
  }

  public void setDominantColorForeground(String dominantColorForeground) {
    this.dominantColorForeground = dominantColorForeground;
  }


  public ColorInfo dominantColors(List<String> dominantColors) {
    this.dominantColors = dominantColors;
    return this;
  }

  public ColorInfo addDominantColorsItem(String dominantColorsItem) {
    if (this.dominantColors == null) {
      this.dominantColors = new ArrayList<>();
    }
    this.dominantColors.add(dominantColorsItem);
    return this;
  }

  /**
   * An array of possible dominant colors.
   * @return dominantColors
   */
  @javax.annotation.Nullable
  public List<String> getDominantColors() {
    return dominantColors;
  }

  public void setDominantColors(List<String> dominantColors) {
    this.dominantColors = dominantColors;
  }


  public ColorInfo isBWImg(Boolean isBWImg) {
    this.isBWImg = isBWImg;
    return this;
  }

  /**
   * A value indicating if the image is black and white.
   * @return isBWImg
   */
  @javax.annotation.Nullable
  public Boolean getIsBWImg() {
    return isBWImg;
  }

  public void setIsBWImg(Boolean isBWImg) {
    this.isBWImg = isBWImg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColorInfo colorInfo = (ColorInfo) o;
    return Objects.equals(this.accentColor, colorInfo.accentColor) &&
        Objects.equals(this.dominantColorBackground, colorInfo.dominantColorBackground) &&
        Objects.equals(this.dominantColorForeground, colorInfo.dominantColorForeground) &&
        Objects.equals(this.dominantColors, colorInfo.dominantColors) &&
        Objects.equals(this.isBWImg, colorInfo.isBWImg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accentColor, dominantColorBackground, dominantColorForeground, dominantColors, isBWImg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColorInfo {\n");
    sb.append("    accentColor: ").append(toIndentedString(accentColor)).append("\n");
    sb.append("    dominantColorBackground: ").append(toIndentedString(dominantColorBackground)).append("\n");
    sb.append("    dominantColorForeground: ").append(toIndentedString(dominantColorForeground)).append("\n");
    sb.append("    dominantColors: ").append(toIndentedString(dominantColors)).append("\n");
    sb.append("    isBWImg: ").append(toIndentedString(isBWImg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accentColor");
    openapiFields.add("dominantColorBackground");
    openapiFields.add("dominantColorForeground");
    openapiFields.add("dominantColors");
    openapiFields.add("isBWImg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColorInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColorInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColorInfo is not found in the empty JSON string", ColorInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColorInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColorInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accentColor") != null && !jsonObj.get("accentColor").isJsonNull()) && !jsonObj.get("accentColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accentColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accentColor").toString()));
      }
      if ((jsonObj.get("dominantColorBackground") != null && !jsonObj.get("dominantColorBackground").isJsonNull()) && !jsonObj.get("dominantColorBackground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominantColorBackground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominantColorBackground").toString()));
      }
      if ((jsonObj.get("dominantColorForeground") != null && !jsonObj.get("dominantColorForeground").isJsonNull()) && !jsonObj.get("dominantColorForeground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominantColorForeground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dominantColorForeground").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dominantColors") != null && !jsonObj.get("dominantColors").isJsonNull() && !jsonObj.get("dominantColors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dominantColors` to be an array in the JSON string but got `%s`", jsonObj.get("dominantColors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColorInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColorInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColorInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColorInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ColorInfo>() {
           @Override
           public void write(JsonWriter out, ColorInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColorInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColorInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColorInfo
   * @throws IOException if the JSON string is invalid with respect to ColorInfo
   */
  public static ColorInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColorInfo.class);
  }

  /**
   * Convert an instance of ColorInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

