/*
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdultInfo;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.ColorInfo;
import org.openapitools.client.model.FaceDescription;
import org.openapitools.client.model.ImageDescriptionDetails;
import org.openapitools.client.model.ImageMetadata;
import org.openapitools.client.model.ImageTag;
import org.openapitools.client.model.ImageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of AnalyzeImage operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:06.614840-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageAnalysis {
  public static final String SERIALIZED_NAME_ADULT = "adult";
  @SerializedName(SERIALIZED_NAME_ADULT)
  private AdultInfo adult;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private ColorInfo color;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private ImageDescriptionDetails description;

  public static final String SERIALIZED_NAME_FACES = "faces";
  @SerializedName(SERIALIZED_NAME_FACES)
  private List<FaceDescription> faces = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private ImageType imageType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ImageMetadata metadata;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ImageTag> tags = new ArrayList<>();

  public ImageAnalysis() {
  }

  public ImageAnalysis adult(AdultInfo adult) {
    this.adult = adult;
    return this;
  }

  /**
   * Get adult
   * @return adult
   */
  @javax.annotation.Nullable
  public AdultInfo getAdult() {
    return adult;
  }

  public void setAdult(AdultInfo adult) {
    this.adult = adult;
  }


  public ImageAnalysis categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public ImageAnalysis addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * An array indicating identified categories.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public ImageAnalysis color(ColorInfo color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public ColorInfo getColor() {
    return color;
  }

  public void setColor(ColorInfo color) {
    this.color = color;
  }


  public ImageAnalysis description(ImageDescriptionDetails description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public ImageDescriptionDetails getDescription() {
    return description;
  }

  public void setDescription(ImageDescriptionDetails description) {
    this.description = description;
  }


  public ImageAnalysis faces(List<FaceDescription> faces) {
    this.faces = faces;
    return this;
  }

  public ImageAnalysis addFacesItem(FaceDescription facesItem) {
    if (this.faces == null) {
      this.faces = new ArrayList<>();
    }
    this.faces.add(facesItem);
    return this;
  }

  /**
   * An array of possible faces within the image.
   * @return faces
   */
  @javax.annotation.Nullable
  public List<FaceDescription> getFaces() {
    return faces;
  }

  public void setFaces(List<FaceDescription> faces) {
    this.faces = faces;
  }


  public ImageAnalysis imageType(ImageType imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Get imageType
   * @return imageType
   */
  @javax.annotation.Nullable
  public ImageType getImageType() {
    return imageType;
  }

  public void setImageType(ImageType imageType) {
    this.imageType = imageType;
  }


  public ImageAnalysis metadata(ImageMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public ImageMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ImageMetadata metadata) {
    this.metadata = metadata;
  }


  public ImageAnalysis requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Id of the request for tracking purposes.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public ImageAnalysis tags(List<ImageTag> tags) {
    this.tags = tags;
    return this;
  }

  public ImageAnalysis addTagsItem(ImageTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags with confidence level.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<ImageTag> getTags() {
    return tags;
  }

  public void setTags(List<ImageTag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAnalysis imageAnalysis = (ImageAnalysis) o;
    return Objects.equals(this.adult, imageAnalysis.adult) &&
        Objects.equals(this.categories, imageAnalysis.categories) &&
        Objects.equals(this.color, imageAnalysis.color) &&
        Objects.equals(this.description, imageAnalysis.description) &&
        Objects.equals(this.faces, imageAnalysis.faces) &&
        Objects.equals(this.imageType, imageAnalysis.imageType) &&
        Objects.equals(this.metadata, imageAnalysis.metadata) &&
        Objects.equals(this.requestId, imageAnalysis.requestId) &&
        Objects.equals(this.tags, imageAnalysis.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adult, categories, color, description, faces, imageType, metadata, requestId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAnalysis {\n");
    sb.append("    adult: ").append(toIndentedString(adult)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    faces: ").append(toIndentedString(faces)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adult");
    openapiFields.add("categories");
    openapiFields.add("color");
    openapiFields.add("description");
    openapiFields.add("faces");
    openapiFields.add("imageType");
    openapiFields.add("metadata");
    openapiFields.add("requestId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageAnalysis is not found in the empty JSON string", ImageAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adult`
      if (jsonObj.get("adult") != null && !jsonObj.get("adult").isJsonNull()) {
        AdultInfo.validateJsonElement(jsonObj.get("adult"));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            Category.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        ColorInfo.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        ImageDescriptionDetails.validateJsonElement(jsonObj.get("description"));
      }
      if (jsonObj.get("faces") != null && !jsonObj.get("faces").isJsonNull()) {
        JsonArray jsonArrayfaces = jsonObj.getAsJsonArray("faces");
        if (jsonArrayfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("faces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `faces` to be an array in the JSON string but got `%s`", jsonObj.get("faces").toString()));
          }

          // validate the optional field `faces` (array)
          for (int i = 0; i < jsonArrayfaces.size(); i++) {
            FaceDescription.validateJsonElement(jsonArrayfaces.get(i));
          };
        }
      }
      // validate the optional field `imageType`
      if (jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) {
        ImageType.validateJsonElement(jsonObj.get("imageType"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ImageMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            ImageTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageAnalysis>() {
           @Override
           public void write(JsonWriter out, ImageAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageAnalysis
   * @throws IOException if the JSON string is invalid with respect to ImageAnalysis
   */
  public static ImageAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageAnalysis.class);
  }

  /**
   * Convert an instance of ImageAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

