/*
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OcrWord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object describing a single recognized line of text.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:06.614840-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OcrLine {
  public static final String SERIALIZED_NAME_BOUNDING_BOX = "boundingBox";
  @SerializedName(SERIALIZED_NAME_BOUNDING_BOX)
  private String boundingBox;

  public static final String SERIALIZED_NAME_WORDS = "words";
  @SerializedName(SERIALIZED_NAME_WORDS)
  private List<OcrWord> words = new ArrayList<>();

  public OcrLine() {
  }

  public OcrLine boundingBox(String boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  /**
   * Bounding box of a recognized line. The four integers represent the x-coordinate of the left edge, the y-coordinate of the top edge, width, and height of the bounding box, in the coordinate system of the input image, after it has been rotated around its center according to the detected text angle (see textAngle property), with the origin at the top-left corner, and the y-axis pointing down.
   * @return boundingBox
   */
  @javax.annotation.Nullable
  public String getBoundingBox() {
    return boundingBox;
  }

  public void setBoundingBox(String boundingBox) {
    this.boundingBox = boundingBox;
  }


  public OcrLine words(List<OcrWord> words) {
    this.words = words;
    return this;
  }

  public OcrLine addWordsItem(OcrWord wordsItem) {
    if (this.words == null) {
      this.words = new ArrayList<>();
    }
    this.words.add(wordsItem);
    return this;
  }

  /**
   * An array of objects, where each object represents a recognized word.
   * @return words
   */
  @javax.annotation.Nullable
  public List<OcrWord> getWords() {
    return words;
  }

  public void setWords(List<OcrWord> words) {
    this.words = words;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OcrLine ocrLine = (OcrLine) o;
    return Objects.equals(this.boundingBox, ocrLine.boundingBox) &&
        Objects.equals(this.words, ocrLine.words);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingBox, words);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OcrLine {\n");
    sb.append("    boundingBox: ").append(toIndentedString(boundingBox)).append("\n");
    sb.append("    words: ").append(toIndentedString(words)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingBox");
    openapiFields.add("words");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OcrLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OcrLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OcrLine is not found in the empty JSON string", OcrLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OcrLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OcrLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boundingBox") != null && !jsonObj.get("boundingBox").isJsonNull()) && !jsonObj.get("boundingBox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundingBox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boundingBox").toString()));
      }
      if (jsonObj.get("words") != null && !jsonObj.get("words").isJsonNull()) {
        JsonArray jsonArraywords = jsonObj.getAsJsonArray("words");
        if (jsonArraywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("words").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `words` to be an array in the JSON string but got `%s`", jsonObj.get("words").toString()));
          }

          // validate the optional field `words` (array)
          for (int i = 0; i < jsonArraywords.size(); i++) {
            OcrWord.validateJsonElement(jsonArraywords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OcrLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OcrLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OcrLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OcrLine.class));

       return (TypeAdapter<T>) new TypeAdapter<OcrLine>() {
           @Override
           public void write(JsonWriter out, OcrLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OcrLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OcrLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OcrLine
   * @throws IOException if the JSON string is invalid with respect to OcrLine
   */
  public static OcrLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OcrLine.class);
  }

  /**
   * Convert an instance of OcrLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

