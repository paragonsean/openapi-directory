# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ColorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accent_color: str=None, dominant_color_background: str=None, dominant_color_foreground: str=None, dominant_colors: List[str]=None, is_bw_img: bool=None):
        """ColorInfo - a model defined in OpenAPI

        :param accent_color: The accent_color of this ColorInfo.
        :param dominant_color_background: The dominant_color_background of this ColorInfo.
        :param dominant_color_foreground: The dominant_color_foreground of this ColorInfo.
        :param dominant_colors: The dominant_colors of this ColorInfo.
        :param is_bw_img: The is_bw_img of this ColorInfo.
        """
        self.openapi_types = {
            'accent_color': str,
            'dominant_color_background': str,
            'dominant_color_foreground': str,
            'dominant_colors': List[str],
            'is_bw_img': bool
        }

        self.attribute_map = {
            'accent_color': 'accentColor',
            'dominant_color_background': 'dominantColorBackground',
            'dominant_color_foreground': 'dominantColorForeground',
            'dominant_colors': 'dominantColors',
            'is_bw_img': 'isBWImg'
        }

        self._accent_color = accent_color
        self._dominant_color_background = dominant_color_background
        self._dominant_color_foreground = dominant_color_foreground
        self._dominant_colors = dominant_colors
        self._is_bw_img = is_bw_img

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColorInfo of this ColorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accent_color(self):
        """Gets the accent_color of this ColorInfo.

        Possible accent color.

        :return: The accent_color of this ColorInfo.
        :rtype: str
        """
        return self._accent_color

    @accent_color.setter
    def accent_color(self, accent_color):
        """Sets the accent_color of this ColorInfo.

        Possible accent color.

        :param accent_color: The accent_color of this ColorInfo.
        :type accent_color: str
        """

        self._accent_color = accent_color

    @property
    def dominant_color_background(self):
        """Gets the dominant_color_background of this ColorInfo.

        Possible dominant background color.

        :return: The dominant_color_background of this ColorInfo.
        :rtype: str
        """
        return self._dominant_color_background

    @dominant_color_background.setter
    def dominant_color_background(self, dominant_color_background):
        """Sets the dominant_color_background of this ColorInfo.

        Possible dominant background color.

        :param dominant_color_background: The dominant_color_background of this ColorInfo.
        :type dominant_color_background: str
        """

        self._dominant_color_background = dominant_color_background

    @property
    def dominant_color_foreground(self):
        """Gets the dominant_color_foreground of this ColorInfo.

        Possible dominant foreground color.

        :return: The dominant_color_foreground of this ColorInfo.
        :rtype: str
        """
        return self._dominant_color_foreground

    @dominant_color_foreground.setter
    def dominant_color_foreground(self, dominant_color_foreground):
        """Sets the dominant_color_foreground of this ColorInfo.

        Possible dominant foreground color.

        :param dominant_color_foreground: The dominant_color_foreground of this ColorInfo.
        :type dominant_color_foreground: str
        """

        self._dominant_color_foreground = dominant_color_foreground

    @property
    def dominant_colors(self):
        """Gets the dominant_colors of this ColorInfo.

        An array of possible dominant colors.

        :return: The dominant_colors of this ColorInfo.
        :rtype: List[str]
        """
        return self._dominant_colors

    @dominant_colors.setter
    def dominant_colors(self, dominant_colors):
        """Sets the dominant_colors of this ColorInfo.

        An array of possible dominant colors.

        :param dominant_colors: The dominant_colors of this ColorInfo.
        :type dominant_colors: List[str]
        """

        self._dominant_colors = dominant_colors

    @property
    def is_bw_img(self):
        """Gets the is_bw_img of this ColorInfo.

        A value indicating if the image is black and white.

        :return: The is_bw_img of this ColorInfo.
        :rtype: bool
        """
        return self._is_bw_img

    @is_bw_img.setter
    def is_bw_img(self, is_bw_img):
        """Sets the is_bw_img of this ColorInfo.

        A value indicating if the image is black and white.

        :param is_bw_img: The is_bw_img of this ColorInfo.
        :type is_bw_img: bool
        """

        self._is_bw_img = is_bw_img
