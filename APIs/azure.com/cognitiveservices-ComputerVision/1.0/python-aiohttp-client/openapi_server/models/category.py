# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_detail import CategoryDetail
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: CategoryDetail=None, name: str=None, score: float=None):
        """Category - a model defined in OpenAPI

        :param detail: The detail of this Category.
        :param name: The name of this Category.
        :param score: The score of this Category.
        """
        self.openapi_types = {
            'detail': CategoryDetail,
            'name': str,
            'score': float
        }

        self.attribute_map = {
            'detail': 'detail',
            'name': 'name',
            'score': 'score'
        }

        self._detail = detail
        self._name = name
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this Category.


        :return: The detail of this Category.
        :rtype: CategoryDetail
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Category.


        :param detail: The detail of this Category.
        :type detail: CategoryDetail
        """

        self._detail = detail

    @property
    def name(self):
        """Gets the name of this Category.

        Name of the category.

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        Name of the category.

        :param name: The name of this Category.
        :type name: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this Category.

        Scoring of the category.

        :return: The score of this Category.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Category.

        Scoring of the category.

        :param score: The score of this Category.
        :type score: float
        """

        self._score = score
