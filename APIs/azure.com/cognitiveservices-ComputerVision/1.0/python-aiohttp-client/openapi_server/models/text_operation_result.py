# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recognition_result import RecognitionResult
from openapi_server import util


class TextOperationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recognition_result: RecognitionResult=None, status: str=None):
        """TextOperationResult - a model defined in OpenAPI

        :param recognition_result: The recognition_result of this TextOperationResult.
        :param status: The status of this TextOperationResult.
        """
        self.openapi_types = {
            'recognition_result': RecognitionResult,
            'status': str
        }

        self.attribute_map = {
            'recognition_result': 'recognitionResult',
            'status': 'status'
        }

        self._recognition_result = recognition_result
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextOperationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextOperationResult of this TextOperationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recognition_result(self):
        """Gets the recognition_result of this TextOperationResult.


        :return: The recognition_result of this TextOperationResult.
        :rtype: RecognitionResult
        """
        return self._recognition_result

    @recognition_result.setter
    def recognition_result(self, recognition_result):
        """Sets the recognition_result of this TextOperationResult.


        :param recognition_result: The recognition_result of this TextOperationResult.
        :type recognition_result: RecognitionResult
        """

        self._recognition_result = recognition_result

    @property
    def status(self):
        """Gets the status of this TextOperationResult.

        Status of the text operation.

        :return: The status of this TextOperationResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TextOperationResult.

        Status of the text operation.

        :param status: The status of this TextOperationResult.
        :type status: str
        """
        allowed_values = ["Not Started", "Running", "Failed", "Succeeded"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
