# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face_rectangle import FaceRectangle
from openapi_server import util


class FaceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, face_rectangle: FaceRectangle=None, gender: str=None):
        """FaceDescription - a model defined in OpenAPI

        :param age: The age of this FaceDescription.
        :param face_rectangle: The face_rectangle of this FaceDescription.
        :param gender: The gender of this FaceDescription.
        """
        self.openapi_types = {
            'age': int,
            'face_rectangle': FaceRectangle,
            'gender': str
        }

        self.attribute_map = {
            'age': 'age',
            'face_rectangle': 'faceRectangle',
            'gender': 'gender'
        }

        self._age = age
        self._face_rectangle = face_rectangle
        self._gender = gender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceDescription of this FaceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this FaceDescription.

        Possible age of the face.

        :return: The age of this FaceDescription.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this FaceDescription.

        Possible age of the face.

        :param age: The age of this FaceDescription.
        :type age: int
        """

        self._age = age

    @property
    def face_rectangle(self):
        """Gets the face_rectangle of this FaceDescription.


        :return: The face_rectangle of this FaceDescription.
        :rtype: FaceRectangle
        """
        return self._face_rectangle

    @face_rectangle.setter
    def face_rectangle(self, face_rectangle):
        """Sets the face_rectangle of this FaceDescription.


        :param face_rectangle: The face_rectangle of this FaceDescription.
        :type face_rectangle: FaceRectangle
        """

        self._face_rectangle = face_rectangle

    @property
    def gender(self):
        """Gets the gender of this FaceDescription.

        Possible gender of the face.

        :return: The gender of this FaceDescription.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FaceDescription.

        Possible gender of the face.

        :param gender: The gender of this FaceDescription.
        :type gender: str
        """
        allowed_values = ["Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender
