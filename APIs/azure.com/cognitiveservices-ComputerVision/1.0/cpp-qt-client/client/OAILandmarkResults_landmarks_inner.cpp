/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandmarkResults_landmarks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandmarkResults_landmarks_inner::OAILandmarkResults_landmarks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandmarkResults_landmarks_inner::OAILandmarkResults_landmarks_inner() {
    this->initializeModel();
}

OAILandmarkResults_landmarks_inner::~OAILandmarkResults_landmarks_inner() {}

void OAILandmarkResults_landmarks_inner::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILandmarkResults_landmarks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandmarkResults_landmarks_inner::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILandmarkResults_landmarks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandmarkResults_landmarks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

double OAILandmarkResults_landmarks_inner::getConfidence() const {
    return m_confidence;
}
void OAILandmarkResults_landmarks_inner::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAILandmarkResults_landmarks_inner::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAILandmarkResults_landmarks_inner::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAILandmarkResults_landmarks_inner::getName() const {
    return m_name;
}
void OAILandmarkResults_landmarks_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILandmarkResults_landmarks_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAILandmarkResults_landmarks_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILandmarkResults_landmarks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandmarkResults_landmarks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
