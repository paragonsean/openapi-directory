/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognitionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognitionResult::OAIRecognitionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognitionResult::OAIRecognitionResult() {
    this->initializeModel();
}

OAIRecognitionResult::~OAIRecognitionResult() {}

void OAIRecognitionResult::initializeModel() {

    m_lines_isSet = false;
    m_lines_isValid = false;
}

void OAIRecognitionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognitionResult::fromJsonObject(QJsonObject json) {

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;
}

QString OAIRecognitionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognitionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    return obj;
}

QList<OAILine> OAIRecognitionResult::getLines() const {
    return m_lines;
}
void OAIRecognitionResult::setLines(const QList<OAILine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIRecognitionResult::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIRecognitionResult::is_lines_Valid() const{
    return m_lines_isValid;
}

bool OAIRecognitionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognitionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
