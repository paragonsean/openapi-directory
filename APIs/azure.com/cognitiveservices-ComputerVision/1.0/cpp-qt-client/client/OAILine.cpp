/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILine::OAILine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILine::OAILine() {
    this->initializeModel();
}

OAILine::~OAILine() {}

void OAILine::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;
}

void OAILine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILine::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;
}

QString OAILine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILine::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.size() > 0) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_words.size() > 0) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    return obj;
}

QList<qint32> OAILine::getBoundingBox() const {
    return m_bounding_box;
}
void OAILine::setBoundingBox(const QList<qint32> &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAILine::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAILine::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QString OAILine::getText() const {
    return m_text;
}
void OAILine::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILine::is_text_Set() const{
    return m_text_isSet;
}

bool OAILine::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIWord> OAILine::getWords() const {
    return m_words;
}
void OAILine::setWords(const QList<OAIWord> &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAILine::is_words_Set() const{
    return m_words_isSet;
}

bool OAILine::is_words_Valid() const{
    return m_words_isValid;
}

bool OAILine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
