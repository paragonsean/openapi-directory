/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainModelResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainModelResults::OAIDomainModelResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainModelResults::OAIDomainModelResults() {
    this->initializeModel();
}

OAIDomainModelResults::~OAIDomainModelResults() {}

void OAIDomainModelResults::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIDomainModelResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainModelResults::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIDomainModelResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainModelResults::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

OAIImageMetadata OAIDomainModelResults::getMetadata() const {
    return m_metadata;
}
void OAIDomainModelResults::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDomainModelResults::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDomainModelResults::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDomainModelResults::getRequestId() const {
    return m_request_id;
}
void OAIDomainModelResults::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDomainModelResults::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDomainModelResults::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIObject OAIDomainModelResults::getResult() const {
    return m_result;
}
void OAIDomainModelResults::setResult(const OAIObject &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIDomainModelResults::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDomainModelResults::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIDomainModelResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainModelResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
