/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICelebrityResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICelebrityResults::OAICelebrityResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICelebrityResults::OAICelebrityResults() {
    this->initializeModel();
}

OAICelebrityResults::~OAICelebrityResults() {}

void OAICelebrityResults::initializeModel() {

    m_celebrities_isSet = false;
    m_celebrities_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAICelebrityResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICelebrityResults::fromJsonObject(QJsonObject json) {

    m_celebrities_isValid = ::OpenAPI::fromJsonValue(m_celebrities, json[QString("celebrities")]);
    m_celebrities_isSet = !json[QString("celebrities")].isNull() && m_celebrities_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAICelebrityResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICelebrityResults::asJsonObject() const {
    QJsonObject obj;
    if (m_celebrities.size() > 0) {
        obj.insert(QString("celebrities"), ::OpenAPI::toJsonValue(m_celebrities));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QList<OAICelebritiesModel> OAICelebrityResults::getCelebrities() const {
    return m_celebrities;
}
void OAICelebrityResults::setCelebrities(const QList<OAICelebritiesModel> &celebrities) {
    m_celebrities = celebrities;
    m_celebrities_isSet = true;
}

bool OAICelebrityResults::is_celebrities_Set() const{
    return m_celebrities_isSet;
}

bool OAICelebrityResults::is_celebrities_Valid() const{
    return m_celebrities_isValid;
}

OAIImageMetadata OAICelebrityResults::getMetadata() const {
    return m_metadata;
}
void OAICelebrityResults::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICelebrityResults::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICelebrityResults::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICelebrityResults::getRequestId() const {
    return m_request_id;
}
void OAICelebrityResults::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICelebrityResults::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICelebrityResults::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAICelebrityResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_celebrities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICelebrityResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
