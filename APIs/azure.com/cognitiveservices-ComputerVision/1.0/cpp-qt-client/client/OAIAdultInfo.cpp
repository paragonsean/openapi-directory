/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdultInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdultInfo::OAIAdultInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdultInfo::OAIAdultInfo() {
    this->initializeModel();
}

OAIAdultInfo::~OAIAdultInfo() {}

void OAIAdultInfo::initializeModel() {

    m_adult_score_isSet = false;
    m_adult_score_isValid = false;

    m_is_adult_content_isSet = false;
    m_is_adult_content_isValid = false;

    m_is_racy_content_isSet = false;
    m_is_racy_content_isValid = false;

    m_racy_score_isSet = false;
    m_racy_score_isValid = false;
}

void OAIAdultInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdultInfo::fromJsonObject(QJsonObject json) {

    m_adult_score_isValid = ::OpenAPI::fromJsonValue(m_adult_score, json[QString("adultScore")]);
    m_adult_score_isSet = !json[QString("adultScore")].isNull() && m_adult_score_isValid;

    m_is_adult_content_isValid = ::OpenAPI::fromJsonValue(m_is_adult_content, json[QString("isAdultContent")]);
    m_is_adult_content_isSet = !json[QString("isAdultContent")].isNull() && m_is_adult_content_isValid;

    m_is_racy_content_isValid = ::OpenAPI::fromJsonValue(m_is_racy_content, json[QString("isRacyContent")]);
    m_is_racy_content_isSet = !json[QString("isRacyContent")].isNull() && m_is_racy_content_isValid;

    m_racy_score_isValid = ::OpenAPI::fromJsonValue(m_racy_score, json[QString("racyScore")]);
    m_racy_score_isSet = !json[QString("racyScore")].isNull() && m_racy_score_isValid;
}

QString OAIAdultInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdultInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_score_isSet) {
        obj.insert(QString("adultScore"), ::OpenAPI::toJsonValue(m_adult_score));
    }
    if (m_is_adult_content_isSet) {
        obj.insert(QString("isAdultContent"), ::OpenAPI::toJsonValue(m_is_adult_content));
    }
    if (m_is_racy_content_isSet) {
        obj.insert(QString("isRacyContent"), ::OpenAPI::toJsonValue(m_is_racy_content));
    }
    if (m_racy_score_isSet) {
        obj.insert(QString("racyScore"), ::OpenAPI::toJsonValue(m_racy_score));
    }
    return obj;
}

double OAIAdultInfo::getAdultScore() const {
    return m_adult_score;
}
void OAIAdultInfo::setAdultScore(const double &adult_score) {
    m_adult_score = adult_score;
    m_adult_score_isSet = true;
}

bool OAIAdultInfo::is_adult_score_Set() const{
    return m_adult_score_isSet;
}

bool OAIAdultInfo::is_adult_score_Valid() const{
    return m_adult_score_isValid;
}

bool OAIAdultInfo::isIsAdultContent() const {
    return m_is_adult_content;
}
void OAIAdultInfo::setIsAdultContent(const bool &is_adult_content) {
    m_is_adult_content = is_adult_content;
    m_is_adult_content_isSet = true;
}

bool OAIAdultInfo::is_is_adult_content_Set() const{
    return m_is_adult_content_isSet;
}

bool OAIAdultInfo::is_is_adult_content_Valid() const{
    return m_is_adult_content_isValid;
}

bool OAIAdultInfo::isIsRacyContent() const {
    return m_is_racy_content;
}
void OAIAdultInfo::setIsRacyContent(const bool &is_racy_content) {
    m_is_racy_content = is_racy_content;
    m_is_racy_content_isSet = true;
}

bool OAIAdultInfo::is_is_racy_content_Set() const{
    return m_is_racy_content_isSet;
}

bool OAIAdultInfo::is_is_racy_content_Valid() const{
    return m_is_racy_content_isValid;
}

double OAIAdultInfo::getRacyScore() const {
    return m_racy_score;
}
void OAIAdultInfo::setRacyScore(const double &racy_score) {
    m_racy_score = racy_score;
    m_racy_score_isSet = true;
}

bool OAIAdultInfo::is_racy_score_Set() const{
    return m_racy_score_isSet;
}

bool OAIAdultInfo::is_racy_score_Valid() const{
    return m_racy_score_isValid;
}

bool OAIAdultInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_adult_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_racy_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_racy_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdultInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
