/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageType::OAIImageType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageType::OAIImageType() {
    this->initializeModel();
}

OAIImageType::~OAIImageType() {}

void OAIImageType::initializeModel() {

    m_clip_art_type_isSet = false;
    m_clip_art_type_isValid = false;

    m_line_drawing_type_isSet = false;
    m_line_drawing_type_isValid = false;
}

void OAIImageType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageType::fromJsonObject(QJsonObject json) {

    m_clip_art_type_isValid = ::OpenAPI::fromJsonValue(m_clip_art_type, json[QString("clipArtType")]);
    m_clip_art_type_isSet = !json[QString("clipArtType")].isNull() && m_clip_art_type_isValid;

    m_line_drawing_type_isValid = ::OpenAPI::fromJsonValue(m_line_drawing_type, json[QString("lineDrawingType")]);
    m_line_drawing_type_isSet = !json[QString("lineDrawingType")].isNull() && m_line_drawing_type_isValid;
}

QString OAIImageType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageType::asJsonObject() const {
    QJsonObject obj;
    if (m_clip_art_type_isSet) {
        obj.insert(QString("clipArtType"), ::OpenAPI::toJsonValue(m_clip_art_type));
    }
    if (m_line_drawing_type_isSet) {
        obj.insert(QString("lineDrawingType"), ::OpenAPI::toJsonValue(m_line_drawing_type));
    }
    return obj;
}

double OAIImageType::getClipArtType() const {
    return m_clip_art_type;
}
void OAIImageType::setClipArtType(const double &clip_art_type) {
    m_clip_art_type = clip_art_type;
    m_clip_art_type_isSet = true;
}

bool OAIImageType::is_clip_art_type_Set() const{
    return m_clip_art_type_isSet;
}

bool OAIImageType::is_clip_art_type_Valid() const{
    return m_clip_art_type_isValid;
}

double OAIImageType::getLineDrawingType() const {
    return m_line_drawing_type;
}
void OAIImageType::setLineDrawingType(const double &line_drawing_type) {
    m_line_drawing_type = line_drawing_type;
    m_line_drawing_type_isSet = true;
}

bool OAIImageType::is_line_drawing_type_Set() const{
    return m_line_drawing_type_isSet;
}

bool OAIImageType::is_line_drawing_type_Valid() const{
    return m_line_drawing_type_isValid;
}

bool OAIImageType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clip_art_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_drawing_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
