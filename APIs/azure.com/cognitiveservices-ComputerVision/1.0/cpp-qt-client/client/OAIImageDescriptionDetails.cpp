/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDescriptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDescriptionDetails::OAIImageDescriptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDescriptionDetails::OAIImageDescriptionDetails() {
    this->initializeModel();
}

OAIImageDescriptionDetails::~OAIImageDescriptionDetails() {}

void OAIImageDescriptionDetails::initializeModel() {

    m_captions_isSet = false;
    m_captions_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImageDescriptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDescriptionDetails::fromJsonObject(QJsonObject json) {

    m_captions_isValid = ::OpenAPI::fromJsonValue(m_captions, json[QString("captions")]);
    m_captions_isSet = !json[QString("captions")].isNull() && m_captions_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIImageDescriptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDescriptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_captions.size() > 0) {
        obj.insert(QString("captions"), ::OpenAPI::toJsonValue(m_captions));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAIImageCaption> OAIImageDescriptionDetails::getCaptions() const {
    return m_captions;
}
void OAIImageDescriptionDetails::setCaptions(const QList<OAIImageCaption> &captions) {
    m_captions = captions;
    m_captions_isSet = true;
}

bool OAIImageDescriptionDetails::is_captions_Set() const{
    return m_captions_isSet;
}

bool OAIImageDescriptionDetails::is_captions_Valid() const{
    return m_captions_isValid;
}

OAIImageMetadata OAIImageDescriptionDetails::getMetadata() const {
    return m_metadata;
}
void OAIImageDescriptionDetails::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImageDescriptionDetails::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImageDescriptionDetails::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIImageDescriptionDetails::getRequestId() const {
    return m_request_id;
}
void OAIImageDescriptionDetails::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIImageDescriptionDetails::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIImageDescriptionDetails::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<QString> OAIImageDescriptionDetails::getTags() const {
    return m_tags;
}
void OAIImageDescriptionDetails::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImageDescriptionDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImageDescriptionDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImageDescriptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_captions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDescriptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
