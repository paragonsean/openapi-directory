/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOcrRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOcrRegion::OAIOcrRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOcrRegion::OAIOcrRegion() {
    this->initializeModel();
}

OAIOcrRegion::~OAIOcrRegion() {}

void OAIOcrRegion::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;
}

void OAIOcrRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOcrRegion::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;
}

QString OAIOcrRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOcrRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box_isSet) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    return obj;
}

QString OAIOcrRegion::getBoundingBox() const {
    return m_bounding_box;
}
void OAIOcrRegion::setBoundingBox(const QString &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIOcrRegion::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIOcrRegion::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QList<OAIOcrLine> OAIOcrRegion::getLines() const {
    return m_lines;
}
void OAIOcrRegion::setLines(const QList<OAIOcrLine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIOcrRegion::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIOcrRegion::is_lines_Valid() const{
    return m_lines_isValid;
}

bool OAIOcrRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOcrRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
