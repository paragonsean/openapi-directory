/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageMetadata::OAIImageMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageMetadata::OAIImageMetadata() {
    this->initializeModel();
}

OAIImageMetadata::~OAIImageMetadata() {}

void OAIImageMetadata::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImageMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageMetadata::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImageMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIImageMetadata::getFormat() const {
    return m_format;
}
void OAIImageMetadata::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImageMetadata::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImageMetadata::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIImageMetadata::getHeight() const {
    return m_height;
}
void OAIImageMetadata::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageMetadata::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageMetadata::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIImageMetadata::getWidth() const {
    return m_width;
}
void OAIImageMetadata::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageMetadata::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageMetadata::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImageMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
