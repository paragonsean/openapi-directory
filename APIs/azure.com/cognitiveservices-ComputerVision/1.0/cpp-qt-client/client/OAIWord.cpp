/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWord::OAIWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWord::OAIWord() {
    this->initializeModel();
}

OAIWord::~OAIWord() {}

void OAIWord::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWord::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWord::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.size() > 0) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<qint32> OAIWord::getBoundingBox() const {
    return m_bounding_box;
}
void OAIWord::setBoundingBox(const QList<qint32> &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIWord::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIWord::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QString OAIWord::getText() const {
    return m_text;
}
void OAIWord::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIWord::is_text_Set() const{
    return m_text_isSet;
}

bool OAIWord::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
