/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextOperationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextOperationResult::OAITextOperationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextOperationResult::OAITextOperationResult() {
    this->initializeModel();
}

OAITextOperationResult::~OAITextOperationResult() {}

void OAITextOperationResult::initializeModel() {

    m_recognition_result_isSet = false;
    m_recognition_result_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITextOperationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextOperationResult::fromJsonObject(QJsonObject json) {

    m_recognition_result_isValid = ::OpenAPI::fromJsonValue(m_recognition_result, json[QString("recognitionResult")]);
    m_recognition_result_isSet = !json[QString("recognitionResult")].isNull() && m_recognition_result_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITextOperationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextOperationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_recognition_result.isSet()) {
        obj.insert(QString("recognitionResult"), ::OpenAPI::toJsonValue(m_recognition_result));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIRecognitionResult OAITextOperationResult::getRecognitionResult() const {
    return m_recognition_result;
}
void OAITextOperationResult::setRecognitionResult(const OAIRecognitionResult &recognition_result) {
    m_recognition_result = recognition_result;
    m_recognition_result_isSet = true;
}

bool OAITextOperationResult::is_recognition_result_Set() const{
    return m_recognition_result_isSet;
}

bool OAITextOperationResult::is_recognition_result_Valid() const{
    return m_recognition_result_isValid;
}

QString OAITextOperationResult::getStatus() const {
    return m_status;
}
void OAITextOperationResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITextOperationResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAITextOperationResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITextOperationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recognition_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextOperationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
