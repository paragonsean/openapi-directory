/**
 * Computer Vision
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeImage_request.h"
#include "OAIComputerVisionError.h"
#include "OAIDomainModelResults.h"
#include "OAIHttpFileElement.h"
#include "OAIImageAnalysis.h"
#include "OAIImageDescription.h"
#include "OAIListModelsResult.h"
#include "OAIOcrResult.h"
#include "OAITagResult.h"
#include "OAITextOperationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  visual_features QList<QString> [optional]
    * @param[in]  details QList<QString> [optional]
    * @param[in]  language QString [optional]
    */
    virtual void analyzeImage(const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<QList<QString>> &visual_features = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model QString [required]
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  language QString [optional]
    */
    virtual void analyzeImageByDomain(const QString &model, const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  max_candidates QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void describeImage(const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<QString> &max_candidates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  smart_cropping bool [optional]
    */
    virtual void generateThumbnail(const qint32 &width, const qint32 &height, const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<bool> &smart_cropping = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void getTextOperationResult(const QString &operation_id);


    virtual void listModels();

    /**
    * @param[in]  detect_orientation bool [required]
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  language QString [optional]
    */
    virtual void recognizePrintedText(const bool &detect_orientation, const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  detect_handwriting bool [optional]
    */
    virtual void recognizeText(const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<bool> &detect_handwriting = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  image_url OAIAnalyzeImage_request [required]
    * @param[in]  language QString [optional]
    */
    virtual void tagImage(const OAIAnalyzeImage_request &image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeImageCallback(OAIHttpRequestWorker *worker);
    void analyzeImageByDomainCallback(OAIHttpRequestWorker *worker);
    void describeImageCallback(OAIHttpRequestWorker *worker);
    void generateThumbnailCallback(OAIHttpRequestWorker *worker);
    void getTextOperationResultCallback(OAIHttpRequestWorker *worker);
    void listModelsCallback(OAIHttpRequestWorker *worker);
    void recognizePrintedTextCallback(OAIHttpRequestWorker *worker);
    void recognizeTextCallback(OAIHttpRequestWorker *worker);
    void tagImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeImageSignal(OAIImageAnalysis summary);
    void analyzeImageByDomainSignal(OAIDomainModelResults summary);
    void describeImageSignal(OAIImageDescription summary);
    void generateThumbnailSignal(OAIHttpFileElement summary);
    void getTextOperationResultSignal(OAITextOperationResult summary);
    void listModelsSignal(OAIListModelsResult summary);
    void recognizePrintedTextSignal(OAIOcrResult summary);
    void recognizeTextSignal();
    void tagImageSignal(OAITagResult summary);


    void analyzeImageSignalFull(OAIHttpRequestWorker *worker, OAIImageAnalysis summary);
    void analyzeImageByDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainModelResults summary);
    void describeImageSignalFull(OAIHttpRequestWorker *worker, OAIImageDescription summary);
    void generateThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getTextOperationResultSignalFull(OAIHttpRequestWorker *worker, OAITextOperationResult summary);
    void listModelsSignalFull(OAIHttpRequestWorker *worker, OAIListModelsResult summary);
    void recognizePrintedTextSignalFull(OAIHttpRequestWorker *worker, OAIOcrResult summary);
    void recognizeTextSignalFull(OAIHttpRequestWorker *worker);
    void tagImageSignalFull(OAIHttpRequestWorker *worker, OAITagResult summary);

    Q_DECL_DEPRECATED_X("Use analyzeImageSignalError() instead")
    void analyzeImageSignalE(OAIImageAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageSignalError(OAIImageAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeImageByDomainSignalError() instead")
    void analyzeImageByDomainSignalE(OAIDomainModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageByDomainSignalError(OAIDomainModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeImageSignalError() instead")
    void describeImageSignalE(OAIImageDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeImageSignalError(OAIImageDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateThumbnailSignalError() instead")
    void generateThumbnailSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateThumbnailSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextOperationResultSignalError() instead")
    void getTextOperationResultSignalE(OAITextOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextOperationResultSignalError(OAITextOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalError() instead")
    void listModelsSignalE(OAIListModelsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalError(OAIListModelsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizePrintedTextSignalError() instead")
    void recognizePrintedTextSignalE(OAIOcrResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizePrintedTextSignalError(OAIOcrResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeTextSignalError() instead")
    void recognizeTextSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeTextSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagImageSignalError() instead")
    void tagImageSignalE(OAITagResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagImageSignalError(OAITagResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeImageSignalErrorFull() instead")
    void analyzeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeImageByDomainSignalErrorFull() instead")
    void analyzeImageByDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageByDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeImageSignalErrorFull() instead")
    void describeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateThumbnailSignalErrorFull() instead")
    void generateThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextOperationResultSignalErrorFull() instead")
    void getTextOperationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextOperationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalErrorFull() instead")
    void listModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizePrintedTextSignalErrorFull() instead")
    void recognizePrintedTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizePrintedTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeTextSignalErrorFull() instead")
    void recognizeTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagImageSignalErrorFull() instead")
    void tagImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
