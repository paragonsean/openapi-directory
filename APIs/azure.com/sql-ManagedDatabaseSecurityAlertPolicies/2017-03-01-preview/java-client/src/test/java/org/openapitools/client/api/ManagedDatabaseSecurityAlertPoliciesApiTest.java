/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ManagedDatabaseSecurityAlertPolicy;
import org.openapitools.client.model.ManagedDatabaseSecurityAlertPolicyListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagedDatabaseSecurityAlertPoliciesApi
 */
@Disabled
public class ManagedDatabaseSecurityAlertPoliciesApiTest {

    private final ManagedDatabaseSecurityAlertPoliciesApi api = new ManagedDatabaseSecurityAlertPoliciesApi();

    /**
     * Creates or updates a database&#39;s security alert policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseSecurityAlertPoliciesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String securityAlertPolicyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ManagedDatabaseSecurityAlertPolicy parameters = null;
        ManagedDatabaseSecurityAlertPolicy response = api.managedDatabaseSecurityAlertPoliciesCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, securityAlertPolicyName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Gets a managed database&#39;s security alert policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseSecurityAlertPoliciesGetTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String securityAlertPolicyName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ManagedDatabaseSecurityAlertPolicy response = api.managedDatabaseSecurityAlertPoliciesGet(resourceGroupName, managedInstanceName, databaseName, securityAlertPolicyName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of managed database&#39;s security alert policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseSecurityAlertPoliciesListByDatabaseTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ManagedDatabaseSecurityAlertPolicyListResult response = api.managedDatabaseSecurityAlertPoliciesListByDatabase(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
