/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagedDatabaseSecurityAlertPolicy from '../model/ManagedDatabaseSecurityAlertPolicy';
import ManagedDatabaseSecurityAlertPolicyListResult from '../model/ManagedDatabaseSecurityAlertPolicyListResult';

/**
* ManagedDatabaseSecurityAlertPolicies service.
* @module api/ManagedDatabaseSecurityAlertPoliciesApi
* @version 2017-03-01-preview
*/
export default class ManagedDatabaseSecurityAlertPoliciesApi {

    /**
    * Constructs a new ManagedDatabaseSecurityAlertPoliciesApi. 
    * @alias module:api/ManagedDatabaseSecurityAlertPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managedDatabaseSecurityAlertPoliciesCreateOrUpdate operation.
     * @callback module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedDatabaseSecurityAlertPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database's security alert policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the managed database for which the security alert policy is defined.
     * @param {module:model/String} securityAlertPolicyName The name of the security alert policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/ManagedDatabaseSecurityAlertPolicy} parameters The database security alert policy.
     * @param {module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedDatabaseSecurityAlertPolicy}
     */
    managedDatabaseSecurityAlertPoliciesCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, securityAlertPolicyName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'securityAlertPolicyName' is set
      if (securityAlertPolicyName === undefined || securityAlertPolicyName === null) {
        throw new Error("Missing the required parameter 'securityAlertPolicyName' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managedDatabaseSecurityAlertPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'securityAlertPolicyName': securityAlertPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedDatabaseSecurityAlertPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedDatabaseSecurityAlertPoliciesGet operation.
     * @callback module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedDatabaseSecurityAlertPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a managed database's security alert policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the managed database for which the security alert policy is defined.
     * @param {module:model/String} securityAlertPolicyName The name of the security alert policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedDatabaseSecurityAlertPolicy}
     */
    managedDatabaseSecurityAlertPoliciesGet(resourceGroupName, managedInstanceName, databaseName, securityAlertPolicyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'securityAlertPolicyName' is set
      if (securityAlertPolicyName === undefined || securityAlertPolicyName === null) {
        throw new Error("Missing the required parameter 'securityAlertPolicyName' when calling managedDatabaseSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseSecurityAlertPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseSecurityAlertPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'securityAlertPolicyName': securityAlertPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedDatabaseSecurityAlertPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedDatabaseSecurityAlertPoliciesListByDatabase operation.
     * @callback module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedDatabaseSecurityAlertPolicyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of managed database's security alert policies.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the managed database for which the security alert policies are defined.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedDatabaseSecurityAlertPoliciesApi~managedDatabaseSecurityAlertPoliciesListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedDatabaseSecurityAlertPolicyListResult}
     */
    managedDatabaseSecurityAlertPoliciesListByDatabase(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseSecurityAlertPoliciesListByDatabase");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseSecurityAlertPoliciesListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseSecurityAlertPoliciesListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseSecurityAlertPoliciesListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseSecurityAlertPoliciesListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedDatabaseSecurityAlertPolicyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
