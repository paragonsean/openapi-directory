/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the Private DNS zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:34.798732-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkLinkProperties {
  /**
   * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_REGISTRATION_ENABLED = "registrationEnabled";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ENABLED)
  private Boolean registrationEnabled;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK = "virtualNetwork";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK)
  private SubResource virtualNetwork;

  /**
   * The status of the virtual network link to the Private DNS zone. Possible values are &#39;InProgress&#39; and &#39;Done&#39;. This is a read-only property and any attempt to set this value will be ignored.
   */
  @JsonAdapter(VirtualNetworkLinkStateEnum.Adapter.class)
  public enum VirtualNetworkLinkStateEnum {
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed");

    private String value;

    VirtualNetworkLinkStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VirtualNetworkLinkStateEnum fromValue(String value) {
      for (VirtualNetworkLinkStateEnum b : VirtualNetworkLinkStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VirtualNetworkLinkStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VirtualNetworkLinkStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VirtualNetworkLinkStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VirtualNetworkLinkStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VirtualNetworkLinkStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_LINK_STATE = "virtualNetworkLinkState";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_LINK_STATE)
  private VirtualNetworkLinkStateEnum virtualNetworkLinkState;

  public VirtualNetworkLinkProperties() {
  }

  public VirtualNetworkLinkProperties(
     ProvisioningStateEnum provisioningState, 
     VirtualNetworkLinkStateEnum virtualNetworkLinkState
  ) {
    this();
    this.provisioningState = provisioningState;
    this.virtualNetworkLinkState = virtualNetworkLinkState;
  }

  /**
   * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public VirtualNetworkLinkProperties registrationEnabled(Boolean registrationEnabled) {
    this.registrationEnabled = registrationEnabled;
    return this;
  }

  /**
   * Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?
   * @return registrationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRegistrationEnabled() {
    return registrationEnabled;
  }

  public void setRegistrationEnabled(Boolean registrationEnabled) {
    this.registrationEnabled = registrationEnabled;
  }


  public VirtualNetworkLinkProperties virtualNetwork(SubResource virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
    return this;
  }

  /**
   * Get virtualNetwork
   * @return virtualNetwork
   */
  @javax.annotation.Nullable
  public SubResource getVirtualNetwork() {
    return virtualNetwork;
  }

  public void setVirtualNetwork(SubResource virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
  }


  /**
   * The status of the virtual network link to the Private DNS zone. Possible values are &#39;InProgress&#39; and &#39;Done&#39;. This is a read-only property and any attempt to set this value will be ignored.
   * @return virtualNetworkLinkState
   */
  @javax.annotation.Nullable
  public VirtualNetworkLinkStateEnum getVirtualNetworkLinkState() {
    return virtualNetworkLinkState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkLinkProperties virtualNetworkLinkProperties = (VirtualNetworkLinkProperties) o;
    return Objects.equals(this.provisioningState, virtualNetworkLinkProperties.provisioningState) &&
        Objects.equals(this.registrationEnabled, virtualNetworkLinkProperties.registrationEnabled) &&
        Objects.equals(this.virtualNetwork, virtualNetworkLinkProperties.virtualNetwork) &&
        Objects.equals(this.virtualNetworkLinkState, virtualNetworkLinkProperties.virtualNetworkLinkState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, registrationEnabled, virtualNetwork, virtualNetworkLinkState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkLinkProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    registrationEnabled: ").append(toIndentedString(registrationEnabled)).append("\n");
    sb.append("    virtualNetwork: ").append(toIndentedString(virtualNetwork)).append("\n");
    sb.append("    virtualNetworkLinkState: ").append(toIndentedString(virtualNetworkLinkState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningState");
    openapiFields.add("registrationEnabled");
    openapiFields.add("virtualNetwork");
    openapiFields.add("virtualNetworkLinkState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkLinkProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkLinkProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkLinkProperties is not found in the empty JSON string", VirtualNetworkLinkProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkLinkProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkLinkProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `virtualNetwork`
      if (jsonObj.get("virtualNetwork") != null && !jsonObj.get("virtualNetwork").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("virtualNetwork"));
      }
      if ((jsonObj.get("virtualNetworkLinkState") != null && !jsonObj.get("virtualNetworkLinkState").isJsonNull()) && !jsonObj.get("virtualNetworkLinkState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkLinkState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkLinkState").toString()));
      }
      // validate the optional field `virtualNetworkLinkState`
      if (jsonObj.get("virtualNetworkLinkState") != null && !jsonObj.get("virtualNetworkLinkState").isJsonNull()) {
        VirtualNetworkLinkStateEnum.validateJsonElement(jsonObj.get("virtualNetworkLinkState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkLinkProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkLinkProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkLinkProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkLinkProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkLinkProperties>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkLinkProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkLinkProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkLinkProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkLinkProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkLinkProperties
   */
  public static VirtualNetworkLinkProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkLinkProperties.class);
  }

  /**
   * Convert an instance of VirtualNetworkLinkProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

