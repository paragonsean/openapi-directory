/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the Private DNS zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:34.798732-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateZoneProperties {
  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_RECORD_SETS = "maxNumberOfRecordSets";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_RECORD_SETS)
  private Long maxNumberOfRecordSets;

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_VIRTUAL_NETWORK_LINKS = "maxNumberOfVirtualNetworkLinks";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_VIRTUAL_NETWORK_LINKS)
  private Long maxNumberOfVirtualNetworkLinks;

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_VIRTUAL_NETWORK_LINKS_WITH_REGISTRATION = "maxNumberOfVirtualNetworkLinksWithRegistration";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_VIRTUAL_NETWORK_LINKS_WITH_REGISTRATION)
  private Long maxNumberOfVirtualNetworkLinksWithRegistration;

  public static final String SERIALIZED_NAME_NUMBER_OF_RECORD_SETS = "numberOfRecordSets";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RECORD_SETS)
  private Long numberOfRecordSets;

  public static final String SERIALIZED_NAME_NUMBER_OF_VIRTUAL_NETWORK_LINKS = "numberOfVirtualNetworkLinks";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_VIRTUAL_NETWORK_LINKS)
  private Long numberOfVirtualNetworkLinks;

  public static final String SERIALIZED_NAME_NUMBER_OF_VIRTUAL_NETWORK_LINKS_WITH_REGISTRATION = "numberOfVirtualNetworkLinksWithRegistration";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_VIRTUAL_NETWORK_LINKS_WITH_REGISTRATION)
  private Long numberOfVirtualNetworkLinksWithRegistration;

  /**
   * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public PrivateZoneProperties() {
  }

  public PrivateZoneProperties(
     Long maxNumberOfRecordSets, 
     Long maxNumberOfVirtualNetworkLinks, 
     Long maxNumberOfVirtualNetworkLinksWithRegistration, 
     Long numberOfRecordSets, 
     Long numberOfVirtualNetworkLinks, 
     Long numberOfVirtualNetworkLinksWithRegistration, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.maxNumberOfRecordSets = maxNumberOfRecordSets;
    this.maxNumberOfVirtualNetworkLinks = maxNumberOfVirtualNetworkLinks;
    this.maxNumberOfVirtualNetworkLinksWithRegistration = maxNumberOfVirtualNetworkLinksWithRegistration;
    this.numberOfRecordSets = numberOfRecordSets;
    this.numberOfVirtualNetworkLinks = numberOfVirtualNetworkLinks;
    this.numberOfVirtualNetworkLinksWithRegistration = numberOfVirtualNetworkLinksWithRegistration;
    this.provisioningState = provisioningState;
  }

  /**
   * The maximum number of record sets that can be created in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
   * @return maxNumberOfRecordSets
   */
  @javax.annotation.Nullable
  public Long getMaxNumberOfRecordSets() {
    return maxNumberOfRecordSets;
  }



  /**
   * The maximum number of virtual networks that can be linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
   * @return maxNumberOfVirtualNetworkLinks
   */
  @javax.annotation.Nullable
  public Long getMaxNumberOfVirtualNetworkLinks() {
    return maxNumberOfVirtualNetworkLinks;
  }



  /**
   * The maximum number of virtual networks that can be linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored.
   * @return maxNumberOfVirtualNetworkLinksWithRegistration
   */
  @javax.annotation.Nullable
  public Long getMaxNumberOfVirtualNetworkLinksWithRegistration() {
    return maxNumberOfVirtualNetworkLinksWithRegistration;
  }



  /**
   * The current number of record sets in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
   * @return numberOfRecordSets
   */
  @javax.annotation.Nullable
  public Long getNumberOfRecordSets() {
    return numberOfRecordSets;
  }



  /**
   * The current number of virtual networks that are linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
   * @return numberOfVirtualNetworkLinks
   */
  @javax.annotation.Nullable
  public Long getNumberOfVirtualNetworkLinks() {
    return numberOfVirtualNetworkLinks;
  }



  /**
   * The current number of virtual networks that are linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored.
   * @return numberOfVirtualNetworkLinksWithRegistration
   */
  @javax.annotation.Nullable
  public Long getNumberOfVirtualNetworkLinksWithRegistration() {
    return numberOfVirtualNetworkLinksWithRegistration;
  }



  /**
   * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateZoneProperties privateZoneProperties = (PrivateZoneProperties) o;
    return Objects.equals(this.maxNumberOfRecordSets, privateZoneProperties.maxNumberOfRecordSets) &&
        Objects.equals(this.maxNumberOfVirtualNetworkLinks, privateZoneProperties.maxNumberOfVirtualNetworkLinks) &&
        Objects.equals(this.maxNumberOfVirtualNetworkLinksWithRegistration, privateZoneProperties.maxNumberOfVirtualNetworkLinksWithRegistration) &&
        Objects.equals(this.numberOfRecordSets, privateZoneProperties.numberOfRecordSets) &&
        Objects.equals(this.numberOfVirtualNetworkLinks, privateZoneProperties.numberOfVirtualNetworkLinks) &&
        Objects.equals(this.numberOfVirtualNetworkLinksWithRegistration, privateZoneProperties.numberOfVirtualNetworkLinksWithRegistration) &&
        Objects.equals(this.provisioningState, privateZoneProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxNumberOfRecordSets, maxNumberOfVirtualNetworkLinks, maxNumberOfVirtualNetworkLinksWithRegistration, numberOfRecordSets, numberOfVirtualNetworkLinks, numberOfVirtualNetworkLinksWithRegistration, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateZoneProperties {\n");
    sb.append("    maxNumberOfRecordSets: ").append(toIndentedString(maxNumberOfRecordSets)).append("\n");
    sb.append("    maxNumberOfVirtualNetworkLinks: ").append(toIndentedString(maxNumberOfVirtualNetworkLinks)).append("\n");
    sb.append("    maxNumberOfVirtualNetworkLinksWithRegistration: ").append(toIndentedString(maxNumberOfVirtualNetworkLinksWithRegistration)).append("\n");
    sb.append("    numberOfRecordSets: ").append(toIndentedString(numberOfRecordSets)).append("\n");
    sb.append("    numberOfVirtualNetworkLinks: ").append(toIndentedString(numberOfVirtualNetworkLinks)).append("\n");
    sb.append("    numberOfVirtualNetworkLinksWithRegistration: ").append(toIndentedString(numberOfVirtualNetworkLinksWithRegistration)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxNumberOfRecordSets");
    openapiFields.add("maxNumberOfVirtualNetworkLinks");
    openapiFields.add("maxNumberOfVirtualNetworkLinksWithRegistration");
    openapiFields.add("numberOfRecordSets");
    openapiFields.add("numberOfVirtualNetworkLinks");
    openapiFields.add("numberOfVirtualNetworkLinksWithRegistration");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateZoneProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateZoneProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateZoneProperties is not found in the empty JSON string", PrivateZoneProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateZoneProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateZoneProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateZoneProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateZoneProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateZoneProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateZoneProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateZoneProperties>() {
           @Override
           public void write(JsonWriter out, PrivateZoneProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateZoneProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateZoneProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateZoneProperties
   * @throws IOException if the JSON string is invalid with respect to PrivateZoneProperties
   */
  public static PrivateZoneProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateZoneProperties.class);
  }

  /**
   * Convert an instance of PrivateZoneProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

