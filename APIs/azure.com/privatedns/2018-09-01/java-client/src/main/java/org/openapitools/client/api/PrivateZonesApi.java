/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.PrivateZone;
import org.openapitools.client.model.PrivateZoneListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateZonesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateZonesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateZonesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone upsert operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesCreateOrUpdateCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateZonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling privateZonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateZonesCreateOrUpdate(Async)");
        }

        return privateZonesCreateOrUpdateCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @return PrivateZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone upsert operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateZone privateZonesCreateOrUpdate(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<PrivateZone> localVarResp = privateZonesCreateOrUpdateWithHttpInfo(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @return ApiResponse&lt;PrivateZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone upsert operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateZone> privateZonesCreateOrUpdateWithHttpInfo(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = privateZonesCreateOrUpdateValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone upsert operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesCreateOrUpdateAsync(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, String ifNoneMatch, final ApiCallback<PrivateZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesCreateOrUpdateValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateZonesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesDeleteCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesDeleteValidateBeforeCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateZonesDelete(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling privateZonesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesDelete(Async)");
        }

        return privateZonesDeleteCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links to it are removed.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public void privateZonesDelete(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        privateZonesDeleteWithHttpInfo(resourceGroupName, privateZoneName, apiVersion, subscriptionId, ifMatch);
    }

    /**
     * 
     * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links to it are removed.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateZonesDeleteWithHttpInfo(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = privateZonesDeleteValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links to it are removed.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesDeleteAsync(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesDeleteValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateZonesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesGetCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesGetValidateBeforeCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateZonesGet(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling privateZonesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesGet(Async)");
        }

        return privateZonesGetCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a Private DNS zone. Retrieves the zone properties, but not the virtual networks links or the record sets within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PrivateZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateZone privateZonesGet(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PrivateZone> localVarResp = privateZonesGetWithHttpInfo(resourceGroupName, privateZoneName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Private DNS zone. Retrieves the zone properties, but not the virtual networks links or the record sets within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PrivateZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateZone> privateZonesGetWithHttpInfo(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateZonesGetValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Private DNS zone. Retrieves the zone properties, but not the virtual networks links or the record sets within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesGetAsync(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, final ApiCallback<PrivateZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesGetValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateZonesList
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesListCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/privateDnsZones"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesListValidateBeforeCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesList(Async)");
        }

        return privateZonesListCall(apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * Lists the Private DNS zones in all resource groups in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @return PrivateZoneListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateZoneListResult privateZonesList(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<PrivateZoneListResult> localVarResp = privateZonesListWithHttpInfo(apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Private DNS zones in all resource groups in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @return ApiResponse&lt;PrivateZoneListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateZoneListResult> privateZonesListWithHttpInfo(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = privateZonesListValidateBeforeCall(apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<PrivateZoneListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Private DNS zones in all resource groups in a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesListAsync(String apiVersion, String subscriptionId, Integer $top, final ApiCallback<PrivateZoneListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesListValidateBeforeCall(apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<PrivateZoneListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateZonesListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateZonesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesListByResourceGroup(Async)");
        }

        return privateZonesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * Lists the Private DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @return PrivateZoneListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateZoneListResult privateZonesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<PrivateZoneListResult> localVarResp = privateZonesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Private DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @return ApiResponse&lt;PrivateZoneListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateZoneListResult> privateZonesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = privateZonesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<PrivateZoneListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Private DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback<PrivateZoneListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<PrivateZoneListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateZonesUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone update operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesUpdateCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateZonesUpdateValidateBeforeCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateZonesUpdate(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling privateZonesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateZonesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateZonesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateZonesUpdate(Async)");
        }

        return privateZonesUpdateCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, _callback);

    }

    /**
     * 
     * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @return PrivateZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone update operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateZone privateZonesUpdate(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch) throws ApiException {
        ApiResponse<PrivateZone> localVarResp = privateZonesUpdateWithHttpInfo(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @return ApiResponse&lt;PrivateZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone update operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateZone> privateZonesUpdateWithHttpInfo(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = privateZonesUpdateValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, null);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Private DNS zone update operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateZonesUpdateAsync(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, PrivateZone parameters, String ifMatch, final ApiCallback<PrivateZone> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateZonesUpdateValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, parameters, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<PrivateZone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
