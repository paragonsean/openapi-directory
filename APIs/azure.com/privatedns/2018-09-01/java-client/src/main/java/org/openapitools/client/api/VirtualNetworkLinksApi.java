/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.VirtualNetworkLink;
import org.openapitools.client.model.VirtualNetworkLinkListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualNetworkLinksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualNetworkLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualNetworkLinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for virtualNetworkLinksCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new virtual network link to the Private DNS zone to be created, but to prevent updating an existing link. Other values will be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The virtual network link to the Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to upsert virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksCreateOrUpdateCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "virtualNetworkLinkName" + "}", localVarApiClient.escapeString(virtualNetworkLinkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkLinksCreateOrUpdateValidateBeforeCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkLinkName' is set
        if (virtualNetworkLinkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkLinkName' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkLinksCreateOrUpdate(Async)");
        }

        return virtualNetworkLinksCreateOrUpdateCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates or updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new virtual network link to the Private DNS zone to be created, but to prevent updating an existing link. Other values will be ignored. (optional)
     * @return VirtualNetworkLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The virtual network link to the Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to upsert virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkLink virtualNetworkLinksCreateOrUpdate(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<VirtualNetworkLink> localVarResp = virtualNetworkLinksCreateOrUpdateWithHttpInfo(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new virtual network link to the Private DNS zone to be created, but to prevent updating an existing link. Other values will be ignored. (optional)
     * @return ApiResponse&lt;VirtualNetworkLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The virtual network link to the Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to upsert virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkLink> virtualNetworkLinksCreateOrUpdateWithHttpInfo(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkLinksCreateOrUpdateValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new virtual network link to the Private DNS zone to be created, but to prevent updating an existing link. Other values will be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The virtual network link to the Private DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to upsert virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksCreateOrUpdateAsync(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, String ifNoneMatch, final ApiCallback<VirtualNetworkLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkLinksCreateOrUpdateValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkLinksDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to delete virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The virtual network link to the Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksDeleteCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "virtualNetworkLinkName" + "}", localVarApiClient.escapeString(virtualNetworkLinkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkLinksDeleteValidateBeforeCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkLinksDelete(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling virtualNetworkLinksDelete(Async)");
        }

        // verify the required parameter 'virtualNetworkLinkName' is set
        if (virtualNetworkLinkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkLinkName' when calling virtualNetworkLinksDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkLinksDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkLinksDelete(Async)");
        }

        return virtualNetworkLinksDeleteCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration virtual network, all auto-registered DNS records in the zone for the virtual network will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to delete virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The virtual network link to the Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public void virtualNetworkLinksDelete(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        virtualNetworkLinksDeleteWithHttpInfo(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, ifMatch);
    }

    /**
     * 
     * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration virtual network, all auto-registered DNS records in the zone for the virtual network will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to delete virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The virtual network link to the Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualNetworkLinksDeleteWithHttpInfo(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkLinksDeleteValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration virtual network, all auto-registered DNS records in the zone for the virtual network will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to delete virtual network link to the Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The virtual network link to the Private DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksDeleteAsync(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkLinksDeleteValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkLinksGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksGetCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "virtualNetworkLinkName" + "}", localVarApiClient.escapeString(virtualNetworkLinkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkLinksGetValidateBeforeCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkLinksGet(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling virtualNetworkLinksGet(Async)");
        }

        // verify the required parameter 'virtualNetworkLinkName' is set
        if (virtualNetworkLinkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkLinkName' when calling virtualNetworkLinksGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkLinksGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkLinksGet(Async)");
        }

        return virtualNetworkLinksGetCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkLink virtualNetworkLinksGet(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkLink> localVarResp = virtualNetworkLinksGetWithHttpInfo(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkLink> virtualNetworkLinksGetWithHttpInfo(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkLinksGetValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksGetAsync(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkLinksGetValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkLinksList
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of virtual network links to return. If not specified, returns up to 100 virtual network links. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksListCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkLinksListValidateBeforeCall(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkLinksList(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling virtualNetworkLinksList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkLinksList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkLinksList(Async)");
        }

        return virtualNetworkLinksListCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * Lists the virtual network links to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of virtual network links to return. If not specified, returns up to 100 virtual network links. (optional)
     * @return VirtualNetworkLinkListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkLinkListResult virtualNetworkLinksList(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<VirtualNetworkLinkListResult> localVarResp = virtualNetworkLinksListWithHttpInfo(resourceGroupName, privateZoneName, apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the virtual network links to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of virtual network links to return. If not specified, returns up to 100 virtual network links. (optional)
     * @return ApiResponse&lt;VirtualNetworkLinkListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkLinkListResult> virtualNetworkLinksListWithHttpInfo(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkLinksListValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkLinkListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the virtual network links to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $top The maximum number of virtual network links to return. If not specified, returns up to 100 virtual network links. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksListAsync(String resourceGroupName, String privateZoneName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback<VirtualNetworkLinkListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkLinksListValidateBeforeCall(resourceGroupName, privateZoneName, apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkLinkListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkLinksUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to link virtual network link to Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksUpdateCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "privateZoneName" + "}", localVarApiClient.escapeString(privateZoneName.toString()))
            .replace("{" + "virtualNetworkLinkName" + "}", localVarApiClient.escapeString(virtualNetworkLinkName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkLinksUpdateValidateBeforeCall(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkLinksUpdate(Async)");
        }

        // verify the required parameter 'privateZoneName' is set
        if (privateZoneName == null) {
            throw new ApiException("Missing the required parameter 'privateZoneName' when calling virtualNetworkLinksUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkLinkName' is set
        if (virtualNetworkLinkName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkLinkName' when calling virtualNetworkLinksUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkLinksUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkLinksUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkLinksUpdate(Async)");
        }

        return virtualNetworkLinksUpdateCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, _callback);

    }

    /**
     * 
     * Updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @return VirtualNetworkLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to link virtual network link to Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkLink virtualNetworkLinksUpdate(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch) throws ApiException {
        ApiResponse<VirtualNetworkLink> localVarResp = virtualNetworkLinksUpdateWithHttpInfo(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @return ApiResponse&lt;VirtualNetworkLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to link virtual network link to Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkLink> virtualNetworkLinksUpdateWithHttpInfo(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkLinksUpdateValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group. (required)
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot). (required)
     * @param virtualNetworkLinkName The name of the virtual network link. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the Update operation. (required)
     * @param ifMatch The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The virtual network link to the Private DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation to link virtual network link to Private DNS zone has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkLinksUpdateAsync(String resourceGroupName, String privateZoneName, String virtualNetworkLinkName, String apiVersion, String subscriptionId, VirtualNetworkLink parameters, String ifMatch, final ApiCallback<VirtualNetworkLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkLinksUpdateValidateBeforeCall(resourceGroupName, privateZoneName, virtualNetworkLinkName, apiVersion, subscriptionId, parameters, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
