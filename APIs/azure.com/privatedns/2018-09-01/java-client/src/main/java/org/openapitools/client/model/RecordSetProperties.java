/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ARecord;
import org.openapitools.client.model.AaaaRecord;
import org.openapitools.client.model.CnameRecord;
import org.openapitools.client.model.MxRecord;
import org.openapitools.client.model.PtrRecord;
import org.openapitools.client.model.SoaRecord;
import org.openapitools.client.model.SrvRecord;
import org.openapitools.client.model.TxtRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the records in the record set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:34.798732-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordSetProperties {
  public static final String SERIALIZED_NAME_A_RECORDS = "aRecords";
  @SerializedName(SERIALIZED_NAME_A_RECORDS)
  private List<ARecord> aRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_AAAA_RECORDS = "aaaaRecords";
  @SerializedName(SERIALIZED_NAME_AAAA_RECORDS)
  private List<AaaaRecord> aaaaRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_CNAME_RECORD = "cnameRecord";
  @SerializedName(SERIALIZED_NAME_CNAME_RECORD)
  private CnameRecord cnameRecord;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_IS_AUTO_REGISTERED = "isAutoRegistered";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_REGISTERED)
  private Boolean isAutoRegistered;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MX_RECORDS = "mxRecords";
  @SerializedName(SERIALIZED_NAME_MX_RECORDS)
  private List<MxRecord> mxRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_PTR_RECORDS = "ptrRecords";
  @SerializedName(SERIALIZED_NAME_PTR_RECORDS)
  private List<PtrRecord> ptrRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOA_RECORD = "soaRecord";
  @SerializedName(SERIALIZED_NAME_SOA_RECORD)
  private SoaRecord soaRecord;

  public static final String SERIALIZED_NAME_SRV_RECORDS = "srvRecords";
  @SerializedName(SERIALIZED_NAME_SRV_RECORDS)
  private List<SrvRecord> srvRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Long ttl;

  public static final String SERIALIZED_NAME_TXT_RECORDS = "txtRecords";
  @SerializedName(SERIALIZED_NAME_TXT_RECORDS)
  private List<TxtRecord> txtRecords = new ArrayList<>();

  public RecordSetProperties() {
  }

  public RecordSetProperties(
     String fqdn, 
     Boolean isAutoRegistered
  ) {
    this();
    this.fqdn = fqdn;
    this.isAutoRegistered = isAutoRegistered;
  }

  public RecordSetProperties aRecords(List<ARecord> aRecords) {
    this.aRecords = aRecords;
    return this;
  }

  public RecordSetProperties addARecordsItem(ARecord aRecordsItem) {
    if (this.aRecords == null) {
      this.aRecords = new ArrayList<>();
    }
    this.aRecords.add(aRecordsItem);
    return this;
  }

  /**
   * The list of A records in the record set.
   * @return aRecords
   */
  @javax.annotation.Nullable
  public List<ARecord> getaRecords() {
    return aRecords;
  }

  public void setaRecords(List<ARecord> aRecords) {
    this.aRecords = aRecords;
  }


  public RecordSetProperties aaaaRecords(List<AaaaRecord> aaaaRecords) {
    this.aaaaRecords = aaaaRecords;
    return this;
  }

  public RecordSetProperties addAaaaRecordsItem(AaaaRecord aaaaRecordsItem) {
    if (this.aaaaRecords == null) {
      this.aaaaRecords = new ArrayList<>();
    }
    this.aaaaRecords.add(aaaaRecordsItem);
    return this;
  }

  /**
   * The list of AAAA records in the record set.
   * @return aaaaRecords
   */
  @javax.annotation.Nullable
  public List<AaaaRecord> getAaaaRecords() {
    return aaaaRecords;
  }

  public void setAaaaRecords(List<AaaaRecord> aaaaRecords) {
    this.aaaaRecords = aaaaRecords;
  }


  public RecordSetProperties cnameRecord(CnameRecord cnameRecord) {
    this.cnameRecord = cnameRecord;
    return this;
  }

  /**
   * Get cnameRecord
   * @return cnameRecord
   */
  @javax.annotation.Nullable
  public CnameRecord getCnameRecord() {
    return cnameRecord;
  }

  public void setCnameRecord(CnameRecord cnameRecord) {
    this.cnameRecord = cnameRecord;
  }


  /**
   * Fully qualified domain name of the record set.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }



  /**
   * Is the record set auto-registered in the Private DNS zone through a virtual network link?
   * @return isAutoRegistered
   */
  @javax.annotation.Nullable
  public Boolean getIsAutoRegistered() {
    return isAutoRegistered;
  }



  public RecordSetProperties metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public RecordSetProperties putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The metadata attached to the record set.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public RecordSetProperties mxRecords(List<MxRecord> mxRecords) {
    this.mxRecords = mxRecords;
    return this;
  }

  public RecordSetProperties addMxRecordsItem(MxRecord mxRecordsItem) {
    if (this.mxRecords == null) {
      this.mxRecords = new ArrayList<>();
    }
    this.mxRecords.add(mxRecordsItem);
    return this;
  }

  /**
   * The list of MX records in the record set.
   * @return mxRecords
   */
  @javax.annotation.Nullable
  public List<MxRecord> getMxRecords() {
    return mxRecords;
  }

  public void setMxRecords(List<MxRecord> mxRecords) {
    this.mxRecords = mxRecords;
  }


  public RecordSetProperties ptrRecords(List<PtrRecord> ptrRecords) {
    this.ptrRecords = ptrRecords;
    return this;
  }

  public RecordSetProperties addPtrRecordsItem(PtrRecord ptrRecordsItem) {
    if (this.ptrRecords == null) {
      this.ptrRecords = new ArrayList<>();
    }
    this.ptrRecords.add(ptrRecordsItem);
    return this;
  }

  /**
   * The list of PTR records in the record set.
   * @return ptrRecords
   */
  @javax.annotation.Nullable
  public List<PtrRecord> getPtrRecords() {
    return ptrRecords;
  }

  public void setPtrRecords(List<PtrRecord> ptrRecords) {
    this.ptrRecords = ptrRecords;
  }


  public RecordSetProperties soaRecord(SoaRecord soaRecord) {
    this.soaRecord = soaRecord;
    return this;
  }

  /**
   * Get soaRecord
   * @return soaRecord
   */
  @javax.annotation.Nullable
  public SoaRecord getSoaRecord() {
    return soaRecord;
  }

  public void setSoaRecord(SoaRecord soaRecord) {
    this.soaRecord = soaRecord;
  }


  public RecordSetProperties srvRecords(List<SrvRecord> srvRecords) {
    this.srvRecords = srvRecords;
    return this;
  }

  public RecordSetProperties addSrvRecordsItem(SrvRecord srvRecordsItem) {
    if (this.srvRecords == null) {
      this.srvRecords = new ArrayList<>();
    }
    this.srvRecords.add(srvRecordsItem);
    return this;
  }

  /**
   * The list of SRV records in the record set.
   * @return srvRecords
   */
  @javax.annotation.Nullable
  public List<SrvRecord> getSrvRecords() {
    return srvRecords;
  }

  public void setSrvRecords(List<SrvRecord> srvRecords) {
    this.srvRecords = srvRecords;
  }


  public RecordSetProperties ttl(Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The TTL (time-to-live) of the records in the record set.
   * @return ttl
   */
  @javax.annotation.Nullable
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(Long ttl) {
    this.ttl = ttl;
  }


  public RecordSetProperties txtRecords(List<TxtRecord> txtRecords) {
    this.txtRecords = txtRecords;
    return this;
  }

  public RecordSetProperties addTxtRecordsItem(TxtRecord txtRecordsItem) {
    if (this.txtRecords == null) {
      this.txtRecords = new ArrayList<>();
    }
    this.txtRecords.add(txtRecordsItem);
    return this;
  }

  /**
   * The list of TXT records in the record set.
   * @return txtRecords
   */
  @javax.annotation.Nullable
  public List<TxtRecord> getTxtRecords() {
    return txtRecords;
  }

  public void setTxtRecords(List<TxtRecord> txtRecords) {
    this.txtRecords = txtRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordSetProperties recordSetProperties = (RecordSetProperties) o;
    return Objects.equals(this.aRecords, recordSetProperties.aRecords) &&
        Objects.equals(this.aaaaRecords, recordSetProperties.aaaaRecords) &&
        Objects.equals(this.cnameRecord, recordSetProperties.cnameRecord) &&
        Objects.equals(this.fqdn, recordSetProperties.fqdn) &&
        Objects.equals(this.isAutoRegistered, recordSetProperties.isAutoRegistered) &&
        Objects.equals(this.metadata, recordSetProperties.metadata) &&
        Objects.equals(this.mxRecords, recordSetProperties.mxRecords) &&
        Objects.equals(this.ptrRecords, recordSetProperties.ptrRecords) &&
        Objects.equals(this.soaRecord, recordSetProperties.soaRecord) &&
        Objects.equals(this.srvRecords, recordSetProperties.srvRecords) &&
        Objects.equals(this.ttl, recordSetProperties.ttl) &&
        Objects.equals(this.txtRecords, recordSetProperties.txtRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aRecords, aaaaRecords, cnameRecord, fqdn, isAutoRegistered, metadata, mxRecords, ptrRecords, soaRecord, srvRecords, ttl, txtRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordSetProperties {\n");
    sb.append("    aRecords: ").append(toIndentedString(aRecords)).append("\n");
    sb.append("    aaaaRecords: ").append(toIndentedString(aaaaRecords)).append("\n");
    sb.append("    cnameRecord: ").append(toIndentedString(cnameRecord)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    isAutoRegistered: ").append(toIndentedString(isAutoRegistered)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    mxRecords: ").append(toIndentedString(mxRecords)).append("\n");
    sb.append("    ptrRecords: ").append(toIndentedString(ptrRecords)).append("\n");
    sb.append("    soaRecord: ").append(toIndentedString(soaRecord)).append("\n");
    sb.append("    srvRecords: ").append(toIndentedString(srvRecords)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    txtRecords: ").append(toIndentedString(txtRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aRecords");
    openapiFields.add("aaaaRecords");
    openapiFields.add("cnameRecord");
    openapiFields.add("fqdn");
    openapiFields.add("isAutoRegistered");
    openapiFields.add("metadata");
    openapiFields.add("mxRecords");
    openapiFields.add("ptrRecords");
    openapiFields.add("soaRecord");
    openapiFields.add("srvRecords");
    openapiFields.add("ttl");
    openapiFields.add("txtRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordSetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordSetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordSetProperties is not found in the empty JSON string", RecordSetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordSetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordSetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aRecords") != null && !jsonObj.get("aRecords").isJsonNull()) {
        JsonArray jsonArrayaRecords = jsonObj.getAsJsonArray("aRecords");
        if (jsonArrayaRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aRecords` to be an array in the JSON string but got `%s`", jsonObj.get("aRecords").toString()));
          }

          // validate the optional field `aRecords` (array)
          for (int i = 0; i < jsonArrayaRecords.size(); i++) {
            ARecord.validateJsonElement(jsonArrayaRecords.get(i));
          };
        }
      }
      if (jsonObj.get("aaaaRecords") != null && !jsonObj.get("aaaaRecords").isJsonNull()) {
        JsonArray jsonArrayaaaaRecords = jsonObj.getAsJsonArray("aaaaRecords");
        if (jsonArrayaaaaRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aaaaRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aaaaRecords` to be an array in the JSON string but got `%s`", jsonObj.get("aaaaRecords").toString()));
          }

          // validate the optional field `aaaaRecords` (array)
          for (int i = 0; i < jsonArrayaaaaRecords.size(); i++) {
            AaaaRecord.validateJsonElement(jsonArrayaaaaRecords.get(i));
          };
        }
      }
      // validate the optional field `cnameRecord`
      if (jsonObj.get("cnameRecord") != null && !jsonObj.get("cnameRecord").isJsonNull()) {
        CnameRecord.validateJsonElement(jsonObj.get("cnameRecord"));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (jsonObj.get("mxRecords") != null && !jsonObj.get("mxRecords").isJsonNull()) {
        JsonArray jsonArraymxRecords = jsonObj.getAsJsonArray("mxRecords");
        if (jsonArraymxRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mxRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mxRecords` to be an array in the JSON string but got `%s`", jsonObj.get("mxRecords").toString()));
          }

          // validate the optional field `mxRecords` (array)
          for (int i = 0; i < jsonArraymxRecords.size(); i++) {
            MxRecord.validateJsonElement(jsonArraymxRecords.get(i));
          };
        }
      }
      if (jsonObj.get("ptrRecords") != null && !jsonObj.get("ptrRecords").isJsonNull()) {
        JsonArray jsonArrayptrRecords = jsonObj.getAsJsonArray("ptrRecords");
        if (jsonArrayptrRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ptrRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ptrRecords` to be an array in the JSON string but got `%s`", jsonObj.get("ptrRecords").toString()));
          }

          // validate the optional field `ptrRecords` (array)
          for (int i = 0; i < jsonArrayptrRecords.size(); i++) {
            PtrRecord.validateJsonElement(jsonArrayptrRecords.get(i));
          };
        }
      }
      // validate the optional field `soaRecord`
      if (jsonObj.get("soaRecord") != null && !jsonObj.get("soaRecord").isJsonNull()) {
        SoaRecord.validateJsonElement(jsonObj.get("soaRecord"));
      }
      if (jsonObj.get("srvRecords") != null && !jsonObj.get("srvRecords").isJsonNull()) {
        JsonArray jsonArraysrvRecords = jsonObj.getAsJsonArray("srvRecords");
        if (jsonArraysrvRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("srvRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `srvRecords` to be an array in the JSON string but got `%s`", jsonObj.get("srvRecords").toString()));
          }

          // validate the optional field `srvRecords` (array)
          for (int i = 0; i < jsonArraysrvRecords.size(); i++) {
            SrvRecord.validateJsonElement(jsonArraysrvRecords.get(i));
          };
        }
      }
      if (jsonObj.get("txtRecords") != null && !jsonObj.get("txtRecords").isJsonNull()) {
        JsonArray jsonArraytxtRecords = jsonObj.getAsJsonArray("txtRecords");
        if (jsonArraytxtRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("txtRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `txtRecords` to be an array in the JSON string but got `%s`", jsonObj.get("txtRecords").toString()));
          }

          // validate the optional field `txtRecords` (array)
          for (int i = 0; i < jsonArraytxtRecords.size(); i++) {
            TxtRecord.validateJsonElement(jsonArraytxtRecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordSetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordSetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordSetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordSetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordSetProperties>() {
           @Override
           public void write(JsonWriter out, RecordSetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordSetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordSetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordSetProperties
   * @throws IOException if the JSON string is invalid with respect to RecordSetProperties
   */
  public static RecordSetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordSetProperties.class);
  }

  /**
   * Convert an instance of RecordSetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

