/*
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.RecordSet;
import org.openapitools.client.model.RecordSetListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecordSetsApi
 */
@Disabled
public class RecordSetsApiTest {

    private final RecordSetsApi api = new RecordSetsApi();

    /**
     * Creates or updates a record set within a Private DNS zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String recordType = null;
        String relativeRecordSetName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RecordSet parameters = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        RecordSet response = api.recordSetsCreateOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Deletes a record set from a Private DNS zone. This operation cannot be undone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String recordType = null;
        String relativeRecordSetName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        api.recordSetsDelete(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, ifMatch);
        // TODO: test validations
    }

    /**
     * Gets a record set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsGetTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String recordType = null;
        String relativeRecordSetName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RecordSet response = api.recordSetsGet(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all record sets in a Private DNS zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsListTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        String $recordsetnamesuffix = null;
        RecordSetListResult response = api.recordSetsList(resourceGroupName, privateZoneName, apiVersion, subscriptionId, $top, $recordsetnamesuffix);
        // TODO: test validations
    }

    /**
     * Lists the record sets of a specified type in a Private DNS zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsListByTypeTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String recordType = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        String $recordsetnamesuffix = null;
        RecordSetListResult response = api.recordSetsListByType(resourceGroupName, privateZoneName, recordType, apiVersion, subscriptionId, $top, $recordsetnamesuffix);
        // TODO: test validations
    }

    /**
     * Updates a record set within a Private DNS zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordSetsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String privateZoneName = null;
        String recordType = null;
        String relativeRecordSetName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RecordSet parameters = null;
        String ifMatch = null;
        RecordSet response = api.recordSetsUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

}
