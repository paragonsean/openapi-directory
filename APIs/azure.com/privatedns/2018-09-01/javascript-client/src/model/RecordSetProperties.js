/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ARecord from './ARecord';
import AaaaRecord from './AaaaRecord';
import CnameRecord from './CnameRecord';
import MxRecord from './MxRecord';
import PtrRecord from './PtrRecord';
import SoaRecord from './SoaRecord';
import SrvRecord from './SrvRecord';
import TxtRecord from './TxtRecord';

/**
 * The RecordSetProperties model module.
 * @module model/RecordSetProperties
 * @version 2018-09-01
 */
class RecordSetProperties {
    /**
     * Constructs a new <code>RecordSetProperties</code>.
     * Represents the properties of the records in the record set.
     * @alias module:model/RecordSetProperties
     */
    constructor() { 
        
        RecordSetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordSetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordSetProperties} obj Optional instance to populate.
     * @return {module:model/RecordSetProperties} The populated <code>RecordSetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordSetProperties();

            if (data.hasOwnProperty('aRecords')) {
                obj['aRecords'] = ApiClient.convertToType(data['aRecords'], [ARecord]);
            }
            if (data.hasOwnProperty('aaaaRecords')) {
                obj['aaaaRecords'] = ApiClient.convertToType(data['aaaaRecords'], [AaaaRecord]);
            }
            if (data.hasOwnProperty('cnameRecord')) {
                obj['cnameRecord'] = CnameRecord.constructFromObject(data['cnameRecord']);
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('isAutoRegistered')) {
                obj['isAutoRegistered'] = ApiClient.convertToType(data['isAutoRegistered'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mxRecords')) {
                obj['mxRecords'] = ApiClient.convertToType(data['mxRecords'], [MxRecord]);
            }
            if (data.hasOwnProperty('ptrRecords')) {
                obj['ptrRecords'] = ApiClient.convertToType(data['ptrRecords'], [PtrRecord]);
            }
            if (data.hasOwnProperty('soaRecord')) {
                obj['soaRecord'] = SoaRecord.constructFromObject(data['soaRecord']);
            }
            if (data.hasOwnProperty('srvRecords')) {
                obj['srvRecords'] = ApiClient.convertToType(data['srvRecords'], [SrvRecord]);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('txtRecords')) {
                obj['txtRecords'] = ApiClient.convertToType(data['txtRecords'], [TxtRecord]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordSetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordSetProperties</code>.
     */
    static validateJSON(data) {
        if (data['aRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aRecords'])) {
                throw new Error("Expected the field `aRecords` to be an array in the JSON data but got " + data['aRecords']);
            }
            // validate the optional field `aRecords` (array)
            for (const item of data['aRecords']) {
                ARecord.validateJSON(item);
            };
        }
        if (data['aaaaRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aaaaRecords'])) {
                throw new Error("Expected the field `aaaaRecords` to be an array in the JSON data but got " + data['aaaaRecords']);
            }
            // validate the optional field `aaaaRecords` (array)
            for (const item of data['aaaaRecords']) {
                AaaaRecord.validateJSON(item);
            };
        }
        // validate the optional field `cnameRecord`
        if (data['cnameRecord']) { // data not null
          CnameRecord.validateJSON(data['cnameRecord']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        if (data['mxRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mxRecords'])) {
                throw new Error("Expected the field `mxRecords` to be an array in the JSON data but got " + data['mxRecords']);
            }
            // validate the optional field `mxRecords` (array)
            for (const item of data['mxRecords']) {
                MxRecord.validateJSON(item);
            };
        }
        if (data['ptrRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ptrRecords'])) {
                throw new Error("Expected the field `ptrRecords` to be an array in the JSON data but got " + data['ptrRecords']);
            }
            // validate the optional field `ptrRecords` (array)
            for (const item of data['ptrRecords']) {
                PtrRecord.validateJSON(item);
            };
        }
        // validate the optional field `soaRecord`
        if (data['soaRecord']) { // data not null
          SoaRecord.validateJSON(data['soaRecord']);
        }
        if (data['srvRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['srvRecords'])) {
                throw new Error("Expected the field `srvRecords` to be an array in the JSON data but got " + data['srvRecords']);
            }
            // validate the optional field `srvRecords` (array)
            for (const item of data['srvRecords']) {
                SrvRecord.validateJSON(item);
            };
        }
        if (data['txtRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['txtRecords'])) {
                throw new Error("Expected the field `txtRecords` to be an array in the JSON data but got " + data['txtRecords']);
            }
            // validate the optional field `txtRecords` (array)
            for (const item of data['txtRecords']) {
                TxtRecord.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of A records in the record set.
 * @member {Array.<module:model/ARecord>} aRecords
 */
RecordSetProperties.prototype['aRecords'] = undefined;

/**
 * The list of AAAA records in the record set.
 * @member {Array.<module:model/AaaaRecord>} aaaaRecords
 */
RecordSetProperties.prototype['aaaaRecords'] = undefined;

/**
 * @member {module:model/CnameRecord} cnameRecord
 */
RecordSetProperties.prototype['cnameRecord'] = undefined;

/**
 * Fully qualified domain name of the record set.
 * @member {String} fqdn
 */
RecordSetProperties.prototype['fqdn'] = undefined;

/**
 * Is the record set auto-registered in the Private DNS zone through a virtual network link?
 * @member {Boolean} isAutoRegistered
 */
RecordSetProperties.prototype['isAutoRegistered'] = undefined;

/**
 * The metadata attached to the record set.
 * @member {Object.<String, String>} metadata
 */
RecordSetProperties.prototype['metadata'] = undefined;

/**
 * The list of MX records in the record set.
 * @member {Array.<module:model/MxRecord>} mxRecords
 */
RecordSetProperties.prototype['mxRecords'] = undefined;

/**
 * The list of PTR records in the record set.
 * @member {Array.<module:model/PtrRecord>} ptrRecords
 */
RecordSetProperties.prototype['ptrRecords'] = undefined;

/**
 * @member {module:model/SoaRecord} soaRecord
 */
RecordSetProperties.prototype['soaRecord'] = undefined;

/**
 * The list of SRV records in the record set.
 * @member {Array.<module:model/SrvRecord>} srvRecords
 */
RecordSetProperties.prototype['srvRecords'] = undefined;

/**
 * The TTL (time-to-live) of the records in the record set.
 * @member {Number} ttl
 */
RecordSetProperties.prototype['ttl'] = undefined;

/**
 * The list of TXT records in the record set.
 * @member {Array.<module:model/TxtRecord>} txtRecords
 */
RecordSetProperties.prototype['txtRecords'] = undefined;






export default RecordSetProperties;

