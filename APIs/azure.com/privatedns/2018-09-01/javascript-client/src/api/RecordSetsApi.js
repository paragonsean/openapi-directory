/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import RecordSet from '../model/RecordSet';
import RecordSetListResult from '../model/RecordSetListResult';

/**
* RecordSets service.
* @module api/RecordSetsApi
* @version 2018-09-01
*/
export default class RecordSetsApi {

    /**
    * Constructs a new RecordSetsApi. 
    * @alias module:api/RecordSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recordSetsCreateOrUpdate operation.
     * @callback module:api/RecordSetsApi~recordSetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a record set within a Private DNS zone.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the Private DNS zone is created).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RecordSet} parameters Parameters supplied to the CreateOrUpdate operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.
     * @param {module:api/RecordSetsApi~recordSetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsCreateOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling recordSetsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'recordType': recordType,
        'relativeRecordSetName': relativeRecordSetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsDelete operation.
     * @callback module:api/RecordSetsApi~recordSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a record set from a Private DNS zone. This operation cannot be undone.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the Private DNS zone is deleted).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the record set. Omit this value to always delete the current record set. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes.
     * @param {module:api/RecordSetsApi~recordSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recordSetsDelete(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsDelete");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsDelete");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsDelete");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'recordType': recordType,
        'relativeRecordSetName': relativeRecordSetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsGet operation.
     * @callback module:api/RecordSetsApi~recordSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a record set.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of DNS record in this record set.
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RecordSetsApi~recordSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsGet(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsGet");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsGet");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsGet");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'recordType': recordType,
        'relativeRecordSetName': relativeRecordSetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsList operation.
     * @callback module:api/RecordSetsApi~recordSetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all record sets in a Private DNS zone.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param {String} [recordsetnamesuffix] The suffix label of the record set name to be used to filter the record set enumeration. If this parameter is specified, the returned enumeration will only contain records that end with \".<recordsetnamesuffix>\".
     * @param {module:api/RecordSetsApi~recordSetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSetListResult}
     */
    recordSetsList(resourceGroupName, privateZoneName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsList");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$recordsetnamesuffix': opts['recordsetnamesuffix'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/ALL', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsListByType operation.
     * @callback module:api/RecordSetsApi~recordSetsListByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the record sets of a specified type in a Private DNS zone.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of record sets to enumerate.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param {String} [recordsetnamesuffix] The suffix label of the record set name to be used to filter the record set enumeration. If this parameter is specified, the returned enumeration will only contain records that end with \".<recordsetnamesuffix>\".
     * @param {module:api/RecordSetsApi~recordSetsListByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSetListResult}
     */
    recordSetsListByType(resourceGroupName, privateZoneName, recordType, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsListByType");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsListByType");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsListByType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsListByType");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsListByType");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$recordsetnamesuffix': opts['recordsetnamesuffix'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsUpdate operation.
     * @callback module:api/RecordSetsApi~recordSetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a record set within a Private DNS zone.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of DNS record in this record set.
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RecordSet} parameters Parameters supplied to the Update operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {module:api/RecordSetsApi~recordSetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'privateZoneName' is set
      if (privateZoneName === undefined || privateZoneName === null) {
        throw new Error("Missing the required parameter 'privateZoneName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsUpdate");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling recordSetsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'privateZoneName': privateZoneName,
        'recordType': recordType,
        'relativeRecordSetName': relativeRecordSetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
