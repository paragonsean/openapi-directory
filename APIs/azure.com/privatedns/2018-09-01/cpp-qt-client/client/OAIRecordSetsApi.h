/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecordSetsApi_H
#define OAI_OAIRecordSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIRecordSet.h"
#include "OAIRecordSetListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecordSetsApi : public QObject {
    Q_OBJECT

public:
    OAIRecordSetsApi(const int timeOut = 0);
    ~OAIRecordSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  record_type QString [required]
    * @param[in]  relative_record_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRecordSet [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void recordSetsCreateOrUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &record_type, const QString &relative_record_set_name, const QString &api_version, const QString &subscription_id, const OAIRecordSet &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  record_type QString [required]
    * @param[in]  relative_record_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void recordSetsDelete(const QString &resource_group_name, const QString &private_zone_name, const QString &record_type, const QString &relative_record_set_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  record_type QString [required]
    * @param[in]  relative_record_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void recordSetsGet(const QString &resource_group_name, const QString &private_zone_name, const QString &record_type, const QString &relative_record_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  recordsetnamesuffix QString [optional]
    */
    virtual void recordSetsList(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &recordsetnamesuffix = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  record_type QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  recordsetnamesuffix QString [optional]
    */
    virtual void recordSetsListByType(const QString &resource_group_name, const QString &private_zone_name, const QString &record_type, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &recordsetnamesuffix = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  record_type QString [required]
    * @param[in]  relative_record_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRecordSet [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void recordSetsUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &record_type, const QString &relative_record_set_name, const QString &api_version, const QString &subscription_id, const OAIRecordSet &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recordSetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void recordSetsDeleteCallback(OAIHttpRequestWorker *worker);
    void recordSetsGetCallback(OAIHttpRequestWorker *worker);
    void recordSetsListCallback(OAIHttpRequestWorker *worker);
    void recordSetsListByTypeCallback(OAIHttpRequestWorker *worker);
    void recordSetsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recordSetsCreateOrUpdateSignal(OAIRecordSet summary);
    void recordSetsDeleteSignal();
    void recordSetsGetSignal(OAIRecordSet summary);
    void recordSetsListSignal(OAIRecordSetListResult summary);
    void recordSetsListByTypeSignal(OAIRecordSetListResult summary);
    void recordSetsUpdateSignal(OAIRecordSet summary);


    void recordSetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRecordSet summary);
    void recordSetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void recordSetsGetSignalFull(OAIHttpRequestWorker *worker, OAIRecordSet summary);
    void recordSetsListSignalFull(OAIHttpRequestWorker *worker, OAIRecordSetListResult summary);
    void recordSetsListByTypeSignalFull(OAIHttpRequestWorker *worker, OAIRecordSetListResult summary);
    void recordSetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRecordSet summary);

    Q_DECL_DEPRECATED_X("Use recordSetsCreateOrUpdateSignalError() instead")
    void recordSetsCreateOrUpdateSignalE(OAIRecordSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsCreateOrUpdateSignalError(OAIRecordSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsDeleteSignalError() instead")
    void recordSetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsGetSignalError() instead")
    void recordSetsGetSignalE(OAIRecordSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsGetSignalError(OAIRecordSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsListSignalError() instead")
    void recordSetsListSignalE(OAIRecordSetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsListSignalError(OAIRecordSetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsListByTypeSignalError() instead")
    void recordSetsListByTypeSignalE(OAIRecordSetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsListByTypeSignalError(OAIRecordSetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsUpdateSignalError() instead")
    void recordSetsUpdateSignalE(OAIRecordSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsUpdateSignalError(OAIRecordSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recordSetsCreateOrUpdateSignalErrorFull() instead")
    void recordSetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsDeleteSignalErrorFull() instead")
    void recordSetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsGetSignalErrorFull() instead")
    void recordSetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsListSignalErrorFull() instead")
    void recordSetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsListByTypeSignalErrorFull() instead")
    void recordSetsListByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsListByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordSetsUpdateSignalErrorFull() instead")
    void recordSetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordSetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
