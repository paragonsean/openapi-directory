/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateZonesApi_H
#define OAI_OAIPrivateZonesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIPrivateZone.h"
#include "OAIPrivateZoneListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateZonesApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateZonesApi(const int timeOut = 0);
    ~OAIPrivateZonesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPrivateZone [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void privateZonesCreateOrUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id, const OAIPrivateZone &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void privateZonesDelete(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateZonesGet(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void privateZonesList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void privateZonesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPrivateZone [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void privateZonesUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id, const OAIPrivateZone &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateZonesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void privateZonesDeleteCallback(OAIHttpRequestWorker *worker);
    void privateZonesGetCallback(OAIHttpRequestWorker *worker);
    void privateZonesListCallback(OAIHttpRequestWorker *worker);
    void privateZonesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void privateZonesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateZonesCreateOrUpdateSignal(OAIPrivateZone summary);
    void privateZonesDeleteSignal();
    void privateZonesGetSignal(OAIPrivateZone summary);
    void privateZonesListSignal(OAIPrivateZoneListResult summary);
    void privateZonesListByResourceGroupSignal(OAIPrivateZoneListResult summary);
    void privateZonesUpdateSignal(OAIPrivateZone summary);


    void privateZonesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateZone summary);
    void privateZonesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateZonesGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateZone summary);
    void privateZonesListSignalFull(OAIHttpRequestWorker *worker, OAIPrivateZoneListResult summary);
    void privateZonesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPrivateZoneListResult summary);
    void privateZonesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateZone summary);

    Q_DECL_DEPRECATED_X("Use privateZonesCreateOrUpdateSignalError() instead")
    void privateZonesCreateOrUpdateSignalE(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesCreateOrUpdateSignalError(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesDeleteSignalError() instead")
    void privateZonesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesGetSignalError() instead")
    void privateZonesGetSignalE(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesGetSignalError(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesListSignalError() instead")
    void privateZonesListSignalE(OAIPrivateZoneListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesListSignalError(OAIPrivateZoneListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesListByResourceGroupSignalError() instead")
    void privateZonesListByResourceGroupSignalE(OAIPrivateZoneListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesListByResourceGroupSignalError(OAIPrivateZoneListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesUpdateSignalError() instead")
    void privateZonesUpdateSignalE(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesUpdateSignalError(OAIPrivateZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateZonesCreateOrUpdateSignalErrorFull() instead")
    void privateZonesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesDeleteSignalErrorFull() instead")
    void privateZonesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesGetSignalErrorFull() instead")
    void privateZonesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesListSignalErrorFull() instead")
    void privateZonesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesListByResourceGroupSignalErrorFull() instead")
    void privateZonesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateZonesUpdateSignalErrorFull() instead")
    void privateZonesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateZonesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
