/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoaRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoaRecord::OAISoaRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoaRecord::OAISoaRecord() {
    this->initializeModel();
}

OAISoaRecord::~OAISoaRecord() {}

void OAISoaRecord::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_minimum_ttl_isSet = false;
    m_minimum_ttl_isValid = false;

    m_refresh_time_isSet = false;
    m_refresh_time_isValid = false;

    m_retry_time_isSet = false;
    m_retry_time_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAISoaRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoaRecord::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_minimum_ttl_isValid = ::OpenAPI::fromJsonValue(m_minimum_ttl, json[QString("minimumTtl")]);
    m_minimum_ttl_isSet = !json[QString("minimumTtl")].isNull() && m_minimum_ttl_isValid;

    m_refresh_time_isValid = ::OpenAPI::fromJsonValue(m_refresh_time, json[QString("refreshTime")]);
    m_refresh_time_isSet = !json[QString("refreshTime")].isNull() && m_refresh_time_isValid;

    m_retry_time_isValid = ::OpenAPI::fromJsonValue(m_retry_time, json[QString("retryTime")]);
    m_retry_time_isSet = !json[QString("retryTime")].isNull() && m_retry_time_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAISoaRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoaRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_minimum_ttl_isSet) {
        obj.insert(QString("minimumTtl"), ::OpenAPI::toJsonValue(m_minimum_ttl));
    }
    if (m_refresh_time_isSet) {
        obj.insert(QString("refreshTime"), ::OpenAPI::toJsonValue(m_refresh_time));
    }
    if (m_retry_time_isSet) {
        obj.insert(QString("retryTime"), ::OpenAPI::toJsonValue(m_retry_time));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAISoaRecord::getEmail() const {
    return m_email;
}
void OAISoaRecord::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISoaRecord::is_email_Set() const{
    return m_email_isSet;
}

bool OAISoaRecord::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAISoaRecord::getExpireTime() const {
    return m_expire_time;
}
void OAISoaRecord::setExpireTime(const qint64 &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAISoaRecord::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAISoaRecord::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAISoaRecord::getHost() const {
    return m_host;
}
void OAISoaRecord::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISoaRecord::is_host_Set() const{
    return m_host_isSet;
}

bool OAISoaRecord::is_host_Valid() const{
    return m_host_isValid;
}

qint64 OAISoaRecord::getMinimumTtl() const {
    return m_minimum_ttl;
}
void OAISoaRecord::setMinimumTtl(const qint64 &minimum_ttl) {
    m_minimum_ttl = minimum_ttl;
    m_minimum_ttl_isSet = true;
}

bool OAISoaRecord::is_minimum_ttl_Set() const{
    return m_minimum_ttl_isSet;
}

bool OAISoaRecord::is_minimum_ttl_Valid() const{
    return m_minimum_ttl_isValid;
}

qint64 OAISoaRecord::getRefreshTime() const {
    return m_refresh_time;
}
void OAISoaRecord::setRefreshTime(const qint64 &refresh_time) {
    m_refresh_time = refresh_time;
    m_refresh_time_isSet = true;
}

bool OAISoaRecord::is_refresh_time_Set() const{
    return m_refresh_time_isSet;
}

bool OAISoaRecord::is_refresh_time_Valid() const{
    return m_refresh_time_isValid;
}

qint64 OAISoaRecord::getRetryTime() const {
    return m_retry_time;
}
void OAISoaRecord::setRetryTime(const qint64 &retry_time) {
    m_retry_time = retry_time;
    m_retry_time_isSet = true;
}

bool OAISoaRecord::is_retry_time_Set() const{
    return m_retry_time_isSet;
}

bool OAISoaRecord::is_retry_time_Valid() const{
    return m_retry_time_isValid;
}

qint64 OAISoaRecord::getSerialNumber() const {
    return m_serial_number;
}
void OAISoaRecord::setSerialNumber(const qint64 &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAISoaRecord::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAISoaRecord::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAISoaRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoaRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
