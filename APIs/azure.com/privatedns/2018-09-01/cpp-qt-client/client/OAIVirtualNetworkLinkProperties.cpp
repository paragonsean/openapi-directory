/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkLinkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkLinkProperties::OAIVirtualNetworkLinkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkLinkProperties::OAIVirtualNetworkLinkProperties() {
    this->initializeModel();
}

OAIVirtualNetworkLinkProperties::~OAIVirtualNetworkLinkProperties() {}

void OAIVirtualNetworkLinkProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_registration_enabled_isSet = false;
    m_registration_enabled_isValid = false;

    m_virtual_network_isSet = false;
    m_virtual_network_isValid = false;

    m_virtual_network_link_state_isSet = false;
    m_virtual_network_link_state_isValid = false;
}

void OAIVirtualNetworkLinkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkLinkProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_registration_enabled_isValid = ::OpenAPI::fromJsonValue(m_registration_enabled, json[QString("registrationEnabled")]);
    m_registration_enabled_isSet = !json[QString("registrationEnabled")].isNull() && m_registration_enabled_isValid;

    m_virtual_network_isValid = ::OpenAPI::fromJsonValue(m_virtual_network, json[QString("virtualNetwork")]);
    m_virtual_network_isSet = !json[QString("virtualNetwork")].isNull() && m_virtual_network_isValid;

    m_virtual_network_link_state_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_link_state, json[QString("virtualNetworkLinkState")]);
    m_virtual_network_link_state_isSet = !json[QString("virtualNetworkLinkState")].isNull() && m_virtual_network_link_state_isValid;
}

QString OAIVirtualNetworkLinkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkLinkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_registration_enabled_isSet) {
        obj.insert(QString("registrationEnabled"), ::OpenAPI::toJsonValue(m_registration_enabled));
    }
    if (m_virtual_network.isSet()) {
        obj.insert(QString("virtualNetwork"), ::OpenAPI::toJsonValue(m_virtual_network));
    }
    if (m_virtual_network_link_state_isSet) {
        obj.insert(QString("virtualNetworkLinkState"), ::OpenAPI::toJsonValue(m_virtual_network_link_state));
    }
    return obj;
}

QString OAIVirtualNetworkLinkProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkLinkProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkLinkProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkLinkProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIVirtualNetworkLinkProperties::isRegistrationEnabled() const {
    return m_registration_enabled;
}
void OAIVirtualNetworkLinkProperties::setRegistrationEnabled(const bool &registration_enabled) {
    m_registration_enabled = registration_enabled;
    m_registration_enabled_isSet = true;
}

bool OAIVirtualNetworkLinkProperties::is_registration_enabled_Set() const{
    return m_registration_enabled_isSet;
}

bool OAIVirtualNetworkLinkProperties::is_registration_enabled_Valid() const{
    return m_registration_enabled_isValid;
}

OAISubResource OAIVirtualNetworkLinkProperties::getVirtualNetwork() const {
    return m_virtual_network;
}
void OAIVirtualNetworkLinkProperties::setVirtualNetwork(const OAISubResource &virtual_network) {
    m_virtual_network = virtual_network;
    m_virtual_network_isSet = true;
}

bool OAIVirtualNetworkLinkProperties::is_virtual_network_Set() const{
    return m_virtual_network_isSet;
}

bool OAIVirtualNetworkLinkProperties::is_virtual_network_Valid() const{
    return m_virtual_network_isValid;
}

QString OAIVirtualNetworkLinkProperties::getVirtualNetworkLinkState() const {
    return m_virtual_network_link_state;
}
void OAIVirtualNetworkLinkProperties::setVirtualNetworkLinkState(const QString &virtual_network_link_state) {
    m_virtual_network_link_state = virtual_network_link_state;
    m_virtual_network_link_state_isSet = true;
}

bool OAIVirtualNetworkLinkProperties::is_virtual_network_link_state_Set() const{
    return m_virtual_network_link_state_isSet;
}

bool OAIVirtualNetworkLinkProperties::is_virtual_network_link_state_Valid() const{
    return m_virtual_network_link_state_isValid;
}

bool OAIVirtualNetworkLinkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_link_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkLinkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
