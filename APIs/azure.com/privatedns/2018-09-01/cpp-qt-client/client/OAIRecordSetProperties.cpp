/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordSetProperties::OAIRecordSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordSetProperties::OAIRecordSetProperties() {
    this->initializeModel();
}

OAIRecordSetProperties::~OAIRecordSetProperties() {}

void OAIRecordSetProperties::initializeModel() {

    m_a_records_isSet = false;
    m_a_records_isValid = false;

    m_aaaa_records_isSet = false;
    m_aaaa_records_isValid = false;

    m_cname_record_isSet = false;
    m_cname_record_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_is_auto_registered_isSet = false;
    m_is_auto_registered_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mx_records_isSet = false;
    m_mx_records_isValid = false;

    m_ptr_records_isSet = false;
    m_ptr_records_isValid = false;

    m_soa_record_isSet = false;
    m_soa_record_isValid = false;

    m_srv_records_isSet = false;
    m_srv_records_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_txt_records_isSet = false;
    m_txt_records_isValid = false;
}

void OAIRecordSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordSetProperties::fromJsonObject(QJsonObject json) {

    m_a_records_isValid = ::OpenAPI::fromJsonValue(m_a_records, json[QString("aRecords")]);
    m_a_records_isSet = !json[QString("aRecords")].isNull() && m_a_records_isValid;

    m_aaaa_records_isValid = ::OpenAPI::fromJsonValue(m_aaaa_records, json[QString("aaaaRecords")]);
    m_aaaa_records_isSet = !json[QString("aaaaRecords")].isNull() && m_aaaa_records_isValid;

    m_cname_record_isValid = ::OpenAPI::fromJsonValue(m_cname_record, json[QString("cnameRecord")]);
    m_cname_record_isSet = !json[QString("cnameRecord")].isNull() && m_cname_record_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_is_auto_registered_isValid = ::OpenAPI::fromJsonValue(m_is_auto_registered, json[QString("isAutoRegistered")]);
    m_is_auto_registered_isSet = !json[QString("isAutoRegistered")].isNull() && m_is_auto_registered_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mx_records_isValid = ::OpenAPI::fromJsonValue(m_mx_records, json[QString("mxRecords")]);
    m_mx_records_isSet = !json[QString("mxRecords")].isNull() && m_mx_records_isValid;

    m_ptr_records_isValid = ::OpenAPI::fromJsonValue(m_ptr_records, json[QString("ptrRecords")]);
    m_ptr_records_isSet = !json[QString("ptrRecords")].isNull() && m_ptr_records_isValid;

    m_soa_record_isValid = ::OpenAPI::fromJsonValue(m_soa_record, json[QString("soaRecord")]);
    m_soa_record_isSet = !json[QString("soaRecord")].isNull() && m_soa_record_isValid;

    m_srv_records_isValid = ::OpenAPI::fromJsonValue(m_srv_records, json[QString("srvRecords")]);
    m_srv_records_isSet = !json[QString("srvRecords")].isNull() && m_srv_records_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_txt_records_isValid = ::OpenAPI::fromJsonValue(m_txt_records, json[QString("txtRecords")]);
    m_txt_records_isSet = !json[QString("txtRecords")].isNull() && m_txt_records_isValid;
}

QString OAIRecordSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_a_records.size() > 0) {
        obj.insert(QString("aRecords"), ::OpenAPI::toJsonValue(m_a_records));
    }
    if (m_aaaa_records.size() > 0) {
        obj.insert(QString("aaaaRecords"), ::OpenAPI::toJsonValue(m_aaaa_records));
    }
    if (m_cname_record.isSet()) {
        obj.insert(QString("cnameRecord"), ::OpenAPI::toJsonValue(m_cname_record));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_is_auto_registered_isSet) {
        obj.insert(QString("isAutoRegistered"), ::OpenAPI::toJsonValue(m_is_auto_registered));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mx_records.size() > 0) {
        obj.insert(QString("mxRecords"), ::OpenAPI::toJsonValue(m_mx_records));
    }
    if (m_ptr_records.size() > 0) {
        obj.insert(QString("ptrRecords"), ::OpenAPI::toJsonValue(m_ptr_records));
    }
    if (m_soa_record.isSet()) {
        obj.insert(QString("soaRecord"), ::OpenAPI::toJsonValue(m_soa_record));
    }
    if (m_srv_records.size() > 0) {
        obj.insert(QString("srvRecords"), ::OpenAPI::toJsonValue(m_srv_records));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_txt_records.size() > 0) {
        obj.insert(QString("txtRecords"), ::OpenAPI::toJsonValue(m_txt_records));
    }
    return obj;
}

QList<OAIARecord> OAIRecordSetProperties::getARecords() const {
    return m_a_records;
}
void OAIRecordSetProperties::setARecords(const QList<OAIARecord> &a_records) {
    m_a_records = a_records;
    m_a_records_isSet = true;
}

bool OAIRecordSetProperties::is_a_records_Set() const{
    return m_a_records_isSet;
}

bool OAIRecordSetProperties::is_a_records_Valid() const{
    return m_a_records_isValid;
}

QList<OAIAaaaRecord> OAIRecordSetProperties::getAaaaRecords() const {
    return m_aaaa_records;
}
void OAIRecordSetProperties::setAaaaRecords(const QList<OAIAaaaRecord> &aaaa_records) {
    m_aaaa_records = aaaa_records;
    m_aaaa_records_isSet = true;
}

bool OAIRecordSetProperties::is_aaaa_records_Set() const{
    return m_aaaa_records_isSet;
}

bool OAIRecordSetProperties::is_aaaa_records_Valid() const{
    return m_aaaa_records_isValid;
}

OAICnameRecord OAIRecordSetProperties::getCnameRecord() const {
    return m_cname_record;
}
void OAIRecordSetProperties::setCnameRecord(const OAICnameRecord &cname_record) {
    m_cname_record = cname_record;
    m_cname_record_isSet = true;
}

bool OAIRecordSetProperties::is_cname_record_Set() const{
    return m_cname_record_isSet;
}

bool OAIRecordSetProperties::is_cname_record_Valid() const{
    return m_cname_record_isValid;
}

QString OAIRecordSetProperties::getFqdn() const {
    return m_fqdn;
}
void OAIRecordSetProperties::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIRecordSetProperties::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIRecordSetProperties::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

bool OAIRecordSetProperties::isIsAutoRegistered() const {
    return m_is_auto_registered;
}
void OAIRecordSetProperties::setIsAutoRegistered(const bool &is_auto_registered) {
    m_is_auto_registered = is_auto_registered;
    m_is_auto_registered_isSet = true;
}

bool OAIRecordSetProperties::is_is_auto_registered_Set() const{
    return m_is_auto_registered_isSet;
}

bool OAIRecordSetProperties::is_is_auto_registered_Valid() const{
    return m_is_auto_registered_isValid;
}

QMap<QString, QString> OAIRecordSetProperties::getMetadata() const {
    return m_metadata;
}
void OAIRecordSetProperties::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRecordSetProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRecordSetProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMxRecord> OAIRecordSetProperties::getMxRecords() const {
    return m_mx_records;
}
void OAIRecordSetProperties::setMxRecords(const QList<OAIMxRecord> &mx_records) {
    m_mx_records = mx_records;
    m_mx_records_isSet = true;
}

bool OAIRecordSetProperties::is_mx_records_Set() const{
    return m_mx_records_isSet;
}

bool OAIRecordSetProperties::is_mx_records_Valid() const{
    return m_mx_records_isValid;
}

QList<OAIPtrRecord> OAIRecordSetProperties::getPtrRecords() const {
    return m_ptr_records;
}
void OAIRecordSetProperties::setPtrRecords(const QList<OAIPtrRecord> &ptr_records) {
    m_ptr_records = ptr_records;
    m_ptr_records_isSet = true;
}

bool OAIRecordSetProperties::is_ptr_records_Set() const{
    return m_ptr_records_isSet;
}

bool OAIRecordSetProperties::is_ptr_records_Valid() const{
    return m_ptr_records_isValid;
}

OAISoaRecord OAIRecordSetProperties::getSoaRecord() const {
    return m_soa_record;
}
void OAIRecordSetProperties::setSoaRecord(const OAISoaRecord &soa_record) {
    m_soa_record = soa_record;
    m_soa_record_isSet = true;
}

bool OAIRecordSetProperties::is_soa_record_Set() const{
    return m_soa_record_isSet;
}

bool OAIRecordSetProperties::is_soa_record_Valid() const{
    return m_soa_record_isValid;
}

QList<OAISrvRecord> OAIRecordSetProperties::getSrvRecords() const {
    return m_srv_records;
}
void OAIRecordSetProperties::setSrvRecords(const QList<OAISrvRecord> &srv_records) {
    m_srv_records = srv_records;
    m_srv_records_isSet = true;
}

bool OAIRecordSetProperties::is_srv_records_Set() const{
    return m_srv_records_isSet;
}

bool OAIRecordSetProperties::is_srv_records_Valid() const{
    return m_srv_records_isValid;
}

qint64 OAIRecordSetProperties::getTtl() const {
    return m_ttl;
}
void OAIRecordSetProperties::setTtl(const qint64 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIRecordSetProperties::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIRecordSetProperties::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QList<OAITxtRecord> OAIRecordSetProperties::getTxtRecords() const {
    return m_txt_records;
}
void OAIRecordSetProperties::setTxtRecords(const QList<OAITxtRecord> &txt_records) {
    m_txt_records = txt_records;
    m_txt_records_isSet = true;
}

bool OAIRecordSetProperties::is_txt_records_Set() const{
    return m_txt_records_isSet;
}

bool OAIRecordSetProperties::is_txt_records_Valid() const{
    return m_txt_records_isValid;
}

bool OAIRecordSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aaaa_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mx_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ptr_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_soa_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_srv_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txt_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
