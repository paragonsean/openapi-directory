/**
 * PrivateDnsManagementClient
 * The Private DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkLinksApi_H
#define OAI_OAIVirtualNetworkLinksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIVirtualNetworkLink.h"
#include "OAIVirtualNetworkLinkListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkLinksApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkLinksApi(const int timeOut = 0);
    ~OAIVirtualNetworkLinksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  virtual_network_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkLink [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void virtualNetworkLinksCreateOrUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &virtual_network_link_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkLink &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  virtual_network_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void virtualNetworkLinksDelete(const QString &resource_group_name, const QString &private_zone_name, const QString &virtual_network_link_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  virtual_network_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkLinksGet(const QString &resource_group_name, const QString &private_zone_name, const QString &virtual_network_link_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void virtualNetworkLinksList(const QString &resource_group_name, const QString &private_zone_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  private_zone_name QString [required]
    * @param[in]  virtual_network_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkLink [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void virtualNetworkLinksUpdate(const QString &resource_group_name, const QString &private_zone_name, const QString &virtual_network_link_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkLink &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkLinksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkLinksDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkLinksGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkLinksListCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkLinksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkLinksCreateOrUpdateSignal(OAIVirtualNetworkLink summary);
    void virtualNetworkLinksDeleteSignal();
    void virtualNetworkLinksGetSignal(OAIVirtualNetworkLink summary);
    void virtualNetworkLinksListSignal(OAIVirtualNetworkLinkListResult summary);
    void virtualNetworkLinksUpdateSignal(OAIVirtualNetworkLink summary);


    void virtualNetworkLinksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkLink summary);
    void virtualNetworkLinksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkLinksGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkLink summary);
    void virtualNetworkLinksListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkLinkListResult summary);
    void virtualNetworkLinksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkLink summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksCreateOrUpdateSignalError() instead")
    void virtualNetworkLinksCreateOrUpdateSignalE(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksCreateOrUpdateSignalError(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksDeleteSignalError() instead")
    void virtualNetworkLinksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksGetSignalError() instead")
    void virtualNetworkLinksGetSignalE(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksGetSignalError(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksListSignalError() instead")
    void virtualNetworkLinksListSignalE(OAIVirtualNetworkLinkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksListSignalError(OAIVirtualNetworkLinkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksUpdateSignalError() instead")
    void virtualNetworkLinksUpdateSignalE(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksUpdateSignalError(OAIVirtualNetworkLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkLinksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksDeleteSignalErrorFull() instead")
    void virtualNetworkLinksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksGetSignalErrorFull() instead")
    void virtualNetworkLinksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksListSignalErrorFull() instead")
    void virtualNetworkLinksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkLinksUpdateSignalErrorFull() instead")
    void virtualNetworkLinksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkLinksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
