# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class VirtualNetworkLinkProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, registration_enabled: bool=None, virtual_network: SubResource=None, virtual_network_link_state: str=None):
        """VirtualNetworkLinkProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this VirtualNetworkLinkProperties.
        :param registration_enabled: The registration_enabled of this VirtualNetworkLinkProperties.
        :param virtual_network: The virtual_network of this VirtualNetworkLinkProperties.
        :param virtual_network_link_state: The virtual_network_link_state of this VirtualNetworkLinkProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'registration_enabled': bool,
            'virtual_network': SubResource,
            'virtual_network_link_state': str
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'registration_enabled': 'registrationEnabled',
            'virtual_network': 'virtualNetwork',
            'virtual_network_link_state': 'virtualNetworkLinkState'
        }

        self._provisioning_state = provisioning_state
        self._registration_enabled = registration_enabled
        self._virtual_network = virtual_network
        self._virtual_network_link_state = virtual_network_link_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkLinkProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkLinkProperties of this VirtualNetworkLinkProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualNetworkLinkProperties.

        The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.

        :return: The provisioning_state of this VirtualNetworkLinkProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualNetworkLinkProperties.

        The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.

        :param provisioning_state: The provisioning_state of this VirtualNetworkLinkProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def registration_enabled(self):
        """Gets the registration_enabled of this VirtualNetworkLinkProperties.

        Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?

        :return: The registration_enabled of this VirtualNetworkLinkProperties.
        :rtype: bool
        """
        return self._registration_enabled

    @registration_enabled.setter
    def registration_enabled(self, registration_enabled):
        """Sets the registration_enabled of this VirtualNetworkLinkProperties.

        Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?

        :param registration_enabled: The registration_enabled of this VirtualNetworkLinkProperties.
        :type registration_enabled: bool
        """

        self._registration_enabled = registration_enabled

    @property
    def virtual_network(self):
        """Gets the virtual_network of this VirtualNetworkLinkProperties.


        :return: The virtual_network of this VirtualNetworkLinkProperties.
        :rtype: SubResource
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this VirtualNetworkLinkProperties.


        :param virtual_network: The virtual_network of this VirtualNetworkLinkProperties.
        :type virtual_network: SubResource
        """

        self._virtual_network = virtual_network

    @property
    def virtual_network_link_state(self):
        """Gets the virtual_network_link_state of this VirtualNetworkLinkProperties.

        The status of the virtual network link to the Private DNS zone. Possible values are 'InProgress' and 'Done'. This is a read-only property and any attempt to set this value will be ignored.

        :return: The virtual_network_link_state of this VirtualNetworkLinkProperties.
        :rtype: str
        """
        return self._virtual_network_link_state

    @virtual_network_link_state.setter
    def virtual_network_link_state(self, virtual_network_link_state):
        """Sets the virtual_network_link_state of this VirtualNetworkLinkProperties.

        The status of the virtual network link to the Private DNS zone. Possible values are 'InProgress' and 'Done'. This is a read-only property and any attempt to set this value will be ignored.

        :param virtual_network_link_state: The virtual_network_link_state of this VirtualNetworkLinkProperties.
        :type virtual_network_link_state: str
        """
        allowed_values = ["InProgress", "Completed"]  # noqa: E501
        if virtual_network_link_state not in allowed_values:
            raise ValueError(
                "Invalid value for `virtual_network_link_state` ({0}), must be one of {1}"
                .format(virtual_network_link_state, allowed_values)
            )

        self._virtual_network_link_state = virtual_network_link_state
