# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkbookProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, kind: str='shared', name: str=None, serialized_data: str=None, source_resource_id: str=None, tags: List[str]=None, time_modified: str=None, user_id: str=None, version: str=None, workbook_id: str=None):
        """WorkbookProperties - a model defined in OpenAPI

        :param category: The category of this WorkbookProperties.
        :param kind: The kind of this WorkbookProperties.
        :param name: The name of this WorkbookProperties.
        :param serialized_data: The serialized_data of this WorkbookProperties.
        :param source_resource_id: The source_resource_id of this WorkbookProperties.
        :param tags: The tags of this WorkbookProperties.
        :param time_modified: The time_modified of this WorkbookProperties.
        :param user_id: The user_id of this WorkbookProperties.
        :param version: The version of this WorkbookProperties.
        :param workbook_id: The workbook_id of this WorkbookProperties.
        """
        self.openapi_types = {
            'category': str,
            'kind': str,
            'name': str,
            'serialized_data': str,
            'source_resource_id': str,
            'tags': List[str],
            'time_modified': str,
            'user_id': str,
            'version': str,
            'workbook_id': str
        }

        self.attribute_map = {
            'category': 'category',
            'kind': 'kind',
            'name': 'name',
            'serialized_data': 'serializedData',
            'source_resource_id': 'sourceResourceId',
            'tags': 'tags',
            'time_modified': 'timeModified',
            'user_id': 'userId',
            'version': 'version',
            'workbook_id': 'workbookId'
        }

        self._category = category
        self._kind = kind
        self._name = name
        self._serialized_data = serialized_data
        self._source_resource_id = source_resource_id
        self._tags = tags
        self._time_modified = time_modified
        self._user_id = user_id
        self._version = version
        self._workbook_id = workbook_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkbookProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkbookProperties of this WorkbookProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this WorkbookProperties.

        Workbook category, as defined by the user at creation time.

        :return: The category of this WorkbookProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WorkbookProperties.

        Workbook category, as defined by the user at creation time.

        :param category: The category of this WorkbookProperties.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def kind(self):
        """Gets the kind of this WorkbookProperties.

        Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.

        :return: The kind of this WorkbookProperties.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this WorkbookProperties.

        Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.

        :param kind: The kind of this WorkbookProperties.
        :type kind: str
        """
        allowed_values = ["shared", "user"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this WorkbookProperties.

        The user-defined name of the workbook.

        :return: The name of this WorkbookProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkbookProperties.

        The user-defined name of the workbook.

        :param name: The name of this WorkbookProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def serialized_data(self):
        """Gets the serialized_data of this WorkbookProperties.

        Configuration of this particular workbook. Configuration data is a string containing valid JSON

        :return: The serialized_data of this WorkbookProperties.
        :rtype: str
        """
        return self._serialized_data

    @serialized_data.setter
    def serialized_data(self, serialized_data):
        """Sets the serialized_data of this WorkbookProperties.

        Configuration of this particular workbook. Configuration data is a string containing valid JSON

        :param serialized_data: The serialized_data of this WorkbookProperties.
        :type serialized_data: str
        """
        if serialized_data is None:
            raise ValueError("Invalid value for `serialized_data`, must not be `None`")

        self._serialized_data = serialized_data

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this WorkbookProperties.

        Optional resourceId for a source resource.

        :return: The source_resource_id of this WorkbookProperties.
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this WorkbookProperties.

        Optional resourceId for a source resource.

        :param source_resource_id: The source_resource_id of this WorkbookProperties.
        :type source_resource_id: str
        """

        self._source_resource_id = source_resource_id

    @property
    def tags(self):
        """Gets the tags of this WorkbookProperties.

        A list of 0 or more tags that are associated with this workbook definition

        :return: The tags of this WorkbookProperties.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkbookProperties.

        A list of 0 or more tags that are associated with this workbook definition

        :param tags: The tags of this WorkbookProperties.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def time_modified(self):
        """Gets the time_modified of this WorkbookProperties.

        Date and time in UTC of the last modification that was made to this workbook definition.

        :return: The time_modified of this WorkbookProperties.
        :rtype: str
        """
        return self._time_modified

    @time_modified.setter
    def time_modified(self, time_modified):
        """Sets the time_modified of this WorkbookProperties.

        Date and time in UTC of the last modification that was made to this workbook definition.

        :param time_modified: The time_modified of this WorkbookProperties.
        :type time_modified: str
        """

        self._time_modified = time_modified

    @property
    def user_id(self):
        """Gets the user_id of this WorkbookProperties.

        Unique user id of the specific user that owns this workbook.

        :return: The user_id of this WorkbookProperties.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WorkbookProperties.

        Unique user id of the specific user that owns this workbook.

        :param user_id: The user_id of this WorkbookProperties.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this WorkbookProperties.

        This instance's version of the data model. This can change as new features are added that can be marked workbook.

        :return: The version of this WorkbookProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkbookProperties.

        This instance's version of the data model. This can change as new features are added that can be marked workbook.

        :param version: The version of this WorkbookProperties.
        :type version: str
        """

        self._version = version

    @property
    def workbook_id(self):
        """Gets the workbook_id of this WorkbookProperties.

        Internally assigned unique id of the workbook definition.

        :return: The workbook_id of this WorkbookProperties.
        :rtype: str
        """
        return self._workbook_id

    @workbook_id.setter
    def workbook_id(self, workbook_id):
        """Sets the workbook_id of this WorkbookProperties.

        Internally assigned unique id of the workbook definition.

        :param workbook_id: The workbook_id of this WorkbookProperties.
        :type workbook_id: str
        """
        if workbook_id is None:
            raise ValueError("Invalid value for `workbook_id`, must not be `None`")

        self._workbook_id = workbook_id
