/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook type.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkProperties::OAILinkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkProperties::OAILinkProperties() {
    this->initializeModel();
}

OAILinkProperties::~OAILinkProperties() {}

void OAILinkProperties::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;
}

void OAILinkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkProperties::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;
}

QString OAILinkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    return obj;
}

QString OAILinkProperties::getCategory() const {
    return m_category;
}
void OAILinkProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAILinkProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAILinkProperties::is_category_Valid() const{
    return m_category_isValid;
}

QString OAILinkProperties::getSourceId() const {
    return m_source_id;
}
void OAILinkProperties::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAILinkProperties::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAILinkProperties::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAILinkProperties::getTargetId() const {
    return m_target_id;
}
void OAILinkProperties::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAILinkProperties::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAILinkProperties::is_target_id_Valid() const{
    return m_target_id_isValid;
}

bool OAILinkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
