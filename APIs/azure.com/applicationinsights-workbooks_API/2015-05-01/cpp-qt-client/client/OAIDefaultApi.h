/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook type.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWorkbook.h"
#include "OAIWorkbookError.h"
#include "OAIWorkbooksListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workbook_properties OAIWorkbook [required]
    */
    virtual void workbooksCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const OAIWorkbook &workbook_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workbooksDelete(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workbooksGet(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  category QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  can_fetch_content bool [optional]
    */
    virtual void workbooksListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &category, const QString &api_version, const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &can_fetch_content = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workbook_properties OAIWorkbook [required]
    */
    virtual void workbooksUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &api_version, const OAIWorkbook &workbook_properties);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workbooksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workbooksDeleteCallback(OAIHttpRequestWorker *worker);
    void workbooksGetCallback(OAIHttpRequestWorker *worker);
    void workbooksListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void workbooksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workbooksCreateOrUpdateSignal(OAIWorkbook summary);
    void workbooksDeleteSignal();
    void workbooksGetSignal(OAIWorkbook summary);
    void workbooksListByResourceGroupSignal(OAIWorkbooksListResult summary);
    void workbooksUpdateSignal(OAIWorkbook summary);


    void workbooksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkbook summary);
    void workbooksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workbooksGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkbook summary);
    void workbooksListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkbooksListResult summary);
    void workbooksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkbook summary);

    Q_DECL_DEPRECATED_X("Use workbooksCreateOrUpdateSignalError() instead")
    void workbooksCreateOrUpdateSignalE(OAIWorkbook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksCreateOrUpdateSignalError(OAIWorkbook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksDeleteSignalError() instead")
    void workbooksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksGetSignalError() instead")
    void workbooksGetSignalE(OAIWorkbook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksGetSignalError(OAIWorkbook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksListByResourceGroupSignalError() instead")
    void workbooksListByResourceGroupSignalE(OAIWorkbooksListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksListByResourceGroupSignalError(OAIWorkbooksListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksUpdateSignalError() instead")
    void workbooksUpdateSignalE(OAIWorkbook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksUpdateSignalError(OAIWorkbook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workbooksCreateOrUpdateSignalErrorFull() instead")
    void workbooksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksDeleteSignalErrorFull() instead")
    void workbooksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksGetSignalErrorFull() instead")
    void workbooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksListByResourceGroupSignalErrorFull() instead")
    void workbooksListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workbooksUpdateSignalErrorFull() instead")
    void workbooksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workbooksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
