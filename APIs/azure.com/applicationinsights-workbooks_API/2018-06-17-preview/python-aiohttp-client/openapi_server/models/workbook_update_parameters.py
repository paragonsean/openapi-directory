# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workbook_properties_update_parameters import WorkbookPropertiesUpdateParameters
from openapi_server import util


class WorkbookUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, properties: WorkbookPropertiesUpdateParameters=None, tags: Dict[str, str]=None):
        """WorkbookUpdateParameters - a model defined in OpenAPI

        :param kind: The kind of this WorkbookUpdateParameters.
        :param properties: The properties of this WorkbookUpdateParameters.
        :param tags: The tags of this WorkbookUpdateParameters.
        """
        self.openapi_types = {
            'kind': str,
            'properties': WorkbookPropertiesUpdateParameters,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'kind': 'kind',
            'properties': 'properties',
            'tags': 'tags'
        }

        self._kind = kind
        self._properties = properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkbookUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkbookUpdateParameters of this WorkbookUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this WorkbookUpdateParameters.

        The kind of workbook. Choices are user and shared.

        :return: The kind of this WorkbookUpdateParameters.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this WorkbookUpdateParameters.

        The kind of workbook. Choices are user and shared.

        :param kind: The kind of this WorkbookUpdateParameters.
        :type kind: str
        """
        allowed_values = ["user", "shared"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def properties(self):
        """Gets the properties of this WorkbookUpdateParameters.


        :return: The properties of this WorkbookUpdateParameters.
        :rtype: WorkbookPropertiesUpdateParameters
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this WorkbookUpdateParameters.


        :param properties: The properties of this WorkbookUpdateParameters.
        :type properties: WorkbookPropertiesUpdateParameters
        """

        self._properties = properties

    @property
    def tags(self):
        """Gets the tags of this WorkbookUpdateParameters.

        Resource tags

        :return: The tags of this WorkbookUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkbookUpdateParameters.

        Resource tags

        :param tags: The tags of this WorkbookUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
