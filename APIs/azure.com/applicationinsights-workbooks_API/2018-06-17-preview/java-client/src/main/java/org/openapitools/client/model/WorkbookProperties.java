/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights workbook type.
 *
 * The version of the OpenAPI document: 2018-06-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that contain a workbook.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:54.144136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkbookProperties {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SERIALIZED_DATA = "serializedData";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_DATA)
  private String serializedData;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "timeModified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public WorkbookProperties() {
  }

  public WorkbookProperties(
     String timeModified
  ) {
    this();
    this.timeModified = timeModified;
  }

  public WorkbookProperties category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Workbook category, as defined by the user at creation time.
   * @return category
   */
  @javax.annotation.Nonnull
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public WorkbookProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The user-defined name (display name) of the workbook.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public WorkbookProperties serializedData(String serializedData) {
    this.serializedData = serializedData;
    return this;
  }

  /**
   * Configuration of this particular workbook. Configuration data is a string containing valid JSON
   * @return serializedData
   */
  @javax.annotation.Nonnull
  public String getSerializedData() {
    return serializedData;
  }

  public void setSerializedData(String serializedData) {
    this.serializedData = serializedData;
  }


  public WorkbookProperties tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WorkbookProperties addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of 0 or more tags that are associated with this workbook definition
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  /**
   * Date and time in UTC of the last modification that was made to this workbook definition.
   * @return timeModified
   */
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }



  public WorkbookProperties userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique user id of the specific user that owns this workbook.
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public WorkbookProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Workbook version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkbookProperties workbookProperties = (WorkbookProperties) o;
    return Objects.equals(this.category, workbookProperties.category) &&
        Objects.equals(this.displayName, workbookProperties.displayName) &&
        Objects.equals(this.serializedData, workbookProperties.serializedData) &&
        Objects.equals(this.tags, workbookProperties.tags) &&
        Objects.equals(this.timeModified, workbookProperties.timeModified) &&
        Objects.equals(this.userId, workbookProperties.userId) &&
        Objects.equals(this.version, workbookProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, displayName, serializedData, tags, timeModified, userId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkbookProperties {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    serializedData: ").append(toIndentedString(serializedData)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("displayName");
    openapiFields.add("serializedData");
    openapiFields.add("tags");
    openapiFields.add("timeModified");
    openapiFields.add("userId");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("serializedData");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkbookProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkbookProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkbookProperties is not found in the empty JSON string", WorkbookProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkbookProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkbookProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkbookProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("serializedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serializedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serializedData").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("timeModified") != null && !jsonObj.get("timeModified").isJsonNull()) && !jsonObj.get("timeModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeModified").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkbookProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkbookProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkbookProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkbookProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkbookProperties>() {
           @Override
           public void write(JsonWriter out, WorkbookProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkbookProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkbookProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkbookProperties
   * @throws IOException if the JSON string is invalid with respect to WorkbookProperties
   */
  public static WorkbookProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkbookProperties.class);
  }

  /**
   * Convert an instance of WorkbookProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

