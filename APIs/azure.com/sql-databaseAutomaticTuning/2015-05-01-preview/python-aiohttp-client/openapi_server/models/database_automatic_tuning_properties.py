# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automatic_tuning_options import AutomaticTuningOptions
from openapi_server import util


class DatabaseAutomaticTuningProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_state: str=None, desired_state: str=None, options: Dict[str, AutomaticTuningOptions]=None):
        """DatabaseAutomaticTuningProperties - a model defined in OpenAPI

        :param actual_state: The actual_state of this DatabaseAutomaticTuningProperties.
        :param desired_state: The desired_state of this DatabaseAutomaticTuningProperties.
        :param options: The options of this DatabaseAutomaticTuningProperties.
        """
        self.openapi_types = {
            'actual_state': str,
            'desired_state': str,
            'options': Dict[str, AutomaticTuningOptions]
        }

        self.attribute_map = {
            'actual_state': 'actualState',
            'desired_state': 'desiredState',
            'options': 'options'
        }

        self._actual_state = actual_state
        self._desired_state = desired_state
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAutomaticTuningProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAutomaticTuningProperties of this DatabaseAutomaticTuningProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_state(self):
        """Gets the actual_state of this DatabaseAutomaticTuningProperties.

        Automatic tuning actual state.

        :return: The actual_state of this DatabaseAutomaticTuningProperties.
        :rtype: str
        """
        return self._actual_state

    @actual_state.setter
    def actual_state(self, actual_state):
        """Sets the actual_state of this DatabaseAutomaticTuningProperties.

        Automatic tuning actual state.

        :param actual_state: The actual_state of this DatabaseAutomaticTuningProperties.
        :type actual_state: str
        """
        allowed_values = ["Inherit", "Custom", "Auto", "Unspecified"]  # noqa: E501
        if actual_state not in allowed_values:
            raise ValueError(
                "Invalid value for `actual_state` ({0}), must be one of {1}"
                .format(actual_state, allowed_values)
            )

        self._actual_state = actual_state

    @property
    def desired_state(self):
        """Gets the desired_state of this DatabaseAutomaticTuningProperties.

        Automatic tuning desired state.

        :return: The desired_state of this DatabaseAutomaticTuningProperties.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this DatabaseAutomaticTuningProperties.

        Automatic tuning desired state.

        :param desired_state: The desired_state of this DatabaseAutomaticTuningProperties.
        :type desired_state: str
        """
        allowed_values = ["Inherit", "Custom", "Auto", "Unspecified"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def options(self):
        """Gets the options of this DatabaseAutomaticTuningProperties.

        Automatic tuning options definition.

        :return: The options of this DatabaseAutomaticTuningProperties.
        :rtype: Dict[str, AutomaticTuningOptions]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DatabaseAutomaticTuningProperties.

        Automatic tuning options definition.

        :param options: The options of this DatabaseAutomaticTuningProperties.
        :type options: Dict[str, AutomaticTuningOptions]
        """

        self._options = options
