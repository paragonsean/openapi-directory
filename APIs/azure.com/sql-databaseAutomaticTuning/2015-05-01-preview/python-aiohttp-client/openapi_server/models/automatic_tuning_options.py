# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomaticTuningOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_state: str=None, desired_state: str=None, reason_code: int=None, reason_desc: str=None):
        """AutomaticTuningOptions - a model defined in OpenAPI

        :param actual_state: The actual_state of this AutomaticTuningOptions.
        :param desired_state: The desired_state of this AutomaticTuningOptions.
        :param reason_code: The reason_code of this AutomaticTuningOptions.
        :param reason_desc: The reason_desc of this AutomaticTuningOptions.
        """
        self.openapi_types = {
            'actual_state': str,
            'desired_state': str,
            'reason_code': int,
            'reason_desc': str
        }

        self.attribute_map = {
            'actual_state': 'actualState',
            'desired_state': 'desiredState',
            'reason_code': 'reasonCode',
            'reason_desc': 'reasonDesc'
        }

        self._actual_state = actual_state
        self._desired_state = desired_state
        self._reason_code = reason_code
        self._reason_desc = reason_desc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticTuningOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomaticTuningOptions of this AutomaticTuningOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_state(self):
        """Gets the actual_state of this AutomaticTuningOptions.

        Automatic tuning option actual state.

        :return: The actual_state of this AutomaticTuningOptions.
        :rtype: str
        """
        return self._actual_state

    @actual_state.setter
    def actual_state(self, actual_state):
        """Sets the actual_state of this AutomaticTuningOptions.

        Automatic tuning option actual state.

        :param actual_state: The actual_state of this AutomaticTuningOptions.
        :type actual_state: str
        """
        allowed_values = ["Off", "On"]  # noqa: E501
        if actual_state not in allowed_values:
            raise ValueError(
                "Invalid value for `actual_state` ({0}), must be one of {1}"
                .format(actual_state, allowed_values)
            )

        self._actual_state = actual_state

    @property
    def desired_state(self):
        """Gets the desired_state of this AutomaticTuningOptions.

        Automatic tuning option desired state.

        :return: The desired_state of this AutomaticTuningOptions.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this AutomaticTuningOptions.

        Automatic tuning option desired state.

        :param desired_state: The desired_state of this AutomaticTuningOptions.
        :type desired_state: str
        """
        allowed_values = ["Off", "On", "Default"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def reason_code(self):
        """Gets the reason_code of this AutomaticTuningOptions.

        Reason code if desired and actual state are different.

        :return: The reason_code of this AutomaticTuningOptions.
        :rtype: int
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this AutomaticTuningOptions.

        Reason code if desired and actual state are different.

        :param reason_code: The reason_code of this AutomaticTuningOptions.
        :type reason_code: int
        """

        self._reason_code = reason_code

    @property
    def reason_desc(self):
        """Gets the reason_desc of this AutomaticTuningOptions.

        Reason description if desired and actual state are different.

        :return: The reason_desc of this AutomaticTuningOptions.
        :rtype: str
        """
        return self._reason_desc

    @reason_desc.setter
    def reason_desc(self, reason_desc):
        """Sets the reason_desc of this AutomaticTuningOptions.

        Reason description if desired and actual state are different.

        :param reason_desc: The reason_desc of this AutomaticTuningOptions.
        :type reason_desc: str
        """
        allowed_values = ["Default", "Disabled", "AutoConfigured", "InheritedFromServer", "QueryStoreOff", "QueryStoreReadOnly", "NotSupported"]  # noqa: E501
        if reason_desc not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_desc` ({0}), must be one of {1}"
                .format(reason_desc, allowed_values)
            )

        self._reason_desc = reason_desc
