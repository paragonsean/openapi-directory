/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomaticTuningOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomaticTuningOptions::OAIAutomaticTuningOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomaticTuningOptions::OAIAutomaticTuningOptions() {
    this->initializeModel();
}

OAIAutomaticTuningOptions::~OAIAutomaticTuningOptions() {}

void OAIAutomaticTuningOptions::initializeModel() {

    m_actual_state_isSet = false;
    m_actual_state_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_reason_desc_isSet = false;
    m_reason_desc_isValid = false;
}

void OAIAutomaticTuningOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomaticTuningOptions::fromJsonObject(QJsonObject json) {

    m_actual_state_isValid = ::OpenAPI::fromJsonValue(m_actual_state, json[QString("actualState")]);
    m_actual_state_isSet = !json[QString("actualState")].isNull() && m_actual_state_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("desiredState")]);
    m_desired_state_isSet = !json[QString("desiredState")].isNull() && m_desired_state_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_reason_desc_isValid = ::OpenAPI::fromJsonValue(m_reason_desc, json[QString("reasonDesc")]);
    m_reason_desc_isSet = !json[QString("reasonDesc")].isNull() && m_reason_desc_isValid;
}

QString OAIAutomaticTuningOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomaticTuningOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_state_isSet) {
        obj.insert(QString("actualState"), ::OpenAPI::toJsonValue(m_actual_state));
    }
    if (m_desired_state_isSet) {
        obj.insert(QString("desiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_reason_desc_isSet) {
        obj.insert(QString("reasonDesc"), ::OpenAPI::toJsonValue(m_reason_desc));
    }
    return obj;
}

QString OAIAutomaticTuningOptions::getActualState() const {
    return m_actual_state;
}
void OAIAutomaticTuningOptions::setActualState(const QString &actual_state) {
    m_actual_state = actual_state;
    m_actual_state_isSet = true;
}

bool OAIAutomaticTuningOptions::is_actual_state_Set() const{
    return m_actual_state_isSet;
}

bool OAIAutomaticTuningOptions::is_actual_state_Valid() const{
    return m_actual_state_isValid;
}

QString OAIAutomaticTuningOptions::getDesiredState() const {
    return m_desired_state;
}
void OAIAutomaticTuningOptions::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIAutomaticTuningOptions::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIAutomaticTuningOptions::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

qint32 OAIAutomaticTuningOptions::getReasonCode() const {
    return m_reason_code;
}
void OAIAutomaticTuningOptions::setReasonCode(const qint32 &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIAutomaticTuningOptions::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIAutomaticTuningOptions::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIAutomaticTuningOptions::getReasonDesc() const {
    return m_reason_desc;
}
void OAIAutomaticTuningOptions::setReasonDesc(const QString &reason_desc) {
    m_reason_desc = reason_desc;
    m_reason_desc_isSet = true;
}

bool OAIAutomaticTuningOptions::is_reason_desc_Set() const{
    return m_reason_desc_isSet;
}

bool OAIAutomaticTuningOptions::is_reason_desc_Valid() const{
    return m_reason_desc_isValid;
}

bool OAIAutomaticTuningOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_desc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomaticTuningOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
