/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseAutomaticTuningProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseAutomaticTuningProperties::OAIDatabaseAutomaticTuningProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseAutomaticTuningProperties::OAIDatabaseAutomaticTuningProperties() {
    this->initializeModel();
}

OAIDatabaseAutomaticTuningProperties::~OAIDatabaseAutomaticTuningProperties() {}

void OAIDatabaseAutomaticTuningProperties::initializeModel() {

    m_actual_state_isSet = false;
    m_actual_state_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIDatabaseAutomaticTuningProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseAutomaticTuningProperties::fromJsonObject(QJsonObject json) {

    m_actual_state_isValid = ::OpenAPI::fromJsonValue(m_actual_state, json[QString("actualState")]);
    m_actual_state_isSet = !json[QString("actualState")].isNull() && m_actual_state_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("desiredState")]);
    m_desired_state_isSet = !json[QString("desiredState")].isNull() && m_desired_state_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;
}

QString OAIDatabaseAutomaticTuningProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseAutomaticTuningProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_state_isSet) {
        obj.insert(QString("actualState"), ::OpenAPI::toJsonValue(m_actual_state));
    }
    if (m_desired_state_isSet) {
        obj.insert(QString("desiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIDatabaseAutomaticTuningProperties::getActualState() const {
    return m_actual_state;
}
void OAIDatabaseAutomaticTuningProperties::setActualState(const QString &actual_state) {
    m_actual_state = actual_state;
    m_actual_state_isSet = true;
}

bool OAIDatabaseAutomaticTuningProperties::is_actual_state_Set() const{
    return m_actual_state_isSet;
}

bool OAIDatabaseAutomaticTuningProperties::is_actual_state_Valid() const{
    return m_actual_state_isValid;
}

QString OAIDatabaseAutomaticTuningProperties::getDesiredState() const {
    return m_desired_state;
}
void OAIDatabaseAutomaticTuningProperties::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIDatabaseAutomaticTuningProperties::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIDatabaseAutomaticTuningProperties::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QMap<QString, OAIAutomaticTuningOptions> OAIDatabaseAutomaticTuningProperties::getOptions() const {
    return m_options;
}
void OAIDatabaseAutomaticTuningProperties::setOptions(const QMap<QString, OAIAutomaticTuningOptions> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDatabaseAutomaticTuningProperties::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDatabaseAutomaticTuningProperties::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIDatabaseAutomaticTuningProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseAutomaticTuningProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
