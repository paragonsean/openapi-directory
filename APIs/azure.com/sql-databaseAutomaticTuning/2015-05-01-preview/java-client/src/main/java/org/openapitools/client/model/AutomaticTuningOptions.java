/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Automatic tuning properties for individual advisors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:06:50.031869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomaticTuningOptions {
  /**
   * Automatic tuning option actual state.
   */
  @JsonAdapter(ActualStateEnum.Adapter.class)
  public enum ActualStateEnum {
    OFF("Off"),
    
    ON("On");

    private String value;

    ActualStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActualStateEnum fromValue(String value) {
      for (ActualStateEnum b : ActualStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActualStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActualStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActualStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActualStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActualStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTUAL_STATE = "actualState";
  @SerializedName(SERIALIZED_NAME_ACTUAL_STATE)
  private ActualStateEnum actualState;

  /**
   * Automatic tuning option desired state.
   */
  @JsonAdapter(DesiredStateEnum.Adapter.class)
  public enum DesiredStateEnum {
    OFF("Off"),
    
    ON("On"),
    
    DEFAULT("Default");

    private String value;

    DesiredStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredStateEnum fromValue(String value) {
      for (DesiredStateEnum b : DesiredStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DesiredStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DesiredStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DesiredStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESIRED_STATE = "desiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredStateEnum desiredState;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private Integer reasonCode;

  /**
   * Reason description if desired and actual state are different.
   */
  @JsonAdapter(ReasonDescEnum.Adapter.class)
  public enum ReasonDescEnum {
    DEFAULT("Default"),
    
    DISABLED("Disabled"),
    
    AUTO_CONFIGURED("AutoConfigured"),
    
    INHERITED_FROM_SERVER("InheritedFromServer"),
    
    QUERY_STORE_OFF("QueryStoreOff"),
    
    QUERY_STORE_READ_ONLY("QueryStoreReadOnly"),
    
    NOT_SUPPORTED("NotSupported");

    private String value;

    ReasonDescEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonDescEnum fromValue(String value) {
      for (ReasonDescEnum b : ReasonDescEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonDescEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonDescEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonDescEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonDescEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonDescEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON_DESC = "reasonDesc";
  @SerializedName(SERIALIZED_NAME_REASON_DESC)
  private ReasonDescEnum reasonDesc;

  public AutomaticTuningOptions() {
  }

  public AutomaticTuningOptions(
     ActualStateEnum actualState, 
     Integer reasonCode, 
     ReasonDescEnum reasonDesc
  ) {
    this();
    this.actualState = actualState;
    this.reasonCode = reasonCode;
    this.reasonDesc = reasonDesc;
  }

  /**
   * Automatic tuning option actual state.
   * @return actualState
   */
  @javax.annotation.Nullable
  public ActualStateEnum getActualState() {
    return actualState;
  }



  public AutomaticTuningOptions desiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Automatic tuning option desired state.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public DesiredStateEnum getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
  }


  /**
   * Reason code if desired and actual state are different.
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public Integer getReasonCode() {
    return reasonCode;
  }



  /**
   * Reason description if desired and actual state are different.
   * @return reasonDesc
   */
  @javax.annotation.Nullable
  public ReasonDescEnum getReasonDesc() {
    return reasonDesc;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomaticTuningOptions automaticTuningOptions = (AutomaticTuningOptions) o;
    return Objects.equals(this.actualState, automaticTuningOptions.actualState) &&
        Objects.equals(this.desiredState, automaticTuningOptions.desiredState) &&
        Objects.equals(this.reasonCode, automaticTuningOptions.reasonCode) &&
        Objects.equals(this.reasonDesc, automaticTuningOptions.reasonDesc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualState, desiredState, reasonCode, reasonDesc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomaticTuningOptions {\n");
    sb.append("    actualState: ").append(toIndentedString(actualState)).append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    reasonDesc: ").append(toIndentedString(reasonDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualState");
    openapiFields.add("desiredState");
    openapiFields.add("reasonCode");
    openapiFields.add("reasonDesc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomaticTuningOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomaticTuningOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomaticTuningOptions is not found in the empty JSON string", AutomaticTuningOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomaticTuningOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomaticTuningOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actualState") != null && !jsonObj.get("actualState").isJsonNull()) && !jsonObj.get("actualState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualState").toString()));
      }
      // validate the optional field `actualState`
      if (jsonObj.get("actualState") != null && !jsonObj.get("actualState").isJsonNull()) {
        ActualStateEnum.validateJsonElement(jsonObj.get("actualState"));
      }
      if ((jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) && !jsonObj.get("desiredState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desiredState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desiredState").toString()));
      }
      // validate the optional field `desiredState`
      if (jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) {
        DesiredStateEnum.validateJsonElement(jsonObj.get("desiredState"));
      }
      if ((jsonObj.get("reasonDesc") != null && !jsonObj.get("reasonDesc").isJsonNull()) && !jsonObj.get("reasonDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonDesc").toString()));
      }
      // validate the optional field `reasonDesc`
      if (jsonObj.get("reasonDesc") != null && !jsonObj.get("reasonDesc").isJsonNull()) {
        ReasonDescEnum.validateJsonElement(jsonObj.get("reasonDesc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomaticTuningOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomaticTuningOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomaticTuningOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomaticTuningOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomaticTuningOptions>() {
           @Override
           public void write(JsonWriter out, AutomaticTuningOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomaticTuningOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomaticTuningOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomaticTuningOptions
   * @throws IOException if the JSON string is invalid with respect to AutomaticTuningOptions
   */
  public static AutomaticTuningOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomaticTuningOptions.class);
  }

  /**
   * Convert an instance of AutomaticTuningOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

