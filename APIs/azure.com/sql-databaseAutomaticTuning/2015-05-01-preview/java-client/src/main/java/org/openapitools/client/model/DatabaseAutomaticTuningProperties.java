/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AutomaticTuningOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database-level Automatic Tuning properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:06:50.031869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseAutomaticTuningProperties {
  /**
   * Automatic tuning actual state.
   */
  @JsonAdapter(ActualStateEnum.Adapter.class)
  public enum ActualStateEnum {
    INHERIT("Inherit"),
    
    CUSTOM("Custom"),
    
    AUTO("Auto"),
    
    UNSPECIFIED("Unspecified");

    private String value;

    ActualStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActualStateEnum fromValue(String value) {
      for (ActualStateEnum b : ActualStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActualStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActualStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActualStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActualStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActualStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTUAL_STATE = "actualState";
  @SerializedName(SERIALIZED_NAME_ACTUAL_STATE)
  private ActualStateEnum actualState;

  /**
   * Automatic tuning desired state.
   */
  @JsonAdapter(DesiredStateEnum.Adapter.class)
  public enum DesiredStateEnum {
    INHERIT("Inherit"),
    
    CUSTOM("Custom"),
    
    AUTO("Auto"),
    
    UNSPECIFIED("Unspecified");

    private String value;

    DesiredStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredStateEnum fromValue(String value) {
      for (DesiredStateEnum b : DesiredStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DesiredStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DesiredStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DesiredStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESIRED_STATE = "desiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredStateEnum desiredState;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, AutomaticTuningOptions> options = new HashMap<>();

  public DatabaseAutomaticTuningProperties() {
  }

  public DatabaseAutomaticTuningProperties(
     ActualStateEnum actualState
  ) {
    this();
    this.actualState = actualState;
  }

  /**
   * Automatic tuning actual state.
   * @return actualState
   */
  @javax.annotation.Nullable
  public ActualStateEnum getActualState() {
    return actualState;
  }



  public DatabaseAutomaticTuningProperties desiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Automatic tuning desired state.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public DesiredStateEnum getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
  }


  public DatabaseAutomaticTuningProperties options(Map<String, AutomaticTuningOptions> options) {
    this.options = options;
    return this;
  }

  public DatabaseAutomaticTuningProperties putOptionsItem(String key, AutomaticTuningOptions optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Automatic tuning options definition.
   * @return options
   */
  @javax.annotation.Nullable
  public Map<String, AutomaticTuningOptions> getOptions() {
    return options;
  }

  public void setOptions(Map<String, AutomaticTuningOptions> options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseAutomaticTuningProperties databaseAutomaticTuningProperties = (DatabaseAutomaticTuningProperties) o;
    return Objects.equals(this.actualState, databaseAutomaticTuningProperties.actualState) &&
        Objects.equals(this.desiredState, databaseAutomaticTuningProperties.desiredState) &&
        Objects.equals(this.options, databaseAutomaticTuningProperties.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualState, desiredState, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseAutomaticTuningProperties {\n");
    sb.append("    actualState: ").append(toIndentedString(actualState)).append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualState");
    openapiFields.add("desiredState");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseAutomaticTuningProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseAutomaticTuningProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseAutomaticTuningProperties is not found in the empty JSON string", DatabaseAutomaticTuningProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseAutomaticTuningProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseAutomaticTuningProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actualState") != null && !jsonObj.get("actualState").isJsonNull()) && !jsonObj.get("actualState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualState").toString()));
      }
      // validate the optional field `actualState`
      if (jsonObj.get("actualState") != null && !jsonObj.get("actualState").isJsonNull()) {
        ActualStateEnum.validateJsonElement(jsonObj.get("actualState"));
      }
      if ((jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) && !jsonObj.get("desiredState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desiredState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desiredState").toString()));
      }
      // validate the optional field `desiredState`
      if (jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) {
        DesiredStateEnum.validateJsonElement(jsonObj.get("desiredState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseAutomaticTuningProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseAutomaticTuningProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseAutomaticTuningProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseAutomaticTuningProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseAutomaticTuningProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseAutomaticTuningProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseAutomaticTuningProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseAutomaticTuningProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseAutomaticTuningProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseAutomaticTuningProperties
   */
  public static DatabaseAutomaticTuningProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseAutomaticTuningProperties.class);
  }

  /**
   * Convert an instance of DatabaseAutomaticTuningProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

