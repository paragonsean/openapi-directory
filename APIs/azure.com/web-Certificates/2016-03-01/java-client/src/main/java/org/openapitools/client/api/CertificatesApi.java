/*
 * Certificates API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateCollection;
import org.openapitools.client.model.CertificatePatchResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificatesCreateOrUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateEnvelope' is set
        if (certificateEnvelope == null) {
            throw new ApiException("Missing the required parameter 'certificateEnvelope' when calling certificatesCreateOrUpdate(Async)");
        }

        return certificatesCreateOrUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);

    }

    /**
     * Create or update a certificate.
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesCreateOrUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesCreateOrUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate.
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesCreateOrUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate. (asynchronously)
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesDelete
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesDeleteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesDelete(Async)");
        }

        return certificatesDeleteCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a certificate.
     * Delete a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void certificatesDelete(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        certificatesDeleteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Delete a certificate.
     * Delete a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificatesDeleteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a certificate. (asynchronously)
     * Delete a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted certificate. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGet(Async)");
        }

        return certificatesGetCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a certificate.
     * Get a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesGet(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesGetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a certificate.
     * Get a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesGetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a certificate. (asynchronously)
     * Get a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesList(Async)");
        }

        return certificatesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return CertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateCollection certificatesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateCollection> localVarResp = certificatesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateCollection> certificatesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all certificates for a subscription. (asynchronously)
     * Get all certificates for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListAsync(String subscriptionId, String apiVersion, final ApiCallback<CertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesListByResourceGroup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesListByResourceGroup(Async)");
        }

        return certificatesListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all certificates in a resource group.
     * Get all certificates in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return CertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public CertificateCollection certificatesListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateCollection> localVarResp = certificatesListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all certificates in a resource group.
     * Get all certificates in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateCollection> certificatesListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all certificates in a resource group. (asynchronously)
     * Get all certificates in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<CertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificatePatchResource certificateEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificatePatchResource certificateEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesUpdate(Async)");
        }

        // verify the required parameter 'certificateEnvelope' is set
        if (certificateEnvelope == null) {
            throw new ApiException("Missing the required parameter 'certificateEnvelope' when calling certificatesUpdate(Async)");
        }

        return certificatesUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);

    }

    /**
     * Create or update a certificate.
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificatePatchResource certificateEnvelope) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate.
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificatePatchResource certificateEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate. (asynchronously)
     * Create or update a certificate.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate, if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificatePatchResource certificateEnvelope, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
