/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiVersionSetEntityBase from './ApiVersionSetEntityBase';

/**
 * The ApiVersionSetContractProperties model module.
 * @module model/ApiVersionSetContractProperties
 * @version 2017-03-01
 */
class ApiVersionSetContractProperties {
    /**
     * Constructs a new <code>ApiVersionSetContractProperties</code>.
     * Properties of an API Version Set.
     * @alias module:model/ApiVersionSetContractProperties
     * @implements module:model/ApiVersionSetEntityBase
     */
    constructor() { 
        ApiVersionSetEntityBase.initialize(this);
        ApiVersionSetContractProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['displayName'] = displayName;
        obj['versioningScheme'] = versioningScheme;
    }

    /**
     * Constructs a <code>ApiVersionSetContractProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiVersionSetContractProperties} obj Optional instance to populate.
     * @return {module:model/ApiVersionSetContractProperties} The populated <code>ApiVersionSetContractProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiVersionSetContractProperties();
            ApiVersionSetEntityBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('versioningScheme')) {
                obj['versioningScheme'] = ApiClient.convertToType(data['versioningScheme'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('versionHeaderName')) {
                obj['versionHeaderName'] = ApiClient.convertToType(data['versionHeaderName'], 'String');
            }
            if (data.hasOwnProperty('versionQueryName')) {
                obj['versionQueryName'] = ApiClient.convertToType(data['versionQueryName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiVersionSetContractProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiVersionSetContractProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiVersionSetContractProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['versioningScheme'] && !(typeof data['versioningScheme'] === 'string' || data['versioningScheme'] instanceof String)) {
            throw new Error("Expected the field `versioningScheme` to be a primitive type in the JSON string but got " + data['versioningScheme']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['versionHeaderName'] && !(typeof data['versionHeaderName'] === 'string' || data['versionHeaderName'] instanceof String)) {
            throw new Error("Expected the field `versionHeaderName` to be a primitive type in the JSON string but got " + data['versionHeaderName']);
        }
        // ensure the json data is a string
        if (data['versionQueryName'] && !(typeof data['versionQueryName'] === 'string' || data['versionQueryName'] instanceof String)) {
            throw new Error("Expected the field `versionQueryName` to be a primitive type in the JSON string but got " + data['versionQueryName']);
        }

        return true;
    }


}

ApiVersionSetContractProperties.RequiredProperties = ["displayName", "versioningScheme"];

/**
 * Name of API Version Set
 * @member {String} displayName
 */
ApiVersionSetContractProperties.prototype['displayName'] = undefined;

/**
 * An value that determines where the API Version identifer will be located in a HTTP request.
 * @member {module:model/ApiVersionSetContractProperties.VersioningSchemeEnum} versioningScheme
 */
ApiVersionSetContractProperties.prototype['versioningScheme'] = undefined;

/**
 * Description of API Version Set.
 * @member {String} description
 */
ApiVersionSetContractProperties.prototype['description'] = undefined;

/**
 * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
 * @member {String} versionHeaderName
 */
ApiVersionSetContractProperties.prototype['versionHeaderName'] = undefined;

/**
 * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
 * @member {String} versionQueryName
 */
ApiVersionSetContractProperties.prototype['versionQueryName'] = undefined;


// Implement ApiVersionSetEntityBase interface:
/**
 * Description of API Version Set.
 * @member {String} description
 */
ApiVersionSetEntityBase.prototype['description'] = undefined;
/**
 * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
 * @member {String} versionHeaderName
 */
ApiVersionSetEntityBase.prototype['versionHeaderName'] = undefined;
/**
 * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
 * @member {String} versionQueryName
 */
ApiVersionSetEntityBase.prototype['versionQueryName'] = undefined;



/**
 * Allowed values for the <code>versioningScheme</code> property.
 * @enum {String}
 * @readonly
 */
ApiVersionSetContractProperties['VersioningSchemeEnum'] = {

    /**
     * value: "Segment"
     * @const
     */
    "Segment": "Segment",

    /**
     * value: "Query"
     * @const
     */
    "Query": "Query",

    /**
     * value: "Header"
     * @const
     */
    "Header": "Header"
};



export default ApiVersionSetContractProperties;

