/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiVersionSetEntityBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiVersionSetEntityBase::OAIApiVersionSetEntityBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiVersionSetEntityBase::OAIApiVersionSetEntityBase() {
    this->initializeModel();
}

OAIApiVersionSetEntityBase::~OAIApiVersionSetEntityBase() {}

void OAIApiVersionSetEntityBase::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_version_header_name_isSet = false;
    m_version_header_name_isValid = false;

    m_version_query_name_isSet = false;
    m_version_query_name_isValid = false;
}

void OAIApiVersionSetEntityBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiVersionSetEntityBase::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_version_header_name_isValid = ::OpenAPI::fromJsonValue(m_version_header_name, json[QString("versionHeaderName")]);
    m_version_header_name_isSet = !json[QString("versionHeaderName")].isNull() && m_version_header_name_isValid;

    m_version_query_name_isValid = ::OpenAPI::fromJsonValue(m_version_query_name, json[QString("versionQueryName")]);
    m_version_query_name_isSet = !json[QString("versionQueryName")].isNull() && m_version_query_name_isValid;
}

QString OAIApiVersionSetEntityBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiVersionSetEntityBase::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_version_header_name_isSet) {
        obj.insert(QString("versionHeaderName"), ::OpenAPI::toJsonValue(m_version_header_name));
    }
    if (m_version_query_name_isSet) {
        obj.insert(QString("versionQueryName"), ::OpenAPI::toJsonValue(m_version_query_name));
    }
    return obj;
}

QString OAIApiVersionSetEntityBase::getDescription() const {
    return m_description;
}
void OAIApiVersionSetEntityBase::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiVersionSetEntityBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiVersionSetEntityBase::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiVersionSetEntityBase::getVersionHeaderName() const {
    return m_version_header_name;
}
void OAIApiVersionSetEntityBase::setVersionHeaderName(const QString &version_header_name) {
    m_version_header_name = version_header_name;
    m_version_header_name_isSet = true;
}

bool OAIApiVersionSetEntityBase::is_version_header_name_Set() const{
    return m_version_header_name_isSet;
}

bool OAIApiVersionSetEntityBase::is_version_header_name_Valid() const{
    return m_version_header_name_isValid;
}

QString OAIApiVersionSetEntityBase::getVersionQueryName() const {
    return m_version_query_name;
}
void OAIApiVersionSetEntityBase::setVersionQueryName(const QString &version_query_name) {
    m_version_query_name = version_query_name;
    m_version_query_name_isSet = true;
}

bool OAIApiVersionSetEntityBase::is_version_query_name_Set() const{
    return m_version_query_name_isSet;
}

bool OAIApiVersionSetEntityBase::is_version_query_name_Valid() const{
    return m_version_query_name_isValid;
}

bool OAIApiVersionSetEntityBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_query_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiVersionSetEntityBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
