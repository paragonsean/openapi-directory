/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiVersionSetCollection;
import org.openapitools.client.model.ApiVersionSetContract;
import org.openapitools.client.model.ApiVersionSetListByServiceDefaultResponse;
import org.openapitools.client.model.ApiVersionSetUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiVersionSetsApi
 */
@Disabled
public class ApiVersionSetsApiTest {

    private final ApiVersionSetsApi api = new ApiVersionSetsApi();

    /**
     * Creates or Updates a Api Version Set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String versionSetId = null;
        ApiVersionSetContract parameters = null;
        String ifMatch = null;
        ApiVersionSetContract response = api.apiVersionSetCreateOrUpdate(resourceGroupName, serviceName, apiVersion, subscriptionId, versionSetId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific Api Version Set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String versionSetId = null;
        String ifMatch = null;
        api.apiVersionSetDelete(resourceGroupName, serviceName, apiVersion, subscriptionId, versionSetId, ifMatch);
        // TODO: test validations
    }

    /**
     * Gets the details of the Api Version Set specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String versionSetId = null;
        ApiVersionSetContract response = api.apiVersionSetGet(resourceGroupName, serviceName, apiVersion, subscriptionId, versionSetId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the Api Version Set specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String versionSetId = null;
        api.apiVersionSetGetEntityTag(resourceGroupName, serviceName, apiVersion, subscriptionId, versionSetId);
        // TODO: test validations
    }

    /**
     * Lists a collection of API Version Sets in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ApiVersionSetCollection response = api.apiVersionSetListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the Api VersionSet specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiVersionSetUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String versionSetId = null;
        String ifMatch = null;
        ApiVersionSetUpdateParameters parameters = null;
        api.apiVersionSetUpdate(resourceGroupName, serviceName, apiVersion, subscriptionId, versionSetId, ifMatch, parameters);
        // TODO: test validations
    }

}
