/*
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegistrationDefinition;
import org.openapitools.client.model.RegistrationDefinitionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registrationDefinitionsCreateOrUpdate
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param requestBody The parameters required to create new registration definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsCreateOrUpdateCall(String registrationDefinitionId, String apiVersion, String scope, RegistrationDefinition requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}"
            .replace("{" + "registrationDefinitionId" + "}", localVarApiClient.escapeString(registrationDefinitionId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationDefinitionsCreateOrUpdateValidateBeforeCall(String registrationDefinitionId, String apiVersion, String scope, RegistrationDefinition requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationDefinitionId' is set
        if (registrationDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling registrationDefinitionsCreateOrUpdate(Async)");
        }

        return registrationDefinitionsCreateOrUpdateCall(registrationDefinitionId, apiVersion, scope, requestBody, _callback);

    }

    /**
     * 
     * Creates or updates a registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param requestBody The parameters required to create new registration definition. (required)
     * @return RegistrationDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationDefinition registrationDefinitionsCreateOrUpdate(String registrationDefinitionId, String apiVersion, String scope, RegistrationDefinition requestBody) throws ApiException {
        ApiResponse<RegistrationDefinition> localVarResp = registrationDefinitionsCreateOrUpdateWithHttpInfo(registrationDefinitionId, apiVersion, scope, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param requestBody The parameters required to create new registration definition. (required)
     * @return ApiResponse&lt;RegistrationDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationDefinition> registrationDefinitionsCreateOrUpdateWithHttpInfo(String registrationDefinitionId, String apiVersion, String scope, RegistrationDefinition requestBody) throws ApiException {
        okhttp3.Call localVarCall = registrationDefinitionsCreateOrUpdateValidateBeforeCall(registrationDefinitionId, apiVersion, scope, requestBody, null);
        Type localVarReturnType = new TypeToken<RegistrationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param requestBody The parameters required to create new registration definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsCreateOrUpdateAsync(String registrationDefinitionId, String apiVersion, String scope, RegistrationDefinition requestBody, final ApiCallback<RegistrationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationDefinitionsCreateOrUpdateValidateBeforeCall(registrationDefinitionId, apiVersion, scope, requestBody, _callback);
        Type localVarReturnType = new TypeToken<RegistrationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationDefinitionsDelete
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration definition is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration definition does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsDeleteCall(String registrationDefinitionId, String apiVersion, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}"
            .replace("{" + "registrationDefinitionId" + "}", localVarApiClient.escapeString(registrationDefinitionId.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationDefinitionsDeleteValidateBeforeCall(String registrationDefinitionId, String apiVersion, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationDefinitionId' is set
        if (registrationDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationDefinitionsDelete(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationDefinitionsDelete(Async)");
        }

        return registrationDefinitionsDeleteCall(registrationDefinitionId, apiVersion, scope, _callback);

    }

    /**
     * 
     * Deletes the registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration definition is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration definition does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void registrationDefinitionsDelete(String registrationDefinitionId, String apiVersion, String scope) throws ApiException {
        registrationDefinitionsDeleteWithHttpInfo(registrationDefinitionId, apiVersion, scope);
    }

    /**
     * 
     * Deletes the registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration definition is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration definition does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registrationDefinitionsDeleteWithHttpInfo(String registrationDefinitionId, String apiVersion, String scope) throws ApiException {
        okhttp3.Call localVarCall = registrationDefinitionsDeleteValidateBeforeCall(registrationDefinitionId, apiVersion, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the registration definition.
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Scope of the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration definition is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration definition does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsDeleteAsync(String registrationDefinitionId, String apiVersion, String scope, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationDefinitionsDeleteValidateBeforeCall(registrationDefinitionId, apiVersion, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationDefinitionsGet
     * @param scope Scope of the resource. (required)
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the complete registration definition with plan details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsGetCall(String scope, String registrationDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "registrationDefinitionId" + "}", localVarApiClient.escapeString(registrationDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationDefinitionsGetValidateBeforeCall(String scope, String registrationDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationDefinitionsGet(Async)");
        }

        // verify the required parameter 'registrationDefinitionId' is set
        if (registrationDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationDefinitionsGet(Async)");
        }

        return registrationDefinitionsGetCall(scope, registrationDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the registration definition details.
     * @param scope Scope of the resource. (required)
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RegistrationDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the complete registration definition with plan details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationDefinition registrationDefinitionsGet(String scope, String registrationDefinitionId, String apiVersion) throws ApiException {
        ApiResponse<RegistrationDefinition> localVarResp = registrationDefinitionsGetWithHttpInfo(scope, registrationDefinitionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the registration definition details.
     * @param scope Scope of the resource. (required)
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RegistrationDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the complete registration definition with plan details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationDefinition> registrationDefinitionsGetWithHttpInfo(String scope, String registrationDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registrationDefinitionsGetValidateBeforeCall(scope, registrationDefinitionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RegistrationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the registration definition details.
     * @param scope Scope of the resource. (required)
     * @param registrationDefinitionId Guid of the registration definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the complete registration definition with plan details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsGetAsync(String scope, String registrationDefinitionId, String apiVersion, final ApiCallback<RegistrationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationDefinitionsGetValidateBeforeCall(scope, registrationDefinitionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RegistrationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationDefinitionsList
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsListCall(String scope, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationDefinitionsListValidateBeforeCall(String scope, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationDefinitionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationDefinitionsList(Async)");
        }

        return registrationDefinitionsListCall(scope, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of the registration definitions.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RegistrationDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationDefinitionList registrationDefinitionsList(String scope, String apiVersion) throws ApiException {
        ApiResponse<RegistrationDefinitionList> localVarResp = registrationDefinitionsListWithHttpInfo(scope, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of the registration definitions.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RegistrationDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationDefinitionList> registrationDefinitionsListWithHttpInfo(String scope, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registrationDefinitionsListValidateBeforeCall(scope, apiVersion, null);
        Type localVarReturnType = new TypeToken<RegistrationDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of the registration definitions.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationDefinitionsListAsync(String scope, String apiVersion, final ApiCallback<RegistrationDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationDefinitionsListValidateBeforeCall(scope, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RegistrationDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
