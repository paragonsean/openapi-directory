# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Authorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, role_definition_id: str=None):
        """Authorization - a model defined in OpenAPI

        :param principal_id: The principal_id of this Authorization.
        :param role_definition_id: The role_definition_id of this Authorization.
        """
        self.openapi_types = {
            'principal_id': str,
            'role_definition_id': str
        }

        self.attribute_map = {
            'principal_id': 'principalId',
            'role_definition_id': 'roleDefinitionId'
        }

        self._principal_id = principal_id
        self._role_definition_id = role_definition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Authorization of this Authorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this Authorization.

        Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription

        :return: The principal_id of this Authorization.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this Authorization.

        Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription

        :param principal_id: The principal_id of this Authorization.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id

    @property
    def role_definition_id(self):
        """Gets the role_definition_id of this Authorization.

        The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.

        :return: The role_definition_id of this Authorization.
        :rtype: str
        """
        return self._role_definition_id

    @role_definition_id.setter
    def role_definition_id(self, role_definition_id):
        """Sets the role_definition_id of this Authorization.

        The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.

        :param role_definition_id: The role_definition_id of this Authorization.
        :type role_definition_id: str
        """
        if role_definition_id is None:
            raise ValueError("Invalid value for `role_definition_id`, must not be `None`")

        self._role_definition_id = role_definition_id
