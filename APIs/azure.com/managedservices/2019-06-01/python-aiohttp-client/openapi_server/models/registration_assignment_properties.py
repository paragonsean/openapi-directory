# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_assignment_properties_registration_definition import RegistrationAssignmentPropertiesRegistrationDefinition
from openapi_server import util


class RegistrationAssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, registration_definition: RegistrationAssignmentPropertiesRegistrationDefinition=None, registration_definition_id: str=None):
        """RegistrationAssignmentProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this RegistrationAssignmentProperties.
        :param registration_definition: The registration_definition of this RegistrationAssignmentProperties.
        :param registration_definition_id: The registration_definition_id of this RegistrationAssignmentProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'registration_definition': RegistrationAssignmentPropertiesRegistrationDefinition,
            'registration_definition_id': str
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'registration_definition': 'registrationDefinition',
            'registration_definition_id': 'registrationDefinitionId'
        }

        self._provisioning_state = provisioning_state
        self._registration_definition = registration_definition
        self._registration_definition_id = registration_definition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationAssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationAssignmentProperties of this RegistrationAssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RegistrationAssignmentProperties.

        Current state of the registration assignment.

        :return: The provisioning_state of this RegistrationAssignmentProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RegistrationAssignmentProperties.

        Current state of the registration assignment.

        :param provisioning_state: The provisioning_state of this RegistrationAssignmentProperties.
        :type provisioning_state: str
        """
        allowed_values = ["NotSpecified", "Accepted", "Running", "Ready", "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded", "Updating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def registration_definition(self):
        """Gets the registration_definition of this RegistrationAssignmentProperties.


        :return: The registration_definition of this RegistrationAssignmentProperties.
        :rtype: RegistrationAssignmentPropertiesRegistrationDefinition
        """
        return self._registration_definition

    @registration_definition.setter
    def registration_definition(self, registration_definition):
        """Sets the registration_definition of this RegistrationAssignmentProperties.


        :param registration_definition: The registration_definition of this RegistrationAssignmentProperties.
        :type registration_definition: RegistrationAssignmentPropertiesRegistrationDefinition
        """

        self._registration_definition = registration_definition

    @property
    def registration_definition_id(self):
        """Gets the registration_definition_id of this RegistrationAssignmentProperties.

        Fully qualified path of the registration definition.

        :return: The registration_definition_id of this RegistrationAssignmentProperties.
        :rtype: str
        """
        return self._registration_definition_id

    @registration_definition_id.setter
    def registration_definition_id(self, registration_definition_id):
        """Sets the registration_definition_id of this RegistrationAssignmentProperties.

        Fully qualified path of the registration definition.

        :param registration_definition_id: The registration_definition_id of this RegistrationAssignmentProperties.
        :type registration_definition_id: str
        """
        if registration_definition_id is None:
            raise ValueError("Invalid value for `registration_definition_id`, must not be `None`")

        self._registration_definition_id = registration_definition_id
