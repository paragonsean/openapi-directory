/*
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Authorization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a registration definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:45.077499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistrationDefinitionProperties {
  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<Authorization> authorizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MANAGED_BY_TENANT_ID = "managedByTenantId";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY_TENANT_ID)
  private String managedByTenantId;

  public static final String SERIALIZED_NAME_MANAGED_BY_TENANT_NAME = "managedByTenantName";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY_TENANT_NAME)
  private String managedByTenantName;

  /**
   * Current state of the registration definition.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    ACCEPTED("Accepted"),
    
    RUNNING("Running"),
    
    READY("Ready"),
    
    CREATING("Creating"),
    
    CREATED("Created"),
    
    DELETING("Deleting"),
    
    DELETED("Deleted"),
    
    CANCELED("Canceled"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_REGISTRATION_DEFINITION_NAME = "registrationDefinitionName";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DEFINITION_NAME)
  private String registrationDefinitionName;

  public RegistrationDefinitionProperties() {
  }

  public RegistrationDefinitionProperties(
     String managedByTenantName, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.managedByTenantName = managedByTenantName;
    this.provisioningState = provisioningState;
  }

  public RegistrationDefinitionProperties authorizations(List<Authorization> authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  public RegistrationDefinitionProperties addAuthorizationsItem(Authorization authorizationsItem) {
    if (this.authorizations == null) {
      this.authorizations = new ArrayList<>();
    }
    this.authorizations.add(authorizationsItem);
    return this;
  }

  /**
   * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
   * @return authorizations
   */
  @javax.annotation.Nonnull
  public List<Authorization> getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(List<Authorization> authorizations) {
    this.authorizations = authorizations;
  }


  public RegistrationDefinitionProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the registration definition.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RegistrationDefinitionProperties managedByTenantId(String managedByTenantId) {
    this.managedByTenantId = managedByTenantId;
    return this;
  }

  /**
   * Id of the managedBy tenant.
   * @return managedByTenantId
   */
  @javax.annotation.Nonnull
  public String getManagedByTenantId() {
    return managedByTenantId;
  }

  public void setManagedByTenantId(String managedByTenantId) {
    this.managedByTenantId = managedByTenantId;
  }


  /**
   * Name of the managedBy tenant.
   * @return managedByTenantName
   */
  @javax.annotation.Nullable
  public String getManagedByTenantName() {
    return managedByTenantName;
  }



  /**
   * Current state of the registration definition.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public RegistrationDefinitionProperties registrationDefinitionName(String registrationDefinitionName) {
    this.registrationDefinitionName = registrationDefinitionName;
    return this;
  }

  /**
   * Name of the registration definition.
   * @return registrationDefinitionName
   */
  @javax.annotation.Nullable
  public String getRegistrationDefinitionName() {
    return registrationDefinitionName;
  }

  public void setRegistrationDefinitionName(String registrationDefinitionName) {
    this.registrationDefinitionName = registrationDefinitionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationDefinitionProperties registrationDefinitionProperties = (RegistrationDefinitionProperties) o;
    return Objects.equals(this.authorizations, registrationDefinitionProperties.authorizations) &&
        Objects.equals(this.description, registrationDefinitionProperties.description) &&
        Objects.equals(this.managedByTenantId, registrationDefinitionProperties.managedByTenantId) &&
        Objects.equals(this.managedByTenantName, registrationDefinitionProperties.managedByTenantName) &&
        Objects.equals(this.provisioningState, registrationDefinitionProperties.provisioningState) &&
        Objects.equals(this.registrationDefinitionName, registrationDefinitionProperties.registrationDefinitionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizations, description, managedByTenantId, managedByTenantName, provisioningState, registrationDefinitionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationDefinitionProperties {\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    managedByTenantId: ").append(toIndentedString(managedByTenantId)).append("\n");
    sb.append("    managedByTenantName: ").append(toIndentedString(managedByTenantName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    registrationDefinitionName: ").append(toIndentedString(registrationDefinitionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizations");
    openapiFields.add("description");
    openapiFields.add("managedByTenantId");
    openapiFields.add("managedByTenantName");
    openapiFields.add("provisioningState");
    openapiFields.add("registrationDefinitionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizations");
    openapiRequiredFields.add("managedByTenantId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrationDefinitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrationDefinitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrationDefinitionProperties is not found in the empty JSON string", RegistrationDefinitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrationDefinitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrationDefinitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistrationDefinitionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("authorizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
      }

      JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
      // validate the required field `authorizations` (array)
      for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
        Authorization.validateJsonElement(jsonArrayauthorizations.get(i));
      };
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("managedByTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedByTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedByTenantId").toString()));
      }
      if ((jsonObj.get("managedByTenantName") != null && !jsonObj.get("managedByTenantName").isJsonNull()) && !jsonObj.get("managedByTenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedByTenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedByTenantName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("registrationDefinitionName") != null && !jsonObj.get("registrationDefinitionName").isJsonNull()) && !jsonObj.get("registrationDefinitionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationDefinitionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationDefinitionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrationDefinitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrationDefinitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrationDefinitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrationDefinitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrationDefinitionProperties>() {
           @Override
           public void write(JsonWriter out, RegistrationDefinitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrationDefinitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrationDefinitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrationDefinitionProperties
   * @throws IOException if the JSON string is invalid with respect to RegistrationDefinitionProperties
   */
  public static RegistrationDefinitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrationDefinitionProperties.class);
  }

  /**
   * Convert an instance of RegistrationDefinitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

