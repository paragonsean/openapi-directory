/*
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegistrationAssignment;
import org.openapitools.client.model.RegistrationAssignmentList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registrationAssignmentsCreateOrUpdate
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param requestBody The parameters required to create new registration assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration assignment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsCreateOrUpdateCall(String scope, String registrationAssignmentId, String apiVersion, RegistrationAssignment requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "registrationAssignmentId" + "}", localVarApiClient.escapeString(registrationAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationAssignmentsCreateOrUpdateValidateBeforeCall(String scope, String registrationAssignmentId, String apiVersion, RegistrationAssignment requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'registrationAssignmentId' is set
        if (registrationAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'registrationAssignmentId' when calling registrationAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling registrationAssignmentsCreateOrUpdate(Async)");
        }

        return registrationAssignmentsCreateOrUpdateCall(scope, registrationAssignmentId, apiVersion, requestBody, _callback);

    }

    /**
     * 
     * Creates or updates a registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param requestBody The parameters required to create new registration assignment. (required)
     * @return RegistrationAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration assignment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationAssignment registrationAssignmentsCreateOrUpdate(String scope, String registrationAssignmentId, String apiVersion, RegistrationAssignment requestBody) throws ApiException {
        ApiResponse<RegistrationAssignment> localVarResp = registrationAssignmentsCreateOrUpdateWithHttpInfo(scope, registrationAssignmentId, apiVersion, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param requestBody The parameters required to create new registration assignment. (required)
     * @return ApiResponse&lt;RegistrationAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration assignment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationAssignment> registrationAssignmentsCreateOrUpdateWithHttpInfo(String scope, String registrationAssignmentId, String apiVersion, RegistrationAssignment requestBody) throws ApiException {
        okhttp3.Call localVarCall = registrationAssignmentsCreateOrUpdateValidateBeforeCall(scope, registrationAssignmentId, apiVersion, requestBody, null);
        Type localVarReturnType = new TypeToken<RegistrationAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param requestBody The parameters required to create new registration assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - Returns information about the updated registration assignment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the created registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsCreateOrUpdateAsync(String scope, String registrationAssignmentId, String apiVersion, RegistrationAssignment requestBody, final ApiCallback<RegistrationAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationAssignmentsCreateOrUpdateValidateBeforeCall(scope, registrationAssignmentId, apiVersion, requestBody, _callback);
        Type localVarReturnType = new TypeToken<RegistrationAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationAssignmentsDelete
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - The registration assignment deletion operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration assignment does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsDeleteCall(String scope, String registrationAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "registrationAssignmentId" + "}", localVarApiClient.escapeString(registrationAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationAssignmentsDeleteValidateBeforeCall(String scope, String registrationAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationAssignmentsDelete(Async)");
        }

        // verify the required parameter 'registrationAssignmentId' is set
        if (registrationAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'registrationAssignmentId' when calling registrationAssignmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationAssignmentsDelete(Async)");
        }

        return registrationAssignmentsDeleteCall(scope, registrationAssignmentId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - The registration assignment deletion operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration assignment does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void registrationAssignmentsDelete(String scope, String registrationAssignmentId, String apiVersion) throws ApiException {
        registrationAssignmentsDeleteWithHttpInfo(scope, registrationAssignmentId, apiVersion);
    }

    /**
     * 
     * Deletes the specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - The registration assignment deletion operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration assignment does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registrationAssignmentsDeleteWithHttpInfo(String scope, String registrationAssignmentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registrationAssignmentsDeleteValidateBeforeCall(scope, registrationAssignmentId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - The registration assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - The registration assignment deletion operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content- The registration assignment does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsDeleteAsync(String scope, String registrationAssignmentId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationAssignmentsDeleteValidateBeforeCall(scope, registrationAssignmentId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationAssignmentsGet
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsGetCall(String scope, String registrationAssignmentId, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments/{registrationAssignmentId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "registrationAssignmentId" + "}", localVarApiClient.escapeString(registrationAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expandRegistrationDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expandRegistrationDefinition", $expandRegistrationDefinition));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationAssignmentsGetValidateBeforeCall(String scope, String registrationAssignmentId, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationAssignmentsGet(Async)");
        }

        // verify the required parameter 'registrationAssignmentId' is set
        if (registrationAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'registrationAssignmentId' when calling registrationAssignmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationAssignmentsGet(Async)");
        }

        return registrationAssignmentsGetCall(scope, registrationAssignmentId, apiVersion, $expandRegistrationDefinition, _callback);

    }

    /**
     * 
     * Gets the details of specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @return RegistrationAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationAssignment registrationAssignmentsGet(String scope, String registrationAssignmentId, String apiVersion, Boolean $expandRegistrationDefinition) throws ApiException {
        ApiResponse<RegistrationAssignment> localVarResp = registrationAssignmentsGetWithHttpInfo(scope, registrationAssignmentId, apiVersion, $expandRegistrationDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @return ApiResponse&lt;RegistrationAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationAssignment> registrationAssignmentsGetWithHttpInfo(String scope, String registrationAssignmentId, String apiVersion, Boolean $expandRegistrationDefinition) throws ApiException {
        okhttp3.Call localVarCall = registrationAssignmentsGetValidateBeforeCall(scope, registrationAssignmentId, apiVersion, $expandRegistrationDefinition, null);
        Type localVarReturnType = new TypeToken<RegistrationAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of specified registration assignment.
     * @param scope Scope of the resource. (required)
     * @param registrationAssignmentId Guid of the registration assignment. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the registration assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsGetAsync(String scope, String registrationAssignmentId, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback<RegistrationAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationAssignmentsGetValidateBeforeCall(scope, registrationAssignmentId, apiVersion, $expandRegistrationDefinition, _callback);
        Type localVarReturnType = new TypeToken<RegistrationAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registrationAssignmentsList
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsListCall(String scope, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.ManagedServices/registrationAssignments"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expandRegistrationDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expandRegistrationDefinition", $expandRegistrationDefinition));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registrationAssignmentsListValidateBeforeCall(String scope, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling registrationAssignmentsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registrationAssignmentsList(Async)");
        }

        return registrationAssignmentsListCall(scope, apiVersion, $expandRegistrationDefinition, _callback);

    }

    /**
     * 
     * Gets a list of the registration assignments.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @return RegistrationAssignmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationAssignmentList registrationAssignmentsList(String scope, String apiVersion, Boolean $expandRegistrationDefinition) throws ApiException {
        ApiResponse<RegistrationAssignmentList> localVarResp = registrationAssignmentsListWithHttpInfo(scope, apiVersion, $expandRegistrationDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of the registration assignments.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @return ApiResponse&lt;RegistrationAssignmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationAssignmentList> registrationAssignmentsListWithHttpInfo(String scope, String apiVersion, Boolean $expandRegistrationDefinition) throws ApiException {
        okhttp3.Call localVarCall = registrationAssignmentsListValidateBeforeCall(scope, apiVersion, $expandRegistrationDefinition, null);
        Type localVarReturnType = new TypeToken<RegistrationAssignmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of the registration assignments.
     * @param scope Scope of the resource. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $expandRegistrationDefinition Tells whether to return registration definition details also along with registration assignment details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a list of the registration assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registrationAssignmentsListAsync(String scope, String apiVersion, Boolean $expandRegistrationDefinition, final ApiCallback<RegistrationAssignmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = registrationAssignmentsListValidateBeforeCall(scope, apiVersion, $expandRegistrationDefinition, _callback);
        Type localVarReturnType = new TypeToken<RegistrationAssignmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
