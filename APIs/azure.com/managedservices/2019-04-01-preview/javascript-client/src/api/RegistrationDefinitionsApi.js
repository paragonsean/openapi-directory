/**
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import RegistrationDefinition from '../model/RegistrationDefinition';
import RegistrationDefinitionList from '../model/RegistrationDefinitionList';

/**
* RegistrationDefinitions service.
* @module api/RegistrationDefinitionsApi
* @version 2019-04-01-preview
*/
export default class RegistrationDefinitionsApi {

    /**
    * Constructs a new RegistrationDefinitionsApi. 
    * @alias module:api/RegistrationDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the registrationDefinitionsCreateOrUpdate operation.
     * @callback module:api/RegistrationDefinitionsApi~registrationDefinitionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a registration definition.
     * @param {String} registrationDefinitionId Guid of the registration definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scope Scope of the resource.
     * @param {module:model/RegistrationDefinition} requestBody The parameters required to create new registration definition.
     * @param {module:api/RegistrationDefinitionsApi~registrationDefinitionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationDefinition}
     */
    registrationDefinitionsCreateOrUpdate(registrationDefinitionId, apiVersion, scope, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'registrationDefinitionId' is set
      if (registrationDefinitionId === undefined || registrationDefinitionId === null) {
        throw new Error("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registrationDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling registrationDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling registrationDefinitionsCreateOrUpdate");
      }

      let pathParams = {
        'registrationDefinitionId': registrationDefinitionId,
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegistrationDefinition;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationDefinitionsDelete operation.
     * @callback module:api/RegistrationDefinitionsApi~registrationDefinitionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the registration definition.
     * @param {String} registrationDefinitionId Guid of the registration definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scope Scope of the resource.
     * @param {module:api/RegistrationDefinitionsApi~registrationDefinitionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registrationDefinitionsDelete(registrationDefinitionId, apiVersion, scope, callback) {
      let postBody = null;
      // verify the required parameter 'registrationDefinitionId' is set
      if (registrationDefinitionId === undefined || registrationDefinitionId === null) {
        throw new Error("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registrationDefinitionsDelete");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling registrationDefinitionsDelete");
      }

      let pathParams = {
        'registrationDefinitionId': registrationDefinitionId,
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationDefinitionsGet operation.
     * @callback module:api/RegistrationDefinitionsApi~registrationDefinitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the registration definition details.
     * @param {String} scope Scope of the resource.
     * @param {String} registrationDefinitionId Guid of the registration definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RegistrationDefinitionsApi~registrationDefinitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationDefinition}
     */
    registrationDefinitionsGet(scope, registrationDefinitionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling registrationDefinitionsGet");
      }
      // verify the required parameter 'registrationDefinitionId' is set
      if (registrationDefinitionId === undefined || registrationDefinitionId === null) {
        throw new Error("Missing the required parameter 'registrationDefinitionId' when calling registrationDefinitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registrationDefinitionsGet");
      }

      let pathParams = {
        'scope': scope,
        'registrationDefinitionId': registrationDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegistrationDefinition;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationDefinitionsList operation.
     * @callback module:api/RegistrationDefinitionsApi~registrationDefinitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the registration definitions.
     * @param {String} scope Scope of the resource.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RegistrationDefinitionsApi~registrationDefinitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationDefinitionList}
     */
    registrationDefinitionsList(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling registrationDefinitionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registrationDefinitionsList");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegistrationDefinitionList;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
