/**
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationDefinitionProperties::OAIRegistrationDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationDefinitionProperties::OAIRegistrationDefinitionProperties() {
    this->initializeModel();
}

OAIRegistrationDefinitionProperties::~OAIRegistrationDefinitionProperties() {}

void OAIRegistrationDefinitionProperties::initializeModel() {

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_managed_by_tenant_id_isSet = false;
    m_managed_by_tenant_id_isValid = false;

    m_managed_by_tenant_name_isSet = false;
    m_managed_by_tenant_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_registration_definition_name_isSet = false;
    m_registration_definition_name_isValid = false;
}

void OAIRegistrationDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_managed_by_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_managed_by_tenant_id, json[QString("managedByTenantId")]);
    m_managed_by_tenant_id_isSet = !json[QString("managedByTenantId")].isNull() && m_managed_by_tenant_id_isValid;

    m_managed_by_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_managed_by_tenant_name, json[QString("managedByTenantName")]);
    m_managed_by_tenant_name_isSet = !json[QString("managedByTenantName")].isNull() && m_managed_by_tenant_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_registration_definition_name_isValid = ::OpenAPI::fromJsonValue(m_registration_definition_name, json[QString("registrationDefinitionName")]);
    m_registration_definition_name_isSet = !json[QString("registrationDefinitionName")].isNull() && m_registration_definition_name_isValid;
}

QString OAIRegistrationDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_managed_by_tenant_id_isSet) {
        obj.insert(QString("managedByTenantId"), ::OpenAPI::toJsonValue(m_managed_by_tenant_id));
    }
    if (m_managed_by_tenant_name_isSet) {
        obj.insert(QString("managedByTenantName"), ::OpenAPI::toJsonValue(m_managed_by_tenant_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_registration_definition_name_isSet) {
        obj.insert(QString("registrationDefinitionName"), ::OpenAPI::toJsonValue(m_registration_definition_name));
    }
    return obj;
}

QList<OAIAuthorization> OAIRegistrationDefinitionProperties::getAuthorizations() const {
    return m_authorizations;
}
void OAIRegistrationDefinitionProperties::setAuthorizations(const QList<OAIAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIRegistrationDefinitionProperties::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

QString OAIRegistrationDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIRegistrationDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRegistrationDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRegistrationDefinitionProperties::getManagedByTenantId() const {
    return m_managed_by_tenant_id;
}
void OAIRegistrationDefinitionProperties::setManagedByTenantId(const QString &managed_by_tenant_id) {
    m_managed_by_tenant_id = managed_by_tenant_id;
    m_managed_by_tenant_id_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_managed_by_tenant_id_Set() const{
    return m_managed_by_tenant_id_isSet;
}

bool OAIRegistrationDefinitionProperties::is_managed_by_tenant_id_Valid() const{
    return m_managed_by_tenant_id_isValid;
}

QString OAIRegistrationDefinitionProperties::getManagedByTenantName() const {
    return m_managed_by_tenant_name;
}
void OAIRegistrationDefinitionProperties::setManagedByTenantName(const QString &managed_by_tenant_name) {
    m_managed_by_tenant_name = managed_by_tenant_name;
    m_managed_by_tenant_name_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_managed_by_tenant_name_Set() const{
    return m_managed_by_tenant_name_isSet;
}

bool OAIRegistrationDefinitionProperties::is_managed_by_tenant_name_Valid() const{
    return m_managed_by_tenant_name_isValid;
}

QString OAIRegistrationDefinitionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRegistrationDefinitionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRegistrationDefinitionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRegistrationDefinitionProperties::getRegistrationDefinitionName() const {
    return m_registration_definition_name;
}
void OAIRegistrationDefinitionProperties::setRegistrationDefinitionName(const QString &registration_definition_name) {
    m_registration_definition_name = registration_definition_name;
    m_registration_definition_name_isSet = true;
}

bool OAIRegistrationDefinitionProperties::is_registration_definition_name_Set() const{
    return m_registration_definition_name_isSet;
}

bool OAIRegistrationDefinitionProperties::is_registration_definition_name_Valid() const{
    return m_registration_definition_name_isValid;
}

bool OAIRegistrationDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_by_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_by_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_definition_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorizations_isValid && m_managed_by_tenant_id_isValid && true;
}

} // namespace OpenAPI
