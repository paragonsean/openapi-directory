/**
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationAssignmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationAssignmentProperties::OAIRegistrationAssignmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationAssignmentProperties::OAIRegistrationAssignmentProperties() {
    this->initializeModel();
}

OAIRegistrationAssignmentProperties::~OAIRegistrationAssignmentProperties() {}

void OAIRegistrationAssignmentProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_registration_definition_isSet = false;
    m_registration_definition_isValid = false;

    m_registration_definition_id_isSet = false;
    m_registration_definition_id_isValid = false;
}

void OAIRegistrationAssignmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationAssignmentProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_registration_definition_isValid = ::OpenAPI::fromJsonValue(m_registration_definition, json[QString("registrationDefinition")]);
    m_registration_definition_isSet = !json[QString("registrationDefinition")].isNull() && m_registration_definition_isValid;

    m_registration_definition_id_isValid = ::OpenAPI::fromJsonValue(m_registration_definition_id, json[QString("registrationDefinitionId")]);
    m_registration_definition_id_isSet = !json[QString("registrationDefinitionId")].isNull() && m_registration_definition_id_isValid;
}

QString OAIRegistrationAssignmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationAssignmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_registration_definition.isSet()) {
        obj.insert(QString("registrationDefinition"), ::OpenAPI::toJsonValue(m_registration_definition));
    }
    if (m_registration_definition_id_isSet) {
        obj.insert(QString("registrationDefinitionId"), ::OpenAPI::toJsonValue(m_registration_definition_id));
    }
    return obj;
}

QString OAIRegistrationAssignmentProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRegistrationAssignmentProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRegistrationAssignmentProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRegistrationAssignmentProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRegistrationAssignmentProperties_registrationDefinition OAIRegistrationAssignmentProperties::getRegistrationDefinition() const {
    return m_registration_definition;
}
void OAIRegistrationAssignmentProperties::setRegistrationDefinition(const OAIRegistrationAssignmentProperties_registrationDefinition &registration_definition) {
    m_registration_definition = registration_definition;
    m_registration_definition_isSet = true;
}

bool OAIRegistrationAssignmentProperties::is_registration_definition_Set() const{
    return m_registration_definition_isSet;
}

bool OAIRegistrationAssignmentProperties::is_registration_definition_Valid() const{
    return m_registration_definition_isValid;
}

QString OAIRegistrationAssignmentProperties::getRegistrationDefinitionId() const {
    return m_registration_definition_id;
}
void OAIRegistrationAssignmentProperties::setRegistrationDefinitionId(const QString &registration_definition_id) {
    m_registration_definition_id = registration_definition_id;
    m_registration_definition_id_isSet = true;
}

bool OAIRegistrationAssignmentProperties::is_registration_definition_id_Set() const{
    return m_registration_definition_id_isSet;
}

bool OAIRegistrationAssignmentProperties::is_registration_definition_id_Valid() const{
    return m_registration_definition_id_isValid;
}

bool OAIRegistrationAssignmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationAssignmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registration_definition_id_isValid && true;
}

} // namespace OpenAPI
