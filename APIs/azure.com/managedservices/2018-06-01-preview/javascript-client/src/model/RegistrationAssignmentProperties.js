/**
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegistrationAssignmentPropertiesRegistrationDefinition from './RegistrationAssignmentPropertiesRegistrationDefinition';

/**
 * The RegistrationAssignmentProperties model module.
 * @module model/RegistrationAssignmentProperties
 * @version 2018-06-01-preview
 */
class RegistrationAssignmentProperties {
    /**
     * Constructs a new <code>RegistrationAssignmentProperties</code>.
     * Properties of a registration assignment.
     * @alias module:model/RegistrationAssignmentProperties
     * @param registrationDefinitionId {String} Fully qualified path of the registration definition.
     */
    constructor(registrationDefinitionId) { 
        
        RegistrationAssignmentProperties.initialize(this, registrationDefinitionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, registrationDefinitionId) { 
        obj['registrationDefinitionId'] = registrationDefinitionId;
    }

    /**
     * Constructs a <code>RegistrationAssignmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationAssignmentProperties} obj Optional instance to populate.
     * @return {module:model/RegistrationAssignmentProperties} The populated <code>RegistrationAssignmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationAssignmentProperties();

            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('registrationDefinition')) {
                obj['registrationDefinition'] = RegistrationAssignmentPropertiesRegistrationDefinition.constructFromObject(data['registrationDefinition']);
            }
            if (data.hasOwnProperty('registrationDefinitionId')) {
                obj['registrationDefinitionId'] = ApiClient.convertToType(data['registrationDefinitionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationAssignmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationAssignmentProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationAssignmentProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `registrationDefinition`
        if (data['registrationDefinition']) { // data not null
          RegistrationAssignmentPropertiesRegistrationDefinition.validateJSON(data['registrationDefinition']);
        }
        // ensure the json data is a string
        if (data['registrationDefinitionId'] && !(typeof data['registrationDefinitionId'] === 'string' || data['registrationDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `registrationDefinitionId` to be a primitive type in the JSON string but got " + data['registrationDefinitionId']);
        }

        return true;
    }


}

RegistrationAssignmentProperties.RequiredProperties = ["registrationDefinitionId"];

/**
 * Current state of the registration assignment.
 * @member {module:model/RegistrationAssignmentProperties.ProvisioningStateEnum} provisioningState
 */
RegistrationAssignmentProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/RegistrationAssignmentPropertiesRegistrationDefinition} registrationDefinition
 */
RegistrationAssignmentProperties.prototype['registrationDefinition'] = undefined;

/**
 * Fully qualified path of the registration definition.
 * @member {String} registrationDefinitionId
 */
RegistrationAssignmentProperties.prototype['registrationDefinitionId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
RegistrationAssignmentProperties['ProvisioningStateEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating"
};



export default RegistrationAssignmentProperties;

