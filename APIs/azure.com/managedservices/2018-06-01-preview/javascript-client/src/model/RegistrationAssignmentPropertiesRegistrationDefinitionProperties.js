/**
 * ManagedServicesClient
 * Specification for ManagedServices.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Authorization from './Authorization';

/**
 * The RegistrationAssignmentPropertiesRegistrationDefinitionProperties model module.
 * @module model/RegistrationAssignmentPropertiesRegistrationDefinitionProperties
 * @version 2018-06-01-preview
 */
class RegistrationAssignmentPropertiesRegistrationDefinitionProperties {
    /**
     * Constructs a new <code>RegistrationAssignmentPropertiesRegistrationDefinitionProperties</code>.
     * Properties of registration definition inside registration assignment.
     * @alias module:model/RegistrationAssignmentPropertiesRegistrationDefinitionProperties
     */
    constructor() { 
        
        RegistrationAssignmentPropertiesRegistrationDefinitionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegistrationAssignmentPropertiesRegistrationDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationAssignmentPropertiesRegistrationDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/RegistrationAssignmentPropertiesRegistrationDefinitionProperties} The populated <code>RegistrationAssignmentPropertiesRegistrationDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationAssignmentPropertiesRegistrationDefinitionProperties();

            if (data.hasOwnProperty('authorizations')) {
                obj['authorizations'] = ApiClient.convertToType(data['authorizations'], [Authorization]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('managedByTenantId')) {
                obj['managedByTenantId'] = ApiClient.convertToType(data['managedByTenantId'], 'String');
            }
            if (data.hasOwnProperty('managedByTenantName')) {
                obj['managedByTenantName'] = ApiClient.convertToType(data['managedByTenantName'], 'String');
            }
            if (data.hasOwnProperty('manageeTenantId')) {
                obj['manageeTenantId'] = ApiClient.convertToType(data['manageeTenantId'], 'String');
            }
            if (data.hasOwnProperty('manageeTenantName')) {
                obj['manageeTenantName'] = ApiClient.convertToType(data['manageeTenantName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('registrationDefinitionName')) {
                obj['registrationDefinitionName'] = ApiClient.convertToType(data['registrationDefinitionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationAssignmentPropertiesRegistrationDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationAssignmentPropertiesRegistrationDefinitionProperties</code>.
     */
    static validateJSON(data) {
        if (data['authorizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizations'])) {
                throw new Error("Expected the field `authorizations` to be an array in the JSON data but got " + data['authorizations']);
            }
            // validate the optional field `authorizations` (array)
            for (const item of data['authorizations']) {
                Authorization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['managedByTenantId'] && !(typeof data['managedByTenantId'] === 'string' || data['managedByTenantId'] instanceof String)) {
            throw new Error("Expected the field `managedByTenantId` to be a primitive type in the JSON string but got " + data['managedByTenantId']);
        }
        // ensure the json data is a string
        if (data['managedByTenantName'] && !(typeof data['managedByTenantName'] === 'string' || data['managedByTenantName'] instanceof String)) {
            throw new Error("Expected the field `managedByTenantName` to be a primitive type in the JSON string but got " + data['managedByTenantName']);
        }
        // ensure the json data is a string
        if (data['manageeTenantId'] && !(typeof data['manageeTenantId'] === 'string' || data['manageeTenantId'] instanceof String)) {
            throw new Error("Expected the field `manageeTenantId` to be a primitive type in the JSON string but got " + data['manageeTenantId']);
        }
        // ensure the json data is a string
        if (data['manageeTenantName'] && !(typeof data['manageeTenantName'] === 'string' || data['manageeTenantName'] instanceof String)) {
            throw new Error("Expected the field `manageeTenantName` to be a primitive type in the JSON string but got " + data['manageeTenantName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['registrationDefinitionName'] && !(typeof data['registrationDefinitionName'] === 'string' || data['registrationDefinitionName'] instanceof String)) {
            throw new Error("Expected the field `registrationDefinitionName` to be a primitive type in the JSON string but got " + data['registrationDefinitionName']);
        }

        return true;
    }


}



/**
 * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
 * @member {Array.<module:model/Authorization>} authorizations
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['authorizations'] = undefined;

/**
 * Description of the registration definition.
 * @member {String} description
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['description'] = undefined;

/**
 * Id of the managedBy tenant.
 * @member {String} managedByTenantId
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['managedByTenantId'] = undefined;

/**
 * Name of the managedBy tenant.
 * @member {String} managedByTenantName
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['managedByTenantName'] = undefined;

/**
 * Id of the home tenant.
 * @member {String} manageeTenantId
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['manageeTenantId'] = undefined;

/**
 * Name of the home tenant.
 * @member {String} manageeTenantName
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['manageeTenantName'] = undefined;

/**
 * Current state of the registration definition.
 * @member {module:model/RegistrationAssignmentPropertiesRegistrationDefinitionProperties.ProvisioningStateEnum} provisioningState
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['provisioningState'] = undefined;

/**
 * Name of the registration definition.
 * @member {String} registrationDefinitionName
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties.prototype['registrationDefinitionName'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
RegistrationAssignmentPropertiesRegistrationDefinitionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating"
};



export default RegistrationAssignmentPropertiesRegistrationDefinitionProperties;

