# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization import Authorization
from openapi_server import util


class RegistrationAssignmentPropertiesRegistrationDefinitionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations: List[Authorization]=None, description: str=None, managed_by_tenant_id: str=None, managed_by_tenant_name: str=None, managee_tenant_id: str=None, managee_tenant_name: str=None, provisioning_state: str=None, registration_definition_name: str=None):
        """RegistrationAssignmentPropertiesRegistrationDefinitionProperties - a model defined in OpenAPI

        :param authorizations: The authorizations of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param description: The description of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param managed_by_tenant_id: The managed_by_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param managed_by_tenant_name: The managed_by_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param managee_tenant_id: The managee_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param managee_tenant_name: The managee_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param provisioning_state: The provisioning_state of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :param registration_definition_name: The registration_definition_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        """
        self.openapi_types = {
            'authorizations': List[Authorization],
            'description': str,
            'managed_by_tenant_id': str,
            'managed_by_tenant_name': str,
            'managee_tenant_id': str,
            'managee_tenant_name': str,
            'provisioning_state': str,
            'registration_definition_name': str
        }

        self.attribute_map = {
            'authorizations': 'authorizations',
            'description': 'description',
            'managed_by_tenant_id': 'managedByTenantId',
            'managed_by_tenant_name': 'managedByTenantName',
            'managee_tenant_id': 'manageeTenantId',
            'managee_tenant_name': 'manageeTenantName',
            'provisioning_state': 'provisioningState',
            'registration_definition_name': 'registrationDefinitionName'
        }

        self._authorizations = authorizations
        self._description = description
        self._managed_by_tenant_id = managed_by_tenant_id
        self._managed_by_tenant_name = managed_by_tenant_name
        self._managee_tenant_id = managee_tenant_id
        self._managee_tenant_name = managee_tenant_name
        self._provisioning_state = provisioning_state
        self._registration_definition_name = registration_definition_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationAssignmentPropertiesRegistrationDefinitionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationAssignmentProperties_registrationDefinition_properties of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations(self):
        """Gets the authorizations of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.

        :return: The authorizations of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: List[Authorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.

        :param authorizations: The authorizations of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type authorizations: List[Authorization]
        """

        self._authorizations = authorizations

    @property
    def description(self):
        """Gets the description of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Description of the registration definition.

        :return: The description of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Description of the registration definition.

        :param description: The description of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type description: str
        """

        self._description = description

    @property
    def managed_by_tenant_id(self):
        """Gets the managed_by_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Id of the managedBy tenant.

        :return: The managed_by_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._managed_by_tenant_id

    @managed_by_tenant_id.setter
    def managed_by_tenant_id(self, managed_by_tenant_id):
        """Sets the managed_by_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Id of the managedBy tenant.

        :param managed_by_tenant_id: The managed_by_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type managed_by_tenant_id: str
        """

        self._managed_by_tenant_id = managed_by_tenant_id

    @property
    def managed_by_tenant_name(self):
        """Gets the managed_by_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the managedBy tenant.

        :return: The managed_by_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._managed_by_tenant_name

    @managed_by_tenant_name.setter
    def managed_by_tenant_name(self, managed_by_tenant_name):
        """Sets the managed_by_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the managedBy tenant.

        :param managed_by_tenant_name: The managed_by_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type managed_by_tenant_name: str
        """

        self._managed_by_tenant_name = managed_by_tenant_name

    @property
    def managee_tenant_id(self):
        """Gets the managee_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Id of the home tenant.

        :return: The managee_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._managee_tenant_id

    @managee_tenant_id.setter
    def managee_tenant_id(self, managee_tenant_id):
        """Sets the managee_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Id of the home tenant.

        :param managee_tenant_id: The managee_tenant_id of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type managee_tenant_id: str
        """

        self._managee_tenant_id = managee_tenant_id

    @property
    def managee_tenant_name(self):
        """Gets the managee_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the home tenant.

        :return: The managee_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._managee_tenant_name

    @managee_tenant_name.setter
    def managee_tenant_name(self, managee_tenant_name):
        """Sets the managee_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the home tenant.

        :param managee_tenant_name: The managee_tenant_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type managee_tenant_name: str
        """

        self._managee_tenant_name = managee_tenant_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Current state of the registration definition.

        :return: The provisioning_state of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Current state of the registration definition.

        :param provisioning_state: The provisioning_state of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["NotSpecified", "Accepted", "Running", "Ready", "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded", "Updating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def registration_definition_name(self):
        """Gets the registration_definition_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the registration definition.

        :return: The registration_definition_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :rtype: str
        """
        return self._registration_definition_name

    @registration_definition_name.setter
    def registration_definition_name(self, registration_definition_name):
        """Sets the registration_definition_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.

        Name of the registration definition.

        :param registration_definition_name: The registration_definition_name of this RegistrationAssignmentPropertiesRegistrationDefinitionProperties.
        :type registration_definition_name: str
        """

        self._registration_definition_name = registration_definition_name
