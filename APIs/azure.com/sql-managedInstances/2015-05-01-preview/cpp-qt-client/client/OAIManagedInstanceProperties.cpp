/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceProperties::OAIManagedInstanceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceProperties::OAIManagedInstanceProperties() {
    this->initializeModel();
}

OAIManagedInstanceProperties::~OAIManagedInstanceProperties() {}

void OAIManagedInstanceProperties::initializeModel() {

    m_administrator_login_isSet = false;
    m_administrator_login_isValid = false;

    m_administrator_login_password_isSet = false;
    m_administrator_login_password_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_dns_zone_isSet = false;
    m_dns_zone_isValid = false;

    m_dns_zone_partner_isSet = false;
    m_dns_zone_partner_isValid = false;

    m_fully_qualified_domain_name_isSet = false;
    m_fully_qualified_domain_name_isValid = false;

    m_instance_pool_id_isSet = false;
    m_instance_pool_id_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_managed_instance_create_mode_isSet = false;
    m_managed_instance_create_mode_isValid = false;

    m_proxy_override_isSet = false;
    m_proxy_override_isValid = false;

    m_public_data_endpoint_enabled_isSet = false;
    m_public_data_endpoint_enabled_isValid = false;

    m_restore_point_in_time_isSet = false;
    m_restore_point_in_time_isValid = false;

    m_source_managed_instance_id_isSet = false;
    m_source_managed_instance_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_size_in_gb_isSet = false;
    m_storage_size_in_gb_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;

    m_v_cores_isSet = false;
    m_v_cores_isValid = false;
}

void OAIManagedInstanceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceProperties::fromJsonObject(QJsonObject json) {

    m_administrator_login_isValid = ::OpenAPI::fromJsonValue(m_administrator_login, json[QString("administratorLogin")]);
    m_administrator_login_isSet = !json[QString("administratorLogin")].isNull() && m_administrator_login_isValid;

    m_administrator_login_password_isValid = ::OpenAPI::fromJsonValue(m_administrator_login_password, json[QString("administratorLoginPassword")]);
    m_administrator_login_password_isSet = !json[QString("administratorLoginPassword")].isNull() && m_administrator_login_password_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_dns_zone_isValid = ::OpenAPI::fromJsonValue(m_dns_zone, json[QString("dnsZone")]);
    m_dns_zone_isSet = !json[QString("dnsZone")].isNull() && m_dns_zone_isValid;

    m_dns_zone_partner_isValid = ::OpenAPI::fromJsonValue(m_dns_zone_partner, json[QString("dnsZonePartner")]);
    m_dns_zone_partner_isSet = !json[QString("dnsZonePartner")].isNull() && m_dns_zone_partner_isValid;

    m_fully_qualified_domain_name_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_domain_name, json[QString("fullyQualifiedDomainName")]);
    m_fully_qualified_domain_name_isSet = !json[QString("fullyQualifiedDomainName")].isNull() && m_fully_qualified_domain_name_isValid;

    m_instance_pool_id_isValid = ::OpenAPI::fromJsonValue(m_instance_pool_id, json[QString("instancePoolId")]);
    m_instance_pool_id_isSet = !json[QString("instancePoolId")].isNull() && m_instance_pool_id_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_managed_instance_create_mode_isValid = ::OpenAPI::fromJsonValue(m_managed_instance_create_mode, json[QString("managedInstanceCreateMode")]);
    m_managed_instance_create_mode_isSet = !json[QString("managedInstanceCreateMode")].isNull() && m_managed_instance_create_mode_isValid;

    m_proxy_override_isValid = ::OpenAPI::fromJsonValue(m_proxy_override, json[QString("proxyOverride")]);
    m_proxy_override_isSet = !json[QString("proxyOverride")].isNull() && m_proxy_override_isValid;

    m_public_data_endpoint_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_data_endpoint_enabled, json[QString("publicDataEndpointEnabled")]);
    m_public_data_endpoint_enabled_isSet = !json[QString("publicDataEndpointEnabled")].isNull() && m_public_data_endpoint_enabled_isValid;

    m_restore_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_restore_point_in_time, json[QString("restorePointInTime")]);
    m_restore_point_in_time_isSet = !json[QString("restorePointInTime")].isNull() && m_restore_point_in_time_isValid;

    m_source_managed_instance_id_isValid = ::OpenAPI::fromJsonValue(m_source_managed_instance_id, json[QString("sourceManagedInstanceId")]);
    m_source_managed_instance_id_isSet = !json[QString("sourceManagedInstanceId")].isNull() && m_source_managed_instance_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_storage_size_in_gb, json[QString("storageSizeInGB")]);
    m_storage_size_in_gb_isSet = !json[QString("storageSizeInGB")].isNull() && m_storage_size_in_gb_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;

    m_v_cores_isValid = ::OpenAPI::fromJsonValue(m_v_cores, json[QString("vCores")]);
    m_v_cores_isSet = !json[QString("vCores")].isNull() && m_v_cores_isValid;
}

QString OAIManagedInstanceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_login_isSet) {
        obj.insert(QString("administratorLogin"), ::OpenAPI::toJsonValue(m_administrator_login));
    }
    if (m_administrator_login_password_isSet) {
        obj.insert(QString("administratorLoginPassword"), ::OpenAPI::toJsonValue(m_administrator_login_password));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_dns_zone_isSet) {
        obj.insert(QString("dnsZone"), ::OpenAPI::toJsonValue(m_dns_zone));
    }
    if (m_dns_zone_partner_isSet) {
        obj.insert(QString("dnsZonePartner"), ::OpenAPI::toJsonValue(m_dns_zone_partner));
    }
    if (m_fully_qualified_domain_name_isSet) {
        obj.insert(QString("fullyQualifiedDomainName"), ::OpenAPI::toJsonValue(m_fully_qualified_domain_name));
    }
    if (m_instance_pool_id_isSet) {
        obj.insert(QString("instancePoolId"), ::OpenAPI::toJsonValue(m_instance_pool_id));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_managed_instance_create_mode_isSet) {
        obj.insert(QString("managedInstanceCreateMode"), ::OpenAPI::toJsonValue(m_managed_instance_create_mode));
    }
    if (m_proxy_override_isSet) {
        obj.insert(QString("proxyOverride"), ::OpenAPI::toJsonValue(m_proxy_override));
    }
    if (m_public_data_endpoint_enabled_isSet) {
        obj.insert(QString("publicDataEndpointEnabled"), ::OpenAPI::toJsonValue(m_public_data_endpoint_enabled));
    }
    if (m_restore_point_in_time_isSet) {
        obj.insert(QString("restorePointInTime"), ::OpenAPI::toJsonValue(m_restore_point_in_time));
    }
    if (m_source_managed_instance_id_isSet) {
        obj.insert(QString("sourceManagedInstanceId"), ::OpenAPI::toJsonValue(m_source_managed_instance_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_size_in_gb_isSet) {
        obj.insert(QString("storageSizeInGB"), ::OpenAPI::toJsonValue(m_storage_size_in_gb));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    if (m_v_cores_isSet) {
        obj.insert(QString("vCores"), ::OpenAPI::toJsonValue(m_v_cores));
    }
    return obj;
}

QString OAIManagedInstanceProperties::getAdministratorLogin() const {
    return m_administrator_login;
}
void OAIManagedInstanceProperties::setAdministratorLogin(const QString &administrator_login) {
    m_administrator_login = administrator_login;
    m_administrator_login_isSet = true;
}

bool OAIManagedInstanceProperties::is_administrator_login_Set() const{
    return m_administrator_login_isSet;
}

bool OAIManagedInstanceProperties::is_administrator_login_Valid() const{
    return m_administrator_login_isValid;
}

QString OAIManagedInstanceProperties::getAdministratorLoginPassword() const {
    return m_administrator_login_password;
}
void OAIManagedInstanceProperties::setAdministratorLoginPassword(const QString &administrator_login_password) {
    m_administrator_login_password = administrator_login_password;
    m_administrator_login_password_isSet = true;
}

bool OAIManagedInstanceProperties::is_administrator_login_password_Set() const{
    return m_administrator_login_password_isSet;
}

bool OAIManagedInstanceProperties::is_administrator_login_password_Valid() const{
    return m_administrator_login_password_isValid;
}

QString OAIManagedInstanceProperties::getCollation() const {
    return m_collation;
}
void OAIManagedInstanceProperties::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIManagedInstanceProperties::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIManagedInstanceProperties::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAIManagedInstanceProperties::getDnsZone() const {
    return m_dns_zone;
}
void OAIManagedInstanceProperties::setDnsZone(const QString &dns_zone) {
    m_dns_zone = dns_zone;
    m_dns_zone_isSet = true;
}

bool OAIManagedInstanceProperties::is_dns_zone_Set() const{
    return m_dns_zone_isSet;
}

bool OAIManagedInstanceProperties::is_dns_zone_Valid() const{
    return m_dns_zone_isValid;
}

QString OAIManagedInstanceProperties::getDnsZonePartner() const {
    return m_dns_zone_partner;
}
void OAIManagedInstanceProperties::setDnsZonePartner(const QString &dns_zone_partner) {
    m_dns_zone_partner = dns_zone_partner;
    m_dns_zone_partner_isSet = true;
}

bool OAIManagedInstanceProperties::is_dns_zone_partner_Set() const{
    return m_dns_zone_partner_isSet;
}

bool OAIManagedInstanceProperties::is_dns_zone_partner_Valid() const{
    return m_dns_zone_partner_isValid;
}

QString OAIManagedInstanceProperties::getFullyQualifiedDomainName() const {
    return m_fully_qualified_domain_name;
}
void OAIManagedInstanceProperties::setFullyQualifiedDomainName(const QString &fully_qualified_domain_name) {
    m_fully_qualified_domain_name = fully_qualified_domain_name;
    m_fully_qualified_domain_name_isSet = true;
}

bool OAIManagedInstanceProperties::is_fully_qualified_domain_name_Set() const{
    return m_fully_qualified_domain_name_isSet;
}

bool OAIManagedInstanceProperties::is_fully_qualified_domain_name_Valid() const{
    return m_fully_qualified_domain_name_isValid;
}

QString OAIManagedInstanceProperties::getInstancePoolId() const {
    return m_instance_pool_id;
}
void OAIManagedInstanceProperties::setInstancePoolId(const QString &instance_pool_id) {
    m_instance_pool_id = instance_pool_id;
    m_instance_pool_id_isSet = true;
}

bool OAIManagedInstanceProperties::is_instance_pool_id_Set() const{
    return m_instance_pool_id_isSet;
}

bool OAIManagedInstanceProperties::is_instance_pool_id_Valid() const{
    return m_instance_pool_id_isValid;
}

QString OAIManagedInstanceProperties::getLicenseType() const {
    return m_license_type;
}
void OAIManagedInstanceProperties::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIManagedInstanceProperties::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIManagedInstanceProperties::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIManagedInstanceProperties::getManagedInstanceCreateMode() const {
    return m_managed_instance_create_mode;
}
void OAIManagedInstanceProperties::setManagedInstanceCreateMode(const QString &managed_instance_create_mode) {
    m_managed_instance_create_mode = managed_instance_create_mode;
    m_managed_instance_create_mode_isSet = true;
}

bool OAIManagedInstanceProperties::is_managed_instance_create_mode_Set() const{
    return m_managed_instance_create_mode_isSet;
}

bool OAIManagedInstanceProperties::is_managed_instance_create_mode_Valid() const{
    return m_managed_instance_create_mode_isValid;
}

QString OAIManagedInstanceProperties::getProxyOverride() const {
    return m_proxy_override;
}
void OAIManagedInstanceProperties::setProxyOverride(const QString &proxy_override) {
    m_proxy_override = proxy_override;
    m_proxy_override_isSet = true;
}

bool OAIManagedInstanceProperties::is_proxy_override_Set() const{
    return m_proxy_override_isSet;
}

bool OAIManagedInstanceProperties::is_proxy_override_Valid() const{
    return m_proxy_override_isValid;
}

bool OAIManagedInstanceProperties::isPublicDataEndpointEnabled() const {
    return m_public_data_endpoint_enabled;
}
void OAIManagedInstanceProperties::setPublicDataEndpointEnabled(const bool &public_data_endpoint_enabled) {
    m_public_data_endpoint_enabled = public_data_endpoint_enabled;
    m_public_data_endpoint_enabled_isSet = true;
}

bool OAIManagedInstanceProperties::is_public_data_endpoint_enabled_Set() const{
    return m_public_data_endpoint_enabled_isSet;
}

bool OAIManagedInstanceProperties::is_public_data_endpoint_enabled_Valid() const{
    return m_public_data_endpoint_enabled_isValid;
}

QDateTime OAIManagedInstanceProperties::getRestorePointInTime() const {
    return m_restore_point_in_time;
}
void OAIManagedInstanceProperties::setRestorePointInTime(const QDateTime &restore_point_in_time) {
    m_restore_point_in_time = restore_point_in_time;
    m_restore_point_in_time_isSet = true;
}

bool OAIManagedInstanceProperties::is_restore_point_in_time_Set() const{
    return m_restore_point_in_time_isSet;
}

bool OAIManagedInstanceProperties::is_restore_point_in_time_Valid() const{
    return m_restore_point_in_time_isValid;
}

QString OAIManagedInstanceProperties::getSourceManagedInstanceId() const {
    return m_source_managed_instance_id;
}
void OAIManagedInstanceProperties::setSourceManagedInstanceId(const QString &source_managed_instance_id) {
    m_source_managed_instance_id = source_managed_instance_id;
    m_source_managed_instance_id_isSet = true;
}

bool OAIManagedInstanceProperties::is_source_managed_instance_id_Set() const{
    return m_source_managed_instance_id_isSet;
}

bool OAIManagedInstanceProperties::is_source_managed_instance_id_Valid() const{
    return m_source_managed_instance_id_isValid;
}

QString OAIManagedInstanceProperties::getState() const {
    return m_state;
}
void OAIManagedInstanceProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManagedInstanceProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManagedInstanceProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIManagedInstanceProperties::getStorageSizeInGb() const {
    return m_storage_size_in_gb;
}
void OAIManagedInstanceProperties::setStorageSizeInGb(const qint32 &storage_size_in_gb) {
    m_storage_size_in_gb = storage_size_in_gb;
    m_storage_size_in_gb_isSet = true;
}

bool OAIManagedInstanceProperties::is_storage_size_in_gb_Set() const{
    return m_storage_size_in_gb_isSet;
}

bool OAIManagedInstanceProperties::is_storage_size_in_gb_Valid() const{
    return m_storage_size_in_gb_isValid;
}

QString OAIManagedInstanceProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIManagedInstanceProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIManagedInstanceProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIManagedInstanceProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIManagedInstanceProperties::getTimezoneId() const {
    return m_timezone_id;
}
void OAIManagedInstanceProperties::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAIManagedInstanceProperties::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAIManagedInstanceProperties::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

qint32 OAIManagedInstanceProperties::getVCores() const {
    return m_v_cores;
}
void OAIManagedInstanceProperties::setVCores(const qint32 &v_cores) {
    m_v_cores = v_cores;
    m_v_cores_isSet = true;
}

bool OAIManagedInstanceProperties::is_v_cores_Set() const{
    return m_v_cores_isSet;
}

bool OAIManagedInstanceProperties::is_v_cores_Valid() const{
    return m_v_cores_isValid;
}

bool OAIManagedInstanceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_login_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_zone_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_instance_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_data_endpoint_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_managed_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_cores_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
