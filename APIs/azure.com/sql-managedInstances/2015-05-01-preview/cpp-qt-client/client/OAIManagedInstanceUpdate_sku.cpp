/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceUpdate_sku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceUpdate_sku::OAIManagedInstanceUpdate_sku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceUpdate_sku::OAIManagedInstanceUpdate_sku() {
    this->initializeModel();
}

OAIManagedInstanceUpdate_sku::~OAIManagedInstanceUpdate_sku() {}

void OAIManagedInstanceUpdate_sku::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIManagedInstanceUpdate_sku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceUpdate_sku::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIManagedInstanceUpdate_sku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceUpdate_sku::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

qint32 OAIManagedInstanceUpdate_sku::getCapacity() const {
    return m_capacity;
}
void OAIManagedInstanceUpdate_sku::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIManagedInstanceUpdate_sku::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIManagedInstanceUpdate_sku::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIManagedInstanceUpdate_sku::getFamily() const {
    return m_family;
}
void OAIManagedInstanceUpdate_sku::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIManagedInstanceUpdate_sku::is_family_Set() const{
    return m_family_isSet;
}

bool OAIManagedInstanceUpdate_sku::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIManagedInstanceUpdate_sku::getName() const {
    return m_name;
}
void OAIManagedInstanceUpdate_sku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedInstanceUpdate_sku::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedInstanceUpdate_sku::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedInstanceUpdate_sku::getSize() const {
    return m_size;
}
void OAIManagedInstanceUpdate_sku::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIManagedInstanceUpdate_sku::is_size_Set() const{
    return m_size_isSet;
}

bool OAIManagedInstanceUpdate_sku::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIManagedInstanceUpdate_sku::getTier() const {
    return m_tier;
}
void OAIManagedInstanceUpdate_sku::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIManagedInstanceUpdate_sku::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIManagedInstanceUpdate_sku::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIManagedInstanceUpdate_sku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceUpdate_sku::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
