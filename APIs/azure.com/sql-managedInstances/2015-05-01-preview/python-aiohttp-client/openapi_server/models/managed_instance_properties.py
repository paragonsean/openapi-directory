# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedInstanceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login: str=None, administrator_login_password: str=None, collation: str=None, dns_zone: str=None, dns_zone_partner: str=None, fully_qualified_domain_name: str=None, instance_pool_id: str=None, license_type: str=None, managed_instance_create_mode: str=None, proxy_override: str=None, public_data_endpoint_enabled: bool=None, restore_point_in_time: datetime=None, source_managed_instance_id: str=None, state: str=None, storage_size_in_gb: int=None, subnet_id: str=None, timezone_id: str=None, v_cores: int=None):
        """ManagedInstanceProperties - a model defined in OpenAPI

        :param administrator_login: The administrator_login of this ManagedInstanceProperties.
        :param administrator_login_password: The administrator_login_password of this ManagedInstanceProperties.
        :param collation: The collation of this ManagedInstanceProperties.
        :param dns_zone: The dns_zone of this ManagedInstanceProperties.
        :param dns_zone_partner: The dns_zone_partner of this ManagedInstanceProperties.
        :param fully_qualified_domain_name: The fully_qualified_domain_name of this ManagedInstanceProperties.
        :param instance_pool_id: The instance_pool_id of this ManagedInstanceProperties.
        :param license_type: The license_type of this ManagedInstanceProperties.
        :param managed_instance_create_mode: The managed_instance_create_mode of this ManagedInstanceProperties.
        :param proxy_override: The proxy_override of this ManagedInstanceProperties.
        :param public_data_endpoint_enabled: The public_data_endpoint_enabled of this ManagedInstanceProperties.
        :param restore_point_in_time: The restore_point_in_time of this ManagedInstanceProperties.
        :param source_managed_instance_id: The source_managed_instance_id of this ManagedInstanceProperties.
        :param state: The state of this ManagedInstanceProperties.
        :param storage_size_in_gb: The storage_size_in_gb of this ManagedInstanceProperties.
        :param subnet_id: The subnet_id of this ManagedInstanceProperties.
        :param timezone_id: The timezone_id of this ManagedInstanceProperties.
        :param v_cores: The v_cores of this ManagedInstanceProperties.
        """
        self.openapi_types = {
            'administrator_login': str,
            'administrator_login_password': str,
            'collation': str,
            'dns_zone': str,
            'dns_zone_partner': str,
            'fully_qualified_domain_name': str,
            'instance_pool_id': str,
            'license_type': str,
            'managed_instance_create_mode': str,
            'proxy_override': str,
            'public_data_endpoint_enabled': bool,
            'restore_point_in_time': datetime,
            'source_managed_instance_id': str,
            'state': str,
            'storage_size_in_gb': int,
            'subnet_id': str,
            'timezone_id': str,
            'v_cores': int
        }

        self.attribute_map = {
            'administrator_login': 'administratorLogin',
            'administrator_login_password': 'administratorLoginPassword',
            'collation': 'collation',
            'dns_zone': 'dnsZone',
            'dns_zone_partner': 'dnsZonePartner',
            'fully_qualified_domain_name': 'fullyQualifiedDomainName',
            'instance_pool_id': 'instancePoolId',
            'license_type': 'licenseType',
            'managed_instance_create_mode': 'managedInstanceCreateMode',
            'proxy_override': 'proxyOverride',
            'public_data_endpoint_enabled': 'publicDataEndpointEnabled',
            'restore_point_in_time': 'restorePointInTime',
            'source_managed_instance_id': 'sourceManagedInstanceId',
            'state': 'state',
            'storage_size_in_gb': 'storageSizeInGB',
            'subnet_id': 'subnetId',
            'timezone_id': 'timezoneId',
            'v_cores': 'vCores'
        }

        self._administrator_login = administrator_login
        self._administrator_login_password = administrator_login_password
        self._collation = collation
        self._dns_zone = dns_zone
        self._dns_zone_partner = dns_zone_partner
        self._fully_qualified_domain_name = fully_qualified_domain_name
        self._instance_pool_id = instance_pool_id
        self._license_type = license_type
        self._managed_instance_create_mode = managed_instance_create_mode
        self._proxy_override = proxy_override
        self._public_data_endpoint_enabled = public_data_endpoint_enabled
        self._restore_point_in_time = restore_point_in_time
        self._source_managed_instance_id = source_managed_instance_id
        self._state = state
        self._storage_size_in_gb = storage_size_in_gb
        self._subnet_id = subnet_id
        self._timezone_id = timezone_id
        self._v_cores = v_cores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedInstanceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedInstanceProperties of this ManagedInstanceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login(self):
        """Gets the administrator_login of this ManagedInstanceProperties.

        Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).

        :return: The administrator_login of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._administrator_login

    @administrator_login.setter
    def administrator_login(self, administrator_login):
        """Sets the administrator_login of this ManagedInstanceProperties.

        Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).

        :param administrator_login: The administrator_login of this ManagedInstanceProperties.
        :type administrator_login: str
        """

        self._administrator_login = administrator_login

    @property
    def administrator_login_password(self):
        """Gets the administrator_login_password of this ManagedInstanceProperties.

        The administrator login password (required for managed instance creation).

        :return: The administrator_login_password of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._administrator_login_password

    @administrator_login_password.setter
    def administrator_login_password(self, administrator_login_password):
        """Sets the administrator_login_password of this ManagedInstanceProperties.

        The administrator login password (required for managed instance creation).

        :param administrator_login_password: The administrator_login_password of this ManagedInstanceProperties.
        :type administrator_login_password: str
        """

        self._administrator_login_password = administrator_login_password

    @property
    def collation(self):
        """Gets the collation of this ManagedInstanceProperties.

        Collation of the managed instance.

        :return: The collation of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this ManagedInstanceProperties.

        Collation of the managed instance.

        :param collation: The collation of this ManagedInstanceProperties.
        :type collation: str
        """

        self._collation = collation

    @property
    def dns_zone(self):
        """Gets the dns_zone of this ManagedInstanceProperties.

        The Dns Zone that the managed instance is in.

        :return: The dns_zone of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._dns_zone

    @dns_zone.setter
    def dns_zone(self, dns_zone):
        """Sets the dns_zone of this ManagedInstanceProperties.

        The Dns Zone that the managed instance is in.

        :param dns_zone: The dns_zone of this ManagedInstanceProperties.
        :type dns_zone: str
        """

        self._dns_zone = dns_zone

    @property
    def dns_zone_partner(self):
        """Gets the dns_zone_partner of this ManagedInstanceProperties.

        The resource id of another managed instance whose DNS zone this managed instance will share after creation.

        :return: The dns_zone_partner of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._dns_zone_partner

    @dns_zone_partner.setter
    def dns_zone_partner(self, dns_zone_partner):
        """Sets the dns_zone_partner of this ManagedInstanceProperties.

        The resource id of another managed instance whose DNS zone this managed instance will share after creation.

        :param dns_zone_partner: The dns_zone_partner of this ManagedInstanceProperties.
        :type dns_zone_partner: str
        """

        self._dns_zone_partner = dns_zone_partner

    @property
    def fully_qualified_domain_name(self):
        """Gets the fully_qualified_domain_name of this ManagedInstanceProperties.

        The fully qualified domain name of the managed instance.

        :return: The fully_qualified_domain_name of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._fully_qualified_domain_name

    @fully_qualified_domain_name.setter
    def fully_qualified_domain_name(self, fully_qualified_domain_name):
        """Sets the fully_qualified_domain_name of this ManagedInstanceProperties.

        The fully qualified domain name of the managed instance.

        :param fully_qualified_domain_name: The fully_qualified_domain_name of this ManagedInstanceProperties.
        :type fully_qualified_domain_name: str
        """

        self._fully_qualified_domain_name = fully_qualified_domain_name

    @property
    def instance_pool_id(self):
        """Gets the instance_pool_id of this ManagedInstanceProperties.

        The Id of the instance pool this managed server belongs to.

        :return: The instance_pool_id of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._instance_pool_id

    @instance_pool_id.setter
    def instance_pool_id(self, instance_pool_id):
        """Sets the instance_pool_id of this ManagedInstanceProperties.

        The Id of the instance pool this managed server belongs to.

        :param instance_pool_id: The instance_pool_id of this ManagedInstanceProperties.
        :type instance_pool_id: str
        """

        self._instance_pool_id = instance_pool_id

    @property
    def license_type(self):
        """Gets the license_type of this ManagedInstanceProperties.

        The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).

        :return: The license_type of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ManagedInstanceProperties.

        The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).

        :param license_type: The license_type of this ManagedInstanceProperties.
        :type license_type: str
        """
        allowed_values = ["LicenseIncluded", "BasePrice"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def managed_instance_create_mode(self):
        """Gets the managed_instance_create_mode of this ManagedInstanceProperties.

        Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.

        :return: The managed_instance_create_mode of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._managed_instance_create_mode

    @managed_instance_create_mode.setter
    def managed_instance_create_mode(self, managed_instance_create_mode):
        """Sets the managed_instance_create_mode of this ManagedInstanceProperties.

        Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.

        :param managed_instance_create_mode: The managed_instance_create_mode of this ManagedInstanceProperties.
        :type managed_instance_create_mode: str
        """
        allowed_values = ["Default", "PointInTimeRestore"]  # noqa: E501
        if managed_instance_create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `managed_instance_create_mode` ({0}), must be one of {1}"
                .format(managed_instance_create_mode, allowed_values)
            )

        self._managed_instance_create_mode = managed_instance_create_mode

    @property
    def proxy_override(self):
        """Gets the proxy_override of this ManagedInstanceProperties.

        Connection type used for connecting to the instance.

        :return: The proxy_override of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._proxy_override

    @proxy_override.setter
    def proxy_override(self, proxy_override):
        """Sets the proxy_override of this ManagedInstanceProperties.

        Connection type used for connecting to the instance.

        :param proxy_override: The proxy_override of this ManagedInstanceProperties.
        :type proxy_override: str
        """
        allowed_values = ["Proxy", "Redirect", "Default"]  # noqa: E501
        if proxy_override not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_override` ({0}), must be one of {1}"
                .format(proxy_override, allowed_values)
            )

        self._proxy_override = proxy_override

    @property
    def public_data_endpoint_enabled(self):
        """Gets the public_data_endpoint_enabled of this ManagedInstanceProperties.

        Whether or not the public data endpoint is enabled.

        :return: The public_data_endpoint_enabled of this ManagedInstanceProperties.
        :rtype: bool
        """
        return self._public_data_endpoint_enabled

    @public_data_endpoint_enabled.setter
    def public_data_endpoint_enabled(self, public_data_endpoint_enabled):
        """Sets the public_data_endpoint_enabled of this ManagedInstanceProperties.

        Whether or not the public data endpoint is enabled.

        :param public_data_endpoint_enabled: The public_data_endpoint_enabled of this ManagedInstanceProperties.
        :type public_data_endpoint_enabled: bool
        """

        self._public_data_endpoint_enabled = public_data_endpoint_enabled

    @property
    def restore_point_in_time(self):
        """Gets the restore_point_in_time of this ManagedInstanceProperties.

        Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.

        :return: The restore_point_in_time of this ManagedInstanceProperties.
        :rtype: datetime
        """
        return self._restore_point_in_time

    @restore_point_in_time.setter
    def restore_point_in_time(self, restore_point_in_time):
        """Sets the restore_point_in_time of this ManagedInstanceProperties.

        Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.

        :param restore_point_in_time: The restore_point_in_time of this ManagedInstanceProperties.
        :type restore_point_in_time: datetime
        """

        self._restore_point_in_time = restore_point_in_time

    @property
    def source_managed_instance_id(self):
        """Gets the source_managed_instance_id of this ManagedInstanceProperties.

        The resource identifier of the source managed instance associated with create operation of this instance.

        :return: The source_managed_instance_id of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._source_managed_instance_id

    @source_managed_instance_id.setter
    def source_managed_instance_id(self, source_managed_instance_id):
        """Sets the source_managed_instance_id of this ManagedInstanceProperties.

        The resource identifier of the source managed instance associated with create operation of this instance.

        :param source_managed_instance_id: The source_managed_instance_id of this ManagedInstanceProperties.
        :type source_managed_instance_id: str
        """

        self._source_managed_instance_id = source_managed_instance_id

    @property
    def state(self):
        """Gets the state of this ManagedInstanceProperties.

        The state of the managed instance.

        :return: The state of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManagedInstanceProperties.

        The state of the managed instance.

        :param state: The state of this ManagedInstanceProperties.
        :type state: str
        """

        self._state = state

    @property
    def storage_size_in_gb(self):
        """Gets the storage_size_in_gb of this ManagedInstanceProperties.

        Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.

        :return: The storage_size_in_gb of this ManagedInstanceProperties.
        :rtype: int
        """
        return self._storage_size_in_gb

    @storage_size_in_gb.setter
    def storage_size_in_gb(self, storage_size_in_gb):
        """Sets the storage_size_in_gb of this ManagedInstanceProperties.

        Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.

        :param storage_size_in_gb: The storage_size_in_gb of this ManagedInstanceProperties.
        :type storage_size_in_gb: int
        """

        self._storage_size_in_gb = storage_size_in_gb

    @property
    def subnet_id(self):
        """Gets the subnet_id of this ManagedInstanceProperties.

        Subnet resource ID for the managed instance.

        :return: The subnet_id of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this ManagedInstanceProperties.

        Subnet resource ID for the managed instance.

        :param subnet_id: The subnet_id of this ManagedInstanceProperties.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def timezone_id(self):
        """Gets the timezone_id of this ManagedInstanceProperties.

        Id of the timezone. Allowed values are timezones supported by Windows.  Windows keeps details on supported timezones, including the id, in registry under  KEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.  You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.  List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.  An example of valid timezone id is \"Pacific Standard Time\" or \"W. Europe Standard Time\".

        :return: The timezone_id of this ManagedInstanceProperties.
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this ManagedInstanceProperties.

        Id of the timezone. Allowed values are timezones supported by Windows.  Windows keeps details on supported timezones, including the id, in registry under  KEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.  You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.  List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.  An example of valid timezone id is \"Pacific Standard Time\" or \"W. Europe Standard Time\".

        :param timezone_id: The timezone_id of this ManagedInstanceProperties.
        :type timezone_id: str
        """

        self._timezone_id = timezone_id

    @property
    def v_cores(self):
        """Gets the v_cores of this ManagedInstanceProperties.

        The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.

        :return: The v_cores of this ManagedInstanceProperties.
        :rtype: int
        """
        return self._v_cores

    @v_cores.setter
    def v_cores(self, v_cores):
        """Sets the v_cores of this ManagedInstanceProperties.

        The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.

        :param v_cores: The v_cores of this ManagedInstanceProperties.
        :type v_cores: int
        """

        self._v_cores = v_cores
