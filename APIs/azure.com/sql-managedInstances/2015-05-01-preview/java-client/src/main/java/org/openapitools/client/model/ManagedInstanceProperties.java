/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a managed instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:15.403974-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedInstanceProperties {
  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN = "administratorLogin";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN)
  private String administratorLogin;

  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD = "administratorLoginPassword";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD)
  private String administratorLoginPassword;

  public static final String SERIALIZED_NAME_COLLATION = "collation";
  @SerializedName(SERIALIZED_NAME_COLLATION)
  private String collation;

  public static final String SERIALIZED_NAME_DNS_ZONE = "dnsZone";
  @SerializedName(SERIALIZED_NAME_DNS_ZONE)
  private String dnsZone;

  public static final String SERIALIZED_NAME_DNS_ZONE_PARTNER = "dnsZonePartner";
  @SerializedName(SERIALIZED_NAME_DNS_ZONE_PARTNER)
  private String dnsZonePartner;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME = "fullyQualifiedDomainName";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME)
  private String fullyQualifiedDomainName;

  public static final String SERIALIZED_NAME_INSTANCE_POOL_ID = "instancePoolId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_POOL_ID)
  private String instancePoolId;

  /**
   * The license type. Possible values are &#39;LicenseIncluded&#39; (regular price inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted AHB price for bringing your own SQL licenses).
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    LICENSE_INCLUDED("LicenseIncluded"),
    
    BASE_PRICE("BasePrice");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String value) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseTypeEnum licenseType;

  /**
   * Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
   */
  @JsonAdapter(ManagedInstanceCreateModeEnum.Adapter.class)
  public enum ManagedInstanceCreateModeEnum {
    DEFAULT("Default"),
    
    POINT_IN_TIME_RESTORE("PointInTimeRestore");

    private String value;

    ManagedInstanceCreateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedInstanceCreateModeEnum fromValue(String value) {
      for (ManagedInstanceCreateModeEnum b : ManagedInstanceCreateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedInstanceCreateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedInstanceCreateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedInstanceCreateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedInstanceCreateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedInstanceCreateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_INSTANCE_CREATE_MODE = "managedInstanceCreateMode";
  @SerializedName(SERIALIZED_NAME_MANAGED_INSTANCE_CREATE_MODE)
  private ManagedInstanceCreateModeEnum managedInstanceCreateMode;

  /**
   * Connection type used for connecting to the instance.
   */
  @JsonAdapter(ProxyOverrideEnum.Adapter.class)
  public enum ProxyOverrideEnum {
    PROXY("Proxy"),
    
    REDIRECT("Redirect"),
    
    DEFAULT("Default");

    private String value;

    ProxyOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProxyOverrideEnum fromValue(String value) {
      for (ProxyOverrideEnum b : ProxyOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProxyOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProxyOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProxyOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProxyOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProxyOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROXY_OVERRIDE = "proxyOverride";
  @SerializedName(SERIALIZED_NAME_PROXY_OVERRIDE)
  private ProxyOverrideEnum proxyOverride;

  public static final String SERIALIZED_NAME_PUBLIC_DATA_ENDPOINT_ENABLED = "publicDataEndpointEnabled";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DATA_ENDPOINT_ENABLED)
  private Boolean publicDataEndpointEnabled;

  public static final String SERIALIZED_NAME_RESTORE_POINT_IN_TIME = "restorePointInTime";
  @SerializedName(SERIALIZED_NAME_RESTORE_POINT_IN_TIME)
  private OffsetDateTime restorePointInTime;

  public static final String SERIALIZED_NAME_SOURCE_MANAGED_INSTANCE_ID = "sourceManagedInstanceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_MANAGED_INSTANCE_ID)
  private String sourceManagedInstanceId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STORAGE_SIZE_IN_G_B = "storageSizeInGB";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE_IN_G_B)
  private Integer storageSizeInGB;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_TIMEZONE_ID = "timezoneId";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_ID)
  private String timezoneId;

  public static final String SERIALIZED_NAME_V_CORES = "vCores";
  @SerializedName(SERIALIZED_NAME_V_CORES)
  private Integer vCores;

  public ManagedInstanceProperties() {
  }

  public ManagedInstanceProperties(
     String dnsZone, 
     String fullyQualifiedDomainName, 
     String state
  ) {
    this();
    this.dnsZone = dnsZone;
    this.fullyQualifiedDomainName = fullyQualifiedDomainName;
    this.state = state;
  }

  public ManagedInstanceProperties administratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
    return this;
  }

  /**
   * Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
   * @return administratorLogin
   */
  @javax.annotation.Nullable
  public String getAdministratorLogin() {
    return administratorLogin;
  }

  public void setAdministratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
  }


  public ManagedInstanceProperties administratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
    return this;
  }

  /**
   * The administrator login password (required for managed instance creation).
   * @return administratorLoginPassword
   */
  @javax.annotation.Nullable
  public String getAdministratorLoginPassword() {
    return administratorLoginPassword;
  }

  public void setAdministratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
  }


  public ManagedInstanceProperties collation(String collation) {
    this.collation = collation;
    return this;
  }

  /**
   * Collation of the managed instance.
   * @return collation
   */
  @javax.annotation.Nullable
  public String getCollation() {
    return collation;
  }

  public void setCollation(String collation) {
    this.collation = collation;
  }


  /**
   * The Dns Zone that the managed instance is in.
   * @return dnsZone
   */
  @javax.annotation.Nullable
  public String getDnsZone() {
    return dnsZone;
  }



  public ManagedInstanceProperties dnsZonePartner(String dnsZonePartner) {
    this.dnsZonePartner = dnsZonePartner;
    return this;
  }

  /**
   * The resource id of another managed instance whose DNS zone this managed instance will share after creation.
   * @return dnsZonePartner
   */
  @javax.annotation.Nullable
  public String getDnsZonePartner() {
    return dnsZonePartner;
  }

  public void setDnsZonePartner(String dnsZonePartner) {
    this.dnsZonePartner = dnsZonePartner;
  }


  /**
   * The fully qualified domain name of the managed instance.
   * @return fullyQualifiedDomainName
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedDomainName() {
    return fullyQualifiedDomainName;
  }



  public ManagedInstanceProperties instancePoolId(String instancePoolId) {
    this.instancePoolId = instancePoolId;
    return this;
  }

  /**
   * The Id of the instance pool this managed server belongs to.
   * @return instancePoolId
   */
  @javax.annotation.Nullable
  public String getInstancePoolId() {
    return instancePoolId;
  }

  public void setInstancePoolId(String instancePoolId) {
    this.instancePoolId = instancePoolId;
  }


  public ManagedInstanceProperties licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * The license type. Possible values are &#39;LicenseIncluded&#39; (regular price inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted AHB price for bringing your own SQL licenses).
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  public ManagedInstanceProperties managedInstanceCreateMode(ManagedInstanceCreateModeEnum managedInstanceCreateMode) {
    this.managedInstanceCreateMode = managedInstanceCreateMode;
    return this;
  }

  /**
   * Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
   * @return managedInstanceCreateMode
   */
  @javax.annotation.Nullable
  public ManagedInstanceCreateModeEnum getManagedInstanceCreateMode() {
    return managedInstanceCreateMode;
  }

  public void setManagedInstanceCreateMode(ManagedInstanceCreateModeEnum managedInstanceCreateMode) {
    this.managedInstanceCreateMode = managedInstanceCreateMode;
  }


  public ManagedInstanceProperties proxyOverride(ProxyOverrideEnum proxyOverride) {
    this.proxyOverride = proxyOverride;
    return this;
  }

  /**
   * Connection type used for connecting to the instance.
   * @return proxyOverride
   */
  @javax.annotation.Nullable
  public ProxyOverrideEnum getProxyOverride() {
    return proxyOverride;
  }

  public void setProxyOverride(ProxyOverrideEnum proxyOverride) {
    this.proxyOverride = proxyOverride;
  }


  public ManagedInstanceProperties publicDataEndpointEnabled(Boolean publicDataEndpointEnabled) {
    this.publicDataEndpointEnabled = publicDataEndpointEnabled;
    return this;
  }

  /**
   * Whether or not the public data endpoint is enabled.
   * @return publicDataEndpointEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPublicDataEndpointEnabled() {
    return publicDataEndpointEnabled;
  }

  public void setPublicDataEndpointEnabled(Boolean publicDataEndpointEnabled) {
    this.publicDataEndpointEnabled = publicDataEndpointEnabled;
  }


  public ManagedInstanceProperties restorePointInTime(OffsetDateTime restorePointInTime) {
    this.restorePointInTime = restorePointInTime;
    return this;
  }

  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   * @return restorePointInTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestorePointInTime() {
    return restorePointInTime;
  }

  public void setRestorePointInTime(OffsetDateTime restorePointInTime) {
    this.restorePointInTime = restorePointInTime;
  }


  public ManagedInstanceProperties sourceManagedInstanceId(String sourceManagedInstanceId) {
    this.sourceManagedInstanceId = sourceManagedInstanceId;
    return this;
  }

  /**
   * The resource identifier of the source managed instance associated with create operation of this instance.
   * @return sourceManagedInstanceId
   */
  @javax.annotation.Nullable
  public String getSourceManagedInstanceId() {
    return sourceManagedInstanceId;
  }

  public void setSourceManagedInstanceId(String sourceManagedInstanceId) {
    this.sourceManagedInstanceId = sourceManagedInstanceId;
  }


  /**
   * The state of the managed instance.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  public ManagedInstanceProperties storageSizeInGB(Integer storageSizeInGB) {
    this.storageSizeInGB = storageSizeInGB;
    return this;
  }

  /**
   * Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.
   * @return storageSizeInGB
   */
  @javax.annotation.Nullable
  public Integer getStorageSizeInGB() {
    return storageSizeInGB;
  }

  public void setStorageSizeInGB(Integer storageSizeInGB) {
    this.storageSizeInGB = storageSizeInGB;
  }


  public ManagedInstanceProperties subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Subnet resource ID for the managed instance.
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public ManagedInstanceProperties timezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
    return this;
  }

  /**
   * Id of the timezone. Allowed values are timezones supported by Windows.  Windows keeps details on supported timezones, including the id, in registry under  KEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.  You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.  List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.  An example of valid timezone id is \&quot;Pacific Standard Time\&quot; or \&quot;W. Europe Standard Time\&quot;.
   * @return timezoneId
   */
  @javax.annotation.Nullable
  public String getTimezoneId() {
    return timezoneId;
  }

  public void setTimezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
  }


  public ManagedInstanceProperties vCores(Integer vCores) {
    this.vCores = vCores;
    return this;
  }

  /**
   * The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
   * @return vCores
   */
  @javax.annotation.Nullable
  public Integer getvCores() {
    return vCores;
  }

  public void setvCores(Integer vCores) {
    this.vCores = vCores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedInstanceProperties managedInstanceProperties = (ManagedInstanceProperties) o;
    return Objects.equals(this.administratorLogin, managedInstanceProperties.administratorLogin) &&
        Objects.equals(this.administratorLoginPassword, managedInstanceProperties.administratorLoginPassword) &&
        Objects.equals(this.collation, managedInstanceProperties.collation) &&
        Objects.equals(this.dnsZone, managedInstanceProperties.dnsZone) &&
        Objects.equals(this.dnsZonePartner, managedInstanceProperties.dnsZonePartner) &&
        Objects.equals(this.fullyQualifiedDomainName, managedInstanceProperties.fullyQualifiedDomainName) &&
        Objects.equals(this.instancePoolId, managedInstanceProperties.instancePoolId) &&
        Objects.equals(this.licenseType, managedInstanceProperties.licenseType) &&
        Objects.equals(this.managedInstanceCreateMode, managedInstanceProperties.managedInstanceCreateMode) &&
        Objects.equals(this.proxyOverride, managedInstanceProperties.proxyOverride) &&
        Objects.equals(this.publicDataEndpointEnabled, managedInstanceProperties.publicDataEndpointEnabled) &&
        Objects.equals(this.restorePointInTime, managedInstanceProperties.restorePointInTime) &&
        Objects.equals(this.sourceManagedInstanceId, managedInstanceProperties.sourceManagedInstanceId) &&
        Objects.equals(this.state, managedInstanceProperties.state) &&
        Objects.equals(this.storageSizeInGB, managedInstanceProperties.storageSizeInGB) &&
        Objects.equals(this.subnetId, managedInstanceProperties.subnetId) &&
        Objects.equals(this.timezoneId, managedInstanceProperties.timezoneId) &&
        Objects.equals(this.vCores, managedInstanceProperties.vCores);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administratorLogin, administratorLoginPassword, collation, dnsZone, dnsZonePartner, fullyQualifiedDomainName, instancePoolId, licenseType, managedInstanceCreateMode, proxyOverride, publicDataEndpointEnabled, restorePointInTime, sourceManagedInstanceId, state, storageSizeInGB, subnetId, timezoneId, vCores);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedInstanceProperties {\n");
    sb.append("    administratorLogin: ").append(toIndentedString(administratorLogin)).append("\n");
    sb.append("    administratorLoginPassword: ").append(toIndentedString(administratorLoginPassword)).append("\n");
    sb.append("    collation: ").append(toIndentedString(collation)).append("\n");
    sb.append("    dnsZone: ").append(toIndentedString(dnsZone)).append("\n");
    sb.append("    dnsZonePartner: ").append(toIndentedString(dnsZonePartner)).append("\n");
    sb.append("    fullyQualifiedDomainName: ").append(toIndentedString(fullyQualifiedDomainName)).append("\n");
    sb.append("    instancePoolId: ").append(toIndentedString(instancePoolId)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    managedInstanceCreateMode: ").append(toIndentedString(managedInstanceCreateMode)).append("\n");
    sb.append("    proxyOverride: ").append(toIndentedString(proxyOverride)).append("\n");
    sb.append("    publicDataEndpointEnabled: ").append(toIndentedString(publicDataEndpointEnabled)).append("\n");
    sb.append("    restorePointInTime: ").append(toIndentedString(restorePointInTime)).append("\n");
    sb.append("    sourceManagedInstanceId: ").append(toIndentedString(sourceManagedInstanceId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageSizeInGB: ").append(toIndentedString(storageSizeInGB)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    timezoneId: ").append(toIndentedString(timezoneId)).append("\n");
    sb.append("    vCores: ").append(toIndentedString(vCores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administratorLogin");
    openapiFields.add("administratorLoginPassword");
    openapiFields.add("collation");
    openapiFields.add("dnsZone");
    openapiFields.add("dnsZonePartner");
    openapiFields.add("fullyQualifiedDomainName");
    openapiFields.add("instancePoolId");
    openapiFields.add("licenseType");
    openapiFields.add("managedInstanceCreateMode");
    openapiFields.add("proxyOverride");
    openapiFields.add("publicDataEndpointEnabled");
    openapiFields.add("restorePointInTime");
    openapiFields.add("sourceManagedInstanceId");
    openapiFields.add("state");
    openapiFields.add("storageSizeInGB");
    openapiFields.add("subnetId");
    openapiFields.add("timezoneId");
    openapiFields.add("vCores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedInstanceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedInstanceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedInstanceProperties is not found in the empty JSON string", ManagedInstanceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedInstanceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedInstanceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administratorLogin") != null && !jsonObj.get("administratorLogin").isJsonNull()) && !jsonObj.get("administratorLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLogin").toString()));
      }
      if ((jsonObj.get("administratorLoginPassword") != null && !jsonObj.get("administratorLoginPassword").isJsonNull()) && !jsonObj.get("administratorLoginPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLoginPassword").toString()));
      }
      if ((jsonObj.get("collation") != null && !jsonObj.get("collation").isJsonNull()) && !jsonObj.get("collation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collation").toString()));
      }
      if ((jsonObj.get("dnsZone") != null && !jsonObj.get("dnsZone").isJsonNull()) && !jsonObj.get("dnsZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsZone").toString()));
      }
      if ((jsonObj.get("dnsZonePartner") != null && !jsonObj.get("dnsZonePartner").isJsonNull()) && !jsonObj.get("dnsZonePartner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsZonePartner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsZonePartner").toString()));
      }
      if ((jsonObj.get("fullyQualifiedDomainName") != null && !jsonObj.get("fullyQualifiedDomainName").isJsonNull()) && !jsonObj.get("fullyQualifiedDomainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedDomainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedDomainName").toString()));
      }
      if ((jsonObj.get("instancePoolId") != null && !jsonObj.get("instancePoolId").isJsonNull()) && !jsonObj.get("instancePoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instancePoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instancePoolId").toString()));
      }
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LicenseTypeEnum.validateJsonElement(jsonObj.get("licenseType"));
      }
      if ((jsonObj.get("managedInstanceCreateMode") != null && !jsonObj.get("managedInstanceCreateMode").isJsonNull()) && !jsonObj.get("managedInstanceCreateMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedInstanceCreateMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedInstanceCreateMode").toString()));
      }
      // validate the optional field `managedInstanceCreateMode`
      if (jsonObj.get("managedInstanceCreateMode") != null && !jsonObj.get("managedInstanceCreateMode").isJsonNull()) {
        ManagedInstanceCreateModeEnum.validateJsonElement(jsonObj.get("managedInstanceCreateMode"));
      }
      if ((jsonObj.get("proxyOverride") != null && !jsonObj.get("proxyOverride").isJsonNull()) && !jsonObj.get("proxyOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyOverride").toString()));
      }
      // validate the optional field `proxyOverride`
      if (jsonObj.get("proxyOverride") != null && !jsonObj.get("proxyOverride").isJsonNull()) {
        ProxyOverrideEnum.validateJsonElement(jsonObj.get("proxyOverride"));
      }
      if ((jsonObj.get("sourceManagedInstanceId") != null && !jsonObj.get("sourceManagedInstanceId").isJsonNull()) && !jsonObj.get("sourceManagedInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceManagedInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceManagedInstanceId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
      if ((jsonObj.get("timezoneId") != null && !jsonObj.get("timezoneId").isJsonNull()) && !jsonObj.get("timezoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedInstanceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedInstanceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedInstanceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedInstanceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedInstanceProperties>() {
           @Override
           public void write(JsonWriter out, ManagedInstanceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedInstanceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedInstanceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedInstanceProperties
   * @throws IOException if the JSON string is invalid with respect to ManagedInstanceProperties
   */
  public static ManagedInstanceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedInstanceProperties.class);
  }

  /**
   * Convert an instance of ManagedInstanceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

