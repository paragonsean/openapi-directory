/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedInstanceProperties model module.
 * @module model/ManagedInstanceProperties
 * @version 2015-05-01-preview
 */
class ManagedInstanceProperties {
    /**
     * Constructs a new <code>ManagedInstanceProperties</code>.
     * The properties of a managed instance.
     * @alias module:model/ManagedInstanceProperties
     */
    constructor() { 
        
        ManagedInstanceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedInstanceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedInstanceProperties} obj Optional instance to populate.
     * @return {module:model/ManagedInstanceProperties} The populated <code>ManagedInstanceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedInstanceProperties();

            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('administratorLoginPassword')) {
                obj['administratorLoginPassword'] = ApiClient.convertToType(data['administratorLoginPassword'], 'String');
            }
            if (data.hasOwnProperty('collation')) {
                obj['collation'] = ApiClient.convertToType(data['collation'], 'String');
            }
            if (data.hasOwnProperty('dnsZone')) {
                obj['dnsZone'] = ApiClient.convertToType(data['dnsZone'], 'String');
            }
            if (data.hasOwnProperty('dnsZonePartner')) {
                obj['dnsZonePartner'] = ApiClient.convertToType(data['dnsZonePartner'], 'String');
            }
            if (data.hasOwnProperty('fullyQualifiedDomainName')) {
                obj['fullyQualifiedDomainName'] = ApiClient.convertToType(data['fullyQualifiedDomainName'], 'String');
            }
            if (data.hasOwnProperty('instancePoolId')) {
                obj['instancePoolId'] = ApiClient.convertToType(data['instancePoolId'], 'String');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('managedInstanceCreateMode')) {
                obj['managedInstanceCreateMode'] = ApiClient.convertToType(data['managedInstanceCreateMode'], 'String');
            }
            if (data.hasOwnProperty('proxyOverride')) {
                obj['proxyOverride'] = ApiClient.convertToType(data['proxyOverride'], 'String');
            }
            if (data.hasOwnProperty('publicDataEndpointEnabled')) {
                obj['publicDataEndpointEnabled'] = ApiClient.convertToType(data['publicDataEndpointEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('restorePointInTime')) {
                obj['restorePointInTime'] = ApiClient.convertToType(data['restorePointInTime'], 'Date');
            }
            if (data.hasOwnProperty('sourceManagedInstanceId')) {
                obj['sourceManagedInstanceId'] = ApiClient.convertToType(data['sourceManagedInstanceId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storageSizeInGB')) {
                obj['storageSizeInGB'] = ApiClient.convertToType(data['storageSizeInGB'], 'Number');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('timezoneId')) {
                obj['timezoneId'] = ApiClient.convertToType(data['timezoneId'], 'String');
            }
            if (data.hasOwnProperty('vCores')) {
                obj['vCores'] = ApiClient.convertToType(data['vCores'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedInstanceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedInstanceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['administratorLoginPassword'] && !(typeof data['administratorLoginPassword'] === 'string' || data['administratorLoginPassword'] instanceof String)) {
            throw new Error("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got " + data['administratorLoginPassword']);
        }
        // ensure the json data is a string
        if (data['collation'] && !(typeof data['collation'] === 'string' || data['collation'] instanceof String)) {
            throw new Error("Expected the field `collation` to be a primitive type in the JSON string but got " + data['collation']);
        }
        // ensure the json data is a string
        if (data['dnsZone'] && !(typeof data['dnsZone'] === 'string' || data['dnsZone'] instanceof String)) {
            throw new Error("Expected the field `dnsZone` to be a primitive type in the JSON string but got " + data['dnsZone']);
        }
        // ensure the json data is a string
        if (data['dnsZonePartner'] && !(typeof data['dnsZonePartner'] === 'string' || data['dnsZonePartner'] instanceof String)) {
            throw new Error("Expected the field `dnsZonePartner` to be a primitive type in the JSON string but got " + data['dnsZonePartner']);
        }
        // ensure the json data is a string
        if (data['fullyQualifiedDomainName'] && !(typeof data['fullyQualifiedDomainName'] === 'string' || data['fullyQualifiedDomainName'] instanceof String)) {
            throw new Error("Expected the field `fullyQualifiedDomainName` to be a primitive type in the JSON string but got " + data['fullyQualifiedDomainName']);
        }
        // ensure the json data is a string
        if (data['instancePoolId'] && !(typeof data['instancePoolId'] === 'string' || data['instancePoolId'] instanceof String)) {
            throw new Error("Expected the field `instancePoolId` to be a primitive type in the JSON string but got " + data['instancePoolId']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['managedInstanceCreateMode'] && !(typeof data['managedInstanceCreateMode'] === 'string' || data['managedInstanceCreateMode'] instanceof String)) {
            throw new Error("Expected the field `managedInstanceCreateMode` to be a primitive type in the JSON string but got " + data['managedInstanceCreateMode']);
        }
        // ensure the json data is a string
        if (data['proxyOverride'] && !(typeof data['proxyOverride'] === 'string' || data['proxyOverride'] instanceof String)) {
            throw new Error("Expected the field `proxyOverride` to be a primitive type in the JSON string but got " + data['proxyOverride']);
        }
        // ensure the json data is a string
        if (data['sourceManagedInstanceId'] && !(typeof data['sourceManagedInstanceId'] === 'string' || data['sourceManagedInstanceId'] instanceof String)) {
            throw new Error("Expected the field `sourceManagedInstanceId` to be a primitive type in the JSON string but got " + data['sourceManagedInstanceId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subnetId'] && !(typeof data['subnetId'] === 'string' || data['subnetId'] instanceof String)) {
            throw new Error("Expected the field `subnetId` to be a primitive type in the JSON string but got " + data['subnetId']);
        }
        // ensure the json data is a string
        if (data['timezoneId'] && !(typeof data['timezoneId'] === 'string' || data['timezoneId'] instanceof String)) {
            throw new Error("Expected the field `timezoneId` to be a primitive type in the JSON string but got " + data['timezoneId']);
        }

        return true;
    }


}



/**
 * Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
 * @member {String} administratorLogin
 */
ManagedInstanceProperties.prototype['administratorLogin'] = undefined;

/**
 * The administrator login password (required for managed instance creation).
 * @member {String} administratorLoginPassword
 */
ManagedInstanceProperties.prototype['administratorLoginPassword'] = undefined;

/**
 * Collation of the managed instance.
 * @member {String} collation
 */
ManagedInstanceProperties.prototype['collation'] = undefined;

/**
 * The Dns Zone that the managed instance is in.
 * @member {String} dnsZone
 */
ManagedInstanceProperties.prototype['dnsZone'] = undefined;

/**
 * The resource id of another managed instance whose DNS zone this managed instance will share after creation.
 * @member {String} dnsZonePartner
 */
ManagedInstanceProperties.prototype['dnsZonePartner'] = undefined;

/**
 * The fully qualified domain name of the managed instance.
 * @member {String} fullyQualifiedDomainName
 */
ManagedInstanceProperties.prototype['fullyQualifiedDomainName'] = undefined;

/**
 * The Id of the instance pool this managed server belongs to.
 * @member {String} instancePoolId
 */
ManagedInstanceProperties.prototype['instancePoolId'] = undefined;

/**
 * The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
 * @member {module:model/ManagedInstanceProperties.LicenseTypeEnum} licenseType
 */
ManagedInstanceProperties.prototype['licenseType'] = undefined;

/**
 * Specifies the mode of database creation.    Default: Regular instance creation.    Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified.
 * @member {module:model/ManagedInstanceProperties.ManagedInstanceCreateModeEnum} managedInstanceCreateMode
 */
ManagedInstanceProperties.prototype['managedInstanceCreateMode'] = undefined;

/**
 * Connection type used for connecting to the instance.
 * @member {module:model/ManagedInstanceProperties.ProxyOverrideEnum} proxyOverride
 */
ManagedInstanceProperties.prototype['proxyOverride'] = undefined;

/**
 * Whether or not the public data endpoint is enabled.
 * @member {Boolean} publicDataEndpointEnabled
 */
ManagedInstanceProperties.prototype['publicDataEndpointEnabled'] = undefined;

/**
 * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
 * @member {Date} restorePointInTime
 */
ManagedInstanceProperties.prototype['restorePointInTime'] = undefined;

/**
 * The resource identifier of the source managed instance associated with create operation of this instance.
 * @member {String} sourceManagedInstanceId
 */
ManagedInstanceProperties.prototype['sourceManagedInstanceId'] = undefined;

/**
 * The state of the managed instance.
 * @member {String} state
 */
ManagedInstanceProperties.prototype['state'] = undefined;

/**
 * Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB allowed only.
 * @member {Number} storageSizeInGB
 */
ManagedInstanceProperties.prototype['storageSizeInGB'] = undefined;

/**
 * Subnet resource ID for the managed instance.
 * @member {String} subnetId
 */
ManagedInstanceProperties.prototype['subnetId'] = undefined;

/**
 * Id of the timezone. Allowed values are timezones supported by Windows.  Windows keeps details on supported timezones, including the id, in registry under  KEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.  You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.  List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.  An example of valid timezone id is \"Pacific Standard Time\" or \"W. Europe Standard Time\".
 * @member {String} timezoneId
 */
ManagedInstanceProperties.prototype['timezoneId'] = undefined;

/**
 * The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
 * @member {Number} vCores
 */
ManagedInstanceProperties.prototype['vCores'] = undefined;





/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
ManagedInstanceProperties['LicenseTypeEnum'] = {

    /**
     * value: "LicenseIncluded"
     * @const
     */
    "LicenseIncluded": "LicenseIncluded",

    /**
     * value: "BasePrice"
     * @const
     */
    "BasePrice": "BasePrice"
};


/**
 * Allowed values for the <code>managedInstanceCreateMode</code> property.
 * @enum {String}
 * @readonly
 */
ManagedInstanceProperties['ManagedInstanceCreateModeEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "PointInTimeRestore"
     * @const
     */
    "PointInTimeRestore": "PointInTimeRestore"
};


/**
 * Allowed values for the <code>proxyOverride</code> property.
 * @enum {String}
 * @readonly
 */
ManagedInstanceProperties['ProxyOverrideEnum'] = {

    /**
     * value: "Proxy"
     * @const
     */
    "Proxy": "Proxy",

    /**
     * value: "Redirect"
     * @const
     */
    "Redirect": "Redirect",

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default"
};



export default ManagedInstanceProperties;

