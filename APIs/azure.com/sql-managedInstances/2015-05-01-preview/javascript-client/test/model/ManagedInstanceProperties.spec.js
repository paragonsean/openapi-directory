/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.ManagedInstanceProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManagedInstanceProperties', function() {
    it('should create an instance of ManagedInstanceProperties', function() {
      // uncomment below and update the code to test ManagedInstanceProperties
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be.a(SqlManagementClient.ManagedInstanceProperties);
    });

    it('should have the property administratorLogin (base name: "administratorLogin")', function() {
      // uncomment below and update the code to test the property administratorLogin
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property administratorLoginPassword (base name: "administratorLoginPassword")', function() {
      // uncomment below and update the code to test the property administratorLoginPassword
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property collation (base name: "collation")', function() {
      // uncomment below and update the code to test the property collation
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property dnsZone (base name: "dnsZone")', function() {
      // uncomment below and update the code to test the property dnsZone
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property dnsZonePartner (base name: "dnsZonePartner")', function() {
      // uncomment below and update the code to test the property dnsZonePartner
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedDomainName (base name: "fullyQualifiedDomainName")', function() {
      // uncomment below and update the code to test the property fullyQualifiedDomainName
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property instancePoolId (base name: "instancePoolId")', function() {
      // uncomment below and update the code to test the property instancePoolId
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property licenseType (base name: "licenseType")', function() {
      // uncomment below and update the code to test the property licenseType
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property managedInstanceCreateMode (base name: "managedInstanceCreateMode")', function() {
      // uncomment below and update the code to test the property managedInstanceCreateMode
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property proxyOverride (base name: "proxyOverride")', function() {
      // uncomment below and update the code to test the property proxyOverride
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property publicDataEndpointEnabled (base name: "publicDataEndpointEnabled")', function() {
      // uncomment below and update the code to test the property publicDataEndpointEnabled
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property restorePointInTime (base name: "restorePointInTime")', function() {
      // uncomment below and update the code to test the property restorePointInTime
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property sourceManagedInstanceId (base name: "sourceManagedInstanceId")', function() {
      // uncomment below and update the code to test the property sourceManagedInstanceId
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property storageSizeInGB (base name: "storageSizeInGB")', function() {
      // uncomment below and update the code to test the property storageSizeInGB
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property subnetId (base name: "subnetId")', function() {
      // uncomment below and update the code to test the property subnetId
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property timezoneId (base name: "timezoneId")', function() {
      // uncomment below and update the code to test the property timezoneId
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

    it('should have the property vCores (base name: "vCores")', function() {
      // uncomment below and update the code to test the property vCores
      //var instance = new SqlManagementClient.ManagedInstanceProperties();
      //expect(instance).to.be();
    });

  });

}));
