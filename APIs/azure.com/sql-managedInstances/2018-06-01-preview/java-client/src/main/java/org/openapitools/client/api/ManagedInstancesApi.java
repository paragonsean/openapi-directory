/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagedInstance;
import org.openapitools.client.model.ManagedInstanceListResult;
import org.openapitools.client.model.ManagedInstanceUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedInstancesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedInstancesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedInstancesCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 InvalidManagedServerDnsZonePartner - Invalid DNS zone partner resource id specified in properties.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesCreateOrUpdateCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstance parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstance parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstancesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedInstancesCreateOrUpdate(Async)");
        }

        return managedInstancesCreateOrUpdateCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @return ManagedInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 InvalidManagedServerDnsZonePartner - Invalid DNS zone partner resource id specified in properties.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstance managedInstancesCreateOrUpdate(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstance parameters) throws ApiException {
        ApiResponse<ManagedInstance> localVarResp = managedInstancesCreateOrUpdateWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @return ApiResponse&lt;ManagedInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 InvalidManagedServerDnsZonePartner - Invalid DNS zone partner resource id specified in properties.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstance> managedInstancesCreateOrUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstance parameters) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 InvalidManagedServerDnsZonePartner - Invalid DNS zone partner resource id specified in properties.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesCreateOrUpdateAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstance parameters, final ApiCallback<ManagedInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesDelete
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified managed instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesDeleteCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesDeleteValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesDelete(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstancesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesDelete(Async)");
        }

        return managedInstancesDeleteCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified managed instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public void managedInstancesDelete(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        managedInstancesDeleteWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified managed instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managedInstancesDeleteWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified managed instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesDeleteAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesGetCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesGetValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesGet(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstancesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesGet(Async)");
        }

        return managedInstancesGetCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstance managedInstancesGet(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstance> localVarResp = managedInstancesGetWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstance> managedInstancesGetWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesGetValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesGetAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback<ManagedInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesGetValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesList
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: *** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesList(Async)");
        }

        return managedInstancesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of all managed instances in the subscription.
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstanceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: *** </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceListResult managedInstancesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstanceListResult> localVarResp = managedInstancesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of all managed instances in the subscription.
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstanceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: *** </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceListResult> managedInstancesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of all managed instances in the subscription.
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: *** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListAsync(String subscriptionId, String apiVersion, final ApiCallback<ManagedInstanceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesListByInstancePool
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param instancePoolName The instance pool name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 InstancePoolNotFound - An instance pool cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListByInstancePoolCall(String resourceGroupName, String instancePoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/managedInstances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "instancePoolName" + "}", localVarApiClient.escapeString(instancePoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesListByInstancePoolValidateBeforeCall(String resourceGroupName, String instancePoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesListByInstancePool(Async)");
        }

        // verify the required parameter 'instancePoolName' is set
        if (instancePoolName == null) {
            throw new ApiException("Missing the required parameter 'instancePoolName' when calling managedInstancesListByInstancePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesListByInstancePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesListByInstancePool(Async)");
        }

        return managedInstancesListByInstancePoolCall(resourceGroupName, instancePoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of all managed instances in an instance pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param instancePoolName The instance pool name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstanceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 InstancePoolNotFound - An instance pool cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceListResult managedInstancesListByInstancePool(String resourceGroupName, String instancePoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstanceListResult> localVarResp = managedInstancesListByInstancePoolWithHttpInfo(resourceGroupName, instancePoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of all managed instances in an instance pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param instancePoolName The instance pool name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstanceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 InstancePoolNotFound - An instance pool cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceListResult> managedInstancesListByInstancePoolWithHttpInfo(String resourceGroupName, String instancePoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesListByInstancePoolValidateBeforeCall(resourceGroupName, instancePoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of all managed instances in an instance pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param instancePoolName The instance pool name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 InstancePoolNotFound - An instance pool cannot be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListByInstancePoolAsync(String resourceGroupName, String instancePoolName, String subscriptionId, String apiVersion, final ApiCallback<ManagedInstanceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesListByInstancePoolValidateBeforeCall(resourceGroupName, instancePoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesListByResourceGroup
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesListByResourceGroup(Async)");
        }

        return managedInstancesListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of managed instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstanceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceListResult managedInstancesListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstanceListResult> localVarResp = managedInstancesListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of managed instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstanceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceListResult> managedInstancesListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of managed instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<ManagedInstanceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstancesUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesUpdateCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstanceUpdate parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstancesUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstanceUpdate parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstancesUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstancesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstancesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstancesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedInstancesUpdate(Async)");
        }

        return managedInstancesUpdateCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @return ManagedInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstance managedInstancesUpdate(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstanceUpdate parameters) throws ApiException {
        ApiResponse<ManagedInstance> localVarResp = managedInstancesUpdateWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @return ApiResponse&lt;ManagedInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstance> managedInstancesUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstanceUpdate parameters) throws ApiException {
        okhttp3.Call localVarCall = managedInstancesUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a managed instance.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested managed instance resource state. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.   * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.   * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.   * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.   * 400 ManagedInstanceIpAddressRangeLimit - Cannot create a Managed Instance as there are not enough available ip addresses in the selected subnet   * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.   * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough vCore capacity   * 400 ServerNotFound - The requested server was not found.   * 400 TokenTooLong - The provided token is too long.   * 400 ManagedInstanceSloUpdateFailed - SLO &#39;{0}&#39; operation cannot succeed as the memory usage of &#39;{1}&#39; exceeds the quota.   * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn&#39;t supported.   * 400 PasswordTooShort - The provided password is too short   * 400 PasswordTooLong - The provided password is too long.   * 400 PasswordNotComplex - The provided password is not complex enough.   * 400 GatewayInvalidEdition - &#39;{0}&#39; is not a valid database edition in this version of SQL Server.   * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidLocation - An invalid location was specified.   * 400 VnetInWrongRegion - Virtual network is in wrong region.   * 400 InvalidServerName - Invalid server name specified.   * 400 VnetAddressRangeError - Virtual network address range is invalid.   * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.   * 400 InvalidCollation - Invalid collation.   * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.   * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.   * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server &#39;{0}&#39;, Database &#39;{1}&#39; due to unexpected delay. Please try again.   * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.   * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.   * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.   * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.   * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.   * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.   * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.   * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.   * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.   * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.   * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.   * 400 NameAlreadyExists - The provided name already exists.   * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.   * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes   * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.   * 400 ManagedInstanceUpdateSloInProgress - \&quot;The operation could not be completed because a service tier change is in progress for managed instance &#39;{0}.&#39; Please wait for the operation in progress to complete and try again.\&quot;   * 400 VnetResourceNotFound - Resource not found: &#39;{0}&#39;.   * 400 InvalidTimezone - Invalid timezone.   * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.   * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.   * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation &#39;SQL_Latin1_General_CP1_CI_AS&#39;.   * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.   * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.   * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.   * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.   * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceDoesNotExist - Resource with the name &#39;{0}&#39; does not exist. To continue, specify a valid resource name.   * 404 ResourceNotFound - The requested resource was not found.   * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.   * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.   * 405 InvalidStorageSizeValue - \&quot;Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 409 ConflictingServerOperation - An operation is currently in progress for the server.   * 409 SubscriptionDisabled - Subscription is disabled.   * 409 ServerAlreadyExists - Duplicate server name.   * 409 ServerOverridePreconditionFailed - Failed to apply server override on category &#39;{0}&#39;, because physical db or instance &#39;{1}&#39; in server &#39;{2}&#39; is currently not in &#39;Ready&#39; or &#39;Deactivated&#39; state.   * 409 ServerDisabled - Server is disabled.   * 409 ManagedInstanceIsBusy - The server &#39;{0}&#39; is currently busy.  Please wait a few minutes before trying again.   * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 GatewayInternalServerError - The server encountered an unexpected exception.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstancesUpdateAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, ManagedInstanceUpdate parameters, final ApiCallback<ManagedInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstancesUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
