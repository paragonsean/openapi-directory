/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedInstancesApi_H
#define OAI_OAIManagedInstancesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagedInstance.h"
#include "OAIManagedInstanceListResult.h"
#include "OAIManagedInstanceUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedInstancesApi : public QObject {
    Q_OBJECT

public:
    OAIManagedInstancesApi(const int timeOut = 0);
    ~OAIManagedInstancesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagedInstance [required]
    */
    virtual void managedInstancesCreateOrUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version, const OAIManagedInstance &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstancesDelete(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstancesGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstancesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  instance_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstancesListByInstancePool(const QString &resource_group_name, const QString &instance_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstancesListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagedInstanceUpdate [required]
    */
    virtual void managedInstancesUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version, const OAIManagedInstanceUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedInstancesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedInstancesDeleteCallback(OAIHttpRequestWorker *worker);
    void managedInstancesGetCallback(OAIHttpRequestWorker *worker);
    void managedInstancesListCallback(OAIHttpRequestWorker *worker);
    void managedInstancesListByInstancePoolCallback(OAIHttpRequestWorker *worker);
    void managedInstancesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void managedInstancesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedInstancesCreateOrUpdateSignal(OAIManagedInstance summary);
    void managedInstancesDeleteSignal();
    void managedInstancesGetSignal(OAIManagedInstance summary);
    void managedInstancesListSignal(OAIManagedInstanceListResult summary);
    void managedInstancesListByInstancePoolSignal(OAIManagedInstanceListResult summary);
    void managedInstancesListByResourceGroupSignal(OAIManagedInstanceListResult summary);
    void managedInstancesUpdateSignal(OAIManagedInstance summary);


    void managedInstancesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstance summary);
    void managedInstancesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managedInstancesGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstance summary);
    void managedInstancesListSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceListResult summary);
    void managedInstancesListByInstancePoolSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceListResult summary);
    void managedInstancesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceListResult summary);
    void managedInstancesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstance summary);

    Q_DECL_DEPRECATED_X("Use managedInstancesCreateOrUpdateSignalError() instead")
    void managedInstancesCreateOrUpdateSignalE(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesCreateOrUpdateSignalError(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesDeleteSignalError() instead")
    void managedInstancesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesGetSignalError() instead")
    void managedInstancesGetSignalE(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesGetSignalError(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListSignalError() instead")
    void managedInstancesListSignalE(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListSignalError(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListByInstancePoolSignalError() instead")
    void managedInstancesListByInstancePoolSignalE(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListByInstancePoolSignalError(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListByResourceGroupSignalError() instead")
    void managedInstancesListByResourceGroupSignalE(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListByResourceGroupSignalError(OAIManagedInstanceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesUpdateSignalError() instead")
    void managedInstancesUpdateSignalE(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesUpdateSignalError(OAIManagedInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedInstancesCreateOrUpdateSignalErrorFull() instead")
    void managedInstancesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesDeleteSignalErrorFull() instead")
    void managedInstancesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesGetSignalErrorFull() instead")
    void managedInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListSignalErrorFull() instead")
    void managedInstancesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListByInstancePoolSignalErrorFull() instead")
    void managedInstancesListByInstancePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListByInstancePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesListByResourceGroupSignalErrorFull() instead")
    void managedInstancesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstancesUpdateSignalErrorFull() instead")
    void managedInstancesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstancesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
