/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIManagedInstanceProperties.h
 *
 * The properties of a managed instance.
 */

#ifndef OAIManagedInstanceProperties_H
#define OAIManagedInstanceProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIManagedInstanceProperties : public OAIObject {
public:
    OAIManagedInstanceProperties();
    OAIManagedInstanceProperties(QString json);
    ~OAIManagedInstanceProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdministratorLogin() const;
    void setAdministratorLogin(const QString &administrator_login);
    bool is_administrator_login_Set() const;
    bool is_administrator_login_Valid() const;

    QString getAdministratorLoginPassword() const;
    void setAdministratorLoginPassword(const QString &administrator_login_password);
    bool is_administrator_login_password_Set() const;
    bool is_administrator_login_password_Valid() const;

    QString getCollation() const;
    void setCollation(const QString &collation);
    bool is_collation_Set() const;
    bool is_collation_Valid() const;

    QString getDnsZone() const;
    void setDnsZone(const QString &dns_zone);
    bool is_dns_zone_Set() const;
    bool is_dns_zone_Valid() const;

    QString getDnsZonePartner() const;
    void setDnsZonePartner(const QString &dns_zone_partner);
    bool is_dns_zone_partner_Set() const;
    bool is_dns_zone_partner_Valid() const;

    QString getFullyQualifiedDomainName() const;
    void setFullyQualifiedDomainName(const QString &fully_qualified_domain_name);
    bool is_fully_qualified_domain_name_Set() const;
    bool is_fully_qualified_domain_name_Valid() const;

    QString getInstancePoolId() const;
    void setInstancePoolId(const QString &instance_pool_id);
    bool is_instance_pool_id_Set() const;
    bool is_instance_pool_id_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    QString getManagedInstanceCreateMode() const;
    void setManagedInstanceCreateMode(const QString &managed_instance_create_mode);
    bool is_managed_instance_create_mode_Set() const;
    bool is_managed_instance_create_mode_Valid() const;

    QString getProxyOverride() const;
    void setProxyOverride(const QString &proxy_override);
    bool is_proxy_override_Set() const;
    bool is_proxy_override_Valid() const;

    bool isPublicDataEndpointEnabled() const;
    void setPublicDataEndpointEnabled(const bool &public_data_endpoint_enabled);
    bool is_public_data_endpoint_enabled_Set() const;
    bool is_public_data_endpoint_enabled_Valid() const;

    QDateTime getRestorePointInTime() const;
    void setRestorePointInTime(const QDateTime &restore_point_in_time);
    bool is_restore_point_in_time_Set() const;
    bool is_restore_point_in_time_Valid() const;

    QString getSourceManagedInstanceId() const;
    void setSourceManagedInstanceId(const QString &source_managed_instance_id);
    bool is_source_managed_instance_id_Set() const;
    bool is_source_managed_instance_id_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getStorageSizeInGb() const;
    void setStorageSizeInGb(const qint32 &storage_size_in_gb);
    bool is_storage_size_in_gb_Set() const;
    bool is_storage_size_in_gb_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getTimezoneId() const;
    void setTimezoneId(const QString &timezone_id);
    bool is_timezone_id_Set() const;
    bool is_timezone_id_Valid() const;

    qint32 getVCores() const;
    void setVCores(const qint32 &v_cores);
    bool is_v_cores_Set() const;
    bool is_v_cores_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_administrator_login;
    bool m_administrator_login_isSet;
    bool m_administrator_login_isValid;

    QString m_administrator_login_password;
    bool m_administrator_login_password_isSet;
    bool m_administrator_login_password_isValid;

    QString m_collation;
    bool m_collation_isSet;
    bool m_collation_isValid;

    QString m_dns_zone;
    bool m_dns_zone_isSet;
    bool m_dns_zone_isValid;

    QString m_dns_zone_partner;
    bool m_dns_zone_partner_isSet;
    bool m_dns_zone_partner_isValid;

    QString m_fully_qualified_domain_name;
    bool m_fully_qualified_domain_name_isSet;
    bool m_fully_qualified_domain_name_isValid;

    QString m_instance_pool_id;
    bool m_instance_pool_id_isSet;
    bool m_instance_pool_id_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    QString m_managed_instance_create_mode;
    bool m_managed_instance_create_mode_isSet;
    bool m_managed_instance_create_mode_isValid;

    QString m_proxy_override;
    bool m_proxy_override_isSet;
    bool m_proxy_override_isValid;

    bool m_public_data_endpoint_enabled;
    bool m_public_data_endpoint_enabled_isSet;
    bool m_public_data_endpoint_enabled_isValid;

    QDateTime m_restore_point_in_time;
    bool m_restore_point_in_time_isSet;
    bool m_restore_point_in_time_isValid;

    QString m_source_managed_instance_id;
    bool m_source_managed_instance_id_isSet;
    bool m_source_managed_instance_id_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_storage_size_in_gb;
    bool m_storage_size_in_gb_isSet;
    bool m_storage_size_in_gb_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_timezone_id;
    bool m_timezone_id_isSet;
    bool m_timezone_id_isValid;

    qint32 m_v_cores;
    bool m_v_cores_isSet;
    bool m_v_cores_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIManagedInstanceProperties)

#endif // OAIManagedInstanceProperties_H
