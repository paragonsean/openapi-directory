# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_endpoint_key: Dict[str, str]=None, created_date_time: datetime=None, endpoint_hits_count: int=None, endpoint_url: str=None, entities_count: int=None, external_api_keys: object=None, intents_count: int=None, last_modified_date_time: datetime=None, last_published_date_time: datetime=None, last_trained_date_time: datetime=None, training_status: str=None, version: str=None):
        """VersionInfo - a model defined in OpenAPI

        :param assigned_endpoint_key: The assigned_endpoint_key of this VersionInfo.
        :param created_date_time: The created_date_time of this VersionInfo.
        :param endpoint_hits_count: The endpoint_hits_count of this VersionInfo.
        :param endpoint_url: The endpoint_url of this VersionInfo.
        :param entities_count: The entities_count of this VersionInfo.
        :param external_api_keys: The external_api_keys of this VersionInfo.
        :param intents_count: The intents_count of this VersionInfo.
        :param last_modified_date_time: The last_modified_date_time of this VersionInfo.
        :param last_published_date_time: The last_published_date_time of this VersionInfo.
        :param last_trained_date_time: The last_trained_date_time of this VersionInfo.
        :param training_status: The training_status of this VersionInfo.
        :param version: The version of this VersionInfo.
        """
        self.openapi_types = {
            'assigned_endpoint_key': Dict[str, str],
            'created_date_time': datetime,
            'endpoint_hits_count': int,
            'endpoint_url': str,
            'entities_count': int,
            'external_api_keys': object,
            'intents_count': int,
            'last_modified_date_time': datetime,
            'last_published_date_time': datetime,
            'last_trained_date_time': datetime,
            'training_status': str,
            'version': str
        }

        self.attribute_map = {
            'assigned_endpoint_key': 'assignedEndpointKey',
            'created_date_time': 'createdDateTime',
            'endpoint_hits_count': 'endpointHitsCount',
            'endpoint_url': 'endpointUrl',
            'entities_count': 'entitiesCount',
            'external_api_keys': 'externalApiKeys',
            'intents_count': 'intentsCount',
            'last_modified_date_time': 'lastModifiedDateTime',
            'last_published_date_time': 'lastPublishedDateTime',
            'last_trained_date_time': 'lastTrainedDateTime',
            'training_status': 'trainingStatus',
            'version': 'version'
        }

        self._assigned_endpoint_key = assigned_endpoint_key
        self._created_date_time = created_date_time
        self._endpoint_hits_count = endpoint_hits_count
        self._endpoint_url = endpoint_url
        self._entities_count = entities_count
        self._external_api_keys = external_api_keys
        self._intents_count = intents_count
        self._last_modified_date_time = last_modified_date_time
        self._last_published_date_time = last_published_date_time
        self._last_trained_date_time = last_trained_date_time
        self._training_status = training_status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionInfo of this VersionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_endpoint_key(self):
        """Gets the assigned_endpoint_key of this VersionInfo.

        The endpoint key.

        :return: The assigned_endpoint_key of this VersionInfo.
        :rtype: Dict[str, str]
        """
        return self._assigned_endpoint_key

    @assigned_endpoint_key.setter
    def assigned_endpoint_key(self, assigned_endpoint_key):
        """Sets the assigned_endpoint_key of this VersionInfo.

        The endpoint key.

        :param assigned_endpoint_key: The assigned_endpoint_key of this VersionInfo.
        :type assigned_endpoint_key: Dict[str, str]
        """

        self._assigned_endpoint_key = assigned_endpoint_key

    @property
    def created_date_time(self):
        """Gets the created_date_time of this VersionInfo.

        The version's creation timestamp.

        :return: The created_date_time of this VersionInfo.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this VersionInfo.

        The version's creation timestamp.

        :param created_date_time: The created_date_time of this VersionInfo.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def endpoint_hits_count(self):
        """Gets the endpoint_hits_count of this VersionInfo.

        Number of calls made to this endpoint.

        :return: The endpoint_hits_count of this VersionInfo.
        :rtype: int
        """
        return self._endpoint_hits_count

    @endpoint_hits_count.setter
    def endpoint_hits_count(self, endpoint_hits_count):
        """Sets the endpoint_hits_count of this VersionInfo.

        Number of calls made to this endpoint.

        :param endpoint_hits_count: The endpoint_hits_count of this VersionInfo.
        :type endpoint_hits_count: int
        """

        self._endpoint_hits_count = endpoint_hits_count

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this VersionInfo.

        The Runtime endpoint URL for this model version.

        :return: The endpoint_url of this VersionInfo.
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this VersionInfo.

        The Runtime endpoint URL for this model version.

        :param endpoint_url: The endpoint_url of this VersionInfo.
        :type endpoint_url: str
        """

        self._endpoint_url = endpoint_url

    @property
    def entities_count(self):
        """Gets the entities_count of this VersionInfo.

        Number of entities in this model.

        :return: The entities_count of this VersionInfo.
        :rtype: int
        """
        return self._entities_count

    @entities_count.setter
    def entities_count(self, entities_count):
        """Sets the entities_count of this VersionInfo.

        Number of entities in this model.

        :param entities_count: The entities_count of this VersionInfo.
        :type entities_count: int
        """

        self._entities_count = entities_count

    @property
    def external_api_keys(self):
        """Gets the external_api_keys of this VersionInfo.

        External keys.

        :return: The external_api_keys of this VersionInfo.
        :rtype: object
        """
        return self._external_api_keys

    @external_api_keys.setter
    def external_api_keys(self, external_api_keys):
        """Sets the external_api_keys of this VersionInfo.

        External keys.

        :param external_api_keys: The external_api_keys of this VersionInfo.
        :type external_api_keys: object
        """

        self._external_api_keys = external_api_keys

    @property
    def intents_count(self):
        """Gets the intents_count of this VersionInfo.

        Number of intents in this model.

        :return: The intents_count of this VersionInfo.
        :rtype: int
        """
        return self._intents_count

    @intents_count.setter
    def intents_count(self, intents_count):
        """Sets the intents_count of this VersionInfo.

        Number of intents in this model.

        :param intents_count: The intents_count of this VersionInfo.
        :type intents_count: int
        """

        self._intents_count = intents_count

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this VersionInfo.

        Timestamp of the last update.

        :return: The last_modified_date_time of this VersionInfo.
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this VersionInfo.

        Timestamp of the last update.

        :param last_modified_date_time: The last_modified_date_time of this VersionInfo.
        :type last_modified_date_time: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def last_published_date_time(self):
        """Gets the last_published_date_time of this VersionInfo.

        Timestamp when was last published.

        :return: The last_published_date_time of this VersionInfo.
        :rtype: datetime
        """
        return self._last_published_date_time

    @last_published_date_time.setter
    def last_published_date_time(self, last_published_date_time):
        """Sets the last_published_date_time of this VersionInfo.

        Timestamp when was last published.

        :param last_published_date_time: The last_published_date_time of this VersionInfo.
        :type last_published_date_time: datetime
        """

        self._last_published_date_time = last_published_date_time

    @property
    def last_trained_date_time(self):
        """Gets the last_trained_date_time of this VersionInfo.

        Timestamp of the last time the model was trained.

        :return: The last_trained_date_time of this VersionInfo.
        :rtype: datetime
        """
        return self._last_trained_date_time

    @last_trained_date_time.setter
    def last_trained_date_time(self, last_trained_date_time):
        """Sets the last_trained_date_time of this VersionInfo.

        Timestamp of the last time the model was trained.

        :param last_trained_date_time: The last_trained_date_time of this VersionInfo.
        :type last_trained_date_time: datetime
        """

        self._last_trained_date_time = last_trained_date_time

    @property
    def training_status(self):
        """Gets the training_status of this VersionInfo.

        The current training status.

        :return: The training_status of this VersionInfo.
        :rtype: str
        """
        return self._training_status

    @training_status.setter
    def training_status(self, training_status):
        """Sets the training_status of this VersionInfo.

        The current training status.

        :param training_status: The training_status of this VersionInfo.
        :type training_status: str
        """
        allowed_values = ["NeedsTraining", "InProgress", "Trained"]  # noqa: E501
        if training_status not in allowed_values:
            raise ValueError(
                "Invalid value for `training_status` ({0}), must be one of {1}"
                .format(training_status, allowed_values)
            )

        self._training_status = training_status

    @property
    def version(self):
        """Gets the version of this VersionInfo.

        The version ID. E.g.: \"0.1\"

        :return: The version of this VersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionInfo.

        The version ID. E.g.: \"0.1\"

        :param version: The version of this VersionInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
