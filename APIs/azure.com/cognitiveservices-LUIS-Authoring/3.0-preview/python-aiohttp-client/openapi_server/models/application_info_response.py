# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_version: str=None, created_date_time: str=None, culture: str=None, description: str=None, domain: str=None, endpoint_hits_count: int=None, endpoints: object=None, id: str=None, name: str=None, usage_scenario: str=None, versions_count: int=None):
        """ApplicationInfoResponse - a model defined in OpenAPI

        :param active_version: The active_version of this ApplicationInfoResponse.
        :param created_date_time: The created_date_time of this ApplicationInfoResponse.
        :param culture: The culture of this ApplicationInfoResponse.
        :param description: The description of this ApplicationInfoResponse.
        :param domain: The domain of this ApplicationInfoResponse.
        :param endpoint_hits_count: The endpoint_hits_count of this ApplicationInfoResponse.
        :param endpoints: The endpoints of this ApplicationInfoResponse.
        :param id: The id of this ApplicationInfoResponse.
        :param name: The name of this ApplicationInfoResponse.
        :param usage_scenario: The usage_scenario of this ApplicationInfoResponse.
        :param versions_count: The versions_count of this ApplicationInfoResponse.
        """
        self.openapi_types = {
            'active_version': str,
            'created_date_time': str,
            'culture': str,
            'description': str,
            'domain': str,
            'endpoint_hits_count': int,
            'endpoints': object,
            'id': str,
            'name': str,
            'usage_scenario': str,
            'versions_count': int
        }

        self.attribute_map = {
            'active_version': 'activeVersion',
            'created_date_time': 'createdDateTime',
            'culture': 'culture',
            'description': 'description',
            'domain': 'domain',
            'endpoint_hits_count': 'endpointHitsCount',
            'endpoints': 'endpoints',
            'id': 'id',
            'name': 'name',
            'usage_scenario': 'usageScenario',
            'versions_count': 'versionsCount'
        }

        self._active_version = active_version
        self._created_date_time = created_date_time
        self._culture = culture
        self._description = description
        self._domain = domain
        self._endpoint_hits_count = endpoint_hits_count
        self._endpoints = endpoints
        self._id = id
        self._name = name
        self._usage_scenario = usage_scenario
        self._versions_count = versions_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInfoResponse of this ApplicationInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_version(self):
        """Gets the active_version of this ApplicationInfoResponse.

        The version ID currently marked as active.

        :return: The active_version of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._active_version

    @active_version.setter
    def active_version(self, active_version):
        """Sets the active_version of this ApplicationInfoResponse.

        The version ID currently marked as active.

        :param active_version: The active_version of this ApplicationInfoResponse.
        :type active_version: str
        """

        self._active_version = active_version

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ApplicationInfoResponse.

        The version's creation timestamp.

        :return: The created_date_time of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ApplicationInfoResponse.

        The version's creation timestamp.

        :param created_date_time: The created_date_time of this ApplicationInfoResponse.
        :type created_date_time: str
        """

        self._created_date_time = created_date_time

    @property
    def culture(self):
        """Gets the culture of this ApplicationInfoResponse.

        The culture of the application. For example, \"en-us\".

        :return: The culture of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this ApplicationInfoResponse.

        The culture of the application. For example, \"en-us\".

        :param culture: The culture of this ApplicationInfoResponse.
        :type culture: str
        """

        self._culture = culture

    @property
    def description(self):
        """Gets the description of this ApplicationInfoResponse.

        The description of the application.

        :return: The description of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationInfoResponse.

        The description of the application.

        :param description: The description of this ApplicationInfoResponse.
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this ApplicationInfoResponse.

        The domain for the new application. Optional. For example, Comics.

        :return: The domain of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ApplicationInfoResponse.

        The domain for the new application. Optional. For example, Comics.

        :param domain: The domain of this ApplicationInfoResponse.
        :type domain: str
        """

        self._domain = domain

    @property
    def endpoint_hits_count(self):
        """Gets the endpoint_hits_count of this ApplicationInfoResponse.

        Number of calls made to this endpoint.

        :return: The endpoint_hits_count of this ApplicationInfoResponse.
        :rtype: int
        """
        return self._endpoint_hits_count

    @endpoint_hits_count.setter
    def endpoint_hits_count(self, endpoint_hits_count):
        """Sets the endpoint_hits_count of this ApplicationInfoResponse.

        Number of calls made to this endpoint.

        :param endpoint_hits_count: The endpoint_hits_count of this ApplicationInfoResponse.
        :type endpoint_hits_count: int
        """

        self._endpoint_hits_count = endpoint_hits_count

    @property
    def endpoints(self):
        """Gets the endpoints of this ApplicationInfoResponse.

        The Runtime endpoint URL for this model version.

        :return: The endpoints of this ApplicationInfoResponse.
        :rtype: object
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ApplicationInfoResponse.

        The Runtime endpoint URL for this model version.

        :param endpoints: The endpoints of this ApplicationInfoResponse.
        :type endpoints: object
        """

        self._endpoints = endpoints

    @property
    def id(self):
        """Gets the id of this ApplicationInfoResponse.

        The ID (GUID) of the application.

        :return: The id of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationInfoResponse.

        The ID (GUID) of the application.

        :param id: The id of this ApplicationInfoResponse.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApplicationInfoResponse.

        The name of the application.

        :return: The name of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationInfoResponse.

        The name of the application.

        :param name: The name of this ApplicationInfoResponse.
        :type name: str
        """

        self._name = name

    @property
    def usage_scenario(self):
        """Gets the usage_scenario of this ApplicationInfoResponse.

        Defines the scenario for the new application. Optional. For example, IoT.

        :return: The usage_scenario of this ApplicationInfoResponse.
        :rtype: str
        """
        return self._usage_scenario

    @usage_scenario.setter
    def usage_scenario(self, usage_scenario):
        """Sets the usage_scenario of this ApplicationInfoResponse.

        Defines the scenario for the new application. Optional. For example, IoT.

        :param usage_scenario: The usage_scenario of this ApplicationInfoResponse.
        :type usage_scenario: str
        """

        self._usage_scenario = usage_scenario

    @property
    def versions_count(self):
        """Gets the versions_count of this ApplicationInfoResponse.

        Amount of model versions within the application.

        :return: The versions_count of this ApplicationInfoResponse.
        :rtype: int
        """
        return self._versions_count

    @versions_count.setter
    def versions_count(self, versions_count):
        """Sets the versions_count of this ApplicationInfoResponse.

        Amount of model versions within the application.

        :param versions_count: The versions_count of this ApplicationInfoResponse.
        :type versions_count: int
        """

        self._versions_count = versions_count
