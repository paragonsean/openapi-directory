# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_model_feature_information import JsonModelFeatureInformation
from openapi_server import util


class JsonChild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[JsonChild]=None, features: List[JsonModelFeatureInformation]=None, instance_of: str=None, name: str=None):
        """JsonChild - a model defined in OpenAPI

        :param children: The children of this JsonChild.
        :param features: The features of this JsonChild.
        :param instance_of: The instance_of of this JsonChild.
        :param name: The name of this JsonChild.
        """
        self.openapi_types = {
            'children': List[JsonChild],
            'features': List[JsonModelFeatureInformation],
            'instance_of': str,
            'name': str
        }

        self.attribute_map = {
            'children': 'children',
            'features': 'features',
            'instance_of': 'instanceOf',
            'name': 'name'
        }

        self._children = children
        self._features = features
        self._instance_of = instance_of
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonChild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonChild of this JsonChild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this JsonChild.


        :return: The children of this JsonChild.
        :rtype: List[JsonChild]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this JsonChild.


        :param children: The children of this JsonChild.
        :type children: List[JsonChild]
        """

        self._children = children

    @property
    def features(self):
        """Gets the features of this JsonChild.


        :return: The features of this JsonChild.
        :rtype: List[JsonModelFeatureInformation]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this JsonChild.


        :param features: The features of this JsonChild.
        :type features: List[JsonModelFeatureInformation]
        """

        self._features = features

    @property
    def instance_of(self):
        """Gets the instance_of of this JsonChild.


        :return: The instance_of of this JsonChild.
        :rtype: str
        """
        return self._instance_of

    @instance_of.setter
    def instance_of(self, instance_of):
        """Sets the instance_of of this JsonChild.


        :param instance_of: The instance_of of this JsonChild.
        :type instance_of: str
        """

        self._instance_of = instance_of

    @property
    def name(self):
        """Gets the name of this JsonChild.


        :return: The name of this JsonChild.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JsonChild.


        :param name: The name of this JsonChild.
        :type name: str
        """

        self._name = name
