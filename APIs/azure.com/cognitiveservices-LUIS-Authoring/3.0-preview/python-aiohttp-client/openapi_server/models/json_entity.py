# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JSONEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_pos: int=None, entity: str=None, role: str=None, start_pos: int=None):
        """JSONEntity - a model defined in OpenAPI

        :param end_pos: The end_pos of this JSONEntity.
        :param entity: The entity of this JSONEntity.
        :param role: The role of this JSONEntity.
        :param start_pos: The start_pos of this JSONEntity.
        """
        self.openapi_types = {
            'end_pos': int,
            'entity': str,
            'role': str,
            'start_pos': int
        }

        self.attribute_map = {
            'end_pos': 'endPos',
            'entity': 'entity',
            'role': 'role',
            'start_pos': 'startPos'
        }

        self._end_pos = end_pos
        self._entity = entity
        self._role = role
        self._start_pos = start_pos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSONEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSONEntity of this JSONEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_pos(self):
        """Gets the end_pos of this JSONEntity.

        The index within the utterance where the extracted entity ends.

        :return: The end_pos of this JSONEntity.
        :rtype: int
        """
        return self._end_pos

    @end_pos.setter
    def end_pos(self, end_pos):
        """Sets the end_pos of this JSONEntity.

        The index within the utterance where the extracted entity ends.

        :param end_pos: The end_pos of this JSONEntity.
        :type end_pos: int
        """
        if end_pos is None:
            raise ValueError("Invalid value for `end_pos`, must not be `None`")

        self._end_pos = end_pos

    @property
    def entity(self):
        """Gets the entity of this JSONEntity.

        The entity name.

        :return: The entity of this JSONEntity.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this JSONEntity.

        The entity name.

        :param entity: The entity of this JSONEntity.
        :type entity: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def role(self):
        """Gets the role of this JSONEntity.

        The role the entity plays in the utterance.

        :return: The role of this JSONEntity.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this JSONEntity.

        The role the entity plays in the utterance.

        :param role: The role of this JSONEntity.
        :type role: str
        """

        self._role = role

    @property
    def start_pos(self):
        """Gets the start_pos of this JSONEntity.

        The index within the utterance where the extracted entity starts.

        :return: The start_pos of this JSONEntity.
        :rtype: int
        """
        return self._start_pos

    @start_pos.setter
    def start_pos(self, start_pos):
        """Sets the start_pos of this JSONEntity.

        The index within the utterance where the extracted entity starts.

        :param start_pos: The start_pos of this JSONEntity.
        :type start_pos: int
        """
        if start_pos is None:
            raise ValueError("Invalid value for `start_pos`, must not be `None`")

        self._start_pos = start_pos
