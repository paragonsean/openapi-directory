# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadableType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ENTITY_EXTRACTOR = 'Entity Extractor'
    CHILD_ENTITY_EXTRACTOR = 'Child Entity Extractor'
    HIERARCHICAL_ENTITY_EXTRACTOR = 'Hierarchical Entity Extractor'
    HIERARCHICAL_CHILD_ENTITY_EXTRACTOR = 'Hierarchical Child Entity Extractor'
    COMPOSITE_ENTITY_EXTRACTOR = 'Composite Entity Extractor'
    LIST_ENTITY_EXTRACTOR = 'List Entity Extractor'
    PREBUILT_ENTITY_EXTRACTOR = 'Prebuilt Entity Extractor'
    INTENT_CLASSIFIER = 'Intent Classifier'
    PATTERN_PERIOD_ANY_ENTITY_EXTRACTOR = 'Pattern.Any Entity Extractor'
    CLOSED_LIST_ENTITY_EXTRACTOR = 'Closed List Entity Extractor'
    REGEX_ENTITY_EXTRACTOR = 'Regex Entity Extractor'

    def __init__(self):
        """ReadableType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadableType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadableType of this ReadableType.
        """
        return util.deserialize_model(dikt, cls)
