# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_closed_list import SubClosedList
from openapi_server import util


class ClosedList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, roles: List[str]=None, sub_lists: List[SubClosedList]=None):
        """ClosedList - a model defined in OpenAPI

        :param name: The name of this ClosedList.
        :param roles: The roles of this ClosedList.
        :param sub_lists: The sub_lists of this ClosedList.
        """
        self.openapi_types = {
            'name': str,
            'roles': List[str],
            'sub_lists': List[SubClosedList]
        }

        self.attribute_map = {
            'name': 'name',
            'roles': 'roles',
            'sub_lists': 'subLists'
        }

        self._name = name
        self._roles = roles
        self._sub_lists = sub_lists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClosedList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClosedList of this ClosedList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ClosedList.

        Name of the list entity.

        :return: The name of this ClosedList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClosedList.

        Name of the list entity.

        :param name: The name of this ClosedList.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this ClosedList.


        :return: The roles of this ClosedList.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ClosedList.


        :param roles: The roles of this ClosedList.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def sub_lists(self):
        """Gets the sub_lists of this ClosedList.

        Sublists for the list entity.

        :return: The sub_lists of this ClosedList.
        :rtype: List[SubClosedList]
        """
        return self._sub_lists

    @sub_lists.setter
    def sub_lists(self, sub_lists):
        """Sets the sub_lists of this ClosedList.

        Sublists for the list entity.

        :param sub_lists: The sub_lists of this ClosedList.
        :type sub_lists: List[SubClosedList]
        """

        self._sub_lists = sub_lists
