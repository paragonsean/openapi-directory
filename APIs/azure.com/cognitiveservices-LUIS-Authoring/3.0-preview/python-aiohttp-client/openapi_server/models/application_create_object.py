# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationCreateObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, culture: str=None, description: str=None, domain: str=None, initial_version_id: str=None, name: str=None, usage_scenario: str=None):
        """ApplicationCreateObject - a model defined in OpenAPI

        :param culture: The culture of this ApplicationCreateObject.
        :param description: The description of this ApplicationCreateObject.
        :param domain: The domain of this ApplicationCreateObject.
        :param initial_version_id: The initial_version_id of this ApplicationCreateObject.
        :param name: The name of this ApplicationCreateObject.
        :param usage_scenario: The usage_scenario of this ApplicationCreateObject.
        """
        self.openapi_types = {
            'culture': str,
            'description': str,
            'domain': str,
            'initial_version_id': str,
            'name': str,
            'usage_scenario': str
        }

        self.attribute_map = {
            'culture': 'culture',
            'description': 'description',
            'domain': 'domain',
            'initial_version_id': 'initialVersionId',
            'name': 'name',
            'usage_scenario': 'usageScenario'
        }

        self._culture = culture
        self._description = description
        self._domain = domain
        self._initial_version_id = initial_version_id
        self._name = name
        self._usage_scenario = usage_scenario

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationCreateObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationCreateObject of this ApplicationCreateObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def culture(self):
        """Gets the culture of this ApplicationCreateObject.

        The culture for the new application. It is the language that your app understands and speaks. E.g.: \"en-us\". Note: the culture cannot be changed after the app is created.

        :return: The culture of this ApplicationCreateObject.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this ApplicationCreateObject.

        The culture for the new application. It is the language that your app understands and speaks. E.g.: \"en-us\". Note: the culture cannot be changed after the app is created.

        :param culture: The culture of this ApplicationCreateObject.
        :type culture: str
        """
        if culture is None:
            raise ValueError("Invalid value for `culture`, must not be `None`")

        self._culture = culture

    @property
    def description(self):
        """Gets the description of this ApplicationCreateObject.

        Description of the new application. Optional.

        :return: The description of this ApplicationCreateObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationCreateObject.

        Description of the new application. Optional.

        :param description: The description of this ApplicationCreateObject.
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this ApplicationCreateObject.

        The domain for the new application. Optional. E.g.: Comics.

        :return: The domain of this ApplicationCreateObject.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ApplicationCreateObject.

        The domain for the new application. Optional. E.g.: Comics.

        :param domain: The domain of this ApplicationCreateObject.
        :type domain: str
        """

        self._domain = domain

    @property
    def initial_version_id(self):
        """Gets the initial_version_id of this ApplicationCreateObject.

        The initial version ID. Optional. Default value is: \"0.1\"

        :return: The initial_version_id of this ApplicationCreateObject.
        :rtype: str
        """
        return self._initial_version_id

    @initial_version_id.setter
    def initial_version_id(self, initial_version_id):
        """Sets the initial_version_id of this ApplicationCreateObject.

        The initial version ID. Optional. Default value is: \"0.1\"

        :param initial_version_id: The initial_version_id of this ApplicationCreateObject.
        :type initial_version_id: str
        """

        self._initial_version_id = initial_version_id

    @property
    def name(self):
        """Gets the name of this ApplicationCreateObject.

        The name for the new application.

        :return: The name of this ApplicationCreateObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationCreateObject.

        The name for the new application.

        :param name: The name of this ApplicationCreateObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def usage_scenario(self):
        """Gets the usage_scenario of this ApplicationCreateObject.

        Defines the scenario for the new application. Optional. E.g.: IoT.

        :return: The usage_scenario of this ApplicationCreateObject.
        :rtype: str
        """
        return self._usage_scenario

    @usage_scenario.setter
    def usage_scenario(self, usage_scenario):
        """Sets the usage_scenario of this ApplicationCreateObject.

        Defines the scenario for the new application. Optional. E.g.: IoT.

        :param usage_scenario: The usage_scenario of this ApplicationCreateObject.
        :type usage_scenario: str
        """

        self._usage_scenario = usage_scenario
