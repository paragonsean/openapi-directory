# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JSONRegexFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated: bool=None, name: str=None, pattern: str=None):
        """JSONRegexFeature - a model defined in OpenAPI

        :param activated: The activated of this JSONRegexFeature.
        :param name: The name of this JSONRegexFeature.
        :param pattern: The pattern of this JSONRegexFeature.
        """
        self.openapi_types = {
            'activated': bool,
            'name': str,
            'pattern': str
        }

        self.attribute_map = {
            'activated': 'activated',
            'name': 'name',
            'pattern': 'pattern'
        }

        self._activated = activated
        self._name = name
        self._pattern = pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSONRegexFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSONRegexFeature of this JSONRegexFeature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated(self):
        """Gets the activated of this JSONRegexFeature.

        Indicates if the Pattern feature is enabled.

        :return: The activated of this JSONRegexFeature.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this JSONRegexFeature.

        Indicates if the Pattern feature is enabled.

        :param activated: The activated of this JSONRegexFeature.
        :type activated: bool
        """

        self._activated = activated

    @property
    def name(self):
        """Gets the name of this JSONRegexFeature.

        Name of the feature.

        :return: The name of this JSONRegexFeature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JSONRegexFeature.

        Name of the feature.

        :param name: The name of this JSONRegexFeature.
        :type name: str
        """

        self._name = name

    @property
    def pattern(self):
        """Gets the pattern of this JSONRegexFeature.

        The Regular Expression to match.

        :return: The pattern of this JSONRegexFeature.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this JSONRegexFeature.

        The Regular Expression to match.

        :param pattern: The pattern of this JSONRegexFeature.
        :type pattern: str
        """

        self._pattern = pattern
