# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationPublishObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_staging: bool=False, version_id: str=None):
        """ApplicationPublishObject - a model defined in OpenAPI

        :param is_staging: The is_staging of this ApplicationPublishObject.
        :param version_id: The version_id of this ApplicationPublishObject.
        """
        self.openapi_types = {
            'is_staging': bool,
            'version_id': str
        }

        self.attribute_map = {
            'is_staging': 'isStaging',
            'version_id': 'versionId'
        }

        self._is_staging = is_staging
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationPublishObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationPublishObject of this ApplicationPublishObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_staging(self):
        """Gets the is_staging of this ApplicationPublishObject.

        Indicates if the staging slot should be used, instead of the Production one.

        :return: The is_staging of this ApplicationPublishObject.
        :rtype: bool
        """
        return self._is_staging

    @is_staging.setter
    def is_staging(self, is_staging):
        """Sets the is_staging of this ApplicationPublishObject.

        Indicates if the staging slot should be used, instead of the Production one.

        :param is_staging: The is_staging of this ApplicationPublishObject.
        :type is_staging: bool
        """

        self._is_staging = is_staging

    @property
    def version_id(self):
        """Gets the version_id of this ApplicationPublishObject.

        The version ID to publish.

        :return: The version_id of this ApplicationPublishObject.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this ApplicationPublishObject.

        The version ID to publish.

        :param version_id: The version_id of this ApplicationPublishObject.
        :type version_id: str
        """

        self._version_id = version_id
