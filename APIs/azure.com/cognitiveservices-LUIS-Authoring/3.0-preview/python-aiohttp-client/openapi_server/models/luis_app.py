# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.closed_list import ClosedList
from openapi_server.models.hierarchical_model import HierarchicalModel
from openapi_server.models.json_model_feature import JSONModelFeature
from openapi_server.models.json_regex_feature import JSONRegexFeature
from openapi_server.models.json_utterance import JSONUtterance
from openapi_server.models.pattern_any import PatternAny
from openapi_server.models.pattern_rule import PatternRule
from openapi_server.models.prebuilt_entity import PrebuiltEntity
from openapi_server.models.regex_entity import RegexEntity
from openapi_server import util


class LuisApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_lists: List[ClosedList]=None, composites: List[HierarchicalModel]=None, culture: str=None, desc: str=None, entities: List[HierarchicalModel]=None, hierarchicals: List[HierarchicalModel]=None, intents: List[HierarchicalModel]=None, name: str=None, pattern_any_entities: List[PatternAny]=None, patterns: List[PatternRule]=None, phraselists: List[JSONModelFeature]=None, prebuilt_entities: List[PrebuiltEntity]=None, regex_entities: List[RegexEntity]=None, regex_features: List[JSONRegexFeature]=None, utterances: List[JSONUtterance]=None, version_id: str=None):
        """LuisApp - a model defined in OpenAPI

        :param closed_lists: The closed_lists of this LuisApp.
        :param composites: The composites of this LuisApp.
        :param culture: The culture of this LuisApp.
        :param desc: The desc of this LuisApp.
        :param entities: The entities of this LuisApp.
        :param hierarchicals: The hierarchicals of this LuisApp.
        :param intents: The intents of this LuisApp.
        :param name: The name of this LuisApp.
        :param pattern_any_entities: The pattern_any_entities of this LuisApp.
        :param patterns: The patterns of this LuisApp.
        :param phraselists: The phraselists of this LuisApp.
        :param prebuilt_entities: The prebuilt_entities of this LuisApp.
        :param regex_entities: The regex_entities of this LuisApp.
        :param regex_features: The regex_features of this LuisApp.
        :param utterances: The utterances of this LuisApp.
        :param version_id: The version_id of this LuisApp.
        """
        self.openapi_types = {
            'closed_lists': List[ClosedList],
            'composites': List[HierarchicalModel],
            'culture': str,
            'desc': str,
            'entities': List[HierarchicalModel],
            'hierarchicals': List[HierarchicalModel],
            'intents': List[HierarchicalModel],
            'name': str,
            'pattern_any_entities': List[PatternAny],
            'patterns': List[PatternRule],
            'phraselists': List[JSONModelFeature],
            'prebuilt_entities': List[PrebuiltEntity],
            'regex_entities': List[RegexEntity],
            'regex_features': List[JSONRegexFeature],
            'utterances': List[JSONUtterance],
            'version_id': str
        }

        self.attribute_map = {
            'closed_lists': 'closedLists',
            'composites': 'composites',
            'culture': 'culture',
            'desc': 'desc',
            'entities': 'entities',
            'hierarchicals': 'hierarchicals',
            'intents': 'intents',
            'name': 'name',
            'pattern_any_entities': 'patternAnyEntities',
            'patterns': 'patterns',
            'phraselists': 'phraselists',
            'prebuilt_entities': 'prebuiltEntities',
            'regex_entities': 'regex_entities',
            'regex_features': 'regex_features',
            'utterances': 'utterances',
            'version_id': 'versionId'
        }

        self._closed_lists = closed_lists
        self._composites = composites
        self._culture = culture
        self._desc = desc
        self._entities = entities
        self._hierarchicals = hierarchicals
        self._intents = intents
        self._name = name
        self._pattern_any_entities = pattern_any_entities
        self._patterns = patterns
        self._phraselists = phraselists
        self._prebuilt_entities = prebuilt_entities
        self._regex_entities = regex_entities
        self._regex_features = regex_features
        self._utterances = utterances
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LuisApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LuisApp of this LuisApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_lists(self):
        """Gets the closed_lists of this LuisApp.

        List of list entities.

        :return: The closed_lists of this LuisApp.
        :rtype: List[ClosedList]
        """
        return self._closed_lists

    @closed_lists.setter
    def closed_lists(self, closed_lists):
        """Sets the closed_lists of this LuisApp.

        List of list entities.

        :param closed_lists: The closed_lists of this LuisApp.
        :type closed_lists: List[ClosedList]
        """

        self._closed_lists = closed_lists

    @property
    def composites(self):
        """Gets the composites of this LuisApp.

        List of composite entities.

        :return: The composites of this LuisApp.
        :rtype: List[HierarchicalModel]
        """
        return self._composites

    @composites.setter
    def composites(self, composites):
        """Sets the composites of this LuisApp.

        List of composite entities.

        :param composites: The composites of this LuisApp.
        :type composites: List[HierarchicalModel]
        """

        self._composites = composites

    @property
    def culture(self):
        """Gets the culture of this LuisApp.

        The culture of the application. E.g.: en-us.

        :return: The culture of this LuisApp.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this LuisApp.

        The culture of the application. E.g.: en-us.

        :param culture: The culture of this LuisApp.
        :type culture: str
        """

        self._culture = culture

    @property
    def desc(self):
        """Gets the desc of this LuisApp.

        The description of the application.

        :return: The desc of this LuisApp.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this LuisApp.

        The description of the application.

        :param desc: The desc of this LuisApp.
        :type desc: str
        """

        self._desc = desc

    @property
    def entities(self):
        """Gets the entities of this LuisApp.

        List of entities.

        :return: The entities of this LuisApp.
        :rtype: List[HierarchicalModel]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this LuisApp.

        List of entities.

        :param entities: The entities of this LuisApp.
        :type entities: List[HierarchicalModel]
        """

        self._entities = entities

    @property
    def hierarchicals(self):
        """Gets the hierarchicals of this LuisApp.

        List of hierarchical entities.

        :return: The hierarchicals of this LuisApp.
        :rtype: List[HierarchicalModel]
        """
        return self._hierarchicals

    @hierarchicals.setter
    def hierarchicals(self, hierarchicals):
        """Sets the hierarchicals of this LuisApp.

        List of hierarchical entities.

        :param hierarchicals: The hierarchicals of this LuisApp.
        :type hierarchicals: List[HierarchicalModel]
        """

        self._hierarchicals = hierarchicals

    @property
    def intents(self):
        """Gets the intents of this LuisApp.

        List of intents.

        :return: The intents of this LuisApp.
        :rtype: List[HierarchicalModel]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this LuisApp.

        List of intents.

        :param intents: The intents of this LuisApp.
        :type intents: List[HierarchicalModel]
        """

        self._intents = intents

    @property
    def name(self):
        """Gets the name of this LuisApp.

        The name of the application.

        :return: The name of this LuisApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LuisApp.

        The name of the application.

        :param name: The name of this LuisApp.
        :type name: str
        """

        self._name = name

    @property
    def pattern_any_entities(self):
        """Gets the pattern_any_entities of this LuisApp.

        List of Pattern.Any entities.

        :return: The pattern_any_entities of this LuisApp.
        :rtype: List[PatternAny]
        """
        return self._pattern_any_entities

    @pattern_any_entities.setter
    def pattern_any_entities(self, pattern_any_entities):
        """Sets the pattern_any_entities of this LuisApp.

        List of Pattern.Any entities.

        :param pattern_any_entities: The pattern_any_entities of this LuisApp.
        :type pattern_any_entities: List[PatternAny]
        """

        self._pattern_any_entities = pattern_any_entities

    @property
    def patterns(self):
        """Gets the patterns of this LuisApp.

        List of patterns.

        :return: The patterns of this LuisApp.
        :rtype: List[PatternRule]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this LuisApp.

        List of patterns.

        :param patterns: The patterns of this LuisApp.
        :type patterns: List[PatternRule]
        """

        self._patterns = patterns

    @property
    def phraselists(self):
        """Gets the phraselists of this LuisApp.

        List of model features.

        :return: The phraselists of this LuisApp.
        :rtype: List[JSONModelFeature]
        """
        return self._phraselists

    @phraselists.setter
    def phraselists(self, phraselists):
        """Sets the phraselists of this LuisApp.

        List of model features.

        :param phraselists: The phraselists of this LuisApp.
        :type phraselists: List[JSONModelFeature]
        """

        self._phraselists = phraselists

    @property
    def prebuilt_entities(self):
        """Gets the prebuilt_entities of this LuisApp.

        List of prebuilt entities.

        :return: The prebuilt_entities of this LuisApp.
        :rtype: List[PrebuiltEntity]
        """
        return self._prebuilt_entities

    @prebuilt_entities.setter
    def prebuilt_entities(self, prebuilt_entities):
        """Sets the prebuilt_entities of this LuisApp.

        List of prebuilt entities.

        :param prebuilt_entities: The prebuilt_entities of this LuisApp.
        :type prebuilt_entities: List[PrebuiltEntity]
        """

        self._prebuilt_entities = prebuilt_entities

    @property
    def regex_entities(self):
        """Gets the regex_entities of this LuisApp.

        List of regular expression entities.

        :return: The regex_entities of this LuisApp.
        :rtype: List[RegexEntity]
        """
        return self._regex_entities

    @regex_entities.setter
    def regex_entities(self, regex_entities):
        """Sets the regex_entities of this LuisApp.

        List of regular expression entities.

        :param regex_entities: The regex_entities of this LuisApp.
        :type regex_entities: List[RegexEntity]
        """

        self._regex_entities = regex_entities

    @property
    def regex_features(self):
        """Gets the regex_features of this LuisApp.

        List of pattern features.

        :return: The regex_features of this LuisApp.
        :rtype: List[JSONRegexFeature]
        """
        return self._regex_features

    @regex_features.setter
    def regex_features(self, regex_features):
        """Sets the regex_features of this LuisApp.

        List of pattern features.

        :param regex_features: The regex_features of this LuisApp.
        :type regex_features: List[JSONRegexFeature]
        """

        self._regex_features = regex_features

    @property
    def utterances(self):
        """Gets the utterances of this LuisApp.

        List of example utterances.

        :return: The utterances of this LuisApp.
        :rtype: List[JSONUtterance]
        """
        return self._utterances

    @utterances.setter
    def utterances(self, utterances):
        """Sets the utterances of this LuisApp.

        List of example utterances.

        :param utterances: The utterances of this LuisApp.
        :type utterances: List[JSONUtterance]
        """

        self._utterances = utterances

    @property
    def version_id(self):
        """Gets the version_id of this LuisApp.

        The version ID of the application that was exported.

        :return: The version_id of this LuisApp.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this LuisApp.

        The version ID of the application that was exported.

        :param version_id: The version_id of this LuisApp.
        :type version_id: str
        """

        self._version_id = version_id
