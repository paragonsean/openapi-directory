# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_role import EntityRole
from openapi_server.models.readable_type import ReadableType
from openapi_server.models.sub_closed_list_response import SubClosedListResponse
from openapi_server import util


class ClosedListEntityExtractor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_lists: List[SubClosedListResponse]=None, id: str=None, name: str=None, readable_type: ReadableType=None, type_id: int=None, roles: List[EntityRole]=None):
        """ClosedListEntityExtractor - a model defined in OpenAPI

        :param sub_lists: The sub_lists of this ClosedListEntityExtractor.
        :param id: The id of this ClosedListEntityExtractor.
        :param name: The name of this ClosedListEntityExtractor.
        :param readable_type: The readable_type of this ClosedListEntityExtractor.
        :param type_id: The type_id of this ClosedListEntityExtractor.
        :param roles: The roles of this ClosedListEntityExtractor.
        """
        self.openapi_types = {
            'sub_lists': List[SubClosedListResponse],
            'id': str,
            'name': str,
            'readable_type': ReadableType,
            'type_id': int,
            'roles': List[EntityRole]
        }

        self.attribute_map = {
            'sub_lists': 'subLists',
            'id': 'id',
            'name': 'name',
            'readable_type': 'readableType',
            'type_id': 'typeId',
            'roles': 'roles'
        }

        self._sub_lists = sub_lists
        self._id = id
        self._name = name
        self._readable_type = readable_type
        self._type_id = type_id
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClosedListEntityExtractor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClosedListEntityExtractor of this ClosedListEntityExtractor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_lists(self):
        """Gets the sub_lists of this ClosedListEntityExtractor.

        List of sublists.

        :return: The sub_lists of this ClosedListEntityExtractor.
        :rtype: List[SubClosedListResponse]
        """
        return self._sub_lists

    @sub_lists.setter
    def sub_lists(self, sub_lists):
        """Sets the sub_lists of this ClosedListEntityExtractor.

        List of sublists.

        :param sub_lists: The sub_lists of this ClosedListEntityExtractor.
        :type sub_lists: List[SubClosedListResponse]
        """

        self._sub_lists = sub_lists

    @property
    def id(self):
        """Gets the id of this ClosedListEntityExtractor.

        The ID of the Entity Model.

        :return: The id of this ClosedListEntityExtractor.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClosedListEntityExtractor.

        The ID of the Entity Model.

        :param id: The id of this ClosedListEntityExtractor.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClosedListEntityExtractor.

        Name of the Entity Model.

        :return: The name of this ClosedListEntityExtractor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClosedListEntityExtractor.

        Name of the Entity Model.

        :param name: The name of this ClosedListEntityExtractor.
        :type name: str
        """

        self._name = name

    @property
    def readable_type(self):
        """Gets the readable_type of this ClosedListEntityExtractor.


        :return: The readable_type of this ClosedListEntityExtractor.
        :rtype: ReadableType
        """
        return self._readable_type

    @readable_type.setter
    def readable_type(self, readable_type):
        """Sets the readable_type of this ClosedListEntityExtractor.


        :param readable_type: The readable_type of this ClosedListEntityExtractor.
        :type readable_type: ReadableType
        """
        if readable_type is None:
            raise ValueError("Invalid value for `readable_type`, must not be `None`")

        self._readable_type = readable_type

    @property
    def type_id(self):
        """Gets the type_id of this ClosedListEntityExtractor.

        The type ID of the Entity Model.

        :return: The type_id of this ClosedListEntityExtractor.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ClosedListEntityExtractor.

        The type ID of the Entity Model.

        :param type_id: The type_id of this ClosedListEntityExtractor.
        :type type_id: int
        """

        self._type_id = type_id

    @property
    def roles(self):
        """Gets the roles of this ClosedListEntityExtractor.

        List of Pattern.Any Entity Extractors.

        :return: The roles of this ClosedListEntityExtractor.
        :rtype: List[EntityRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ClosedListEntityExtractor.

        List of Pattern.Any Entity Extractors.

        :param roles: The roles of this ClosedListEntityExtractor.
        :type roles: List[EntityRole]
        """

        self._roles = roles
