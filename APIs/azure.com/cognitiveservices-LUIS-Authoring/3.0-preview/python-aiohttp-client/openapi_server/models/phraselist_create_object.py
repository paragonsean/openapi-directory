# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhraselistCreateObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled_for_all_models: bool=True, is_exchangeable: bool=True, name: str=None, phrases: str=None):
        """PhraselistCreateObject - a model defined in OpenAPI

        :param enabled_for_all_models: The enabled_for_all_models of this PhraselistCreateObject.
        :param is_exchangeable: The is_exchangeable of this PhraselistCreateObject.
        :param name: The name of this PhraselistCreateObject.
        :param phrases: The phrases of this PhraselistCreateObject.
        """
        self.openapi_types = {
            'enabled_for_all_models': bool,
            'is_exchangeable': bool,
            'name': str,
            'phrases': str
        }

        self.attribute_map = {
            'enabled_for_all_models': 'enabledForAllModels',
            'is_exchangeable': 'isExchangeable',
            'name': 'name',
            'phrases': 'phrases'
        }

        self._enabled_for_all_models = enabled_for_all_models
        self._is_exchangeable = is_exchangeable
        self._name = name
        self._phrases = phrases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhraselistCreateObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhraselistCreateObject of this PhraselistCreateObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled_for_all_models(self):
        """Gets the enabled_for_all_models of this PhraselistCreateObject.

        Indicates if the Phraselist is enabled for all models in the application.

        :return: The enabled_for_all_models of this PhraselistCreateObject.
        :rtype: bool
        """
        return self._enabled_for_all_models

    @enabled_for_all_models.setter
    def enabled_for_all_models(self, enabled_for_all_models):
        """Sets the enabled_for_all_models of this PhraselistCreateObject.

        Indicates if the Phraselist is enabled for all models in the application.

        :param enabled_for_all_models: The enabled_for_all_models of this PhraselistCreateObject.
        :type enabled_for_all_models: bool
        """

        self._enabled_for_all_models = enabled_for_all_models

    @property
    def is_exchangeable(self):
        """Gets the is_exchangeable of this PhraselistCreateObject.

        An interchangeable phrase list feature serves as a list of synonyms for training. A non-exchangeable phrase list serves as separate features for training. So, if your non-interchangeable phrase list contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-interchangeable phrase list as an additional bag of words to add to LUIS existing vocabulary features. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesn’t.  Default value is true.

        :return: The is_exchangeable of this PhraselistCreateObject.
        :rtype: bool
        """
        return self._is_exchangeable

    @is_exchangeable.setter
    def is_exchangeable(self, is_exchangeable):
        """Sets the is_exchangeable of this PhraselistCreateObject.

        An interchangeable phrase list feature serves as a list of synonyms for training. A non-exchangeable phrase list serves as separate features for training. So, if your non-interchangeable phrase list contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-interchangeable phrase list as an additional bag of words to add to LUIS existing vocabulary features. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesn’t.  Default value is true.

        :param is_exchangeable: The is_exchangeable of this PhraselistCreateObject.
        :type is_exchangeable: bool
        """

        self._is_exchangeable = is_exchangeable

    @property
    def name(self):
        """Gets the name of this PhraselistCreateObject.

        The Phraselist name.

        :return: The name of this PhraselistCreateObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhraselistCreateObject.

        The Phraselist name.

        :param name: The name of this PhraselistCreateObject.
        :type name: str
        """

        self._name = name

    @property
    def phrases(self):
        """Gets the phrases of this PhraselistCreateObject.

        List of comma-separated phrases that represent the Phraselist.

        :return: The phrases of this PhraselistCreateObject.
        :rtype: str
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this PhraselistCreateObject.

        List of comma-separated phrases that represent the Phraselist.

        :param phrases: The phrases of this PhraselistCreateObject.
        :type phrases: str
        """

        self._phrases = phrases
