# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_entity import JSONEntity
from openapi_server import util


class JSONUtterance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List[JSONEntity]=None, intent: str=None, text: str=None):
        """JSONUtterance - a model defined in OpenAPI

        :param entities: The entities of this JSONUtterance.
        :param intent: The intent of this JSONUtterance.
        :param text: The text of this JSONUtterance.
        """
        self.openapi_types = {
            'entities': List[JSONEntity],
            'intent': str,
            'text': str
        }

        self.attribute_map = {
            'entities': 'entities',
            'intent': 'intent',
            'text': 'text'
        }

        self._entities = entities
        self._intent = intent
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSONUtterance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSONUtterance of this JSONUtterance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this JSONUtterance.

        The matched entities.

        :return: The entities of this JSONUtterance.
        :rtype: List[JSONEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this JSONUtterance.

        The matched entities.

        :param entities: The entities of this JSONUtterance.
        :type entities: List[JSONEntity]
        """

        self._entities = entities

    @property
    def intent(self):
        """Gets the intent of this JSONUtterance.

        The matched intent.

        :return: The intent of this JSONUtterance.
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this JSONUtterance.

        The matched intent.

        :param intent: The intent of this JSONUtterance.
        :type intent: str
        """

        self._intent = intent

    @property
    def text(self):
        """Gets the text of this JSONUtterance.

        The utterance.

        :return: The text of this JSONUtterance.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this JSONUtterance.

        The utterance.

        :param text: The text of this JSONUtterance.
        :type text: str
        """

        self._text = text
