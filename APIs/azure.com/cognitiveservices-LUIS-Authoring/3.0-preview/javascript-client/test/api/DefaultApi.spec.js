/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LuisAuthoringClient);
  }
}(this, function(expect, LuisAuthoringClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LuisAuthoringClient.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('appsAdd', function() {
      it('should call appsAdd successfully', function(done) {
        //uncomment below and update the code to test appsAdd
        //instance.appsAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsAddCustomPrebuiltDomain', function() {
      it('should call appsAddCustomPrebuiltDomain successfully', function(done) {
        //uncomment below and update the code to test appsAddCustomPrebuiltDomain
        //instance.appsAddCustomPrebuiltDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsDelete', function() {
      it('should call appsDelete successfully', function(done) {
        //uncomment below and update the code to test appsDelete
        //instance.appsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsDownloadQueryLogs', function() {
      it('should call appsDownloadQueryLogs successfully', function(done) {
        //uncomment below and update the code to test appsDownloadQueryLogs
        //instance.appsDownloadQueryLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsGet', function() {
      it('should call appsGet successfully', function(done) {
        //uncomment below and update the code to test appsGet
        //instance.appsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsGetPublishSettings', function() {
      it('should call appsGetPublishSettings successfully', function(done) {
        //uncomment below and update the code to test appsGetPublishSettings
        //instance.appsGetPublishSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsGetSettings', function() {
      it('should call appsGetSettings successfully', function(done) {
        //uncomment below and update the code to test appsGetSettings
        //instance.appsGetSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsImport', function() {
      it('should call appsImport successfully', function(done) {
        //uncomment below and update the code to test appsImport
        //instance.appsImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsList', function() {
      it('should call appsList successfully', function(done) {
        //uncomment below and update the code to test appsList
        //instance.appsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListAvailableCustomPrebuiltDomains', function() {
      it('should call appsListAvailableCustomPrebuiltDomains successfully', function(done) {
        //uncomment below and update the code to test appsListAvailableCustomPrebuiltDomains
        //instance.appsListAvailableCustomPrebuiltDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListAvailableCustomPrebuiltDomainsForCulture', function() {
      it('should call appsListAvailableCustomPrebuiltDomainsForCulture successfully', function(done) {
        //uncomment below and update the code to test appsListAvailableCustomPrebuiltDomainsForCulture
        //instance.appsListAvailableCustomPrebuiltDomainsForCulture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListCortanaEndpoints', function() {
      it('should call appsListCortanaEndpoints successfully', function(done) {
        //uncomment below and update the code to test appsListCortanaEndpoints
        //instance.appsListCortanaEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListDomains', function() {
      it('should call appsListDomains successfully', function(done) {
        //uncomment below and update the code to test appsListDomains
        //instance.appsListDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListEndpoints', function() {
      it('should call appsListEndpoints successfully', function(done) {
        //uncomment below and update the code to test appsListEndpoints
        //instance.appsListEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListSupportedCultures', function() {
      it('should call appsListSupportedCultures successfully', function(done) {
        //uncomment below and update the code to test appsListSupportedCultures
        //instance.appsListSupportedCultures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsListUsageScenarios', function() {
      it('should call appsListUsageScenarios successfully', function(done) {
        //uncomment below and update the code to test appsListUsageScenarios
        //instance.appsListUsageScenarios(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsPackagePublishedApplicationAsGzip', function() {
      it('should call appsPackagePublishedApplicationAsGzip successfully', function(done) {
        //uncomment below and update the code to test appsPackagePublishedApplicationAsGzip
        //instance.appsPackagePublishedApplicationAsGzip(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsPackageTrainedApplicationAsGzip', function() {
      it('should call appsPackageTrainedApplicationAsGzip successfully', function(done) {
        //uncomment below and update the code to test appsPackageTrainedApplicationAsGzip
        //instance.appsPackageTrainedApplicationAsGzip(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsPublish', function() {
      it('should call appsPublish successfully', function(done) {
        //uncomment below and update the code to test appsPublish
        //instance.appsPublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsUpdate', function() {
      it('should call appsUpdate successfully', function(done) {
        //uncomment below and update the code to test appsUpdate
        //instance.appsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsUpdatePublishSettings', function() {
      it('should call appsUpdatePublishSettings successfully', function(done) {
        //uncomment below and update the code to test appsUpdatePublishSettings
        //instance.appsUpdatePublishSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appsUpdateSettings', function() {
      it('should call appsUpdateSettings successfully', function(done) {
        //uncomment below and update the code to test appsUpdateSettings
        //instance.appsUpdateSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('azureAccountsAssignToApp', function() {
      it('should call azureAccountsAssignToApp successfully', function(done) {
        //uncomment below and update the code to test azureAccountsAssignToApp
        //instance.azureAccountsAssignToApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('azureAccountsGetAssigned', function() {
      it('should call azureAccountsGetAssigned successfully', function(done) {
        //uncomment below and update the code to test azureAccountsGetAssigned
        //instance.azureAccountsGetAssigned(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('azureAccountsListUserLUISAccounts', function() {
      it('should call azureAccountsListUserLUISAccounts successfully', function(done) {
        //uncomment below and update the code to test azureAccountsListUserLUISAccounts
        //instance.azureAccountsListUserLUISAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('azureAccountsRemoveFromApp', function() {
      it('should call azureAccountsRemoveFromApp successfully', function(done) {
        //uncomment below and update the code to test azureAccountsRemoveFromApp
        //instance.azureAccountsRemoveFromApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('examplesAdd', function() {
      it('should call examplesAdd successfully', function(done) {
        //uncomment below and update the code to test examplesAdd
        //instance.examplesAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('examplesBatch', function() {
      it('should call examplesBatch successfully', function(done) {
        //uncomment below and update the code to test examplesBatch
        //instance.examplesBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('examplesDelete', function() {
      it('should call examplesDelete successfully', function(done) {
        //uncomment below and update the code to test examplesDelete
        //instance.examplesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('examplesList', function() {
      it('should call examplesList successfully', function(done) {
        //uncomment below and update the code to test examplesList
        //instance.examplesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresAddEntityFeature', function() {
      it('should call featuresAddEntityFeature successfully', function(done) {
        //uncomment below and update the code to test featuresAddEntityFeature
        //instance.featuresAddEntityFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresAddIntentFeature', function() {
      it('should call featuresAddIntentFeature successfully', function(done) {
        //uncomment below and update the code to test featuresAddIntentFeature
        //instance.featuresAddIntentFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresAddPhraseList', function() {
      it('should call featuresAddPhraseList successfully', function(done) {
        //uncomment below and update the code to test featuresAddPhraseList
        //instance.featuresAddPhraseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresDeletePhraseList', function() {
      it('should call featuresDeletePhraseList successfully', function(done) {
        //uncomment below and update the code to test featuresDeletePhraseList
        //instance.featuresDeletePhraseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresGetPhraseList', function() {
      it('should call featuresGetPhraseList successfully', function(done) {
        //uncomment below and update the code to test featuresGetPhraseList
        //instance.featuresGetPhraseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresList', function() {
      it('should call featuresList successfully', function(done) {
        //uncomment below and update the code to test featuresList
        //instance.featuresList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresListPhraseLists', function() {
      it('should call featuresListPhraseLists successfully', function(done) {
        //uncomment below and update the code to test featuresListPhraseLists
        //instance.featuresListPhraseLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featuresUpdatePhraseList', function() {
      it('should call featuresUpdatePhraseList successfully', function(done) {
        //uncomment below and update the code to test featuresUpdatePhraseList
        //instance.featuresUpdatePhraseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddClosedList', function() {
      it('should call modelAddClosedList successfully', function(done) {
        //uncomment below and update the code to test modelAddClosedList
        //instance.modelAddClosedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddCompositeEntityChild', function() {
      it('should call modelAddCompositeEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelAddCompositeEntityChild
        //instance.modelAddCompositeEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddCustomPrebuiltDomain', function() {
      it('should call modelAddCustomPrebuiltDomain successfully', function(done) {
        //uncomment below and update the code to test modelAddCustomPrebuiltDomain
        //instance.modelAddCustomPrebuiltDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddCustomPrebuiltEntity', function() {
      it('should call modelAddCustomPrebuiltEntity successfully', function(done) {
        //uncomment below and update the code to test modelAddCustomPrebuiltEntity
        //instance.modelAddCustomPrebuiltEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddCustomPrebuiltIntent', function() {
      it('should call modelAddCustomPrebuiltIntent successfully', function(done) {
        //uncomment below and update the code to test modelAddCustomPrebuiltIntent
        //instance.modelAddCustomPrebuiltIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddEntity', function() {
      it('should call modelAddEntity successfully', function(done) {
        //uncomment below and update the code to test modelAddEntity
        //instance.modelAddEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddEntityChild', function() {
      it('should call modelAddEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelAddEntityChild
        //instance.modelAddEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddExplicitListItem', function() {
      it('should call modelAddExplicitListItem successfully', function(done) {
        //uncomment below and update the code to test modelAddExplicitListItem
        //instance.modelAddExplicitListItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddIntent', function() {
      it('should call modelAddIntent successfully', function(done) {
        //uncomment below and update the code to test modelAddIntent
        //instance.modelAddIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddPrebuilt', function() {
      it('should call modelAddPrebuilt successfully', function(done) {
        //uncomment below and update the code to test modelAddPrebuilt
        //instance.modelAddPrebuilt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelAddSubList', function() {
      it('should call modelAddSubList successfully', function(done) {
        //uncomment below and update the code to test modelAddSubList
        //instance.modelAddSubList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateClosedListEntityRole', function() {
      it('should call modelCreateClosedListEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateClosedListEntityRole
        //instance.modelCreateClosedListEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateCompositeEntityRole', function() {
      it('should call modelCreateCompositeEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateCompositeEntityRole
        //instance.modelCreateCompositeEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateCustomPrebuiltEntityRole', function() {
      it('should call modelCreateCustomPrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateCustomPrebuiltEntityRole
        //instance.modelCreateCustomPrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateEntityRole', function() {
      it('should call modelCreateEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateEntityRole
        //instance.modelCreateEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateHierarchicalEntityRole', function() {
      it('should call modelCreateHierarchicalEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateHierarchicalEntityRole
        //instance.modelCreateHierarchicalEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreatePatternAnyEntityModel', function() {
      it('should call modelCreatePatternAnyEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelCreatePatternAnyEntityModel
        //instance.modelCreatePatternAnyEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreatePatternAnyEntityRole', function() {
      it('should call modelCreatePatternAnyEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreatePatternAnyEntityRole
        //instance.modelCreatePatternAnyEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreatePrebuiltEntityRole', function() {
      it('should call modelCreatePrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreatePrebuiltEntityRole
        //instance.modelCreatePrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateRegexEntityModel', function() {
      it('should call modelCreateRegexEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelCreateRegexEntityModel
        //instance.modelCreateRegexEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelCreateRegexEntityRole', function() {
      it('should call modelCreateRegexEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelCreateRegexEntityRole
        //instance.modelCreateRegexEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteClosedList', function() {
      it('should call modelDeleteClosedList successfully', function(done) {
        //uncomment below and update the code to test modelDeleteClosedList
        //instance.modelDeleteClosedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteClosedListEntityRole', function() {
      it('should call modelDeleteClosedListEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteClosedListEntityRole
        //instance.modelDeleteClosedListEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteCompositeEntity', function() {
      it('should call modelDeleteCompositeEntity successfully', function(done) {
        //uncomment below and update the code to test modelDeleteCompositeEntity
        //instance.modelDeleteCompositeEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteCompositeEntityChild', function() {
      it('should call modelDeleteCompositeEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelDeleteCompositeEntityChild
        //instance.modelDeleteCompositeEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteCompositeEntityRole', function() {
      it('should call modelDeleteCompositeEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteCompositeEntityRole
        //instance.modelDeleteCompositeEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteCustomEntityRole', function() {
      it('should call modelDeleteCustomEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteCustomEntityRole
        //instance.modelDeleteCustomEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteCustomPrebuiltDomain', function() {
      it('should call modelDeleteCustomPrebuiltDomain successfully', function(done) {
        //uncomment below and update the code to test modelDeleteCustomPrebuiltDomain
        //instance.modelDeleteCustomPrebuiltDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteEntity', function() {
      it('should call modelDeleteEntity successfully', function(done) {
        //uncomment below and update the code to test modelDeleteEntity
        //instance.modelDeleteEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteEntityFeature', function() {
      it('should call modelDeleteEntityFeature successfully', function(done) {
        //uncomment below and update the code to test modelDeleteEntityFeature
        //instance.modelDeleteEntityFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteEntityRole', function() {
      it('should call modelDeleteEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteEntityRole
        //instance.modelDeleteEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteExplicitListItem', function() {
      it('should call modelDeleteExplicitListItem successfully', function(done) {
        //uncomment below and update the code to test modelDeleteExplicitListItem
        //instance.modelDeleteExplicitListItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteHierarchicalEntity', function() {
      it('should call modelDeleteHierarchicalEntity successfully', function(done) {
        //uncomment below and update the code to test modelDeleteHierarchicalEntity
        //instance.modelDeleteHierarchicalEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteHierarchicalEntityChild', function() {
      it('should call modelDeleteHierarchicalEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelDeleteHierarchicalEntityChild
        //instance.modelDeleteHierarchicalEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteHierarchicalEntityRole', function() {
      it('should call modelDeleteHierarchicalEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteHierarchicalEntityRole
        //instance.modelDeleteHierarchicalEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteIntent', function() {
      it('should call modelDeleteIntent successfully', function(done) {
        //uncomment below and update the code to test modelDeleteIntent
        //instance.modelDeleteIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteIntentFeature', function() {
      it('should call modelDeleteIntentFeature successfully', function(done) {
        //uncomment below and update the code to test modelDeleteIntentFeature
        //instance.modelDeleteIntentFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeletePatternAnyEntityModel', function() {
      it('should call modelDeletePatternAnyEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelDeletePatternAnyEntityModel
        //instance.modelDeletePatternAnyEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeletePatternAnyEntityRole', function() {
      it('should call modelDeletePatternAnyEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeletePatternAnyEntityRole
        //instance.modelDeletePatternAnyEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeletePrebuilt', function() {
      it('should call modelDeletePrebuilt successfully', function(done) {
        //uncomment below and update the code to test modelDeletePrebuilt
        //instance.modelDeletePrebuilt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeletePrebuiltEntityRole', function() {
      it('should call modelDeletePrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeletePrebuiltEntityRole
        //instance.modelDeletePrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteRegexEntityModel', function() {
      it('should call modelDeleteRegexEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelDeleteRegexEntityModel
        //instance.modelDeleteRegexEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteRegexEntityRole', function() {
      it('should call modelDeleteRegexEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelDeleteRegexEntityRole
        //instance.modelDeleteRegexEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelDeleteSubList', function() {
      it('should call modelDeleteSubList successfully', function(done) {
        //uncomment below and update the code to test modelDeleteSubList
        //instance.modelDeleteSubList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelExamples', function() {
      it('should call modelExamples successfully', function(done) {
        //uncomment below and update the code to test modelExamples
        //instance.modelExamples(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetClosedList', function() {
      it('should call modelGetClosedList successfully', function(done) {
        //uncomment below and update the code to test modelGetClosedList
        //instance.modelGetClosedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetClosedListEntityRole', function() {
      it('should call modelGetClosedListEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetClosedListEntityRole
        //instance.modelGetClosedListEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetCompositeEntity', function() {
      it('should call modelGetCompositeEntity successfully', function(done) {
        //uncomment below and update the code to test modelGetCompositeEntity
        //instance.modelGetCompositeEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetCompositeEntityRole', function() {
      it('should call modelGetCompositeEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetCompositeEntityRole
        //instance.modelGetCompositeEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetCustomEntityRole', function() {
      it('should call modelGetCustomEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetCustomEntityRole
        //instance.modelGetCustomEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetEntity', function() {
      it('should call modelGetEntity successfully', function(done) {
        //uncomment below and update the code to test modelGetEntity
        //instance.modelGetEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetEntityFeatures', function() {
      it('should call modelGetEntityFeatures successfully', function(done) {
        //uncomment below and update the code to test modelGetEntityFeatures
        //instance.modelGetEntityFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetEntityRole', function() {
      it('should call modelGetEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetEntityRole
        //instance.modelGetEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetExplicitList', function() {
      it('should call modelGetExplicitList successfully', function(done) {
        //uncomment below and update the code to test modelGetExplicitList
        //instance.modelGetExplicitList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetExplicitListItem', function() {
      it('should call modelGetExplicitListItem successfully', function(done) {
        //uncomment below and update the code to test modelGetExplicitListItem
        //instance.modelGetExplicitListItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetHierarchicalEntity', function() {
      it('should call modelGetHierarchicalEntity successfully', function(done) {
        //uncomment below and update the code to test modelGetHierarchicalEntity
        //instance.modelGetHierarchicalEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetHierarchicalEntityChild', function() {
      it('should call modelGetHierarchicalEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelGetHierarchicalEntityChild
        //instance.modelGetHierarchicalEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetHierarchicalEntityRole', function() {
      it('should call modelGetHierarchicalEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetHierarchicalEntityRole
        //instance.modelGetHierarchicalEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetIntent', function() {
      it('should call modelGetIntent successfully', function(done) {
        //uncomment below and update the code to test modelGetIntent
        //instance.modelGetIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetIntentFeatures', function() {
      it('should call modelGetIntentFeatures successfully', function(done) {
        //uncomment below and update the code to test modelGetIntentFeatures
        //instance.modelGetIntentFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetPatternAnyEntityInfo', function() {
      it('should call modelGetPatternAnyEntityInfo successfully', function(done) {
        //uncomment below and update the code to test modelGetPatternAnyEntityInfo
        //instance.modelGetPatternAnyEntityInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetPatternAnyEntityRole', function() {
      it('should call modelGetPatternAnyEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetPatternAnyEntityRole
        //instance.modelGetPatternAnyEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetPrebuilt', function() {
      it('should call modelGetPrebuilt successfully', function(done) {
        //uncomment below and update the code to test modelGetPrebuilt
        //instance.modelGetPrebuilt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetPrebuiltEntityRole', function() {
      it('should call modelGetPrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetPrebuiltEntityRole
        //instance.modelGetPrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetRegexEntityEntityInfo', function() {
      it('should call modelGetRegexEntityEntityInfo successfully', function(done) {
        //uncomment below and update the code to test modelGetRegexEntityEntityInfo
        //instance.modelGetRegexEntityEntityInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelGetRegexEntityRole', function() {
      it('should call modelGetRegexEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelGetRegexEntityRole
        //instance.modelGetRegexEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListClosedListEntityRoles', function() {
      it('should call modelListClosedListEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListClosedListEntityRoles
        //instance.modelListClosedListEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListClosedLists', function() {
      it('should call modelListClosedLists successfully', function(done) {
        //uncomment below and update the code to test modelListClosedLists
        //instance.modelListClosedLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCompositeEntities', function() {
      it('should call modelListCompositeEntities successfully', function(done) {
        //uncomment below and update the code to test modelListCompositeEntities
        //instance.modelListCompositeEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCompositeEntityRoles', function() {
      it('should call modelListCompositeEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListCompositeEntityRoles
        //instance.modelListCompositeEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCustomPrebuiltEntities', function() {
      it('should call modelListCustomPrebuiltEntities successfully', function(done) {
        //uncomment below and update the code to test modelListCustomPrebuiltEntities
        //instance.modelListCustomPrebuiltEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCustomPrebuiltEntityRoles', function() {
      it('should call modelListCustomPrebuiltEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListCustomPrebuiltEntityRoles
        //instance.modelListCustomPrebuiltEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCustomPrebuiltIntents', function() {
      it('should call modelListCustomPrebuiltIntents successfully', function(done) {
        //uncomment below and update the code to test modelListCustomPrebuiltIntents
        //instance.modelListCustomPrebuiltIntents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListCustomPrebuiltModels', function() {
      it('should call modelListCustomPrebuiltModels successfully', function(done) {
        //uncomment below and update the code to test modelListCustomPrebuiltModels
        //instance.modelListCustomPrebuiltModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListEntities', function() {
      it('should call modelListEntities successfully', function(done) {
        //uncomment below and update the code to test modelListEntities
        //instance.modelListEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListEntityRoles', function() {
      it('should call modelListEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListEntityRoles
        //instance.modelListEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListEntitySuggestions', function() {
      it('should call modelListEntitySuggestions successfully', function(done) {
        //uncomment below and update the code to test modelListEntitySuggestions
        //instance.modelListEntitySuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListHierarchicalEntities', function() {
      it('should call modelListHierarchicalEntities successfully', function(done) {
        //uncomment below and update the code to test modelListHierarchicalEntities
        //instance.modelListHierarchicalEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListHierarchicalEntityRoles', function() {
      it('should call modelListHierarchicalEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListHierarchicalEntityRoles
        //instance.modelListHierarchicalEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListIntentSuggestions', function() {
      it('should call modelListIntentSuggestions successfully', function(done) {
        //uncomment below and update the code to test modelListIntentSuggestions
        //instance.modelListIntentSuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListIntents', function() {
      it('should call modelListIntents successfully', function(done) {
        //uncomment below and update the code to test modelListIntents
        //instance.modelListIntents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListModels', function() {
      it('should call modelListModels successfully', function(done) {
        //uncomment below and update the code to test modelListModels
        //instance.modelListModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListPatternAnyEntityInfos', function() {
      it('should call modelListPatternAnyEntityInfos successfully', function(done) {
        //uncomment below and update the code to test modelListPatternAnyEntityInfos
        //instance.modelListPatternAnyEntityInfos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListPatternAnyEntityRoles', function() {
      it('should call modelListPatternAnyEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListPatternAnyEntityRoles
        //instance.modelListPatternAnyEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListPrebuiltEntities', function() {
      it('should call modelListPrebuiltEntities successfully', function(done) {
        //uncomment below and update the code to test modelListPrebuiltEntities
        //instance.modelListPrebuiltEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListPrebuiltEntityRoles', function() {
      it('should call modelListPrebuiltEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListPrebuiltEntityRoles
        //instance.modelListPrebuiltEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListPrebuilts', function() {
      it('should call modelListPrebuilts successfully', function(done) {
        //uncomment below and update the code to test modelListPrebuilts
        //instance.modelListPrebuilts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListRegexEntityInfos', function() {
      it('should call modelListRegexEntityInfos successfully', function(done) {
        //uncomment below and update the code to test modelListRegexEntityInfos
        //instance.modelListRegexEntityInfos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelListRegexEntityRoles', function() {
      it('should call modelListRegexEntityRoles successfully', function(done) {
        //uncomment below and update the code to test modelListRegexEntityRoles
        //instance.modelListRegexEntityRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelPatchClosedList', function() {
      it('should call modelPatchClosedList successfully', function(done) {
        //uncomment below and update the code to test modelPatchClosedList
        //instance.modelPatchClosedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelReplaceEntityFeatures', function() {
      it('should call modelReplaceEntityFeatures successfully', function(done) {
        //uncomment below and update the code to test modelReplaceEntityFeatures
        //instance.modelReplaceEntityFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelReplaceIntentFeatures', function() {
      it('should call modelReplaceIntentFeatures successfully', function(done) {
        //uncomment below and update the code to test modelReplaceIntentFeatures
        //instance.modelReplaceIntentFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateClosedList', function() {
      it('should call modelUpdateClosedList successfully', function(done) {
        //uncomment below and update the code to test modelUpdateClosedList
        //instance.modelUpdateClosedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateClosedListEntityRole', function() {
      it('should call modelUpdateClosedListEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateClosedListEntityRole
        //instance.modelUpdateClosedListEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateCompositeEntity', function() {
      it('should call modelUpdateCompositeEntity successfully', function(done) {
        //uncomment below and update the code to test modelUpdateCompositeEntity
        //instance.modelUpdateCompositeEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateCompositeEntityRole', function() {
      it('should call modelUpdateCompositeEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateCompositeEntityRole
        //instance.modelUpdateCompositeEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateCustomPrebuiltEntityRole', function() {
      it('should call modelUpdateCustomPrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateCustomPrebuiltEntityRole
        //instance.modelUpdateCustomPrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateEntityChild', function() {
      it('should call modelUpdateEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelUpdateEntityChild
        //instance.modelUpdateEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateEntityRole', function() {
      it('should call modelUpdateEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateEntityRole
        //instance.modelUpdateEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateExplicitListItem', function() {
      it('should call modelUpdateExplicitListItem successfully', function(done) {
        //uncomment below and update the code to test modelUpdateExplicitListItem
        //instance.modelUpdateExplicitListItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateHierarchicalEntity', function() {
      it('should call modelUpdateHierarchicalEntity successfully', function(done) {
        //uncomment below and update the code to test modelUpdateHierarchicalEntity
        //instance.modelUpdateHierarchicalEntity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateHierarchicalEntityChild', function() {
      it('should call modelUpdateHierarchicalEntityChild successfully', function(done) {
        //uncomment below and update the code to test modelUpdateHierarchicalEntityChild
        //instance.modelUpdateHierarchicalEntityChild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateHierarchicalEntityRole', function() {
      it('should call modelUpdateHierarchicalEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateHierarchicalEntityRole
        //instance.modelUpdateHierarchicalEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateIntent', function() {
      it('should call modelUpdateIntent successfully', function(done) {
        //uncomment below and update the code to test modelUpdateIntent
        //instance.modelUpdateIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdatePatternAnyEntityModel', function() {
      it('should call modelUpdatePatternAnyEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelUpdatePatternAnyEntityModel
        //instance.modelUpdatePatternAnyEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdatePatternAnyEntityRole', function() {
      it('should call modelUpdatePatternAnyEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdatePatternAnyEntityRole
        //instance.modelUpdatePatternAnyEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdatePrebuiltEntityRole', function() {
      it('should call modelUpdatePrebuiltEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdatePrebuiltEntityRole
        //instance.modelUpdatePrebuiltEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateRegexEntityModel', function() {
      it('should call modelUpdateRegexEntityModel successfully', function(done) {
        //uncomment below and update the code to test modelUpdateRegexEntityModel
        //instance.modelUpdateRegexEntityModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateRegexEntityRole', function() {
      it('should call modelUpdateRegexEntityRole successfully', function(done) {
        //uncomment below and update the code to test modelUpdateRegexEntityRole
        //instance.modelUpdateRegexEntityRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelUpdateSubList', function() {
      it('should call modelUpdateSubList successfully', function(done) {
        //uncomment below and update the code to test modelUpdateSubList
        //instance.modelUpdateSubList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternAddPattern', function() {
      it('should call patternAddPattern successfully', function(done) {
        //uncomment below and update the code to test patternAddPattern
        //instance.patternAddPattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternBatchAddPatterns', function() {
      it('should call patternBatchAddPatterns successfully', function(done) {
        //uncomment below and update the code to test patternBatchAddPatterns
        //instance.patternBatchAddPatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternDeletePattern', function() {
      it('should call patternDeletePattern successfully', function(done) {
        //uncomment below and update the code to test patternDeletePattern
        //instance.patternDeletePattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternDeletePatterns', function() {
      it('should call patternDeletePatterns successfully', function(done) {
        //uncomment below and update the code to test patternDeletePatterns
        //instance.patternDeletePatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternListIntentPatterns', function() {
      it('should call patternListIntentPatterns successfully', function(done) {
        //uncomment below and update the code to test patternListIntentPatterns
        //instance.patternListIntentPatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternListPatterns', function() {
      it('should call patternListPatterns successfully', function(done) {
        //uncomment below and update the code to test patternListPatterns
        //instance.patternListPatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternUpdatePattern', function() {
      it('should call patternUpdatePattern successfully', function(done) {
        //uncomment below and update the code to test patternUpdatePattern
        //instance.patternUpdatePattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patternUpdatePatterns', function() {
      it('should call patternUpdatePatterns successfully', function(done) {
        //uncomment below and update the code to test patternUpdatePatterns
        //instance.patternUpdatePatterns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsAdd', function() {
      it('should call permissionsAdd successfully', function(done) {
        //uncomment below and update the code to test permissionsAdd
        //instance.permissionsAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsDelete', function() {
      it('should call permissionsDelete successfully', function(done) {
        //uncomment below and update the code to test permissionsDelete
        //instance.permissionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsList', function() {
      it('should call permissionsList successfully', function(done) {
        //uncomment below and update the code to test permissionsList
        //instance.permissionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsUpdate', function() {
      it('should call permissionsUpdate successfully', function(done) {
        //uncomment below and update the code to test permissionsUpdate
        //instance.permissionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('settingsList', function() {
      it('should call settingsList successfully', function(done) {
        //uncomment below and update the code to test settingsList
        //instance.settingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('settingsUpdate', function() {
      it('should call settingsUpdate successfully', function(done) {
        //uncomment below and update the code to test settingsUpdate
        //instance.settingsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainGetStatus', function() {
      it('should call trainGetStatus successfully', function(done) {
        //uncomment below and update the code to test trainGetStatus
        //instance.trainGetStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainTrainVersion', function() {
      it('should call trainTrainVersion successfully', function(done) {
        //uncomment below and update the code to test trainTrainVersion
        //instance.trainTrainVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsClone', function() {
      it('should call versionsClone successfully', function(done) {
        //uncomment below and update the code to test versionsClone
        //instance.versionsClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsDelete', function() {
      it('should call versionsDelete successfully', function(done) {
        //uncomment below and update the code to test versionsDelete
        //instance.versionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsDeleteUnlabelledUtterance', function() {
      it('should call versionsDeleteUnlabelledUtterance successfully', function(done) {
        //uncomment below and update the code to test versionsDeleteUnlabelledUtterance
        //instance.versionsDeleteUnlabelledUtterance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsExport', function() {
      it('should call versionsExport successfully', function(done) {
        //uncomment below and update the code to test versionsExport
        //instance.versionsExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsGet', function() {
      it('should call versionsGet successfully', function(done) {
        //uncomment below and update the code to test versionsGet
        //instance.versionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsImport', function() {
      it('should call versionsImport successfully', function(done) {
        //uncomment below and update the code to test versionsImport
        //instance.versionsImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsList', function() {
      it('should call versionsList successfully', function(done) {
        //uncomment below and update the code to test versionsList
        //instance.versionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionsUpdate', function() {
      it('should call versionsUpdate successfully', function(done) {
        //uncomment below and update the code to test versionsUpdate
        //instance.versionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
