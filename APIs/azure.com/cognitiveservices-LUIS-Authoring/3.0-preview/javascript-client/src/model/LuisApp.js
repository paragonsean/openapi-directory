/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClosedList from './ClosedList';
import HierarchicalModel from './HierarchicalModel';
import JSONModelFeature from './JSONModelFeature';
import JSONRegexFeature from './JSONRegexFeature';
import JSONUtterance from './JSONUtterance';
import PatternAny from './PatternAny';
import PatternRule from './PatternRule';
import PrebuiltEntity from './PrebuiltEntity';
import RegexEntity from './RegexEntity';

/**
 * The LuisApp model module.
 * @module model/LuisApp
 * @version 3.0-preview
 */
class LuisApp {
    /**
     * Constructs a new <code>LuisApp</code>.
     * Exported Model - An exported LUIS Application.
     * @alias module:model/LuisApp
     * @extends Object
     */
    constructor() { 
        
        LuisApp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LuisApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LuisApp} obj Optional instance to populate.
     * @return {module:model/LuisApp} The populated <code>LuisApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LuisApp();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('closedLists')) {
                obj['closedLists'] = ApiClient.convertToType(data['closedLists'], [ClosedList]);
            }
            if (data.hasOwnProperty('composites')) {
                obj['composites'] = ApiClient.convertToType(data['composites'], [HierarchicalModel]);
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = ApiClient.convertToType(data['culture'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [HierarchicalModel]);
            }
            if (data.hasOwnProperty('hierarchicals')) {
                obj['hierarchicals'] = ApiClient.convertToType(data['hierarchicals'], [HierarchicalModel]);
            }
            if (data.hasOwnProperty('intents')) {
                obj['intents'] = ApiClient.convertToType(data['intents'], [HierarchicalModel]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('patternAnyEntities')) {
                obj['patternAnyEntities'] = ApiClient.convertToType(data['patternAnyEntities'], [PatternAny]);
            }
            if (data.hasOwnProperty('patterns')) {
                obj['patterns'] = ApiClient.convertToType(data['patterns'], [PatternRule]);
            }
            if (data.hasOwnProperty('phraselists')) {
                obj['phraselists'] = ApiClient.convertToType(data['phraselists'], [JSONModelFeature]);
            }
            if (data.hasOwnProperty('prebuiltEntities')) {
                obj['prebuiltEntities'] = ApiClient.convertToType(data['prebuiltEntities'], [PrebuiltEntity]);
            }
            if (data.hasOwnProperty('regex_entities')) {
                obj['regex_entities'] = ApiClient.convertToType(data['regex_entities'], [RegexEntity]);
            }
            if (data.hasOwnProperty('regex_features')) {
                obj['regex_features'] = ApiClient.convertToType(data['regex_features'], [JSONRegexFeature]);
            }
            if (data.hasOwnProperty('utterances')) {
                obj['utterances'] = ApiClient.convertToType(data['utterances'], [JSONUtterance]);
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LuisApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LuisApp</code>.
     */
    static validateJSON(data) {
        if (data['closedLists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['closedLists'])) {
                throw new Error("Expected the field `closedLists` to be an array in the JSON data but got " + data['closedLists']);
            }
            // validate the optional field `closedLists` (array)
            for (const item of data['closedLists']) {
                ClosedList.validateJSON(item);
            };
        }
        if (data['composites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['composites'])) {
                throw new Error("Expected the field `composites` to be an array in the JSON data but got " + data['composites']);
            }
            // validate the optional field `composites` (array)
            for (const item of data['composites']) {
                HierarchicalModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['culture'] && !(typeof data['culture'] === 'string' || data['culture'] instanceof String)) {
            throw new Error("Expected the field `culture` to be a primitive type in the JSON string but got " + data['culture']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                HierarchicalModel.validateJSON(item);
            };
        }
        if (data['hierarchicals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hierarchicals'])) {
                throw new Error("Expected the field `hierarchicals` to be an array in the JSON data but got " + data['hierarchicals']);
            }
            // validate the optional field `hierarchicals` (array)
            for (const item of data['hierarchicals']) {
                HierarchicalModel.validateJSON(item);
            };
        }
        if (data['intents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intents'])) {
                throw new Error("Expected the field `intents` to be an array in the JSON data but got " + data['intents']);
            }
            // validate the optional field `intents` (array)
            for (const item of data['intents']) {
                HierarchicalModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['patternAnyEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patternAnyEntities'])) {
                throw new Error("Expected the field `patternAnyEntities` to be an array in the JSON data but got " + data['patternAnyEntities']);
            }
            // validate the optional field `patternAnyEntities` (array)
            for (const item of data['patternAnyEntities']) {
                PatternAny.validateJSON(item);
            };
        }
        if (data['patterns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patterns'])) {
                throw new Error("Expected the field `patterns` to be an array in the JSON data but got " + data['patterns']);
            }
            // validate the optional field `patterns` (array)
            for (const item of data['patterns']) {
                PatternRule.validateJSON(item);
            };
        }
        if (data['phraselists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phraselists'])) {
                throw new Error("Expected the field `phraselists` to be an array in the JSON data but got " + data['phraselists']);
            }
            // validate the optional field `phraselists` (array)
            for (const item of data['phraselists']) {
                JSONModelFeature.validateJSON(item);
            };
        }
        if (data['prebuiltEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prebuiltEntities'])) {
                throw new Error("Expected the field `prebuiltEntities` to be an array in the JSON data but got " + data['prebuiltEntities']);
            }
            // validate the optional field `prebuiltEntities` (array)
            for (const item of data['prebuiltEntities']) {
                PrebuiltEntity.validateJSON(item);
            };
        }
        if (data['regex_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regex_entities'])) {
                throw new Error("Expected the field `regex_entities` to be an array in the JSON data but got " + data['regex_entities']);
            }
            // validate the optional field `regex_entities` (array)
            for (const item of data['regex_entities']) {
                RegexEntity.validateJSON(item);
            };
        }
        if (data['regex_features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regex_features'])) {
                throw new Error("Expected the field `regex_features` to be an array in the JSON data but got " + data['regex_features']);
            }
            // validate the optional field `regex_features` (array)
            for (const item of data['regex_features']) {
                JSONRegexFeature.validateJSON(item);
            };
        }
        if (data['utterances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['utterances'])) {
                throw new Error("Expected the field `utterances` to be an array in the JSON data but got " + data['utterances']);
            }
            // validate the optional field `utterances` (array)
            for (const item of data['utterances']) {
                JSONUtterance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}



/**
 * List of list entities.
 * @member {Array.<module:model/ClosedList>} closedLists
 */
LuisApp.prototype['closedLists'] = undefined;

/**
 * List of composite entities.
 * @member {Array.<module:model/HierarchicalModel>} composites
 */
LuisApp.prototype['composites'] = undefined;

/**
 * The culture of the application. E.g.: en-us.
 * @member {String} culture
 */
LuisApp.prototype['culture'] = undefined;

/**
 * The description of the application.
 * @member {String} desc
 */
LuisApp.prototype['desc'] = undefined;

/**
 * List of entities.
 * @member {Array.<module:model/HierarchicalModel>} entities
 */
LuisApp.prototype['entities'] = undefined;

/**
 * List of hierarchical entities.
 * @member {Array.<module:model/HierarchicalModel>} hierarchicals
 */
LuisApp.prototype['hierarchicals'] = undefined;

/**
 * List of intents.
 * @member {Array.<module:model/HierarchicalModel>} intents
 */
LuisApp.prototype['intents'] = undefined;

/**
 * The name of the application.
 * @member {String} name
 */
LuisApp.prototype['name'] = undefined;

/**
 * List of Pattern.Any entities.
 * @member {Array.<module:model/PatternAny>} patternAnyEntities
 */
LuisApp.prototype['patternAnyEntities'] = undefined;

/**
 * List of patterns.
 * @member {Array.<module:model/PatternRule>} patterns
 */
LuisApp.prototype['patterns'] = undefined;

/**
 * List of model features.
 * @member {Array.<module:model/JSONModelFeature>} phraselists
 */
LuisApp.prototype['phraselists'] = undefined;

/**
 * List of prebuilt entities.
 * @member {Array.<module:model/PrebuiltEntity>} prebuiltEntities
 */
LuisApp.prototype['prebuiltEntities'] = undefined;

/**
 * List of regular expression entities.
 * @member {Array.<module:model/RegexEntity>} regex_entities
 */
LuisApp.prototype['regex_entities'] = undefined;

/**
 * List of pattern features.
 * @member {Array.<module:model/JSONRegexFeature>} regex_features
 */
LuisApp.prototype['regex_features'] = undefined;

/**
 * List of example utterances.
 * @member {Array.<module:model/JSONUtterance>} utterances
 */
LuisApp.prototype['utterances'] = undefined;

/**
 * The version ID of the application that was exported.
 * @member {String} versionId
 */
LuisApp.prototype['versionId'] = undefined;






export default LuisApp;

