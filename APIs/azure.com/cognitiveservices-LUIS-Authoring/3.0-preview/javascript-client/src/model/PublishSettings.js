/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublishSettings model module.
 * @module model/PublishSettings
 * @version 3.0-preview
 */
class PublishSettings {
    /**
     * Constructs a new <code>PublishSettings</code>.
     * The application publish settings.
     * @alias module:model/PublishSettings
     * @param id {String} The application ID.
     * @param sentimentAnalysis {Boolean} Setting sentiment analysis as true returns the sentiment of the input utterance along with the response
     * @param speech {Boolean} Enables speech priming in your app
     * @param spellChecker {Boolean} Enables spell checking of the utterance.
     */
    constructor(id, sentimentAnalysis, speech, spellChecker) { 
        
        PublishSettings.initialize(this, id, sentimentAnalysis, speech, spellChecker);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, sentimentAnalysis, speech, spellChecker) { 
        obj['id'] = id;
        obj['sentimentAnalysis'] = sentimentAnalysis;
        obj['speech'] = speech;
        obj['spellChecker'] = spellChecker;
    }

    /**
     * Constructs a <code>PublishSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishSettings} obj Optional instance to populate.
     * @return {module:model/PublishSettings} The populated <code>PublishSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishSettings();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('sentimentAnalysis')) {
                obj['sentimentAnalysis'] = ApiClient.convertToType(data['sentimentAnalysis'], 'Boolean');
            }
            if (data.hasOwnProperty('speech')) {
                obj['speech'] = ApiClient.convertToType(data['speech'], 'Boolean');
            }
            if (data.hasOwnProperty('spellChecker')) {
                obj['spellChecker'] = ApiClient.convertToType(data['spellChecker'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublishSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

PublishSettings.RequiredProperties = ["id", "sentimentAnalysis", "speech", "spellChecker"];

/**
 * The application ID.
 * @member {String} id
 */
PublishSettings.prototype['id'] = undefined;

/**
 * Setting sentiment analysis as true returns the sentiment of the input utterance along with the response
 * @member {Boolean} sentimentAnalysis
 */
PublishSettings.prototype['sentimentAnalysis'] = undefined;

/**
 * Enables speech priming in your app
 * @member {Boolean} speech
 */
PublishSettings.prototype['speech'] = undefined;

/**
 * Enables spell checking of the utterance.
 * @member {Boolean} spellChecker
 */
PublishSettings.prototype['spellChecker'] = undefined;






export default PublishSettings;

