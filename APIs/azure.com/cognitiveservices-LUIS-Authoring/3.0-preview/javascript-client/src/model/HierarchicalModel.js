/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonChild from './JsonChild';
import JsonModelFeatureInformation from './JsonModelFeatureInformation';
import PrebuiltDomainObject from './PrebuiltDomainObject';

/**
 * The HierarchicalModel model module.
 * @module model/HierarchicalModel
 * @version 3.0-preview
 */
class HierarchicalModel {
    /**
     * Constructs a new <code>HierarchicalModel</code>.
     * @alias module:model/HierarchicalModel
     */
    constructor() { 
        
        HierarchicalModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HierarchicalModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HierarchicalModel} obj Optional instance to populate.
     * @return {module:model/HierarchicalModel} The populated <code>HierarchicalModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HierarchicalModel();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [JsonChild]);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [JsonModelFeatureInformation]);
            }
            if (data.hasOwnProperty('inherits')) {
                obj['inherits'] = PrebuiltDomainObject.constructFromObject(data['inherits']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HierarchicalModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HierarchicalModel</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                JsonChild.validateJSON(item);
            };
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                JsonModelFeatureInformation.validateJSON(item);
            };
        }
        // validate the optional field `inherits`
        if (data['inherits']) { // data not null
          PrebuiltDomainObject.validateJSON(data['inherits']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/JsonChild>} children
 */
HierarchicalModel.prototype['children'] = undefined;

/**
 * @member {Array.<module:model/JsonModelFeatureInformation>} features
 */
HierarchicalModel.prototype['features'] = undefined;

/**
 * @member {module:model/PrebuiltDomainObject} inherits
 */
HierarchicalModel.prototype['inherits'] = undefined;

/**
 * @member {String} name
 */
HierarchicalModel.prototype['name'] = undefined;

/**
 * @member {Array.<String>} roles
 */
HierarchicalModel.prototype['roles'] = undefined;






export default HierarchicalModel;

