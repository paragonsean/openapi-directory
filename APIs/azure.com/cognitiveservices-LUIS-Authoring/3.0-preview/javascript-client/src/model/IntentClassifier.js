/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelInfo from './ModelInfo';
import ReadableType from './ReadableType';

/**
 * The IntentClassifier model module.
 * @module model/IntentClassifier
 * @version 3.0-preview
 */
class IntentClassifier {
    /**
     * Constructs a new <code>IntentClassifier</code>.
     * Intent Classifier.
     * @alias module:model/IntentClassifier
     * @implements module:model/ModelInfo
     * @param id {String} The ID of the Entity Model.
     * @param readableType {module:model/ReadableType} 
     */
    constructor(id, readableType) { 
        ModelInfo.initialize(this, id, readableType);
        IntentClassifier.initialize(this, id, readableType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, readableType) { 
        obj['id'] = id;
        obj['readableType'] = readableType;
    }

    /**
     * Constructs a <code>IntentClassifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntentClassifier} obj Optional instance to populate.
     * @return {module:model/IntentClassifier} The populated <code>IntentClassifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntentClassifier();
            ModelInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('customPrebuiltDomainName')) {
                obj['customPrebuiltDomainName'] = ApiClient.convertToType(data['customPrebuiltDomainName'], 'String');
            }
            if (data.hasOwnProperty('customPrebuiltModelName')) {
                obj['customPrebuiltModelName'] = ApiClient.convertToType(data['customPrebuiltModelName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('readableType')) {
                obj['readableType'] = ReadableType.constructFromObject(data['readableType']);
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntentClassifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntentClassifier</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntentClassifier.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customPrebuiltDomainName'] && !(typeof data['customPrebuiltDomainName'] === 'string' || data['customPrebuiltDomainName'] instanceof String)) {
            throw new Error("Expected the field `customPrebuiltDomainName` to be a primitive type in the JSON string but got " + data['customPrebuiltDomainName']);
        }
        // ensure the json data is a string
        if (data['customPrebuiltModelName'] && !(typeof data['customPrebuiltModelName'] === 'string' || data['customPrebuiltModelName'] instanceof String)) {
            throw new Error("Expected the field `customPrebuiltModelName` to be a primitive type in the JSON string but got " + data['customPrebuiltModelName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

IntentClassifier.RequiredProperties = ["id", "readableType"];

/**
 * The domain name.
 * @member {String} customPrebuiltDomainName
 */
IntentClassifier.prototype['customPrebuiltDomainName'] = undefined;

/**
 * The intent name or entity name.
 * @member {String} customPrebuiltModelName
 */
IntentClassifier.prototype['customPrebuiltModelName'] = undefined;

/**
 * The ID of the Entity Model.
 * @member {String} id
 */
IntentClassifier.prototype['id'] = undefined;

/**
 * Name of the Entity Model.
 * @member {String} name
 */
IntentClassifier.prototype['name'] = undefined;

/**
 * @member {module:model/ReadableType} readableType
 */
IntentClassifier.prototype['readableType'] = undefined;

/**
 * The type ID of the Entity Model.
 * @member {Number} typeId
 */
IntentClassifier.prototype['typeId'] = undefined;


// Implement ModelInfo interface:
/**
 * The ID of the Entity Model.
 * @member {String} id
 */
ModelInfo.prototype['id'] = undefined;
/**
 * Name of the Entity Model.
 * @member {String} name
 */
ModelInfo.prototype['name'] = undefined;
/**
 * @member {module:model/ReadableType} readableType
 */
ModelInfo.prototype['readableType'] = undefined;
/**
 * The type ID of the Entity Model.
 * @member {Number} typeId
 */
ModelInfo.prototype['typeId'] = undefined;




export default IntentClassifier;

