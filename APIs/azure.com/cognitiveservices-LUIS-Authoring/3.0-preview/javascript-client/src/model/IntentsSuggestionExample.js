/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityPrediction from './EntityPrediction';
import IntentPrediction from './IntentPrediction';

/**
 * The IntentsSuggestionExample model module.
 * @module model/IntentsSuggestionExample
 * @version 3.0-preview
 */
class IntentsSuggestionExample {
    /**
     * Constructs a new <code>IntentsSuggestionExample</code>.
     * Predicted/suggested intent.
     * @alias module:model/IntentsSuggestionExample
     */
    constructor() { 
        
        IntentsSuggestionExample.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntentsSuggestionExample</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntentsSuggestionExample} obj Optional instance to populate.
     * @return {module:model/IntentsSuggestionExample} The populated <code>IntentsSuggestionExample</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntentsSuggestionExample();

            if (data.hasOwnProperty('entityPredictions')) {
                obj['entityPredictions'] = ApiClient.convertToType(data['entityPredictions'], [EntityPrediction]);
            }
            if (data.hasOwnProperty('intentPredictions')) {
                obj['intentPredictions'] = ApiClient.convertToType(data['intentPredictions'], [IntentPrediction]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('tokenizedText')) {
                obj['tokenizedText'] = ApiClient.convertToType(data['tokenizedText'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntentsSuggestionExample</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntentsSuggestionExample</code>.
     */
    static validateJSON(data) {
        if (data['entityPredictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityPredictions'])) {
                throw new Error("Expected the field `entityPredictions` to be an array in the JSON data but got " + data['entityPredictions']);
            }
            // validate the optional field `entityPredictions` (array)
            for (const item of data['entityPredictions']) {
                EntityPrediction.validateJSON(item);
            };
        }
        if (data['intentPredictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intentPredictions'])) {
                throw new Error("Expected the field `intentPredictions` to be an array in the JSON data but got " + data['intentPredictions']);
            }
            // validate the optional field `intentPredictions` (array)
            for (const item of data['intentPredictions']) {
                IntentPrediction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tokenizedText'])) {
            throw new Error("Expected the field `tokenizedText` to be an array in the JSON data but got " + data['tokenizedText']);
        }

        return true;
    }


}



/**
 * Predicted/suggested entities.
 * @member {Array.<module:model/EntityPrediction>} entityPredictions
 */
IntentsSuggestionExample.prototype['entityPredictions'] = undefined;

/**
 * Predicted/suggested intents.
 * @member {Array.<module:model/IntentPrediction>} intentPredictions
 */
IntentsSuggestionExample.prototype['intentPredictions'] = undefined;

/**
 * The utterance. For example, \"What's the weather like in seattle?\"
 * @member {String} text
 */
IntentsSuggestionExample.prototype['text'] = undefined;

/**
 * The tokenized utterance.
 * @member {Array.<String>} tokenizedText
 */
IntentsSuggestionExample.prototype['tokenizedText'] = undefined;






export default IntentsSuggestionExample;

