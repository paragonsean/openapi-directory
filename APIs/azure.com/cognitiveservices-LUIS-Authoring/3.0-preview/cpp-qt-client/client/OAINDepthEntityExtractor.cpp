/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINDepthEntityExtractor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINDepthEntityExtractor::OAINDepthEntityExtractor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINDepthEntityExtractor::OAINDepthEntityExtractor() {
    this->initializeModel();
}

OAINDepthEntityExtractor::~OAINDepthEntityExtractor() {}

void OAINDepthEntityExtractor::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_custom_prebuilt_domain_name_isSet = false;
    m_custom_prebuilt_domain_name_isValid = false;

    m_custom_prebuilt_model_name_isSet = false;
    m_custom_prebuilt_model_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_readable_type_isSet = false;
    m_readable_type_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAINDepthEntityExtractor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINDepthEntityExtractor::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_custom_prebuilt_domain_name_isValid = ::OpenAPI::fromJsonValue(m_custom_prebuilt_domain_name, json[QString("customPrebuiltDomainName")]);
    m_custom_prebuilt_domain_name_isSet = !json[QString("customPrebuiltDomainName")].isNull() && m_custom_prebuilt_domain_name_isValid;

    m_custom_prebuilt_model_name_isValid = ::OpenAPI::fromJsonValue(m_custom_prebuilt_model_name, json[QString("customPrebuiltModelName")]);
    m_custom_prebuilt_model_name_isSet = !json[QString("customPrebuiltModelName")].isNull() && m_custom_prebuilt_model_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_readable_type_isValid = ::OpenAPI::fromJsonValue(m_readable_type, json[QString("readableType")]);
    m_readable_type_isSet = !json[QString("readableType")].isNull() && m_readable_type_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAINDepthEntityExtractor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINDepthEntityExtractor::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_custom_prebuilt_domain_name_isSet) {
        obj.insert(QString("customPrebuiltDomainName"), ::OpenAPI::toJsonValue(m_custom_prebuilt_domain_name));
    }
    if (m_custom_prebuilt_model_name_isSet) {
        obj.insert(QString("customPrebuiltModelName"), ::OpenAPI::toJsonValue(m_custom_prebuilt_model_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_readable_type.isSet()) {
        obj.insert(QString("readableType"), ::OpenAPI::toJsonValue(m_readable_type));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QList<OAIChildEntity> OAINDepthEntityExtractor::getChildren() const {
    return m_children;
}
void OAINDepthEntityExtractor::setChildren(const QList<OAIChildEntity> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAINDepthEntityExtractor::is_children_Set() const{
    return m_children_isSet;
}

bool OAINDepthEntityExtractor::is_children_Valid() const{
    return m_children_isValid;
}

QString OAINDepthEntityExtractor::getCustomPrebuiltDomainName() const {
    return m_custom_prebuilt_domain_name;
}
void OAINDepthEntityExtractor::setCustomPrebuiltDomainName(const QString &custom_prebuilt_domain_name) {
    m_custom_prebuilt_domain_name = custom_prebuilt_domain_name;
    m_custom_prebuilt_domain_name_isSet = true;
}

bool OAINDepthEntityExtractor::is_custom_prebuilt_domain_name_Set() const{
    return m_custom_prebuilt_domain_name_isSet;
}

bool OAINDepthEntityExtractor::is_custom_prebuilt_domain_name_Valid() const{
    return m_custom_prebuilt_domain_name_isValid;
}

QString OAINDepthEntityExtractor::getCustomPrebuiltModelName() const {
    return m_custom_prebuilt_model_name;
}
void OAINDepthEntityExtractor::setCustomPrebuiltModelName(const QString &custom_prebuilt_model_name) {
    m_custom_prebuilt_model_name = custom_prebuilt_model_name;
    m_custom_prebuilt_model_name_isSet = true;
}

bool OAINDepthEntityExtractor::is_custom_prebuilt_model_name_Set() const{
    return m_custom_prebuilt_model_name_isSet;
}

bool OAINDepthEntityExtractor::is_custom_prebuilt_model_name_Valid() const{
    return m_custom_prebuilt_model_name_isValid;
}

QString OAINDepthEntityExtractor::getId() const {
    return m_id;
}
void OAINDepthEntityExtractor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINDepthEntityExtractor::is_id_Set() const{
    return m_id_isSet;
}

bool OAINDepthEntityExtractor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINDepthEntityExtractor::getName() const {
    return m_name;
}
void OAINDepthEntityExtractor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINDepthEntityExtractor::is_name_Set() const{
    return m_name_isSet;
}

bool OAINDepthEntityExtractor::is_name_Valid() const{
    return m_name_isValid;
}

OAIReadableType OAINDepthEntityExtractor::getReadableType() const {
    return m_readable_type;
}
void OAINDepthEntityExtractor::setReadableType(const OAIReadableType &readable_type) {
    m_readable_type = readable_type;
    m_readable_type_isSet = true;
}

bool OAINDepthEntityExtractor::is_readable_type_Set() const{
    return m_readable_type_isSet;
}

bool OAINDepthEntityExtractor::is_readable_type_Valid() const{
    return m_readable_type_isValid;
}

qint32 OAINDepthEntityExtractor::getTypeId() const {
    return m_type_id;
}
void OAINDepthEntityExtractor::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAINDepthEntityExtractor::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAINDepthEntityExtractor::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QList<OAIEntityRole> OAINDepthEntityExtractor::getRoles() const {
    return m_roles;
}
void OAINDepthEntityExtractor::setRoles(const QList<OAIEntityRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAINDepthEntityExtractor::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAINDepthEntityExtractor::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAINDepthEntityExtractor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_prebuilt_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_prebuilt_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINDepthEntityExtractor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_readable_type_isValid && true;
}

} // namespace OpenAPI
