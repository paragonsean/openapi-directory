/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonModelFeatureInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonModelFeatureInformation::OAIJsonModelFeatureInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonModelFeatureInformation::OAIJsonModelFeatureInformation() {
    this->initializeModel();
}

OAIJsonModelFeatureInformation::~OAIJsonModelFeatureInformation() {}

void OAIJsonModelFeatureInformation::initializeModel() {

    m_feature_name_isSet = false;
    m_feature_name_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;
}

void OAIJsonModelFeatureInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonModelFeatureInformation::fromJsonObject(QJsonObject json) {

    m_feature_name_isValid = ::OpenAPI::fromJsonValue(m_feature_name, json[QString("featureName")]);
    m_feature_name_isSet = !json[QString("featureName")].isNull() && m_feature_name_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("modelName")]);
    m_model_name_isSet = !json[QString("modelName")].isNull() && m_model_name_isValid;
}

QString OAIJsonModelFeatureInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonModelFeatureInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_name_isSet) {
        obj.insert(QString("featureName"), ::OpenAPI::toJsonValue(m_feature_name));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("modelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    return obj;
}

QString OAIJsonModelFeatureInformation::getFeatureName() const {
    return m_feature_name;
}
void OAIJsonModelFeatureInformation::setFeatureName(const QString &feature_name) {
    m_feature_name = feature_name;
    m_feature_name_isSet = true;
}

bool OAIJsonModelFeatureInformation::is_feature_name_Set() const{
    return m_feature_name_isSet;
}

bool OAIJsonModelFeatureInformation::is_feature_name_Valid() const{
    return m_feature_name_isValid;
}

QString OAIJsonModelFeatureInformation::getModelName() const {
    return m_model_name;
}
void OAIJsonModelFeatureInformation::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIJsonModelFeatureInformation::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIJsonModelFeatureInformation::is_model_name_Valid() const{
    return m_model_name_isValid;
}

bool OAIJsonModelFeatureInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonModelFeatureInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
