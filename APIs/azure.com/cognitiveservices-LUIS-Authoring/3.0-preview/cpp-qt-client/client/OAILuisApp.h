/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILuisApp.h
 *
 * Exported Model - An exported LUIS Application.
 */

#ifndef OAILuisApp_H
#define OAILuisApp_H

#include <QJsonObject>

#include "OAIClosedList.h"
#include "OAIHierarchicalModel.h"
#include "OAIJSONModelFeature.h"
#include "OAIJSONRegexFeature.h"
#include "OAIJSONUtterance.h"
#include "OAIPatternAny.h"
#include "OAIPatternRule.h"
#include "OAIPrebuiltEntity.h"
#include "OAIRegexEntity.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClosedList;
class OAIHierarchicalModel;
class OAIPatternAny;
class OAIPatternRule;
class OAIJSONModelFeature;
class OAIPrebuiltEntity;
class OAIRegexEntity;
class OAIJSONRegexFeature;
class OAIJSONUtterance;

class OAILuisApp : public OAIObject {
public:
    OAILuisApp();
    OAILuisApp(QString json);
    ~OAILuisApp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIClosedList> getClosedLists() const;
    void setClosedLists(const QList<OAIClosedList> &closed_lists);
    bool is_closed_lists_Set() const;
    bool is_closed_lists_Valid() const;

    QList<OAIHierarchicalModel> getComposites() const;
    void setComposites(const QList<OAIHierarchicalModel> &composites);
    bool is_composites_Set() const;
    bool is_composites_Valid() const;

    QString getCulture() const;
    void setCulture(const QString &culture);
    bool is_culture_Set() const;
    bool is_culture_Valid() const;

    QString getDesc() const;
    void setDesc(const QString &desc);
    bool is_desc_Set() const;
    bool is_desc_Valid() const;

    QList<OAIHierarchicalModel> getEntities() const;
    void setEntities(const QList<OAIHierarchicalModel> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QList<OAIHierarchicalModel> getHierarchicals() const;
    void setHierarchicals(const QList<OAIHierarchicalModel> &hierarchicals);
    bool is_hierarchicals_Set() const;
    bool is_hierarchicals_Valid() const;

    QList<OAIHierarchicalModel> getIntents() const;
    void setIntents(const QList<OAIHierarchicalModel> &intents);
    bool is_intents_Set() const;
    bool is_intents_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPatternAny> getPatternAnyEntities() const;
    void setPatternAnyEntities(const QList<OAIPatternAny> &pattern_any_entities);
    bool is_pattern_any_entities_Set() const;
    bool is_pattern_any_entities_Valid() const;

    QList<OAIPatternRule> getPatterns() const;
    void setPatterns(const QList<OAIPatternRule> &patterns);
    bool is_patterns_Set() const;
    bool is_patterns_Valid() const;

    QList<OAIJSONModelFeature> getPhraselists() const;
    void setPhraselists(const QList<OAIJSONModelFeature> &phraselists);
    bool is_phraselists_Set() const;
    bool is_phraselists_Valid() const;

    QList<OAIPrebuiltEntity> getPrebuiltEntities() const;
    void setPrebuiltEntities(const QList<OAIPrebuiltEntity> &prebuilt_entities);
    bool is_prebuilt_entities_Set() const;
    bool is_prebuilt_entities_Valid() const;

    QList<OAIRegexEntity> getRegexEntities() const;
    void setRegexEntities(const QList<OAIRegexEntity> &regex_entities);
    bool is_regex_entities_Set() const;
    bool is_regex_entities_Valid() const;

    QList<OAIJSONRegexFeature> getRegexFeatures() const;
    void setRegexFeatures(const QList<OAIJSONRegexFeature> &regex_features);
    bool is_regex_features_Set() const;
    bool is_regex_features_Valid() const;

    QList<OAIJSONUtterance> getUtterances() const;
    void setUtterances(const QList<OAIJSONUtterance> &utterances);
    bool is_utterances_Set() const;
    bool is_utterances_Valid() const;

    QString getVersionId() const;
    void setVersionId(const QString &version_id);
    bool is_version_id_Set() const;
    bool is_version_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIClosedList> m_closed_lists;
    bool m_closed_lists_isSet;
    bool m_closed_lists_isValid;

    QList<OAIHierarchicalModel> m_composites;
    bool m_composites_isSet;
    bool m_composites_isValid;

    QString m_culture;
    bool m_culture_isSet;
    bool m_culture_isValid;

    QString m_desc;
    bool m_desc_isSet;
    bool m_desc_isValid;

    QList<OAIHierarchicalModel> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QList<OAIHierarchicalModel> m_hierarchicals;
    bool m_hierarchicals_isSet;
    bool m_hierarchicals_isValid;

    QList<OAIHierarchicalModel> m_intents;
    bool m_intents_isSet;
    bool m_intents_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPatternAny> m_pattern_any_entities;
    bool m_pattern_any_entities_isSet;
    bool m_pattern_any_entities_isValid;

    QList<OAIPatternRule> m_patterns;
    bool m_patterns_isSet;
    bool m_patterns_isValid;

    QList<OAIJSONModelFeature> m_phraselists;
    bool m_phraselists_isSet;
    bool m_phraselists_isValid;

    QList<OAIPrebuiltEntity> m_prebuilt_entities;
    bool m_prebuilt_entities_isSet;
    bool m_prebuilt_entities_isValid;

    QList<OAIRegexEntity> m_regex_entities;
    bool m_regex_entities_isSet;
    bool m_regex_entities_isValid;

    QList<OAIJSONRegexFeature> m_regex_features;
    bool m_regex_features_isSet;
    bool m_regex_features_isValid;

    QList<OAIJSONUtterance> m_utterances;
    bool m_utterances_isSet;
    bool m_utterances_isValid;

    QString m_version_id;
    bool m_version_id_isSet;
    bool m_version_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILuisApp)

#endif // OAILuisApp_H
