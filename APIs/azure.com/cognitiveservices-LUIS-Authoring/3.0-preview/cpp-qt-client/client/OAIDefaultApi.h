/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppVersionSettingObject.h"
#include "OAIApplicationCreateObject.h"
#include "OAIApplicationInfoResponse.h"
#include "OAIApplicationPublishObject.h"
#include "OAIApplicationSettingUpdateObject.h"
#include "OAIApplicationSettings.h"
#include "OAIApplicationUpdateObject.h"
#include "OAIAvailableCulture.h"
#include "OAIAvailablePrebuiltEntityModel.h"
#include "OAIAzureAccountInfoObject.h"
#include "OAIBatchLabelExample.h"
#include "OAIChildEntityModelCreateObject.h"
#include "OAIClosedListEntityExtractor.h"
#include "OAIClosedListModelCreateObject.h"
#include "OAIClosedListModelPatchObject.h"
#include "OAIClosedListModelUpdateObject.h"
#include "OAICollaboratorsArray.h"
#include "OAICompositeEntityExtractor.h"
#include "OAICompositeEntityModel.h"
#include "OAICustomPrebuiltModel.h"
#include "OAIEnqueueTrainingResponse.h"
#include "OAIEntitiesSuggestionExample.h"
#include "OAIEntityExtractor.h"
#include "OAIEntityModelCreateObject.h"
#include "OAIEntityModelUpdateObject.h"
#include "OAIEntityRole.h"
#include "OAIEntityRoleCreateObject.h"
#include "OAIEntityRoleUpdateObject.h"
#include "OAIErrorResponse.h"
#include "OAIExampleLabelObject.h"
#include "OAIExplicitListItem.h"
#include "OAIExplicitListItemCreateObject.h"
#include "OAIExplicitListItemUpdateObject.h"
#include "OAIFeaturesResponseObject.h"
#include "OAIHierarchicalChildEntity.h"
#include "OAIHierarchicalEntityExtractor.h"
#include "OAIHttpFileElement.h"
#include "OAIIntentClassifier.h"
#include "OAIIntentsSuggestionExample.h"
#include "OAILabelExampleResponse.h"
#include "OAILabelTextObject.h"
#include "OAILabeledUtterance.h"
#include "OAILuisApp.h"
#include "OAIModelCreateObject.h"
#include "OAIModelFeatureInformation.h"
#include "OAIModelInfoResponse.h"
#include "OAIModelTrainingInfo.h"
#include "OAIModelUpdateObject.h"
#include "OAIModel_AddCompositeEntityChild_request.h"
#include "OAINDepthEntityExtractor.h"
#include "OAIObject.h"
#include "OAIOperationStatus.h"
#include "OAIPatternAnyEntityExtractor.h"
#include "OAIPatternAnyModelCreateObject.h"
#include "OAIPatternAnyModelUpdateObject.h"
#include "OAIPatternRuleCreateObject.h"
#include "OAIPatternRuleInfo.h"
#include "OAIPatternRuleUpdateObject.h"
#include "OAIPersonalAssistantsResponse.h"
#include "OAIPhraseListFeatureInfo.h"
#include "OAIPhraselistCreateObject.h"
#include "OAIPhraselistUpdateObject.h"
#include "OAIPrebuiltDomain.h"
#include "OAIPrebuiltDomainCreateBaseObject.h"
#include "OAIPrebuiltDomainCreateObject.h"
#include "OAIPrebuiltDomainModelCreateObject.h"
#include "OAIPrebuiltEntityExtractor.h"
#include "OAIProductionOrStagingEndpointInfo.h"
#include "OAIPublishSettingUpdateObject.h"
#include "OAIPublishSettings.h"
#include "OAIRegexEntityExtractor.h"
#include "OAIRegexModelCreateObject.h"
#include "OAIRegexModelUpdateObject.h"
#include "OAITaskUpdateObject.h"
#include "OAIUserAccessList.h"
#include "OAIUserCollaborator.h"
#include "OAIVersionInfo.h"
#include "OAIWordListBaseUpdateObject.h"
#include "OAIWordListObject.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  application_create_object OAIApplicationCreateObject [required]
    */
    virtual void appsAdd(const OAIApplicationCreateObject &application_create_object);

    /**
    * @param[in]  prebuilt_domain_create_object OAIPrebuiltDomainCreateObject [required]
    */
    virtual void appsAddCustomPrebuiltDomain(const OAIPrebuiltDomainCreateObject &prebuilt_domain_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void appsDelete(const QString &app_id, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsDownloadQueryLogs(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsGetPublishSettings(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsGetSettings(const QString &app_id);

    /**
    * @param[in]  luis_app OAILuisApp [required]
    * @param[in]  app_name QString [optional]
    */
    virtual void appsImport(const OAILuisApp &luis_app, const ::OpenAPI::OptionalParam<QString> &app_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void appsList(const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());


    virtual void appsListAvailableCustomPrebuiltDomains();

    /**
    * @param[in]  culture QString [required]
    */
    virtual void appsListAvailableCustomPrebuiltDomainsForCulture(const QString &culture);


    virtual void appsListCortanaEndpoints();


    virtual void appsListDomains();

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsListEndpoints(const QString &app_id);


    virtual void appsListSupportedCultures();


    virtual void appsListUsageScenarios();

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  slot_name QString [required]
    */
    virtual void appsPackagePublishedApplicationAsGzip(const QString &app_id, const QString &slot_name);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void appsPackageTrainedApplicationAsGzip(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  application_publish_object OAIApplicationPublishObject [required]
    */
    virtual void appsPublish(const QString &app_id, const OAIApplicationPublishObject &application_publish_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  application_update_object OAIApplicationUpdateObject [required]
    */
    virtual void appsUpdate(const QString &app_id, const OAIApplicationUpdateObject &application_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  publish_setting_update_object OAIPublishSettingUpdateObject [required]
    */
    virtual void appsUpdatePublishSettings(const QString &app_id, const OAIPublishSettingUpdateObject &publish_setting_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  application_setting_update_object OAIApplicationSettingUpdateObject [required]
    */
    virtual void appsUpdateSettings(const QString &app_id, const OAIApplicationSettingUpdateObject &application_setting_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  azure_account_info_object OAIAzureAccountInfoObject [optional]
    */
    virtual void azureAccountsAssignToApp(const QString &app_id, const QString &authorization, const ::OpenAPI::OptionalParam<OAIAzureAccountInfoObject> &azure_account_info_object = ::OpenAPI::OptionalParam<OAIAzureAccountInfoObject>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void azureAccountsGetAssigned(const QString &app_id, const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    */
    virtual void azureAccountsListUserLUISAccounts(const QString &authorization);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  azure_account_info_object OAIAzureAccountInfoObject [optional]
    */
    virtual void azureAccountsRemoveFromApp(const QString &app_id, const QString &authorization, const ::OpenAPI::OptionalParam<OAIAzureAccountInfoObject> &azure_account_info_object = ::OpenAPI::OptionalParam<OAIAzureAccountInfoObject>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  example_label_object OAIExampleLabelObject [required]
    */
    virtual void examplesAdd(const QString &app_id, const QString &version_id, const OAIExampleLabelObject &example_label_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  example_label_object_array QList<OAIExampleLabelObject> [required]
    */
    virtual void examplesBatch(const QString &app_id, const QString &version_id, const QList<OAIExampleLabelObject> &example_label_object_array);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  example_id qint32 [required]
    */
    virtual void examplesDelete(const QString &app_id, const QString &version_id, const qint32 &example_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void examplesList(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  feature_relation_create_object OAIModelFeatureInformation [required]
    */
    virtual void featuresAddEntityFeature(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIModelFeatureInformation &feature_relation_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  feature_relation_create_object OAIModelFeatureInformation [required]
    */
    virtual void featuresAddIntentFeature(const QString &app_id, const QString &version_id, const QString &intent_id, const OAIModelFeatureInformation &feature_relation_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  phraselist_create_object OAIPhraselistCreateObject [required]
    */
    virtual void featuresAddPhraseList(const QString &app_id, const QString &version_id, const OAIPhraselistCreateObject &phraselist_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  phraselist_id qint32 [required]
    */
    virtual void featuresDeletePhraseList(const QString &app_id, const QString &version_id, const qint32 &phraselist_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  phraselist_id qint32 [required]
    */
    virtual void featuresGetPhraseList(const QString &app_id, const QString &version_id, const qint32 &phraselist_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void featuresList(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void featuresListPhraseLists(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  phraselist_id qint32 [required]
    * @param[in]  phraselist_update_object OAIPhraselistUpdateObject [optional]
    */
    virtual void featuresUpdatePhraseList(const QString &app_id, const QString &version_id, const qint32 &phraselist_id, const ::OpenAPI::OptionalParam<OAIPhraselistUpdateObject> &phraselist_update_object = ::OpenAPI::OptionalParam<OAIPhraselistUpdateObject>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  closed_list_model_create_object OAIClosedListModelCreateObject [required]
    */
    virtual void modelAddClosedList(const QString &app_id, const QString &version_id, const OAIClosedListModelCreateObject &closed_list_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  composite_child_model_create_object OAIModel_AddCompositeEntityChild_request [required]
    */
    virtual void modelAddCompositeEntityChild(const QString &app_id, const QString &version_id, const QString &c_entity_id, const OAIModel_AddCompositeEntityChild_request &composite_child_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_domain_object OAIPrebuiltDomainCreateBaseObject [required]
    */
    virtual void modelAddCustomPrebuiltDomain(const QString &app_id, const QString &version_id, const OAIPrebuiltDomainCreateBaseObject &prebuilt_domain_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_domain_model_create_object OAIPrebuiltDomainModelCreateObject [required]
    */
    virtual void modelAddCustomPrebuiltEntity(const QString &app_id, const QString &version_id, const OAIPrebuiltDomainModelCreateObject &prebuilt_domain_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_domain_model_create_object OAIPrebuiltDomainModelCreateObject [required]
    */
    virtual void modelAddCustomPrebuiltIntent(const QString &app_id, const QString &version_id, const OAIPrebuiltDomainModelCreateObject &prebuilt_domain_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_model_create_object OAIEntityModelCreateObject [required]
    */
    virtual void modelAddEntity(const QString &app_id, const QString &version_id, const OAIEntityModelCreateObject &entity_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  child_entity_model_create_object OAIChildEntityModelCreateObject [required]
    */
    virtual void modelAddEntityChild(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIChildEntityModelCreateObject &child_entity_model_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  item OAIExplicitListItemCreateObject [required]
    */
    virtual void modelAddExplicitListItem(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIExplicitListItemCreateObject &item);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_create_object OAIModelCreateObject [required]
    */
    virtual void modelAddIntent(const QString &app_id, const QString &version_id, const OAIModelCreateObject &intent_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_extractor_names QList<QString> [required]
    */
    virtual void modelAddPrebuilt(const QString &app_id, const QString &version_id, const QList<QString> &prebuilt_extractor_names);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    * @param[in]  word_list_create_object OAIWordListObject [required]
    */
    virtual void modelAddSubList(const QString &app_id, const QString &version_id, const QString &cl_entity_id, const OAIWordListObject &word_list_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateClosedListEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateCompositeEntityRole(const QString &app_id, const QString &version_id, const QString &c_entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateCustomPrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateHierarchicalEntityRole(const QString &app_id, const QString &version_id, const QString &h_entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  extractor_create_object OAIPatternAnyModelCreateObject [required]
    */
    virtual void modelCreatePatternAnyEntityModel(const QString &app_id, const QString &version_id, const OAIPatternAnyModelCreateObject &extractor_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreatePatternAnyEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreatePrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  regex_entity_extractor_create_obj OAIRegexModelCreateObject [required]
    */
    virtual void modelCreateRegexEntityModel(const QString &app_id, const QString &version_id, const OAIRegexModelCreateObject &regex_entity_extractor_create_obj);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_role_create_object OAIEntityRoleCreateObject [required]
    */
    virtual void modelCreateRegexEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityRoleCreateObject &entity_role_create_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    */
    virtual void modelDeleteClosedList(const QString &app_id, const QString &version_id, const QString &cl_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteClosedListEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    */
    virtual void modelDeleteCompositeEntity(const QString &app_id, const QString &version_id, const QString &c_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  c_child_id QString [required]
    */
    virtual void modelDeleteCompositeEntityChild(const QString &app_id, const QString &version_id, const QString &c_entity_id, const QString &c_child_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteCompositeEntityRole(const QString &app_id, const QString &version_id, const QString &c_entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteCustomEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  domain_name QString [required]
    */
    virtual void modelDeleteCustomPrebuiltDomain(const QString &app_id, const QString &version_id, const QString &domain_name);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelDeleteEntity(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  feature_relation_delete_object OAIModelFeatureInformation [required]
    */
    virtual void modelDeleteEntityFeature(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIModelFeatureInformation &feature_relation_delete_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  item_id qint64 [required]
    */
    virtual void modelDeleteExplicitListItem(const QString &app_id, const QString &version_id, const QString &entity_id, const qint64 &item_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    */
    virtual void modelDeleteHierarchicalEntity(const QString &app_id, const QString &version_id, const QString &h_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  h_child_id QString [required]
    */
    virtual void modelDeleteHierarchicalEntityChild(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &h_child_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteHierarchicalEntityRole(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  delete_utterances bool [optional]
    */
    virtual void modelDeleteIntent(const QString &app_id, const QString &version_id, const QString &intent_id, const ::OpenAPI::OptionalParam<bool> &delete_utterances = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  feature_relation_delete_object OAIModelFeatureInformation [required]
    */
    virtual void modelDeleteIntentFeature(const QString &app_id, const QString &version_id, const QString &intent_id, const OAIModelFeatureInformation &feature_relation_delete_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelDeletePatternAnyEntityModel(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeletePatternAnyEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_id QString [required]
    */
    virtual void modelDeletePrebuilt(const QString &app_id, const QString &version_id, const QString &prebuilt_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeletePrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  regex_entity_id QString [required]
    */
    virtual void modelDeleteRegexEntityModel(const QString &app_id, const QString &version_id, const QString &regex_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelDeleteRegexEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    * @param[in]  sub_list_id qint64 [required]
    */
    virtual void modelDeleteSubList(const QString &app_id, const QString &version_id, const QString &cl_entity_id, const qint64 &sub_list_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelExamples(const QString &app_id, const QString &version_id, const QString &model_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    */
    virtual void modelGetClosedList(const QString &app_id, const QString &version_id, const QString &cl_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetClosedListEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    */
    virtual void modelGetCompositeEntity(const QString &app_id, const QString &version_id, const QString &c_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetCompositeEntityRole(const QString &app_id, const QString &version_id, const QString &c_entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetCustomEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelGetEntity(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelGetEntityFeatures(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelGetExplicitList(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  item_id qint64 [required]
    */
    virtual void modelGetExplicitListItem(const QString &app_id, const QString &version_id, const QString &entity_id, const qint64 &item_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    */
    virtual void modelGetHierarchicalEntity(const QString &app_id, const QString &version_id, const QString &h_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  h_child_id QString [required]
    */
    virtual void modelGetHierarchicalEntityChild(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &h_child_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetHierarchicalEntityRole(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    */
    virtual void modelGetIntent(const QString &app_id, const QString &version_id, const QString &intent_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    */
    virtual void modelGetIntentFeatures(const QString &app_id, const QString &version_id, const QString &intent_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelGetPatternAnyEntityInfo(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetPatternAnyEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  prebuilt_id QString [required]
    */
    virtual void modelGetPrebuilt(const QString &app_id, const QString &version_id, const QString &prebuilt_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetPrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  regex_entity_id QString [required]
    */
    virtual void modelGetRegexEntityEntityInfo(const QString &app_id, const QString &version_id, const QString &regex_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void modelGetRegexEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListClosedListEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListClosedLists(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListCompositeEntities(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    */
    virtual void modelListCompositeEntityRoles(const QString &app_id, const QString &version_id, const QString &c_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void modelListCustomPrebuiltEntities(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListCustomPrebuiltEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void modelListCustomPrebuiltIntents(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void modelListCustomPrebuiltModels(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListEntities(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListEntitySuggestions(const QString &app_id, const QString &version_id, const QString &entity_id, const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListHierarchicalEntities(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    */
    virtual void modelListHierarchicalEntityRoles(const QString &app_id, const QString &version_id, const QString &h_entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListIntentSuggestions(const QString &app_id, const QString &version_id, const QString &intent_id, const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListIntents(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListModels(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListPatternAnyEntityInfos(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListPatternAnyEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void modelListPrebuiltEntities(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListPrebuiltEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListPrebuilts(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void modelListRegexEntityInfos(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    */
    virtual void modelListRegexEntityRoles(const QString &app_id, const QString &version_id, const QString &entity_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    * @param[in]  closed_list_model_patch_object OAIClosedListModelPatchObject [required]
    */
    virtual void modelPatchClosedList(const QString &app_id, const QString &version_id, const QString &cl_entity_id, const OAIClosedListModelPatchObject &closed_list_model_patch_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  feature_relations_update_object QList<OAIModelFeatureInformation> [required]
    */
    virtual void modelReplaceEntityFeatures(const QString &app_id, const QString &version_id, const QString &entity_id, const QList<OAIModelFeatureInformation> &feature_relations_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  feature_relations_update_object QList<OAIModelFeatureInformation> [required]
    */
    virtual void modelReplaceIntentFeatures(const QString &app_id, const QString &version_id, const QString &intent_id, const QList<OAIModelFeatureInformation> &feature_relations_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    * @param[in]  closed_list_model_update_object OAIClosedListModelUpdateObject [required]
    */
    virtual void modelUpdateClosedList(const QString &app_id, const QString &version_id, const QString &cl_entity_id, const OAIClosedListModelUpdateObject &closed_list_model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateClosedListEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  composite_model_update_object OAICompositeEntityModel [required]
    */
    virtual void modelUpdateCompositeEntity(const QString &app_id, const QString &version_id, const QString &c_entity_id, const OAICompositeEntityModel &composite_model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  c_entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateCompositeEntityRole(const QString &app_id, const QString &version_id, const QString &c_entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateCustomPrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_model_update_object OAIEntityModelUpdateObject [required]
    */
    virtual void modelUpdateEntityChild(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIEntityModelUpdateObject &entity_model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  item_id qint64 [required]
    * @param[in]  item OAIExplicitListItemUpdateObject [required]
    */
    virtual void modelUpdateExplicitListItem(const QString &app_id, const QString &version_id, const QString &entity_id, const qint64 &item_id, const OAIExplicitListItemUpdateObject &item);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  model_update_object OAIModelUpdateObject [required]
    */
    virtual void modelUpdateHierarchicalEntity(const QString &app_id, const QString &version_id, const QString &h_entity_id, const OAIModelUpdateObject &model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  h_child_id QString [required]
    * @param[in]  hierarchical_child_model_update_object OAIModel_AddCompositeEntityChild_request [required]
    */
    virtual void modelUpdateHierarchicalEntityChild(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &h_child_id, const OAIModel_AddCompositeEntityChild_request &hierarchical_child_model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  h_entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateHierarchicalEntityRole(const QString &app_id, const QString &version_id, const QString &h_entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  model_update_object OAIModelUpdateObject [required]
    */
    virtual void modelUpdateIntent(const QString &app_id, const QString &version_id, const QString &intent_id, const OAIModelUpdateObject &model_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  pattern_any_update_object OAIPatternAnyModelUpdateObject [required]
    */
    virtual void modelUpdatePatternAnyEntityModel(const QString &app_id, const QString &version_id, const QString &entity_id, const OAIPatternAnyModelUpdateObject &pattern_any_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdatePatternAnyEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdatePrebuiltEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  regex_entity_id QString [required]
    * @param[in]  regex_entity_update_object OAIRegexModelUpdateObject [required]
    */
    virtual void modelUpdateRegexEntityModel(const QString &app_id, const QString &version_id, const QString &regex_entity_id, const OAIRegexModelUpdateObject &regex_entity_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  entity_role_update_object OAIEntityRoleUpdateObject [required]
    */
    virtual void modelUpdateRegexEntityRole(const QString &app_id, const QString &version_id, const QString &entity_id, const QString &role_id, const OAIEntityRoleUpdateObject &entity_role_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  cl_entity_id QString [required]
    * @param[in]  sub_list_id qint64 [required]
    * @param[in]  word_list_base_update_object OAIWordListBaseUpdateObject [required]
    */
    virtual void modelUpdateSubList(const QString &app_id, const QString &version_id, const QString &cl_entity_id, const qint64 &sub_list_id, const OAIWordListBaseUpdateObject &word_list_base_update_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  pattern OAIPatternRuleCreateObject [required]
    */
    virtual void patternAddPattern(const QString &app_id, const QString &version_id, const OAIPatternRuleCreateObject &pattern);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  patterns QList<OAIPatternRuleCreateObject> [required]
    */
    virtual void patternBatchAddPatterns(const QString &app_id, const QString &version_id, const QList<OAIPatternRuleCreateObject> &patterns);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  pattern_id QString [required]
    */
    virtual void patternDeletePattern(const QString &app_id, const QString &version_id, const QString &pattern_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  pattern_ids QList<QString> [required]
    */
    virtual void patternDeletePatterns(const QString &app_id, const QString &version_id, const QList<QString> &pattern_ids);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  intent_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void patternListIntentPatterns(const QString &app_id, const QString &version_id, const QString &intent_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void patternListPatterns(const QString &app_id, const QString &version_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  pattern_id QString [required]
    * @param[in]  pattern OAIPatternRuleUpdateObject [required]
    */
    virtual void patternUpdatePattern(const QString &app_id, const QString &version_id, const QString &pattern_id, const OAIPatternRuleUpdateObject &pattern);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  patterns QList<OAIPatternRuleUpdateObject> [required]
    */
    virtual void patternUpdatePatterns(const QString &app_id, const QString &version_id, const QList<OAIPatternRuleUpdateObject> &patterns);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  user_to_add OAIUserCollaborator [required]
    */
    virtual void permissionsAdd(const QString &app_id, const OAIUserCollaborator &user_to_add);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  user_to_delete OAIUserCollaborator [required]
    */
    virtual void permissionsDelete(const QString &app_id, const OAIUserCollaborator &user_to_delete);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void permissionsList(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  collaborators OAICollaboratorsArray [required]
    */
    virtual void permissionsUpdate(const QString &app_id, const OAICollaboratorsArray &collaborators);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void settingsList(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  list_of_app_version_setting_object QList<OAIAppVersionSettingObject> [required]
    */
    virtual void settingsUpdate(const QString &app_id, const QString &version_id, const QList<OAIAppVersionSettingObject> &list_of_app_version_setting_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void trainGetStatus(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void trainTrainVersion(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  version_clone_object OAITaskUpdateObject [required]
    */
    virtual void versionsClone(const QString &app_id, const QString &version_id, const OAITaskUpdateObject &version_clone_object);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void versionsDelete(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  utterance QString [required]
    */
    virtual void versionsDeleteUnlabelledUtterance(const QString &app_id, const QString &version_id, const QString &utterance);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void versionsExport(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    */
    virtual void versionsGet(const QString &app_id, const QString &version_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  luis_app OAILuisApp [required]
    * @param[in]  version_id QString [optional]
    */
    virtual void versionsImport(const QString &app_id, const OAILuisApp &luis_app, const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  skip qint32 [optional]
    * @param[in]  take qint32 [optional]
    */
    virtual void versionsList(const QString &app_id, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  version_id QString [required]
    * @param[in]  version_update_object OAITaskUpdateObject [required]
    */
    virtual void versionsUpdate(const QString &app_id, const QString &version_id, const OAITaskUpdateObject &version_update_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appsAddCallback(OAIHttpRequestWorker *worker);
    void appsAddCustomPrebuiltDomainCallback(OAIHttpRequestWorker *worker);
    void appsDeleteCallback(OAIHttpRequestWorker *worker);
    void appsDownloadQueryLogsCallback(OAIHttpRequestWorker *worker);
    void appsGetCallback(OAIHttpRequestWorker *worker);
    void appsGetPublishSettingsCallback(OAIHttpRequestWorker *worker);
    void appsGetSettingsCallback(OAIHttpRequestWorker *worker);
    void appsImportCallback(OAIHttpRequestWorker *worker);
    void appsListCallback(OAIHttpRequestWorker *worker);
    void appsListAvailableCustomPrebuiltDomainsCallback(OAIHttpRequestWorker *worker);
    void appsListAvailableCustomPrebuiltDomainsForCultureCallback(OAIHttpRequestWorker *worker);
    void appsListCortanaEndpointsCallback(OAIHttpRequestWorker *worker);
    void appsListDomainsCallback(OAIHttpRequestWorker *worker);
    void appsListEndpointsCallback(OAIHttpRequestWorker *worker);
    void appsListSupportedCulturesCallback(OAIHttpRequestWorker *worker);
    void appsListUsageScenariosCallback(OAIHttpRequestWorker *worker);
    void appsPackagePublishedApplicationAsGzipCallback(OAIHttpRequestWorker *worker);
    void appsPackageTrainedApplicationAsGzipCallback(OAIHttpRequestWorker *worker);
    void appsPublishCallback(OAIHttpRequestWorker *worker);
    void appsUpdateCallback(OAIHttpRequestWorker *worker);
    void appsUpdatePublishSettingsCallback(OAIHttpRequestWorker *worker);
    void appsUpdateSettingsCallback(OAIHttpRequestWorker *worker);
    void azureAccountsAssignToAppCallback(OAIHttpRequestWorker *worker);
    void azureAccountsGetAssignedCallback(OAIHttpRequestWorker *worker);
    void azureAccountsListUserLUISAccountsCallback(OAIHttpRequestWorker *worker);
    void azureAccountsRemoveFromAppCallback(OAIHttpRequestWorker *worker);
    void examplesAddCallback(OAIHttpRequestWorker *worker);
    void examplesBatchCallback(OAIHttpRequestWorker *worker);
    void examplesDeleteCallback(OAIHttpRequestWorker *worker);
    void examplesListCallback(OAIHttpRequestWorker *worker);
    void featuresAddEntityFeatureCallback(OAIHttpRequestWorker *worker);
    void featuresAddIntentFeatureCallback(OAIHttpRequestWorker *worker);
    void featuresAddPhraseListCallback(OAIHttpRequestWorker *worker);
    void featuresDeletePhraseListCallback(OAIHttpRequestWorker *worker);
    void featuresGetPhraseListCallback(OAIHttpRequestWorker *worker);
    void featuresListCallback(OAIHttpRequestWorker *worker);
    void featuresListPhraseListsCallback(OAIHttpRequestWorker *worker);
    void featuresUpdatePhraseListCallback(OAIHttpRequestWorker *worker);
    void modelAddClosedListCallback(OAIHttpRequestWorker *worker);
    void modelAddCompositeEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelAddCustomPrebuiltDomainCallback(OAIHttpRequestWorker *worker);
    void modelAddCustomPrebuiltEntityCallback(OAIHttpRequestWorker *worker);
    void modelAddCustomPrebuiltIntentCallback(OAIHttpRequestWorker *worker);
    void modelAddEntityCallback(OAIHttpRequestWorker *worker);
    void modelAddEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelAddExplicitListItemCallback(OAIHttpRequestWorker *worker);
    void modelAddIntentCallback(OAIHttpRequestWorker *worker);
    void modelAddPrebuiltCallback(OAIHttpRequestWorker *worker);
    void modelAddSubListCallback(OAIHttpRequestWorker *worker);
    void modelCreateClosedListEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreateCompositeEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreateCustomPrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreateEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreateHierarchicalEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreatePatternAnyEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelCreatePatternAnyEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreatePrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelCreateRegexEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelCreateRegexEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteClosedListCallback(OAIHttpRequestWorker *worker);
    void modelDeleteClosedListEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteCompositeEntityCallback(OAIHttpRequestWorker *worker);
    void modelDeleteCompositeEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelDeleteCompositeEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteCustomEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteCustomPrebuiltDomainCallback(OAIHttpRequestWorker *worker);
    void modelDeleteEntityCallback(OAIHttpRequestWorker *worker);
    void modelDeleteEntityFeatureCallback(OAIHttpRequestWorker *worker);
    void modelDeleteEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteExplicitListItemCallback(OAIHttpRequestWorker *worker);
    void modelDeleteHierarchicalEntityCallback(OAIHttpRequestWorker *worker);
    void modelDeleteHierarchicalEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelDeleteHierarchicalEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteIntentCallback(OAIHttpRequestWorker *worker);
    void modelDeleteIntentFeatureCallback(OAIHttpRequestWorker *worker);
    void modelDeletePatternAnyEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelDeletePatternAnyEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeletePrebuiltCallback(OAIHttpRequestWorker *worker);
    void modelDeletePrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteRegexEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelDeleteRegexEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelDeleteSubListCallback(OAIHttpRequestWorker *worker);
    void modelExamplesCallback(OAIHttpRequestWorker *worker);
    void modelGetClosedListCallback(OAIHttpRequestWorker *worker);
    void modelGetClosedListEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetCompositeEntityCallback(OAIHttpRequestWorker *worker);
    void modelGetCompositeEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetCustomEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetEntityCallback(OAIHttpRequestWorker *worker);
    void modelGetEntityFeaturesCallback(OAIHttpRequestWorker *worker);
    void modelGetEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetExplicitListCallback(OAIHttpRequestWorker *worker);
    void modelGetExplicitListItemCallback(OAIHttpRequestWorker *worker);
    void modelGetHierarchicalEntityCallback(OAIHttpRequestWorker *worker);
    void modelGetHierarchicalEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelGetHierarchicalEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetIntentCallback(OAIHttpRequestWorker *worker);
    void modelGetIntentFeaturesCallback(OAIHttpRequestWorker *worker);
    void modelGetPatternAnyEntityInfoCallback(OAIHttpRequestWorker *worker);
    void modelGetPatternAnyEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetPrebuiltCallback(OAIHttpRequestWorker *worker);
    void modelGetPrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelGetRegexEntityEntityInfoCallback(OAIHttpRequestWorker *worker);
    void modelGetRegexEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelListClosedListEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListClosedListsCallback(OAIHttpRequestWorker *worker);
    void modelListCompositeEntitiesCallback(OAIHttpRequestWorker *worker);
    void modelListCompositeEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListCustomPrebuiltEntitiesCallback(OAIHttpRequestWorker *worker);
    void modelListCustomPrebuiltEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListCustomPrebuiltIntentsCallback(OAIHttpRequestWorker *worker);
    void modelListCustomPrebuiltModelsCallback(OAIHttpRequestWorker *worker);
    void modelListEntitiesCallback(OAIHttpRequestWorker *worker);
    void modelListEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListEntitySuggestionsCallback(OAIHttpRequestWorker *worker);
    void modelListHierarchicalEntitiesCallback(OAIHttpRequestWorker *worker);
    void modelListHierarchicalEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListIntentSuggestionsCallback(OAIHttpRequestWorker *worker);
    void modelListIntentsCallback(OAIHttpRequestWorker *worker);
    void modelListModelsCallback(OAIHttpRequestWorker *worker);
    void modelListPatternAnyEntityInfosCallback(OAIHttpRequestWorker *worker);
    void modelListPatternAnyEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListPrebuiltEntitiesCallback(OAIHttpRequestWorker *worker);
    void modelListPrebuiltEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelListPrebuiltsCallback(OAIHttpRequestWorker *worker);
    void modelListRegexEntityInfosCallback(OAIHttpRequestWorker *worker);
    void modelListRegexEntityRolesCallback(OAIHttpRequestWorker *worker);
    void modelPatchClosedListCallback(OAIHttpRequestWorker *worker);
    void modelReplaceEntityFeaturesCallback(OAIHttpRequestWorker *worker);
    void modelReplaceIntentFeaturesCallback(OAIHttpRequestWorker *worker);
    void modelUpdateClosedListCallback(OAIHttpRequestWorker *worker);
    void modelUpdateClosedListEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateCompositeEntityCallback(OAIHttpRequestWorker *worker);
    void modelUpdateCompositeEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateCustomPrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelUpdateEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateExplicitListItemCallback(OAIHttpRequestWorker *worker);
    void modelUpdateHierarchicalEntityCallback(OAIHttpRequestWorker *worker);
    void modelUpdateHierarchicalEntityChildCallback(OAIHttpRequestWorker *worker);
    void modelUpdateHierarchicalEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateIntentCallback(OAIHttpRequestWorker *worker);
    void modelUpdatePatternAnyEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelUpdatePatternAnyEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdatePrebuiltEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateRegexEntityModelCallback(OAIHttpRequestWorker *worker);
    void modelUpdateRegexEntityRoleCallback(OAIHttpRequestWorker *worker);
    void modelUpdateSubListCallback(OAIHttpRequestWorker *worker);
    void patternAddPatternCallback(OAIHttpRequestWorker *worker);
    void patternBatchAddPatternsCallback(OAIHttpRequestWorker *worker);
    void patternDeletePatternCallback(OAIHttpRequestWorker *worker);
    void patternDeletePatternsCallback(OAIHttpRequestWorker *worker);
    void patternListIntentPatternsCallback(OAIHttpRequestWorker *worker);
    void patternListPatternsCallback(OAIHttpRequestWorker *worker);
    void patternUpdatePatternCallback(OAIHttpRequestWorker *worker);
    void patternUpdatePatternsCallback(OAIHttpRequestWorker *worker);
    void permissionsAddCallback(OAIHttpRequestWorker *worker);
    void permissionsDeleteCallback(OAIHttpRequestWorker *worker);
    void permissionsListCallback(OAIHttpRequestWorker *worker);
    void permissionsUpdateCallback(OAIHttpRequestWorker *worker);
    void settingsListCallback(OAIHttpRequestWorker *worker);
    void settingsUpdateCallback(OAIHttpRequestWorker *worker);
    void trainGetStatusCallback(OAIHttpRequestWorker *worker);
    void trainTrainVersionCallback(OAIHttpRequestWorker *worker);
    void versionsCloneCallback(OAIHttpRequestWorker *worker);
    void versionsDeleteCallback(OAIHttpRequestWorker *worker);
    void versionsDeleteUnlabelledUtteranceCallback(OAIHttpRequestWorker *worker);
    void versionsExportCallback(OAIHttpRequestWorker *worker);
    void versionsGetCallback(OAIHttpRequestWorker *worker);
    void versionsImportCallback(OAIHttpRequestWorker *worker);
    void versionsListCallback(OAIHttpRequestWorker *worker);
    void versionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appsAddSignal(QString summary);
    void appsAddCustomPrebuiltDomainSignal(QString summary);
    void appsDeleteSignal(OAIOperationStatus summary);
    void appsDownloadQueryLogsSignal(OAIObject summary);
    void appsGetSignal(OAIApplicationInfoResponse summary);
    void appsGetPublishSettingsSignal(OAIPublishSettings summary);
    void appsGetSettingsSignal(OAIApplicationSettings summary);
    void appsImportSignal(QString summary);
    void appsListSignal(QList<OAIApplicationInfoResponse> summary);
    void appsListAvailableCustomPrebuiltDomainsSignal(QList<OAIPrebuiltDomain> summary);
    void appsListAvailableCustomPrebuiltDomainsForCultureSignal(QList<OAIPrebuiltDomain> summary);
    void appsListCortanaEndpointsSignal(OAIPersonalAssistantsResponse summary);
    void appsListDomainsSignal(QList<QString> summary);
    void appsListEndpointsSignal(QMap<QString, QString> summary);
    void appsListSupportedCulturesSignal(QList<OAIAvailableCulture> summary);
    void appsListUsageScenariosSignal(QList<QString> summary);
    void appsPackagePublishedApplicationAsGzipSignal(OAIHttpFileElement summary);
    void appsPackageTrainedApplicationAsGzipSignal(OAIHttpFileElement summary);
    void appsPublishSignal(OAIProductionOrStagingEndpointInfo summary);
    void appsUpdateSignal(OAIOperationStatus summary);
    void appsUpdatePublishSettingsSignal(OAIOperationStatus summary);
    void appsUpdateSettingsSignal(OAIOperationStatus summary);
    void azureAccountsAssignToAppSignal(OAIOperationStatus summary);
    void azureAccountsGetAssignedSignal(QList<OAIAzureAccountInfoObject> summary);
    void azureAccountsListUserLUISAccountsSignal(QList<OAIAzureAccountInfoObject> summary);
    void azureAccountsRemoveFromAppSignal(OAIOperationStatus summary);
    void examplesAddSignal(OAILabelExampleResponse summary);
    void examplesBatchSignal(QList<OAIBatchLabelExample> summary);
    void examplesDeleteSignal(OAIOperationStatus summary);
    void examplesListSignal(QList<OAILabeledUtterance> summary);
    void featuresAddEntityFeatureSignal(OAIOperationStatus summary);
    void featuresAddIntentFeatureSignal(OAIOperationStatus summary);
    void featuresAddPhraseListSignal(qint32 summary);
    void featuresDeletePhraseListSignal(OAIOperationStatus summary);
    void featuresGetPhraseListSignal(OAIPhraseListFeatureInfo summary);
    void featuresListSignal(OAIFeaturesResponseObject summary);
    void featuresListPhraseListsSignal(QList<OAIPhraseListFeatureInfo> summary);
    void featuresUpdatePhraseListSignal(OAIOperationStatus summary);
    void modelAddClosedListSignal(QString summary);
    void modelAddCompositeEntityChildSignal(QString summary);
    void modelAddCustomPrebuiltDomainSignal(QList<QString> summary);
    void modelAddCustomPrebuiltEntitySignal(QString summary);
    void modelAddCustomPrebuiltIntentSignal(QString summary);
    void modelAddEntitySignal(QString summary);
    void modelAddEntityChildSignal(QString summary);
    void modelAddExplicitListItemSignal(qint32 summary);
    void modelAddIntentSignal(QString summary);
    void modelAddPrebuiltSignal(QList<OAIPrebuiltEntityExtractor> summary);
    void modelAddSubListSignal(qint64 summary);
    void modelCreateClosedListEntityRoleSignal(QString summary);
    void modelCreateCompositeEntityRoleSignal(QString summary);
    void modelCreateCustomPrebuiltEntityRoleSignal(QString summary);
    void modelCreateEntityRoleSignal(QString summary);
    void modelCreateHierarchicalEntityRoleSignal(QString summary);
    void modelCreatePatternAnyEntityModelSignal(QString summary);
    void modelCreatePatternAnyEntityRoleSignal(QString summary);
    void modelCreatePrebuiltEntityRoleSignal(QString summary);
    void modelCreateRegexEntityModelSignal(QString summary);
    void modelCreateRegexEntityRoleSignal(QString summary);
    void modelDeleteClosedListSignal(OAIOperationStatus summary);
    void modelDeleteClosedListEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteCompositeEntitySignal(OAIOperationStatus summary);
    void modelDeleteCompositeEntityChildSignal(OAIOperationStatus summary);
    void modelDeleteCompositeEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteCustomEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteCustomPrebuiltDomainSignal(OAIOperationStatus summary);
    void modelDeleteEntitySignal(OAIOperationStatus summary);
    void modelDeleteEntityFeatureSignal(OAIOperationStatus summary);
    void modelDeleteEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteExplicitListItemSignal(OAIOperationStatus summary);
    void modelDeleteHierarchicalEntitySignal(OAIOperationStatus summary);
    void modelDeleteHierarchicalEntityChildSignal(OAIOperationStatus summary);
    void modelDeleteHierarchicalEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteIntentSignal(OAIOperationStatus summary);
    void modelDeleteIntentFeatureSignal(OAIOperationStatus summary);
    void modelDeletePatternAnyEntityModelSignal(OAIOperationStatus summary);
    void modelDeletePatternAnyEntityRoleSignal(OAIOperationStatus summary);
    void modelDeletePrebuiltSignal(OAIOperationStatus summary);
    void modelDeletePrebuiltEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteRegexEntityModelSignal(OAIOperationStatus summary);
    void modelDeleteRegexEntityRoleSignal(OAIOperationStatus summary);
    void modelDeleteSubListSignal(OAIOperationStatus summary);
    void modelExamplesSignal(QList<OAILabelTextObject> summary);
    void modelGetClosedListSignal(OAIClosedListEntityExtractor summary);
    void modelGetClosedListEntityRoleSignal(OAIEntityRole summary);
    void modelGetCompositeEntitySignal(OAICompositeEntityExtractor summary);
    void modelGetCompositeEntityRoleSignal(OAIEntityRole summary);
    void modelGetCustomEntityRoleSignal(OAIEntityRole summary);
    void modelGetEntitySignal(OAINDepthEntityExtractor summary);
    void modelGetEntityFeaturesSignal(QList<OAIModelFeatureInformation> summary);
    void modelGetEntityRoleSignal(OAIEntityRole summary);
    void modelGetExplicitListSignal(QList<OAIExplicitListItem> summary);
    void modelGetExplicitListItemSignal(OAIExplicitListItem summary);
    void modelGetHierarchicalEntitySignal(OAIHierarchicalEntityExtractor summary);
    void modelGetHierarchicalEntityChildSignal(OAIHierarchicalChildEntity summary);
    void modelGetHierarchicalEntityRoleSignal(OAIEntityRole summary);
    void modelGetIntentSignal(OAIIntentClassifier summary);
    void modelGetIntentFeaturesSignal(QList<OAIModelFeatureInformation> summary);
    void modelGetPatternAnyEntityInfoSignal(OAIPatternAnyEntityExtractor summary);
    void modelGetPatternAnyEntityRoleSignal(OAIEntityRole summary);
    void modelGetPrebuiltSignal(OAIPrebuiltEntityExtractor summary);
    void modelGetPrebuiltEntityRoleSignal(OAIEntityRole summary);
    void modelGetRegexEntityEntityInfoSignal(OAIRegexEntityExtractor summary);
    void modelGetRegexEntityRoleSignal(OAIEntityRole summary);
    void modelListClosedListEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListClosedListsSignal(QList<OAIClosedListEntityExtractor> summary);
    void modelListCompositeEntitiesSignal(QList<OAICompositeEntityExtractor> summary);
    void modelListCompositeEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListCustomPrebuiltEntitiesSignal(QList<OAIEntityExtractor> summary);
    void modelListCustomPrebuiltEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListCustomPrebuiltIntentsSignal(QList<OAIIntentClassifier> summary);
    void modelListCustomPrebuiltModelsSignal(QList<OAICustomPrebuiltModel> summary);
    void modelListEntitiesSignal(QList<OAINDepthEntityExtractor> summary);
    void modelListEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListEntitySuggestionsSignal(QList<OAIEntitiesSuggestionExample> summary);
    void modelListHierarchicalEntitiesSignal(QList<OAIHierarchicalEntityExtractor> summary);
    void modelListHierarchicalEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListIntentSuggestionsSignal(QList<OAIIntentsSuggestionExample> summary);
    void modelListIntentsSignal(QList<OAIIntentClassifier> summary);
    void modelListModelsSignal(QList<OAIModelInfoResponse> summary);
    void modelListPatternAnyEntityInfosSignal(QList<OAIPatternAnyEntityExtractor> summary);
    void modelListPatternAnyEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListPrebuiltEntitiesSignal(QList<OAIAvailablePrebuiltEntityModel> summary);
    void modelListPrebuiltEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelListPrebuiltsSignal(QList<OAIPrebuiltEntityExtractor> summary);
    void modelListRegexEntityInfosSignal(QList<OAIRegexEntityExtractor> summary);
    void modelListRegexEntityRolesSignal(QList<OAIEntityRole> summary);
    void modelPatchClosedListSignal(OAIOperationStatus summary);
    void modelReplaceEntityFeaturesSignal(OAIOperationStatus summary);
    void modelReplaceIntentFeaturesSignal(OAIOperationStatus summary);
    void modelUpdateClosedListSignal(OAIOperationStatus summary);
    void modelUpdateClosedListEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateCompositeEntitySignal(OAIOperationStatus summary);
    void modelUpdateCompositeEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateCustomPrebuiltEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateEntityChildSignal(OAIOperationStatus summary);
    void modelUpdateEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateExplicitListItemSignal(OAIOperationStatus summary);
    void modelUpdateHierarchicalEntitySignal(OAIOperationStatus summary);
    void modelUpdateHierarchicalEntityChildSignal(OAIOperationStatus summary);
    void modelUpdateHierarchicalEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateIntentSignal(OAIOperationStatus summary);
    void modelUpdatePatternAnyEntityModelSignal(OAIOperationStatus summary);
    void modelUpdatePatternAnyEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdatePrebuiltEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateRegexEntityModelSignal(OAIOperationStatus summary);
    void modelUpdateRegexEntityRoleSignal(OAIOperationStatus summary);
    void modelUpdateSubListSignal(OAIOperationStatus summary);
    void patternAddPatternSignal(OAIPatternRuleInfo summary);
    void patternBatchAddPatternsSignal(QList<OAIPatternRuleInfo> summary);
    void patternDeletePatternSignal(OAIOperationStatus summary);
    void patternDeletePatternsSignal(OAIOperationStatus summary);
    void patternListIntentPatternsSignal(QList<OAIPatternRuleInfo> summary);
    void patternListPatternsSignal(QList<OAIPatternRuleInfo> summary);
    void patternUpdatePatternSignal(OAIPatternRuleInfo summary);
    void patternUpdatePatternsSignal(QList<OAIPatternRuleInfo> summary);
    void permissionsAddSignal(OAIOperationStatus summary);
    void permissionsDeleteSignal(OAIOperationStatus summary);
    void permissionsListSignal(OAIUserAccessList summary);
    void permissionsUpdateSignal(OAIOperationStatus summary);
    void settingsListSignal(QList<OAIAppVersionSettingObject> summary);
    void settingsUpdateSignal(OAIOperationStatus summary);
    void trainGetStatusSignal(QList<OAIModelTrainingInfo> summary);
    void trainTrainVersionSignal(OAIEnqueueTrainingResponse summary);
    void versionsCloneSignal(QString summary);
    void versionsDeleteSignal(OAIOperationStatus summary);
    void versionsDeleteUnlabelledUtteranceSignal(OAIOperationStatus summary);
    void versionsExportSignal(OAILuisApp summary);
    void versionsGetSignal(OAIVersionInfo summary);
    void versionsImportSignal(QString summary);
    void versionsListSignal(QList<OAIVersionInfo> summary);
    void versionsUpdateSignal(OAIOperationStatus summary);


    void appsAddSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void appsAddCustomPrebuiltDomainSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void appsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void appsDownloadQueryLogsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void appsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInfoResponse summary);
    void appsGetPublishSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPublishSettings summary);
    void appsGetSettingsSignalFull(OAIHttpRequestWorker *worker, OAIApplicationSettings summary);
    void appsImportSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void appsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationInfoResponse> summary);
    void appsListAvailableCustomPrebuiltDomainsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrebuiltDomain> summary);
    void appsListAvailableCustomPrebuiltDomainsForCultureSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrebuiltDomain> summary);
    void appsListCortanaEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIPersonalAssistantsResponse summary);
    void appsListDomainsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void appsListEndpointsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void appsListSupportedCulturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableCulture> summary);
    void appsListUsageScenariosSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void appsPackagePublishedApplicationAsGzipSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void appsPackageTrainedApplicationAsGzipSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void appsPublishSignalFull(OAIHttpRequestWorker *worker, OAIProductionOrStagingEndpointInfo summary);
    void appsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void appsUpdatePublishSettingsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void appsUpdateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void azureAccountsAssignToAppSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void azureAccountsGetAssignedSignalFull(OAIHttpRequestWorker *worker, QList<OAIAzureAccountInfoObject> summary);
    void azureAccountsListUserLUISAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAzureAccountInfoObject> summary);
    void azureAccountsRemoveFromAppSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void examplesAddSignalFull(OAIHttpRequestWorker *worker, OAILabelExampleResponse summary);
    void examplesBatchSignalFull(OAIHttpRequestWorker *worker, QList<OAIBatchLabelExample> summary);
    void examplesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void examplesListSignalFull(OAIHttpRequestWorker *worker, QList<OAILabeledUtterance> summary);
    void featuresAddEntityFeatureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void featuresAddIntentFeatureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void featuresAddPhraseListSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void featuresDeletePhraseListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void featuresGetPhraseListSignalFull(OAIHttpRequestWorker *worker, OAIPhraseListFeatureInfo summary);
    void featuresListSignalFull(OAIHttpRequestWorker *worker, OAIFeaturesResponseObject summary);
    void featuresListPhraseListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPhraseListFeatureInfo> summary);
    void featuresUpdatePhraseListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelAddClosedListSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddCompositeEntityChildSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddCustomPrebuiltDomainSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void modelAddCustomPrebuiltEntitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddCustomPrebuiltIntentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddEntitySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddEntityChildSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddExplicitListItemSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void modelAddIntentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelAddPrebuiltSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrebuiltEntityExtractor> summary);
    void modelAddSubListSignalFull(OAIHttpRequestWorker *worker, qint64 summary);
    void modelCreateClosedListEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateCompositeEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateCustomPrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateHierarchicalEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreatePatternAnyEntityModelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreatePatternAnyEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreatePrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateRegexEntityModelSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelCreateRegexEntityRoleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void modelDeleteClosedListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteClosedListEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteCompositeEntitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteCompositeEntityChildSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteCompositeEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteCustomEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteCustomPrebuiltDomainSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteEntitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteEntityFeatureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteExplicitListItemSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteHierarchicalEntitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteHierarchicalEntityChildSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteHierarchicalEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteIntentSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteIntentFeatureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeletePatternAnyEntityModelSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeletePatternAnyEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeletePrebuiltSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeletePrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteRegexEntityModelSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteRegexEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelDeleteSubListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelExamplesSignalFull(OAIHttpRequestWorker *worker, QList<OAILabelTextObject> summary);
    void modelGetClosedListSignalFull(OAIHttpRequestWorker *worker, OAIClosedListEntityExtractor summary);
    void modelGetClosedListEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetCompositeEntitySignalFull(OAIHttpRequestWorker *worker, OAICompositeEntityExtractor summary);
    void modelGetCompositeEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetCustomEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetEntitySignalFull(OAIHttpRequestWorker *worker, OAINDepthEntityExtractor summary);
    void modelGetEntityFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIModelFeatureInformation> summary);
    void modelGetEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetExplicitListSignalFull(OAIHttpRequestWorker *worker, QList<OAIExplicitListItem> summary);
    void modelGetExplicitListItemSignalFull(OAIHttpRequestWorker *worker, OAIExplicitListItem summary);
    void modelGetHierarchicalEntitySignalFull(OAIHttpRequestWorker *worker, OAIHierarchicalEntityExtractor summary);
    void modelGetHierarchicalEntityChildSignalFull(OAIHttpRequestWorker *worker, OAIHierarchicalChildEntity summary);
    void modelGetHierarchicalEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetIntentSignalFull(OAIHttpRequestWorker *worker, OAIIntentClassifier summary);
    void modelGetIntentFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIModelFeatureInformation> summary);
    void modelGetPatternAnyEntityInfoSignalFull(OAIHttpRequestWorker *worker, OAIPatternAnyEntityExtractor summary);
    void modelGetPatternAnyEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetPrebuiltSignalFull(OAIHttpRequestWorker *worker, OAIPrebuiltEntityExtractor summary);
    void modelGetPrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelGetRegexEntityEntityInfoSignalFull(OAIHttpRequestWorker *worker, OAIRegexEntityExtractor summary);
    void modelGetRegexEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIEntityRole summary);
    void modelListClosedListEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListClosedListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIClosedListEntityExtractor> summary);
    void modelListCompositeEntitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAICompositeEntityExtractor> summary);
    void modelListCompositeEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListCustomPrebuiltEntitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityExtractor> summary);
    void modelListCustomPrebuiltEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListCustomPrebuiltIntentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntentClassifier> summary);
    void modelListCustomPrebuiltModelsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomPrebuiltModel> summary);
    void modelListEntitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAINDepthEntityExtractor> summary);
    void modelListEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListEntitySuggestionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntitiesSuggestionExample> summary);
    void modelListHierarchicalEntitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIHierarchicalEntityExtractor> summary);
    void modelListHierarchicalEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListIntentSuggestionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntentsSuggestionExample> summary);
    void modelListIntentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntentClassifier> summary);
    void modelListModelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIModelInfoResponse> summary);
    void modelListPatternAnyEntityInfosSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatternAnyEntityExtractor> summary);
    void modelListPatternAnyEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListPrebuiltEntitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailablePrebuiltEntityModel> summary);
    void modelListPrebuiltEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelListPrebuiltsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrebuiltEntityExtractor> summary);
    void modelListRegexEntityInfosSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegexEntityExtractor> summary);
    void modelListRegexEntityRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityRole> summary);
    void modelPatchClosedListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelReplaceEntityFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelReplaceIntentFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateClosedListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateClosedListEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateCompositeEntitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateCompositeEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateCustomPrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateEntityChildSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateExplicitListItemSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateHierarchicalEntitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateHierarchicalEntityChildSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateHierarchicalEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateIntentSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdatePatternAnyEntityModelSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdatePatternAnyEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdatePrebuiltEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateRegexEntityModelSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateRegexEntityRoleSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void modelUpdateSubListSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void patternAddPatternSignalFull(OAIHttpRequestWorker *worker, OAIPatternRuleInfo summary);
    void patternBatchAddPatternsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatternRuleInfo> summary);
    void patternDeletePatternSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void patternDeletePatternsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void patternListIntentPatternsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatternRuleInfo> summary);
    void patternListPatternsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatternRuleInfo> summary);
    void patternUpdatePatternSignalFull(OAIHttpRequestWorker *worker, OAIPatternRuleInfo summary);
    void patternUpdatePatternsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatternRuleInfo> summary);
    void permissionsAddSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void permissionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void permissionsListSignalFull(OAIHttpRequestWorker *worker, OAIUserAccessList summary);
    void permissionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void settingsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppVersionSettingObject> summary);
    void settingsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void trainGetStatusSignalFull(OAIHttpRequestWorker *worker, QList<OAIModelTrainingInfo> summary);
    void trainTrainVersionSignalFull(OAIHttpRequestWorker *worker, OAIEnqueueTrainingResponse summary);
    void versionsCloneSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void versionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void versionsDeleteUnlabelledUtteranceSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void versionsExportSignalFull(OAIHttpRequestWorker *worker, OAILuisApp summary);
    void versionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVersionInfo summary);
    void versionsImportSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void versionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIVersionInfo> summary);
    void versionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);

    Q_DECL_DEPRECATED_X("Use appsAddSignalError() instead")
    void appsAddSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAddSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAddCustomPrebuiltDomainSignalError() instead")
    void appsAddCustomPrebuiltDomainSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAddCustomPrebuiltDomainSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalError() instead")
    void appsDeleteSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDownloadQueryLogsSignalError() instead")
    void appsDownloadQueryLogsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDownloadQueryLogsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalError() instead")
    void appsGetSignalE(OAIApplicationInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalError(OAIApplicationInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetPublishSettingsSignalError() instead")
    void appsGetPublishSettingsSignalE(OAIPublishSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetPublishSettingsSignalError(OAIPublishSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSettingsSignalError() instead")
    void appsGetSettingsSignalE(OAIApplicationSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSettingsSignalError(OAIApplicationSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsImportSignalError() instead")
    void appsImportSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsImportSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSignalError() instead")
    void appsListSignalE(QList<OAIApplicationInfoResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSignalError(QList<OAIApplicationInfoResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListAvailableCustomPrebuiltDomainsSignalError() instead")
    void appsListAvailableCustomPrebuiltDomainsSignalE(QList<OAIPrebuiltDomain> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListAvailableCustomPrebuiltDomainsSignalError(QList<OAIPrebuiltDomain> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListAvailableCustomPrebuiltDomainsForCultureSignalError() instead")
    void appsListAvailableCustomPrebuiltDomainsForCultureSignalE(QList<OAIPrebuiltDomain> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListAvailableCustomPrebuiltDomainsForCultureSignalError(QList<OAIPrebuiltDomain> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListCortanaEndpointsSignalError() instead")
    void appsListCortanaEndpointsSignalE(OAIPersonalAssistantsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListCortanaEndpointsSignalError(OAIPersonalAssistantsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListDomainsSignalError() instead")
    void appsListDomainsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListDomainsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListEndpointsSignalError() instead")
    void appsListEndpointsSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListEndpointsSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSupportedCulturesSignalError() instead")
    void appsListSupportedCulturesSignalE(QList<OAIAvailableCulture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSupportedCulturesSignalError(QList<OAIAvailableCulture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListUsageScenariosSignalError() instead")
    void appsListUsageScenariosSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListUsageScenariosSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPackagePublishedApplicationAsGzipSignalError() instead")
    void appsPackagePublishedApplicationAsGzipSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPackagePublishedApplicationAsGzipSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPackageTrainedApplicationAsGzipSignalError() instead")
    void appsPackageTrainedApplicationAsGzipSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPackageTrainedApplicationAsGzipSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPublishSignalError() instead")
    void appsPublishSignalE(OAIProductionOrStagingEndpointInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPublishSignalError(OAIProductionOrStagingEndpointInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalError() instead")
    void appsUpdateSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdatePublishSettingsSignalError() instead")
    void appsUpdatePublishSettingsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdatePublishSettingsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSettingsSignalError() instead")
    void appsUpdateSettingsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSettingsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsAssignToAppSignalError() instead")
    void azureAccountsAssignToAppSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsAssignToAppSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsGetAssignedSignalError() instead")
    void azureAccountsGetAssignedSignalE(QList<OAIAzureAccountInfoObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsGetAssignedSignalError(QList<OAIAzureAccountInfoObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsListUserLUISAccountsSignalError() instead")
    void azureAccountsListUserLUISAccountsSignalE(QList<OAIAzureAccountInfoObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsListUserLUISAccountsSignalError(QList<OAIAzureAccountInfoObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsRemoveFromAppSignalError() instead")
    void azureAccountsRemoveFromAppSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsRemoveFromAppSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesAddSignalError() instead")
    void examplesAddSignalE(OAILabelExampleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesAddSignalError(OAILabelExampleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesBatchSignalError() instead")
    void examplesBatchSignalE(QList<OAIBatchLabelExample> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesBatchSignalError(QList<OAIBatchLabelExample> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesDeleteSignalError() instead")
    void examplesDeleteSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesDeleteSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesListSignalError() instead")
    void examplesListSignalE(QList<OAILabeledUtterance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesListSignalError(QList<OAILabeledUtterance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddEntityFeatureSignalError() instead")
    void featuresAddEntityFeatureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddEntityFeatureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddIntentFeatureSignalError() instead")
    void featuresAddIntentFeatureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddIntentFeatureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddPhraseListSignalError() instead")
    void featuresAddPhraseListSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddPhraseListSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresDeletePhraseListSignalError() instead")
    void featuresDeletePhraseListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresDeletePhraseListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresGetPhraseListSignalError() instead")
    void featuresGetPhraseListSignalE(OAIPhraseListFeatureInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetPhraseListSignalError(OAIPhraseListFeatureInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListSignalError() instead")
    void featuresListSignalE(OAIFeaturesResponseObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListSignalError(OAIFeaturesResponseObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListPhraseListsSignalError() instead")
    void featuresListPhraseListsSignalE(QList<OAIPhraseListFeatureInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListPhraseListsSignalError(QList<OAIPhraseListFeatureInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresUpdatePhraseListSignalError() instead")
    void featuresUpdatePhraseListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresUpdatePhraseListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddClosedListSignalError() instead")
    void modelAddClosedListSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddClosedListSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCompositeEntityChildSignalError() instead")
    void modelAddCompositeEntityChildSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCompositeEntityChildSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltDomainSignalError() instead")
    void modelAddCustomPrebuiltDomainSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltDomainSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltEntitySignalError() instead")
    void modelAddCustomPrebuiltEntitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltEntitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltIntentSignalError() instead")
    void modelAddCustomPrebuiltIntentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltIntentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddEntitySignalError() instead")
    void modelAddEntitySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddEntitySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddEntityChildSignalError() instead")
    void modelAddEntityChildSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddEntityChildSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddExplicitListItemSignalError() instead")
    void modelAddExplicitListItemSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddExplicitListItemSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddIntentSignalError() instead")
    void modelAddIntentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddIntentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddPrebuiltSignalError() instead")
    void modelAddPrebuiltSignalE(QList<OAIPrebuiltEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddPrebuiltSignalError(QList<OAIPrebuiltEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddSubListSignalError() instead")
    void modelAddSubListSignalE(qint64 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddSubListSignalError(qint64 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateClosedListEntityRoleSignalError() instead")
    void modelCreateClosedListEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateClosedListEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateCompositeEntityRoleSignalError() instead")
    void modelCreateCompositeEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateCompositeEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateCustomPrebuiltEntityRoleSignalError() instead")
    void modelCreateCustomPrebuiltEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateCustomPrebuiltEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateEntityRoleSignalError() instead")
    void modelCreateEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateHierarchicalEntityRoleSignalError() instead")
    void modelCreateHierarchicalEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateHierarchicalEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePatternAnyEntityModelSignalError() instead")
    void modelCreatePatternAnyEntityModelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePatternAnyEntityModelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePatternAnyEntityRoleSignalError() instead")
    void modelCreatePatternAnyEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePatternAnyEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePrebuiltEntityRoleSignalError() instead")
    void modelCreatePrebuiltEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePrebuiltEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateRegexEntityModelSignalError() instead")
    void modelCreateRegexEntityModelSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateRegexEntityModelSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateRegexEntityRoleSignalError() instead")
    void modelCreateRegexEntityRoleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateRegexEntityRoleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteClosedListSignalError() instead")
    void modelDeleteClosedListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteClosedListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteClosedListEntityRoleSignalError() instead")
    void modelDeleteClosedListEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteClosedListEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntitySignalError() instead")
    void modelDeleteCompositeEntitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntityChildSignalError() instead")
    void modelDeleteCompositeEntityChildSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntityChildSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntityRoleSignalError() instead")
    void modelDeleteCompositeEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCustomEntityRoleSignalError() instead")
    void modelDeleteCustomEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCustomEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCustomPrebuiltDomainSignalError() instead")
    void modelDeleteCustomPrebuiltDomainSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCustomPrebuiltDomainSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntitySignalError() instead")
    void modelDeleteEntitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntityFeatureSignalError() instead")
    void modelDeleteEntityFeatureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntityFeatureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntityRoleSignalError() instead")
    void modelDeleteEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteExplicitListItemSignalError() instead")
    void modelDeleteExplicitListItemSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteExplicitListItemSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntitySignalError() instead")
    void modelDeleteHierarchicalEntitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntityChildSignalError() instead")
    void modelDeleteHierarchicalEntityChildSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntityChildSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntityRoleSignalError() instead")
    void modelDeleteHierarchicalEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteIntentSignalError() instead")
    void modelDeleteIntentSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteIntentSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteIntentFeatureSignalError() instead")
    void modelDeleteIntentFeatureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteIntentFeatureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePatternAnyEntityModelSignalError() instead")
    void modelDeletePatternAnyEntityModelSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePatternAnyEntityModelSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePatternAnyEntityRoleSignalError() instead")
    void modelDeletePatternAnyEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePatternAnyEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePrebuiltSignalError() instead")
    void modelDeletePrebuiltSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePrebuiltSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePrebuiltEntityRoleSignalError() instead")
    void modelDeletePrebuiltEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePrebuiltEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteRegexEntityModelSignalError() instead")
    void modelDeleteRegexEntityModelSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteRegexEntityModelSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteRegexEntityRoleSignalError() instead")
    void modelDeleteRegexEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteRegexEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteSubListSignalError() instead")
    void modelDeleteSubListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteSubListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelExamplesSignalError() instead")
    void modelExamplesSignalE(QList<OAILabelTextObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelExamplesSignalError(QList<OAILabelTextObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetClosedListSignalError() instead")
    void modelGetClosedListSignalE(OAIClosedListEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetClosedListSignalError(OAIClosedListEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetClosedListEntityRoleSignalError() instead")
    void modelGetClosedListEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetClosedListEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCompositeEntitySignalError() instead")
    void modelGetCompositeEntitySignalE(OAICompositeEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCompositeEntitySignalError(OAICompositeEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCompositeEntityRoleSignalError() instead")
    void modelGetCompositeEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCompositeEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCustomEntityRoleSignalError() instead")
    void modelGetCustomEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCustomEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntitySignalError() instead")
    void modelGetEntitySignalE(OAINDepthEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntitySignalError(OAINDepthEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntityFeaturesSignalError() instead")
    void modelGetEntityFeaturesSignalE(QList<OAIModelFeatureInformation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntityFeaturesSignalError(QList<OAIModelFeatureInformation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntityRoleSignalError() instead")
    void modelGetEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetExplicitListSignalError() instead")
    void modelGetExplicitListSignalE(QList<OAIExplicitListItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetExplicitListSignalError(QList<OAIExplicitListItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetExplicitListItemSignalError() instead")
    void modelGetExplicitListItemSignalE(OAIExplicitListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetExplicitListItemSignalError(OAIExplicitListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntitySignalError() instead")
    void modelGetHierarchicalEntitySignalE(OAIHierarchicalEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntitySignalError(OAIHierarchicalEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntityChildSignalError() instead")
    void modelGetHierarchicalEntityChildSignalE(OAIHierarchicalChildEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntityChildSignalError(OAIHierarchicalChildEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntityRoleSignalError() instead")
    void modelGetHierarchicalEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetIntentSignalError() instead")
    void modelGetIntentSignalE(OAIIntentClassifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetIntentSignalError(OAIIntentClassifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetIntentFeaturesSignalError() instead")
    void modelGetIntentFeaturesSignalE(QList<OAIModelFeatureInformation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetIntentFeaturesSignalError(QList<OAIModelFeatureInformation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPatternAnyEntityInfoSignalError() instead")
    void modelGetPatternAnyEntityInfoSignalE(OAIPatternAnyEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPatternAnyEntityInfoSignalError(OAIPatternAnyEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPatternAnyEntityRoleSignalError() instead")
    void modelGetPatternAnyEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPatternAnyEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPrebuiltSignalError() instead")
    void modelGetPrebuiltSignalE(OAIPrebuiltEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPrebuiltSignalError(OAIPrebuiltEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPrebuiltEntityRoleSignalError() instead")
    void modelGetPrebuiltEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPrebuiltEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetRegexEntityEntityInfoSignalError() instead")
    void modelGetRegexEntityEntityInfoSignalE(OAIRegexEntityExtractor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetRegexEntityEntityInfoSignalError(OAIRegexEntityExtractor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetRegexEntityRoleSignalError() instead")
    void modelGetRegexEntityRoleSignalE(OAIEntityRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetRegexEntityRoleSignalError(OAIEntityRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListClosedListEntityRolesSignalError() instead")
    void modelListClosedListEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListClosedListEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListClosedListsSignalError() instead")
    void modelListClosedListsSignalE(QList<OAIClosedListEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListClosedListsSignalError(QList<OAIClosedListEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCompositeEntitiesSignalError() instead")
    void modelListCompositeEntitiesSignalE(QList<OAICompositeEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCompositeEntitiesSignalError(QList<OAICompositeEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCompositeEntityRolesSignalError() instead")
    void modelListCompositeEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCompositeEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltEntitiesSignalError() instead")
    void modelListCustomPrebuiltEntitiesSignalE(QList<OAIEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltEntitiesSignalError(QList<OAIEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltEntityRolesSignalError() instead")
    void modelListCustomPrebuiltEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltIntentsSignalError() instead")
    void modelListCustomPrebuiltIntentsSignalE(QList<OAIIntentClassifier> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltIntentsSignalError(QList<OAIIntentClassifier> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltModelsSignalError() instead")
    void modelListCustomPrebuiltModelsSignalE(QList<OAICustomPrebuiltModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltModelsSignalError(QList<OAICustomPrebuiltModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntitiesSignalError() instead")
    void modelListEntitiesSignalE(QList<OAINDepthEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntitiesSignalError(QList<OAINDepthEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntityRolesSignalError() instead")
    void modelListEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntitySuggestionsSignalError() instead")
    void modelListEntitySuggestionsSignalE(QList<OAIEntitiesSuggestionExample> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntitySuggestionsSignalError(QList<OAIEntitiesSuggestionExample> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListHierarchicalEntitiesSignalError() instead")
    void modelListHierarchicalEntitiesSignalE(QList<OAIHierarchicalEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListHierarchicalEntitiesSignalError(QList<OAIHierarchicalEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListHierarchicalEntityRolesSignalError() instead")
    void modelListHierarchicalEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListHierarchicalEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListIntentSuggestionsSignalError() instead")
    void modelListIntentSuggestionsSignalE(QList<OAIIntentsSuggestionExample> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListIntentSuggestionsSignalError(QList<OAIIntentsSuggestionExample> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListIntentsSignalError() instead")
    void modelListIntentsSignalE(QList<OAIIntentClassifier> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListIntentsSignalError(QList<OAIIntentClassifier> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListModelsSignalError() instead")
    void modelListModelsSignalE(QList<OAIModelInfoResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListModelsSignalError(QList<OAIModelInfoResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPatternAnyEntityInfosSignalError() instead")
    void modelListPatternAnyEntityInfosSignalE(QList<OAIPatternAnyEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPatternAnyEntityInfosSignalError(QList<OAIPatternAnyEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPatternAnyEntityRolesSignalError() instead")
    void modelListPatternAnyEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPatternAnyEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltEntitiesSignalError() instead")
    void modelListPrebuiltEntitiesSignalE(QList<OAIAvailablePrebuiltEntityModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltEntitiesSignalError(QList<OAIAvailablePrebuiltEntityModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltEntityRolesSignalError() instead")
    void modelListPrebuiltEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltsSignalError() instead")
    void modelListPrebuiltsSignalE(QList<OAIPrebuiltEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltsSignalError(QList<OAIPrebuiltEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListRegexEntityInfosSignalError() instead")
    void modelListRegexEntityInfosSignalE(QList<OAIRegexEntityExtractor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListRegexEntityInfosSignalError(QList<OAIRegexEntityExtractor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListRegexEntityRolesSignalError() instead")
    void modelListRegexEntityRolesSignalE(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListRegexEntityRolesSignalError(QList<OAIEntityRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelPatchClosedListSignalError() instead")
    void modelPatchClosedListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelPatchClosedListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelReplaceEntityFeaturesSignalError() instead")
    void modelReplaceEntityFeaturesSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelReplaceEntityFeaturesSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelReplaceIntentFeaturesSignalError() instead")
    void modelReplaceIntentFeaturesSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelReplaceIntentFeaturesSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateClosedListSignalError() instead")
    void modelUpdateClosedListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateClosedListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateClosedListEntityRoleSignalError() instead")
    void modelUpdateClosedListEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateClosedListEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCompositeEntitySignalError() instead")
    void modelUpdateCompositeEntitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCompositeEntitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCompositeEntityRoleSignalError() instead")
    void modelUpdateCompositeEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCompositeEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCustomPrebuiltEntityRoleSignalError() instead")
    void modelUpdateCustomPrebuiltEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCustomPrebuiltEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateEntityChildSignalError() instead")
    void modelUpdateEntityChildSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateEntityChildSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateEntityRoleSignalError() instead")
    void modelUpdateEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateExplicitListItemSignalError() instead")
    void modelUpdateExplicitListItemSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateExplicitListItemSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntitySignalError() instead")
    void modelUpdateHierarchicalEntitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntityChildSignalError() instead")
    void modelUpdateHierarchicalEntityChildSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntityChildSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntityRoleSignalError() instead")
    void modelUpdateHierarchicalEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateIntentSignalError() instead")
    void modelUpdateIntentSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateIntentSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePatternAnyEntityModelSignalError() instead")
    void modelUpdatePatternAnyEntityModelSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePatternAnyEntityModelSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePatternAnyEntityRoleSignalError() instead")
    void modelUpdatePatternAnyEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePatternAnyEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePrebuiltEntityRoleSignalError() instead")
    void modelUpdatePrebuiltEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePrebuiltEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateRegexEntityModelSignalError() instead")
    void modelUpdateRegexEntityModelSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateRegexEntityModelSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateRegexEntityRoleSignalError() instead")
    void modelUpdateRegexEntityRoleSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateRegexEntityRoleSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateSubListSignalError() instead")
    void modelUpdateSubListSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateSubListSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternAddPatternSignalError() instead")
    void patternAddPatternSignalE(OAIPatternRuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternAddPatternSignalError(OAIPatternRuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternBatchAddPatternsSignalError() instead")
    void patternBatchAddPatternsSignalE(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternBatchAddPatternsSignalError(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternDeletePatternSignalError() instead")
    void patternDeletePatternSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternDeletePatternSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternDeletePatternsSignalError() instead")
    void patternDeletePatternsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternDeletePatternsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternListIntentPatternsSignalError() instead")
    void patternListIntentPatternsSignalE(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternListIntentPatternsSignalError(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternListPatternsSignalError() instead")
    void patternListPatternsSignalE(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternListPatternsSignalError(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternUpdatePatternSignalError() instead")
    void patternUpdatePatternSignalE(OAIPatternRuleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternUpdatePatternSignalError(OAIPatternRuleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternUpdatePatternsSignalError() instead")
    void patternUpdatePatternsSignalE(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patternUpdatePatternsSignalError(QList<OAIPatternRuleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsAddSignalError() instead")
    void permissionsAddSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsAddSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsDeleteSignalError() instead")
    void permissionsDeleteSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsDeleteSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsListSignalError() instead")
    void permissionsListSignalE(OAIUserAccessList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsListSignalError(OAIUserAccessList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsUpdateSignalError() instead")
    void permissionsUpdateSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsUpdateSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsListSignalError() instead")
    void settingsListSignalE(QList<OAIAppVersionSettingObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsListSignalError(QList<OAIAppVersionSettingObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsUpdateSignalError() instead")
    void settingsUpdateSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsUpdateSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainGetStatusSignalError() instead")
    void trainGetStatusSignalE(QList<OAIModelTrainingInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainGetStatusSignalError(QList<OAIModelTrainingInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainTrainVersionSignalError() instead")
    void trainTrainVersionSignalE(OAIEnqueueTrainingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainTrainVersionSignalError(OAIEnqueueTrainingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsCloneSignalError() instead")
    void versionsCloneSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsCloneSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsDeleteSignalError() instead")
    void versionsDeleteSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsDeleteSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsDeleteUnlabelledUtteranceSignalError() instead")
    void versionsDeleteUnlabelledUtteranceSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsDeleteUnlabelledUtteranceSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsExportSignalError() instead")
    void versionsExportSignalE(OAILuisApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsExportSignalError(OAILuisApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsGetSignalError() instead")
    void versionsGetSignalE(OAIVersionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsGetSignalError(OAIVersionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsImportSignalError() instead")
    void versionsImportSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsImportSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsListSignalError() instead")
    void versionsListSignalE(QList<OAIVersionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsListSignalError(QList<OAIVersionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsUpdateSignalError() instead")
    void versionsUpdateSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsUpdateSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appsAddSignalErrorFull() instead")
    void appsAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAddCustomPrebuiltDomainSignalErrorFull() instead")
    void appsAddCustomPrebuiltDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAddCustomPrebuiltDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalErrorFull() instead")
    void appsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDownloadQueryLogsSignalErrorFull() instead")
    void appsDownloadQueryLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDownloadQueryLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalErrorFull() instead")
    void appsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetPublishSettingsSignalErrorFull() instead")
    void appsGetPublishSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetPublishSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSettingsSignalErrorFull() instead")
    void appsGetSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsImportSignalErrorFull() instead")
    void appsImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSignalErrorFull() instead")
    void appsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListAvailableCustomPrebuiltDomainsSignalErrorFull() instead")
    void appsListAvailableCustomPrebuiltDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListAvailableCustomPrebuiltDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListAvailableCustomPrebuiltDomainsForCultureSignalErrorFull() instead")
    void appsListAvailableCustomPrebuiltDomainsForCultureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListAvailableCustomPrebuiltDomainsForCultureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListCortanaEndpointsSignalErrorFull() instead")
    void appsListCortanaEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListCortanaEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListDomainsSignalErrorFull() instead")
    void appsListDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListEndpointsSignalErrorFull() instead")
    void appsListEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSupportedCulturesSignalErrorFull() instead")
    void appsListSupportedCulturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSupportedCulturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListUsageScenariosSignalErrorFull() instead")
    void appsListUsageScenariosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListUsageScenariosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPackagePublishedApplicationAsGzipSignalErrorFull() instead")
    void appsPackagePublishedApplicationAsGzipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPackagePublishedApplicationAsGzipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPackageTrainedApplicationAsGzipSignalErrorFull() instead")
    void appsPackageTrainedApplicationAsGzipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPackageTrainedApplicationAsGzipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsPublishSignalErrorFull() instead")
    void appsPublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsPublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalErrorFull() instead")
    void appsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdatePublishSettingsSignalErrorFull() instead")
    void appsUpdatePublishSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdatePublishSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSettingsSignalErrorFull() instead")
    void appsUpdateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsAssignToAppSignalErrorFull() instead")
    void azureAccountsAssignToAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsAssignToAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsGetAssignedSignalErrorFull() instead")
    void azureAccountsGetAssignedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsGetAssignedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsListUserLUISAccountsSignalErrorFull() instead")
    void azureAccountsListUserLUISAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsListUserLUISAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureAccountsRemoveFromAppSignalErrorFull() instead")
    void azureAccountsRemoveFromAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureAccountsRemoveFromAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesAddSignalErrorFull() instead")
    void examplesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesBatchSignalErrorFull() instead")
    void examplesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesDeleteSignalErrorFull() instead")
    void examplesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use examplesListSignalErrorFull() instead")
    void examplesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void examplesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddEntityFeatureSignalErrorFull() instead")
    void featuresAddEntityFeatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddEntityFeatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddIntentFeatureSignalErrorFull() instead")
    void featuresAddIntentFeatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddIntentFeatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresAddPhraseListSignalErrorFull() instead")
    void featuresAddPhraseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresAddPhraseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresDeletePhraseListSignalErrorFull() instead")
    void featuresDeletePhraseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresDeletePhraseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresGetPhraseListSignalErrorFull() instead")
    void featuresGetPhraseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetPhraseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListSignalErrorFull() instead")
    void featuresListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListPhraseListsSignalErrorFull() instead")
    void featuresListPhraseListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListPhraseListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresUpdatePhraseListSignalErrorFull() instead")
    void featuresUpdatePhraseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresUpdatePhraseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddClosedListSignalErrorFull() instead")
    void modelAddClosedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddClosedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCompositeEntityChildSignalErrorFull() instead")
    void modelAddCompositeEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCompositeEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltDomainSignalErrorFull() instead")
    void modelAddCustomPrebuiltDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltEntitySignalErrorFull() instead")
    void modelAddCustomPrebuiltEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddCustomPrebuiltIntentSignalErrorFull() instead")
    void modelAddCustomPrebuiltIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddCustomPrebuiltIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddEntitySignalErrorFull() instead")
    void modelAddEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddEntityChildSignalErrorFull() instead")
    void modelAddEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddExplicitListItemSignalErrorFull() instead")
    void modelAddExplicitListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddExplicitListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddIntentSignalErrorFull() instead")
    void modelAddIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddPrebuiltSignalErrorFull() instead")
    void modelAddPrebuiltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddPrebuiltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelAddSubListSignalErrorFull() instead")
    void modelAddSubListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelAddSubListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateClosedListEntityRoleSignalErrorFull() instead")
    void modelCreateClosedListEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateClosedListEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateCompositeEntityRoleSignalErrorFull() instead")
    void modelCreateCompositeEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateCompositeEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateCustomPrebuiltEntityRoleSignalErrorFull() instead")
    void modelCreateCustomPrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateCustomPrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateEntityRoleSignalErrorFull() instead")
    void modelCreateEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateHierarchicalEntityRoleSignalErrorFull() instead")
    void modelCreateHierarchicalEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateHierarchicalEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePatternAnyEntityModelSignalErrorFull() instead")
    void modelCreatePatternAnyEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePatternAnyEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePatternAnyEntityRoleSignalErrorFull() instead")
    void modelCreatePatternAnyEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePatternAnyEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreatePrebuiltEntityRoleSignalErrorFull() instead")
    void modelCreatePrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreatePrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateRegexEntityModelSignalErrorFull() instead")
    void modelCreateRegexEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateRegexEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelCreateRegexEntityRoleSignalErrorFull() instead")
    void modelCreateRegexEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelCreateRegexEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteClosedListSignalErrorFull() instead")
    void modelDeleteClosedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteClosedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteClosedListEntityRoleSignalErrorFull() instead")
    void modelDeleteClosedListEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteClosedListEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntitySignalErrorFull() instead")
    void modelDeleteCompositeEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntityChildSignalErrorFull() instead")
    void modelDeleteCompositeEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCompositeEntityRoleSignalErrorFull() instead")
    void modelDeleteCompositeEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCompositeEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCustomEntityRoleSignalErrorFull() instead")
    void modelDeleteCustomEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCustomEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteCustomPrebuiltDomainSignalErrorFull() instead")
    void modelDeleteCustomPrebuiltDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteCustomPrebuiltDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntitySignalErrorFull() instead")
    void modelDeleteEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntityFeatureSignalErrorFull() instead")
    void modelDeleteEntityFeatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntityFeatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteEntityRoleSignalErrorFull() instead")
    void modelDeleteEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteExplicitListItemSignalErrorFull() instead")
    void modelDeleteExplicitListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteExplicitListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntitySignalErrorFull() instead")
    void modelDeleteHierarchicalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntityChildSignalErrorFull() instead")
    void modelDeleteHierarchicalEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteHierarchicalEntityRoleSignalErrorFull() instead")
    void modelDeleteHierarchicalEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteHierarchicalEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteIntentSignalErrorFull() instead")
    void modelDeleteIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteIntentFeatureSignalErrorFull() instead")
    void modelDeleteIntentFeatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteIntentFeatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePatternAnyEntityModelSignalErrorFull() instead")
    void modelDeletePatternAnyEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePatternAnyEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePatternAnyEntityRoleSignalErrorFull() instead")
    void modelDeletePatternAnyEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePatternAnyEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePrebuiltSignalErrorFull() instead")
    void modelDeletePrebuiltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePrebuiltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeletePrebuiltEntityRoleSignalErrorFull() instead")
    void modelDeletePrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeletePrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteRegexEntityModelSignalErrorFull() instead")
    void modelDeleteRegexEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteRegexEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteRegexEntityRoleSignalErrorFull() instead")
    void modelDeleteRegexEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteRegexEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelDeleteSubListSignalErrorFull() instead")
    void modelDeleteSubListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelDeleteSubListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelExamplesSignalErrorFull() instead")
    void modelExamplesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelExamplesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetClosedListSignalErrorFull() instead")
    void modelGetClosedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetClosedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetClosedListEntityRoleSignalErrorFull() instead")
    void modelGetClosedListEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetClosedListEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCompositeEntitySignalErrorFull() instead")
    void modelGetCompositeEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCompositeEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCompositeEntityRoleSignalErrorFull() instead")
    void modelGetCompositeEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCompositeEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetCustomEntityRoleSignalErrorFull() instead")
    void modelGetCustomEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetCustomEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntitySignalErrorFull() instead")
    void modelGetEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntityFeaturesSignalErrorFull() instead")
    void modelGetEntityFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntityFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetEntityRoleSignalErrorFull() instead")
    void modelGetEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetExplicitListSignalErrorFull() instead")
    void modelGetExplicitListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetExplicitListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetExplicitListItemSignalErrorFull() instead")
    void modelGetExplicitListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetExplicitListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntitySignalErrorFull() instead")
    void modelGetHierarchicalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntityChildSignalErrorFull() instead")
    void modelGetHierarchicalEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetHierarchicalEntityRoleSignalErrorFull() instead")
    void modelGetHierarchicalEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetHierarchicalEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetIntentSignalErrorFull() instead")
    void modelGetIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetIntentFeaturesSignalErrorFull() instead")
    void modelGetIntentFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetIntentFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPatternAnyEntityInfoSignalErrorFull() instead")
    void modelGetPatternAnyEntityInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPatternAnyEntityInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPatternAnyEntityRoleSignalErrorFull() instead")
    void modelGetPatternAnyEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPatternAnyEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPrebuiltSignalErrorFull() instead")
    void modelGetPrebuiltSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPrebuiltSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetPrebuiltEntityRoleSignalErrorFull() instead")
    void modelGetPrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetPrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetRegexEntityEntityInfoSignalErrorFull() instead")
    void modelGetRegexEntityEntityInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetRegexEntityEntityInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetRegexEntityRoleSignalErrorFull() instead")
    void modelGetRegexEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetRegexEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListClosedListEntityRolesSignalErrorFull() instead")
    void modelListClosedListEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListClosedListEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListClosedListsSignalErrorFull() instead")
    void modelListClosedListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListClosedListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCompositeEntitiesSignalErrorFull() instead")
    void modelListCompositeEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCompositeEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCompositeEntityRolesSignalErrorFull() instead")
    void modelListCompositeEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCompositeEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltEntitiesSignalErrorFull() instead")
    void modelListCustomPrebuiltEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltEntityRolesSignalErrorFull() instead")
    void modelListCustomPrebuiltEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltIntentsSignalErrorFull() instead")
    void modelListCustomPrebuiltIntentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltIntentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListCustomPrebuiltModelsSignalErrorFull() instead")
    void modelListCustomPrebuiltModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListCustomPrebuiltModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntitiesSignalErrorFull() instead")
    void modelListEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntityRolesSignalErrorFull() instead")
    void modelListEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListEntitySuggestionsSignalErrorFull() instead")
    void modelListEntitySuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListEntitySuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListHierarchicalEntitiesSignalErrorFull() instead")
    void modelListHierarchicalEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListHierarchicalEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListHierarchicalEntityRolesSignalErrorFull() instead")
    void modelListHierarchicalEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListHierarchicalEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListIntentSuggestionsSignalErrorFull() instead")
    void modelListIntentSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListIntentSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListIntentsSignalErrorFull() instead")
    void modelListIntentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListIntentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListModelsSignalErrorFull() instead")
    void modelListModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPatternAnyEntityInfosSignalErrorFull() instead")
    void modelListPatternAnyEntityInfosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPatternAnyEntityInfosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPatternAnyEntityRolesSignalErrorFull() instead")
    void modelListPatternAnyEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPatternAnyEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltEntitiesSignalErrorFull() instead")
    void modelListPrebuiltEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltEntityRolesSignalErrorFull() instead")
    void modelListPrebuiltEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListPrebuiltsSignalErrorFull() instead")
    void modelListPrebuiltsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListPrebuiltsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListRegexEntityInfosSignalErrorFull() instead")
    void modelListRegexEntityInfosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListRegexEntityInfosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelListRegexEntityRolesSignalErrorFull() instead")
    void modelListRegexEntityRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelListRegexEntityRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelPatchClosedListSignalErrorFull() instead")
    void modelPatchClosedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelPatchClosedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelReplaceEntityFeaturesSignalErrorFull() instead")
    void modelReplaceEntityFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelReplaceEntityFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelReplaceIntentFeaturesSignalErrorFull() instead")
    void modelReplaceIntentFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelReplaceIntentFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateClosedListSignalErrorFull() instead")
    void modelUpdateClosedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateClosedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateClosedListEntityRoleSignalErrorFull() instead")
    void modelUpdateClosedListEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateClosedListEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCompositeEntitySignalErrorFull() instead")
    void modelUpdateCompositeEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCompositeEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCompositeEntityRoleSignalErrorFull() instead")
    void modelUpdateCompositeEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCompositeEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateCustomPrebuiltEntityRoleSignalErrorFull() instead")
    void modelUpdateCustomPrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateCustomPrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateEntityChildSignalErrorFull() instead")
    void modelUpdateEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateEntityRoleSignalErrorFull() instead")
    void modelUpdateEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateExplicitListItemSignalErrorFull() instead")
    void modelUpdateExplicitListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateExplicitListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntitySignalErrorFull() instead")
    void modelUpdateHierarchicalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntityChildSignalErrorFull() instead")
    void modelUpdateHierarchicalEntityChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntityChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateHierarchicalEntityRoleSignalErrorFull() instead")
    void modelUpdateHierarchicalEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateHierarchicalEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateIntentSignalErrorFull() instead")
    void modelUpdateIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePatternAnyEntityModelSignalErrorFull() instead")
    void modelUpdatePatternAnyEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePatternAnyEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePatternAnyEntityRoleSignalErrorFull() instead")
    void modelUpdatePatternAnyEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePatternAnyEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdatePrebuiltEntityRoleSignalErrorFull() instead")
    void modelUpdatePrebuiltEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdatePrebuiltEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateRegexEntityModelSignalErrorFull() instead")
    void modelUpdateRegexEntityModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateRegexEntityModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateRegexEntityRoleSignalErrorFull() instead")
    void modelUpdateRegexEntityRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateRegexEntityRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelUpdateSubListSignalErrorFull() instead")
    void modelUpdateSubListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelUpdateSubListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternAddPatternSignalErrorFull() instead")
    void patternAddPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternAddPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternBatchAddPatternsSignalErrorFull() instead")
    void patternBatchAddPatternsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternBatchAddPatternsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternDeletePatternSignalErrorFull() instead")
    void patternDeletePatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternDeletePatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternDeletePatternsSignalErrorFull() instead")
    void patternDeletePatternsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternDeletePatternsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternListIntentPatternsSignalErrorFull() instead")
    void patternListIntentPatternsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternListIntentPatternsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternListPatternsSignalErrorFull() instead")
    void patternListPatternsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternListPatternsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternUpdatePatternSignalErrorFull() instead")
    void patternUpdatePatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternUpdatePatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patternUpdatePatternsSignalErrorFull() instead")
    void patternUpdatePatternsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patternUpdatePatternsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsAddSignalErrorFull() instead")
    void permissionsAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsDeleteSignalErrorFull() instead")
    void permissionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsListSignalErrorFull() instead")
    void permissionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsUpdateSignalErrorFull() instead")
    void permissionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsListSignalErrorFull() instead")
    void settingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsUpdateSignalErrorFull() instead")
    void settingsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainGetStatusSignalErrorFull() instead")
    void trainGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainTrainVersionSignalErrorFull() instead")
    void trainTrainVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainTrainVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsCloneSignalErrorFull() instead")
    void versionsCloneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsCloneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsDeleteSignalErrorFull() instead")
    void versionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsDeleteUnlabelledUtteranceSignalErrorFull() instead")
    void versionsDeleteUnlabelledUtteranceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsDeleteUnlabelledUtteranceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsExportSignalErrorFull() instead")
    void versionsExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsGetSignalErrorFull() instead")
    void versionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsImportSignalErrorFull() instead")
    void versionsImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsListSignalErrorFull() instead")
    void versionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionsUpdateSignalErrorFull() instead")
    void versionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
