/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionInfo::OAIVersionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionInfo::OAIVersionInfo() {
    this->initializeModel();
}

OAIVersionInfo::~OAIVersionInfo() {}

void OAIVersionInfo::initializeModel() {

    m_assigned_endpoint_key_isSet = false;
    m_assigned_endpoint_key_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_endpoint_hits_count_isSet = false;
    m_endpoint_hits_count_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_entities_count_isSet = false;
    m_entities_count_isValid = false;

    m_external_api_keys_isSet = false;
    m_external_api_keys_isValid = false;

    m_intents_count_isSet = false;
    m_intents_count_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_published_date_time_isSet = false;
    m_last_published_date_time_isValid = false;

    m_last_trained_date_time_isSet = false;
    m_last_trained_date_time_isValid = false;

    m_training_status_isSet = false;
    m_training_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVersionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionInfo::fromJsonObject(QJsonObject json) {

    m_assigned_endpoint_key_isValid = ::OpenAPI::fromJsonValue(m_assigned_endpoint_key, json[QString("assignedEndpointKey")]);
    m_assigned_endpoint_key_isSet = !json[QString("assignedEndpointKey")].isNull() && m_assigned_endpoint_key_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_endpoint_hits_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_hits_count, json[QString("endpointHitsCount")]);
    m_endpoint_hits_count_isSet = !json[QString("endpointHitsCount")].isNull() && m_endpoint_hits_count_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_entities_count_isValid = ::OpenAPI::fromJsonValue(m_entities_count, json[QString("entitiesCount")]);
    m_entities_count_isSet = !json[QString("entitiesCount")].isNull() && m_entities_count_isValid;

    m_external_api_keys_isValid = ::OpenAPI::fromJsonValue(m_external_api_keys, json[QString("externalApiKeys")]);
    m_external_api_keys_isSet = !json[QString("externalApiKeys")].isNull() && m_external_api_keys_isValid;

    m_intents_count_isValid = ::OpenAPI::fromJsonValue(m_intents_count, json[QString("intentsCount")]);
    m_intents_count_isSet = !json[QString("intentsCount")].isNull() && m_intents_count_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_published_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_published_date_time, json[QString("lastPublishedDateTime")]);
    m_last_published_date_time_isSet = !json[QString("lastPublishedDateTime")].isNull() && m_last_published_date_time_isValid;

    m_last_trained_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_trained_date_time, json[QString("lastTrainedDateTime")]);
    m_last_trained_date_time_isSet = !json[QString("lastTrainedDateTime")].isNull() && m_last_trained_date_time_isValid;

    m_training_status_isValid = ::OpenAPI::fromJsonValue(m_training_status, json[QString("trainingStatus")]);
    m_training_status_isSet = !json[QString("trainingStatus")].isNull() && m_training_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVersionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_endpoint_key.size() > 0) {
        obj.insert(QString("assignedEndpointKey"), ::OpenAPI::toJsonValue(m_assigned_endpoint_key));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_endpoint_hits_count_isSet) {
        obj.insert(QString("endpointHitsCount"), ::OpenAPI::toJsonValue(m_endpoint_hits_count));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_entities_count_isSet) {
        obj.insert(QString("entitiesCount"), ::OpenAPI::toJsonValue(m_entities_count));
    }
    if (m_external_api_keys_isSet) {
        obj.insert(QString("externalApiKeys"), ::OpenAPI::toJsonValue(m_external_api_keys));
    }
    if (m_intents_count_isSet) {
        obj.insert(QString("intentsCount"), ::OpenAPI::toJsonValue(m_intents_count));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_published_date_time_isSet) {
        obj.insert(QString("lastPublishedDateTime"), ::OpenAPI::toJsonValue(m_last_published_date_time));
    }
    if (m_last_trained_date_time_isSet) {
        obj.insert(QString("lastTrainedDateTime"), ::OpenAPI::toJsonValue(m_last_trained_date_time));
    }
    if (m_training_status_isSet) {
        obj.insert(QString("trainingStatus"), ::OpenAPI::toJsonValue(m_training_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, QString> OAIVersionInfo::getAssignedEndpointKey() const {
    return m_assigned_endpoint_key;
}
void OAIVersionInfo::setAssignedEndpointKey(const QMap<QString, QString> &assigned_endpoint_key) {
    m_assigned_endpoint_key = assigned_endpoint_key;
    m_assigned_endpoint_key_isSet = true;
}

bool OAIVersionInfo::is_assigned_endpoint_key_Set() const{
    return m_assigned_endpoint_key_isSet;
}

bool OAIVersionInfo::is_assigned_endpoint_key_Valid() const{
    return m_assigned_endpoint_key_isValid;
}

QDateTime OAIVersionInfo::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIVersionInfo::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIVersionInfo::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIVersionInfo::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

qint32 OAIVersionInfo::getEndpointHitsCount() const {
    return m_endpoint_hits_count;
}
void OAIVersionInfo::setEndpointHitsCount(const qint32 &endpoint_hits_count) {
    m_endpoint_hits_count = endpoint_hits_count;
    m_endpoint_hits_count_isSet = true;
}

bool OAIVersionInfo::is_endpoint_hits_count_Set() const{
    return m_endpoint_hits_count_isSet;
}

bool OAIVersionInfo::is_endpoint_hits_count_Valid() const{
    return m_endpoint_hits_count_isValid;
}

QString OAIVersionInfo::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIVersionInfo::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIVersionInfo::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIVersionInfo::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

qint32 OAIVersionInfo::getEntitiesCount() const {
    return m_entities_count;
}
void OAIVersionInfo::setEntitiesCount(const qint32 &entities_count) {
    m_entities_count = entities_count;
    m_entities_count_isSet = true;
}

bool OAIVersionInfo::is_entities_count_Set() const{
    return m_entities_count_isSet;
}

bool OAIVersionInfo::is_entities_count_Valid() const{
    return m_entities_count_isValid;
}

OAIObject OAIVersionInfo::getExternalApiKeys() const {
    return m_external_api_keys;
}
void OAIVersionInfo::setExternalApiKeys(const OAIObject &external_api_keys) {
    m_external_api_keys = external_api_keys;
    m_external_api_keys_isSet = true;
}

bool OAIVersionInfo::is_external_api_keys_Set() const{
    return m_external_api_keys_isSet;
}

bool OAIVersionInfo::is_external_api_keys_Valid() const{
    return m_external_api_keys_isValid;
}

qint32 OAIVersionInfo::getIntentsCount() const {
    return m_intents_count;
}
void OAIVersionInfo::setIntentsCount(const qint32 &intents_count) {
    m_intents_count = intents_count;
    m_intents_count_isSet = true;
}

bool OAIVersionInfo::is_intents_count_Set() const{
    return m_intents_count_isSet;
}

bool OAIVersionInfo::is_intents_count_Valid() const{
    return m_intents_count_isValid;
}

QDateTime OAIVersionInfo::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIVersionInfo::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIVersionInfo::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIVersionInfo::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QDateTime OAIVersionInfo::getLastPublishedDateTime() const {
    return m_last_published_date_time;
}
void OAIVersionInfo::setLastPublishedDateTime(const QDateTime &last_published_date_time) {
    m_last_published_date_time = last_published_date_time;
    m_last_published_date_time_isSet = true;
}

bool OAIVersionInfo::is_last_published_date_time_Set() const{
    return m_last_published_date_time_isSet;
}

bool OAIVersionInfo::is_last_published_date_time_Valid() const{
    return m_last_published_date_time_isValid;
}

QDateTime OAIVersionInfo::getLastTrainedDateTime() const {
    return m_last_trained_date_time;
}
void OAIVersionInfo::setLastTrainedDateTime(const QDateTime &last_trained_date_time) {
    m_last_trained_date_time = last_trained_date_time;
    m_last_trained_date_time_isSet = true;
}

bool OAIVersionInfo::is_last_trained_date_time_Set() const{
    return m_last_trained_date_time_isSet;
}

bool OAIVersionInfo::is_last_trained_date_time_Valid() const{
    return m_last_trained_date_time_isValid;
}

QString OAIVersionInfo::getTrainingStatus() const {
    return m_training_status;
}
void OAIVersionInfo::setTrainingStatus(const QString &training_status) {
    m_training_status = training_status;
    m_training_status_isSet = true;
}

bool OAIVersionInfo::is_training_status_Set() const{
    return m_training_status_isSet;
}

bool OAIVersionInfo::is_training_status_Valid() const{
    return m_training_status_isValid;
}

QString OAIVersionInfo::getVersion() const {
    return m_version;
}
void OAIVersionInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVersionInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVersionInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVersionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_endpoint_key.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_hits_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_api_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_published_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trained_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_status_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
