/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILuisApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILuisApp::OAILuisApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILuisApp::OAILuisApp() {
    this->initializeModel();
}

OAILuisApp::~OAILuisApp() {}

void OAILuisApp::initializeModel() {

    m_closed_lists_isSet = false;
    m_closed_lists_isValid = false;

    m_composites_isSet = false;
    m_composites_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_hierarchicals_isSet = false;
    m_hierarchicals_isValid = false;

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pattern_any_entities_isSet = false;
    m_pattern_any_entities_isValid = false;

    m_patterns_isSet = false;
    m_patterns_isValid = false;

    m_phraselists_isSet = false;
    m_phraselists_isValid = false;

    m_prebuilt_entities_isSet = false;
    m_prebuilt_entities_isValid = false;

    m_regex_entities_isSet = false;
    m_regex_entities_isValid = false;

    m_regex_features_isSet = false;
    m_regex_features_isValid = false;

    m_utterances_isSet = false;
    m_utterances_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAILuisApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILuisApp::fromJsonObject(QJsonObject json) {

    m_closed_lists_isValid = ::OpenAPI::fromJsonValue(m_closed_lists, json[QString("closedLists")]);
    m_closed_lists_isSet = !json[QString("closedLists")].isNull() && m_closed_lists_isValid;

    m_composites_isValid = ::OpenAPI::fromJsonValue(m_composites, json[QString("composites")]);
    m_composites_isSet = !json[QString("composites")].isNull() && m_composites_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_hierarchicals_isValid = ::OpenAPI::fromJsonValue(m_hierarchicals, json[QString("hierarchicals")]);
    m_hierarchicals_isSet = !json[QString("hierarchicals")].isNull() && m_hierarchicals_isValid;

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pattern_any_entities_isValid = ::OpenAPI::fromJsonValue(m_pattern_any_entities, json[QString("patternAnyEntities")]);
    m_pattern_any_entities_isSet = !json[QString("patternAnyEntities")].isNull() && m_pattern_any_entities_isValid;

    m_patterns_isValid = ::OpenAPI::fromJsonValue(m_patterns, json[QString("patterns")]);
    m_patterns_isSet = !json[QString("patterns")].isNull() && m_patterns_isValid;

    m_phraselists_isValid = ::OpenAPI::fromJsonValue(m_phraselists, json[QString("phraselists")]);
    m_phraselists_isSet = !json[QString("phraselists")].isNull() && m_phraselists_isValid;

    m_prebuilt_entities_isValid = ::OpenAPI::fromJsonValue(m_prebuilt_entities, json[QString("prebuiltEntities")]);
    m_prebuilt_entities_isSet = !json[QString("prebuiltEntities")].isNull() && m_prebuilt_entities_isValid;

    m_regex_entities_isValid = ::OpenAPI::fromJsonValue(m_regex_entities, json[QString("regex_entities")]);
    m_regex_entities_isSet = !json[QString("regex_entities")].isNull() && m_regex_entities_isValid;

    m_regex_features_isValid = ::OpenAPI::fromJsonValue(m_regex_features, json[QString("regex_features")]);
    m_regex_features_isSet = !json[QString("regex_features")].isNull() && m_regex_features_isValid;

    m_utterances_isValid = ::OpenAPI::fromJsonValue(m_utterances, json[QString("utterances")]);
    m_utterances_isSet = !json[QString("utterances")].isNull() && m_utterances_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAILuisApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILuisApp::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_lists.size() > 0) {
        obj.insert(QString("closedLists"), ::OpenAPI::toJsonValue(m_closed_lists));
    }
    if (m_composites.size() > 0) {
        obj.insert(QString("composites"), ::OpenAPI::toJsonValue(m_composites));
    }
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_hierarchicals.size() > 0) {
        obj.insert(QString("hierarchicals"), ::OpenAPI::toJsonValue(m_hierarchicals));
    }
    if (m_intents.size() > 0) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pattern_any_entities.size() > 0) {
        obj.insert(QString("patternAnyEntities"), ::OpenAPI::toJsonValue(m_pattern_any_entities));
    }
    if (m_patterns.size() > 0) {
        obj.insert(QString("patterns"), ::OpenAPI::toJsonValue(m_patterns));
    }
    if (m_phraselists.size() > 0) {
        obj.insert(QString("phraselists"), ::OpenAPI::toJsonValue(m_phraselists));
    }
    if (m_prebuilt_entities.size() > 0) {
        obj.insert(QString("prebuiltEntities"), ::OpenAPI::toJsonValue(m_prebuilt_entities));
    }
    if (m_regex_entities.size() > 0) {
        obj.insert(QString("regex_entities"), ::OpenAPI::toJsonValue(m_regex_entities));
    }
    if (m_regex_features.size() > 0) {
        obj.insert(QString("regex_features"), ::OpenAPI::toJsonValue(m_regex_features));
    }
    if (m_utterances.size() > 0) {
        obj.insert(QString("utterances"), ::OpenAPI::toJsonValue(m_utterances));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QList<OAIClosedList> OAILuisApp::getClosedLists() const {
    return m_closed_lists;
}
void OAILuisApp::setClosedLists(const QList<OAIClosedList> &closed_lists) {
    m_closed_lists = closed_lists;
    m_closed_lists_isSet = true;
}

bool OAILuisApp::is_closed_lists_Set() const{
    return m_closed_lists_isSet;
}

bool OAILuisApp::is_closed_lists_Valid() const{
    return m_closed_lists_isValid;
}

QList<OAIHierarchicalModel> OAILuisApp::getComposites() const {
    return m_composites;
}
void OAILuisApp::setComposites(const QList<OAIHierarchicalModel> &composites) {
    m_composites = composites;
    m_composites_isSet = true;
}

bool OAILuisApp::is_composites_Set() const{
    return m_composites_isSet;
}

bool OAILuisApp::is_composites_Valid() const{
    return m_composites_isValid;
}

QString OAILuisApp::getCulture() const {
    return m_culture;
}
void OAILuisApp::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAILuisApp::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAILuisApp::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAILuisApp::getDesc() const {
    return m_desc;
}
void OAILuisApp::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAILuisApp::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAILuisApp::is_desc_Valid() const{
    return m_desc_isValid;
}

QList<OAIHierarchicalModel> OAILuisApp::getEntities() const {
    return m_entities;
}
void OAILuisApp::setEntities(const QList<OAIHierarchicalModel> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAILuisApp::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAILuisApp::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<OAIHierarchicalModel> OAILuisApp::getHierarchicals() const {
    return m_hierarchicals;
}
void OAILuisApp::setHierarchicals(const QList<OAIHierarchicalModel> &hierarchicals) {
    m_hierarchicals = hierarchicals;
    m_hierarchicals_isSet = true;
}

bool OAILuisApp::is_hierarchicals_Set() const{
    return m_hierarchicals_isSet;
}

bool OAILuisApp::is_hierarchicals_Valid() const{
    return m_hierarchicals_isValid;
}

QList<OAIHierarchicalModel> OAILuisApp::getIntents() const {
    return m_intents;
}
void OAILuisApp::setIntents(const QList<OAIHierarchicalModel> &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAILuisApp::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAILuisApp::is_intents_Valid() const{
    return m_intents_isValid;
}

QString OAILuisApp::getName() const {
    return m_name;
}
void OAILuisApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILuisApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAILuisApp::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPatternAny> OAILuisApp::getPatternAnyEntities() const {
    return m_pattern_any_entities;
}
void OAILuisApp::setPatternAnyEntities(const QList<OAIPatternAny> &pattern_any_entities) {
    m_pattern_any_entities = pattern_any_entities;
    m_pattern_any_entities_isSet = true;
}

bool OAILuisApp::is_pattern_any_entities_Set() const{
    return m_pattern_any_entities_isSet;
}

bool OAILuisApp::is_pattern_any_entities_Valid() const{
    return m_pattern_any_entities_isValid;
}

QList<OAIPatternRule> OAILuisApp::getPatterns() const {
    return m_patterns;
}
void OAILuisApp::setPatterns(const QList<OAIPatternRule> &patterns) {
    m_patterns = patterns;
    m_patterns_isSet = true;
}

bool OAILuisApp::is_patterns_Set() const{
    return m_patterns_isSet;
}

bool OAILuisApp::is_patterns_Valid() const{
    return m_patterns_isValid;
}

QList<OAIJSONModelFeature> OAILuisApp::getPhraselists() const {
    return m_phraselists;
}
void OAILuisApp::setPhraselists(const QList<OAIJSONModelFeature> &phraselists) {
    m_phraselists = phraselists;
    m_phraselists_isSet = true;
}

bool OAILuisApp::is_phraselists_Set() const{
    return m_phraselists_isSet;
}

bool OAILuisApp::is_phraselists_Valid() const{
    return m_phraselists_isValid;
}

QList<OAIPrebuiltEntity> OAILuisApp::getPrebuiltEntities() const {
    return m_prebuilt_entities;
}
void OAILuisApp::setPrebuiltEntities(const QList<OAIPrebuiltEntity> &prebuilt_entities) {
    m_prebuilt_entities = prebuilt_entities;
    m_prebuilt_entities_isSet = true;
}

bool OAILuisApp::is_prebuilt_entities_Set() const{
    return m_prebuilt_entities_isSet;
}

bool OAILuisApp::is_prebuilt_entities_Valid() const{
    return m_prebuilt_entities_isValid;
}

QList<OAIRegexEntity> OAILuisApp::getRegexEntities() const {
    return m_regex_entities;
}
void OAILuisApp::setRegexEntities(const QList<OAIRegexEntity> &regex_entities) {
    m_regex_entities = regex_entities;
    m_regex_entities_isSet = true;
}

bool OAILuisApp::is_regex_entities_Set() const{
    return m_regex_entities_isSet;
}

bool OAILuisApp::is_regex_entities_Valid() const{
    return m_regex_entities_isValid;
}

QList<OAIJSONRegexFeature> OAILuisApp::getRegexFeatures() const {
    return m_regex_features;
}
void OAILuisApp::setRegexFeatures(const QList<OAIJSONRegexFeature> &regex_features) {
    m_regex_features = regex_features;
    m_regex_features_isSet = true;
}

bool OAILuisApp::is_regex_features_Set() const{
    return m_regex_features_isSet;
}

bool OAILuisApp::is_regex_features_Valid() const{
    return m_regex_features_isValid;
}

QList<OAIJSONUtterance> OAILuisApp::getUtterances() const {
    return m_utterances;
}
void OAILuisApp::setUtterances(const QList<OAIJSONUtterance> &utterances) {
    m_utterances = utterances;
    m_utterances_isSet = true;
}

bool OAILuisApp::is_utterances_Set() const{
    return m_utterances_isSet;
}

bool OAILuisApp::is_utterances_Valid() const{
    return m_utterances_isValid;
}

QString OAILuisApp::getVersionId() const {
    return m_version_id;
}
void OAILuisApp::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAILuisApp::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAILuisApp::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAILuisApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_composites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchicals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_any_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phraselists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prebuilt_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_utterances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILuisApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
