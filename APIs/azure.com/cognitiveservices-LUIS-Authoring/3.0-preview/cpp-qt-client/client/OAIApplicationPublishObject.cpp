/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPublishObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPublishObject::OAIApplicationPublishObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPublishObject::OAIApplicationPublishObject() {
    this->initializeModel();
}

OAIApplicationPublishObject::~OAIApplicationPublishObject() {}

void OAIApplicationPublishObject::initializeModel() {

    m_is_staging_isSet = false;
    m_is_staging_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIApplicationPublishObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationPublishObject::fromJsonObject(QJsonObject json) {

    m_is_staging_isValid = ::OpenAPI::fromJsonValue(m_is_staging, json[QString("isStaging")]);
    m_is_staging_isSet = !json[QString("isStaging")].isNull() && m_is_staging_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIApplicationPublishObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationPublishObject::asJsonObject() const {
    QJsonObject obj;
    if (m_is_staging_isSet) {
        obj.insert(QString("isStaging"), ::OpenAPI::toJsonValue(m_is_staging));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

bool OAIApplicationPublishObject::isIsStaging() const {
    return m_is_staging;
}
void OAIApplicationPublishObject::setIsStaging(const bool &is_staging) {
    m_is_staging = is_staging;
    m_is_staging_isSet = true;
}

bool OAIApplicationPublishObject::is_is_staging_Set() const{
    return m_is_staging_isSet;
}

bool OAIApplicationPublishObject::is_is_staging_Valid() const{
    return m_is_staging_isValid;
}

QString OAIApplicationPublishObject::getVersionId() const {
    return m_version_id;
}
void OAIApplicationPublishObject::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIApplicationPublishObject::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIApplicationPublishObject::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIApplicationPublishObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_staging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationPublishObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
