/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityPrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityPrediction::OAIEntityPrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityPrediction::OAIEntityPrediction() {
    this->initializeModel();
}

OAIEntityPrediction::~OAIEntityPrediction() {}

void OAIEntityPrediction::initializeModel() {

    m_end_token_index_isSet = false;
    m_end_token_index_isValid = false;

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_phrase_isSet = false;
    m_phrase_isValid = false;

    m_start_token_index_isSet = false;
    m_start_token_index_isValid = false;
}

void OAIEntityPrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityPrediction::fromJsonObject(QJsonObject json) {

    m_end_token_index_isValid = ::OpenAPI::fromJsonValue(m_end_token_index, json[QString("endTokenIndex")]);
    m_end_token_index_isSet = !json[QString("endTokenIndex")].isNull() && m_end_token_index_isValid;

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("entityName")]);
    m_entity_name_isSet = !json[QString("entityName")].isNull() && m_entity_name_isValid;

    m_phrase_isValid = ::OpenAPI::fromJsonValue(m_phrase, json[QString("phrase")]);
    m_phrase_isSet = !json[QString("phrase")].isNull() && m_phrase_isValid;

    m_start_token_index_isValid = ::OpenAPI::fromJsonValue(m_start_token_index, json[QString("startTokenIndex")]);
    m_start_token_index_isSet = !json[QString("startTokenIndex")].isNull() && m_start_token_index_isValid;
}

QString OAIEntityPrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityPrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_end_token_index_isSet) {
        obj.insert(QString("endTokenIndex"), ::OpenAPI::toJsonValue(m_end_token_index));
    }
    if (m_entity_name_isSet) {
        obj.insert(QString("entityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_phrase_isSet) {
        obj.insert(QString("phrase"), ::OpenAPI::toJsonValue(m_phrase));
    }
    if (m_start_token_index_isSet) {
        obj.insert(QString("startTokenIndex"), ::OpenAPI::toJsonValue(m_start_token_index));
    }
    return obj;
}

qint32 OAIEntityPrediction::getEndTokenIndex() const {
    return m_end_token_index;
}
void OAIEntityPrediction::setEndTokenIndex(const qint32 &end_token_index) {
    m_end_token_index = end_token_index;
    m_end_token_index_isSet = true;
}

bool OAIEntityPrediction::is_end_token_index_Set() const{
    return m_end_token_index_isSet;
}

bool OAIEntityPrediction::is_end_token_index_Valid() const{
    return m_end_token_index_isValid;
}

QString OAIEntityPrediction::getEntityName() const {
    return m_entity_name;
}
void OAIEntityPrediction::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAIEntityPrediction::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAIEntityPrediction::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

QString OAIEntityPrediction::getPhrase() const {
    return m_phrase;
}
void OAIEntityPrediction::setPhrase(const QString &phrase) {
    m_phrase = phrase;
    m_phrase_isSet = true;
}

bool OAIEntityPrediction::is_phrase_Set() const{
    return m_phrase_isSet;
}

bool OAIEntityPrediction::is_phrase_Valid() const{
    return m_phrase_isValid;
}

qint32 OAIEntityPrediction::getStartTokenIndex() const {
    return m_start_token_index;
}
void OAIEntityPrediction::setStartTokenIndex(const qint32 &start_token_index) {
    m_start_token_index = start_token_index;
    m_start_token_index_isSet = true;
}

bool OAIEntityPrediction::is_start_token_index_Set() const{
    return m_start_token_index_isSet;
}

bool OAIEntityPrediction::is_start_token_index_Valid() const{
    return m_start_token_index_isValid;
}

bool OAIEntityPrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_token_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_token_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityPrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_token_index_isValid && m_entity_name_isValid && m_phrase_isValid && m_start_token_index_isValid && true;
}

} // namespace OpenAPI
