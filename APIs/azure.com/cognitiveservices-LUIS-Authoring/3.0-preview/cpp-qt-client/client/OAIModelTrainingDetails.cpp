/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelTrainingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelTrainingDetails::OAIModelTrainingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelTrainingDetails::OAIModelTrainingDetails() {
    this->initializeModel();
}

OAIModelTrainingDetails::~OAIModelTrainingDetails() {}

void OAIModelTrainingDetails::initializeModel() {

    m_example_count_isSet = false;
    m_example_count_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_id_isSet = false;
    m_status_id_isValid = false;

    m_training_date_time_isSet = false;
    m_training_date_time_isValid = false;
}

void OAIModelTrainingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelTrainingDetails::fromJsonObject(QJsonObject json) {

    m_example_count_isValid = ::OpenAPI::fromJsonValue(m_example_count, json[QString("exampleCount")]);
    m_example_count_isSet = !json[QString("exampleCount")].isNull() && m_example_count_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_id_isValid = ::OpenAPI::fromJsonValue(m_status_id, json[QString("statusId")]);
    m_status_id_isSet = !json[QString("statusId")].isNull() && m_status_id_isValid;

    m_training_date_time_isValid = ::OpenAPI::fromJsonValue(m_training_date_time, json[QString("trainingDateTime")]);
    m_training_date_time_isSet = !json[QString("trainingDateTime")].isNull() && m_training_date_time_isValid;
}

QString OAIModelTrainingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelTrainingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_example_count_isSet) {
        obj.insert(QString("exampleCount"), ::OpenAPI::toJsonValue(m_example_count));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_id_isSet) {
        obj.insert(QString("statusId"), ::OpenAPI::toJsonValue(m_status_id));
    }
    if (m_training_date_time_isSet) {
        obj.insert(QString("trainingDateTime"), ::OpenAPI::toJsonValue(m_training_date_time));
    }
    return obj;
}

qint32 OAIModelTrainingDetails::getExampleCount() const {
    return m_example_count;
}
void OAIModelTrainingDetails::setExampleCount(const qint32 &example_count) {
    m_example_count = example_count;
    m_example_count_isSet = true;
}

bool OAIModelTrainingDetails::is_example_count_Set() const{
    return m_example_count_isSet;
}

bool OAIModelTrainingDetails::is_example_count_Valid() const{
    return m_example_count_isValid;
}

QString OAIModelTrainingDetails::getFailureReason() const {
    return m_failure_reason;
}
void OAIModelTrainingDetails::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIModelTrainingDetails::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIModelTrainingDetails::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAITrainingStatus OAIModelTrainingDetails::getStatus() const {
    return m_status;
}
void OAIModelTrainingDetails::setStatus(const OAITrainingStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIModelTrainingDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModelTrainingDetails::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIModelTrainingDetails::getStatusId() const {
    return m_status_id;
}
void OAIModelTrainingDetails::setStatusId(const qint32 &status_id) {
    m_status_id = status_id;
    m_status_id_isSet = true;
}

bool OAIModelTrainingDetails::is_status_id_Set() const{
    return m_status_id_isSet;
}

bool OAIModelTrainingDetails::is_status_id_Valid() const{
    return m_status_id_isValid;
}

QDateTime OAIModelTrainingDetails::getTrainingDateTime() const {
    return m_training_date_time;
}
void OAIModelTrainingDetails::setTrainingDateTime(const QDateTime &training_date_time) {
    m_training_date_time = training_date_time;
    m_training_date_time_isSet = true;
}

bool OAIModelTrainingDetails::is_training_date_time_Set() const{
    return m_training_date_time_isSet;
}

bool OAIModelTrainingDetails::is_training_date_time_Valid() const{
    return m_training_date_time_isValid;
}

bool OAIModelTrainingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_example_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelTrainingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
