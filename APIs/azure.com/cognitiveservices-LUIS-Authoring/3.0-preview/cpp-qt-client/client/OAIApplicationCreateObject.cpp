/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationCreateObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationCreateObject::OAIApplicationCreateObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationCreateObject::OAIApplicationCreateObject() {
    this->initializeModel();
}

OAIApplicationCreateObject::~OAIApplicationCreateObject() {}

void OAIApplicationCreateObject::initializeModel() {

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_initial_version_id_isSet = false;
    m_initial_version_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_usage_scenario_isSet = false;
    m_usage_scenario_isValid = false;
}

void OAIApplicationCreateObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationCreateObject::fromJsonObject(QJsonObject json) {

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_initial_version_id_isValid = ::OpenAPI::fromJsonValue(m_initial_version_id, json[QString("initialVersionId")]);
    m_initial_version_id_isSet = !json[QString("initialVersionId")].isNull() && m_initial_version_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_usage_scenario_isValid = ::OpenAPI::fromJsonValue(m_usage_scenario, json[QString("usageScenario")]);
    m_usage_scenario_isSet = !json[QString("usageScenario")].isNull() && m_usage_scenario_isValid;
}

QString OAIApplicationCreateObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationCreateObject::asJsonObject() const {
    QJsonObject obj;
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_initial_version_id_isSet) {
        obj.insert(QString("initialVersionId"), ::OpenAPI::toJsonValue(m_initial_version_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_usage_scenario_isSet) {
        obj.insert(QString("usageScenario"), ::OpenAPI::toJsonValue(m_usage_scenario));
    }
    return obj;
}

QString OAIApplicationCreateObject::getCulture() const {
    return m_culture;
}
void OAIApplicationCreateObject::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIApplicationCreateObject::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIApplicationCreateObject::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAIApplicationCreateObject::getDescription() const {
    return m_description;
}
void OAIApplicationCreateObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationCreateObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationCreateObject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationCreateObject::getDomain() const {
    return m_domain;
}
void OAIApplicationCreateObject::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIApplicationCreateObject::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIApplicationCreateObject::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIApplicationCreateObject::getInitialVersionId() const {
    return m_initial_version_id;
}
void OAIApplicationCreateObject::setInitialVersionId(const QString &initial_version_id) {
    m_initial_version_id = initial_version_id;
    m_initial_version_id_isSet = true;
}

bool OAIApplicationCreateObject::is_initial_version_id_Set() const{
    return m_initial_version_id_isSet;
}

bool OAIApplicationCreateObject::is_initial_version_id_Valid() const{
    return m_initial_version_id_isValid;
}

QString OAIApplicationCreateObject::getName() const {
    return m_name;
}
void OAIApplicationCreateObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationCreateObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationCreateObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationCreateObject::getUsageScenario() const {
    return m_usage_scenario;
}
void OAIApplicationCreateObject::setUsageScenario(const QString &usage_scenario) {
    m_usage_scenario = usage_scenario;
    m_usage_scenario_isSet = true;
}

bool OAIApplicationCreateObject::is_usage_scenario_Set() const{
    return m_usage_scenario_isSet;
}

bool OAIApplicationCreateObject::is_usage_scenario_Valid() const{
    return m_usage_scenario_isValid;
}

bool OAIApplicationCreateObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationCreateObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_culture_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
