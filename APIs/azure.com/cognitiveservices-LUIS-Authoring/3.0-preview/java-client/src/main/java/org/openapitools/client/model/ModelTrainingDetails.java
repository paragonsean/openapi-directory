/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TrainingStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model Training Details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:38.387536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelTrainingDetails {
  public static final String SERIALIZED_NAME_EXAMPLE_COUNT = "exampleCount";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_COUNT)
  private Integer exampleCount;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TrainingStatus status;

  public static final String SERIALIZED_NAME_STATUS_ID = "statusId";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private Integer statusId;

  public static final String SERIALIZED_NAME_TRAINING_DATE_TIME = "trainingDateTime";
  @SerializedName(SERIALIZED_NAME_TRAINING_DATE_TIME)
  private OffsetDateTime trainingDateTime;

  public ModelTrainingDetails() {
  }

  public ModelTrainingDetails exampleCount(Integer exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  /**
   * The count of examples used to train the model.
   * @return exampleCount
   */
  @javax.annotation.Nullable
  public Integer getExampleCount() {
    return exampleCount;
  }

  public void setExampleCount(Integer exampleCount) {
    this.exampleCount = exampleCount;
  }


  public ModelTrainingDetails failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Reason for the training failure.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public ModelTrainingDetails status(TrainingStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TrainingStatus getStatus() {
    return status;
  }

  public void setStatus(TrainingStatus status) {
    this.status = status;
  }


  public ModelTrainingDetails statusId(Integer statusId) {
    this.statusId = statusId;
    return this;
  }

  /**
   * The train request status ID.
   * @return statusId
   */
  @javax.annotation.Nullable
  public Integer getStatusId() {
    return statusId;
  }

  public void setStatusId(Integer statusId) {
    this.statusId = statusId;
  }


  public ModelTrainingDetails trainingDateTime(OffsetDateTime trainingDateTime) {
    this.trainingDateTime = trainingDateTime;
    return this;
  }

  /**
   * When the model was trained.
   * @return trainingDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrainingDateTime() {
    return trainingDateTime;
  }

  public void setTrainingDateTime(OffsetDateTime trainingDateTime) {
    this.trainingDateTime = trainingDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelTrainingDetails modelTrainingDetails = (ModelTrainingDetails) o;
    return Objects.equals(this.exampleCount, modelTrainingDetails.exampleCount) &&
        Objects.equals(this.failureReason, modelTrainingDetails.failureReason) &&
        Objects.equals(this.status, modelTrainingDetails.status) &&
        Objects.equals(this.statusId, modelTrainingDetails.statusId) &&
        Objects.equals(this.trainingDateTime, modelTrainingDetails.trainingDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exampleCount, failureReason, status, statusId, trainingDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelTrainingDetails {\n");
    sb.append("    exampleCount: ").append(toIndentedString(exampleCount)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    trainingDateTime: ").append(toIndentedString(trainingDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exampleCount");
    openapiFields.add("failureReason");
    openapiFields.add("status");
    openapiFields.add("statusId");
    openapiFields.add("trainingDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelTrainingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelTrainingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelTrainingDetails is not found in the empty JSON string", ModelTrainingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelTrainingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelTrainingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TrainingStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelTrainingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelTrainingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelTrainingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelTrainingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelTrainingDetails>() {
           @Override
           public void write(JsonWriter out, ModelTrainingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelTrainingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelTrainingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelTrainingDetails
   * @throws IOException if the JSON string is invalid with respect to ModelTrainingDetails
   */
  public static ModelTrainingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelTrainingDetails.class);
  }

  /**
   * Convert an instance of ModelTrainingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

