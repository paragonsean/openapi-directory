/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Full name of the entity type.
 */
@JsonAdapter(ReadableType.Adapter.class)
public enum ReadableType {
  
  ENTITY_EXTRACTOR("Entity Extractor"),
  
  CHILD_ENTITY_EXTRACTOR("Child Entity Extractor"),
  
  HIERARCHICAL_ENTITY_EXTRACTOR("Hierarchical Entity Extractor"),
  
  HIERARCHICAL_CHILD_ENTITY_EXTRACTOR("Hierarchical Child Entity Extractor"),
  
  COMPOSITE_ENTITY_EXTRACTOR("Composite Entity Extractor"),
  
  LIST_ENTITY_EXTRACTOR("List Entity Extractor"),
  
  PREBUILT_ENTITY_EXTRACTOR("Prebuilt Entity Extractor"),
  
  INTENT_CLASSIFIER("Intent Classifier"),
  
  PATTERN_ANY_ENTITY_EXTRACTOR("Pattern.Any Entity Extractor"),
  
  CLOSED_LIST_ENTITY_EXTRACTOR("Closed List Entity Extractor"),
  
  REGEX_ENTITY_EXTRACTOR("Regex Entity Extractor");

  private String value;

  ReadableType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ReadableType fromValue(String value) {
    for (ReadableType b : ReadableType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ReadableType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ReadableType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ReadableType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ReadableType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ReadableType.fromValue(value);
  }
}

