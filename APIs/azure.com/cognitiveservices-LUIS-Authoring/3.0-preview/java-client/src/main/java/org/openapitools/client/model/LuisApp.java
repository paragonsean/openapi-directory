/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClosedList;
import org.openapitools.client.model.HierarchicalModel;
import org.openapitools.client.model.JSONModelFeature;
import org.openapitools.client.model.JSONRegexFeature;
import org.openapitools.client.model.JSONUtterance;
import org.openapitools.client.model.PatternAny;
import org.openapitools.client.model.PatternRule;
import org.openapitools.client.model.PrebuiltEntity;
import org.openapitools.client.model.RegexEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exported Model - An exported LUIS Application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:38.387536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LuisApp {
  public static final String SERIALIZED_NAME_CLOSED_LISTS = "closedLists";
  @SerializedName(SERIALIZED_NAME_CLOSED_LISTS)
  private List<ClosedList> closedLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPOSITES = "composites";
  @SerializedName(SERIALIZED_NAME_COMPOSITES)
  private List<HierarchicalModel> composites = new ArrayList<>();

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<HierarchicalModel> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIERARCHICALS = "hierarchicals";
  @SerializedName(SERIALIZED_NAME_HIERARCHICALS)
  private List<HierarchicalModel> hierarchicals = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTENTS = "intents";
  @SerializedName(SERIALIZED_NAME_INTENTS)
  private List<HierarchicalModel> intents = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATTERN_ANY_ENTITIES = "patternAnyEntities";
  @SerializedName(SERIALIZED_NAME_PATTERN_ANY_ENTITIES)
  private List<PatternAny> patternAnyEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  private List<PatternRule> patterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHRASELISTS = "phraselists";
  @SerializedName(SERIALIZED_NAME_PHRASELISTS)
  private List<JSONModelFeature> phraselists = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREBUILT_ENTITIES = "prebuiltEntities";
  @SerializedName(SERIALIZED_NAME_PREBUILT_ENTITIES)
  private List<PrebuiltEntity> prebuiltEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGEX_ENTITIES = "regex_entities";
  @SerializedName(SERIALIZED_NAME_REGEX_ENTITIES)
  private List<RegexEntity> regexEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGEX_FEATURES = "regex_features";
  @SerializedName(SERIALIZED_NAME_REGEX_FEATURES)
  private List<JSONRegexFeature> regexFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_UTTERANCES = "utterances";
  @SerializedName(SERIALIZED_NAME_UTTERANCES)
  private List<JSONUtterance> utterances = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public LuisApp() {
  }

  public LuisApp closedLists(List<ClosedList> closedLists) {
    this.closedLists = closedLists;
    return this;
  }

  public LuisApp addClosedListsItem(ClosedList closedListsItem) {
    if (this.closedLists == null) {
      this.closedLists = new ArrayList<>();
    }
    this.closedLists.add(closedListsItem);
    return this;
  }

  /**
   * List of list entities.
   * @return closedLists
   */
  @javax.annotation.Nullable
  public List<ClosedList> getClosedLists() {
    return closedLists;
  }

  public void setClosedLists(List<ClosedList> closedLists) {
    this.closedLists = closedLists;
  }


  public LuisApp composites(List<HierarchicalModel> composites) {
    this.composites = composites;
    return this;
  }

  public LuisApp addCompositesItem(HierarchicalModel compositesItem) {
    if (this.composites == null) {
      this.composites = new ArrayList<>();
    }
    this.composites.add(compositesItem);
    return this;
  }

  /**
   * List of composite entities.
   * @return composites
   */
  @javax.annotation.Nullable
  public List<HierarchicalModel> getComposites() {
    return composites;
  }

  public void setComposites(List<HierarchicalModel> composites) {
    this.composites = composites;
  }


  public LuisApp culture(String culture) {
    this.culture = culture;
    return this;
  }

  /**
   * The culture of the application. E.g.: en-us.
   * @return culture
   */
  @javax.annotation.Nullable
  public String getCulture() {
    return culture;
  }

  public void setCulture(String culture) {
    this.culture = culture;
  }


  public LuisApp desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * The description of the application.
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public LuisApp entities(List<HierarchicalModel> entities) {
    this.entities = entities;
    return this;
  }

  public LuisApp addEntitiesItem(HierarchicalModel entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * List of entities.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<HierarchicalModel> getEntities() {
    return entities;
  }

  public void setEntities(List<HierarchicalModel> entities) {
    this.entities = entities;
  }


  public LuisApp hierarchicals(List<HierarchicalModel> hierarchicals) {
    this.hierarchicals = hierarchicals;
    return this;
  }

  public LuisApp addHierarchicalsItem(HierarchicalModel hierarchicalsItem) {
    if (this.hierarchicals == null) {
      this.hierarchicals = new ArrayList<>();
    }
    this.hierarchicals.add(hierarchicalsItem);
    return this;
  }

  /**
   * List of hierarchical entities.
   * @return hierarchicals
   */
  @javax.annotation.Nullable
  public List<HierarchicalModel> getHierarchicals() {
    return hierarchicals;
  }

  public void setHierarchicals(List<HierarchicalModel> hierarchicals) {
    this.hierarchicals = hierarchicals;
  }


  public LuisApp intents(List<HierarchicalModel> intents) {
    this.intents = intents;
    return this;
  }

  public LuisApp addIntentsItem(HierarchicalModel intentsItem) {
    if (this.intents == null) {
      this.intents = new ArrayList<>();
    }
    this.intents.add(intentsItem);
    return this;
  }

  /**
   * List of intents.
   * @return intents
   */
  @javax.annotation.Nullable
  public List<HierarchicalModel> getIntents() {
    return intents;
  }

  public void setIntents(List<HierarchicalModel> intents) {
    this.intents = intents;
  }


  public LuisApp name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LuisApp patternAnyEntities(List<PatternAny> patternAnyEntities) {
    this.patternAnyEntities = patternAnyEntities;
    return this;
  }

  public LuisApp addPatternAnyEntitiesItem(PatternAny patternAnyEntitiesItem) {
    if (this.patternAnyEntities == null) {
      this.patternAnyEntities = new ArrayList<>();
    }
    this.patternAnyEntities.add(patternAnyEntitiesItem);
    return this;
  }

  /**
   * List of Pattern.Any entities.
   * @return patternAnyEntities
   */
  @javax.annotation.Nullable
  public List<PatternAny> getPatternAnyEntities() {
    return patternAnyEntities;
  }

  public void setPatternAnyEntities(List<PatternAny> patternAnyEntities) {
    this.patternAnyEntities = patternAnyEntities;
  }


  public LuisApp patterns(List<PatternRule> patterns) {
    this.patterns = patterns;
    return this;
  }

  public LuisApp addPatternsItem(PatternRule patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

  /**
   * List of patterns.
   * @return patterns
   */
  @javax.annotation.Nullable
  public List<PatternRule> getPatterns() {
    return patterns;
  }

  public void setPatterns(List<PatternRule> patterns) {
    this.patterns = patterns;
  }


  public LuisApp phraselists(List<JSONModelFeature> phraselists) {
    this.phraselists = phraselists;
    return this;
  }

  public LuisApp addPhraselistsItem(JSONModelFeature phraselistsItem) {
    if (this.phraselists == null) {
      this.phraselists = new ArrayList<>();
    }
    this.phraselists.add(phraselistsItem);
    return this;
  }

  /**
   * List of model features.
   * @return phraselists
   */
  @javax.annotation.Nullable
  public List<JSONModelFeature> getPhraselists() {
    return phraselists;
  }

  public void setPhraselists(List<JSONModelFeature> phraselists) {
    this.phraselists = phraselists;
  }


  public LuisApp prebuiltEntities(List<PrebuiltEntity> prebuiltEntities) {
    this.prebuiltEntities = prebuiltEntities;
    return this;
  }

  public LuisApp addPrebuiltEntitiesItem(PrebuiltEntity prebuiltEntitiesItem) {
    if (this.prebuiltEntities == null) {
      this.prebuiltEntities = new ArrayList<>();
    }
    this.prebuiltEntities.add(prebuiltEntitiesItem);
    return this;
  }

  /**
   * List of prebuilt entities.
   * @return prebuiltEntities
   */
  @javax.annotation.Nullable
  public List<PrebuiltEntity> getPrebuiltEntities() {
    return prebuiltEntities;
  }

  public void setPrebuiltEntities(List<PrebuiltEntity> prebuiltEntities) {
    this.prebuiltEntities = prebuiltEntities;
  }


  public LuisApp regexEntities(List<RegexEntity> regexEntities) {
    this.regexEntities = regexEntities;
    return this;
  }

  public LuisApp addRegexEntitiesItem(RegexEntity regexEntitiesItem) {
    if (this.regexEntities == null) {
      this.regexEntities = new ArrayList<>();
    }
    this.regexEntities.add(regexEntitiesItem);
    return this;
  }

  /**
   * List of regular expression entities.
   * @return regexEntities
   */
  @javax.annotation.Nullable
  public List<RegexEntity> getRegexEntities() {
    return regexEntities;
  }

  public void setRegexEntities(List<RegexEntity> regexEntities) {
    this.regexEntities = regexEntities;
  }


  public LuisApp regexFeatures(List<JSONRegexFeature> regexFeatures) {
    this.regexFeatures = regexFeatures;
    return this;
  }

  public LuisApp addRegexFeaturesItem(JSONRegexFeature regexFeaturesItem) {
    if (this.regexFeatures == null) {
      this.regexFeatures = new ArrayList<>();
    }
    this.regexFeatures.add(regexFeaturesItem);
    return this;
  }

  /**
   * List of pattern features.
   * @return regexFeatures
   */
  @javax.annotation.Nullable
  public List<JSONRegexFeature> getRegexFeatures() {
    return regexFeatures;
  }

  public void setRegexFeatures(List<JSONRegexFeature> regexFeatures) {
    this.regexFeatures = regexFeatures;
  }


  public LuisApp utterances(List<JSONUtterance> utterances) {
    this.utterances = utterances;
    return this;
  }

  public LuisApp addUtterancesItem(JSONUtterance utterancesItem) {
    if (this.utterances == null) {
      this.utterances = new ArrayList<>();
    }
    this.utterances.add(utterancesItem);
    return this;
  }

  /**
   * List of example utterances.
   * @return utterances
   */
  @javax.annotation.Nullable
  public List<JSONUtterance> getUtterances() {
    return utterances;
  }

  public void setUtterances(List<JSONUtterance> utterances) {
    this.utterances = utterances;
  }


  public LuisApp versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * The version ID of the application that was exported.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LuisApp instance itself
   */
  public LuisApp putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LuisApp luisApp = (LuisApp) o;
    return Objects.equals(this.closedLists, luisApp.closedLists) &&
        Objects.equals(this.composites, luisApp.composites) &&
        Objects.equals(this.culture, luisApp.culture) &&
        Objects.equals(this.desc, luisApp.desc) &&
        Objects.equals(this.entities, luisApp.entities) &&
        Objects.equals(this.hierarchicals, luisApp.hierarchicals) &&
        Objects.equals(this.intents, luisApp.intents) &&
        Objects.equals(this.name, luisApp.name) &&
        Objects.equals(this.patternAnyEntities, luisApp.patternAnyEntities) &&
        Objects.equals(this.patterns, luisApp.patterns) &&
        Objects.equals(this.phraselists, luisApp.phraselists) &&
        Objects.equals(this.prebuiltEntities, luisApp.prebuiltEntities) &&
        Objects.equals(this.regexEntities, luisApp.regexEntities) &&
        Objects.equals(this.regexFeatures, luisApp.regexFeatures) &&
        Objects.equals(this.utterances, luisApp.utterances) &&
        Objects.equals(this.versionId, luisApp.versionId)&&
        Objects.equals(this.additionalProperties, luisApp.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedLists, composites, culture, desc, entities, hierarchicals, intents, name, patternAnyEntities, patterns, phraselists, prebuiltEntities, regexEntities, regexFeatures, utterances, versionId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LuisApp {\n");
    sb.append("    closedLists: ").append(toIndentedString(closedLists)).append("\n");
    sb.append("    composites: ").append(toIndentedString(composites)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    hierarchicals: ").append(toIndentedString(hierarchicals)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    patternAnyEntities: ").append(toIndentedString(patternAnyEntities)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("    phraselists: ").append(toIndentedString(phraselists)).append("\n");
    sb.append("    prebuiltEntities: ").append(toIndentedString(prebuiltEntities)).append("\n");
    sb.append("    regexEntities: ").append(toIndentedString(regexEntities)).append("\n");
    sb.append("    regexFeatures: ").append(toIndentedString(regexFeatures)).append("\n");
    sb.append("    utterances: ").append(toIndentedString(utterances)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closedLists");
    openapiFields.add("composites");
    openapiFields.add("culture");
    openapiFields.add("desc");
    openapiFields.add("entities");
    openapiFields.add("hierarchicals");
    openapiFields.add("intents");
    openapiFields.add("name");
    openapiFields.add("patternAnyEntities");
    openapiFields.add("patterns");
    openapiFields.add("phraselists");
    openapiFields.add("prebuiltEntities");
    openapiFields.add("regex_entities");
    openapiFields.add("regex_features");
    openapiFields.add("utterances");
    openapiFields.add("versionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LuisApp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LuisApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LuisApp is not found in the empty JSON string", LuisApp.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("closedLists") != null && !jsonObj.get("closedLists").isJsonNull()) {
        JsonArray jsonArrayclosedLists = jsonObj.getAsJsonArray("closedLists");
        if (jsonArrayclosedLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("closedLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `closedLists` to be an array in the JSON string but got `%s`", jsonObj.get("closedLists").toString()));
          }

          // validate the optional field `closedLists` (array)
          for (int i = 0; i < jsonArrayclosedLists.size(); i++) {
            ClosedList.validateJsonElement(jsonArrayclosedLists.get(i));
          };
        }
      }
      if (jsonObj.get("composites") != null && !jsonObj.get("composites").isJsonNull()) {
        JsonArray jsonArraycomposites = jsonObj.getAsJsonArray("composites");
        if (jsonArraycomposites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("composites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `composites` to be an array in the JSON string but got `%s`", jsonObj.get("composites").toString()));
          }

          // validate the optional field `composites` (array)
          for (int i = 0; i < jsonArraycomposites.size(); i++) {
            HierarchicalModel.validateJsonElement(jsonArraycomposites.get(i));
          };
        }
      }
      if ((jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) && !jsonObj.get("culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culture").toString()));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            HierarchicalModel.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if (jsonObj.get("hierarchicals") != null && !jsonObj.get("hierarchicals").isJsonNull()) {
        JsonArray jsonArrayhierarchicals = jsonObj.getAsJsonArray("hierarchicals");
        if (jsonArrayhierarchicals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hierarchicals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hierarchicals` to be an array in the JSON string but got `%s`", jsonObj.get("hierarchicals").toString()));
          }

          // validate the optional field `hierarchicals` (array)
          for (int i = 0; i < jsonArrayhierarchicals.size(); i++) {
            HierarchicalModel.validateJsonElement(jsonArrayhierarchicals.get(i));
          };
        }
      }
      if (jsonObj.get("intents") != null && !jsonObj.get("intents").isJsonNull()) {
        JsonArray jsonArrayintents = jsonObj.getAsJsonArray("intents");
        if (jsonArrayintents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intents` to be an array in the JSON string but got `%s`", jsonObj.get("intents").toString()));
          }

          // validate the optional field `intents` (array)
          for (int i = 0; i < jsonArrayintents.size(); i++) {
            HierarchicalModel.validateJsonElement(jsonArrayintents.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("patternAnyEntities") != null && !jsonObj.get("patternAnyEntities").isJsonNull()) {
        JsonArray jsonArraypatternAnyEntities = jsonObj.getAsJsonArray("patternAnyEntities");
        if (jsonArraypatternAnyEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patternAnyEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patternAnyEntities` to be an array in the JSON string but got `%s`", jsonObj.get("patternAnyEntities").toString()));
          }

          // validate the optional field `patternAnyEntities` (array)
          for (int i = 0; i < jsonArraypatternAnyEntities.size(); i++) {
            PatternAny.validateJsonElement(jsonArraypatternAnyEntities.get(i));
          };
        }
      }
      if (jsonObj.get("patterns") != null && !jsonObj.get("patterns").isJsonNull()) {
        JsonArray jsonArraypatterns = jsonObj.getAsJsonArray("patterns");
        if (jsonArraypatterns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patterns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patterns` to be an array in the JSON string but got `%s`", jsonObj.get("patterns").toString()));
          }

          // validate the optional field `patterns` (array)
          for (int i = 0; i < jsonArraypatterns.size(); i++) {
            PatternRule.validateJsonElement(jsonArraypatterns.get(i));
          };
        }
      }
      if (jsonObj.get("phraselists") != null && !jsonObj.get("phraselists").isJsonNull()) {
        JsonArray jsonArrayphraselists = jsonObj.getAsJsonArray("phraselists");
        if (jsonArrayphraselists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phraselists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phraselists` to be an array in the JSON string but got `%s`", jsonObj.get("phraselists").toString()));
          }

          // validate the optional field `phraselists` (array)
          for (int i = 0; i < jsonArrayphraselists.size(); i++) {
            JSONModelFeature.validateJsonElement(jsonArrayphraselists.get(i));
          };
        }
      }
      if (jsonObj.get("prebuiltEntities") != null && !jsonObj.get("prebuiltEntities").isJsonNull()) {
        JsonArray jsonArrayprebuiltEntities = jsonObj.getAsJsonArray("prebuiltEntities");
        if (jsonArrayprebuiltEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prebuiltEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prebuiltEntities` to be an array in the JSON string but got `%s`", jsonObj.get("prebuiltEntities").toString()));
          }

          // validate the optional field `prebuiltEntities` (array)
          for (int i = 0; i < jsonArrayprebuiltEntities.size(); i++) {
            PrebuiltEntity.validateJsonElement(jsonArrayprebuiltEntities.get(i));
          };
        }
      }
      if (jsonObj.get("regex_entities") != null && !jsonObj.get("regex_entities").isJsonNull()) {
        JsonArray jsonArrayregexEntities = jsonObj.getAsJsonArray("regex_entities");
        if (jsonArrayregexEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regex_entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regex_entities` to be an array in the JSON string but got `%s`", jsonObj.get("regex_entities").toString()));
          }

          // validate the optional field `regex_entities` (array)
          for (int i = 0; i < jsonArrayregexEntities.size(); i++) {
            RegexEntity.validateJsonElement(jsonArrayregexEntities.get(i));
          };
        }
      }
      if (jsonObj.get("regex_features") != null && !jsonObj.get("regex_features").isJsonNull()) {
        JsonArray jsonArrayregexFeatures = jsonObj.getAsJsonArray("regex_features");
        if (jsonArrayregexFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regex_features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regex_features` to be an array in the JSON string but got `%s`", jsonObj.get("regex_features").toString()));
          }

          // validate the optional field `regex_features` (array)
          for (int i = 0; i < jsonArrayregexFeatures.size(); i++) {
            JSONRegexFeature.validateJsonElement(jsonArrayregexFeatures.get(i));
          };
        }
      }
      if (jsonObj.get("utterances") != null && !jsonObj.get("utterances").isJsonNull()) {
        JsonArray jsonArrayutterances = jsonObj.getAsJsonArray("utterances");
        if (jsonArrayutterances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("utterances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `utterances` to be an array in the JSON string but got `%s`", jsonObj.get("utterances").toString()));
          }

          // validate the optional field `utterances` (array)
          for (int i = 0; i < jsonArrayutterances.size(); i++) {
            JSONUtterance.validateJsonElement(jsonArrayutterances.get(i));
          };
        }
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LuisApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LuisApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LuisApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LuisApp.class));

       return (TypeAdapter<T>) new TypeAdapter<LuisApp>() {
           @Override
           public void write(JsonWriter out, LuisApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LuisApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             LuisApp instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LuisApp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LuisApp
   * @throws IOException if the JSON string is invalid with respect to LuisApp
   */
  public static LuisApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LuisApp.class);
  }

  /**
   * Convert an instance of LuisApp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

