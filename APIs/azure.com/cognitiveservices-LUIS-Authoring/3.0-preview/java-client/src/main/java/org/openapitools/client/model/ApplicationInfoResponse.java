/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response containing the Application Info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:38.387536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInfoResponse {
  public static final String SERIALIZED_NAME_ACTIVE_VERSION = "activeVersion";
  @SerializedName(SERIALIZED_NAME_ACTIVE_VERSION)
  private String activeVersion;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private String createdDateTime;

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ENDPOINT_HITS_COUNT = "endpointHitsCount";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_HITS_COUNT)
  private Integer endpointHitsCount;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private Object endpoints;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USAGE_SCENARIO = "usageScenario";
  @SerializedName(SERIALIZED_NAME_USAGE_SCENARIO)
  private String usageScenario;

  public static final String SERIALIZED_NAME_VERSIONS_COUNT = "versionsCount";
  @SerializedName(SERIALIZED_NAME_VERSIONS_COUNT)
  private Integer versionsCount;

  public ApplicationInfoResponse() {
  }

  public ApplicationInfoResponse activeVersion(String activeVersion) {
    this.activeVersion = activeVersion;
    return this;
  }

  /**
   * The version ID currently marked as active.
   * @return activeVersion
   */
  @javax.annotation.Nullable
  public String getActiveVersion() {
    return activeVersion;
  }

  public void setActiveVersion(String activeVersion) {
    this.activeVersion = activeVersion;
  }


  public ApplicationInfoResponse createdDateTime(String createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  /**
   * The version&#39;s creation timestamp.
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public String getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(String createdDateTime) {
    this.createdDateTime = createdDateTime;
  }


  public ApplicationInfoResponse culture(String culture) {
    this.culture = culture;
    return this;
  }

  /**
   * The culture of the application. For example, \&quot;en-us\&quot;.
   * @return culture
   */
  @javax.annotation.Nullable
  public String getCulture() {
    return culture;
  }

  public void setCulture(String culture) {
    this.culture = culture;
  }


  public ApplicationInfoResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the application.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationInfoResponse domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The domain for the new application. Optional. For example, Comics.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ApplicationInfoResponse endpointHitsCount(Integer endpointHitsCount) {
    this.endpointHitsCount = endpointHitsCount;
    return this;
  }

  /**
   * Number of calls made to this endpoint.
   * @return endpointHitsCount
   */
  @javax.annotation.Nullable
  public Integer getEndpointHitsCount() {
    return endpointHitsCount;
  }

  public void setEndpointHitsCount(Integer endpointHitsCount) {
    this.endpointHitsCount = endpointHitsCount;
  }


  public ApplicationInfoResponse endpoints(Object endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * The Runtime endpoint URL for this model version.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public Object getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(Object endpoints) {
    this.endpoints = endpoints;
  }


  public ApplicationInfoResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The ID (GUID) of the application.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ApplicationInfoResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationInfoResponse usageScenario(String usageScenario) {
    this.usageScenario = usageScenario;
    return this;
  }

  /**
   * Defines the scenario for the new application. Optional. For example, IoT.
   * @return usageScenario
   */
  @javax.annotation.Nullable
  public String getUsageScenario() {
    return usageScenario;
  }

  public void setUsageScenario(String usageScenario) {
    this.usageScenario = usageScenario;
  }


  public ApplicationInfoResponse versionsCount(Integer versionsCount) {
    this.versionsCount = versionsCount;
    return this;
  }

  /**
   * Amount of model versions within the application.
   * @return versionsCount
   */
  @javax.annotation.Nullable
  public Integer getVersionsCount() {
    return versionsCount;
  }

  public void setVersionsCount(Integer versionsCount) {
    this.versionsCount = versionsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInfoResponse applicationInfoResponse = (ApplicationInfoResponse) o;
    return Objects.equals(this.activeVersion, applicationInfoResponse.activeVersion) &&
        Objects.equals(this.createdDateTime, applicationInfoResponse.createdDateTime) &&
        Objects.equals(this.culture, applicationInfoResponse.culture) &&
        Objects.equals(this.description, applicationInfoResponse.description) &&
        Objects.equals(this.domain, applicationInfoResponse.domain) &&
        Objects.equals(this.endpointHitsCount, applicationInfoResponse.endpointHitsCount) &&
        Objects.equals(this.endpoints, applicationInfoResponse.endpoints) &&
        Objects.equals(this.id, applicationInfoResponse.id) &&
        Objects.equals(this.name, applicationInfoResponse.name) &&
        Objects.equals(this.usageScenario, applicationInfoResponse.usageScenario) &&
        Objects.equals(this.versionsCount, applicationInfoResponse.versionsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeVersion, createdDateTime, culture, description, domain, endpointHitsCount, endpoints, id, name, usageScenario, versionsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInfoResponse {\n");
    sb.append("    activeVersion: ").append(toIndentedString(activeVersion)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endpointHitsCount: ").append(toIndentedString(endpointHitsCount)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usageScenario: ").append(toIndentedString(usageScenario)).append("\n");
    sb.append("    versionsCount: ").append(toIndentedString(versionsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeVersion");
    openapiFields.add("createdDateTime");
    openapiFields.add("culture");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("endpointHitsCount");
    openapiFields.add("endpoints");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("usageScenario");
    openapiFields.add("versionsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInfoResponse is not found in the empty JSON string", ApplicationInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeVersion") != null && !jsonObj.get("activeVersion").isJsonNull()) && !jsonObj.get("activeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeVersion").toString()));
      }
      if ((jsonObj.get("createdDateTime") != null && !jsonObj.get("createdDateTime").isJsonNull()) && !jsonObj.get("createdDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDateTime").toString()));
      }
      if ((jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) && !jsonObj.get("culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culture").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("usageScenario") != null && !jsonObj.get("usageScenario").isJsonNull()) && !jsonObj.get("usageScenario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageScenario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageScenario").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInfoResponse>() {
           @Override
           public void write(JsonWriter out, ApplicationInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInfoResponse
   * @throws IOException if the JSON string is invalid with respect to ApplicationInfoResponse
   */
  public static ApplicationInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInfoResponse.class);
  }

  /**
   * Convert an instance of ApplicationInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

