/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityLabelObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A labeled example utterance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:38.387536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExampleLabelObject {
  public static final String SERIALIZED_NAME_ENTITY_LABELS = "entityLabels";
  @SerializedName(SERIALIZED_NAME_ENTITY_LABELS)
  private List<EntityLabelObject> entityLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public ExampleLabelObject() {
  }

  public ExampleLabelObject entityLabels(List<EntityLabelObject> entityLabels) {
    this.entityLabels = entityLabels;
    return this;
  }

  public ExampleLabelObject addEntityLabelsItem(EntityLabelObject entityLabelsItem) {
    if (this.entityLabels == null) {
      this.entityLabels = new ArrayList<>();
    }
    this.entityLabels.add(entityLabelsItem);
    return this;
  }

  /**
   * The identified entities within the example utterance.
   * @return entityLabels
   */
  @javax.annotation.Nullable
  public List<EntityLabelObject> getEntityLabels() {
    return entityLabels;
  }

  public void setEntityLabels(List<EntityLabelObject> entityLabels) {
    this.entityLabels = entityLabels;
  }


  public ExampleLabelObject intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * The identified intent representing the example utterance.
   * @return intentName
   */
  @javax.annotation.Nullable
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public ExampleLabelObject text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The example utterance.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExampleLabelObject exampleLabelObject = (ExampleLabelObject) o;
    return Objects.equals(this.entityLabels, exampleLabelObject.entityLabels) &&
        Objects.equals(this.intentName, exampleLabelObject.intentName) &&
        Objects.equals(this.text, exampleLabelObject.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityLabels, intentName, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExampleLabelObject {\n");
    sb.append("    entityLabels: ").append(toIndentedString(entityLabels)).append("\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityLabels");
    openapiFields.add("intentName");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExampleLabelObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExampleLabelObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExampleLabelObject is not found in the empty JSON string", ExampleLabelObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExampleLabelObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExampleLabelObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entityLabels") != null && !jsonObj.get("entityLabels").isJsonNull()) {
        JsonArray jsonArrayentityLabels = jsonObj.getAsJsonArray("entityLabels");
        if (jsonArrayentityLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityLabels` to be an array in the JSON string but got `%s`", jsonObj.get("entityLabels").toString()));
          }

          // validate the optional field `entityLabels` (array)
          for (int i = 0; i < jsonArrayentityLabels.size(); i++) {
            EntityLabelObject.validateJsonElement(jsonArrayentityLabels.get(i));
          };
        }
      }
      if ((jsonObj.get("intentName") != null && !jsonObj.get("intentName").isJsonNull()) && !jsonObj.get("intentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intentName").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExampleLabelObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExampleLabelObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExampleLabelObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExampleLabelObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ExampleLabelObject>() {
           @Override
           public void write(JsonWriter out, ExampleLabelObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExampleLabelObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExampleLabelObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExampleLabelObject
   * @throws IOException if the JSON string is invalid with respect to ExampleLabelObject
   */
  public static ExampleLabelObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExampleLabelObject.class);
  }

  /**
   * Convert an instance of ExampleLabelObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

