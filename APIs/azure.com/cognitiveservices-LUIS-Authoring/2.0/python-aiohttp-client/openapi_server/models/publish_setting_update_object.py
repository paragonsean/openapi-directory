# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishSettingUpdateObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sentiment_analysis: bool=None, speech: bool=None, spell_checker: bool=None):
        """PublishSettingUpdateObject - a model defined in OpenAPI

        :param sentiment_analysis: The sentiment_analysis of this PublishSettingUpdateObject.
        :param speech: The speech of this PublishSettingUpdateObject.
        :param spell_checker: The spell_checker of this PublishSettingUpdateObject.
        """
        self.openapi_types = {
            'sentiment_analysis': bool,
            'speech': bool,
            'spell_checker': bool
        }

        self.attribute_map = {
            'sentiment_analysis': 'sentimentAnalysis',
            'speech': 'speech',
            'spell_checker': 'spellChecker'
        }

        self._sentiment_analysis = sentiment_analysis
        self._speech = speech
        self._spell_checker = spell_checker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishSettingUpdateObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishSettingUpdateObject of this PublishSettingUpdateObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentiment_analysis(self):
        """Gets the sentiment_analysis of this PublishSettingUpdateObject.

        Setting sentiment analysis as true returns the Sentiment of the input utterance along with the response

        :return: The sentiment_analysis of this PublishSettingUpdateObject.
        :rtype: bool
        """
        return self._sentiment_analysis

    @sentiment_analysis.setter
    def sentiment_analysis(self, sentiment_analysis):
        """Sets the sentiment_analysis of this PublishSettingUpdateObject.

        Setting sentiment analysis as true returns the Sentiment of the input utterance along with the response

        :param sentiment_analysis: The sentiment_analysis of this PublishSettingUpdateObject.
        :type sentiment_analysis: bool
        """

        self._sentiment_analysis = sentiment_analysis

    @property
    def speech(self):
        """Gets the speech of this PublishSettingUpdateObject.

        Setting speech as public enables speech priming in your app

        :return: The speech of this PublishSettingUpdateObject.
        :rtype: bool
        """
        return self._speech

    @speech.setter
    def speech(self, speech):
        """Sets the speech of this PublishSettingUpdateObject.

        Setting speech as public enables speech priming in your app

        :param speech: The speech of this PublishSettingUpdateObject.
        :type speech: bool
        """

        self._speech = speech

    @property
    def spell_checker(self):
        """Gets the spell_checker of this PublishSettingUpdateObject.

        Setting spell checker as public enables spell checking the input utterance.

        :return: The spell_checker of this PublishSettingUpdateObject.
        :rtype: bool
        """
        return self._spell_checker

    @spell_checker.setter
    def spell_checker(self, spell_checker):
        """Sets the spell_checker of this PublishSettingUpdateObject.

        Setting spell checker as public enables spell checking the input utterance.

        :param spell_checker: The spell_checker of this PublishSettingUpdateObject.
        :type spell_checker: bool
        """

        self._spell_checker = spell_checker
