# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityPrediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_token_index: int=None, entity_name: str=None, phrase: str=None, start_token_index: int=None):
        """EntityPrediction - a model defined in OpenAPI

        :param end_token_index: The end_token_index of this EntityPrediction.
        :param entity_name: The entity_name of this EntityPrediction.
        :param phrase: The phrase of this EntityPrediction.
        :param start_token_index: The start_token_index of this EntityPrediction.
        """
        self.openapi_types = {
            'end_token_index': int,
            'entity_name': str,
            'phrase': str,
            'start_token_index': int
        }

        self.attribute_map = {
            'end_token_index': 'endTokenIndex',
            'entity_name': 'entityName',
            'phrase': 'phrase',
            'start_token_index': 'startTokenIndex'
        }

        self._end_token_index = end_token_index
        self._entity_name = entity_name
        self._phrase = phrase
        self._start_token_index = start_token_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityPrediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityPrediction of this EntityPrediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_token_index(self):
        """Gets the end_token_index of this EntityPrediction.

        The index within the utterance where the extracted entity ends.

        :return: The end_token_index of this EntityPrediction.
        :rtype: int
        """
        return self._end_token_index

    @end_token_index.setter
    def end_token_index(self, end_token_index):
        """Sets the end_token_index of this EntityPrediction.

        The index within the utterance where the extracted entity ends.

        :param end_token_index: The end_token_index of this EntityPrediction.
        :type end_token_index: int
        """
        if end_token_index is None:
            raise ValueError("Invalid value for `end_token_index`, must not be `None`")

        self._end_token_index = end_token_index

    @property
    def entity_name(self):
        """Gets the entity_name of this EntityPrediction.

        The entity's name

        :return: The entity_name of this EntityPrediction.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this EntityPrediction.

        The entity's name

        :param entity_name: The entity_name of this EntityPrediction.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")

        self._entity_name = entity_name

    @property
    def phrase(self):
        """Gets the phrase of this EntityPrediction.

        The actual token(s) that comprise the entity.

        :return: The phrase of this EntityPrediction.
        :rtype: str
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this EntityPrediction.

        The actual token(s) that comprise the entity.

        :param phrase: The phrase of this EntityPrediction.
        :type phrase: str
        """
        if phrase is None:
            raise ValueError("Invalid value for `phrase`, must not be `None`")

        self._phrase = phrase

    @property
    def start_token_index(self):
        """Gets the start_token_index of this EntityPrediction.

        The index within the utterance where the extracted entity starts.

        :return: The start_token_index of this EntityPrediction.
        :rtype: int
        """
        return self._start_token_index

    @start_token_index.setter
    def start_token_index(self, start_token_index):
        """Sets the start_token_index of this EntityPrediction.

        The index within the utterance where the extracted entity starts.

        :param start_token_index: The start_token_index of this EntityPrediction.
        :type start_token_index: int
        """
        if start_token_index is None:
            raise ValueError("Invalid value for `start_token_index`, must not be `None`")

        self._start_token_index = start_token_index
