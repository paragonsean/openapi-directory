# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhraselistUpdateObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=True, is_exchangeable: bool=True, name: str=None, phrases: str=None):
        """PhraselistUpdateObject - a model defined in OpenAPI

        :param is_active: The is_active of this PhraselistUpdateObject.
        :param is_exchangeable: The is_exchangeable of this PhraselistUpdateObject.
        :param name: The name of this PhraselistUpdateObject.
        :param phrases: The phrases of this PhraselistUpdateObject.
        """
        self.openapi_types = {
            'is_active': bool,
            'is_exchangeable': bool,
            'name': str,
            'phrases': str
        }

        self.attribute_map = {
            'is_active': 'isActive',
            'is_exchangeable': 'isExchangeable',
            'name': 'name',
            'phrases': 'phrases'
        }

        self._is_active = is_active
        self._is_exchangeable = is_exchangeable
        self._name = name
        self._phrases = phrases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhraselistUpdateObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhraselistUpdateObject of this PhraselistUpdateObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this PhraselistUpdateObject.

        Indicates if the Phraselist is enabled.

        :return: The is_active of this PhraselistUpdateObject.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PhraselistUpdateObject.

        Indicates if the Phraselist is enabled.

        :param is_active: The is_active of this PhraselistUpdateObject.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_exchangeable(self):
        """Gets the is_exchangeable of this PhraselistUpdateObject.

        An exchangeable phrase list feature are serves as single feature to the LUIS underlying training algorithm. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesn’t. Think of an exchangeable as a synonyms list. A non-exchangeable phrase list feature has all the phrases in the list serve as separate features to the underlying training algorithm. So, if you your phrase list feature contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-exchangeable phrase list feature as an additional bag of words that you are willing to add to LUIS existing vocabulary features. Think of a non-exchangeable as set of different words. Default value is true.

        :return: The is_exchangeable of this PhraselistUpdateObject.
        :rtype: bool
        """
        return self._is_exchangeable

    @is_exchangeable.setter
    def is_exchangeable(self, is_exchangeable):
        """Sets the is_exchangeable of this PhraselistUpdateObject.

        An exchangeable phrase list feature are serves as single feature to the LUIS underlying training algorithm. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesn’t. Think of an exchangeable as a synonyms list. A non-exchangeable phrase list feature has all the phrases in the list serve as separate features to the underlying training algorithm. So, if you your phrase list feature contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-exchangeable phrase list feature as an additional bag of words that you are willing to add to LUIS existing vocabulary features. Think of a non-exchangeable as set of different words. Default value is true.

        :param is_exchangeable: The is_exchangeable of this PhraselistUpdateObject.
        :type is_exchangeable: bool
        """

        self._is_exchangeable = is_exchangeable

    @property
    def name(self):
        """Gets the name of this PhraselistUpdateObject.

        The Phraselist name.

        :return: The name of this PhraselistUpdateObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhraselistUpdateObject.

        The Phraselist name.

        :param name: The name of this PhraselistUpdateObject.
        :type name: str
        """

        self._name = name

    @property
    def phrases(self):
        """Gets the phrases of this PhraselistUpdateObject.

        List of comma-separated phrases that represent the Phraselist.

        :return: The phrases of this PhraselistUpdateObject.
        :rtype: str
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this PhraselistUpdateObject.

        List of comma-separated phrases that represent the Phraselist.

        :param phrases: The phrases of this PhraselistUpdateObject.
        :type phrases: str
        """

        self._phrases = phrases
