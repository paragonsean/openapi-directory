# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prebuilt_domain_item import PrebuiltDomainItem
from openapi_server import util


class PrebuiltDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, culture: str=None, description: str=None, entities: List[PrebuiltDomainItem]=None, examples: str=None, intents: List[PrebuiltDomainItem]=None, name: str=None):
        """PrebuiltDomain - a model defined in OpenAPI

        :param culture: The culture of this PrebuiltDomain.
        :param description: The description of this PrebuiltDomain.
        :param entities: The entities of this PrebuiltDomain.
        :param examples: The examples of this PrebuiltDomain.
        :param intents: The intents of this PrebuiltDomain.
        :param name: The name of this PrebuiltDomain.
        """
        self.openapi_types = {
            'culture': str,
            'description': str,
            'entities': List[PrebuiltDomainItem],
            'examples': str,
            'intents': List[PrebuiltDomainItem],
            'name': str
        }

        self.attribute_map = {
            'culture': 'culture',
            'description': 'description',
            'entities': 'entities',
            'examples': 'examples',
            'intents': 'intents',
            'name': 'name'
        }

        self._culture = culture
        self._description = description
        self._entities = entities
        self._examples = examples
        self._intents = intents
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrebuiltDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrebuiltDomain of this PrebuiltDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def culture(self):
        """Gets the culture of this PrebuiltDomain.


        :return: The culture of this PrebuiltDomain.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this PrebuiltDomain.


        :param culture: The culture of this PrebuiltDomain.
        :type culture: str
        """

        self._culture = culture

    @property
    def description(self):
        """Gets the description of this PrebuiltDomain.


        :return: The description of this PrebuiltDomain.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrebuiltDomain.


        :param description: The description of this PrebuiltDomain.
        :type description: str
        """

        self._description = description

    @property
    def entities(self):
        """Gets the entities of this PrebuiltDomain.


        :return: The entities of this PrebuiltDomain.
        :rtype: List[PrebuiltDomainItem]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this PrebuiltDomain.


        :param entities: The entities of this PrebuiltDomain.
        :type entities: List[PrebuiltDomainItem]
        """

        self._entities = entities

    @property
    def examples(self):
        """Gets the examples of this PrebuiltDomain.


        :return: The examples of this PrebuiltDomain.
        :rtype: str
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this PrebuiltDomain.


        :param examples: The examples of this PrebuiltDomain.
        :type examples: str
        """

        self._examples = examples

    @property
    def intents(self):
        """Gets the intents of this PrebuiltDomain.


        :return: The intents of this PrebuiltDomain.
        :rtype: List[PrebuiltDomainItem]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this PrebuiltDomain.


        :param intents: The intents of this PrebuiltDomain.
        :type intents: List[PrebuiltDomainItem]
        """

        self._intents = intents

    @property
    def name(self):
        """Gets the name of this PrebuiltDomain.


        :return: The name of this PrebuiltDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrebuiltDomain.


        :param name: The name of this PrebuiltDomain.
        :type name: str
        """

        self._name = name
