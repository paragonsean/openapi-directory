/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppVersionSettingObject from '../model/AppVersionSettingObject';
import ApplicationCreateObject from '../model/ApplicationCreateObject';
import ApplicationInfoResponse from '../model/ApplicationInfoResponse';
import ApplicationPublishObject from '../model/ApplicationPublishObject';
import ApplicationSettingUpdateObject from '../model/ApplicationSettingUpdateObject';
import ApplicationSettings from '../model/ApplicationSettings';
import ApplicationUpdateObject from '../model/ApplicationUpdateObject';
import AvailableCulture from '../model/AvailableCulture';
import AvailablePrebuiltEntityModel from '../model/AvailablePrebuiltEntityModel';
import AzureAccountInfoObject from '../model/AzureAccountInfoObject';
import BatchLabelExample from '../model/BatchLabelExample';
import ClosedListEntityExtractor from '../model/ClosedListEntityExtractor';
import ClosedListModelCreateObject from '../model/ClosedListModelCreateObject';
import ClosedListModelPatchObject from '../model/ClosedListModelPatchObject';
import ClosedListModelUpdateObject from '../model/ClosedListModelUpdateObject';
import CollaboratorsArray from '../model/CollaboratorsArray';
import CompositeEntityExtractor from '../model/CompositeEntityExtractor';
import CompositeEntityModel from '../model/CompositeEntityModel';
import CustomPrebuiltModel from '../model/CustomPrebuiltModel';
import EnqueueTrainingResponse from '../model/EnqueueTrainingResponse';
import EntitiesSuggestionExample from '../model/EntitiesSuggestionExample';
import EntityExtractor from '../model/EntityExtractor';
import EntityRole from '../model/EntityRole';
import EntityRoleCreateObject from '../model/EntityRoleCreateObject';
import EntityRoleUpdateObject from '../model/EntityRoleUpdateObject';
import ErrorResponse from '../model/ErrorResponse';
import ExampleLabelObject from '../model/ExampleLabelObject';
import ExplicitListItem from '../model/ExplicitListItem';
import ExplicitListItemCreateObject from '../model/ExplicitListItemCreateObject';
import ExplicitListItemUpdateObject from '../model/ExplicitListItemUpdateObject';
import FeaturesResponseObject from '../model/FeaturesResponseObject';
import HierarchicalChildEntity from '../model/HierarchicalChildEntity';
import HierarchicalEntityExtractor from '../model/HierarchicalEntityExtractor';
import HierarchicalEntityModel from '../model/HierarchicalEntityModel';
import IntentClassifier from '../model/IntentClassifier';
import IntentsSuggestionExample from '../model/IntentsSuggestionExample';
import LabelExampleResponse from '../model/LabelExampleResponse';
import LabelTextObject from '../model/LabelTextObject';
import LabeledUtterance from '../model/LabeledUtterance';
import LuisApp from '../model/LuisApp';
import ModelAddCompositeEntityChildRequest from '../model/ModelAddCompositeEntityChildRequest';
import ModelCreateObject from '../model/ModelCreateObject';
import ModelInfoResponse from '../model/ModelInfoResponse';
import ModelTrainingInfo from '../model/ModelTrainingInfo';
import ModelUpdateObject from '../model/ModelUpdateObject';
import OperationStatus from '../model/OperationStatus';
import PatternAnyEntityExtractor from '../model/PatternAnyEntityExtractor';
import PatternAnyModelCreateObject from '../model/PatternAnyModelCreateObject';
import PatternAnyModelUpdateObject from '../model/PatternAnyModelUpdateObject';
import PatternCreateObject from '../model/PatternCreateObject';
import PatternFeatureInfo from '../model/PatternFeatureInfo';
import PatternRuleCreateObject from '../model/PatternRuleCreateObject';
import PatternRuleInfo from '../model/PatternRuleInfo';
import PatternRuleUpdateObject from '../model/PatternRuleUpdateObject';
import PatternUpdateObject from '../model/PatternUpdateObject';
import PersonalAssistantsResponse from '../model/PersonalAssistantsResponse';
import PhraseListFeatureInfo from '../model/PhraseListFeatureInfo';
import PhraselistCreateObject from '../model/PhraselistCreateObject';
import PhraselistUpdateObject from '../model/PhraselistUpdateObject';
import PrebuiltDomain from '../model/PrebuiltDomain';
import PrebuiltDomainCreateBaseObject from '../model/PrebuiltDomainCreateBaseObject';
import PrebuiltDomainCreateObject from '../model/PrebuiltDomainCreateObject';
import PrebuiltDomainModelCreateObject from '../model/PrebuiltDomainModelCreateObject';
import PrebuiltEntityExtractor from '../model/PrebuiltEntityExtractor';
import ProductionOrStagingEndpointInfo from '../model/ProductionOrStagingEndpointInfo';
import PublishSettingUpdateObject from '../model/PublishSettingUpdateObject';
import PublishSettings from '../model/PublishSettings';
import RegexEntityExtractor from '../model/RegexEntityExtractor';
import RegexModelCreateObject from '../model/RegexModelCreateObject';
import RegexModelUpdateObject from '../model/RegexModelUpdateObject';
import TaskUpdateObject from '../model/TaskUpdateObject';
import UserAccessList from '../model/UserAccessList';
import UserCollaborator from '../model/UserCollaborator';
import VersionInfo from '../model/VersionInfo';
import WordListBaseUpdateObject from '../model/WordListBaseUpdateObject';
import WordListObject from '../model/WordListObject';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAdd operation.
     * @callback module:api/DefaultApi~appsAddCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new LUIS app.
     * @param {module:model/ApplicationCreateObject} applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is \"0.1\". Note: the culture cannot be changed after the app is created.
     * @param {module:api/DefaultApi~appsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    appsAdd(applicationCreateObject, callback) {
      let postBody = applicationCreateObject;
      // verify the required parameter 'applicationCreateObject' is set
      if (applicationCreateObject === undefined || applicationCreateObject === null) {
        throw new Error("Missing the required parameter 'applicationCreateObject' when calling appsAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAddCustomPrebuiltDomain operation.
     * @callback module:api/DefaultApi~appsAddCustomPrebuiltDomainCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     * @param {module:model/PrebuiltDomainCreateObject} prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain.
     * @param {module:api/DefaultApi~appsAddCustomPrebuiltDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    appsAddCustomPrebuiltDomain(prebuiltDomainCreateObject, callback) {
      let postBody = prebuiltDomainCreateObject;
      // verify the required parameter 'prebuiltDomainCreateObject' is set
      if (prebuiltDomainCreateObject === undefined || prebuiltDomainCreateObject === null) {
        throw new Error("Missing the required parameter 'prebuiltDomainCreateObject' when calling appsAddCustomPrebuiltDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/customprebuiltdomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDelete operation.
     * @callback module:api/DefaultApi~appsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application.
     * @param {String} appId The application ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] A flag to indicate whether to force an operation.
     * @param {module:api/DefaultApi~appsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    appsDelete(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDownloadQueryLogs operation.
     * @callback module:api/DefaultApi~appsDownloadQueryLogsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the logs of the past month's endpoint queries for the application.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~appsDownloadQueryLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appsDownloadQueryLogs(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsDownloadQueryLogs");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apps/{appId}/querylogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGet operation.
     * @callback module:api/DefaultApi~appsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application info.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~appsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInfoResponse}
     */
    appsGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsGet");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationInfoResponse;
      return this.apiClient.callApi(
        '/apps/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetPublishSettings operation.
     * @callback module:api/DefaultApi~appsGetPublishSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublishSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the application publish settings including 'UseAllTrainingData'.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~appsGetPublishSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublishSettings}
     */
    appsGetPublishSettings(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsGetPublishSettings");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublishSettings;
      return this.apiClient.callApi(
        '/apps/{appId}/publishsettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetSettings operation.
     * @callback module:api/DefaultApi~appsGetSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the application settings including 'UseAllTrainingData'.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~appsGetSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationSettings}
     */
    appsGetSettings(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsGetSettings");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationSettings;
      return this.apiClient.callApi(
        '/apps/{appId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsImport operation.
     * @callback module:api/DefaultApi~appsImportCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an application to LUIS, the application's structure is included in the request body.
     * @param {module:model/LuisApp} luisApp A LUIS application structure.
     * @param {Object} opts Optional parameters
     * @param {String} [appName] The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned.
     * @param {module:api/DefaultApi~appsImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    appsImport(luisApp, opts, callback) {
      opts = opts || {};
      let postBody = luisApp;
      // verify the required parameter 'luisApp' is set
      if (luisApp === undefined || luisApp === null) {
        throw new Error("Missing the required parameter 'luisApp' when calling appsImport");
      }

      let pathParams = {
      };
      let queryParams = {
        'appName': opts['appName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsList operation.
     * @callback module:api/DefaultApi~appsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationInfoResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the user's applications.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~appsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationInfoResponse>}
     */
    appsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationInfoResponse];
      return this.apiClient.callApi(
        '/apps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListAvailableCustomPrebuiltDomains operation.
     * @callback module:api/DefaultApi~appsListAvailableCustomPrebuiltDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrebuiltDomain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     * @param {module:api/DefaultApi~appsListAvailableCustomPrebuiltDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrebuiltDomain>}
     */
    appsListAvailableCustomPrebuiltDomains(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrebuiltDomain];
      return this.apiClient.callApi(
        '/apps/customprebuiltdomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListAvailableCustomPrebuiltDomainsForCulture operation.
     * @callback module:api/DefaultApi~appsListAvailableCustomPrebuiltDomainsForCultureCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrebuiltDomain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the available prebuilt domains for a specific culture.
     * @param {String} culture Culture.
     * @param {module:api/DefaultApi~appsListAvailableCustomPrebuiltDomainsForCultureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrebuiltDomain>}
     */
    appsListAvailableCustomPrebuiltDomainsForCulture(culture, callback) {
      let postBody = null;
      // verify the required parameter 'culture' is set
      if (culture === undefined || culture === null) {
        throw new Error("Missing the required parameter 'culture' when calling appsListAvailableCustomPrebuiltDomainsForCulture");
      }

      let pathParams = {
        'culture': culture
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrebuiltDomain];
      return this.apiClient.callApi(
        '/apps/customprebuiltdomains/{culture}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListCortanaEndpoints operation.
     * @callback module:api/DefaultApi~appsListCortanaEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalAssistantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param {module:api/DefaultApi~appsListCortanaEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalAssistantsResponse}
     */
    appsListCortanaEndpoints(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalAssistantsResponse;
      return this.apiClient.callApi(
        '/apps/assistants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListDomains operation.
     * @callback module:api/DefaultApi~appsListDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the available application domains.
     * @param {module:api/DefaultApi~appsListDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appsListDomains(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/apps/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListEndpoints operation.
     * @callback module:api/DefaultApi~appsListEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available endpoint deployment regions and URLs.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~appsListEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    appsListEndpoints(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsListEndpoints");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/apps/{appId}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListSupportedCultures operation.
     * @callback module:api/DefaultApi~appsListSupportedCulturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableCulture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,\"en-us\" represents the U.S. variation of English.
     * @param {module:api/DefaultApi~appsListSupportedCulturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableCulture>}
     */
    appsListSupportedCultures(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailableCulture];
      return this.apiClient.callApi(
        '/apps/cultures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListUsageScenarios operation.
     * @callback module:api/DefaultApi~appsListUsageScenariosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application available usage scenarios.
     * @param {module:api/DefaultApi~appsListUsageScenariosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    appsListUsageScenarios(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/apps/usagescenarios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPackagePublishedApplicationAsGzip operation.
     * @callback module:api/DefaultApi~appsPackagePublishedApplicationAsGzipCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     * @param {String} appId The application ID.
     * @param {String} slotName The publishing slot name.
     * @param {module:api/DefaultApi~appsPackagePublishedApplicationAsGzipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    appsPackagePublishedApplicationAsGzip(appId, slotName, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsPackagePublishedApplicationAsGzip");
      }
      // verify the required parameter 'slotName' is set
      if (slotName === undefined || slotName === null) {
        throw new Error("Missing the required parameter 'slotName' when calling appsPackagePublishedApplicationAsGzip");
      }

      let pathParams = {
        'appId': appId,
        'slotName': slotName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/package/{appId}/slot/{slotName}/gzip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPackageTrainedApplicationAsGzip operation.
     * @callback module:api/DefaultApi~appsPackageTrainedApplicationAsGzipCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~appsPackageTrainedApplicationAsGzipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    appsPackageTrainedApplicationAsGzip(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsPackageTrainedApplicationAsGzip");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling appsPackageTrainedApplicationAsGzip");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/package/{appId}/versions/{versionId}/gzip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPublish operation.
     * @callback module:api/DefaultApi~appsPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductionOrStagingEndpointInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes a specific version of the application.
     * @param {String} appId The application ID.
     * @param {module:model/ApplicationPublishObject} applicationPublishObject The application publish object. The region is the target region that the application is published to.
     * @param {module:api/DefaultApi~appsPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductionOrStagingEndpointInfo}
     */
    appsPublish(appId, applicationPublishObject, callback) {
      let postBody = applicationPublishObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsPublish");
      }
      // verify the required parameter 'applicationPublishObject' is set
      if (applicationPublishObject === undefined || applicationPublishObject === null) {
        throw new Error("Missing the required parameter 'applicationPublishObject' when calling appsPublish");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductionOrStagingEndpointInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdate operation.
     * @callback module:api/DefaultApi~appsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name or description of the application.
     * @param {String} appId The application ID.
     * @param {module:model/ApplicationUpdateObject} applicationUpdateObject A model containing Name and Description of the application.
     * @param {module:api/DefaultApi~appsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    appsUpdate(appId, applicationUpdateObject, callback) {
      let postBody = applicationUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsUpdate");
      }
      // verify the required parameter 'applicationUpdateObject' is set
      if (applicationUpdateObject === undefined || applicationUpdateObject === null) {
        throw new Error("Missing the required parameter 'applicationUpdateObject' when calling appsUpdate");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdatePublishSettings operation.
     * @callback module:api/DefaultApi~appsUpdatePublishSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the application publish settings including 'UseAllTrainingData'.
     * @param {String} appId The application ID.
     * @param {module:model/PublishSettingUpdateObject} publishSettingUpdateObject An object containing the new publish application settings.
     * @param {module:api/DefaultApi~appsUpdatePublishSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    appsUpdatePublishSettings(appId, publishSettingUpdateObject, callback) {
      let postBody = publishSettingUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsUpdatePublishSettings");
      }
      // verify the required parameter 'publishSettingUpdateObject' is set
      if (publishSettingUpdateObject === undefined || publishSettingUpdateObject === null) {
        throw new Error("Missing the required parameter 'publishSettingUpdateObject' when calling appsUpdatePublishSettings");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/publishsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdateSettings operation.
     * @callback module:api/DefaultApi~appsUpdateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the application settings including 'UseAllTrainingData'.
     * @param {String} appId The application ID.
     * @param {module:model/ApplicationSettingUpdateObject} applicationSettingUpdateObject An object containing the new application settings.
     * @param {module:api/DefaultApi~appsUpdateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    appsUpdateSettings(appId, applicationSettingUpdateObject, callback) {
      let postBody = applicationSettingUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsUpdateSettings");
      }
      // verify the required parameter 'applicationSettingUpdateObject' is set
      if (applicationSettingUpdateObject === undefined || applicationSettingUpdateObject === null) {
        throw new Error("Missing the required parameter 'applicationSettingUpdateObject' when calling appsUpdateSettings");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureAccountsAssignToApp operation.
     * @callback module:api/DefaultApi~azureAccountsAssignToAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * apps - Assign a LUIS Azure account to an application
     * Assigns an Azure account to the application.
     * @param {String} appId The application ID.
     * @param {String} authorization The bearer authorization header to use; containing the user's ARM token used to validate Azure accounts information.
     * @param {Object} opts Optional parameters
     * @param {module:model/AzureAccountInfoObject} [azureAccountInfoObject] The Azure account information object.
     * @param {module:api/DefaultApi~azureAccountsAssignToAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    azureAccountsAssignToApp(appId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['azureAccountInfoObject'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling azureAccountsAssignToApp");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling azureAccountsAssignToApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/azureaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureAccountsGetAssigned operation.
     * @callback module:api/DefaultApi~azureAccountsGetAssignedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AzureAccountInfoObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * apps - Get LUIS Azure accounts assigned to the application
     * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
     * @param {String} appId The application ID.
     * @param {String} authorization The bearer authorization header to use; containing the user's ARM token used to validate Azure accounts information.
     * @param {module:api/DefaultApi~azureAccountsGetAssignedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AzureAccountInfoObject>}
     */
    azureAccountsGetAssigned(appId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling azureAccountsGetAssigned");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling azureAccountsGetAssigned");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AzureAccountInfoObject];
      return this.apiClient.callApi(
        '/apps/{appId}/azureaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureAccountsListUserLUISAccounts operation.
     * @callback module:api/DefaultApi~azureAccountsListUserLUISAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AzureAccountInfoObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * user - Get LUIS Azure accounts
     * Gets the LUIS Azure accounts for the user using his ARM token.
     * @param {String} authorization The bearer authorization header to use; containing the user's ARM token used to validate Azure accounts information.
     * @param {module:api/DefaultApi~azureAccountsListUserLUISAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AzureAccountInfoObject>}
     */
    azureAccountsListUserLUISAccounts(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling azureAccountsListUserLUISAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AzureAccountInfoObject];
      return this.apiClient.callApi(
        '/azureaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureAccountsRemoveFromApp operation.
     * @callback module:api/DefaultApi~azureAccountsRemoveFromAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * apps - Removes an assigned LUIS Azure account from an application
     * Removes assigned Azure account from the application.
     * @param {String} appId The application ID.
     * @param {String} authorization The bearer authorization header to use; containing the user's ARM token used to validate Azure accounts information.
     * @param {Object} opts Optional parameters
     * @param {module:model/AzureAccountInfoObject} [azureAccountInfoObject] The Azure account information object.
     * @param {module:api/DefaultApi~azureAccountsRemoveFromAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    azureAccountsRemoveFromApp(appId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['azureAccountInfoObject'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling azureAccountsRemoveFromApp");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling azureAccountsRemoveFromApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/azureaccounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the examplesAdd operation.
     * @callback module:api/DefaultApi~examplesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabelExampleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a labeled example utterance in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/ExampleLabelObject} exampleLabelObject A labeled example utterance with the expected intent and entities.
     * @param {module:api/DefaultApi~examplesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabelExampleResponse}
     */
    examplesAdd(appId, versionId, exampleLabelObject, callback) {
      let postBody = exampleLabelObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling examplesAdd");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling examplesAdd");
      }
      // verify the required parameter 'exampleLabelObject' is set
      if (exampleLabelObject === undefined || exampleLabelObject === null) {
        throw new Error("Missing the required parameter 'exampleLabelObject' when calling examplesAdd");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LabelExampleResponse;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/example', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the examplesBatch operation.
     * @callback module:api/DefaultApi~examplesBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BatchLabelExample>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a batch of labeled example utterances to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<module:model/ExampleLabelObject>} exampleLabelObjectArray Array of example utterances.
     * @param {module:api/DefaultApi~examplesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BatchLabelExample>}
     */
    examplesBatch(appId, versionId, exampleLabelObjectArray, callback) {
      let postBody = exampleLabelObjectArray;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling examplesBatch");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling examplesBatch");
      }
      // verify the required parameter 'exampleLabelObjectArray' is set
      if (exampleLabelObjectArray === undefined || exampleLabelObjectArray === null) {
        throw new Error("Missing the required parameter 'exampleLabelObjectArray' when calling examplesBatch");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BatchLabelExample];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/examples', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the examplesDelete operation.
     * @callback module:api/DefaultApi~examplesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the labeled example utterances with the specified ID from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} exampleId The example ID.
     * @param {module:api/DefaultApi~examplesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    examplesDelete(appId, versionId, exampleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling examplesDelete");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling examplesDelete");
      }
      // verify the required parameter 'exampleId' is set
      if (exampleId === undefined || exampleId === null) {
        throw new Error("Missing the required parameter 'exampleId' when calling examplesDelete");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'exampleId': exampleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/examples/{exampleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the examplesList operation.
     * @callback module:api/DefaultApi~examplesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LabeledUtterance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns example utterances to be reviewed from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~examplesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LabeledUtterance>}
     */
    examplesList(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling examplesList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling examplesList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LabeledUtterance];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/examples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresAddPhraseList operation.
     * @callback module:api/DefaultApi~featuresAddPhraseListCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new phraselist feature in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PhraselistCreateObject} phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true.
     * @param {module:api/DefaultApi~featuresAddPhraseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    featuresAddPhraseList(appId, versionId, phraselistCreateObject, callback) {
      let postBody = phraselistCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresAddPhraseList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresAddPhraseList");
      }
      // verify the required parameter 'phraselistCreateObject' is set
      if (phraselistCreateObject === undefined || phraselistCreateObject === null) {
        throw new Error("Missing the required parameter 'phraselistCreateObject' when calling featuresAddPhraseList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/phraselists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresCreatePatternFeature operation.
     * @callback module:api/DefaultApi~featuresCreatePatternFeatureCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new pattern feature in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PatternCreateObject} patternCreateObject The Name and Pattern of the feature.
     * @param {module:api/DefaultApi~featuresCreatePatternFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    featuresCreatePatternFeature(appId, versionId, patternCreateObject, callback) {
      let postBody = patternCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresCreatePatternFeature");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresCreatePatternFeature");
      }
      // verify the required parameter 'patternCreateObject' is set
      if (patternCreateObject === undefined || patternCreateObject === null) {
        throw new Error("Missing the required parameter 'patternCreateObject' when calling featuresCreatePatternFeature");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patterns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresDeletePatternFeature operation.
     * @callback module:api/DefaultApi~featuresDeletePatternFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern feature in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} patternId The pattern feature ID.
     * @param {module:api/DefaultApi~featuresDeletePatternFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    featuresDeletePatternFeature(appId, versionId, patternId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresDeletePatternFeature");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresDeletePatternFeature");
      }
      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling featuresDeletePatternFeature");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patterns/{patternId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresDeletePhraseList operation.
     * @callback module:api/DefaultApi~featuresDeletePhraseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a phraselist feature from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} phraselistId The ID of the feature to be deleted.
     * @param {module:api/DefaultApi~featuresDeletePhraseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    featuresDeletePhraseList(appId, versionId, phraselistId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresDeletePhraseList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresDeletePhraseList");
      }
      // verify the required parameter 'phraselistId' is set
      if (phraselistId === undefined || phraselistId === null) {
        throw new Error("Missing the required parameter 'phraselistId' when calling featuresDeletePhraseList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'phraselistId': phraselistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresGetPatternFeatureInfo operation.
     * @callback module:api/DefaultApi~featuresGetPatternFeatureInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified pattern feature's info in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} patternId The pattern feature ID.
     * @param {module:api/DefaultApi~featuresGetPatternFeatureInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternFeatureInfo}
     */
    featuresGetPatternFeatureInfo(appId, versionId, patternId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresGetPatternFeatureInfo");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresGetPatternFeatureInfo");
      }
      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling featuresGetPatternFeatureInfo");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PatternFeatureInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patterns/{patternId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresGetPhraseList operation.
     * @callback module:api/DefaultApi~featuresGetPhraseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhraseListFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets phraselist feature info in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} phraselistId The ID of the feature to be retrieved.
     * @param {module:api/DefaultApi~featuresGetPhraseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhraseListFeatureInfo}
     */
    featuresGetPhraseList(appId, versionId, phraselistId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresGetPhraseList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresGetPhraseList");
      }
      // verify the required parameter 'phraselistId' is set
      if (phraselistId === undefined || phraselistId === null) {
        throw new Error("Missing the required parameter 'phraselistId' when calling featuresGetPhraseList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'phraselistId': phraselistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhraseListFeatureInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresList operation.
     * @callback module:api/DefaultApi~featuresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturesResponseObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the extraction phraselist and pattern features in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~featuresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturesResponseObject}
     */
    featuresList(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeaturesResponseObject;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresListApplicationVersionPatternFeatures operation.
     * @callback module:api/DefaultApi~featuresListApplicationVersionPatternFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternFeatureInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the pattern features.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~featuresListApplicationVersionPatternFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternFeatureInfo>}
     */
    featuresListApplicationVersionPatternFeatures(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresListApplicationVersionPatternFeatures");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresListApplicationVersionPatternFeatures");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PatternFeatureInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patterns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresListPhraseLists operation.
     * @callback module:api/DefaultApi~featuresListPhraseListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PhraseListFeatureInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the phraselist features in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~featuresListPhraseListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PhraseListFeatureInfo>}
     */
    featuresListPhraseLists(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresListPhraseLists");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresListPhraseLists");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PhraseListFeatureInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/phraselists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresUpdatePatternFeature operation.
     * @callback module:api/DefaultApi~featuresUpdatePatternFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the pattern, the name and the state of the pattern feature in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} patternId The pattern feature ID.
     * @param {module:model/PatternUpdateObject} patternUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern and a boolean called IsActive to update the feature.
     * @param {module:api/DefaultApi~featuresUpdatePatternFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    featuresUpdatePatternFeature(appId, versionId, patternId, patternUpdateObject, callback) {
      let postBody = patternUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresUpdatePatternFeature");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresUpdatePatternFeature");
      }
      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling featuresUpdatePatternFeature");
      }
      // verify the required parameter 'patternUpdateObject' is set
      if (patternUpdateObject === undefined || patternUpdateObject === null) {
        throw new Error("Missing the required parameter 'patternUpdateObject' when calling featuresUpdatePatternFeature");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patterns/{patternId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresUpdatePhraseList operation.
     * @callback module:api/DefaultApi~featuresUpdatePhraseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the phrases, the state and the name of the phraselist feature in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Number} phraselistId The ID of the feature to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/PhraselistUpdateObject} [phraselistUpdateObject] The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern, Mode, and a boolean called IsActive to update the feature.
     * @param {module:api/DefaultApi~featuresUpdatePhraseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    featuresUpdatePhraseList(appId, versionId, phraselistId, opts, callback) {
      opts = opts || {};
      let postBody = opts['phraselistUpdateObject'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling featuresUpdatePhraseList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling featuresUpdatePhraseList");
      }
      // verify the required parameter 'phraselistId' is set
      if (phraselistId === undefined || phraselistId === null) {
        throw new Error("Missing the required parameter 'phraselistId' when calling featuresUpdatePhraseList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'phraselistId': phraselistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddClosedList operation.
     * @callback module:api/DefaultApi~modelAddClosedListCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a list entity model to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/ClosedListModelCreateObject} closedListModelCreateObject A model containing the name and words for the new list entity extractor.
     * @param {module:api/DefaultApi~modelAddClosedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddClosedList(appId, versionId, closedListModelCreateObject, callback) {
      let postBody = closedListModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddClosedList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddClosedList");
      }
      // verify the required parameter 'closedListModelCreateObject' is set
      if (closedListModelCreateObject === undefined || closedListModelCreateObject === null) {
        throw new Error("Missing the required parameter 'closedListModelCreateObject' when calling modelAddClosedList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddCompositeEntity operation.
     * @callback module:api/DefaultApi~modelAddCompositeEntityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a composite entity extractor to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/CompositeEntityModel} compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @param {module:api/DefaultApi~modelAddCompositeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddCompositeEntity(appId, versionId, compositeModelCreateObject, callback) {
      let postBody = compositeModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddCompositeEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddCompositeEntity");
      }
      // verify the required parameter 'compositeModelCreateObject' is set
      if (compositeModelCreateObject === undefined || compositeModelCreateObject === null) {
        throw new Error("Missing the required parameter 'compositeModelCreateObject' when calling modelAddCompositeEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddCompositeEntityChild operation.
     * @callback module:api/DefaultApi~modelAddCompositeEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single child in an existing composite entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:model/ModelAddCompositeEntityChildRequest} compositeChildModelCreateObject A model object containing the name of the new composite child model.
     * @param {module:api/DefaultApi~modelAddCompositeEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddCompositeEntityChild(appId, versionId, cEntityId, compositeChildModelCreateObject, callback) {
      let postBody = compositeChildModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddCompositeEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddCompositeEntityChild");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelAddCompositeEntityChild");
      }
      // verify the required parameter 'compositeChildModelCreateObject' is set
      if (compositeChildModelCreateObject === undefined || compositeChildModelCreateObject === null) {
        throw new Error("Missing the required parameter 'compositeChildModelCreateObject' when calling modelAddCompositeEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddCustomPrebuiltDomain operation.
     * @callback module:api/DefaultApi~modelAddCustomPrebuiltDomainCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PrebuiltDomainCreateBaseObject} prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
     * @param {module:api/DefaultApi~modelAddCustomPrebuiltDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    modelAddCustomPrebuiltDomain(appId, versionId, prebuiltDomainObject, callback) {
      let postBody = prebuiltDomainObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltDomain");
      }
      // verify the required parameter 'prebuiltDomainObject' is set
      if (prebuiltDomainObject === undefined || prebuiltDomainObject === null) {
        throw new Error("Missing the required parameter 'prebuiltDomainObject' when calling modelAddCustomPrebuiltDomain");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltdomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddCustomPrebuiltEntity operation.
     * @callback module:api/DefaultApi~modelAddCustomPrebuiltEntityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a prebuilt entity model to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PrebuiltDomainModelCreateObject} prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs.
     * @param {module:api/DefaultApi~modelAddCustomPrebuiltEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddCustomPrebuiltEntity(appId, versionId, prebuiltDomainModelCreateObject, callback) {
      let postBody = prebuiltDomainModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltEntity");
      }
      // verify the required parameter 'prebuiltDomainModelCreateObject' is set
      if (prebuiltDomainModelCreateObject === undefined || prebuiltDomainModelCreateObject === null) {
        throw new Error("Missing the required parameter 'prebuiltDomainModelCreateObject' when calling modelAddCustomPrebuiltEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddCustomPrebuiltIntent operation.
     * @callback module:api/DefaultApi~modelAddCustomPrebuiltIntentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a customizable prebuilt intent model to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PrebuiltDomainModelCreateObject} prebuiltDomainModelCreateObject A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs.
     * @param {module:api/DefaultApi~modelAddCustomPrebuiltIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddCustomPrebuiltIntent(appId, versionId, prebuiltDomainModelCreateObject, callback) {
      let postBody = prebuiltDomainModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltIntent");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltIntent");
      }
      // verify the required parameter 'prebuiltDomainModelCreateObject' is set
      if (prebuiltDomainModelCreateObject === undefined || prebuiltDomainModelCreateObject === null) {
        throw new Error("Missing the required parameter 'prebuiltDomainModelCreateObject' when calling modelAddCustomPrebuiltIntent");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltintents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddEntity operation.
     * @callback module:api/DefaultApi~modelAddEntityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a simple entity extractor to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/ModelCreateObject} modelCreateObject A model object containing the name for the new simple entity extractor.
     * @param {module:api/DefaultApi~modelAddEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddEntity(appId, versionId, modelCreateObject, callback) {
      let postBody = modelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddEntity");
      }
      // verify the required parameter 'modelCreateObject' is set
      if (modelCreateObject === undefined || modelCreateObject === null) {
        throw new Error("Missing the required parameter 'modelCreateObject' when calling modelAddEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddExplicitListItem operation.
     * @callback module:api/DefaultApi~modelAddExplicitListItemCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity extractor ID.
     * @param {module:model/ExplicitListItemCreateObject} item The new explicit list item.
     * @param {module:api/DefaultApi~modelAddExplicitListItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    modelAddExplicitListItem(appId, versionId, entityId, item, callback) {
      let postBody = item;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddExplicitListItem");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddExplicitListItem");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelAddExplicitListItem");
      }
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling modelAddExplicitListItem");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddHierarchicalEntity operation.
     * @callback module:api/DefaultApi~modelAddHierarchicalEntityCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a hierarchical entity extractor to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/HierarchicalEntityModel} hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @param {module:api/DefaultApi~modelAddHierarchicalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddHierarchicalEntity(appId, versionId, hierarchicalModelCreateObject, callback) {
      let postBody = hierarchicalModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddHierarchicalEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddHierarchicalEntity");
      }
      // verify the required parameter 'hierarchicalModelCreateObject' is set
      if (hierarchicalModelCreateObject === undefined || hierarchicalModelCreateObject === null) {
        throw new Error("Missing the required parameter 'hierarchicalModelCreateObject' when calling modelAddHierarchicalEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddHierarchicalEntityChild operation.
     * @callback module:api/DefaultApi~modelAddHierarchicalEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:model/ModelAddCompositeEntityChildRequest} hierarchicalChildModelCreateObject A model object containing the name of the new hierarchical child model.
     * @param {module:api/DefaultApi~modelAddHierarchicalEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddHierarchicalEntityChild(appId, versionId, hEntityId, hierarchicalChildModelCreateObject, callback) {
      let postBody = hierarchicalChildModelCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddHierarchicalEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddHierarchicalEntityChild");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelAddHierarchicalEntityChild");
      }
      // verify the required parameter 'hierarchicalChildModelCreateObject' is set
      if (hierarchicalChildModelCreateObject === undefined || hierarchicalChildModelCreateObject === null) {
        throw new Error("Missing the required parameter 'hierarchicalChildModelCreateObject' when calling modelAddHierarchicalEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddIntent operation.
     * @callback module:api/DefaultApi~modelAddIntentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an intent to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/ModelCreateObject} intentCreateObject A model object containing the name of the new intent.
     * @param {module:api/DefaultApi~modelAddIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelAddIntent(appId, versionId, intentCreateObject, callback) {
      let postBody = intentCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddIntent");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddIntent");
      }
      // verify the required parameter 'intentCreateObject' is set
      if (intentCreateObject === undefined || intentCreateObject === null) {
        throw new Error("Missing the required parameter 'intentCreateObject' when calling modelAddIntent");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddPrebuilt operation.
     * @callback module:api/DefaultApi~modelAddPrebuiltCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrebuiltEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a list of prebuilt entities to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<String>} prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @param {module:api/DefaultApi~modelAddPrebuiltCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrebuiltEntityExtractor>}
     */
    modelAddPrebuilt(appId, versionId, prebuiltExtractorNames, callback) {
      let postBody = prebuiltExtractorNames;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddPrebuilt");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddPrebuilt");
      }
      // verify the required parameter 'prebuiltExtractorNames' is set
      if (prebuiltExtractorNames === undefined || prebuiltExtractorNames === null) {
        throw new Error("Missing the required parameter 'prebuiltExtractorNames' when calling modelAddPrebuilt");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PrebuiltEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelAddSubList operation.
     * @callback module:api/DefaultApi~modelAddSubListCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a sublist to an existing list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list entity extractor ID.
     * @param {module:model/WordListObject} wordListCreateObject Words list.
     * @param {module:api/DefaultApi~modelAddSubListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    modelAddSubList(appId, versionId, clEntityId, wordListCreateObject, callback) {
      let postBody = wordListCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelAddSubList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelAddSubList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelAddSubList");
      }
      // verify the required parameter 'wordListCreateObject' is set
      if (wordListCreateObject === undefined || wordListCreateObject === null) {
        throw new Error("Missing the required parameter 'wordListCreateObject' when calling modelAddSubList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateClosedListEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateClosedListEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for a list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateClosedListEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateClosedListEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateClosedListEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateClosedListEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreateClosedListEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateClosedListEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateCompositeEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateCompositeEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for a composite entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateCompositeEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateCompositeEntityRole(appId, versionId, cEntityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateCompositeEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateCompositeEntityRole");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelCreateCompositeEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateCompositeEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateCustomPrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateCustomPrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateCustomPrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateCustomPrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateCustomPrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an entity role in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreateEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateHierarchicalEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateHierarchicalEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for an hierarchical entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateHierarchicalEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateHierarchicalEntityRole(appId, versionId, hEntityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateHierarchicalEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateHierarchicalEntityRole");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelCreateHierarchicalEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateHierarchicalEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreatePatternAnyEntityModel operation.
     * @callback module:api/DefaultApi~modelCreatePatternAnyEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a pattern.any entity extractor to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PatternAnyModelCreateObject} extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor.
     * @param {module:api/DefaultApi~modelCreatePatternAnyEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreatePatternAnyEntityModel(appId, versionId, extractorCreateObject, callback) {
      let postBody = extractorCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreatePatternAnyEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreatePatternAnyEntityModel");
      }
      // verify the required parameter 'extractorCreateObject' is set
      if (extractorCreateObject === undefined || extractorCreateObject === null) {
        throw new Error("Missing the required parameter 'extractorCreateObject' when calling modelCreatePatternAnyEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreatePatternAnyEntityRole operation.
     * @callback module:api/DefaultApi~modelCreatePatternAnyEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for an Pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreatePatternAnyEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreatePatternAnyEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreatePatternAnyEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreatePatternAnyEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreatePatternAnyEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreatePatternAnyEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreatePrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelCreatePrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreatePrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreatePrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreatePrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreatePrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreatePrebuiltEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreatePrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateRegexEntityModel operation.
     * @callback module:api/DefaultApi~modelCreateRegexEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a regular expression entity model to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/RegexModelCreateObject} regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regular expression entity extractor.
     * @param {module:api/DefaultApi~modelCreateRegexEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateRegexEntityModel(appId, versionId, regexEntityExtractorCreateObj, callback) {
      let postBody = regexEntityExtractorCreateObj;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateRegexEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateRegexEntityModel");
      }
      // verify the required parameter 'regexEntityExtractorCreateObj' is set
      if (regexEntityExtractorCreateObj === undefined || regexEntityExtractorCreateObj === null) {
        throw new Error("Missing the required parameter 'regexEntityExtractorCreateObj' when calling modelCreateRegexEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelCreateRegexEntityRole operation.
     * @callback module:api/DefaultApi~modelCreateRegexEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role for an regular expression entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity model ID.
     * @param {module:model/EntityRoleCreateObject} entityRoleCreateObject An entity role object containing the name of role.
     * @param {module:api/DefaultApi~modelCreateRegexEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    modelCreateRegexEntityRole(appId, versionId, entityId, entityRoleCreateObject, callback) {
      let postBody = entityRoleCreateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelCreateRegexEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelCreateRegexEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelCreateRegexEntityRole");
      }
      // verify the required parameter 'entityRoleCreateObject' is set
      if (entityRoleCreateObject === undefined || entityRoleCreateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateRegexEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteClosedList operation.
     * @callback module:api/DefaultApi~modelDeleteClosedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a list entity model from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list entity model ID.
     * @param {module:api/DefaultApi~modelDeleteClosedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteClosedList(appId, versionId, clEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteClosedList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteClosedList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelDeleteClosedList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteClosedListEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteClosedListEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteClosedListEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteClosedListEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteClosedListEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteClosedListEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteClosedListEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteClosedListEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteCompositeEntity operation.
     * @callback module:api/DefaultApi~modelDeleteCompositeEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a composite entity from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:api/DefaultApi~modelDeleteCompositeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteCompositeEntity(appId, versionId, cEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteCompositeEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntity");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteCompositeEntityChild operation.
     * @callback module:api/DefaultApi~modelDeleteCompositeEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a composite entity extractor child from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {String} cChildId The hierarchical entity extractor child ID.
     * @param {module:api/DefaultApi~modelDeleteCompositeEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteCompositeEntityChild(appId, versionId, cEntityId, cChildId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteCompositeEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntityChild");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntityChild");
      }
      // verify the required parameter 'cChildId' is set
      if (cChildId === undefined || cChildId === null) {
        throw new Error("Missing the required parameter 'cChildId' when calling modelDeleteCompositeEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId,
        'cChildId': cChildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteCompositeEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteCompositeEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given composite entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteCompositeEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteCompositeEntityRole(appId, versionId, cEntityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteCompositeEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntityRole");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteCompositeEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteCustomEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteCustomEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteCustomEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteCustomEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteCustomEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteCustomEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteCustomEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteCustomEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteCustomPrebuiltDomain operation.
     * @callback module:api/DefaultApi~modelDeleteCustomPrebuiltDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a prebuilt domain's models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} domainName Domain name.
     * @param {module:api/DefaultApi~modelDeleteCustomPrebuiltDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteCustomPrebuiltDomain(appId, versionId, domainName, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteCustomPrebuiltDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteCustomPrebuiltDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling modelDeleteCustomPrebuiltDomain");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteEntity operation.
     * @callback module:api/DefaultApi~modelDeleteEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an entity from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity extractor ID.
     * @param {module:api/DefaultApi~modelDeleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteEntity(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entity role in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteExplicitListItem operation.
     * @callback module:api/DefaultApi~modelDeleteExplicitListItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The pattern.any entity id.
     * @param {Number} itemId The explicit list item which will be deleted.
     * @param {module:api/DefaultApi~modelDeleteExplicitListItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteExplicitListItem(appId, versionId, entityId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteExplicitListItem");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteExplicitListItem");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteExplicitListItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling modelDeleteExplicitListItem");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteHierarchicalEntity operation.
     * @callback module:api/DefaultApi~modelDeleteHierarchicalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hierarchical entity from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:api/DefaultApi~modelDeleteHierarchicalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteHierarchicalEntity(appId, versionId, hEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntity");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteHierarchicalEntityChild operation.
     * @callback module:api/DefaultApi~modelDeleteHierarchicalEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a hierarchical entity extractor child in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} hChildId The hierarchical entity extractor child ID.
     * @param {module:api/DefaultApi~modelDeleteHierarchicalEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntityChild");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntityChild");
      }
      // verify the required parameter 'hChildId' is set
      if (hChildId === undefined || hChildId === null) {
        throw new Error("Missing the required parameter 'hChildId' when calling modelDeleteHierarchicalEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'hChildId': hChildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteHierarchicalEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteHierarchicalEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given hierarchical role in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteHierarchicalEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteHierarchicalEntityRole(appId, versionId, hEntityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntityRole");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteHierarchicalEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteIntent operation.
     * @callback module:api/DefaultApi~modelDeleteIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an intent from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} intentId The intent classifier ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteUtterances = false)] If true, deletes the intent's example utterances. If false, moves the example utterances to the None intent. The default value is false.
     * @param {module:api/DefaultApi~modelDeleteIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteIntent(appId, versionId, intentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteIntent");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteIntent");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling modelDeleteIntent");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'intentId': intentId
      };
      let queryParams = {
        'deleteUtterances': opts['deleteUtterances']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents/{intentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeletePatternAnyEntityModel operation.
     * @callback module:api/DefaultApi~modelDeletePatternAnyEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Pattern.Any entity extractor from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity extractor ID.
     * @param {module:api/DefaultApi~modelDeletePatternAnyEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeletePatternAnyEntityModel(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeletePatternAnyEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeletePatternAnyEntityModel");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeletePatternAnyEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeletePatternAnyEntityRole operation.
     * @callback module:api/DefaultApi~modelDeletePatternAnyEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given Pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeletePatternAnyEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeletePatternAnyEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeletePatternAnyEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeletePatternAnyEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeletePatternAnyEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeletePatternAnyEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeletePrebuilt operation.
     * @callback module:api/DefaultApi~modelDeletePrebuiltCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a prebuilt entity extractor from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} prebuiltId The prebuilt entity extractor ID.
     * @param {module:api/DefaultApi~modelDeletePrebuiltCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeletePrebuilt(appId, versionId, prebuiltId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeletePrebuilt");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeletePrebuilt");
      }
      // verify the required parameter 'prebuiltId' is set
      if (prebuiltId === undefined || prebuiltId === null) {
        throw new Error("Missing the required parameter 'prebuiltId' when calling modelDeletePrebuilt");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'prebuiltId': prebuiltId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeletePrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelDeletePrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role in a prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeletePrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeletePrebuiltEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeletePrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeletePrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeletePrebuiltEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeletePrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteRegexEntityModel operation.
     * @callback module:api/DefaultApi~modelDeleteRegexEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a regular expression entity from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} regexEntityId The regular expression entity extractor ID.
     * @param {module:api/DefaultApi~modelDeleteRegexEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteRegexEntityModel(appId, versionId, regexEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteRegexEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteRegexEntityModel");
      }
      // verify the required parameter 'regexEntityId' is set
      if (regexEntityId === undefined || regexEntityId === null) {
        throw new Error("Missing the required parameter 'regexEntityId' when calling modelDeleteRegexEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'regexEntityId': regexEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteRegexEntityRole operation.
     * @callback module:api/DefaultApi~modelDeleteRegexEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role for a given regular expression in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role Id.
     * @param {module:api/DefaultApi~modelDeleteRegexEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteRegexEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteRegexEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteRegexEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelDeleteRegexEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelDeleteRegexEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelDeleteSubList operation.
     * @callback module:api/DefaultApi~modelDeleteSubListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sublist of a specific list entity model from a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list entity extractor ID.
     * @param {Number} subListId The sublist ID.
     * @param {module:api/DefaultApi~modelDeleteSubListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelDeleteSubList(appId, versionId, clEntityId, subListId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelDeleteSubList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelDeleteSubList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelDeleteSubList");
      }
      // verify the required parameter 'subListId' is set
      if (subListId === undefined || subListId === null) {
        throw new Error("Missing the required parameter 'subListId' when calling modelDeleteSubList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId,
        'subListId': subListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelExamples operation.
     * @callback module:api/DefaultApi~modelExamplesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LabelTextObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the example utterances for the given intent or entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} modelId The ID (GUID) of the model.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelExamplesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LabelTextObject>}
     */
    modelExamples(appId, versionId, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelExamples");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelExamples");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelExamples");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'modelId': modelId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LabelTextObject];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/models/{modelId}/examples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetClosedList operation.
     * @callback module:api/DefaultApi~modelGetClosedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClosedListEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list model ID.
     * @param {module:api/DefaultApi~modelGetClosedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClosedListEntityExtractor}
     */
    modelGetClosedList(appId, versionId, clEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetClosedList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetClosedList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelGetClosedList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClosedListEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetClosedListEntityRole operation.
     * @callback module:api/DefaultApi~modelGetClosedListEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetClosedListEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetClosedListEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetClosedListEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetClosedListEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetClosedListEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetClosedListEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetCompositeEntity operation.
     * @callback module:api/DefaultApi~modelGetCompositeEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompositeEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a composite entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:api/DefaultApi~modelGetCompositeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompositeEntityExtractor}
     */
    modelGetCompositeEntity(appId, versionId, cEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetCompositeEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetCompositeEntity");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelGetCompositeEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompositeEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetCompositeEntityRole operation.
     * @callback module:api/DefaultApi~modelGetCompositeEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given composite entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetCompositeEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetCompositeEntityRole(appId, versionId, cEntityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetCompositeEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetCompositeEntityRole");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelGetCompositeEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetCompositeEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetCustomEntityRole operation.
     * @callback module:api/DefaultApi~modelGetCustomEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetCustomEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetCustomEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetCustomEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetCustomEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetCustomEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetCustomEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetEntity operation.
     * @callback module:api/DefaultApi~modelGetEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity extractor ID.
     * @param {module:api/DefaultApi~modelGetEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityExtractor}
     */
    modelGetEntity(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetEntityRole operation.
     * @callback module:api/DefaultApi~modelGetEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetExplicitList operation.
     * @callback module:api/DefaultApi~modelGetExplicitListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExplicitListItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity id.
     * @param {module:api/DefaultApi~modelGetExplicitListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExplicitListItem>}
     */
    modelGetExplicitList(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetExplicitList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetExplicitList");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetExplicitList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExplicitListItem];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetExplicitListItem operation.
     * @callback module:api/DefaultApi~modelGetExplicitListItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExplicitListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity Id.
     * @param {Number} itemId The explicit list item Id.
     * @param {module:api/DefaultApi~modelGetExplicitListItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExplicitListItem}
     */
    modelGetExplicitListItem(appId, versionId, entityId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetExplicitListItem");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetExplicitListItem");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetExplicitListItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling modelGetExplicitListItem");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExplicitListItem;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetHierarchicalEntity operation.
     * @callback module:api/DefaultApi~modelGetHierarchicalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HierarchicalEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a hierarchical entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:api/DefaultApi~modelGetHierarchicalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HierarchicalEntityExtractor}
     */
    modelGetHierarchicalEntity(appId, versionId, hEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetHierarchicalEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntity");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HierarchicalEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetHierarchicalEntityChild operation.
     * @callback module:api/DefaultApi~modelGetHierarchicalEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HierarchicalChildEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the child's model contained in an hierarchical entity child model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} hChildId The hierarchical entity extractor child ID.
     * @param {module:api/DefaultApi~modelGetHierarchicalEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HierarchicalChildEntity}
     */
    modelGetHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetHierarchicalEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntityChild");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntityChild");
      }
      // verify the required parameter 'hChildId' is set
      if (hChildId === undefined || hChildId === null) {
        throw new Error("Missing the required parameter 'hChildId' when calling modelGetHierarchicalEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'hChildId': hChildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HierarchicalChildEntity;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetHierarchicalEntityRole operation.
     * @callback module:api/DefaultApi~modelGetHierarchicalEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given hierarchical entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetHierarchicalEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetHierarchicalEntityRole(appId, versionId, hEntityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetHierarchicalEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntityRole");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetHierarchicalEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetIntent operation.
     * @callback module:api/DefaultApi~modelGetIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntentClassifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the intent model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} intentId The intent classifier ID.
     * @param {module:api/DefaultApi~modelGetIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntentClassifier}
     */
    modelGetIntent(appId, versionId, intentId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetIntent");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetIntent");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling modelGetIntent");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntentClassifier;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents/{intentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetPatternAnyEntityInfo operation.
     * @callback module:api/DefaultApi~modelGetPatternAnyEntityInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternAnyEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the Pattern.Any model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity extractor ID.
     * @param {module:api/DefaultApi~modelGetPatternAnyEntityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternAnyEntityExtractor}
     */
    modelGetPatternAnyEntityInfo(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetPatternAnyEntityInfo");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetPatternAnyEntityInfo");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetPatternAnyEntityInfo");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PatternAnyEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetPatternAnyEntityRole operation.
     * @callback module:api/DefaultApi~modelGetPatternAnyEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given Pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetPatternAnyEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetPatternAnyEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetPatternAnyEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetPatternAnyEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetPatternAnyEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetPatternAnyEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetPrebuilt operation.
     * @callback module:api/DefaultApi~modelGetPrebuiltCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrebuiltEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a prebuilt entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} prebuiltId The prebuilt entity extractor ID.
     * @param {module:api/DefaultApi~modelGetPrebuiltCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrebuiltEntityExtractor}
     */
    modelGetPrebuilt(appId, versionId, prebuiltId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetPrebuilt");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetPrebuilt");
      }
      // verify the required parameter 'prebuiltId' is set
      if (prebuiltId === undefined || prebuiltId === null) {
        throw new Error("Missing the required parameter 'prebuiltId' when calling modelGetPrebuilt");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'prebuiltId': prebuiltId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrebuiltEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetPrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelGetPrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given prebuilt entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetPrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetPrebuiltEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetPrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetPrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetPrebuiltEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetPrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetRegexEntityEntityInfo operation.
     * @callback module:api/DefaultApi~modelGetRegexEntityEntityInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegexEntityExtractor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a regular expression entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} regexEntityId The regular expression entity model ID.
     * @param {module:api/DefaultApi~modelGetRegexEntityEntityInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegexEntityExtractor}
     */
    modelGetRegexEntityEntityInfo(appId, versionId, regexEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetRegexEntityEntityInfo");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetRegexEntityEntityInfo");
      }
      // verify the required parameter 'regexEntityId' is set
      if (regexEntityId === undefined || regexEntityId === null) {
        throw new Error("Missing the required parameter 'regexEntityId' when calling modelGetRegexEntityEntityInfo");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'regexEntityId': regexEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegexEntityExtractor;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetRegexEntityRole operation.
     * @callback module:api/DefaultApi~modelGetRegexEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one role for a given regular expression entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity ID.
     * @param {String} roleId entity role ID.
     * @param {module:api/DefaultApi~modelGetRegexEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRole}
     */
    modelGetRegexEntityRole(appId, versionId, entityId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelGetRegexEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelGetRegexEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelGetRegexEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelGetRegexEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityRole;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListClosedListEntityRoles operation.
     * @callback module:api/DefaultApi~modelListClosedListEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListClosedListEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListClosedListEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListClosedListEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListClosedListEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListClosedListEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListClosedLists operation.
     * @callback module:api/DefaultApi~modelListClosedListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClosedListEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the list entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListClosedListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClosedListEntityExtractor>}
     */
    modelListClosedLists(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListClosedLists");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListClosedLists");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClosedListEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCompositeEntities operation.
     * @callback module:api/DefaultApi~modelListCompositeEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompositeEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the composite entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListCompositeEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompositeEntityExtractor>}
     */
    modelListCompositeEntities(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCompositeEntities");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCompositeEntities");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompositeEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCompositeEntityRoles operation.
     * @callback module:api/DefaultApi~modelListCompositeEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a composite entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:api/DefaultApi~modelListCompositeEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListCompositeEntityRoles(appId, versionId, cEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCompositeEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCompositeEntityRoles");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelListCompositeEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCustomPrebuiltEntities operation.
     * @callback module:api/DefaultApi~modelListCustomPrebuiltEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all prebuilt entities used in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~modelListCustomPrebuiltEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityExtractor>}
     */
    modelListCustomPrebuiltEntities(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCustomPrebuiltEntities");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltEntities");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCustomPrebuiltEntityRoles operation.
     * @callback module:api/DefaultApi~modelListCustomPrebuiltEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a prebuilt entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListCustomPrebuiltEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListCustomPrebuiltEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCustomPrebuiltEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListCustomPrebuiltEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCustomPrebuiltIntents operation.
     * @callback module:api/DefaultApi~modelListCustomPrebuiltIntentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntentClassifier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about customizable prebuilt intents added to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~modelListCustomPrebuiltIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntentClassifier>}
     */
    modelListCustomPrebuiltIntents(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCustomPrebuiltIntents");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltIntents");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntentClassifier];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltintents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListCustomPrebuiltModels operation.
     * @callback module:api/DefaultApi~modelListCustomPrebuiltModelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomPrebuiltModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all prebuilt intent and entity model information used in a version of this application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~modelListCustomPrebuiltModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomPrebuiltModel>}
     */
    modelListCustomPrebuiltModels(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListCustomPrebuiltModels");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltModels");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomPrebuiltModel];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltmodels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListEntities operation.
     * @callback module:api/DefaultApi~modelListEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the simple entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityExtractor>}
     */
    modelListEntities(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListEntities");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListEntities");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListEntityRoles operation.
     * @callback module:api/DefaultApi~modelListEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for an entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListEntitySuggestions operation.
     * @callback module:api/DefaultApi~modelListEntitySuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitiesSuggestionExample>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The target entity extractor model to enhance.
     * @param {Object} opts Optional parameters
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListEntitySuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitiesSuggestionExample>}
     */
    modelListEntitySuggestions(appId, versionId, entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListEntitySuggestions");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListEntitySuggestions");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListEntitySuggestions");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntitiesSuggestionExample];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/suggest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListHierarchicalEntities operation.
     * @callback module:api/DefaultApi~modelListHierarchicalEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HierarchicalEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the hierarchical entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListHierarchicalEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HierarchicalEntityExtractor>}
     */
    modelListHierarchicalEntities(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListHierarchicalEntities");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListHierarchicalEntities");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HierarchicalEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListHierarchicalEntityRoles operation.
     * @callback module:api/DefaultApi~modelListHierarchicalEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a hierarchical entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:api/DefaultApi~modelListHierarchicalEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListHierarchicalEntityRoles(appId, versionId, hEntityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListHierarchicalEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListHierarchicalEntityRoles");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelListHierarchicalEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListIntentSuggestions operation.
     * @callback module:api/DefaultApi~modelListIntentSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntentsSuggestionExample>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suggests example utterances that would improve the accuracy of the intent model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} intentId The intent classifier ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListIntentSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntentsSuggestionExample>}
     */
    modelListIntentSuggestions(appId, versionId, intentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListIntentSuggestions");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListIntentSuggestions");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling modelListIntentSuggestions");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'intentId': intentId
      };
      let queryParams = {
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntentsSuggestionExample];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents/{intentId}/suggest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListIntents operation.
     * @callback module:api/DefaultApi~modelListIntentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntentClassifier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the intent models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntentClassifier>}
     */
    modelListIntents(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListIntents");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListIntents");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntentClassifier];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListModels operation.
     * @callback module:api/DefaultApi~modelListModelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelInfoResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the intent and entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelInfoResponse>}
     */
    modelListModels(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListModels");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListModels");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelInfoResponse];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListPatternAnyEntityInfos operation.
     * @callback module:api/DefaultApi~modelListPatternAnyEntityInfosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternAnyEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the Pattern.Any entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListPatternAnyEntityInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternAnyEntityExtractor>}
     */
    modelListPatternAnyEntityInfos(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListPatternAnyEntityInfos");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListPatternAnyEntityInfos");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PatternAnyEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListPatternAnyEntityRoles operation.
     * @callback module:api/DefaultApi~modelListPatternAnyEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a Pattern.any entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListPatternAnyEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListPatternAnyEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListPatternAnyEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListPatternAnyEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListPatternAnyEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListPrebuiltEntities operation.
     * @callback module:api/DefaultApi~modelListPrebuiltEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailablePrebuiltEntityModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the available prebuilt entities in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~modelListPrebuiltEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailablePrebuiltEntityModel>}
     */
    modelListPrebuiltEntities(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListPrebuiltEntities");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListPrebuiltEntities");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailablePrebuiltEntityModel];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/listprebuilts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListPrebuiltEntityRoles operation.
     * @callback module:api/DefaultApi~modelListPrebuiltEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a prebuilt entity's roles in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListPrebuiltEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListPrebuiltEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListPrebuiltEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListPrebuiltEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListPrebuiltEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListPrebuilts operation.
     * @callback module:api/DefaultApi~modelListPrebuiltsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrebuiltEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about all the prebuilt entities in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListPrebuiltsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrebuiltEntityExtractor>}
     */
    modelListPrebuilts(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListPrebuilts");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListPrebuilts");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrebuiltEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListRegexEntityInfos operation.
     * @callback module:api/DefaultApi~modelListRegexEntityInfosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegexEntityExtractor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the regular expression entity models in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~modelListRegexEntityInfosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegexEntityExtractor>}
     */
    modelListRegexEntityInfos(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListRegexEntityInfos");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListRegexEntityInfos");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RegexEntityExtractor];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelListRegexEntityRoles operation.
     * @callback module:api/DefaultApi~modelListRegexEntityRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles for a regular expression entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId entity Id
     * @param {module:api/DefaultApi~modelListRegexEntityRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRole>}
     */
    modelListRegexEntityRoles(appId, versionId, entityId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelListRegexEntityRoles");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelListRegexEntityRoles");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelListRegexEntityRoles");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EntityRole];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelPatchClosedList operation.
     * @callback module:api/DefaultApi~modelPatchClosedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a batch of sublists to an existing list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list entity model ID.
     * @param {module:model/ClosedListModelPatchObject} closedListModelPatchObject A words list batch.
     * @param {module:api/DefaultApi~modelPatchClosedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelPatchClosedList(appId, versionId, clEntityId, closedListModelPatchObject, callback) {
      let postBody = closedListModelPatchObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelPatchClosedList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelPatchClosedList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelPatchClosedList");
      }
      // verify the required parameter 'closedListModelPatchObject' is set
      if (closedListModelPatchObject === undefined || closedListModelPatchObject === null) {
        throw new Error("Missing the required parameter 'closedListModelPatchObject' when calling modelPatchClosedList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateClosedList operation.
     * @callback module:api/DefaultApi~modelUpdateClosedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list model ID.
     * @param {module:model/ClosedListModelUpdateObject} closedListModelUpdateObject The new list entity name and words list.
     * @param {module:api/DefaultApi~modelUpdateClosedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateClosedList(appId, versionId, clEntityId, closedListModelUpdateObject, callback) {
      let postBody = closedListModelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateClosedList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateClosedList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelUpdateClosedList");
      }
      // verify the required parameter 'closedListModelUpdateObject' is set
      if (closedListModelUpdateObject === undefined || closedListModelUpdateObject === null) {
        throw new Error("Missing the required parameter 'closedListModelUpdateObject' when calling modelUpdateClosedList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateClosedListEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateClosedListEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given list entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateClosedListEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateClosedListEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateClosedListEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateClosedListEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateClosedListEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateClosedListEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateClosedListEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateCompositeEntity operation.
     * @callback module:api/DefaultApi~modelUpdateCompositeEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a composite entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {module:model/CompositeEntityModel} compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @param {module:api/DefaultApi~modelUpdateCompositeEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateCompositeEntity(appId, versionId, cEntityId, compositeModelUpdateObject, callback) {
      let postBody = compositeModelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateCompositeEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateCompositeEntity");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelUpdateCompositeEntity");
      }
      // verify the required parameter 'compositeModelUpdateObject' is set
      if (compositeModelUpdateObject === undefined || compositeModelUpdateObject === null) {
        throw new Error("Missing the required parameter 'compositeModelUpdateObject' when calling modelUpdateCompositeEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateCompositeEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateCompositeEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given composite entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} cEntityId The composite entity extractor ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateCompositeEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateCompositeEntityRole(appId, versionId, cEntityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateCompositeEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateCompositeEntityRole");
      }
      // verify the required parameter 'cEntityId' is set
      if (cEntityId === undefined || cEntityId === null) {
        throw new Error("Missing the required parameter 'cEntityId' when calling modelUpdateCompositeEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateCompositeEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateCompositeEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'cEntityId': cEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateCustomPrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateCustomPrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given prebuilt entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateCustomPrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateCustomPrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateCustomPrebuiltEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateCustomPrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateEntity operation.
     * @callback module:api/DefaultApi~modelUpdateEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name of an entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity extractor ID.
     * @param {module:model/ModelUpdateObject} modelUpdateObject A model object containing the new entity extractor name.
     * @param {module:api/DefaultApi~modelUpdateEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateEntity(appId, versionId, entityId, modelUpdateObject, callback) {
      let postBody = modelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateEntity");
      }
      // verify the required parameter 'modelUpdateObject' is set
      if (modelUpdateObject === undefined || modelUpdateObject === null) {
        throw new Error("Missing the required parameter 'modelUpdateObject' when calling modelUpdateEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateExplicitListItem operation.
     * @callback module:api/DefaultApi~modelUpdateExplicitListItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity extractor ID.
     * @param {Number} itemId The explicit list item ID.
     * @param {module:model/ExplicitListItemUpdateObject} item The new explicit list item.
     * @param {module:api/DefaultApi~modelUpdateExplicitListItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateExplicitListItem(appId, versionId, entityId, itemId, item, callback) {
      let postBody = item;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateExplicitListItem");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateExplicitListItem");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateExplicitListItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling modelUpdateExplicitListItem");
      }
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling modelUpdateExplicitListItem");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateHierarchicalEntity operation.
     * @callback module:api/DefaultApi~modelUpdateHierarchicalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name and children of a hierarchical entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {module:model/HierarchicalEntityModel} hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @param {module:api/DefaultApi~modelUpdateHierarchicalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateHierarchicalEntity(appId, versionId, hEntityId, hierarchicalModelUpdateObject, callback) {
      let postBody = hierarchicalModelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntity");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntity");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntity");
      }
      // verify the required parameter 'hierarchicalModelUpdateObject' is set
      if (hierarchicalModelUpdateObject === undefined || hierarchicalModelUpdateObject === null) {
        throw new Error("Missing the required parameter 'hierarchicalModelUpdateObject' when calling modelUpdateHierarchicalEntity");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateHierarchicalEntityChild operation.
     * @callback module:api/DefaultApi~modelUpdateHierarchicalEntityChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} hChildId The hierarchical entity extractor child ID.
     * @param {module:model/ModelAddCompositeEntityChildRequest} hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical entity child.
     * @param {module:api/DefaultApi~modelUpdateHierarchicalEntityChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, callback) {
      let postBody = hierarchicalChildModelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntityChild");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntityChild");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntityChild");
      }
      // verify the required parameter 'hChildId' is set
      if (hChildId === undefined || hChildId === null) {
        throw new Error("Missing the required parameter 'hChildId' when calling modelUpdateHierarchicalEntityChild");
      }
      // verify the required parameter 'hierarchicalChildModelUpdateObject' is set
      if (hierarchicalChildModelUpdateObject === undefined || hierarchicalChildModelUpdateObject === null) {
        throw new Error("Missing the required parameter 'hierarchicalChildModelUpdateObject' when calling modelUpdateHierarchicalEntityChild");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'hChildId': hChildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateHierarchicalEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateHierarchicalEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given hierarchical entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} hEntityId The hierarchical entity extractor ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateHierarchicalEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateHierarchicalEntityRole(appId, versionId, hEntityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntityRole");
      }
      // verify the required parameter 'hEntityId' is set
      if (hEntityId === undefined || hEntityId === null) {
        throw new Error("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateHierarchicalEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateHierarchicalEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'hEntityId': hEntityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateIntent operation.
     * @callback module:api/DefaultApi~modelUpdateIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name of an intent in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} intentId The intent classifier ID.
     * @param {module:model/ModelUpdateObject} modelUpdateObject A model object containing the new intent name.
     * @param {module:api/DefaultApi~modelUpdateIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateIntent(appId, versionId, intentId, modelUpdateObject, callback) {
      let postBody = modelUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateIntent");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateIntent");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling modelUpdateIntent");
      }
      // verify the required parameter 'modelUpdateObject' is set
      if (modelUpdateObject === undefined || modelUpdateObject === null) {
        throw new Error("Missing the required parameter 'modelUpdateObject' when calling modelUpdateIntent");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'intentId': intentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents/{intentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdatePatternAnyEntityModel operation.
     * @callback module:api/DefaultApi~modelUpdatePatternAnyEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The Pattern.Any entity extractor ID.
     * @param {module:model/PatternAnyModelUpdateObject} patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @param {module:api/DefaultApi~modelUpdatePatternAnyEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdatePatternAnyEntityModel(appId, versionId, entityId, patternAnyUpdateObject, callback) {
      let postBody = patternAnyUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdatePatternAnyEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdatePatternAnyEntityModel");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdatePatternAnyEntityModel");
      }
      // verify the required parameter 'patternAnyUpdateObject' is set
      if (patternAnyUpdateObject === undefined || patternAnyUpdateObject === null) {
        throw new Error("Missing the required parameter 'patternAnyUpdateObject' when calling modelUpdatePatternAnyEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdatePatternAnyEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdatePatternAnyEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given Pattern.any entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdatePatternAnyEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdatePatternAnyEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdatePatternAnyEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdatePatternAnyEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdatePatternAnyEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdatePatternAnyEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdatePatternAnyEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdatePrebuiltEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdatePrebuiltEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given prebuilt entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdatePrebuiltEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdatePrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdatePrebuiltEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdatePrebuiltEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdatePrebuiltEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdatePrebuiltEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdatePrebuiltEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateRegexEntityModel operation.
     * @callback module:api/DefaultApi~modelUpdateRegexEntityModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the regular expression entity in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} regexEntityId The regular expression entity extractor ID.
     * @param {module:model/RegexModelUpdateObject} regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @param {module:api/DefaultApi~modelUpdateRegexEntityModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateRegexEntityModel(appId, versionId, regexEntityId, regexEntityUpdateObject, callback) {
      let postBody = regexEntityUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateRegexEntityModel");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateRegexEntityModel");
      }
      // verify the required parameter 'regexEntityId' is set
      if (regexEntityId === undefined || regexEntityId === null) {
        throw new Error("Missing the required parameter 'regexEntityId' when calling modelUpdateRegexEntityModel");
      }
      // verify the required parameter 'regexEntityUpdateObject' is set
      if (regexEntityUpdateObject === undefined || regexEntityUpdateObject === null) {
        throw new Error("Missing the required parameter 'regexEntityUpdateObject' when calling modelUpdateRegexEntityModel");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'regexEntityId': regexEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateRegexEntityRole operation.
     * @callback module:api/DefaultApi~modelUpdateRegexEntityRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role for a given regular expression entity in a version of the application
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} entityId The entity ID.
     * @param {String} roleId The entity role ID.
     * @param {module:model/EntityRoleUpdateObject} entityRoleUpdateObject The new entity role.
     * @param {module:api/DefaultApi~modelUpdateRegexEntityRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateRegexEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject, callback) {
      let postBody = entityRoleUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateRegexEntityRole");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateRegexEntityRole");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling modelUpdateRegexEntityRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling modelUpdateRegexEntityRole");
      }
      // verify the required parameter 'entityRoleUpdateObject' is set
      if (entityRoleUpdateObject === undefined || entityRoleUpdateObject === null) {
        throw new Error("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateRegexEntityRole");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'entityId': entityId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelUpdateSubList operation.
     * @callback module:api/DefaultApi~modelUpdateSubListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one of the list entity's sublists in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} clEntityId The list entity extractor ID.
     * @param {Number} subListId The sublist ID.
     * @param {module:model/WordListBaseUpdateObject} wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @param {module:api/DefaultApi~modelUpdateSubListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    modelUpdateSubList(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, callback) {
      let postBody = wordListBaseUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling modelUpdateSubList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling modelUpdateSubList");
      }
      // verify the required parameter 'clEntityId' is set
      if (clEntityId === undefined || clEntityId === null) {
        throw new Error("Missing the required parameter 'clEntityId' when calling modelUpdateSubList");
      }
      // verify the required parameter 'subListId' is set
      if (subListId === undefined || subListId === null) {
        throw new Error("Missing the required parameter 'subListId' when calling modelUpdateSubList");
      }
      // verify the required parameter 'wordListBaseUpdateObject' is set
      if (wordListBaseUpdateObject === undefined || wordListBaseUpdateObject === null) {
        throw new Error("Missing the required parameter 'wordListBaseUpdateObject' when calling modelUpdateSubList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'clEntityId': clEntityId,
        'subListId': subListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternAddPattern operation.
     * @callback module:api/DefaultApi~patternAddPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternRuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a pattern to a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/PatternRuleCreateObject} pattern The input pattern.
     * @param {module:api/DefaultApi~patternAddPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternRuleInfo}
     */
    patternAddPattern(appId, versionId, pattern, callback) {
      let postBody = pattern;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternAddPattern");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternAddPattern");
      }
      // verify the required parameter 'pattern' is set
      if (pattern === undefined || pattern === null) {
        throw new Error("Missing the required parameter 'pattern' when calling patternAddPattern");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatternRuleInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternBatchAddPatterns operation.
     * @callback module:api/DefaultApi~patternBatchAddPatternsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternRuleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a batch of patterns in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<module:model/PatternRuleCreateObject>} patterns A JSON array containing patterns.
     * @param {module:api/DefaultApi~patternBatchAddPatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternRuleInfo>}
     */
    patternBatchAddPatterns(appId, versionId, patterns, callback) {
      let postBody = patterns;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternBatchAddPatterns");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternBatchAddPatterns");
      }
      // verify the required parameter 'patterns' is set
      if (patterns === undefined || patterns === null) {
        throw new Error("Missing the required parameter 'patterns' when calling patternBatchAddPatterns");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PatternRuleInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternDeletePattern operation.
     * @callback module:api/DefaultApi~patternDeletePatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} patternId The pattern ID.
     * @param {module:api/DefaultApi~patternDeletePatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    patternDeletePattern(appId, versionId, patternId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternDeletePattern");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternDeletePattern");
      }
      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling patternDeletePattern");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules/{patternId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternDeletePatterns operation.
     * @callback module:api/DefaultApi~patternDeletePatternsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a list of patterns in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<String>} patternIds The patterns IDs.
     * @param {module:api/DefaultApi~patternDeletePatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    patternDeletePatterns(appId, versionId, patternIds, callback) {
      let postBody = patternIds;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternDeletePatterns");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternDeletePatterns");
      }
      // verify the required parameter 'patternIds' is set
      if (patternIds === undefined || patternIds === null) {
        throw new Error("Missing the required parameter 'patternIds' when calling patternDeletePatterns");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternListIntentPatterns operation.
     * @callback module:api/DefaultApi~patternListIntentPatternsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternRuleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns patterns for the specific intent in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} intentId The intent classifier ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~patternListIntentPatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternRuleInfo>}
     */
    patternListIntentPatterns(appId, versionId, intentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternListIntentPatterns");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternListIntentPatterns");
      }
      // verify the required parameter 'intentId' is set
      if (intentId === undefined || intentId === null) {
        throw new Error("Missing the required parameter 'intentId' when calling patternListIntentPatterns");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'intentId': intentId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PatternRuleInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternListPatterns operation.
     * @callback module:api/DefaultApi~patternListPatternsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternRuleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets patterns in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~patternListPatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternRuleInfo>}
     */
    patternListPatterns(appId, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternListPatterns");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternListPatterns");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PatternRuleInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternUpdatePattern operation.
     * @callback module:api/DefaultApi~patternUpdatePatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternRuleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a pattern in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} patternId The pattern ID.
     * @param {module:model/PatternRuleUpdateObject} pattern An object representing a pattern.
     * @param {module:api/DefaultApi~patternUpdatePatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternRuleInfo}
     */
    patternUpdatePattern(appId, versionId, patternId, pattern, callback) {
      let postBody = pattern;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternUpdatePattern");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternUpdatePattern");
      }
      // verify the required parameter 'patternId' is set
      if (patternId === undefined || patternId === null) {
        throw new Error("Missing the required parameter 'patternId' when calling patternUpdatePattern");
      }
      // verify the required parameter 'pattern' is set
      if (pattern === undefined || pattern === null) {
        throw new Error("Missing the required parameter 'pattern' when calling patternUpdatePattern");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId,
        'patternId': patternId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatternRuleInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules/{patternId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patternUpdatePatterns operation.
     * @callback module:api/DefaultApi~patternUpdatePatternsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatternRuleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates patterns in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<module:model/PatternRuleUpdateObject>} patterns An array represents the patterns.
     * @param {module:api/DefaultApi~patternUpdatePatternsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatternRuleInfo>}
     */
    patternUpdatePatterns(appId, versionId, patterns, callback) {
      let postBody = patterns;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patternUpdatePatterns");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling patternUpdatePatterns");
      }
      // verify the required parameter 'patterns' is set
      if (patterns === undefined || patterns === null) {
        throw new Error("Missing the required parameter 'patterns' when calling patternUpdatePatterns");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PatternRuleInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/patternrules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsAdd operation.
     * @callback module:api/DefaultApi~permissionsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     * @param {String} appId The application ID.
     * @param {module:model/UserCollaborator} userToAdd A model containing the user's email address.
     * @param {module:api/DefaultApi~permissionsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    permissionsAdd(appId, userToAdd, callback) {
      let postBody = userToAdd;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionsAdd");
      }
      // verify the required parameter 'userToAdd' is set
      if (userToAdd === undefined || userToAdd === null) {
        throw new Error("Missing the required parameter 'userToAdd' when calling permissionsAdd");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsDelete operation.
     * @callback module:api/DefaultApi~permissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     * @param {String} appId The application ID.
     * @param {module:model/UserCollaborator} userToDelete A model containing the user's email address.
     * @param {module:api/DefaultApi~permissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    permissionsDelete(appId, userToDelete, callback) {
      let postBody = userToDelete;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionsDelete");
      }
      // verify the required parameter 'userToDelete' is set
      if (userToDelete === undefined || userToDelete === null) {
        throw new Error("Missing the required parameter 'userToDelete' when calling permissionsDelete");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/permissions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsList operation.
     * @callback module:api/DefaultApi~permissionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccessList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of user emails that have permissions to access your application.
     * @param {String} appId The application ID.
     * @param {module:api/DefaultApi~permissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccessList}
     */
    permissionsList(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionsList");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAccessList;
      return this.apiClient.callApi(
        '/apps/{appId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsUpdate operation.
     * @callback module:api/DefaultApi~permissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     * @param {String} appId The application ID.
     * @param {module:model/CollaboratorsArray} collaborators A model containing a list of user email addresses.
     * @param {module:api/DefaultApi~permissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    permissionsUpdate(appId, collaborators, callback) {
      let postBody = collaborators;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling permissionsUpdate");
      }
      // verify the required parameter 'collaborators' is set
      if (collaborators === undefined || collaborators === null) {
        throw new Error("Missing the required parameter 'collaborators' when calling permissionsUpdate");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsList operation.
     * @callback module:api/DefaultApi~settingsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppVersionSettingObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the settings in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~settingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppVersionSettingObject>}
     */
    settingsList(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling settingsList");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling settingsList");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppVersionSettingObject];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsUpdate operation.
     * @callback module:api/DefaultApi~settingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {Array.<module:model/AppVersionSettingObject>} listOfAppVersionSettingObject A list of the updated application version settings.
     * @param {module:api/DefaultApi~settingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    settingsUpdate(appId, versionId, listOfAppVersionSettingObject, callback) {
      let postBody = listOfAppVersionSettingObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling settingsUpdate");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling settingsUpdate");
      }
      // verify the required parameter 'listOfAppVersionSettingObject' is set
      if (listOfAppVersionSettingObject === undefined || listOfAppVersionSettingObject === null) {
        throw new Error("Missing the required parameter 'listOfAppVersionSettingObject' when calling settingsUpdate");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainGetStatus operation.
     * @callback module:api/DefaultApi~trainGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelTrainingInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. \"appID\" specifies the LUIS app ID. \"versionId\" specifies the version number of the LUIS app. For example, \"0.1\".
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~trainGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelTrainingInfo>}
     */
    trainGetStatus(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling trainGetStatus");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling trainGetStatus");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json', 'JSON'];
      let returnType = [ModelTrainingInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/train', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainTrainVersion operation.
     * @callback module:api/DefaultApi~trainTrainVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnqueueTrainingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~trainTrainVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnqueueTrainingResponse}
     */
    trainTrainVersion(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling trainTrainVersion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling trainTrainVersion");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnqueueTrainingResponse;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsClone operation.
     * @callback module:api/DefaultApi~versionsCloneCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new version from the selected version.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/TaskUpdateObject} versionCloneObject A model containing the new version ID.
     * @param {module:api/DefaultApi~versionsCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    versionsClone(appId, versionId, versionCloneObject, callback) {
      let postBody = versionCloneObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsClone");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsClone");
      }
      // verify the required parameter 'versionCloneObject' is set
      if (versionCloneObject === undefined || versionCloneObject === null) {
        throw new Error("Missing the required parameter 'versionCloneObject' when calling versionsClone");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsDelete operation.
     * @callback module:api/DefaultApi~versionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application version.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~versionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    versionsDelete(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsDelete");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsDelete");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsDeleteUnlabelledUtterance operation.
     * @callback module:api/DefaultApi~versionsDeleteUnlabelledUtteranceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deleted an unlabelled utterance in a version of the application.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {String} utterance The utterance text to delete.
     * @param {module:api/DefaultApi~versionsDeleteUnlabelledUtteranceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    versionsDeleteUnlabelledUtterance(appId, versionId, utterance, callback) {
      let postBody = utterance;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsDeleteUnlabelledUtterance");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsDeleteUnlabelledUtterance");
      }
      // verify the required parameter 'utterance' is set
      if (utterance === undefined || utterance === null) {
        throw new Error("Missing the required parameter 'utterance' when calling versionsDeleteUnlabelledUtterance");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/suggest', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsExport operation.
     * @callback module:api/DefaultApi~versionsExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LuisApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports a LUIS application to JSON format.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~versionsExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LuisApp}
     */
    versionsExport(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsExport");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsExport");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LuisApp;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsGet operation.
     * @callback module:api/DefaultApi~versionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:api/DefaultApi~versionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionInfo}
     */
    versionsGet(appId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsGet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsGet");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VersionInfo;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsImport operation.
     * @callback module:api/DefaultApi~versionsImportCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a new version into a LUIS application.
     * @param {String} appId The application ID.
     * @param {module:model/LuisApp} luisApp A LUIS application structure.
     * @param {Object} opts Optional parameters
     * @param {String} [versionId] The new versionId to import. If not specified, the versionId will be read from the imported object.
     * @param {module:api/DefaultApi~versionsImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    versionsImport(appId, luisApp, opts, callback) {
      opts = opts || {};
      let postBody = luisApp;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsImport");
      }
      // verify the required parameter 'luisApp' is set
      if (luisApp === undefined || luisApp === null) {
        throw new Error("Missing the required parameter 'luisApp' when calling versionsImport");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'versionId': opts['versionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/apps/{appId}/versions/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsList operation.
     * @callback module:api/DefaultApi~versionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VersionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of versions for this application ID.
     * @param {String} appId The application ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [skip = 0)] The number of entries to skip. Default value is 0.
     * @param {Number} [take = 100)] The number of entries to return. Maximum page size is 500. Default is 100.
     * @param {module:api/DefaultApi~versionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VersionInfo>}
     */
    versionsList(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsList");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VersionInfo];
      return this.apiClient.callApi(
        '/apps/{appId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsUpdate operation.
     * @callback module:api/DefaultApi~versionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name or description of the application version.
     * @param {String} appId The application ID.
     * @param {String} versionId The version ID.
     * @param {module:model/TaskUpdateObject} versionUpdateObject A model containing Name and Description of the application.
     * @param {module:api/DefaultApi~versionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    versionsUpdate(appId, versionId, versionUpdateObject, callback) {
      let postBody = versionUpdateObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling versionsUpdate");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling versionsUpdate");
      }
      // verify the required parameter 'versionUpdateObject' is set
      if (versionUpdateObject === undefined || versionUpdateObject === null) {
        throw new Error("Missing the required parameter 'versionUpdateObject' when calling versionsUpdate");
      }

      let pathParams = {
        'appId': appId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/apps/{appId}/versions/{versionId}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
