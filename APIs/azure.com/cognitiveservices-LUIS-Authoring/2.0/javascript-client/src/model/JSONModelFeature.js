/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JSONModelFeature model module.
 * @module model/JSONModelFeature
 * @version 2.0
 */
class JSONModelFeature {
    /**
     * Constructs a new <code>JSONModelFeature</code>.
     * Exported Model - Phraselist Model Feature.
     * @alias module:model/JSONModelFeature
     */
    constructor() { 
        
        JSONModelFeature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JSONModelFeature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JSONModelFeature} obj Optional instance to populate.
     * @return {module:model/JSONModelFeature} The populated <code>JSONModelFeature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JSONModelFeature();

            if (data.hasOwnProperty('activated')) {
                obj['activated'] = ApiClient.convertToType(data['activated'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('words')) {
                obj['words'] = ApiClient.convertToType(data['words'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JSONModelFeature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JSONModelFeature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['words'] && !(typeof data['words'] === 'string' || data['words'] instanceof String)) {
            throw new Error("Expected the field `words` to be a primitive type in the JSON string but got " + data['words']);
        }

        return true;
    }


}



/**
 * Indicates if the feature is enabled.
 * @member {Boolean} activated
 */
JSONModelFeature.prototype['activated'] = undefined;

/**
 * An interchangeable phrase list feature serves as a list of synonyms for training. A non-exchangeable phrase list serves as separate features for training. So, if your non-interchangeable phrase list contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-interchangeable phrase list as an additional bag of words to add to LUIS existing vocabulary features. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t.  Default value is true.
 * @member {Boolean} mode
 */
JSONModelFeature.prototype['mode'] = undefined;

/**
 * The Phraselist name.
 * @member {String} name
 */
JSONModelFeature.prototype['name'] = undefined;

/**
 * List of comma-separated phrases that represent the Phraselist.
 * @member {String} words
 */
JSONModelFeature.prototype['words'] = undefined;






export default JSONModelFeature;

