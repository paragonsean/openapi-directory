/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PhraselistCreateObject model module.
 * @module model/PhraselistCreateObject
 * @version 2.0
 */
class PhraselistCreateObject {
    /**
     * Constructs a new <code>PhraselistCreateObject</code>.
     * Object model for creating a phraselist model.
     * @alias module:model/PhraselistCreateObject
     */
    constructor() { 
        
        PhraselistCreateObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['isExchangeable'] = true;
    }

    /**
     * Constructs a <code>PhraselistCreateObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhraselistCreateObject} obj Optional instance to populate.
     * @return {module:model/PhraselistCreateObject} The populated <code>PhraselistCreateObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhraselistCreateObject();

            if (data.hasOwnProperty('isExchangeable')) {
                obj['isExchangeable'] = ApiClient.convertToType(data['isExchangeable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phrases')) {
                obj['phrases'] = ApiClient.convertToType(data['phrases'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhraselistCreateObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhraselistCreateObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phrases'] && !(typeof data['phrases'] === 'string' || data['phrases'] instanceof String)) {
            throw new Error("Expected the field `phrases` to be a primitive type in the JSON string but got " + data['phrases']);
        }

        return true;
    }


}



/**
 * An interchangeable phrase list feature serves as a list of synonyms for training. A non-exchangeable phrase list serves as separate features for training. So, if your non-interchangeable phrase list contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-interchangeable phrase list as an additional bag of words to add to LUIS existing vocabulary features. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t.  Default value is true.
 * @member {Boolean} isExchangeable
 * @default true
 */
PhraselistCreateObject.prototype['isExchangeable'] = true;

/**
 * The Phraselist name.
 * @member {String} name
 */
PhraselistCreateObject.prototype['name'] = undefined;

/**
 * List of comma-separated phrases that represent the Phraselist.
 * @member {String} phrases
 */
PhraselistCreateObject.prototype['phrases'] = undefined;






export default PhraselistCreateObject;

