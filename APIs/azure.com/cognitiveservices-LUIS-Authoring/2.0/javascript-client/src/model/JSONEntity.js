/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JSONEntity model module.
 * @module model/JSONEntity
 * @version 2.0
 */
class JSONEntity {
    /**
     * Constructs a new <code>JSONEntity</code>.
     * Exported Model - Extracted Entity from utterance.
     * @alias module:model/JSONEntity
     * @param endPos {Number} The index within the utterance where the extracted entity ends.
     * @param entity {String} The entity name.
     * @param startPos {Number} The index within the utterance where the extracted entity starts.
     */
    constructor(endPos, entity, startPos) { 
        
        JSONEntity.initialize(this, endPos, entity, startPos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endPos, entity, startPos) { 
        obj['endPos'] = endPos;
        obj['entity'] = entity;
        obj['startPos'] = startPos;
    }

    /**
     * Constructs a <code>JSONEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JSONEntity} obj Optional instance to populate.
     * @return {module:model/JSONEntity} The populated <code>JSONEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JSONEntity();

            if (data.hasOwnProperty('endPos')) {
                obj['endPos'] = ApiClient.convertToType(data['endPos'], 'Number');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('startPos')) {
                obj['startPos'] = ApiClient.convertToType(data['startPos'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JSONEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JSONEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JSONEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

JSONEntity.RequiredProperties = ["endPos", "entity", "startPos"];

/**
 * The index within the utterance where the extracted entity ends.
 * @member {Number} endPos
 */
JSONEntity.prototype['endPos'] = undefined;

/**
 * The entity name.
 * @member {String} entity
 */
JSONEntity.prototype['entity'] = undefined;

/**
 * The role of the entity within the utterance.
 * @member {String} role
 */
JSONEntity.prototype['role'] = undefined;

/**
 * The index within the utterance where the extracted entity starts.
 * @member {Number} startPos
 */
JSONEntity.prototype['startPos'] = undefined;






export default JSONEntity;

