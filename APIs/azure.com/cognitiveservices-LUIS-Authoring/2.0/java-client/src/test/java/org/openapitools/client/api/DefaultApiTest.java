/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppVersionSettingObject;
import org.openapitools.client.model.ApplicationCreateObject;
import org.openapitools.client.model.ApplicationInfoResponse;
import org.openapitools.client.model.ApplicationPublishObject;
import org.openapitools.client.model.ApplicationSettingUpdateObject;
import org.openapitools.client.model.ApplicationSettings;
import org.openapitools.client.model.ApplicationUpdateObject;
import org.openapitools.client.model.AvailableCulture;
import org.openapitools.client.model.AvailablePrebuiltEntityModel;
import org.openapitools.client.model.AzureAccountInfoObject;
import org.openapitools.client.model.BatchLabelExample;
import org.openapitools.client.model.ClosedListEntityExtractor;
import org.openapitools.client.model.ClosedListModelCreateObject;
import org.openapitools.client.model.ClosedListModelPatchObject;
import org.openapitools.client.model.ClosedListModelUpdateObject;
import org.openapitools.client.model.CollaboratorsArray;
import org.openapitools.client.model.CompositeEntityExtractor;
import org.openapitools.client.model.CompositeEntityModel;
import org.openapitools.client.model.CustomPrebuiltModel;
import org.openapitools.client.model.EnqueueTrainingResponse;
import org.openapitools.client.model.EntitiesSuggestionExample;
import org.openapitools.client.model.EntityExtractor;
import org.openapitools.client.model.EntityRole;
import org.openapitools.client.model.EntityRoleCreateObject;
import org.openapitools.client.model.EntityRoleUpdateObject;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ExampleLabelObject;
import org.openapitools.client.model.ExplicitListItem;
import org.openapitools.client.model.ExplicitListItemCreateObject;
import org.openapitools.client.model.ExplicitListItemUpdateObject;
import org.openapitools.client.model.FeaturesResponseObject;
import java.io.File;
import org.openapitools.client.model.HierarchicalChildEntity;
import org.openapitools.client.model.HierarchicalEntityExtractor;
import org.openapitools.client.model.HierarchicalEntityModel;
import org.openapitools.client.model.IntentClassifier;
import org.openapitools.client.model.IntentsSuggestionExample;
import org.openapitools.client.model.LabelExampleResponse;
import org.openapitools.client.model.LabelTextObject;
import org.openapitools.client.model.LabeledUtterance;
import org.openapitools.client.model.LuisApp;
import org.openapitools.client.model.ModelAddCompositeEntityChildRequest;
import org.openapitools.client.model.ModelCreateObject;
import org.openapitools.client.model.ModelInfoResponse;
import org.openapitools.client.model.ModelTrainingInfo;
import org.openapitools.client.model.ModelUpdateObject;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PatternAnyEntityExtractor;
import org.openapitools.client.model.PatternAnyModelCreateObject;
import org.openapitools.client.model.PatternAnyModelUpdateObject;
import org.openapitools.client.model.PatternCreateObject;
import org.openapitools.client.model.PatternFeatureInfo;
import org.openapitools.client.model.PatternRuleCreateObject;
import org.openapitools.client.model.PatternRuleInfo;
import org.openapitools.client.model.PatternRuleUpdateObject;
import org.openapitools.client.model.PatternUpdateObject;
import org.openapitools.client.model.PersonalAssistantsResponse;
import org.openapitools.client.model.PhraseListFeatureInfo;
import org.openapitools.client.model.PhraselistCreateObject;
import org.openapitools.client.model.PhraselistUpdateObject;
import org.openapitools.client.model.PrebuiltDomain;
import org.openapitools.client.model.PrebuiltDomainCreateBaseObject;
import org.openapitools.client.model.PrebuiltDomainCreateObject;
import org.openapitools.client.model.PrebuiltDomainModelCreateObject;
import org.openapitools.client.model.PrebuiltEntityExtractor;
import org.openapitools.client.model.ProductionOrStagingEndpointInfo;
import org.openapitools.client.model.PublishSettingUpdateObject;
import org.openapitools.client.model.PublishSettings;
import org.openapitools.client.model.RegexEntityExtractor;
import org.openapitools.client.model.RegexModelCreateObject;
import org.openapitools.client.model.RegexModelUpdateObject;
import org.openapitools.client.model.TaskUpdateObject;
import java.util.UUID;
import org.openapitools.client.model.UserAccessList;
import org.openapitools.client.model.UserCollaborator;
import org.openapitools.client.model.VersionInfo;
import org.openapitools.client.model.WordListBaseUpdateObject;
import org.openapitools.client.model.WordListObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a new LUIS app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAddTest() throws ApiException {
        ApplicationCreateObject applicationCreateObject = null;
        UUID response = api.appsAdd(applicationCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAddCustomPrebuiltDomainTest() throws ApiException {
        PrebuiltDomainCreateObject prebuiltDomainCreateObject = null;
        UUID response = api.appsAddCustomPrebuiltDomain(prebuiltDomainCreateObject);
        // TODO: test validations
    }

    /**
     * Deletes an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDeleteTest() throws ApiException {
        UUID appId = null;
        Boolean force = null;
        OperationStatus response = api.appsDelete(appId, force);
        // TODO: test validations
    }

    /**
     * Gets the logs of the past month&#39;s endpoint queries for the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDownloadQueryLogsTest() throws ApiException {
        UUID appId = null;
        Object response = api.appsDownloadQueryLogs(appId);
        // TODO: test validations
    }

    /**
     * Gets the application info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetTest() throws ApiException {
        UUID appId = null;
        ApplicationInfoResponse response = api.appsGet(appId);
        // TODO: test validations
    }

    /**
     * Get the application publish settings including &#39;UseAllTrainingData&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetPublishSettingsTest() throws ApiException {
        UUID appId = null;
        PublishSettings response = api.appsGetPublishSettings(appId);
        // TODO: test validations
    }

    /**
     * Get the application settings including &#39;UseAllTrainingData&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetSettingsTest() throws ApiException {
        UUID appId = null;
        ApplicationSettings response = api.appsGetSettings(appId);
        // TODO: test validations
    }

    /**
     * Imports an application to LUIS, the application&#39;s structure is included in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsImportTest() throws ApiException {
        LuisApp luisApp = null;
        String appName = null;
        UUID response = api.appsImport(luisApp, appName);
        // TODO: test validations
    }

    /**
     * Lists all of the user&#39;s applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListTest() throws ApiException {
        Integer skip = null;
        Integer take = null;
        List<ApplicationInfoResponse> response = api.appsList(skip, take);
        // TODO: test validations
    }

    /**
     * Gets all the available custom prebuilt domains for all cultures.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListAvailableCustomPrebuiltDomainsTest() throws ApiException {
        List<PrebuiltDomain> response = api.appsListAvailableCustomPrebuiltDomains();
        // TODO: test validations
    }

    /**
     * Gets all the available prebuilt domains for a specific culture.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListAvailableCustomPrebuiltDomainsForCultureTest() throws ApiException {
        String culture = null;
        List<PrebuiltDomain> response = api.appsListAvailableCustomPrebuiltDomainsForCulture(culture);
        // TODO: test validations
    }

    /**
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListCortanaEndpointsTest() throws ApiException {
        PersonalAssistantsResponse response = api.appsListCortanaEndpoints();
        // TODO: test validations
    }

    /**
     * Gets the available application domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListDomainsTest() throws ApiException {
        List<String> response = api.appsListDomains();
        // TODO: test validations
    }

    /**
     * Returns the available endpoint deployment regions and URLs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListEndpointsTest() throws ApiException {
        UUID appId = null;
        Map<String, String> response = api.appsListEndpoints(appId);
        // TODO: test validations
    }

    /**
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,\&quot;en-us\&quot; represents the U.S. variation of English.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListSupportedCulturesTest() throws ApiException {
        List<AvailableCulture> response = api.appsListSupportedCultures();
        // TODO: test validations
    }

    /**
     * Gets the application available usage scenarios.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListUsageScenariosTest() throws ApiException {
        List<String> response = api.appsListUsageScenarios();
        // TODO: test validations
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     *
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPackagePublishedApplicationAsGzipTest() throws ApiException {
        UUID appId = null;
        String slotName = null;
        File response = api.appsPackagePublishedApplicationAsGzip(appId, slotName);
        // TODO: test validations
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     *
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPackageTrainedApplicationAsGzipTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        File response = api.appsPackageTrainedApplicationAsGzip(appId, versionId);
        // TODO: test validations
    }

    /**
     * Publishes a specific version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPublishTest() throws ApiException {
        UUID appId = null;
        ApplicationPublishObject applicationPublishObject = null;
        ProductionOrStagingEndpointInfo response = api.appsPublish(appId, applicationPublishObject);
        // TODO: test validations
    }

    /**
     * Updates the name or description of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateTest() throws ApiException {
        UUID appId = null;
        ApplicationUpdateObject applicationUpdateObject = null;
        OperationStatus response = api.appsUpdate(appId, applicationUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the application publish settings including &#39;UseAllTrainingData&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdatePublishSettingsTest() throws ApiException {
        UUID appId = null;
        PublishSettingUpdateObject publishSettingUpdateObject = null;
        OperationStatus response = api.appsUpdatePublishSettings(appId, publishSettingUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the application settings including &#39;UseAllTrainingData&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateSettingsTest() throws ApiException {
        UUID appId = null;
        ApplicationSettingUpdateObject applicationSettingUpdateObject = null;
        OperationStatus response = api.appsUpdateSettings(appId, applicationSettingUpdateObject);
        // TODO: test validations
    }

    /**
     * apps - Assign a LUIS Azure account to an application
     *
     * Assigns an Azure account to the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureAccountsAssignToAppTest() throws ApiException {
        UUID appId = null;
        String authorization = null;
        AzureAccountInfoObject azureAccountInfoObject = null;
        OperationStatus response = api.azureAccountsAssignToApp(appId, authorization, azureAccountInfoObject);
        // TODO: test validations
    }

    /**
     * apps - Get LUIS Azure accounts assigned to the application
     *
     * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureAccountsGetAssignedTest() throws ApiException {
        UUID appId = null;
        String authorization = null;
        List<AzureAccountInfoObject> response = api.azureAccountsGetAssigned(appId, authorization);
        // TODO: test validations
    }

    /**
     * user - Get LUIS Azure accounts
     *
     * Gets the LUIS Azure accounts for the user using his ARM token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureAccountsListUserLUISAccountsTest() throws ApiException {
        String authorization = null;
        List<AzureAccountInfoObject> response = api.azureAccountsListUserLUISAccounts(authorization);
        // TODO: test validations
    }

    /**
     * apps - Removes an assigned LUIS Azure account from an application
     *
     * Removes assigned Azure account from the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureAccountsRemoveFromAppTest() throws ApiException {
        UUID appId = null;
        String authorization = null;
        AzureAccountInfoObject azureAccountInfoObject = null;
        OperationStatus response = api.azureAccountsRemoveFromApp(appId, authorization, azureAccountInfoObject);
        // TODO: test validations
    }

    /**
     * Adds a labeled example utterance in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void examplesAddTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        ExampleLabelObject exampleLabelObject = null;
        LabelExampleResponse response = api.examplesAdd(appId, versionId, exampleLabelObject);
        // TODO: test validations
    }

    /**
     * Adds a batch of labeled example utterances to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void examplesBatchTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<ExampleLabelObject> exampleLabelObjectArray = null;
        List<BatchLabelExample> response = api.examplesBatch(appId, versionId, exampleLabelObjectArray);
        // TODO: test validations
    }

    /**
     * Deletes the labeled example utterances with the specified ID from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void examplesDeleteTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer exampleId = null;
        OperationStatus response = api.examplesDelete(appId, versionId, exampleId);
        // TODO: test validations
    }

    /**
     * Returns example utterances to be reviewed from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void examplesListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<LabeledUtterance> response = api.examplesList(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Creates a new phraselist feature in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresAddPhraseListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PhraselistCreateObject phraselistCreateObject = null;
        Integer response = api.featuresAddPhraseList(appId, versionId, phraselistCreateObject);
        // TODO: test validations
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new pattern feature in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresCreatePatternFeatureTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PatternCreateObject patternCreateObject = null;
        Integer response = api.featuresCreatePatternFeature(appId, versionId, patternCreateObject);
        // TODO: test validations
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern feature in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresDeletePatternFeatureTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer patternId = null;
        OperationStatus response = api.featuresDeletePatternFeature(appId, versionId, patternId);
        // TODO: test validations
    }

    /**
     * Deletes a phraselist feature from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresDeletePhraseListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer phraselistId = null;
        OperationStatus response = api.featuresDeletePhraseList(appId, versionId, phraselistId);
        // TODO: test validations
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified pattern feature&#39;s info in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresGetPatternFeatureInfoTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer patternId = null;
        PatternFeatureInfo response = api.featuresGetPatternFeatureInfo(appId, versionId, patternId);
        // TODO: test validations
    }

    /**
     * Gets phraselist feature info in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresGetPhraseListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer phraselistId = null;
        PhraseListFeatureInfo response = api.featuresGetPhraseList(appId, versionId, phraselistId);
        // TODO: test validations
    }

    /**
     * Gets all the extraction phraselist and pattern features in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        FeaturesResponseObject response = api.featuresList(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the pattern features.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresListApplicationVersionPatternFeaturesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<PatternFeatureInfo> response = api.featuresListApplicationVersionPatternFeatures(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets all the phraselist features in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresListPhraseListsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<PhraseListFeatureInfo> response = api.featuresListPhraseLists(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the pattern, the name and the state of the pattern feature in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresUpdatePatternFeatureTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer patternId = null;
        PatternUpdateObject patternUpdateObject = null;
        OperationStatus response = api.featuresUpdatePatternFeature(appId, versionId, patternId, patternUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the phrases, the state and the name of the phraselist feature in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresUpdatePhraseListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer phraselistId = null;
        PhraselistUpdateObject phraselistUpdateObject = null;
        OperationStatus response = api.featuresUpdatePhraseList(appId, versionId, phraselistId, phraselistUpdateObject);
        // TODO: test validations
    }

    /**
     * Adds a list entity model to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddClosedListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        ClosedListModelCreateObject closedListModelCreateObject = null;
        UUID response = api.modelAddClosedList(appId, versionId, closedListModelCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a composite entity extractor to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddCompositeEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        CompositeEntityModel compositeModelCreateObject = null;
        UUID response = api.modelAddCompositeEntity(appId, versionId, compositeModelCreateObject);
        // TODO: test validations
    }

    /**
     * Creates a single child in an existing composite entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddCompositeEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        ModelAddCompositeEntityChildRequest compositeChildModelCreateObject = null;
        UUID response = api.modelAddCompositeEntityChild(appId, versionId, cEntityId, compositeChildModelCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddCustomPrebuiltDomainTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PrebuiltDomainCreateBaseObject prebuiltDomainObject = null;
        List<UUID> response = api.modelAddCustomPrebuiltDomain(appId, versionId, prebuiltDomainObject);
        // TODO: test validations
    }

    /**
     * Adds a prebuilt entity model to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddCustomPrebuiltEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject = null;
        UUID response = api.modelAddCustomPrebuiltEntity(appId, versionId, prebuiltDomainModelCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a customizable prebuilt intent model to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddCustomPrebuiltIntentTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject = null;
        UUID response = api.modelAddCustomPrebuiltIntent(appId, versionId, prebuiltDomainModelCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a simple entity extractor to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        ModelCreateObject modelCreateObject = null;
        UUID response = api.modelAddEntity(appId, versionId, modelCreateObject);
        // TODO: test validations
    }

    /**
     * Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddExplicitListItemTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        ExplicitListItemCreateObject item = null;
        Integer response = api.modelAddExplicitListItem(appId, versionId, entityId, item);
        // TODO: test validations
    }

    /**
     * Adds a hierarchical entity extractor to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddHierarchicalEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        HierarchicalEntityModel hierarchicalModelCreateObject = null;
        UUID response = api.modelAddHierarchicalEntity(appId, versionId, hierarchicalModelCreateObject);
        // TODO: test validations
    }

    /**
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddHierarchicalEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject = null;
        UUID response = api.modelAddHierarchicalEntityChild(appId, versionId, hEntityId, hierarchicalChildModelCreateObject);
        // TODO: test validations
    }

    /**
     * Adds an intent to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddIntentTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        ModelCreateObject intentCreateObject = null;
        UUID response = api.modelAddIntent(appId, versionId, intentCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a list of prebuilt entities to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddPrebuiltTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<String> prebuiltExtractorNames = null;
        List<PrebuiltEntityExtractor> response = api.modelAddPrebuilt(appId, versionId, prebuiltExtractorNames);
        // TODO: test validations
    }

    /**
     * Adds a sublist to an existing list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelAddSubListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        WordListObject wordListCreateObject = null;
        Long response = api.modelAddSubList(appId, versionId, clEntityId, wordListCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for a list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateClosedListEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateClosedListEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for a composite entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateCompositeEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateCompositeEntityRole(appId, versionId, cEntityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateCustomPrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateCustomPrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Create an entity role in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for an hierarchical entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateHierarchicalEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateHierarchicalEntityRole(appId, versionId, hEntityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a pattern.any entity extractor to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreatePatternAnyEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PatternAnyModelCreateObject extractorCreateObject = null;
        UUID response = api.modelCreatePatternAnyEntityModel(appId, versionId, extractorCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for an Pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreatePatternAnyEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreatePatternAnyEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreatePrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreatePrebuiltEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Adds a regular expression entity model to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateRegexEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        RegexModelCreateObject regexEntityExtractorCreateObj = null;
        UUID response = api.modelCreateRegexEntityModel(appId, versionId, regexEntityExtractorCreateObj);
        // TODO: test validations
    }

    /**
     * Create a role for an regular expression entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelCreateRegexEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityRoleCreateObject entityRoleCreateObject = null;
        UUID response = api.modelCreateRegexEntityRole(appId, versionId, entityId, entityRoleCreateObject);
        // TODO: test validations
    }

    /**
     * Deletes a list entity model from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteClosedListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        OperationStatus response = api.modelDeleteClosedList(appId, versionId, clEntityId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteClosedListEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteClosedListEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes a composite entity from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteCompositeEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        OperationStatus response = api.modelDeleteCompositeEntity(appId, versionId, cEntityId);
        // TODO: test validations
    }

    /**
     * Deletes a composite entity extractor child from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteCompositeEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        UUID cChildId = null;
        OperationStatus response = api.modelDeleteCompositeEntityChild(appId, versionId, cEntityId, cChildId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given composite entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteCompositeEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteCompositeEntityRole(appId, versionId, cEntityId, roleId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteCustomEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteCustomEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes a prebuilt domain&#39;s models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteCustomPrebuiltDomainTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        String domainName = null;
        OperationStatus response = api.modelDeleteCustomPrebuiltDomain(appId, versionId, domainName);
        // TODO: test validations
    }

    /**
     * Deletes an entity from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        OperationStatus response = api.modelDeleteEntity(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Delete an entity role in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteExplicitListItemTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        Long itemId = null;
        OperationStatus response = api.modelDeleteExplicitListItem(appId, versionId, entityId, itemId);
        // TODO: test validations
    }

    /**
     * Deletes a hierarchical entity from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteHierarchicalEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        OperationStatus response = api.modelDeleteHierarchicalEntity(appId, versionId, hEntityId);
        // TODO: test validations
    }

    /**
     * Deletes a hierarchical entity extractor child in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteHierarchicalEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID hChildId = null;
        OperationStatus response = api.modelDeleteHierarchicalEntityChild(appId, versionId, hEntityId, hChildId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given hierarchical role in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteHierarchicalEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteHierarchicalEntityRole(appId, versionId, hEntityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes an intent from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteIntentTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID intentId = null;
        Boolean deleteUtterances = null;
        OperationStatus response = api.modelDeleteIntent(appId, versionId, intentId, deleteUtterances);
        // TODO: test validations
    }

    /**
     * Deletes a Pattern.Any entity extractor from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeletePatternAnyEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        OperationStatus response = api.modelDeletePatternAnyEntityModel(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given Pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeletePatternAnyEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeletePatternAnyEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes a prebuilt entity extractor from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeletePrebuiltTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID prebuiltId = null;
        OperationStatus response = api.modelDeletePrebuilt(appId, versionId, prebuiltId);
        // TODO: test validations
    }

    /**
     * Delete a role in a prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeletePrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeletePrebuiltEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes a regular expression entity from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteRegexEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID regexEntityId = null;
        OperationStatus response = api.modelDeleteRegexEntityModel(appId, versionId, regexEntityId);
        // TODO: test validations
    }

    /**
     * Delete a role for a given regular expression in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteRegexEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        OperationStatus response = api.modelDeleteRegexEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Deletes a sublist of a specific list entity model from a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelDeleteSubListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        Long subListId = null;
        OperationStatus response = api.modelDeleteSubList(appId, versionId, clEntityId, subListId);
        // TODO: test validations
    }

    /**
     * Gets the example utterances for the given intent or entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelExamplesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        String modelId = null;
        Integer skip = null;
        Integer take = null;
        List<LabelTextObject> response = api.modelExamples(appId, versionId, modelId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets information about a list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetClosedListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        ClosedListEntityExtractor response = api.modelGetClosedList(appId, versionId, clEntityId);
        // TODO: test validations
    }

    /**
     * Get one role for a given list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetClosedListEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetClosedListEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Gets information about a composite entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetCompositeEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        CompositeEntityExtractor response = api.modelGetCompositeEntity(appId, versionId, cEntityId);
        // TODO: test validations
    }

    /**
     * Get one role for a given composite entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetCompositeEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetCompositeEntityRole(appId, versionId, cEntityId, roleId);
        // TODO: test validations
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetCustomEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetCustomEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Gets information about an entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        EntityExtractor response = api.modelGetEntity(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Get one role for a given entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetExplicitListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<ExplicitListItem> response = api.modelGetExplicitList(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetExplicitListItemTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        Long itemId = null;
        ExplicitListItem response = api.modelGetExplicitListItem(appId, versionId, entityId, itemId);
        // TODO: test validations
    }

    /**
     * Gets information about a hierarchical entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetHierarchicalEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        HierarchicalEntityExtractor response = api.modelGetHierarchicalEntity(appId, versionId, hEntityId);
        // TODO: test validations
    }

    /**
     * Gets information about the child&#39;s model contained in an hierarchical entity child model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetHierarchicalEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID hChildId = null;
        HierarchicalChildEntity response = api.modelGetHierarchicalEntityChild(appId, versionId, hEntityId, hChildId);
        // TODO: test validations
    }

    /**
     * Get one role for a given hierarchical entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetHierarchicalEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetHierarchicalEntityRole(appId, versionId, hEntityId, roleId);
        // TODO: test validations
    }

    /**
     * Gets information about the intent model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetIntentTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID intentId = null;
        IntentClassifier response = api.modelGetIntent(appId, versionId, intentId);
        // TODO: test validations
    }

    /**
     * Gets information about the Pattern.Any model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetPatternAnyEntityInfoTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        PatternAnyEntityExtractor response = api.modelGetPatternAnyEntityInfo(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Get one role for a given Pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetPatternAnyEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetPatternAnyEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Gets information about a prebuilt entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetPrebuiltTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID prebuiltId = null;
        PrebuiltEntityExtractor response = api.modelGetPrebuilt(appId, versionId, prebuiltId);
        // TODO: test validations
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetPrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetPrebuiltEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Gets information about a regular expression entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetRegexEntityEntityInfoTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID regexEntityId = null;
        RegexEntityExtractor response = api.modelGetRegexEntityEntityInfo(appId, versionId, regexEntityId);
        // TODO: test validations
    }

    /**
     * Get one role for a given regular expression entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetRegexEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRole response = api.modelGetRegexEntityRole(appId, versionId, entityId, roleId);
        // TODO: test validations
    }

    /**
     * Get all roles for a list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListClosedListEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListClosedListEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Gets information about all the list entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListClosedListsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<ClosedListEntityExtractor> response = api.modelListClosedLists(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets information about all the composite entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCompositeEntitiesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<CompositeEntityExtractor> response = api.modelListCompositeEntities(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get all roles for a composite entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCompositeEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        List<EntityRole> response = api.modelListCompositeEntityRoles(appId, versionId, cEntityId);
        // TODO: test validations
    }

    /**
     * Gets all prebuilt entities used in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCustomPrebuiltEntitiesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<EntityExtractor> response = api.modelListCustomPrebuiltEntities(appId, versionId);
        // TODO: test validations
    }

    /**
     * Get all roles for a prebuilt entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCustomPrebuiltEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListCustomPrebuiltEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Gets information about customizable prebuilt intents added to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCustomPrebuiltIntentsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<IntentClassifier> response = api.modelListCustomPrebuiltIntents(appId, versionId);
        // TODO: test validations
    }

    /**
     * Gets all prebuilt intent and entity model information used in a version of this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListCustomPrebuiltModelsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<CustomPrebuiltModel> response = api.modelListCustomPrebuiltModels(appId, versionId);
        // TODO: test validations
    }

    /**
     * Gets information about all the simple entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListEntitiesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<EntityExtractor> response = api.modelListEntities(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get all roles for an entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListEntitySuggestionsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        Integer take = null;
        List<EntitiesSuggestionExample> response = api.modelListEntitySuggestions(appId, versionId, entityId, take);
        // TODO: test validations
    }

    /**
     * Gets information about all the hierarchical entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListHierarchicalEntitiesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<HierarchicalEntityExtractor> response = api.modelListHierarchicalEntities(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get all roles for a hierarchical entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListHierarchicalEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        List<EntityRole> response = api.modelListHierarchicalEntityRoles(appId, versionId, hEntityId);
        // TODO: test validations
    }

    /**
     * Suggests example utterances that would improve the accuracy of the intent model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListIntentSuggestionsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID intentId = null;
        Integer take = null;
        List<IntentsSuggestionExample> response = api.modelListIntentSuggestions(appId, versionId, intentId, take);
        // TODO: test validations
    }

    /**
     * Gets information about the intent models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListIntentsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<IntentClassifier> response = api.modelListIntents(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets information about all the intent and entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListModelsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<ModelInfoResponse> response = api.modelListModels(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get information about the Pattern.Any entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListPatternAnyEntityInfosTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<PatternAnyEntityExtractor> response = api.modelListPatternAnyEntityInfos(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get all roles for a Pattern.any entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListPatternAnyEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListPatternAnyEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Gets all the available prebuilt entities in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListPrebuiltEntitiesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<AvailablePrebuiltEntityModel> response = api.modelListPrebuiltEntities(appId, versionId);
        // TODO: test validations
    }

    /**
     * Get a prebuilt entity&#39;s roles in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListPrebuiltEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListPrebuiltEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Gets information about all the prebuilt entities in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListPrebuiltsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<PrebuiltEntityExtractor> response = api.modelListPrebuilts(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets information about the regular expression entity models in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListRegexEntityInfosTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<RegexEntityExtractor> response = api.modelListRegexEntityInfos(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Get all roles for a regular expression entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelListRegexEntityRolesTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        List<EntityRole> response = api.modelListRegexEntityRoles(appId, versionId, entityId);
        // TODO: test validations
    }

    /**
     * Adds a batch of sublists to an existing list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelPatchClosedListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        ClosedListModelPatchObject closedListModelPatchObject = null;
        OperationStatus response = api.modelPatchClosedList(appId, versionId, clEntityId, closedListModelPatchObject);
        // TODO: test validations
    }

    /**
     * Updates the list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateClosedListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        ClosedListModelUpdateObject closedListModelUpdateObject = null;
        OperationStatus response = api.modelUpdateClosedList(appId, versionId, clEntityId, closedListModelUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given list entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateClosedListEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateClosedListEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates a composite entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateCompositeEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        CompositeEntityModel compositeModelUpdateObject = null;
        OperationStatus response = api.modelUpdateCompositeEntity(appId, versionId, cEntityId, compositeModelUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given composite entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateCompositeEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID cEntityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateCompositeEntityRole(appId, versionId, cEntityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateCustomPrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateCustomPrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the name of an entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        ModelUpdateObject modelUpdateObject = null;
        OperationStatus response = api.modelUpdateEntity(appId, versionId, entityId, modelUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateExplicitListItemTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        Long itemId = null;
        ExplicitListItemUpdateObject item = null;
        OperationStatus response = api.modelUpdateExplicitListItem(appId, versionId, entityId, itemId, item);
        // TODO: test validations
    }

    /**
     * Updates the name and children of a hierarchical entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateHierarchicalEntityTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        HierarchicalEntityModel hierarchicalModelUpdateObject = null;
        OperationStatus response = api.modelUpdateHierarchicalEntity(appId, versionId, hEntityId, hierarchicalModelUpdateObject);
        // TODO: test validations
    }

    /**
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateHierarchicalEntityChildTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID hChildId = null;
        ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject = null;
        OperationStatus response = api.modelUpdateHierarchicalEntityChild(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given hierarchical entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateHierarchicalEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID hEntityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateHierarchicalEntityRole(appId, versionId, hEntityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the name of an intent in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateIntentTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID intentId = null;
        ModelUpdateObject modelUpdateObject = null;
        OperationStatus response = api.modelUpdateIntent(appId, versionId, intentId, modelUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdatePatternAnyEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        PatternAnyModelUpdateObject patternAnyUpdateObject = null;
        OperationStatus response = api.modelUpdatePatternAnyEntityModel(appId, versionId, entityId, patternAnyUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given Pattern.any entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdatePatternAnyEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdatePatternAnyEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdatePrebuiltEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdatePrebuiltEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates the regular expression entity in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateRegexEntityModelTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID regexEntityId = null;
        RegexModelUpdateObject regexEntityUpdateObject = null;
        OperationStatus response = api.modelUpdateRegexEntityModel(appId, versionId, regexEntityId, regexEntityUpdateObject);
        // TODO: test validations
    }

    /**
     * Update a role for a given regular expression entity in a version of the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateRegexEntityRoleTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID entityId = null;
        UUID roleId = null;
        EntityRoleUpdateObject entityRoleUpdateObject = null;
        OperationStatus response = api.modelUpdateRegexEntityRole(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        // TODO: test validations
    }

    /**
     * Updates one of the list entity&#39;s sublists in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelUpdateSubListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID clEntityId = null;
        Long subListId = null;
        WordListBaseUpdateObject wordListBaseUpdateObject = null;
        OperationStatus response = api.modelUpdateSubList(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject);
        // TODO: test validations
    }

    /**
     * Adds a pattern to a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternAddPatternTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        PatternRuleCreateObject pattern = null;
        PatternRuleInfo response = api.patternAddPattern(appId, versionId, pattern);
        // TODO: test validations
    }

    /**
     * Adds a batch of patterns in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternBatchAddPatternsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<PatternRuleCreateObject> patterns = null;
        List<PatternRuleInfo> response = api.patternBatchAddPatterns(appId, versionId, patterns);
        // TODO: test validations
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternDeletePatternTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID patternId = null;
        OperationStatus response = api.patternDeletePattern(appId, versionId, patternId);
        // TODO: test validations
    }

    /**
     * Deletes a list of patterns in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternDeletePatternsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<UUID> patternIds = null;
        OperationStatus response = api.patternDeletePatterns(appId, versionId, patternIds);
        // TODO: test validations
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternListIntentPatternsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID intentId = null;
        Integer skip = null;
        Integer take = null;
        List<PatternRuleInfo> response = api.patternListIntentPatterns(appId, versionId, intentId, skip, take);
        // TODO: test validations
    }

    /**
     * Gets patterns in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternListPatternsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        Integer skip = null;
        Integer take = null;
        List<PatternRuleInfo> response = api.patternListPatterns(appId, versionId, skip, take);
        // TODO: test validations
    }

    /**
     * Updates a pattern in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternUpdatePatternTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        UUID patternId = null;
        PatternRuleUpdateObject pattern = null;
        PatternRuleInfo response = api.patternUpdatePattern(appId, versionId, patternId, pattern);
        // TODO: test validations
    }

    /**
     * Updates patterns in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patternUpdatePatternsTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<PatternRuleUpdateObject> patterns = null;
        List<PatternRuleInfo> response = api.patternUpdatePatterns(appId, versionId, patterns);
        // TODO: test validations
    }

    /**
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsAddTest() throws ApiException {
        UUID appId = null;
        UserCollaborator userToAdd = null;
        OperationStatus response = api.permissionsAdd(appId, userToAdd);
        // TODO: test validations
    }

    /**
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsDeleteTest() throws ApiException {
        UUID appId = null;
        UserCollaborator userToDelete = null;
        OperationStatus response = api.permissionsDelete(appId, userToDelete);
        // TODO: test validations
    }

    /**
     * Gets the list of user emails that have permissions to access your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsListTest() throws ApiException {
        UUID appId = null;
        UserAccessList response = api.permissionsList(appId);
        // TODO: test validations
    }

    /**
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsUpdateTest() throws ApiException {
        UUID appId = null;
        CollaboratorsArray collaborators = null;
        OperationStatus response = api.permissionsUpdate(appId, collaborators);
        // TODO: test validations
    }

    /**
     * Gets the settings in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void settingsListTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<AppVersionSettingObject> response = api.settingsList(appId, versionId);
        // TODO: test validations
    }

    /**
     * Updates the settings in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void settingsUpdateTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<AppVersionSettingObject> listOfAppVersionSettingObject = null;
        OperationStatus response = api.settingsUpdate(appId, versionId, listOfAppVersionSettingObject);
        // TODO: test validations
    }

    /**
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. \&quot;appID\&quot; specifies the LUIS app ID. \&quot;versionId\&quot; specifies the version number of the LUIS app. For example, \&quot;0.1\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trainGetStatusTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        List<ModelTrainingInfo> response = api.trainGetStatus(appId, versionId);
        // TODO: test validations
    }

    /**
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trainTrainVersionTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        EnqueueTrainingResponse response = api.trainTrainVersion(appId, versionId);
        // TODO: test validations
    }

    /**
     * Creates a new version from the selected version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsCloneTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        TaskUpdateObject versionCloneObject = null;
        String response = api.versionsClone(appId, versionId, versionCloneObject);
        // TODO: test validations
    }

    /**
     * Deletes an application version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsDeleteTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        OperationStatus response = api.versionsDelete(appId, versionId);
        // TODO: test validations
    }

    /**
     * Deleted an unlabelled utterance in a version of the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsDeleteUnlabelledUtteranceTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        String utterance = null;
        OperationStatus response = api.versionsDeleteUnlabelledUtterance(appId, versionId, utterance);
        // TODO: test validations
    }

    /**
     * Exports a LUIS application to JSON format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsExportTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        LuisApp response = api.versionsExport(appId, versionId);
        // TODO: test validations
    }

    /**
     * Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsGetTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        VersionInfo response = api.versionsGet(appId, versionId);
        // TODO: test validations
    }

    /**
     * Imports a new version into a LUIS application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsImportTest() throws ApiException {
        UUID appId = null;
        LuisApp luisApp = null;
        String versionId = null;
        String response = api.versionsImport(appId, luisApp, versionId);
        // TODO: test validations
    }

    /**
     * Gets a list of versions for this application ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsListTest() throws ApiException {
        UUID appId = null;
        Integer skip = null;
        Integer take = null;
        List<VersionInfo> response = api.versionsList(appId, skip, take);
        // TODO: test validations
    }

    /**
     * Updates the name or description of the application version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionsUpdateTest() throws ApiException {
        UUID appId = null;
        String versionId = null;
        TaskUpdateObject versionUpdateObject = null;
        OperationStatus response = api.versionsUpdate(appId, versionId, versionUpdateObject);
        // TODO: test validations
    }

}
