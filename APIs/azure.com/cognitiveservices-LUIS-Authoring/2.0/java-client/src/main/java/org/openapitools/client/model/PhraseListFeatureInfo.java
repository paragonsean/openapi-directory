/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Phraselist Feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:40.225027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhraseListFeatureInfo {
  public static final String SERIALIZED_NAME_IS_EXCHANGEABLE = "isExchangeable";
  @SerializedName(SERIALIZED_NAME_IS_EXCHANGEABLE)
  private Boolean isExchangeable;

  public static final String SERIALIZED_NAME_PHRASES = "phrases";
  @SerializedName(SERIALIZED_NAME_PHRASES)
  private String phrases;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public PhraseListFeatureInfo() {
  }

  public PhraseListFeatureInfo isExchangeable(Boolean isExchangeable) {
    this.isExchangeable = isExchangeable;
    return this;
  }

  /**
   * An exchangeable phrase list feature are serves as single feature to the LUIS underlying training algorithm. It is used as a lexicon lookup feature where its value is 1 if the lexicon contains a given word or 0 if it doesnâ€™t. Think of an exchangeable as a synonyms list. A non-exchangeable phrase list feature has all the phrases in the list serve as separate features to the underlying training algorithm. So, if you your phrase list feature contains 5 phrases, they will be mapped to 5 separate features. You can think of the non-exchangeable phrase list feature as an additional bag of words that you are willing to add to LUIS existing vocabulary features. Think of a non-exchangeable as set of different words. Default value is true.
   * @return isExchangeable
   */
  @javax.annotation.Nullable
  public Boolean getIsExchangeable() {
    return isExchangeable;
  }

  public void setIsExchangeable(Boolean isExchangeable) {
    this.isExchangeable = isExchangeable;
  }


  public PhraseListFeatureInfo phrases(String phrases) {
    this.phrases = phrases;
    return this;
  }

  /**
   * A list of comma-separated values.
   * @return phrases
   */
  @javax.annotation.Nullable
  public String getPhrases() {
    return phrases;
  }

  public void setPhrases(String phrases) {
    this.phrases = phrases;
  }


  public PhraseListFeatureInfo id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * A six-digit ID used for Features.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PhraseListFeatureInfo isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Indicates if the feature is enabled.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public PhraseListFeatureInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Feature.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhraseListFeatureInfo phraseListFeatureInfo = (PhraseListFeatureInfo) o;
    return Objects.equals(this.isExchangeable, phraseListFeatureInfo.isExchangeable) &&
        Objects.equals(this.phrases, phraseListFeatureInfo.phrases) &&
        Objects.equals(this.id, phraseListFeatureInfo.id) &&
        Objects.equals(this.isActive, phraseListFeatureInfo.isActive) &&
        Objects.equals(this.name, phraseListFeatureInfo.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isExchangeable, phrases, id, isActive, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhraseListFeatureInfo {\n");
    sb.append("    isExchangeable: ").append(toIndentedString(isExchangeable)).append("\n");
    sb.append("    phrases: ").append(toIndentedString(phrases)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhraseListFeatureInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhraseListFeatureInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhraseListFeatureInfo is not found in the empty JSON string", PhraseListFeatureInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhraseListFeatureInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhraseListFeatureInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("phrases") != null && !jsonObj.get("phrases").isJsonNull()) && !jsonObj.get("phrases").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phrases` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phrases").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhraseListFeatureInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhraseListFeatureInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhraseListFeatureInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhraseListFeatureInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PhraseListFeatureInfo>() {
           @Override
           public void write(JsonWriter out, PhraseListFeatureInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhraseListFeatureInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhraseListFeatureInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhraseListFeatureInfo
   * @throws IOException if the JSON string is invalid with respect to PhraseListFeatureInfo
   */
  public static PhraseListFeatureInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhraseListFeatureInfo.class);
  }

  /**
   * Convert an instance of PhraseListFeatureInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

