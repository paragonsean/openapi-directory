/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object model of an application version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:40.225027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionInfo {
  public static final String SERIALIZED_NAME_ASSIGNED_ENDPOINT_KEY = "assignedEndpointKey";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_ENDPOINT_KEY)
  private Map<String, String> assignedEndpointKey = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_ENDPOINT_HITS_COUNT = "endpointHitsCount";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_HITS_COUNT)
  private Integer endpointHitsCount;

  public static final String SERIALIZED_NAME_ENDPOINT_URL = "endpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private String endpointUrl;

  public static final String SERIALIZED_NAME_ENTITIES_COUNT = "entitiesCount";
  @SerializedName(SERIALIZED_NAME_ENTITIES_COUNT)
  private Integer entitiesCount;

  public static final String SERIALIZED_NAME_EXTERNAL_API_KEYS = "externalApiKeys";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_API_KEYS)
  private Object externalApiKeys;

  public static final String SERIALIZED_NAME_INTENTS_COUNT = "intentsCount";
  @SerializedName(SERIALIZED_NAME_INTENTS_COUNT)
  private Integer intentsCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME)
  private OffsetDateTime lastModifiedDateTime;

  public static final String SERIALIZED_NAME_LAST_PUBLISHED_DATE_TIME = "lastPublishedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_PUBLISHED_DATE_TIME)
  private OffsetDateTime lastPublishedDateTime;

  public static final String SERIALIZED_NAME_LAST_TRAINED_DATE_TIME = "lastTrainedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_TRAINED_DATE_TIME)
  private OffsetDateTime lastTrainedDateTime;

  /**
   * The current training status.
   */
  @JsonAdapter(TrainingStatusEnum.Adapter.class)
  public enum TrainingStatusEnum {
    NEEDS_TRAINING("NeedsTraining"),
    
    IN_PROGRESS("InProgress"),
    
    TRAINED("Trained");

    private String value;

    TrainingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrainingStatusEnum fromValue(String value) {
      for (TrainingStatusEnum b : TrainingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrainingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrainingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrainingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrainingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrainingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAINING_STATUS = "trainingStatus";
  @SerializedName(SERIALIZED_NAME_TRAINING_STATUS)
  private TrainingStatusEnum trainingStatus;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public VersionInfo() {
  }

  public VersionInfo assignedEndpointKey(Map<String, String> assignedEndpointKey) {
    this.assignedEndpointKey = assignedEndpointKey;
    return this;
  }

  public VersionInfo putAssignedEndpointKeyItem(String key, String assignedEndpointKeyItem) {
    if (this.assignedEndpointKey == null) {
      this.assignedEndpointKey = new HashMap<>();
    }
    this.assignedEndpointKey.put(key, assignedEndpointKeyItem);
    return this;
  }

  /**
   * The endpoint key.
   * @return assignedEndpointKey
   */
  @javax.annotation.Nullable
  public Map<String, String> getAssignedEndpointKey() {
    return assignedEndpointKey;
  }

  public void setAssignedEndpointKey(Map<String, String> assignedEndpointKey) {
    this.assignedEndpointKey = assignedEndpointKey;
  }


  public VersionInfo createdDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  /**
   * The version&#39;s creation timestamp.
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }


  public VersionInfo endpointHitsCount(Integer endpointHitsCount) {
    this.endpointHitsCount = endpointHitsCount;
    return this;
  }

  /**
   * Number of calls made to this endpoint.
   * @return endpointHitsCount
   */
  @javax.annotation.Nullable
  public Integer getEndpointHitsCount() {
    return endpointHitsCount;
  }

  public void setEndpointHitsCount(Integer endpointHitsCount) {
    this.endpointHitsCount = endpointHitsCount;
  }


  public VersionInfo endpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * The Runtime endpoint URL for this model version.
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public String getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public VersionInfo entitiesCount(Integer entitiesCount) {
    this.entitiesCount = entitiesCount;
    return this;
  }

  /**
   * Number of entities in this model.
   * @return entitiesCount
   */
  @javax.annotation.Nullable
  public Integer getEntitiesCount() {
    return entitiesCount;
  }

  public void setEntitiesCount(Integer entitiesCount) {
    this.entitiesCount = entitiesCount;
  }


  public VersionInfo externalApiKeys(Object externalApiKeys) {
    this.externalApiKeys = externalApiKeys;
    return this;
  }

  /**
   * External keys.
   * @return externalApiKeys
   */
  @javax.annotation.Nullable
  public Object getExternalApiKeys() {
    return externalApiKeys;
  }

  public void setExternalApiKeys(Object externalApiKeys) {
    this.externalApiKeys = externalApiKeys;
  }


  public VersionInfo intentsCount(Integer intentsCount) {
    this.intentsCount = intentsCount;
    return this;
  }

  /**
   * Number of intents in this model.
   * @return intentsCount
   */
  @javax.annotation.Nullable
  public Integer getIntentsCount() {
    return intentsCount;
  }

  public void setIntentsCount(Integer intentsCount) {
    this.intentsCount = intentsCount;
  }


  public VersionInfo lastModifiedDateTime(OffsetDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

  /**
   * Timestamp of the last update.
   * @return lastModifiedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(OffsetDateTime lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }


  public VersionInfo lastPublishedDateTime(OffsetDateTime lastPublishedDateTime) {
    this.lastPublishedDateTime = lastPublishedDateTime;
    return this;
  }

  /**
   * Timestamp when was last published.
   * @return lastPublishedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPublishedDateTime() {
    return lastPublishedDateTime;
  }

  public void setLastPublishedDateTime(OffsetDateTime lastPublishedDateTime) {
    this.lastPublishedDateTime = lastPublishedDateTime;
  }


  public VersionInfo lastTrainedDateTime(OffsetDateTime lastTrainedDateTime) {
    this.lastTrainedDateTime = lastTrainedDateTime;
    return this;
  }

  /**
   * Timestamp of the last time the model was trained.
   * @return lastTrainedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTrainedDateTime() {
    return lastTrainedDateTime;
  }

  public void setLastTrainedDateTime(OffsetDateTime lastTrainedDateTime) {
    this.lastTrainedDateTime = lastTrainedDateTime;
  }


  public VersionInfo trainingStatus(TrainingStatusEnum trainingStatus) {
    this.trainingStatus = trainingStatus;
    return this;
  }

  /**
   * The current training status.
   * @return trainingStatus
   */
  @javax.annotation.Nonnull
  public TrainingStatusEnum getTrainingStatus() {
    return trainingStatus;
  }

  public void setTrainingStatus(TrainingStatusEnum trainingStatus) {
    this.trainingStatus = trainingStatus;
  }


  public VersionInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version ID. E.g.: \&quot;0.1\&quot;
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionInfo versionInfo = (VersionInfo) o;
    return Objects.equals(this.assignedEndpointKey, versionInfo.assignedEndpointKey) &&
        Objects.equals(this.createdDateTime, versionInfo.createdDateTime) &&
        Objects.equals(this.endpointHitsCount, versionInfo.endpointHitsCount) &&
        Objects.equals(this.endpointUrl, versionInfo.endpointUrl) &&
        Objects.equals(this.entitiesCount, versionInfo.entitiesCount) &&
        Objects.equals(this.externalApiKeys, versionInfo.externalApiKeys) &&
        Objects.equals(this.intentsCount, versionInfo.intentsCount) &&
        Objects.equals(this.lastModifiedDateTime, versionInfo.lastModifiedDateTime) &&
        Objects.equals(this.lastPublishedDateTime, versionInfo.lastPublishedDateTime) &&
        Objects.equals(this.lastTrainedDateTime, versionInfo.lastTrainedDateTime) &&
        Objects.equals(this.trainingStatus, versionInfo.trainingStatus) &&
        Objects.equals(this.version, versionInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedEndpointKey, createdDateTime, endpointHitsCount, endpointUrl, entitiesCount, externalApiKeys, intentsCount, lastModifiedDateTime, lastPublishedDateTime, lastTrainedDateTime, trainingStatus, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionInfo {\n");
    sb.append("    assignedEndpointKey: ").append(toIndentedString(assignedEndpointKey)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    endpointHitsCount: ").append(toIndentedString(endpointHitsCount)).append("\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    entitiesCount: ").append(toIndentedString(entitiesCount)).append("\n");
    sb.append("    externalApiKeys: ").append(toIndentedString(externalApiKeys)).append("\n");
    sb.append("    intentsCount: ").append(toIndentedString(intentsCount)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    lastPublishedDateTime: ").append(toIndentedString(lastPublishedDateTime)).append("\n");
    sb.append("    lastTrainedDateTime: ").append(toIndentedString(lastTrainedDateTime)).append("\n");
    sb.append("    trainingStatus: ").append(toIndentedString(trainingStatus)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignedEndpointKey");
    openapiFields.add("createdDateTime");
    openapiFields.add("endpointHitsCount");
    openapiFields.add("endpointUrl");
    openapiFields.add("entitiesCount");
    openapiFields.add("externalApiKeys");
    openapiFields.add("intentsCount");
    openapiFields.add("lastModifiedDateTime");
    openapiFields.add("lastPublishedDateTime");
    openapiFields.add("lastTrainedDateTime");
    openapiFields.add("trainingStatus");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("trainingStatus");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionInfo is not found in the empty JSON string", VersionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VersionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointUrl") != null && !jsonObj.get("endpointUrl").isJsonNull()) && !jsonObj.get("endpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUrl").toString()));
      }
      if (!jsonObj.get("trainingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingStatus").toString()));
      }
      // validate the required field `trainingStatus`
      TrainingStatusEnum.validateJsonElement(jsonObj.get("trainingStatus"));
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionInfo>() {
           @Override
           public void write(JsonWriter out, VersionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionInfo
   * @throws IOException if the JSON string is invalid with respect to VersionInfo
   */
  public static VersionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionInfo.class);
  }

  /**
   * Convert an instance of VersionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

